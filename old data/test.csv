owner,repo,github_stars,download_count,experimental_ai_generated_description
021-factory,laravel-debugbar-mcp,1,,"Laravel DebugBar MCP Server provides a bridge between AI assistants and the Laravel DebugBar debugging tool, enabling access to detailed request logs and diagnostic information from Laravel applications. The server exposes tools for retrieving request logs with filtering capabilities and accessing specific debug data like queries, routes, views, and models through a standardized interface. Built with TypeScript and the MCP protocol, it features data formatting to simplify verbose debug output, retry logic for API requests, and relative time calculations for improved readability. This implementation is particularly valuable for developers who need to analyze Laravel application performance and behavior directly through conversational AI."
0xbeedao,mcp-taskwarrior,0,1194,"mcp-taskwarrior is a server implementation by Bruce Kroeze that facilitates task management through Taskwarrior. It provides four essential tools for managing tasks: adding, updating, deleting, and listing tasks, with support for organizing by project and priority levels. Built with TypeScript and using the fastmcp and taskwarrior-lib dependencies, it can be used either through npx or by local installation, making it ideal for users who want to integrate task management capabilities into their AI assistant workflows."
0xbruno,mcpexec,0,,"This MCP server implementation provides a tool for executing local CLI commands asynchronously. Developed by 0xBruno, it uses FastMCP and asyncio to run shell commands securely, handling command arguments with spaces and quotes properly. The server is designed for use cases requiring remote execution of system commands, with built-in error handling for failed commands."
0xdwong,sui-mcp,1,,"Sui MCP server enables AI assistants to interact with the Sui blockchain network through a standardized interface. Built with TypeScript, it provides tools for requesting test tokens from the Sui devnet faucet and integrates with the official Sui SDK. This implementation is particularly valuable for blockchain developers and users who need to test Sui smart contracts or manage wallets through conversational AI."
0xgval,evm-mcp-tools,5,,"EVM MCP Tools provides Ethereum blockchain analysis capabilities directly within Claude AI conversations. It offers a suite of tools for smart contract auditing, wallet analysis, token balance checking, and profitability tracking across Ethereum and compatible chains. The implementation leverages Web3.js, Moralis, and Etherscan APIs to fetch on-chain data, analyze contract security, detect token standards, and calculate wallet profit/loss metrics. Designed for integration with Claude for Desktop, it enables users to perform blockchain analysis tasks without leaving their conversation context, making it particularly valuable for developers, traders, and researchers who need quick access to Ethereum data."
0xgval,twitter-x-mcp-server,1,,"X Tools for Claude MCP is a lightweight toolkit that enables Claude AI to search Twitter with natural language queries and display results based on user intent. Built with Node.js and the Model Context Protocol SDK, it leverages the RapidAPI Twitter154 endpoint to provide advanced search capabilities including filtering by keywords, users, dates, and engagement metrics. The implementation formats tweets with clean markdown, supports pagination for larger result sets, and intelligently adapts its response style based on whether users want raw data viewing or analytical insights, making it particularly valuable for researchers, marketers, and social media analysts who need to quickly access and understand Twitter content."
0xhijo,mcp_twitter,6,513,"MCP Twitter provides direct interaction with Twitter/X through a standardized set of tools, enabling AI models to perform actions like creating posts, replying to tweets, following users, and retrieving profile data. Built by 0xhijo, it supports two authentication methods (API credentials or direct Twitter login) and exposes 11 distinct Twitter functionalities through a Node.js server. The implementation is designed for seamless integration with Claude through the claude_mcp_config.json file, making it particularly valuable for automated social media management, content creation, and Twitter data analysis without leaving the conversation interface."
0xkoda,eth-mcp,5,,"This Ethereum RPC MCP server provides a bridge to interact with the Ethereum blockchain through standard JSON-RPC calls. Developed by Koda, it exposes three essential tools: eth_getCode for retrieving contract bytecode, eth_gasPrice for checking current gas prices, and eth_getBalance for querying account balances. The implementation uses axios for making HTTP requests to a public Ethereum RPC endpoint (llamarpc) and includes error handling with human-readable responses. Ideal for AI assistants that need to perform basic Ethereum blockchain queries without requiring complex wallet integration."
0xkoda,mcp-rust-docs,30,,"This MCP server fetches and returns documentation for Rust crates from docs.rs, providing essential context for LLMs working with Rust code. It implements a single tool, 'lookup_crate_docs', which retrieves HTML documentation, converts it to plain text, and truncates it if necessary. The server is designed for easy integration with AI assistants like Claude Desktop and can be tested using the MCP Inspector."
0xrag,mcp,0,,"A lightweight MCP server built with TypeScript and Coinbase's AgentKit, designed to provide a flexible wallet interaction framework using Viem on the Base Sepolia testnet. The implementation sets up a standard MCP server with tool listing and execution capabilities, generating a random wallet client and exposing blockchain-related actions through a stdio transport mechanism."
0xshellming,mcp-summarizer,70,,"MCP Server for AI Summarization, Support for multiple content types:
  - Plain text
  - Web pages
  - PDF documents
  - EPUB books
  - HTML content"
0xzap,worldminiapp_mcp,2,,"WorldMiniApps MCP Server provides AI assistants with access to World ID and MiniApps documentation through vector search capabilities. The implementation uses FastMCP to expose query tools that retrieve relevant documentation chunks from locally stored vector databases built with OpenAI embeddings and SKLearnVectorStore. It supports both World ID authentication documentation and the World MiniApps JavaScript SDK, making it particularly valuable for developers building applications on the World ecosystem who want to access technical documentation without leaving their Cursor editor environment."
13rac1,videocapture-mcp,6,,"VideoCapture MCP provides AI assistants with access to webcams and video sources through OpenCV, enabling image capture and camera control capabilities. The server exposes tools for capturing still images, managing camera connections, adjusting video properties like brightness and resolution, and performing basic image transformations such as horizontal flipping. Developed by 13rac1, this implementation focuses on still image capture only (no video streaming) and is designed to integrate seamlessly with Claude Desktop, making it ideal for AI applications that need to analyze real-world objects or environments through webcam imagery."
1595901624,qrcode-mcp,5,,"This client implementation allows users to retrieve the latest proxy nodes and generate QR codes for them. It utilizes the Model Context Protocol SDK and the QRCode library to fetch proxy information and create visual representations. The tool is designed to simplify access to up-to-date proxy data, making it useful for applications that require quick and easy proxy configuration."
1broseidon,mcp-jira-server,7,,"This Jira MCP server, developed using TypeScript and the Model Context Protocol SDK, provides AI assistants with a standardized interface to interact with Jira's REST API. It offers tools for managing issues, including creation, listing, updating, and deletion, as well as adding comments. The server abstracts the complexities of Jira's API, handling authentication and request formatting. It's particularly valuable for AI systems focused on project management and issue tracking, enabling use cases such as automated task creation, status updates, and project overview generation. The implementation includes error handling for common Jira-specific scenarios and formats issue information for easy consumption by AI assistants."
1mcp-app,agent,7,660,"1MCP (One MCP) is a unified server implementation that aggregates multiple MCP servers into a single interface, reducing system resource usage and simplifying configuration management across different AI assistants. Developed by William Xu, it supports both stdio and SSE transport methods, handles dynamic configuration reloading without server restart, and enables filtering of servers by tags. The implementation allows AI tools like Claude Desktop, Cursor, Cherry Studio, and Roo Code to share access to the same underlying MCP servers, making it particularly valuable for users working with multiple AI assistants that need access to the same tools and resources."
1panel-dev,mcp-1panel,101,,"MCP-1Panel is a server implementation that provides AI assistants with direct access to 1Panel server management capabilities. It exposes tools for managing websites, databases, SSL certificates, and applications through a standardized interface. Built with Go, it supports both stdio and SSE transport modes, authenticates with 1Panel via access tokens, and handles API requests through a client that manages error states appropriately. This implementation is particularly valuable for server administrators who want to monitor system information, deploy applications like MySQL and OpenResty, or manage web infrastructure directly through conversational AI without switching contexts."
1rb,mongo-mcp,9,,"This MongoDB MCP server implementation enables interaction with MongoDB databases through the Model Context Protocol. It utilizes TypeScript and the MongoDB driver to provide a bridge between MCP clients and MongoDB operations. The server is designed to run in various environments, including Windows (Git Bash and WSL) and Unix-like systems, making it versatile for different development setups. It's particularly useful for projects that require seamless integration of MongoDB capabilities into MCP-based workflows."
1yhy,oss-mcp,1,,"OSS-MCP is a server implementation that provides a bridge between AI assistants and Object Storage Services (OSS), specifically Ali OSS. Developed by 1yhy, this TypeScript-based server enables file operations through a RESTful API, allowing assistants to upload, download, list, and manage files in cloud storage. The implementation leverages the ali-oss SDK and Express framework to handle requests efficiently, with environment-based configuration for secure credential management. It's particularly valuable for use cases requiring document management, media file handling, or backup operations without leaving the assistant interface."
1yhy,figma-context-mcp,8,,"Figma-Context-MCP is a server implementation that bridges AI assistants with the Figma design platform, enabling direct access to Figma file data through the MCP protocol. It transforms complex Figma API responses into simplified, structured design information that includes layout properties, styling, and text content, making it easier for AI assistants to understand and reason about design files. The server provides tools for retrieving complete Figma files or specific nodes, downloading images, and processing design hierarchies - making it particularly valuable for design review workflows, code generation from designs, and collaborative design discussions."
21st-dev,magic-mcp,1502,,"This MCP server implementation provides a bridge to the 21st.dev/magic API, enabling AI assistants to interact with frontend development tasks. Developed by sergeibynas, it offers tools for working with frontend code directly from IDEs like Cursor, WindSurf, and VSCode with Cline. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on secure API key management and is designed to streamline frontend development workflows. The implementation is particularly useful for AI applications that need to automate or assist with frontend coding tasks, offering a unique approach to AI-assisted web development."
oyasimi1209,magic-mcp,1,,"Magic MCP Server provides a bridge to 21st.dev's Magic API, enabling AI assistants to generate UI components and search for logos. Developed by serafim@21st.dev, this TypeScript implementation offers three specialized tools: creating UI components from descriptions, fetching existing components for inspiration, and searching for company logos in various formats (SVG, JSX, TSX). The server authenticates with the 21st.dev API using an API key and is designed to be easily integrated with AI clients like Cline and Windsurf through Smithery. Ideal for developers who want to quickly generate or find UI components and brand assets without leaving their AI assistant workflow."
29decibel,record-to-markdown,0,,"This Record to Markdown MCP implementation, developed by 29decibel, provides a Python-based interface for AI assistants to save conversation content to markdown files or Apple Notes. Built using libraries like httpx, markdown2, and mcp, it offers tools for converting markdown to HTML and creating notes with AppleScript integration. The implementation focuses on efficient content preservation and formatting, making it easier for AI models to store and organize conversation outputs. It's particularly useful for users of Claude desktop who want to automatically save their AI interactions, enabling easy reference, sharing, or further analysis of conversation content without manual copying and pasting."
2b3pro,markdown2pdf-mcp,2,,"This Markdown to PDF conversion MCP server, developed by 2b3pro, provides a robust solution for generating PDF documents from Markdown content. Built with TypeScript and leveraging Puppeteer for modern PDF generation, it offers features like syntax highlighting, custom CSS styling, and optional watermarking. The server implements file naming conflict resolution, configurable paper formats, and uses Chrome v131.0.6778.204 for consistent rendering across installations. By abstracting the complexities of PDF creation, it enables AI systems to easily produce formatted documents from Markdown input. This implementation is particularly valuable for applications requiring programmatic document generation, facilitating use cases such as report creation, documentation publishing, and content distribution in PDF format."
2b3pro,roam-research-mcp,38,,"This Roam Research MCP server, developed by Ian Shen / 2B3 PRODUCTIONS LLC, provides AI assistants with a standardized interface to interact with Roam Research graphs. Built using TypeScript and leveraging the Roam Research API SDK, it offers capabilities for searching blocks, creating and manipulating pages and blocks, and performing batch operations. The server implements recursive block reference resolution and markdown conversion for content retrieval. It's designed for flexibility, supporting various Roam Research operations through a set of eleven core tools. This implementation is particularly valuable for researchers, writers, and knowledge workers, enabling use cases such as automated note-taking, content organization, and intelligent information retrieval within Roam Research graphs."
304techmaven,plaid-mcp-server,4,,"Plaid MCP Server provides a robust bridge to the Plaid financial API, enabling AI assistants to securely access and interact with bank account data, transactions, and authentication flows. Built with TypeScript and supporting both stdio and SSE transports, it offers tools for creating link tokens, exchanging public tokens, syncing transactions, and handling Plaid webhooks. The implementation is particularly valuable for financial analysis, automated transaction tracking, and building AI-powered personal finance assistants."
3rzy,make-mcp-integration-issue,0,,"This MCP server implementation provides integration with Make (formerly Integromat) for automating workflows. It allows users to connect Make scenarios with MCP-enabled AI assistants, enabling automated task execution and data processing. The server is designed for developers looking to enhance their AI workflows with Make's extensive library of app integrations and automation capabilities."
54rt1n,container-mcp,4,,"Container-MCP provides a secure, sandboxed environment for executing code, running commands, accessing files, and performing web operations on behalf of large language models. Built by 54rt1n, it implements multiple layers of security including container isolation, AppArmor profiles, Firejail sandboxing, and strict resource limits to ensure safe execution of potentially risky operations. The architecture uses domain-specific managers for different operation types (Bash, Python, file operations, web browsing) and runs inside an Ubuntu container with carefully controlled permissions and access restrictions. This implementation is particularly valuable for AI workflows requiring secure tool execution without exposing the host system to potential risks."
5ajaki,veri5ight,1,,"This MCP server for local Ethereum node operations, developed by 5pence, provides a simplified interface for interacting with ENS DAO functions. Built with TypeScript and leveraging the ethers.js library, it offers a streamlined approach to Ethereum network interactions. The server implements environment variable configuration for node URL management and error handling. By abstracting the complexities of direct Ethereum node communication, it enables AI systems to easily perform ENS DAO operations. This implementation is particularly valuable for applications requiring programmatic access to ENS DAO functions, facilitating use cases such as automated domain management, governance participation, and decentralized identity operations within the Ethereum ecosystem."
5ajaki,mcp-etherscan-server,1,,"This MCP Etherscan server, developed by 5pence, provides Ethereum blockchain data tools via Etherscan's API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers features like balance checking, transaction history viewing, token transfer tracking, contract ABI fetching, gas price monitoring, and ENS name resolution. The implementation focuses on simplifying access to Ethereum blockchain data through a standardized MCP interface. It's particularly useful for developers and analysts looking to incorporate Ethereum data into their applications without dealing directly with Etherscan's API complexities, enabling use cases like wallet monitoring, transaction analysis, and smart contract interactions."
5ajaki,safe-mcp-server,0,,"This Safe MCP server, developed by 5pence, enables interaction with Safe (formerly Gnosis Safe) smart contract wallets through the Model Context Protocol. Built with TypeScript and leveraging the MCP SDK, it provides tools for querying Safe transactions, retrieving multisig transaction details, and decoding transaction data. The implementation focuses on simplifying access to Safe's functionality through a standardized interface, with default integration to the Safe Transaction API mainnet endpoint. It's particularly useful for developers and AI models needing to interact with Safe wallets, enabling use cases like transaction monitoring, multisig management, and smart contract interaction analysis without dealing directly with blockchain complexities."
611711dark,mcp_calculate_server,3,,"MCP Calculate Server provides mathematical computation capabilities through a Python-based server that leverages the SymPy library for symbolic mathematics. Developed by 611711Dark, this implementation enables AI assistants to perform complex calculations, equation solving, and symbolic manipulation without needing direct access to mathematical libraries. The server requires Python 3.11 or higher and depends on both the MCP framework and SymPy, making it ideal for use cases requiring advanced mathematical operations within AI assistant conversations."
7gugu,zip-mcp,9,,"A Model Context Protocol server that provides ZIP compression capabilities using fastMCP and zip.js. This implementation allows AI assistants to compress and decompress files directly through MCP, enabling efficient file handling without leaving the conversation interface. The server exposes compression utilities as tools that can be called programmatically, making it valuable for workflows involving file management, data transfer, and storage optimization."
8bitgentleman,activitywatch-mcp-server,8,,"This MCP server connects to ActivityWatch, enabling LLMs like Claude to interact with time tracking data. It provides tools for listing buckets, executing AQL queries, and retrieving raw events from any bucket. Developed by Matt Vogel, it's designed to enhance productivity analysis and time management capabilities for AI assistants working with personal activity data."
8bitsats,grok-mcp,3,,"GrokArt is an MCP server that connects to the xAI/Grok image generation API, allowing AI assistants to generate images based on text prompts. The implementation supports multiple image generation (up to 10 images per request), different response formats (URL or base64 JSON), and includes proper error handling with lazy API key initialization. Built with Docker and Kubernetes deployment support, GrokArt is designed for seamless integration with Claude Desktop and other MCP clients, making it particularly valuable for creative workflows that require image generation capabilities without leaving the conversation interface."
8bitsats,grok_mcp,0,,"Grok AI MCP Server integrates with xAI's Grok API to provide AI-driven analysis tools for the Solana blockchain. Built by 8bitsats, it exposes four main tools through a standard I/O transport: analyzing transactions with detailed insights about program interactions and token transfers, investigating Solana addresses, interpreting images using Grok's vision capabilities, and answering general queries with optional context and image support. The server leverages both text-only and vision models from Grok, making it particularly valuable for blockchain developers and analysts who need detailed explanations of on-chain activities without leaving their workflow."
9ninety,mcpnotes,21,952,"This MCP notes server, developed by an unnamed author, provides a simple yet powerful tool for recording and managing notes with AI models. Built using TypeScript and leveraging the Model Context Protocol SDK, it offers both an MCP server and a web server interface for flexible note-taking capabilities. The implementation uses DynamoDB for data storage and includes features for creating, retrieving, and managing notes. By abstracting the complexities of note management and AI integration, it enables seamless interaction between AI assistants and user-generated content. This server is particularly useful for applications requiring persistent memory and context management, facilitating use cases such as personal assistants, knowledge management systems, and collaborative AI-enhanced note-taking platforms."
9olidity,mcp-server-pentest,13,,"MCP Server Pentest is a browser automation tool that enables AI assistants to perform security testing for web applications, specifically focusing on XSS and SQL injection vulnerability detection. Built on Playwright and Firefox, it provides tools for automatically testing URL parameters against common attack vectors, capturing screenshots of vulnerable pages, and manipulating web elements through various interaction methods. The server includes comprehensive error handling with fallback mechanisms for strict mode violations, making it particularly valuable for security professionals who need to conduct preliminary vulnerability assessments without leaving their AI assistant interface."
a01110946,rhinomcp,6,,"RhinoMCP connects Rhino3D to Claude AI through a WebSocket-based bridge, enabling AI-assisted 3D modeling capabilities. The implementation consists of three main components: a socket server running inside Rhino's Python environment, a Python client that communicates with the Rhino plugin, and an MCP server that exposes Rhino functionality as tools. It allows Claude to create and manipulate 3D geometry, run Python scripts in Rhino's context, and interact with the modeling environment, making it particularly valuable for architectural design, product development, and other 3D modeling workflows that benefit from AI assistance."
a0dotrun,expose,7,,"Expose is a proxy server implementation that enables communication between clients and MCP-compatible services through JSON-RPC. Built by a0dotrun, it provides a Go-based middleware that handles standard MCP methods like 'initialize', 'tools/list', and 'tools/call' by forwarding requests to a configured backend URL while maintaining proper error handling and response formatting. The server can operate over standard I/O streams with graceful shutdown capabilities, making it suitable for integrating existing services with MCP clients or creating lightweight proxies between different MCP implementations."
a21071,mcp-postgres,0,,"A PostgreSQL database integration server that provides type-safe CRUD operations for user data through MCP tools. Built with TypeScript and Prisma, it enables easy database interactions with a standardized interface, supporting operations like retrieving, adding, updating, and deleting user records with robust input validation."
a2amarket,mcp-clamav,1,,"ClamAV MCP provides virus scanning capabilities for files by integrating with the ClamAV antivirus engine. This implementation allows AI assistants to scan files for malware by accepting base64-encoded file data and returning scan results through a simple API endpoint. The server runs as a FastMCP instance that processes scan requests, temporarily stores files for scanning, and executes the clamscan command with proper error handling and cleanup. Particularly useful for security-focused applications that need to validate file safety before processing."
a2xdeveloper,tagesschau-mcp-server,1,,"Provides a bridge to the Tagesschau news API, enabling AI assistants to fetch and analyze German news articles from categories like domestic, foreign, economic and sports coverage. Built with Go and the MCP protocol, it exposes tools for retrieving latest headlines and detailed article content through a clean interface. This implementation is particularly valuable for users who want to access and analyze German news content programmatically through natural language interaction."
a37ai,ansible-tower-mcp,2,,"Ansible Tower MCP Server provides a bridge between LLMs and Ansible Tower/AWX instances, enabling AI assistants to manage infrastructure automation tasks through a comprehensive API interface. The implementation supports inventory, host, group, job template, project, credential, and organization management with secure authentication options via username/password or token. Built with Python using the FastMCP framework, it handles pagination, error management, and various response formats while maintaining secure connections to Ansible Tower instances. This server is particularly valuable for DevOps workflows where infrastructure management and deployment automation need to be integrated directly into AI assistant conversations."
aallsbury,qb-time-mcp-server,4,,"This QuickBooks Time MCP server, developed by an AI assistant, provides a unified interface to QuickBooks Time API functionality. Built with Python and leveraging libraries like requests and pydantic, it offers a comprehensive set of endpoints for managing jobcodes, timesheets, users, projects, and generating reports. The server implements robust error handling, pagination support, and date parameter formatting. By consolidating multiple QuickBooks Time services into a single, efficient interface, it simplifies integration and data access for developers. This implementation is particularly valuable for businesses using QuickBooks Time, enabling use cases such as automated time tracking, payroll processing, project management, and custom reporting workflows."
aantti,mcp-netbird,28,,"A Netbird API integration server that enables AI assistants to manage virtual private networks through natural language. Built by aantti and derived from Grafana's MCP implementation, it provides tools for listing and managing peers, groups, and access policies in a Netbird network. Particularly valuable for network administrators who want to monitor and configure their Netbird VPN infrastructure through conversational AI."
aaomidi,mcp-bazel,5,,"A Bazel integration server for the MCP protocol that enables AI assistants to interact with Bazel build systems. It provides tools for building targets, running tests, finding dependencies and reverse dependencies, and identifying source files within a Bazel workspace. The implementation wraps Bazel command-line operations in a structured API, making it easier for AI systems to analyze and manipulate Bazel projects without needing to understand the underlying command syntax."
aapanel,mcp-server,5,,"aaPanel MCP Server provides a bridge between AI assistants and aaPanel web hosting control panel, enabling management of websites, databases, Docker containers, and system resources through a standardized interface. Built with Go, this implementation authenticates with the aaPanel API using environment variables for base URL and API token, then translates MCP tool calls into appropriate aaPanel API requests. The server exposes functionality for retrieving system information, managing PHP websites, querying MySQL databases, handling Docker containers and images, and configuring email accounts, making it ideal for automating web hosting administration tasks through AI-powered workflows."
aaronsb,confluence-cloud-mcp,13,,"This Confluence Cloud MCP server, developed using TypeScript and the Model Context Protocol SDK, provides a standardized interface for AI assistants to interact with Atlassian Confluence Cloud. It offers tools for space management, page operations, content searching, and label handling, enabling seamless integration of Confluence functionality into AI workflows. The implementation stands out by abstracting Confluence's API complexities, allowing AI models to perform tasks like creating pages, managing content, and retrieving information without direct API knowledge. It's particularly valuable for teams looking to automate documentation processes, enhance knowledge management, or build AI-powered tools that leverage Confluence data and capabilities."
aaronsb,google-workspace-mcp,44,,"This Google Workspace MCP server, developed by Aaron Bockelie, enables AI agents to interact with Gmail and Google Calendar through a simplified interface. Built with TypeScript and leveraging the Google APIs, it provides functionality for email operations, calendar management, and multi-account support. The implementation focuses on robust OAuth handling, detailed error messaging, and a modular design for easy expansion to additional Google services. It's particularly useful for AI assistants and applications needing seamless integration with Google Workspace, enabling use cases such as email triage, meeting scheduling, and productivity automation without dealing directly with the complexities of individual Google APIs."
