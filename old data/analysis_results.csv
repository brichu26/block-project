owner,repo,popularity_score,risk_score,doc_quality_score,doc_quality_adjustment,adjusted_risk_score,risk_category,description
prisma,prisma,3.7,0,7.6,-2.2800000000000002,3.4280000000000004,MINIMAL,"Prisma's MCP server enables LLMs to manage Prisma Postgres databases through natural language commands. Available via the Prisma CLI command 'prisma platform mcp --early-access', it allows AI assistants to perform operations like creating database instances, running schema migrations, and managing database tables. The server integrates with popular AI tools including Cursor, Windsurf, Claude Code, Claude Desktop, and the OpenAI Agents SDK, making it accessible across multiple development environments for database management tasks."
src,everything,2.5,0,0,-0.0,2.5,MINIMAL,"This MCP server, developed by Anthropic, serves as a comprehensive demo suite for MCP client implementations. It exercises the full range of MCP protocol features including prompts, tools, resources, and sampling. Built in TypeScript, the server implements various tools like echo, math operations, and LLM sampling, as well as 100 test resources in both plaintext and binary formats. By providing a standardized testing ground, this server enables MCP client developers to validate their implementations against a wide array of protocol functionalities. It is particularly useful for ensuring compatibility, debugging edge cases, and demonstrating the capabilities of the MCP protocol in a controlled environment."
src,google-maps,2.5,0,0,-0.0,2.5,MINIMAL,"This Google Maps MCP server, developed by Anthropic, provides a comprehensive interface for language models to interact with Google Maps data and services. It enables AI agents to perform geocoding, reverse geocoding, place searches, and retrieve detailed location information through a controlled API. The server handles API key authentication. By exposing core Google Maps functionality, it allows AI systems to work with location data, calculate distances and routes, and access place details. This implementation is particularly useful for AI assistants designed to provide location-based recommendations, plan trips, analyze geographic data, or offer insights about places and businesses using Google Maps as a backend."
src,slack,2.5,0,0,-0.0,2.5,MINIMAL,"This Slack MCP Server, developed by the Anthropic team, provides a robust interface for language models to interact with Slack workspaces. It enables AI agents to perform a wide range of Slack-specific tasks including listing channels, posting messages, replying to threads, adding reactions, retrieving channel history, and accessing user information. The implementation distinguishes itself by offering comprehensive Slack API integration, making it ideal for AI-driven workplace communication and automation. By leveraging Slack's Bot User OAuth Tokens, it ensures secure and authorized access to workspace data. This tool is particularly powerful for AI assistants designed to enhance team collaboration, automate routine communication tasks, and provide intelligent insights from Slack conversations."
src,sentry,2.5,0,0,-0.0,2.5,MINIMAL,"This Sentry MCP server, developed by Anthropic, enables AI assistants to retrieve and analyze error reports from Sentry.io. It integrates with the Sentry API to provide detailed issue information including stacktraces, timestamps, and event counts. Built in Python, the implementation handles API authentication and request formatting, exposing Sentry's error tracking capabilities via a standardized MCP interface. By bridging AI models and application monitoring data, this server allows AI systems to inspect and analyze software errors, providing insights into bug patterns and potential fixes. It is particularly useful for AI assistants supporting software development teams in triaging issues, understanding error contexts, and prioritizing debugging efforts based on real-time application performance data."
src,filesystem,2.5,0,0,-0.0,2.5,MINIMAL,"This filesystem MCP server, developed by Anthropic, provides a secure interface for language models to interact with local filesystems. It enables AI agents to read, write, search, and manipulate files and directories through a controlled API. By restricting operations to specified directories and providing advanced editing capabilities, it maintains data security while allowing AI systems to work with file-based data and content. This implementation is particularly useful for AI assistants designed to manage documents, analyze local datasets, or automate file organization tasks using the local filesystem as a backend."
src,fetch,2.5,0,0,-0.0,2.5,MINIMAL,"This fetch MCP server, developed by Anthropic, provides AI assistants with web content retrieval capabilities. It integrates with web servers to fetch and process HTML content, converting it to markdown for easier consumption by language models. Built in Python, the implementation handles URL fetching, content extraction, and HTML-to-markdown conversion. By bridging AI models and web content, this server allows AI systems to access and analyze online information in a structured format. It supports chunked reading of long web pages and offers customization options for user agents and robots.txt handling. The fetch server is particularly useful for AI assistants needing to retrieve and process web-based information, conduct research, or provide summaries of online content."
src,github,2.5,0,0,-0.0,2.5,MINIMAL,"This GitHub MCP server, developed by Anthropic, provides AI assistants with comprehensive access to GitHub's API functionality. It enables operations like file management, repository creation, issue tracking, and advanced code search across GitHub. Built in TypeScript, the implementation handles authentication, request formatting, and exposes GitHub's features through a standardized MCP interface. By bridging AI models and GitHub's development platform, this server allows AI systems to interact with code repositories, manage projects, and analyze development workflows. It is particularly useful for AI assistants supporting software development teams in tasks like code review, project management, and collaborative coding on GitHub."
src,brave-search,2.5,0,0,-0.0,2.5,MINIMAL,"This Brave Search MCP server, developed by ModelContextProtocol, integrates the Brave Search API to provide web and local search capabilities for AI assistants. It offers flexible querying options including pagination, result filtering, and content freshness controls. The implementation handles API authentication and exposes Brave's search functionality through a standardized MCP interface. By bridging AI models and Brave's privacy-focused search engine, this server enables AI systems to retrieve relevant web pages, news articles, and local business information. It is particularly useful for AI assistants needing to gather up-to-date information from the web, conduct research, or provide location-based recommendations while respecting user privacy."
src,puppeteer,2.5,0,0,-0.0,2.5,MINIMAL,"This Puppeteer-based MCP implementation provides a powerful interface for language models to interact with web browsers. Developed by Anthropic, it enables AI agents to perform a wide range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution in real browser environments. The implementation distinguishes itself by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Puppeteer's Chrome/Chromium automation, it ensures high-fidelity web interactions. This tool is particularly powerful for AI-driven web testing, data scraping, and automated web interactions, enabling more sophisticated AI assistants that can directly manipulate web applications. Its integration with Claude Desktop and npm-based installation process make it easily accessible for developers and researchers working on advanced AI projects involving web automation."
baranwang,mcp-tung-shing,1.0,0,3.7,-1.1099999999999999,0.889,MINIMAL,"This MCP implementation, developed by Baran, provides a TypeScript-based interface for working with dates, times, and calendars. Built using the dayjs library and its lunar calendar plugin, it offers tools for parsing, formatting, and manipulating dates in both Gregorian and lunar calendars. The implementation focuses on cross-calendar functionality and internationalization support, making it easier for AI models to handle date-related tasks across different cultural contexts. It's particularly useful for applications requiring date calculations, event scheduling, or cultural date conversions, enabling AI to perform complex calendar operations without needing deep knowledge of various calendar systems."
mikhael-abdallah,mcp-revisor-server,1.0,0,6.7,-2.0100000000000002,0.7989999999999999,MINIMAL,An Azure DevOps pull request review assistant that enables automated code review workflows through MCP. Provides tools for retrieving pull request diffs and creating inline comments programmatically using Azure Personal Access Tokens. Designed to streamline code review processes by allowing AI-powered review and annotation of code changes directly within Azure DevOps pull requests.
cloudflare,workers-mcp,1.3,0,6.8,-2.04,1.096,MINIMAL,"This MCP transport for Cloudflare Workers, developed by Cloudflare, enables seamless integration of MCP capabilities into serverless edge computing environments. Built with TypeScript and leveraging Cloudflare's Workers platform, it provides a standardized interface for deploying MCP-compatible services at the network edge. The implementation supports rapid development and deployment of AI-assisted applications, taking advantage of Cloudflare's global network for low-latency, scalable MCP services. It's particularly useful for developers looking to build AI-powered applications that require edge computing capabilities, such as real-time content processing, personalized user experiences, or distributed AI inference."
shibayu36,mysql-schema-explorer-mcp,1.0,0,2.5,-0.75,0.925,MINIMAL,"MySQL Schema Explorer MCP provides a Go-based server that allows AI assistants to explore and interact with MySQL database schemas. Built by shibayu36, this implementation connects to MySQL databases to expose table structures, relationships, and metadata as MCP resources, making it valuable for database documentation, query building, and schema analysis tasks. The server leverages the mcp-go library to handle protocol communication while using the MySQL driver to extract schema information, enabling AI assistants to understand database architecture without direct database access."
021-factory,laravel-debugbar-mcp,1.0,0,0.9,-0.27,0.973,MINIMAL,"Laravel DebugBar MCP Server provides a bridge between AI assistants and the Laravel DebugBar debugging tool, enabling access to detailed request logs and diagnostic information from Laravel applications. The server exposes tools for retrieving request logs with filtering capabilities and accessing specific debug data like queries, routes, views, and models through a standardized interface. Built with TypeScript and the MCP protocol, it features data formatting to simplify verbose debug output, retry logic for API requests, and relative time calculations for improved readability. This implementation is particularly valuable for developers who need to analyze Laravel application performance and behavior directly through conversational AI."
0xbeedao,mcp-taskwarrior,1.2,0,3.6,-1.08,1.0919999999999999,MINIMAL,"mcp-taskwarrior is a server implementation by Bruce Kroeze that facilitates task management through Taskwarrior. It provides four essential tools for managing tasks: adding, updating, deleting, and listing tasks, with support for organizing by project and priority levels. Built with TypeScript and using the fastmcp and taskwarrior-lib dependencies, it can be used either through npx or by local installation, making it ideal for users who want to integrate task management capabilities into their AI assistant workflows."
0xbruno,mcpexec,1.0,0,3.8,-1.1400000000000001,0.886,MINIMAL,"This MCP server implementation provides a tool for executing local CLI commands asynchronously. Developed by 0xBruno, it uses FastMCP and asyncio to run shell commands securely, handling command arguments with spaces and quotes properly. The server is designed for use cases requiring remote execution of system commands, with built-in error handling for failed commands."
0xdwong,sui-mcp,1.0,0,5.6,-1.6799999999999997,0.8320000000000001,MINIMAL,"Sui MCP server enables AI assistants to interact with the Sui blockchain network through a standardized interface. Built with TypeScript, it provides tools for requesting test tokens from the Sui devnet faucet and integrates with the official Sui SDK. This implementation is particularly valuable for blockchain developers and users who need to test Sui smart contracts or manage wallets through conversational AI."
0xgval,evm-mcp-tools,1.0,0,7.2,-2.16,0.716,MINIMAL,"EVM MCP Tools provides Ethereum blockchain analysis capabilities directly within Claude AI conversations. It offers a suite of tools for smart contract auditing, wallet analysis, token balance checking, and profitability tracking across Ethereum and compatible chains. The implementation leverages Web3.js, Moralis, and Etherscan APIs to fetch on-chain data, analyze contract security, detect token standards, and calculate wallet profit/loss metrics. Designed for integration with Claude for Desktop, it enables users to perform blockchain analysis tasks without leaving their conversation context, making it particularly valuable for developers, traders, and researchers who need quick access to Ethereum data."
0xgval,twitter-x-mcp-server,1.0,0,7.7,-2.31,0.731,MINIMAL,"X Tools for Claude MCP is a lightweight toolkit that enables Claude AI to search Twitter with natural language queries and display results based on user intent. Built with Node.js and the Model Context Protocol SDK, it leverages the RapidAPI Twitter154 endpoint to provide advanced search capabilities including filtering by keywords, users, dates, and engagement metrics. The implementation formats tweets with clean markdown, supports pagination for larger result sets, and intelligently adapts its response style based on whether users want raw data viewing or analytical insights, making it particularly valuable for researchers, marketers, and social media analysts who need to quickly access and understand Twitter content."
0xhijo,mcp_twitter,1.0,0,6.9,-2.0700000000000003,0.2929999999999999,MINIMAL,"MCP Twitter provides direct interaction with Twitter/X through a standardized set of tools, enabling AI models to perform actions like creating posts, replying to tweets, following users, and retrieving profile data. Built by 0xhijo, it supports two authentication methods (API credentials or direct Twitter login) and exposes 11 distinct Twitter functionalities through a Node.js server. The implementation is designed for seamless integration with Claude through the claude_mcp_config.json file, making it particularly valuable for automated social media management, content creation, and Twitter data analysis without leaving the conversation interface."
0xkoda,eth-mcp,1.0,0,6.6,-1.9799999999999998,0.802,MINIMAL,"This Ethereum RPC MCP server provides a bridge to interact with the Ethereum blockchain through standard JSON-RPC calls. Developed by Koda, it exposes three essential tools: eth_getCode for retrieving contract bytecode, eth_gasPrice for checking current gas prices, and eth_getBalance for querying account balances. The implementation uses axios for making HTTP requests to a public Ethereum RPC endpoint (llamarpc) and includes error handling with human-readable responses. Ideal for AI assistants that need to perform basic Ethereum blockchain queries without requiring complex wallet integration."
0xkoda,mcp-rust-docs,1.0,0,7.1,-2.13,0.787,MINIMAL,"This MCP server fetches and returns documentation for Rust crates from docs.rs, providing essential context for LLMs working with Rust code. It implements a single tool, 'lookup_crate_docs', which retrieves HTML documentation, converts it to plain text, and truncates it if necessary. The server is designed for easy integration with AI assistants like Claude Desktop and can be tested using the MCP Inspector."
0xrag,mcp,1.0,0,0,-0.0,1.0,MINIMAL,"A lightweight MCP server built with TypeScript and Coinbase's AgentKit, designed to provide a flexible wallet interaction framework using Viem on the Base Sepolia testnet. The implementation sets up a standard MCP server with tool listing and execution capabilities, generating a random wallet client and exposing blockchain-related actions through a stdio transport mechanism."
0xshellming,mcp-summarizer,1.0,0,6.7,-2.0100000000000002,0.7989999999999999,MINIMAL,"MCP Server for AI Summarization, Support for multiple content types:
  - Plain text
  - Web pages
  - PDF documents
  - EPUB books
  - HTML content"
0xzap,worldminiapp_mcp,1.0,9,5.5,-1.6500000000000001,-0.23499999999999988,MEDIUM,"WorldMiniApps MCP Server provides AI assistants with access to World ID and MiniApps documentation through vector search capabilities. The implementation uses FastMCP to expose query tools that retrieve relevant documentation chunks from locally stored vector databases built with OpenAI embeddings and SKLearnVectorStore. It supports both World ID authentication documentation and the World MiniApps JavaScript SDK, making it particularly valuable for developers building applications on the World ecosystem who want to access technical documentation without leaving their Cursor editor environment."
13rac1,videocapture-mcp,1.0,0,7.5,-2.25,0.775,MINIMAL,"VideoCapture MCP provides AI assistants with access to webcams and video sources through OpenCV, enabling image capture and camera control capabilities. The server exposes tools for capturing still images, managing camera connections, adjusting video properties like brightness and resolution, and performing basic image transformations such as horizontal flipping. Developed by 13rac1, this implementation focuses on still image capture only (no video streaming) and is designed to integrate seamlessly with Claude Desktop, making it ideal for AI applications that need to analyze real-world objects or environments through webcam imagery."
1595901624,qrcode-mcp,1.0,0,7.1,-2.13,0.787,MINIMAL,"This client implementation allows users to retrieve the latest proxy nodes and generate QR codes for them. It utilizes the Model Context Protocol SDK and the QRCode library to fetch proxy information and create visual representations. The tool is designed to simplify access to up-to-date proxy data, making it useful for applications that require quick and easy proxy configuration."
1broseidon,mcp-jira-server,1.0,0,6.7,-2.0100000000000002,0.7010000000000001,MINIMAL,"This Jira MCP server, developed using TypeScript and the Model Context Protocol SDK, provides AI assistants with a standardized interface to interact with Jira's REST API. It offers tools for managing issues, including creation, listing, updating, and deletion, as well as adding comments. The server abstracts the complexities of Jira's API, handling authentication and request formatting. It's particularly valuable for AI systems focused on project management and issue tracking, enabling use cases such as automated task creation, status updates, and project overview generation. The implementation includes error handling for common Jira-specific scenarios and formats issue information for easy consumption by AI assistants."
1mcp-app,agent,1.0,0,7.8,-2.34,0.766,MINIMAL,"1MCP (One MCP) is a unified server implementation that aggregates multiple MCP servers into a single interface, reducing system resource usage and simplifying configuration management across different AI assistants. Developed by William Xu, it supports both stdio and SSE transport methods, handles dynamic configuration reloading without server restart, and enables filtering of servers by tags. The implementation allows AI tools like Claude Desktop, Cursor, Cherry Studio, and Roo Code to share access to the same underlying MCP servers, making it particularly valuable for users working with multiple AI assistants that need access to the same tools and resources."
1panel-dev,mcp-1panel,1.3,0,6.6,-1.9799999999999998,1.102,MINIMAL,"MCP-1Panel is a server implementation that provides AI assistants with direct access to 1Panel server management capabilities. It exposes tools for managing websites, databases, SSL certificates, and applications through a standardized interface. Built with Go, it supports both stdio and SSE transport modes, authenticates with 1Panel via access tokens, and handles API requests through a client that manages error states appropriately. This implementation is particularly valuable for server administrators who want to monitor system information, deploy applications like MySQL and OpenResty, or manage web infrastructure directly through conversational AI without switching contexts."
1rb,mongo-mcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"This MongoDB MCP server implementation enables interaction with MongoDB databases through the Model Context Protocol. It utilizes TypeScript and the MongoDB driver to provide a bridge between MCP clients and MongoDB operations. The server is designed to run in various environments, including Windows (Git Bash and WSL) and Unix-like systems, making it versatile for different development setups. It's particularly useful for projects that require seamless integration of MongoDB capabilities into MCP-based workflows."
1yhy,oss-mcp,1.0,0,6.0,-1.7999999999999998,0.8200000000000001,MINIMAL,"OSS-MCP is a server implementation that provides a bridge between AI assistants and Object Storage Services (OSS), specifically Ali OSS. Developed by 1yhy, this TypeScript-based server enables file operations through a RESTful API, allowing assistants to upload, download, list, and manage files in cloud storage. The implementation leverages the ali-oss SDK and Express framework to handle requests efficiently, with environment-based configuration for secure credential management. It's particularly valuable for use cases requiring document management, media file handling, or backup operations without leaving the assistant interface."
1yhy,figma-context-mcp,1.0,0,6.2,-1.8599999999999999,0.6859999999999999,MINIMAL,"Figma-Context-MCP is a server implementation that bridges AI assistants with the Figma design platform, enabling direct access to Figma file data through the MCP protocol. It transforms complex Figma API responses into simplified, structured design information that includes layout properties, styling, and text content, making it easier for AI assistants to understand and reason about design files. The server provides tools for retrieving complete Figma files or specific nodes, downloading images, and processing design hierarchies - making it particularly valuable for design review workflows, code generation from designs, and collaborative design discussions."
21st-dev,magic-mcp,1.9,0,7.8,-2.34,1.666,MINIMAL,"This MCP server implementation provides a bridge to the 21st.dev/magic API, enabling AI assistants to interact with frontend development tasks. Developed by sergeibynas, it offers tools for working with frontend code directly from IDEs like Cursor, WindSurf, and VSCode with Cline. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on secure API key management and is designed to streamline frontend development workflows. The implementation is particularly useful for AI applications that need to automate or assist with frontend coding tasks, offering a unique approach to AI-assisted web development."
oyasimi1209,magic-mcp,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"Magic MCP Server provides a bridge to 21st.dev's Magic API, enabling AI assistants to generate UI components and search for logos. Developed by serafim@21st.dev, this TypeScript implementation offers three specialized tools: creating UI components from descriptions, fetching existing components for inspiration, and searching for company logos in various formats (SVG, JSX, TSX). The server authenticates with the 21st.dev API using an API key and is designed to be easily integrated with AI clients like Cline and Windsurf through Smithery. Ideal for developers who want to quickly generate or find UI components and brand assets without leaving their AI assistant workflow."
29decibel,record-to-markdown,1.0,0,2.9,-0.8699999999999999,0.913,MINIMAL,"This Record to Markdown MCP implementation, developed by 29decibel, provides a Python-based interface for AI assistants to save conversation content to markdown files or Apple Notes. Built using libraries like httpx, markdown2, and mcp, it offers tools for converting markdown to HTML and creating notes with AppleScript integration. The implementation focuses on efficient content preservation and formatting, making it easier for AI models to store and organize conversation outputs. It's particularly useful for users of Claude desktop who want to automatically save their AI interactions, enabling easy reference, sharing, or further analysis of conversation content without manual copying and pasting."
2b3pro,markdown2pdf-mcp,1.0,0,7.4,-2.2199999999999998,0.778,MINIMAL,"This Markdown to PDF conversion MCP server, developed by 2b3pro, provides a robust solution for generating PDF documents from Markdown content. Built with TypeScript and leveraging Puppeteer for modern PDF generation, it offers features like syntax highlighting, custom CSS styling, and optional watermarking. The server implements file naming conflict resolution, configurable paper formats, and uses Chrome v131.0.6778.204 for consistent rendering across installations. By abstracting the complexities of PDF creation, it enables AI systems to easily produce formatted documents from Markdown input. This implementation is particularly valuable for applications requiring programmatic document generation, facilitating use cases such as report creation, documentation publishing, and content distribution in PDF format."
2b3pro,roam-research-mcp,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"This Roam Research MCP server, developed by Ian Shen / 2B3 PRODUCTIONS LLC, provides AI assistants with a standardized interface to interact with Roam Research graphs. Built using TypeScript and leveraging the Roam Research API SDK, it offers capabilities for searching blocks, creating and manipulating pages and blocks, and performing batch operations. The server implements recursive block reference resolution and markdown conversion for content retrieval. It's designed for flexibility, supporting various Roam Research operations through a set of eleven core tools. This implementation is particularly valuable for researchers, writers, and knowledge workers, enabling use cases such as automated note-taking, content organization, and intelligent information retrieval within Roam Research graphs."
304techmaven,plaid-mcp-server,1.0,0,0,-0.0,0.5,MINIMAL,"Plaid MCP Server provides a robust bridge to the Plaid financial API, enabling AI assistants to securely access and interact with bank account data, transactions, and authentication flows. Built with TypeScript and supporting both stdio and SSE transports, it offers tools for creating link tokens, exchanging public tokens, syncing transactions, and handling Plaid webhooks. The implementation is particularly valuable for financial analysis, automated transaction tracking, and building AI-powered personal finance assistants."
3rzy,make-mcp-integration-issue,1.0,0,5.8,-1.7399999999999998,0.6739999999999999,MINIMAL,"This MCP server implementation provides integration with Make (formerly Integromat) for automating workflows. It allows users to connect Make scenarios with MCP-enabled AI assistants, enabling automated task execution and data processing. The server is designed for developers looking to enhance their AI workflows with Make's extensive library of app integrations and automation capabilities."
54rt1n,container-mcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"Container-MCP provides a secure, sandboxed environment for executing code, running commands, accessing files, and performing web operations on behalf of large language models. Built by 54rt1n, it implements multiple layers of security including container isolation, AppArmor profiles, Firejail sandboxing, and strict resource limits to ensure safe execution of potentially risky operations. The architecture uses domain-specific managers for different operation types (Bash, Python, file operations, web browsing) and runs inside an Ubuntu container with carefully controlled permissions and access restrictions. This implementation is particularly valuable for AI workflows requiring secure tool execution without exposing the host system to potential risks."
5ajaki,veri5ight,1.0,2,7.3,-2.19,0.5189999999999999,MINIMAL,"This MCP server for local Ethereum node operations, developed by 5pence, provides a simplified interface for interacting with ENS DAO functions. Built with TypeScript and leveraging the ethers.js library, it offers a streamlined approach to Ethereum network interactions. The server implements environment variable configuration for node URL management and error handling. By abstracting the complexities of direct Ethereum node communication, it enables AI systems to easily perform ENS DAO operations. This implementation is particularly valuable for applications requiring programmatic access to ENS DAO functions, facilitating use cases such as automated domain management, governance participation, and decentralized identity operations within the Ethereum ecosystem."
5ajaki,mcp-etherscan-server,1.0,0,6.7,-2.0100000000000002,0.7010000000000001,MINIMAL,"This MCP Etherscan server, developed by 5pence, provides Ethereum blockchain data tools via Etherscan's API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers features like balance checking, transaction history viewing, token transfer tracking, contract ABI fetching, gas price monitoring, and ENS name resolution. The implementation focuses on simplifying access to Ethereum blockchain data through a standardized MCP interface. It's particularly useful for developers and analysts looking to incorporate Ethereum data into their applications without dealing directly with Etherscan's API complexities, enabling use cases like wallet monitoring, transaction analysis, and smart contract interactions."
5ajaki,safe-mcp-server,1.0,0,6.1,-1.83,0.817,MINIMAL,"This Safe MCP server, developed by 5pence, enables interaction with Safe (formerly Gnosis Safe) smart contract wallets through the Model Context Protocol. Built with TypeScript and leveraging the MCP SDK, it provides tools for querying Safe transactions, retrieving multisig transaction details, and decoding transaction data. The implementation focuses on simplifying access to Safe's functionality through a standardized interface, with default integration to the Safe Transaction API mainnet endpoint. It's particularly useful for developers and AI models needing to interact with Safe wallets, enabling use cases like transaction monitoring, multisig management, and smart contract interaction analysis without dealing directly with blockchain complexities."
611711dark,mcp_calculate_server,1.0,0,6.3,-1.8900000000000001,0.8109999999999999,MINIMAL,"MCP Calculate Server provides mathematical computation capabilities through a Python-based server that leverages the SymPy library for symbolic mathematics. Developed by 611711Dark, this implementation enables AI assistants to perform complex calculations, equation solving, and symbolic manipulation without needing direct access to mathematical libraries. The server requires Python 3.11 or higher and depends on both the MCP framework and SymPy, making it ideal for use cases requiring advanced mathematical operations within AI assistant conversations."
7gugu,zip-mcp,1.0,0,7.0,-2.0999999999999996,0.79,MINIMAL,"A Model Context Protocol server that provides ZIP compression capabilities using fastMCP and zip.js. This implementation allows AI assistants to compress and decompress files directly through MCP, enabling efficient file handling without leaving the conversation interface. The server exposes compression utilities as tools that can be called programmatically, making it valuable for workflows involving file management, data transfer, and storage optimization."
8bitgentleman,activitywatch-mcp-server,1.0,6,7.1,-2.13,0.613,MINIMAL,"This MCP server connects to ActivityWatch, enabling LLMs like Claude to interact with time tracking data. It provides tools for listing buckets, executing AQL queries, and retrieving raw events from any bucket. Developed by Matt Vogel, it's designed to enhance productivity analysis and time management capabilities for AI assistants working with personal activity data."
8beeeaaat,touchdesigner-mcp,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"TouchDesigner MCP Server provides a bridge between AI assistants and TouchDesigner, a visual programming environment for real-time interactive content. Built by 8beeeaaat, it offers tools for creating, manipulating, and controlling TouchDesigner nodes through a REST API. The server implements a client-server architecture with TypeScript and Python components, enabling operations like executing Python scripts, managing node properties, and retrieving class information. It's particularly valuable for digital artists, VJ performers, and interactive installation designers who want to control TouchDesigner projects through natural language without manually navigating the TouchDesigner interface."
8bitsats,grok-mcp,1.0,3,4.5,-1.35,0.835,MINIMAL,"GrokArt is an MCP server that connects to the xAI/Grok image generation API, allowing AI assistants to generate images based on text prompts. The implementation supports multiple image generation (up to 10 images per request), different response formats (URL or base64 JSON), and includes proper error handling with lazy API key initialization. Built with Docker and Kubernetes deployment support, GrokArt is designed for seamless integration with Claude Desktop and other MCP clients, making it particularly valuable for creative workflows that require image generation capabilities without leaving the conversation interface."
8bitsats,grok_mcp,1.0,5,6.8,-2.04,0.704,MINIMAL,"Grok AI MCP Server integrates with xAI's Grok API to provide AI-driven analysis tools for the Solana blockchain. Built by 8bitsats, it exposes four main tools through a standard I/O transport: analyzing transactions with detailed insights about program interactions and token transfers, investigating Solana addresses, interpreting images using Grok's vision capabilities, and answering general queries with optional context and image support. The server leverages both text-only and vision models from Grok, making it particularly valuable for blockchain developers and analysts who need detailed explanations of on-chain activities without leaving their workflow."
9ninety,mcpnotes,1.0,0,7.3,-2.19,0.781,MINIMAL,"This MCP notes server, developed by an unnamed author, provides a simple yet powerful tool for recording and managing notes with AI models. Built using TypeScript and leveraging the Model Context Protocol SDK, it offers both an MCP server and a web server interface for flexible note-taking capabilities. The implementation uses DynamoDB for data storage and includes features for creating, retrieving, and managing notes. By abstracting the complexities of note management and AI integration, it enables seamless interaction between AI assistants and user-generated content. This server is particularly useful for applications requiring persistent memory and context management, facilitating use cases such as personal assistants, knowledge management systems, and collaborative AI-enhanced note-taking platforms."
9olidity,mcp-server-pentest,1.0,0,5.4,-1.62,0.838,MINIMAL,"MCP Server Pentest is a browser automation tool that enables AI assistants to perform security testing for web applications, specifically focusing on XSS and SQL injection vulnerability detection. Built on Playwright and Firefox, it provides tools for automatically testing URL parameters against common attack vectors, capturing screenshots of vulnerable pages, and manipulating web elements through various interaction methods. The server includes comprehensive error handling with fallback mechanisms for strict mode violations, making it particularly valuable for security professionals who need to conduct preliminary vulnerability assessments without leaving their AI assistant interface."
a01110946,rhinomcp,1.0,0,7.1,-2.13,0.787,MINIMAL,"RhinoMCP connects Rhino3D to Claude AI through a WebSocket-based bridge, enabling AI-assisted 3D modeling capabilities. The implementation consists of three main components: a socket server running inside Rhino's Python environment, a Python client that communicates with the Rhino plugin, and an MCP server that exposes Rhino functionality as tools. It allows Claude to create and manipulate 3D geometry, run Python scripts in Rhino's context, and interact with the modeling environment, making it particularly valuable for architectural design, product development, and other 3D modeling workflows that benefit from AI assistance."
a0dotrun,expose,1.0,0,5.0,-1.5,0.85,MINIMAL,"Expose is a proxy server implementation that enables communication between clients and MCP-compatible services through JSON-RPC. Built by a0dotrun, it provides a Go-based middleware that handles standard MCP methods like 'initialize', 'tools/list', and 'tools/call' by forwarding requests to a configured backend URL while maintaining proper error handling and response formatting. The server can operate over standard I/O streams with graceful shutdown capabilities, making it suitable for integrating existing services with MCP clients or creating lightweight proxies between different MCP implementations."
a21071,mcp-postgres,1.0,0,5.6,-1.6799999999999997,0.8320000000000001,MINIMAL,"A PostgreSQL database integration server that provides type-safe CRUD operations for user data through MCP tools. Built with TypeScript and Prisma, it enables easy database interactions with a standardized interface, supporting operations like retrieving, adding, updating, and deleting user records with robust input validation."
a2amarket,mcp-clamav,1.0,0,5.4,-1.62,0.838,MINIMAL,"ClamAV MCP provides virus scanning capabilities for files by integrating with the ClamAV antivirus engine. This implementation allows AI assistants to scan files for malware by accepting base64-encoded file data and returning scan results through a simple API endpoint. The server runs as a FastMCP instance that processes scan requests, temporarily stores files for scanning, and executes the clamscan command with proper error handling and cleanup. Particularly useful for security-focused applications that need to validate file safety before processing."
a2xdeveloper,tagesschau-mcp-server,1.0,0,6.0,-1.7999999999999998,0.8200000000000001,MINIMAL,"Provides a bridge to the Tagesschau news API, enabling AI assistants to fetch and analyze German news articles from categories like domestic, foreign, economic and sports coverage. Built with Go and the MCP protocol, it exposes tools for retrieving latest headlines and detailed article content through a clean interface. This implementation is particularly valuable for users who want to access and analyze German news content programmatically through natural language interaction."
a37ai,ansible-tower-mcp,1.0,0,1.9,-0.5700000000000001,0.943,MINIMAL,"Ansible Tower MCP Server provides a bridge between LLMs and Ansible Tower/AWX instances, enabling AI assistants to manage infrastructure automation tasks through a comprehensive API interface. The implementation supports inventory, host, group, job template, project, credential, and organization management with secure authentication options via username/password or token. Built with Python using the FastMCP framework, it handles pagination, error management, and various response formats while maintaining secure connections to Ansible Tower instances. This server is particularly valuable for DevOps workflows where infrastructure management and deployment automation need to be integrated directly into AI assistant conversations."
aallsbury,qb-time-mcp-server,1.0,0,6.8,-2.04,0.29600000000000004,MINIMAL,"This QuickBooks Time MCP server, developed by an AI assistant, provides a unified interface to QuickBooks Time API functionality. Built with Python and leveraging libraries like requests and pydantic, it offers a comprehensive set of endpoints for managing jobcodes, timesheets, users, projects, and generating reports. The server implements robust error handling, pagination support, and date parameter formatting. By consolidating multiple QuickBooks Time services into a single, efficient interface, it simplifies integration and data access for developers. This implementation is particularly valuable for businesses using QuickBooks Time, enabling use cases such as automated time tracking, payroll processing, project management, and custom reporting workflows."
aantti,mcp-netbird,1.0,0,7.4,-2.2199999999999998,0.722,MINIMAL,"A Netbird API integration server that enables AI assistants to manage virtual private networks through natural language. Built by aantti and derived from Grafana's MCP implementation, it provides tools for listing and managing peers, groups, and access policies in a Netbird network. Particularly valuable for network administrators who want to monitor and configure their Netbird VPN infrastructure through conversational AI."
aaomidi,mcp-bazel,1.0,0,6.0,-1.7999999999999998,0.8200000000000001,MINIMAL,"A Bazel integration server for the MCP protocol that enables AI assistants to interact with Bazel build systems. It provides tools for building targets, running tests, finding dependencies and reverse dependencies, and identifying source files within a Bazel workspace. The implementation wraps Bazel command-line operations in a structured API, making it easier for AI systems to analyze and manipulate Bazel projects without needing to understand the underlying command syntax."
aapanel,mcp-server,1.0,0,6.1,-1.83,0.817,MINIMAL,"aaPanel MCP Server provides a bridge between AI assistants and aaPanel web hosting control panel, enabling management of websites, databases, Docker containers, and system resources through a standardized interface. Built with Go, this implementation authenticates with the aaPanel API using environment variables for base URL and API token, then translates MCP tool calls into appropriate aaPanel API requests. The server exposes functionality for retrieving system information, managing PHP websites, querying MySQL databases, handling Docker containers and images, and configuring email accounts, making it ideal for automating web hosting administration tasks through AI-powered workflows."
aaronsb,confluence-cloud-mcp,1.0,3,7.1,-2.13,0.913,MINIMAL,"This Confluence Cloud MCP server, developed using TypeScript and the Model Context Protocol SDK, provides a standardized interface for AI assistants to interact with Atlassian Confluence Cloud. It offers tools for space management, page operations, content searching, and label handling, enabling seamless integration of Confluence functionality into AI workflows. The implementation stands out by abstracting Confluence's API complexities, allowing AI models to perform tasks like creating pages, managing content, and retrieving information without direct API knowledge. It's particularly valuable for teams looking to automate documentation processes, enhance knowledge management, or build AI-powered tools that leverage Confluence data and capabilities."
aaronsb,google-workspace-mcp,1.0,0,7.8,-2.34,0.266,MINIMAL,"This Google Workspace MCP server, developed by Aaron Bockelie, enables AI agents to interact with Gmail and Google Calendar through a simplified interface. Built with TypeScript and leveraging the Google APIs, it provides functionality for email operations, calendar management, and multi-account support. The implementation focuses on robust OAuth handling, detailed error messaging, and a modular design for easy expansion to additional Google services. It's particularly useful for AI assistants and applications needing seamless integration with Google Workspace, enabling use cases such as email triage, meeting scheduling, and productivity automation without dealing directly with the complexities of individual Google APIs."
aaronsb,jira-insights-mcp,1.0,0,7.7,-2.31,0.731,MINIMAL,"Jira Insights MCP provides tools for managing Jira Insights (JSM) asset schemas through the Model Context Protocol. Built by aaronsb, it enables CRUD operations on object schemas, object types, and objects in Jira Insights, with support for AQL (Atlassian Query Language) queries. The implementation is containerized with Docker for easy deployment and requires Jira API credentials for authentication. This server is particularly valuable for teams that need to programmatically manage their Jira Insights assets without leaving the conversation interface, streamlining workflows for IT asset management and configuration tracking."
aaronsb,apptio-target-process-mcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"This MCP server implementation provides a bridge between AI assistants and Targetprocess, a project management and agile planning platform. It enables AI assistants to search, retrieve, create, and update Targetprocess entities such as user stories, bugs, tasks, and features. The server handles authentication, API interactions, and data validation, allowing for complex queries and entity management. It's designed to enhance project tracking and agile workflows by integrating AI capabilities with Targetprocess functionality."
aarushkx,covid-mcp-server,1.0,0,3.2,-0.96,0.904,MINIMAL,"COVID-19 MCP Server provides real-time COVID-19 statistics for any country by connecting to the disease.sh API. The server exposes a single tool called getCovidStatsByCountry that fetches comprehensive data including cases, deaths, recoveries, and testing information when given a country name. Built with TypeScript and the MCP SDK, it runs on stdio transport for seamless integration with Claude Desktop, making it useful for researchers, journalists, or anyone needing quick access to pandemic data without leaving their conversation interface."
aashari,mcp-server-atlassian-bitbucket,1.4,0,7.0,-2.0999999999999996,1.1099999999999999,MINIMAL,"Bitbucket MCP server that provides tools for managing repositories, pull requests, and workspaces through Atlassian's REST APIs. Built with TypeScript and featuring robust error handling, pagination support, and detailed logging, it enables AI assistants to list workspaces, browse repositories, and interact with pull requests. The implementation uses a controller-service architecture with standardized formatters for consistent markdown output, making it particularly valuable for developers who want to monitor and manage Bitbucket resources directly through conversational AI."
ab498,code-context-provider-mcp,1.2,0,6.9,-2.0700000000000003,0.9929999999999999,MINIMAL,"Code Context Provider MCP analyzes project directories to extract code structure and symbols using Tree-sitter parsers. It provides tools for generating directory trees and performing deep code analysis of JavaScript, TypeScript, and Python files, extracting functions, variables, classes, imports, and exports. The implementation handles gitignore patterns, supports customizable analysis depth, and automatically downloads required WASM parsers. Particularly useful for AI assistants that need to quickly understand project structure and code organization when starting new programming tasks."
ab498,computer-control-mcp,1.4,0,6.2,-1.8599999999999999,1.214,MINIMAL,"Computer Control MCP provides computer automation capabilities through a server that enables AI assistants to control mouse movements, keyboard input, take screenshots, perform OCR, and manage windows. Built with PyAutoGUI, RapidOCR, and ONNXRuntime, it offers similar functionality to Anthropic's 'computer-use' tool but with zero external dependencies. The implementation supports operations like clicking, typing, dragging, capturing screen content with text recognition, and window management, making it particularly useful for automating desktop tasks and enabling AI systems to interact directly with graphical user interfaces."
abdelstark,bitcoin-mcp,1.2,0,7.7,-2.31,0.9309999999999999,MINIMAL,"This MCP server provides integration with Bitcoin, enabling interactions with the Bitcoin network and blockchain data. Developed using TypeScript and the Model Context Protocol SDK, it offers functionality for querying transaction data, wallet information, and network statistics. The implementation focuses on providing a standardized interface for Bitcoin operations, supporting use cases such as transaction monitoring, wallet management, and blockchain analysis. By leveraging the Blockstream API, it allows AI models to access real-time Bitcoin data, making it valuable for financial applications, cryptocurrency tracking, and blockchain-based decision-making systems."
abdelstark,lightning-mcp,1.2,0,6.5,-1.9500000000000002,0.895,MINIMAL,"This Nostr MCP server, developed by an unspecified author, enables AI agents to interact with the Nostr decentralized social network protocol. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for posting notes and interacting with Nostr relays. The implementation focuses on simplifying Nostr interactions, offering functionality to publish content to the network. It integrates with LNbits for Lightning Network payments, allowing for potential monetization of posts. This server is particularly useful for applications requiring programmatic Nostr engagement, enabling use cases such as automated content publishing, social media management, and decentralized communication without directly dealing with Nostr protocol complexities."
abdelstark,nostr-mcp,1.0,0,7.0,-2.0999999999999996,0.79,MINIMAL,"This Nostr MCP server enables AI agents to interact with the decentralized Nostr social network protocol. Built with TypeScript using the Model Context Protocol SDK, it provides a streamlined interface for posting notes and connecting to Nostr relays. The implementation focuses on simplifying Nostr interactions for AI systems, offering core functionality to publish content to the network. It supports both stdio and SSE server modes for flexibility in different environments. This server is particularly useful for applications requiring programmatic Nostr engagement, enabling use cases such as automated content publishing, social media management, and decentralized communication without directly handling Nostr protocol complexities."
abhi5h3k,mcp-email-verify,1.0,0,7.0,-2.0999999999999996,0.71,MINIMAL,"MCP-Email-Verify provides a tool for validating email addresses using the Abstract API service. The server exposes a single function that checks email validity, deliverability, and quality through comprehensive validation including format checking, SMTP verification, and identification of disposable or role-based addresses. This implementation is particularly useful for applications requiring email validation to reduce bounces, prevent fake signups, and ensure data quality in forms or user registration flows."
abhi5h3k,mcp-url2snap,1.0,0,6.6,-1.9799999999999998,0.698,MINIMAL,"URL2SNAP is an MCP server that captures screenshots of websites through the Abstract API. It provides a simple tool that takes a URL as input and returns a local URL to access the captured screenshot. The implementation handles API requests, image processing, and local file storage, making it useful for applications that need to visualize web content without requiring users to visit the actual websites. The server runs on port 8011 and saves screenshots to a local directory for easy access."
abhijeetka,mcp-k8s-server,1.0,0,7.4,-2.2199999999999998,0.778,MINIMAL,"The MCP Kubernetes Server provides a bridge between Large Language Models and Kubernetes clusters through a set of specialized tools. Built with Python using the FastMCP framework, it wraps kubectl commands to enable operations like retrieving pod information, managing deployments, switching contexts, and troubleshooting cluster issues. The server requires a configured kubectl environment and can be integrated with Claude Desktop for seamless natural language interactions with Kubernetes resources. It's particularly valuable for DevOps workflows that benefit from conversational interfaces to Kubernetes, allowing users to create, scale, and monitor resources without remembering exact kubectl syntax."
abhinav-mangla,think-tool-mcp,1.0,0,4.6,-1.38,0.862,MINIMAL,"Think Tool server provides a structured way for AI assistants to maintain an explicit thought process through a session. It exposes tools for recording thoughts, retrieving the thought history, and clearing the thought log when needed. Built with TypeScript and the MCP protocol, it helps AIs break down complex reasoning tasks, verify policy compliance, and analyze tool outputs by maintaining a persistent memory of their thinking process."
abhinav7895,system-mcp,1.0,0,7.3,-2.19,0.781,MINIMAL,"A Model Context Protocol server for real-time system monitoring, providing CPU, memory, disk, network, battery, and internet speed metrics via the systeminformation library. Developed by Abhinav, this implementation exposes both a resource endpoint for comprehensive system snapshots and individual tools for targeted metrics retrieval. The server uses multi-source speed tests from various providers to deliver reliable internet performance measurements, making it particularly useful for diagnosing performance issues, monitoring resource utilization, and tracking network connectivity without leaving the AI assistant conversation."
abhirockzz,mcp_cosmosdb_go,1.0,0,6.2,-1.8599999999999999,0.8140000000000001,MINIMAL,"This MCP server implementation provides tools for interacting with Azure Cosmos DB databases using Go. Built with the Azure SDK for Go, it enables AI assistants to perform common Cosmos DB operations including listing databases and containers, executing SQL queries, reading container metadata, creating containers, and managing items. The implementation supports both key-based authentication and Azure managed identities, making it flexible for different deployment scenarios. It's particularly useful for applications that need to integrate AI capabilities with document database operations, allowing natural language interaction with Cosmos DB resources without requiring users to write complex database code."
abhirockzz,mcp_kusto,1.0,0,6.3,-1.8900000000000001,0.31099999999999994,MINIMAL,"An MCP server for Azure Data Explorer (Kusto) that enables AI assistants to interact with Kusto clusters through the Azure SDK for Go. It provides tools for listing databases, tables, retrieving table schemas, and executing KQL queries against Azure Data Explorer databases. The implementation uses DefaultAzureCredential for authentication, making it secure and simple to use with local developer credentials or service principals. Ideal for data analysts and engineers who want to leverage AI assistants for exploring and analyzing data in Azure Data Explorer clusters."
abhishekbhakat,airflow-mcp-server,1.4,4,6.6,-1.9799999999999998,1.198,MINIMAL,"Airflow MCP Server provides a bridge between Claude and Apache Airflow, enabling direct interaction with Airflow workflows through the API. Built by Abhishek Bhakat, it supports both read-only (safe) and full-access (unsafe) operation modes, allowing users to list DAGs, check statuses, trigger runs, and manage Airflow resources without leaving their conversation interface. The implementation parses the Airflow OpenAPI specification to dynamically generate tools, supports both token and cookie-based authentication, and handles parameter validation - making it particularly valuable for DevOps teams who need to monitor and control workflow orchestration through natural language."
abhishekbhakat,mcp_server_code_assist,1.4,0,6.1,-1.83,1.2169999999999999,MINIMAL,"This MCP server implementation, developed for code modification and generation tasks, provides a set of tools for AI assistants to create, modify, delete, and rewrite code files. Built with Python and leveraging libraries like aiofiles, gitpython, and xmlschema, it offers a standardized XML-based interface for instructing code changes. The implementation focuses on file operations, search-and-replace modifications, and version control integration, making it accessible for AI models to perform complex code editing tasks. It's particularly useful for automated code refactoring, codebase maintenance, or integrating AI-driven code generation into existing projects, allowing assistants to manipulate code without requiring deep knowledge of file system operations or version control complexities."
abhishekjairath,sonic-pi-mcp,1.0,0,7.7,-2.31,0.769,MINIMAL,"A Model Context Protocol server that allows AI assistants to interact with Sonic Pi through OSC messages, enabling programmatic music creation and sound manipulation. The server provides tools for playing individual notes with customizable synth parameters and executing arbitrary Sonic Pi code, making it valuable for AI-assisted music composition, sound design, and educational scenarios. Developed by Abhishek Jairath, it works with any MCP-compatible client like Claude Desktop or Cursor, and requires Sonic Pi to be running with a specific OSC handler code to receive and execute the commands."
abhiz123,todoist-mcp-server,1.7,0,7.0,-2.0999999999999996,1.41,MINIMAL,"This MCP server, developed by abhiz123, enables natural language task management in Todoist through AI assistants like Claude. It provides tools for creating, retrieving, updating, completing, and deleting tasks using conversational language. The server leverages Todoist's API to translate natural language commands into precise Todoist operations, supporting features like smart task search, flexible filtering, and rich task details. By bridging AI capabilities with Todoist's task management system, this implementation enhances productivity workflows, allowing users to manage their tasks more intuitively. It is particularly useful for scenarios requiring hands-free task management, quick capture of ideas, or AI-assisted organization of complex projects within Todoist."
a-bonus,google-docs-mcp,1.0,0,7.6,-2.2800000000000002,0.272,MINIMAL,"Google Docs MCP Server provides a bridge between Claude Desktop (or other MCP clients) and Google Docs, enabling AI assistants to read document content, append text, and apply formatting to specific text within documents. Built with TypeScript and the fastmcp library, it handles OAuth 2.0 authentication with Google's APIs and offers three main tools: readGoogleDoc for fetching document content, appendToGoogleDoc for adding text to documents, and formatMatchingText for applying styling (bold, color, etc.) to specific text instances. The server is designed for users who want their AI assistants to interact directly with their Google Documents, making it useful for collaborative writing, document analysis, or automated content generation."
aborroy,alfresco-mcp-poc,1.0,0,6.9,-2.0700000000000003,0.7929999999999999,MINIMAL,"This Alfresco MCP Proof of Concept, developed by aborroy, demonstrates integration of Alfresco's content management capabilities with AI applications using the Model Context Protocol. Built using Java and Node.js, it combines a standard Alfresco deployment with custom MCP client and server components. The implementation leverages Spring AI and the TypeScript SDK to connect Alfresco's document management features to AI workflows. It's particularly useful for organizations looking to enhance their Alfresco-based content repositories with AI capabilities, enabling use cases like intelligent document processing, automated metadata extraction, and content-aware chatbots without extensive custom development."
abutbul,gatherings-mcp,1.0,0,6.0,-1.7999999999999998,0.8200000000000001,MINIMAL,"Gatherings MCP Server provides a tool for managing shared expenses in social events, helping users track costs, calculate reimbursements, and settle balances between friends. Built with a TypeScript wrapper around a Python backend using SQLAlchemy for data persistence, it offers features like creating gatherings, adding expenses, recording payments, and calculating who owes what to whom. The server uses a non-standard architecture where the Node.js component translates MCP requests to command-line calls to the Python implementation, making it suitable for personal expense tracking in group settings while acknowledging areas for architectural improvement."
abutbul,gatherings-mcp-python,1.0,0,6.8,-2.04,0.796,MINIMAL,"This MCP server implementation provides a robust expense-sharing solution for social gatherings. Built with Python and SQLAlchemy, it offers tools for creating gatherings, managing members, tracking expenses, calculating reimbursements, and generating detailed payment summaries. The server employs a structured database model and includes features like member renaming and gathering closure. It's designed for use cases such as splitting costs for group trips, dinners, or any event where expenses need to be fairly divided among participants."
ac3xx,mcp-servers-kagi,1.0,0,7.5,-2.25,0.725,MINIMAL,"Developed by ac3xx, this server provides an interface for language models to perform web searches using Kagi's search engine. It enables AI agents to query Kagi's API and retrieve search results through a controlled MCP server. Built in TypeScript, the implementation currently focuses on basic web search functionality, with plans to expand to other Kagi features like text summarization and enriched news results. The server handles API authentication and request formatting. By leveraging Kagi's privacy-focused search capabilities, this implementation is particularly useful for AI assistants needing to access current web information, conduct research, or provide search results while respecting user privacy preferences."
acashmoney,bio-mcp,1.0,0,7.3,-2.19,0.781,MINIMAL,"BioMCP is a Model Context Protocol (MCP) server designed to enhance large language models with protein structure analysis capabilities. It provides tools for analyzing protein active sites and searching for disease-related proteins by interfacing with established protein databases.

Future work will be centered around enabling agents to utilize the BioMCP."
acryldata,mcp-server-datahub,1.0,0,5.8,-1.7399999999999998,0.8260000000000001,MINIMAL,"This MCP server implementation provides a bridge to DataHub, a metadata platform for data ecosystems. Developed by Acryl Data, it integrates with the DataHub API to offer tools for entity retrieval and search functionality across various data assets. The server is designed for use cases requiring metadata management and discovery in complex data environments, such as data cataloging, lineage tracking, and governance."
activepieces,activepieces,2.5,7,7.3,-2.19,2.019,MINIMAL,Connect to your hosted MCP Server using any MCP client to communicate with tools
andreasgassmann,acurast-mcp-server,1.0,0,0,-0.0,1.0,MINIMAL,"Acurast MCP Server provides a bridge to the Acurast decentralized computing platform, enabling AI assistants to deploy scripts and review processor performance. Built with TypeScript and Express, it implements tools for script deployment and resources for retrieving processor metrics, such as count and detailed performance statistics. The server exposes endpoints for handling MCP requests through a StreamableHTTPServerTransport, making it valuable for managing and monitoring distributed computing tasks on the Acurast network."
acxelerator,mcp-tenki,1.0,0,2.4,-0.72,0.928,MINIMAL,"This MCP server, developed by acxelerator, provides weather information for Japan. It integrates with an external weather API to retrieve current conditions and forecasts. The implementation is built using Python and leverages libraries like httpx for API requests and pydantic for data validation. It offers a straightforward interface for querying weather data by location within Japan. This server is particularly useful for applications or AI assistants that need up-to-date weather information for Japanese cities, enabling use cases such as travel planning, event scheduling, or local news and information services."
adamikhq,adamik-mcp-server,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"This MCP server implementation provides a bridge to the Adamik API, enabling AI assistants and other MCP-compatible clients to interact with Adamik's services. Developed by AdamikHQ, it supports integration with Starknet for blockchain operations. The server is designed to work seamlessly with Claude Desktop and other MCP environments, offering a straightforward setup process. It's particularly useful for AI applications requiring access to Adamik's specialized services, such as blockchain interactions or custom AI functionalities provided by the Adamik platform. The implementation focuses on secure API key management and efficient request handling, making it suitable for both development and production environments."
adam-paterson,mcp-crew-ai,1.0,0,7.1,-2.13,0.787,MINIMAL,"A lightweight Python server for running CrewAI multi-agent workflows through the Model Context Protocol. Designed to automatically load agent and task configurations from YAML files, enabling flexible AI task orchestration with minimal custom code. Supports dynamic agent and task creation, variable templating, and seamless integration with tools like Claude Desktop or Cursor IDE."
adampippert,multi-service-mcp-server,1.0,0,6.6,-1.9799999999999998,0.698,MINIMAL,"This modular MCP server implementation provides a standardized way for AI models to interact with external tools and services through a unified gateway. It includes five specialized tools: GitHub for repository management, GitLab for project interactions, Google Maps for location services, Memory for persistent data storage, and Puppeteer for web automation. Built with Flask and designed for deployment on Red Hat environments, it features containerized deployment options using Podman or Docker, comprehensive error handling, and seamless integration with OpenAI and Anthropic LLMs through standardized request/response formats."
adamrtalbot,mcp-nextflow,1.0,0,6.1,-1.83,0.817,MINIMAL,"Nextflow Developer Tools MCP provides a suite of tools for Nextflow development and testing, built with FastMCP. It enables AI assistants to interact with a local Nextflow repository to perform tasks like building from source, running tests (integration, specific, and plugin tests), executing the development version, and managing the development directory. The implementation includes comprehensive logging, error handling, and environment variable configuration, making it particularly valuable for developers working on Nextflow pipelines who want to streamline their workflow without leaving their AI assistant interface."
adamsilverstein,lighthouse-mcp-server,1.0,0,0,-0.0,0.5,MINIMAL,"A Lighthouse MCP server that provides AI assistants with access to Google PageSpeed Insights API data. It enables running performance audits on web pages, retrieving detailed metrics like First Contentful Paint and Largest Contentful Paint, and identifying optimization opportunities. The server exposes a single tool that accepts URL parameters, strategy selection (mobile/desktop), and category filtering, making it valuable for web developers looking to analyze and improve site performance without leaving their AI assistant conversation."
adamwattis,resource-hub-server,1.0,0,6.2,-1.8599999999999999,0.8140000000000001,MINIMAL,"This Resource Hub MCP server, developed by Adam Wattis, acts as a proxy between local MCP environments and a centralized Resource Hub. It enables access to shared tools, configurations, and resources across different environments, streamlining MCP server management. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers features like centralized configuration, environment variable-based authentication, and compatibility with Claude Desktop. The server includes debugging tools through the MCP Inspector and supports easy deployment via npx. By centralizing resource management, it facilitates consistent tool access and configuration sharing, making it particularly valuable for teams and organizations requiring standardized MCP setups across multiple environments or projects."
adamwattis,mcp-proxy-server,1.0,0,6.5,-1.9500000000000002,0.8049999999999999,MINIMAL,"This MCP proxy server, developed by Adam Wattis, aggregates multiple MCP resource servers into a unified interface. It connects to and manages multiple backend servers, exposes their combined capabilities, handles request routing, and aggregates responses. The implementation features resource management across servers, tool aggregation and routing, and multi-server prompt handling. By centralizing access to distributed MCP resources, this proxy enables more flexible and scalable AI assistant deployments. It is particularly useful for organizations managing multiple specialized MCP servers or those looking to modularize their AI infrastructure while maintaining a single point of access for clients."
adarshp14,google-form-mcp-server,1.0,0,7.8,-2.34,0.766,MINIMAL,"Google Forms MCP Server enables AI assistants to create and manage Google Forms through natural language requests. Built with Python and Flask, it features a two-tier architecture with an MCP server handling Google Forms API operations and a CamelAIOrg agent layer that processes natural language into structured form creation commands. The implementation includes real-time visualization of the request flow, comprehensive error handling, and support for various question types. It's particularly useful for automating form creation workflows, enabling quick generation of surveys, feedback forms, and event registrations without requiring direct interaction with the Google Forms interface."
adenot,mcp-google-search,1.2,0,7.5,-2.25,0.9249999999999999,MINIMAL,"This MCP server, developed by Allan Denot, provides web search capabilities using the Google Custom Search API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined interface for AI agents to perform web searches. The implementation focuses on simplifying the integration of Google's search functionality into AI workflows, requiring only an API key and search engine ID for setup. It's particularly useful for applications needing up-to-date web information, enabling use cases such as fact-checking, research assistance, and content generation without directly interacting with Google's API complexities."
adeosec,mcp-shodan,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"Shodan MCP Server provides cybersecurity analysts with direct access to Shodan's network intelligence capabilities through the Model Context Protocol. Developed by ADEO Cybersecurity Services, it exposes a comprehensive set of tools for host information lookup, DNS operations, vulnerability analysis, network scanning, and security alerts management. The implementation includes specialized prompt templates for common cybersecurity workflows like asset discovery, vulnerability assessment, and ICS analysis, making it particularly valuable for security reconnaissance, threat hunting, and infrastructure monitoring without leaving the AI assistant conversation."
adepanges,teamretro-mcp-server,1.2,0,6.7,-2.0100000000000002,0.901,MINIMAL,"TeamRetro MCP Server provides a bridge between AI assistants and TeamRetro's team management platform, enabling operations like team creation, user management, and member administration through natural language. Built by Ade Pangestu, it implements authentication via API keys, basic auth, or bearer tokens, and formats responses as either simple tables or raw JSON. The server exposes tools for listing, creating, updating, and deleting teams and users, with planned support for retrospectives, action tracking, health checks, and analytics. This unofficial integration is particularly valuable for team leaders who need to manage TeamRetro resources without switching context from their AI assistant conversation."
adexltd,mcp-google-suite,1.0,0,7.2,-2.16,0.784,MINIMAL,"MCP server that provides AI assistants with direct access to Google Workspace (Drive, Docs, and Sheets) operations. Built with Python and the MCP protocol, it features OAuth authentication, configurable logging, and support for multiple transport modes (stdio, SSE, WebSocket). The server exposes tools for searching and creating files, managing documents and spreadsheets, and organizing content, making it valuable for users who need to interact with Google Workspace through AI assistants without manual API configuration."
adfin-engineering,mcp-server-adfin,1.0,0,5.1,-1.53,0.347,MINIMAL,"The Adfin MCP server enables Claude to interact with Adfin's financial management platform through its public APIs, allowing users to perform tasks like checking credit control status, creating invoices, and uploading invoice documents. Built with FastMCP, it dynamically generates API tools by importing Adfin's API documentation and registering each endpoint as a separate function, while also providing specialized file system tools for managing invoice uploads from the user's desktop. The implementation includes automatic token refresh handling and is designed to be easily configured in Claude Desktop through environment variables, making it particularly valuable for financial professionals who need to perform Adfin operations without leaving their conversation interface."
adhikasp,mcp-linkedin,1.0,0,7.3,-2.19,0.781,MINIMAL,"This MCP server, developed by Adhika Setya Pramudita, provides tools to interact with LinkedIn's Feeds and Job API using an unofficial LinkedIn API. It enables users to retrieve feed posts, search for jobs, and analyze job matches against resumes. The implementation uses Python 3.7+ and integrates with libraries like linkedin-api and fastmcp. It's designed for easy configuration through environment variables and can be run using uvicorn. This server is particularly useful for developers building LinkedIn-integrated applications, job search tools, or AI assistants that need to access LinkedIn data and functionality."
adhikasp,mcp-git-ingest,1.3,0,6.8,-2.04,1.096,MINIMAL,"This MCP server, developed by adhikasp, enables AI assistants like Claude to fetch and analyze GitHub repository structures and contents. Built in Python, it provides capabilities for cloning repositories, generating directory trees, and reading specified files. The implementation stands out by offering deterministic temporary directory creation, Unicode tree representation, and flexible file reading with robust error handling. By connecting AI capabilities with GitHub's vast ecosystem of code repositories, this server allows AI systems to explore codebases, analyze project structures, and access important files programmatically. It is particularly useful for building AI-powered code analysis tools, automated documentation generators, and intelligent assistants for software development workflows that need to interact with GitHub repositories."
adhikasp,mcp-twikit,1.3,0,6.4,-1.92,1.108,MINIMAL,"This MCP server, developed by adhikasp, integrates with Twitter's API to enable AI assistants to interact with the social media platform. It provides tools for searching tweets, retrieving timelines, and analyzing sentiment across multiple accounts. The server stands out by offering a simplified interface for complex Twitter operations, making it easier for AI systems to process and respond to social media data. By connecting AI capabilities with Twitter's vast user-generated content, this implementation empowers AI assistants to handle tasks like social media monitoring, trend analysis, and customer sentiment tracking. It is particularly useful for applications in brand management, market research, or any scenario where an AI system needs to work with real-time social media data."
adhikasp,mcp-reddit,1.0,0,5.3,-1.59,0.841,MINIMAL,"This Reddit MCP server, developed by adhikasp, provides AI assistants with a standardized interface to interact with Reddit content. Built using Python and leveraging libraries like PRAW and RedditWarp, it offers capabilities for fetching hot threads, detailed post content, and comments from any subreddit. The server supports different post types including text, links, and galleries. It's designed for flexibility, allowing easy installation and usage through the MCP client CLI. This implementation is particularly valuable for AI assistants focused on social media analysis, content curation, and trend monitoring, enabling use cases such as summarizing popular discussions, tracking emerging topics, and analyzing user engagement across Reddit communities."
zo-valentine,mcp-twikit,1.0,0,6.4,-1.92,0.808,MINIMAL,"MCP-Twikit provides Twitter search and interaction capabilities for AI assistants through the FastMCP framework. Built by Adhika Setya Pramudita, it leverages the Twikit library to enable both read operations (searching tweets, viewing timelines, retrieving user tweets) and write operations (posting tweets, sending direct messages) with built-in rate limiting. The implementation authenticates using Twitter credentials stored as environment variables, manages cookies for persistent sessions, and formats tweet data in markdown for easy readability, making it ideal for workflows requiring Twitter monitoring, social media analysis, or automated Twitter interactions."
adhikasp,mcp-youtube,1.0,0,5.1,-1.53,0.847,MINIMAL,"This MCP server, developed by adhikasp, enables AI assistants like Claude to fetch and analyze YouTube video transcripts. Built in Python, it provides capabilities for downloading subtitles from YouTube videos using either video IDs or full URLs, and includes timestamp information. The implementation stands out by offering a standardized interface to YouTube's transcript data, allowing AI systems to easily access and process video content. By connecting AI capabilities with YouTube's vast repository of video transcripts, this server enables automated content analysis, subtitle generation, and video summarization. It is particularly useful for building AI-powered tools for video research, content moderation, and educational applications that leverage YouTube's extensive library."
adiletd,feature-request-collection-mcp,1.0,0,6.9,-2.0700000000000003,0.7929999999999999,MINIMAL,"The Supabase MCP Server connects AI assistants to a Supabase database, allowing them to query feature suggestions stored in the database. Built with TypeScript using the Model Context Protocol SDK, it provides a single tool called 'query_feature_suggestions' that retrieves records from the feature_suggestions table with optional limit parameters. The server includes robust error handling and logging capabilities, making it ideal for workflows where AI assistants need to access, analyze, or present feature request data directly within conversations without requiring manual database queries."
adird,hilanet-mcp,1.0,0,7.0,-2.0999999999999996,0.79,MINIMAL,"Hilanet MCP provides a satirical corporate dystopia toolkit built with fastMCP, offering HR-related tools that parody toxic workplace behaviors. The implementation includes functions for requesting salary increases, filing manager complaints, scheduling inconvenient meetings, generating corporate jargon, and other humorous workplace sabotage actions. Each tool accepts specific parameters like employee names, percentages, or justifications, creating a playful commentary on office politics. The server can be run directly with npx or through npm scripts, making it easily accessible for users wanting to explore this tongue-in-cheek take on corporate culture through AI assistants."
adityak74,mcp-scholarly,1.0,0,6.3,-1.8900000000000001,0.8109999999999999,MINIMAL,"This mcp-scholarly server, developed by Aditya Karnam, provides a standardized interface for searching academic articles through the arXiv database. Built with Python and leveraging the arxiv library, it offers a tool to query arXiv based on keywords. The server integrates seamlessly with Claude Desktop, abstracting the complexities of academic search into a consistent MCP interface. By enabling AI systems to access and analyze scholarly literature, this implementation facilitates use cases such as literature reviews, research assistance, and staying up-to-date with the latest publications in specific fields. The server is designed for easy deployment and debugging, making it valuable for researchers and developers building AI-powered tools that interact with academic content."
adrian-dotco,harvest-mcp-server,1.0,2,7.1,-2.13,0.487,MINIMAL,"This MCP server implementation provides natural language time tracking integration with Harvest, enabling AI assistants to interact with Harvest's time tracking and project management features. Developed by Adrian, it offers tools for managing projects, tracking time entries, and handling leave requests. Built with TypeScript and leveraging the Model Context Protocol SDK, the server focuses on secure credential management through environment variables and supports easy configuration within AI assistant environments. It is particularly useful for automating time tracking workflows, streamlining project management tasks, and integrating Harvest operations into AI-assisted work processes. The implementation includes features like natural language parsing for time entries and customizable work day hours and leave types."
adspower,local-api-mcp-typescript,1.0,0,6.1,-1.83,0.817,MINIMAL,"AdsPower Local API MCP Server provides a TypeScript interface for controlling AdsPower browser profiles through the Model Context Protocol. This implementation enables AI assistants to manage browser profiles by offering tools for creating, updating, opening, and deleting browsers with customizable fingerprints and proxy configurations. It also includes functionality for managing browser groups and retrieving application information. Built with a modular architecture using axios for API requests, the server communicates with AdsPower's local API endpoint, making it ideal for automated browser profile management in web scraping, testing, or multi-account workflows."
ad-veritas,mcp-server-truerag,1.0,0,5.0,-1.5,0.65,MINIMAL,"This Model Context Protocol server, developed for integrating with a GraphQL API for policy queries, provides AI assistants with access to state-specific policy information. Built using Python with FastMCP, GQL, and AIOHTTPTransport, it offers tools for connecting to the GraphQL endpoint, generating queries based on user descriptions, and executing those queries. The server implements environment-based configuration for API key management and includes features like schema fetching and query generation assistance. By abstracting the complexities of GraphQL interactions into a standardized MCP interface, it enables AI systems to easily access and analyze policy data across different states. This implementation is particularly valuable for applications requiring up-to-date policy information, facilitating use cases such as legal compliance checks, policy analysis, and state-specific regulatory guidance."
pab1it0,adx-mcp-server,1.0,0,7.8,-2.34,0.266,MINIMAL,"The Azure Data Explorer MCP Server provides AI assistants with direct access to Azure Data Explorer (ADX) clusters and databases through standardized MCP interfaces. Built with Python using FastMCP, it enables executing KQL queries, discovering database resources, exploring table schemas, and sampling data from tables. The implementation supports authentication via client credentials or default Azure credentials and includes tools for listing tables, retrieving schemas, and executing custom queries. Ideal for AI workflows that need to analyze data stored in ADX, generate insights from logs and metrics, or help users explore their ADX resources."
aeon-seraph,searxng-mcp,1.0,0,6.2,-1.8599999999999999,0.8140000000000001,MINIMAL,"This MCP server enables language models to perform web searches through SearXNG, a privacy-focused metasearch engine. Built with TypeScript and the Model Context Protocol SDK, it provides a clean interface for sending search queries with customizable parameters like categories, time ranges, and pagination. The server includes caching functionality to improve performance and can be configured via environment variables for connection settings. It's designed to run either directly via Node.js or as a Docker container, making it flexible for various deployment scenarios."
afrise,academic-search-mcp-server,1.0,0,7.1,-2.13,0.713,MINIMAL,"This MCP server provides academic paper search and retrieval functionality across multiple sources like Semantic Scholar and Crossref. Built with Python using the FastMCP framework, it offers tools for searching papers, fetching detailed metadata, and filtering by topic and date range. The implementation focuses on delivering structured academic information through a standardized interface, making it particularly useful for AI assistants and applications that require access to scientific literature. By connecting to established academic APIs, this server enables use cases such as literature reviews, research trend analysis, and citation management, enhancing the capabilities of AI models in academic and research contexts."
afshawnlotfi,mcp-configurable-puppeteer,1.0,0,5.4,-1.62,0.838,MINIMAL,"This Configurable Puppeteer MCP server enables AI assistants to automate browser interactions through a set of tools for navigation, screenshots, clicking, form filling, and JavaScript execution. Developed by Afshawn Lotfi as a modified version of Anthropic's original implementation, it uniquely allows customization of Puppeteer launch options through environment variables, supporting both Chrome and Firefox browsers with configurable viewport sizes and other browser parameters. The server captures console logs and screenshots as resources, making it ideal for web testing, data extraction, form automation, and interactive web demonstrations without requiring code modifications to adapt to different browser environments."
weotzi,browser-tools-mcp,1.0,0,7.5,-2.25,0.775,MINIMAL,"Browser Tools MCP provides a bridge between AI assistants and web browsers, enabling real-time access to console logs, network requests, screenshots, and DOM elements through a Chrome extension and server architecture. The implementation includes Lighthouse-powered audit capabilities for accessibility, performance, SEO, and best practices, with AI-optimized reporting that prioritizes critical issues. Built by AgentDesk AI, it uses WebSocket communication for live updates and includes a Puppeteer service for cross-platform browser automation, making it valuable for debugging web applications, analyzing performance issues, and improving site accessibility without leaving the AI conversation interface."
HEAD,mcp-server,1.0,0,0,-0.0,1.0,MINIMAL,"DevTools MCP server provides specialized tools for software development workflows through a data-driven configuration system. Built with TypeScript and the MCP SDK, it loads tool configurations from YAML files in preset categories like thinking, coding, and GitHub integration, while supporting custom tool definitions through .workflows directories. The implementation features typed parameters, sequential/situational tool modes, and flexible prompt templating - making it particularly valuable for developers who want to integrate AI assistance directly into their development process without leaving their workflow."
packages,mcp,1.2,0,0,-0.0,1.2,MINIMAL,"✨ Features
Connect to Ethereum, Optimism, Arbitrum & Polygon
Play with DeFi (Aave, DEXs, etc.)
Look up ENS domains, transfer tokens, check security
Get crypto news and market data
🧰 Tools
Tokens (ERC20, WETH)
DeFi (trading, lending)
Block explorers
Governance tools
Security checks
Basic web tools
All Agentek tools based on keys you provide.
"
agentience,practices_mcp_server,1.0,1,6.9,-2.0700000000000003,0.893,MINIMAL,"Practices MCP server extracts and standardizes development practices from the Tribal project into a reusable server implementation. Built with Python, it provides tools for managing Git workflows including branch validation, version management, and PR preparation, while integrating with GitHub and Jira MCP servers to automate common development tasks. The server is particularly valuable for teams looking to enforce consistent development practices and reduce manual workflow steps through configurable automation."
agentience,tribal_mcp_server,1.2,1,7.8,-2.34,1.066,MINIMAL,"Tribal is an MCP server implementation for error knowledge tracking and retrieval, providing both REST API and native MCP interfaces for integration with tools like Claude Code and Cline. Developed by Troy Molander at Agentience.ai, it uses ChromaDB for vector similarity search to help AI assistants remember and learn from programming errors, storing error contexts with solutions and finding similar errors via semantic search. The server features JWT authentication, local and cloud storage options, and Docker deployment capabilities, making it ideal for development teams wanting to build a shared knowledge base of programming errors and solutions."
agentrpc,agentrpc,1.2,0,6.4,-1.92,0.8919999999999999,MINIMAL,"AgentRPC allows you to connect to any function, in any language, across network boundaries. It's ideal when you have services deployed in:

Private VPCs
Kubernetes clusters
Multiple cloud environments
AgentRPC wraps your functions in a universal RPC interface, connecting them to a hosted RPC server accessible through open standards:

Model Context Protocol (MCP)
OpenAI-compatible tool definitions (OpenAI, Anthropic, LiteLLM, OpenRouter, etc.)"
agree-able,room-mcp,1.0,0,5.9,-1.7700000000000002,0.823,MINIMAL,"This MCP server implementation enables Claude to create and interact with virtual rooms in a peer-to-peer space using the Room protocol. It provides tools for joining rooms with invite codes, sending messages, and exiting rooms. The server integrates with @agree-able/room and @agree-able/invite packages to handle room creation and invitation management. It's designed to facilitate multi-agent collaboration and communication in decentralized environments."
ahmad2x4,mcp-server-seq,1.0,0,6.9,-2.0700000000000003,0.7070000000000001,MINIMAL,"This MCP server implementation provides a bridge to Seq's API, enabling comprehensive access to logging and monitoring features. Developed to enhance interaction with Seq's powerful event management system, it offers tools for retrieving signals, events, and alert states with extensive filtering options. The server is designed for seamless integration with Claude Desktop, allowing users to leverage Seq's capabilities within AI-assisted workflows. It is particularly useful for DevOps teams and system administrators who need real-time insights into their application logs and system performance metrics."
ahnlabio,bicscan-mcp,1.0,0,5.7,-1.7100000000000002,0.671,MINIMAL,"BICScan MCP Server provides a bridge to the BICScan API for assessing risk and analyzing assets across blockchain addresses, domains, and decentralized applications. Built with Python and FastMCP, it exposes tools for retrieving risk scores (0-100 scale) and detailed asset holdings information, with robust error handling and logging capabilities. This implementation is particularly valuable for blockchain security analysts and compliance teams who need to evaluate cryptocurrency addresses and monitor digital assets through natural language interaction."
ahodroj,mcp-iceberg-service,1.0,0,6.9,-2.0700000000000003,0.7929999999999999,MINIMAL,"MCP Iceberg Catalog provides a SQL interface for querying and managing Apache Iceberg tables through Claude desktop. The server connects to Iceberg REST catalogs and S3-compatible storage, supporting operations like listing tables, describing schemas, executing SELECT queries, and inserting data. Built with PyIceberg and PyArrow for efficient data handling, it translates SQL commands to Iceberg operations and manages catalog connections transparently. This implementation is particularly valuable for data analysts and engineers who need to interact with data lakes directly through conversational AI without switching contexts."
ahonn,mcp-server-gsc,1.2,0,6.9,-2.0700000000000003,0.9929999999999999,MINIMAL,"This MCP server, developed by ahonn, provides AI assistants like Claude with access to Google Search Console data. It offers tools for retrieving search analytics information with customizable parameters such as date ranges, dimensions, and search types. The server leverages Google Cloud authentication for secure API access. By integrating AI capabilities with Google Search Console insights, this implementation enables data-driven SEO analysis and website performance optimization. It is particularly useful for scenarios requiring trend analysis, keyword research, or automated reporting of search traffic metrics in AI-assisted digital marketing and web analytics applications."
ahujasid,ableton-mcp,2.5,0,7.3,-2.19,2.281,MINIMAL,"Ableton MCP enables AI assistants to control Ableton Live music production software through a bidirectional communication system. It consists of a Remote Script that runs within Ableton Live and exposes a socket server, paired with a Python MCP server that translates commands into actions. The implementation supports a wide range of music production operations including creating tracks and clips, adding MIDI notes, controlling playback, loading instruments, and browsing the Ableton library. Developed by Siddharth Ahuja, this integration is particularly valuable for AI-assisted music composition, production workflows, and automated sound design without leaving the conversation interface."
ahujasid,blender-mcp,3.5,0,7.8,-2.34,3.234,MINIMAL,"BlenderMCP enables Claude to control Blender through the Model Context Protocol, allowing for natural language manipulation of 3D scenes. The implementation consists of a Blender addon that creates a socket server and an MCP server that communicates with it, exposing resources and tools for scene inspection, object creation/manipulation, material application, and rendering. Users can create and modify 3D content through conversational prompts without needing to know Blender's interface or Python API, making it ideal for rapid prototyping, educational purposes, or assisting users unfamiliar with 3D modeling software."
ai-agent-hub,ai-agent-marketplace-index-mcp,1.0,0,7.1,-2.13,0.787,MINIMAL,"AI Agent Marketplace Index MCP Server provides tools for searching and listing AI agents by keywords or categories, allowing AI assistants to discover available agents for specific tasks like coding, HR, finance, or healthcare. Developed by DeepNLP, it features a search API that returns detailed agent information including descriptions, websites, and performance metrics such as Google/Bing rankings and GitHub stars. The server is designed for easy integration with Claude Desktop and other MCP-compatible clients, making it valuable for users seeking specialized AI agents for particular use cases."
ai-fe,dify-mcp-server,1.0,0,4.4,-1.3200000000000003,0.632,MINIMAL,"This Dify MCP server, developed for integrating Dify's AI capabilities with the Model Context Protocol, provides a bridge between Dify's API and MCP-compatible clients. Built with TypeScript and leveraging the MCP SDK, it enables AI assistants to interact with Dify's features, including text generation and potentially other AI services. The implementation focuses on efficient API communication, handling streaming responses, and managing authentication. It's particularly useful for developers looking to incorporate Dify's AI capabilities into MCP-based systems, allowing for seamless integration of Dify's functionalities without deep knowledge of its API intricacies."
aindreyway,mcp-codex-keeper,1.2,0,6.8,-2.04,0.996,MINIMAL,"The MCP Codex Keeper, developed by aindreyway, serves as an intelligent guardian of development knowledge for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides curated access to the latest documentation and best practices. The server integrates with external resources to maintain up-to-date information, offering a standardized interface for AI systems to query and retrieve relevant development knowledge. It's designed for flexibility, supporting various programming languages and frameworks through its modular architecture. This implementation is particularly valuable for enhancing AI-assisted software development, enabling use cases such as code generation, bug fixing, and providing context-aware programming advice."
aindreyway,mcp-neurolora,1.2,0,7.6,-2.2800000000000002,0.972,MINIMAL,"This MCP server, developed by aindreyway, streamlines the process of collecting and documenting code from directories. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a command-line interface for efficient code extraction and documentation generation. The server is designed for flexibility, supporting various file types and directory structures through customizable configuration options. It's particularly valuable for developers and teams working on large-scale projects, enabling use cases such as automated code documentation, project structure analysis, and codebase overview generation. The implementation's focus on TypeScript and modern JavaScript features ensures compatibility with current development practices while providing robust type checking and improved maintainability."
aindreyway,mcp-server-neurolora-p,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"This MCP server for code collection and documentation, developed by Aindrey, streamlines the process of gathering code from files and directories into a single markdown document. Built with Python and leveraging the Model Context Protocol SDK, it offers features like customizable ignore patterns, syntax highlighting, and table of contents generation. The server implements robust file system synchronization and comprehensive error handling, providing a standardized interface for code documentation tasks. By abstracting the complexities of file traversal and markdown generation, it enables AI systems to easily create comprehensive code overviews. This implementation is particularly valuable for applications requiring programmatic code documentation, facilitating use cases such as project audits, codebase analysis, and automated documentation generation."
aipotheosis-labs,aci-mcp,1.2,0,6.2,-1.8599999999999999,0.8859999999999999,MINIMAL,"ACI.dev is an agent-computer interface (ACI) platform created by Aipolabs that helps developers connect AI agents to applications like Zendesk, Slack, Gmail, or their own internal tools, manage AI agent actions, and discover workflows.

The latest platform feature is a Unified MCP Server that elegantly solves this with a ""discover and execute"" pattern:
1. It exposes just TWO meta tools to your MCP Client:
 - ACI_SEARCH
 - ACI_EXECUTE
2. The Client uses the ACI_SEARCH to dynamically discover relevant tools based on user intent
3. The Client then executes the suitable tools with the ACI_EXECUTE tool

Benefits That Make a Difference ✨ 

⌚ Maximum Context Efficiency: Only two tool definitions in your MCP client’s LLM context window, no matter how many tools are available

🔐 Unified Authentication: One authentication scheme to rule them all – no more juggling credentials across multiple MCP server providers

💣 Zero Name Collisions: Eliminate tool naming conflicts when combining tools from different MCP Servers

🔎 Intelligent Tool Discovery: The server automatically finds the perfect tools for each specific task

♾️ Unlimited Tool Access: Your LLM can use ANY tools from the ACI.dev platform."
aircodelabs,grasp,1.0,0,5.9,-1.7700000000000002,0.677,MINIMAL,"Grasp is a self-hosted browser automation server that enables AI assistants to interact with web pages through natural language commands. Built with Node.js, TypeScript, and Playwright, it provides a human-like browsing experience by simulating realistic mouse movements, typing patterns, and keyboard interactions. The server exposes both a WebSocket API for real-time browser control and an MCP interface that allows AI systems to perform high-level tasks like navigation, form filling, and content extraction. With its live preview capability and detailed logging, Grasp is particularly valuable for web testing, data collection, and automated workflows that require authentic browser interaction."
airjlee,stock-llm,1.0,0,0,-0.0,1.0,MINIMAL,"Stock-LLM is an MCP server that enhances LLM interactions with real-time stock market data through Yahoo Finance. It provides tools for retrieving current stock prices, financial statements, company information, earnings reports, and news about specific stocks. The implementation uses FastMCP to create a server that processes stock-related queries, while the client component employs vector search and LLM-based ticker extraction to identify relevant companies in user queries. This enables AI assistants to provide informed responses about stocks, including price information, company fundamentals, and recent news, making it valuable for financial analysis and investment research conversations."
wizd,airylark-mcp-server,1.0,0,6.3,-1.8900000000000001,0.6890000000000001,MINIMAL,Airylark MCP Server provides translation capabilities for AI applications through a Node.js implementation. It integrates with external translation APIs to enable seamless language conversion within the Model Context Protocol framework. The server is containerized with Docker for easy deployment and configured through environment variables to support different translation models and API endpoints. Ideal for multilingual AI applications that need to process text in various languages.
minio,mcp-server-aistor,1.0,0,7.4,-2.2199999999999998,0.778,MINIMAL,"An MCP server implementation for AIStore, a distributed object storage system designed for AI workloads."
aiven-open,mcp-aiven,1.0,0,7.3,-2.19,0.781,MINIMAL,"The Aiven MCP Server provides AI assistants with direct access to Aiven's cloud database and messaging services through the Aiven API. It exposes tools for listing projects, services, and retrieving detailed service information for PostgreSQL, Kafka, ClickHouse, Valkey, and OpenSearch running in the Aiven ecosystem. Built with FastMCP and requiring minimal configuration through environment variables, this server enables LLMs to interact with and manage cloud data infrastructure, making it valuable for building full-stack solutions that require database operations without leaving the AI assistant interface."
ai-yliu,filesystem-mcp-server,1.0,0,6.5,-1.9500000000000002,0.8049999999999999,MINIMAL,"This MCP server implementation provides filesystem operations for AI assistants. Developed by ai-yliu, it offers tools for reading, writing, and manipulating files and directories, with built-in security measures to restrict access to specified directories. The server is designed for use cases requiring AI-assisted file management, content analysis, or automated file system interactions within allowed directories."
aiyogg,tinypng-mcp-server,1.0,0,6.1,-1.83,0.683,MINIMAL,"TinyPNG MCP server provides image optimization capabilities through the TinyPNG API, enabling compression and resizing of both local and remote images. The implementation offers three main tools: compressing local images, compressing remote images via URL, and resizing images with various methods (scale, fit, cover, thumb). Built by Chuck, this server requires a TinyPNG API key and returns detailed compression statistics including original size, compressed size, and compression ratio, making it ideal for workflows that need efficient image optimization without quality loss."
ai-zerolab,mcp-email-server,1.6,0,6.3,-1.8900000000000001,1.2890000000000001,MINIMAL,MCP email server implementation that provides IMAP and SMTP functionality. Integrates with existing email providers to allow AI assistants to send and receive emails on behalf of users. Includes a configuration UI and supports deployment via Docker. Useful for automating email-based workflows and enabling AI agents to manage email communications.
ai-zerolab,mcp-toolbox,1.6,0,7.6,-2.2800000000000002,1.372,MINIMAL,"This MCP server implementation provides a comprehensive toolbox for enhancing Large Language Models (LLMs) through various API integrations and utilities. Developed by ai-zerolab, it offers tools for executing command line instructions, interacting with Figma files, and performing file operations. The server is designed with an extensible architecture, allowing easy addition of new API integrations. It supports Claude Desktop and other MCP-enabled LLMs, making it suitable for a wide range of use cases including UI/UX design workflows, automated file management, and enhanced LLM interactions with external services."
ai-zerolab,yourware-mcp,1.4,0,5.8,-1.7399999999999998,1.0739999999999998,MINIMAL,"Yourware MCP is a server that enables AI assistants to upload projects directly to yourware.so, a web hosting platform. Developed by Wh1isper, it provides tools for authenticating with the Yourware API, checking credentials, and uploading single files or entire directories with automatic compression. The implementation supports multiple transport methods (stdio and SSE) and integrates with AI assistants like Claude through configurations for Cursor, Cline, and other MCP-compatible clients. This server is particularly useful for developers who want to quickly showcase their web projects online without leaving their development environment."
ajbr0wn,gmail-mcp-server,1.0,0,7.1,-2.13,0.28700000000000003,MINIMAL,"This Gmail MCP server, developed by AJ Brown, integrates Gmail functionality into AI assistants using the Model Context Protocol. It provides secure access to Gmail inbox contents and search capabilities through OAuth2 authentication with the Gmail API. The server offers tools for viewing recent emails and performing advanced searches using Gmail's query syntax. By connecting AI capabilities with email management, this implementation enables assistants to analyze inbox contents, find specific messages, or automate email-related tasks. It is particularly useful for applications requiring email content analysis, personal information management, or any scenario where an AI system needs to interact with and reason about email data while maintaining user privacy and security."
akash-network,mcp,1.0,0,6.8,-2.04,0.796,MINIMAL,"Akash MCP Server is a TypeScript implementation that bridges AI agents with the Akash Network, enabling deployment and management of decentralized applications through typed tools. Developed by Overclock Labs, it provides essential functionality for interacting with Akash's blockchain-based cloud computing marketplace, including wallet authentication, certificate management, deployment creation, bid management, and lease operations. The server leverages the Model Context Protocol to standardize communication between AI models and Akash services, making it particularly valuable for AI assistants that need to programmatically deploy applications, manage cloud resources, or interact with decentralized infrastructure without requiring deep technical knowledge of the Akash ecosystem."
akazwz,mcp-figma,1.0,0,2.7,-0.81,0.41899999999999993,MINIMAL,"This MCP server implementation integrates with the Figma API, enabling AI assistants to interact with Figma design files and projects. Developed by akazwz, it leverages TypeScript and the @modelcontextprotocol/sdk to provide a bridge between AI models and Figma's design capabilities. The implementation is useful for automating design tasks, analyzing Figma projects, or enabling AI-assisted design workflows within the Figma ecosystem."
akc2267,solana-mcp-server,1.0,0,6.1,-1.83,0.817,MINIMAL,"This Solana MCP server, developed by Alex Cheng, provides integration with the Solana blockchain. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with Solana's Web3.js library for blockchain operations. The implementation focuses on providing a standardized interface for Solana transactions and data retrieval, making it easier to incorporate blockchain functionality into AI workflows. It's particularly useful for developers and teams working with Solana who want to automate blockchain interactions, enabling use cases such as automated token transfers, smart contract deployments, and AI-assisted blockchain analytics without deep Solana expertise."
akhidastech,github-agentic-chat-mcp,1.0,0,6.7,-2.0100000000000002,0.7989999999999999,MINIMAL,"GitHub Agentic Chat MCP Server enables natural language interaction with GitHub repositories through a Go-based implementation that integrates with the GitHub API and provides vector search capabilities. It offers tools for searching repositories, creating issues, and performing semantic searches across stored documents using PostgreSQL with pgvector extension. The server connects to Claude Desktop through the Model Context Protocol, making it particularly valuable for developers who want to interact with GitHub and related documentation through conversational AI without leaving their chat interface."
akira-papa,akirapapa-mcp-notion-server,1.0,0,5.9,-1.7700000000000002,0.677,MINIMAL,"This MCP server, developed by suekou, enables seamless integration between Notion workspaces and AI systems like Claude Desktop. Built using the Model Context Protocol, it provides a comprehensive set of tools for interacting with Notion's API, including block manipulation, page and database operations, and querying capabilities. The implementation focuses on exposing Notion's features through a standardized interface, offering functionality to create, retrieve, update, and delete various Notion elements. It's particularly useful for organizations looking to incorporate Notion's collaborative workspace features into their AI workflows, enabling use cases such as automated note-taking, knowledge base management, and AI-assisted content creation without directly interacting with Notion's API."
akki91,ankr-mcp,1.0,0,6.7,-2.0100000000000002,0.7010000000000001,MINIMAL,"Ankr MCP Server provides blockchain data access through the Ankr API, enabling AI assistants to retrieve on-chain information such as token balances across multiple networks. Developed by Akshay Khare, this TypeScript implementation authenticates via an API token and exposes a specialized tool for querying wallet balances that returns detailed asset information including token metadata, amounts, and dollar values. The server handles various error conditions gracefully with custom error classes and is containerized for easy deployment, making it ideal for blockchain analysis, portfolio tracking, and financial applications where LLMs need direct access to distributed ledger data."
akr4,applemusic-mcp-server,1.0,0,6.0,-1.7999999999999998,0.8200000000000001,MINIMAL,"Apple Music MCP Server provides tools for interacting with the Apple Music API, enabling AI assistants to search for songs and generate playback links. Built in Rust using the RMCP library, it authenticates with the Apple Music API using developer credentials and offers a simple command-line interface. The server requires an Apple Developer account with Apple Music API access and supports customizable storefronts, making it particularly useful for music discovery and playback integration in conversational AI applications."
akramsaouri,mcp-translate,1.0,0,1.2,-0.36,0.536,MINIMAL,"Provides a translation service using the DeepL API, enabling text translation between multiple languages through a simple MCP tool. Designed to be easily integrated into AI workflows, it supports dynamic language selection and returns translated text as a response. Useful for multilingual communication and localization tasks."
akramsheriff5,mcp-server,1.0,0,5.2,-1.56,0.656,MINIMAL,"This MCP server provides financial market analysis capabilities through the AlphaVantage API, enabling AI assistants to fetch intraday stock data and perform technical analysis. The implementation offers tools for calculating moving averages, RSI (Relative Strength Index), and generating comprehensive trade recommendations based on technical indicators. The server includes specialized prompts for analyzing individual stocks, comparing multiple tickers, and building intraday trading strategies, making it valuable for financial advisors, traders, and investment analysis use cases."
akrasia0,s-mcp,1.0,0,7.2,-2.16,0.716,MINIMAL,"S/MCP provides a philosophical AI mentor named Stern who helps users realize their potential through guidance and accountability. Built with the Model Context Protocol, it offers a msg_stern tool that connects to OpenAI's GPT-4 model to generate responses based on Stern's character - a blend of rationalist thinking, stoic philosophy, and psychological insights from Dostoevsky. The implementation dynamically generates character context for varied interactions and includes examples for creating Solana-based smart contracts where users can stake tokens on their commitments, making it particularly valuable for those seeking philosophical mentorship with real accountability."
akseyh,bear-mcp-server,1.0,0,5.9,-1.7700000000000002,0.823,MINIMAL,"This Bear MCP server, developed by akseyh, provides an interface for AI assistants to interact with Bear notes on macOS. Built with TypeScript and leveraging the Model Context Protocol SDK and SQLite, it offers tools for reading notes, searching by text, and listing tags. The implementation focuses on direct database access to Bear's SQLite storage, making it efficient for AI models to retrieve and analyze note content. It's particularly useful for knowledge management, research assistance, or content generation tasks that benefit from accessing a user's personal notes, enabling AI to work with Bear data without requiring deep knowledge of the app's internal structure."
akshay23,spurs-blog-mcp-server,1.0,0,7.2,-2.16,0.784,MINIMAL,"This MCP server provides access to San Antonio Spurs basketball news and information by scraping and parsing content from the Pounding The Rock blog. Built with Python 3.13 and the FastMCP framework, it offers tools to retrieve latest articles, search for specific content, extract game results, and get player information with recent mentions. The implementation features efficient caching to reduce redundant requests and includes structured data models for articles, game results, and player information. It enables AI assistants to deliver up-to-date Spurs content without direct web access, making it valuable for sports fans seeking team news, game analyses, and player updates."
alaturqua,mcp-trino-python,1.2,0,7.2,-2.16,0.984,MINIMAL,"MCP Trino Server provides seamless integration between AI assistants and Trino/Iceberg databases through a standardized interface. Developed by alaturqua, this Python implementation exposes Trino's querying capabilities and Iceberg's table maintenance operations as MCP resources and tools, enabling data exploration, SQL execution, and table optimization. The server handles connection management, query formatting, and catalog navigation while supporting environment-based configuration, making it particularly valuable for interactive data analysis, automated table maintenance, and building AI-powered tools that interact with Trino databases."
albeorla,mcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"Aerith Admin MCP server implements a Manus-inspired 5-step development workflow for building RBAC dashboard applications. Built with FastAPI and browser-use integration, it provides tools for breaking down tasks, gathering information, analyzing requirements, executing changes, and generating reports. The implementation features resilient server modes (HTTP/STDIO), Git integration, comprehensive testing, and browser automation capabilities - making it particularly valuable for teams building complex admin interfaces who want structured, repeatable development processes."
albiemark,dbx-mcp-server,1.0,0,7.7,-2.31,0.2689999999999999,MINIMAL,"Dropbox MCP Server provides a secure integration with Dropbox's API, enabling AI assistants to perform file operations including uploading, downloading, listing, searching, and safely deleting files with recycle bin support. Built with TypeScript and the Model Context Protocol SDK, it implements OAuth 2.0 with PKCE for authentication, encrypts tokens for security, and offers resource handling capabilities that allow AI tools to work with files as attachments or inline content. The server includes specialized prompt handlers for file reviews and comparisons, making it particularly useful for document management, collaborative workflows, and scenarios requiring secure access to cloud storage directly within AI conversations."
getalby,lightning-tools-mcp-server,1.0,0,5.1,-1.53,0.847,MINIMAL,"The Lightning Tools MCP Server provides AI assistants with access to Bitcoin Lightning Network functionality through a set of specialized tools. Developed by Alby contributors, it leverages the @getalby/lightning-tools package to enable operations like interacting with lightning addresses and performing common lightning-related tasks. This implementation works well alongside the NWC MCP Server and can be easily integrated with Claude Desktop, Cline, or run from source. It's particularly valuable for workflows requiring cryptocurrency payment capabilities within AI assistant conversations."
getalby,nwc-mcp-server,1.0,0,6.5,-1.9500000000000002,0.8049999999999999,MINIMAL,"NWC MCP Server enables AI assistants to interact with Bitcoin Lightning wallets through Nostr Wallet Connect (NWC). Developed by Alby contributors, it provides tools for checking wallet balances, creating and paying invoices, and retrieving wallet information. The server uses the official MCP TypeScript SDK and can be easily integrated with Claude Desktop or Cline. It's particularly valuable for AI-assisted Bitcoin payments and wallet management without requiring users to implement complex Lightning Network interactions themselves."
alcova-ai,perplexity-mcp,1.0,0,6.8,-2.04,0.704,MINIMAL,"Perplexity MCP Server provides a bridge between AI assistants and the Perplexity API, enabling Claude and other MCP-compatible tools to access real-time web search and specialized reasoning capabilities. Built by Alcova AI, this Go implementation exposes two primary tools: perplexity_ask for retrieving up-to-date information using Perplexity's Sonar Pro model, and perplexity_reason for complex problem-solving tasks using Sonar Reasoning Pro. The server supports seamless integration with Claude Code, Claude Desktop, and Cursor through the stdio protocol, allowing AI assistants to access current information and perform reasoning tasks without leaving their interface, making it particularly valuable for workflows requiring real-time data or specialized reasoning capabilities."
aldrin-labs,metal-mcp-server,1.0,0,5.9,-1.7700000000000002,0.823,MINIMAL,"This MCP server, developed for Metal Framework enthusiasts, provides specialized tools for searching Metal documentation and generating code snippets. Built with TypeScript and leveraging libraries like @xenova/transformers and hnswlib-node, it offers natural language querying of Metal docs and code generation for common Metal tasks in Objective-C, Swift, or Metal shading language. The server integrates seamlessly with the Model Context Protocol, allowing easy incorporation into existing MCP setups. It's particularly useful for developers working on graphics-intensive applications or games who need quick access to Metal-specific information and code examples without leaving their development environment."
aldrin-labs,metaplex-mcp-server,1.0,0,5.1,-1.53,0.847,MINIMAL,"This Metaplex MCP server, developed by the Metaplex Foundation, provides a bridge between AI assistants and Metaplex documentation and repository information. Built with TypeScript and Node.js, it enables searching Metaplex documentation, retrieving repository details, and searching code across Metaplex repositories. The server leverages libraries like Axios for HTTP requests and Cheerio for HTML parsing to extract relevant information. By abstracting Metaplex-specific operations into a standardized MCP interface, it allows AI systems to easily access and utilize Metaplex resources without directly handling web scraping or API complexities. This implementation is particularly useful for developers working with Solana NFTs, facilitating use cases such as automated documentation lookup, code analysis, and integration of Metaplex functionalities into AI-assisted development workflows."
aldrin-labs,solana-mcp-server,1.0,0,6.9,-2.0700000000000003,0.7929999999999999,MINIMAL,"This Solana MCP server provides direct access to Solana blockchain data through natural language queries. Developed as an open-source project, it implements 21 essential Solana RPC methods across categories like account operations, block information, token management, and system status. Built in Rust, it integrates with the Solana client library and MCP SDK to offer a bridge between AI assistants and the Solana network. The server is designed for developers, analysts, and blockchain enthusiasts who want to explore Solana data or integrate blockchain queries into AI-powered applications. It's particularly useful for tasks like balance checking, transaction analysis, and monitoring network health through conversational interfaces."
aldrin-labs,solana-docs-mcp-server,1.0,0,6.6,-1.9799999999999998,0.802,MINIMAL,"This Solana documentation server, developed for the Model Context Protocol, provides AI assistants with access to Solana blockchain documentation. Built with TypeScript and Node.js, it uses Axios and Cheerio to fetch and parse Solana's online documentation, making it available through MCP-compatible endpoints. The server enables AI systems to query and retrieve up-to-date Solana development information, facilitating accurate responses to blockchain-related queries. It's particularly useful for developers seeking real-time Solana documentation assistance, AI-powered Solana development tools, or educational platforms focused on blockchain technology."
alec2435,python_mcp,1.2,0,5.9,-1.7700000000000002,1.023,MINIMAL,"This MCP server, developed by Alex Velikanov, provides an interactive Python REPL environment for executing Python code within AI conversations. Built with Python and leveraging the MCP library, it offers persistent session management and captures stdout/stderr output. The implementation stands out by maintaining separate state for each session and supporting both expressions and statements. It's particularly useful for developers and data scientists who need to run Python code snippets, test algorithms, or perform data analysis tasks through AI-assisted workflows, allowing for seamless integration of Python programming into conversational AI interfaces."
alefcastelo,archai-static-analyzer-mcp,1.0,0,3.2,-0.96,0.904,MINIMAL,"The Archai Static Analyzer MCP server provides AI assistants with code analysis capabilities focused on enforcing hexagonal architecture principles in Java applications. Built with TypeScript using the Model Context Protocol SDK, it implements various architectural rules such as limiting class dependencies, enforcing domain package isolation from infrastructure, validating use case naming conventions, and detecting improper email handling in models. The server exposes a single tool that accepts filename and content parameters, analyzes the code against these predefined rules, and returns violations as formatted text. This implementation is particularly valuable for development teams wanting to maintain architectural integrity through automated code reviews within AI assistant conversations."
alejandroballesterosc,document-edit-mcp,1.0,0,6.4,-1.92,0.808,MINIMAL,"Document MCP server that enables Claude Desktop to perform operations on Microsoft Word, Excel, and PDF files. Built with FastMCP and Python, it provides tools for creating and editing documents, converting between formats, and handling spreadsheet data. Particularly valuable for users who need to automate document workflows or manipulate files through natural language requests without switching between applications."
alekspetrov,mcp-docs-service,1.6,0,7.8,-2.34,1.366,MINIMAL,"MCP Documentation Service is a custom implementation that enables AI assistants to interact with markdown documentation files. Developed by Aleks Petrov, this service provides document management capabilities including creating, reading, updating, and deleting documentation files, working with YAML frontmatter metadata, searching through documentation, and analyzing documentation health. The implementation supports both Node.js and Deno environments, offers command-line options for specifying custom documentation directories, and integrates seamlessly with Cursor IDE and Claude Desktop through a SQL-like query format for executing commands."
alessandrorumampuk,mcpserver,1.0,1,0,-0.0,0.9,MINIMAL,"MCP Server implementation that integrates with Ollama's Llama3 model to provide a terminal-based chat interface with persistent context management. Built with Node.js and Socket.IO, it features a PWA-ready web interface with offline support, YouTube video search/sharing capabilities, and a full xterm.js terminal emulator. The implementation focuses on maintaining conversation history and context across sessions while providing a familiar terminal experience for technical users."
alexandertsai,mcp-telegram,1.0,0,6.7,-2.0100000000000002,0.7989999999999999,MINIMAL,"Telegram MCP Server enables Claude to access and interact with Telegram accounts, allowing for reading and sending messages through a simple interface. Developed by Alexander Tsai, it provides tools for retrieving chat lists, reading messages, marking messages as read, and sending replies while maintaining the user's conversational style. The implementation uses Telethon for Telegram API access and includes a conversation context analyzer that reads from a customizable style guide to help Claude generate responses that match the user's texting patterns. Perfect for users who want to monitor and respond to Telegram messages through Claude without switching applications."
alexandervtr,cursor-mcp-file-organizer,1.0,0,6.0,-1.7999999999999998,0.8200000000000001,MINIMAL,"Cursor MCP File Organizer provides a server implementation for automatically organizing files in the Downloads folder based on file types. Built with TypeScript and Express, it offers a configurable rule-based system that sorts files into appropriate directories (like Documents, Images, Archives) while supporting options such as date-based organization and handling duplicate files. The server exposes RESTful endpoints for file operations and uses Server-Sent Events (SSE) for real-time communication with the Cursor IDE. This implementation is particularly useful for developers who want to maintain an organized file system without manual intervention, especially when working with multiple file types across different projects."
alexander-zuev,supabase-mcp-server,1.6,7,7.8,-2.34,1.1340000000000001,MINIMAL,"This MCP server implementation provides a bridge between Supabase and AI assistants, enabling database schema exploration and management through natural language interactions. It leverages the Supabase client to execute read-only SQL queries, retrieve schema information, and list tables and columns. The server offers tools for listing schemas, exploring table structures, and executing custom SQL queries, making it particularly useful for developers and data analysts who want to integrate Supabase database operations into their AI workflows. By abstracting database interactions into MCP tools, it simplifies the process of querying and analyzing Supabase data within AI-powered applications."
alexandrebagio,swapi-mcp,1.0,0,3.1,-0.9299999999999999,0.907,MINIMAL,"SWAPI MCP Server provides a simple interface to the Star Wars API (SWAPI), allowing AI assistants to retrieve information about planets from the Star Wars universe. Built with TypeScript and the Model Context Protocol SDK, it implements a single tool that enables searching for planets by name and paginating through results. The server returns planet names as text content along with metadata about the total number of results and current page, making it useful for Star Wars-related queries and demonstrations of basic API integration patterns."
alexandreroman,mcp-chess,1.0,0,6.7,-2.0100000000000002,0.7989999999999999,MINIMAL,"This MCP server implementation provides a bridge to play chess games using AI. Developed by Alexandre Roman, it integrates with Spring AI and utilizes external chess libraries for game logic and board visualization. The server offers tools for move validation, game state management, and potentially AI-powered chess analysis. It's designed for use cases requiring interactive chess gameplay or automated chess analysis within AI-assisted applications."
alexandreroman,mcp-location,1.0,0,0,-0.0,1.0,MINIMAL,"This MCP server implementation provides location-based functionality using the Spring AI framework. It integrates with external APIs to retrieve geolocation data, offering capabilities such as determining a user's location based on their IP address. The server is designed to enhance AI-assisted applications with contextual location awareness, making it useful for personalized recommendations, localized content delivery, or geographic data analysis in various domains."
alexandreroman,mcp-time,1.0,0,0,-0.0,1.0,MINIMAL,"This MCP server implementation provides a time-related service using Spring Boot and Spring AI. Developed by Alexandre Roman, it integrates with the Spring AI MCP server starter, allowing for easy deployment and scalability. The server is designed to handle time-based operations and queries, making it suitable for applications that require precise time management or scheduling functionalities. It leverages Java 21 and the latest Spring Boot version, showcasing modern Java development practices."
alexanimal,tradovate-mcp-server,1.0,0,7.0,-2.0999999999999996,0.29000000000000004,MINIMAL,"Tradovate MCP Server provides a bridge to the Tradovate trading platform API, enabling AI assistants to manage futures contracts, positions, and orders. Built by alexanimal, it offers tools for retrieving contract details, listing positions, placing and modifying orders, and accessing account information with real-time market data. The implementation includes robust authentication handling, data caching for offline operation, and fallback to simulated data when the API is unavailable. This server is particularly valuable for trading workflows that require monitoring positions, analyzing contract details, or executing trades directly within AI assistant conversations."
limklister,mcp-google-custom-search-server,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"This Google Custom Search MCP server, developed by Alexander Lindquister, integrates the Google Custom Search API to enable AI assistants to perform web searches. It exposes functions for querying the API and retrieving search results, including web pages, images, and videos. The server handles authentication, request formatting, and response parsing to simplify interactions with Google's search capabilities. By connecting AI systems to Google's vast index of web content, this implementation empowers assistants to find relevant information, answer queries, and gather data from across the internet. It is particularly useful for applications requiring up-to-date web information, content research, or any scenario where an AI needs to search and analyze online resources."
alexbakers,mcp-ipfs,1.0,0,7.0,-2.0999999999999996,0.79,MINIMAL,"MCP-IPFS is a server implementation that provides AI assistants with access to the IPFS Storacha Network through the w3cli interface. Developed by Alex Baker, this TypeScript server enables file uploads, space management, delegation handling, and various IPFS operations via a set of well-defined tools. The implementation requires email authentication with the w3 service and handles command execution, parsing responses, and formatting results for AI consumption. Particularly useful for decentralized storage workflows, content addressing, and managing persistent data on IPFS without requiring direct CLI interaction."
alexei-led,aws-mcp-server,1.0,1,7.8,-2.34,0.866,MINIMAL,"AWS MCP Server provides a lightweight bridge between AI assistants and the AWS CLI, enabling execution of AWS commands through a standardized interface. Built by alexei-led, it features two main tools: describe_command for retrieving AWS CLI documentation and execute_command for running AWS CLI operations with Unix pipe support. The server leverages existing AWS credentials on the host machine, includes pre-defined prompt templates for common AWS tasks following best practices, and supports multi-architecture deployment via Docker. This implementation is particularly valuable for cloud management workflows where users need to interact with AWS resources without leaving their AI assistant conversation."
alexeydubinin,hh-jira-mcp-server,1.2,0,5.4,-1.62,1.038,MINIMAL,"This Jira MCP server, developed by Alexey Dubinin at HeadHunter, integrates with the Jira API to enable AI assistants to interact with Jira issues and projects. It exposes functions for querying, creating, and modifying Jira tickets, handling authentication and API interactions. The server simplifies Jira management tasks by abstracting away the complexities of the Jira API. By connecting AI capabilities with project management functionality, this implementation allows assistants to track tasks, update issue statuses, and manage workflows programmatically. It is particularly useful for applications requiring automated project tracking, issue management, or any scenario where an AI system needs to interact with Jira data."
alexgoller,mcp-server-agenda,1.0,0,5.9,-1.7700000000000002,0.823,MINIMAL,"This MCP server for Agenda, developed by alexgoller, provides AI assistants with a standardized interface to interact with the Agenda note-taking app on macOS. Built using Python and leveraging x-callback-urls, it offers capabilities for creating notes, managing projects, and opening existing notes in Agenda. The server abstracts the complexities of Agenda's x-callback-url scheme, handling URL encoding and execution through macOS system calls. It's particularly valuable for AI systems focused on note management and personal productivity, enabling use cases such as automated note creation, project organization, and seamless integration of AI-generated content into the user's Agenda workflow."
alexgoller,illumio-mcp-server,1.0,0,7.8,-2.34,0.734,MINIMAL,"This Illumio MCP server, developed by alexgoller, provides an interface for AI assistants to interact with Illumio's Policy Compute Engine (PCE). It integrates with the Illumio API to enable programmatic management of workloads, labels, and traffic flows within a zero trust security environment. The server exposes tools for creating, updating, and deleting workloads and labels, as well as analyzing traffic patterns and security policies. By abstracting PCE interactions, it allows AI systems to easily perform tasks like workload management, label operations, and traffic analysis. This implementation is particularly useful for security teams, network administrators, and DevOps professionals who want to leverage AI capabilities for automating Illumio PCE operations, enhancing security posture, and gaining insights from network traffic data."
alexifeng,mcp_chat_logger,1.0,0,4.0,-1.2000000000000002,0.88,MINIMAL,"MCP Chat Logger is a simple tool that allows AI assistants to save chat conversations as formatted Markdown files. Developed by Alexi.F, this implementation provides a single function that takes chat messages and an optional conversation ID, then saves them with timestamps in a structured format. The saved files include role information, timestamps, and the full content of each message, making it useful for record-keeping, analysis, or creating permanent archives of important conversations."
alexkissijr,unrealmcp,1.0,0,7.7,-2.31,0.769,MINIMAL,"UnrealMCP enables AI assistants to interact with Unreal Engine through a TCP server that exposes scene manipulation, material creation, and blueprint generation capabilities. The implementation includes both C++ components that integrate directly with the Unreal Editor and Python modules that implement the Model Context Protocol, allowing tools like Claude Desktop and Cursor to send commands to Unreal Engine. It features a modular command system that can be extended with custom handlers, making it particularly valuable for AI-assisted game development and virtual production workflows."
adiom-data,lance-mcp,1.0,0,6.6,-1.9799999999999998,0.802,MINIMAL,"This LanceDB MCP server, developed by Alex Komyagin, enables AI assistants to interact with LanceDB vector databases through natural language. It leverages the LanceDB Node.js client and Model Context Protocol to provide operations like querying, inserting, and managing vector data. Built with TypeScript and modern dependencies, it offers a bridge between large language models and efficient vector storage. The implementation is designed for developers and data scientists working on AI applications that require fast similarity search, recommendation systems, or semantic analysis on large datasets. It simplifies vector database operations for AI assistants, allowing them to perform complex queries and data manipulations using conversational language."
aithelab,mcp-terminal-use,1.0,0,2.6,-0.78,0.922,MINIMAL,"This MCP terminal server, developed by Alex Man, enables AI assistants to interact with specified directories on a user's system through a command-line interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for executing shell commands, creating directories, and navigating the file system within allowed boundaries. The implementation focuses on security by restricting access to predefined directories and whitelisting permitted commands. It's particularly useful for tasks like file management, system automation, or providing AI assistants with controlled access to local resources, enabling safe interaction with the user's file system without requiring deep knowledge of system-level operations or security considerations."
al-how,supernotes-to-obsidian,1.0,0,4.5,-1.35,0.865,MINIMAL,"This MCP implementation, developed by Alex Howard, provides a tool for importing Supernotes exports into Obsidian daily notes. Built with Python, it leverages the Model Context Protocol to streamline the process of transferring and formatting notes between these two popular note-taking applications. The script creates daily notes from templates, cleans up formatting, adds wikilinks for proper nouns, and handles OCR errors. By automating these tasks, it significantly reduces the manual effort required when migrating from Supernotes to Obsidian. This implementation is particularly useful for knowledge workers, researchers, and students who are transitioning between note-taking systems or looking to maintain a consistent daily journaling practice within Obsidian while importing content from Supernotes."
alexneyler,kusto-mcp,1.0,0,6.2,-1.8599999999999999,0.31400000000000006,MINIMAL,"Kusto MCP provides a bridge between AI assistants and Azure Data Explorer (Kusto) databases, enabling natural language querying of Kusto data. Built with .NET 9 and containerized for easy deployment, it leverages Azure OpenAI to translate natural language questions into KQL queries. The implementation includes configuration via YAML files that define database connections and example prompts, making it particularly valuable for data analysis, resource monitoring, and information retrieval from Kusto databases without requiring KQL expertise."
mastercode-io,scaflog-zoho-mcp-server,1.0,0,5.9,-1.7700000000000002,0.32299999999999995,MINIMAL,"This Zoho Creator MCP server, developed by Alex Sherin, integrates with the Zoho Creator API to enable AI assistants to interact with custom business applications. It provides a simple note storage system with a custom URI scheme, allowing for creation and retrieval of notes. The server implements a summarization prompt and a tool for adding new notes, abstracting away the complexities of the Zoho Creator API. By connecting AI capabilities with custom business logic and data storage, this implementation enables assistants to manage and analyze application-specific information. It is particularly useful for scenarios where AI systems need to interact with tailored business processes or maintain context across conversations within custom Zoho Creator applications."
alexsmirnov,mcp-server-continue,1.0,0,5.2,-1.56,0.656,MINIMAL,"FastMCP Server for continue.dev provides a development automation server that exposes prompts, resources, and tools to LLM clients. Built by Alexander Smirnov, it implements the Model Context Protocol to offer features like URL content fetching, library documentation access, project structure analysis, and web search capabilities through both internet and Perplexity APIs. The server is designed with a modular architecture that separates configuration, resources, tools, and prompts into distinct components, making it particularly valuable for developers who want to enhance their coding workflow with AI assistance without leaving their development environment."
alexwohletz,language-server-mcp,1.0,0,6.4,-1.92,0.808,MINIMAL,"This language server MCP implementation, developed by Alex Wohletz, provides language support for code editing by integrating with the Model Context Protocol. It offers features like hover information, code completion, and diagnostics for TypeScript and potentially Python. The server exposes these capabilities as MCP tools, allowing AI assistants to analyze and manipulate code. By connecting AI capabilities with language-specific tooling, this implementation enables assistants to provide contextual coding help, suggest improvements, and catch potential errors. It is particularly useful for applications requiring code understanding, automated refactoring, or any scenario where an AI system needs to reason about and interact with source code."
alfonsograziano,node-code-sandbox-mcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"Node Code Sandbox MCP provides a secure environment for executing JavaScript code within Docker containers. It offers tools for initializing sandboxes, running code with npm dependencies, and managing container lifecycles, all while maintaining isolation through resource limits (512MB memory, 1 CPU). The implementation supports both persistent containers for multiple operations and ephemeral containers for one-off executions, making it ideal for AI assistants that need to test JavaScript snippets, demonstrate npm package usage, or run isolated code examples without security risks."
alfredatnycu,grasshopper-mcp,1.2,0,7.7,-2.31,0.969,MINIMAL,"Grasshopper MCP Bridge connects Grasshopper (a visual programming environment for Rhino) with Claude Desktop through a bidirectional communication system. Developed by alfredatnycu, it consists of a Grasshopper plugin component (GH_MCP.gha) that provides a TCP server and a Python bridge server that implements the Model Context Protocol. The system includes a component knowledge base with information about common Grasshopper components, their parameters, and connection rules, enabling Claude to create and manipulate parametric designs through natural language commands. This implementation is particularly valuable for architects, designers, and engineers who want to leverage AI assistance for parametric modeling workflows without leaving their conversation interface."
algonacci,mcp-gnews,1.0,0,2.8,-0.8399999999999999,0.916,MINIMAL,"This MCP server implementation provides integration with the GNews API, enabling news search and retrieval capabilities. It offers tools for searching news articles, fetching top headlines, and retrieving topic-specific news across multiple languages and countries. The server includes resource handlers for convenient news access and prompt generators to facilitate natural language interactions. Developed by Eric Julianto, it's useful for applications requiring up-to-date news data from diverse global sources."
algonacci,mcp-tavily-extract,1.0,0,3.5,-1.0499999999999998,0.605,MINIMAL,"This MCP server implementation provides a simple interface for extracting web page content using the Tavily API. It utilizes the FastMCP framework and exposes a single tool, 'extract_url', which takes a URL as input and returns the extracted content. The server requires a Tavily API key to be set as an environment variable and is designed for easy integration into projects that need web scraping capabilities."
algonacci,mcp-tools,1.0,0,0,-0.0,0.5,MINIMAL,"This MCP server implementation integrates the Tavily search API to provide advanced web search capabilities. Developed by Eric Julianto, it offers tools for performing customizable searches with options for depth, result count, time range, and AI-generated answers. The server is built using the FastMCP framework and includes features like progress reporting and resource handling. It's designed for use cases requiring up-to-date web information, such as research, content creation, or data aggregation tasks."
algonacci,mcp-tavily-search,1.0,0,3.5,-1.0499999999999998,0.605,MINIMAL,"This MCP server implementation provides a web search capability using the Tavily API. It offers a search tool with customizable parameters, a resource for direct context insertion, and a prompt generator for search queries. The server is designed to enhance AI-assisted workflows by enabling internet searches, making it particularly useful for tasks requiring up-to-date information or fact-checking."
algonacci,mcp-unlock-pdf,1.0,0,2.8,-0.8399999999999999,0.916,MINIMAL,"This MCP server implementation provides functionality to read and extract content from both protected and unprotected PDF files. It offers tools for reading PDFs, handling password-protected documents, and formatting the extracted content as resources. The server is designed to be integrated into workflows that require PDF parsing and text extraction, making it useful for document analysis, content indexing, or data extraction from PDF sources."
algonacci,mcp-wikipedia,1.0,0,2.6,-0.78,0.922,MINIMAL,"This MCP server provides AI assistants with access to Wikipedia content through a simple interface built with FastMCP. It exposes five tools that allow clients to search Wikipedia, retrieve article summaries, access full page content, get random articles, and change the language setting. Created by Eric Julianto, this implementation serves as a bridge between AI systems and the vast knowledge base of Wikipedia, making it useful for research tasks, fact-checking, and educational applications where quick access to encyclopedic information is needed."
aliargun,mcp-server-gemini,1.3,0,7.0,-2.0999999999999996,1.01,MINIMAL,"This Gemini MCP server, developed by Ali Argun, enables Claude Desktop to interact with Google's Gemini AI models. It provides a full implementation of the Model Context Protocol, supporting real-time response streaming and secure API key handling. The server integrates with the @google/generative-ai library to offer a streamlined interface for leveraging Gemini's capabilities within Claude Desktop. By abstracting the complexities of the Gemini API, this implementation allows for easy configuration of model parameters and seamless integration with existing Claude Desktop workflows. It is particularly useful for users who want to access Gemini's advanced language models through a familiar interface, enabling applications like chatbots, content generation, and AI-assisted analysis within the Claude Desktop environment."
aliyun,alibabacloud-adb-mysql-mcp-server,1.2,0,5.5,-1.6500000000000001,1.035,MINIMAL,"Adb MySQL MCP Server provides a universal interface between AI Agents and Alibaba Cloud's Adb MySQL databases, enabling seamless metadata retrieval and SQL operations. Developed by Alibaba Cloud, this Python-based implementation offers tools for executing SQL queries, analyzing query plans, and retrieving execution statistics, along with resource templates for accessing database schemas, table definitions, and configuration values. The server requires minimal configuration through environment variables and supports both local development and pip installation, making it ideal for data analysts and developers who need AI-assisted database interactions with Adb MySQL clusters."
aliyun,alibaba-cloud-ops-mcp-server,1.2,0,6.1,-1.83,1.017,MINIMAL,"Alibaba Cloud MCP Server provides a bridge to Alibaba Cloud services, enabling AI assistants to manage cloud resources through natural language. Developed by Zheng Dayu at Alibaba, this implementation offers tools for managing ECS instances (start, stop, reboot, create, delete), viewing cloud resources (instances, regions, zones, images, security groups), monitoring system metrics (CPU, memory, disk usage), and configuring VPC networks. The server supports both API-based operations and more complex tasks through OOS (Operation Orchestration Service), making it particularly valuable for users who need to monitor and manage their Alibaba Cloud infrastructure without navigating the console interface."
aliyun,alibabacloud-observability-mcp-server,1.4,0,5.9,-1.7700000000000002,1.2229999999999999,MINIMAL,"Alibaba Cloud Observability MCP Server provides tools for accessing Alibaba Cloud's monitoring and logging services, including Log Service (SLS) and Application Real-Time Monitoring Service (ARMS). The server enables AI assistants to query log structures, execute log queries, search applications, and analyze trace data through a standardized interface. Built with Python and supporting both stdio and SSE transport protocols, it securely handles authentication through Alibaba Cloud AccessKeys while offering comprehensive error handling. This implementation is particularly valuable for developers monitoring cloud applications, troubleshooting performance issues, or analyzing application logs within the Alibaba Cloud ecosystem."
aliyun,alibabacloud-rds-openapi-mcp-server,1.0,0,7.1,-2.13,0.787,MINIMAL,"AlibabaCloud RDS OpenAPI MCP Server provides a bridge to Alibaba Cloud's Relational Database Service (RDS) through a set of tools that enable AI assistants to manage and monitor database instances. The implementation offers capabilities for querying instance details, modifying parameters, analyzing performance metrics, and creating new database instances. It also includes VPC management functions for network configuration. This server is particularly useful for DevOps teams managing Alibaba Cloud infrastructure who need to automate database administration tasks or troubleshoot performance issues through natural language interactions."
aliyun,alibabacloud-dataworks-mcp-server,1.4,0,7.6,-2.2800000000000002,1.172,MINIMAL,"DataWorks MCP Server exports the Alibaba Cloud DataWorks Open API to the Model Context Protocol, allowing AI agents to interact with DataWorks project management and data workflow tools through a standardized, type-safe interface. Built with TypeScript and Zod for robust schema validation, the server dynamically generates MCP tools from the DataWorks API, enabling programmatic project listing and management operations."
alihkhawaher,everything-search-server,1.0,0,6.8,-2.04,0.796,MINIMAL,"This Everything Search MCP server provides AI assistants with powerful file search capabilities through integration with the Everything Search Engine. Developed to enhance file discovery and management tasks, it leverages the Everything Search HTTP server to offer advanced search options including case sensitivity, whole word matching, regular expressions, and path-specific searches. The server supports customizable result sorting and formatting, making it ideal for use cases such as document retrieval, file organization, and content analysis across large file systems. Its implementation in TypeScript, using the Model Context Protocol SDK, ensures efficient and standardized communication between AI systems and local file search functionalities."
alinagy,godspeed-mcp,1.2,0,5.8,-1.7399999999999998,1.026,MINIMAL,"Godspeed MCP provides a connector for AI assistants to interact with the Godspeed Task Management API through the Model Context Protocol. It enables task management operations including listing, creating, updating, and deleting tasks, as well as managing task lists. Built with TypeScript and using the MCP SDK, this implementation authenticates via API token and exposes a set of tools that allow AI assistants to help users organize their productivity workflow directly from within their development environment. The server is designed to work with Cursor and other MCP-compatible clients, making it useful for developers who want to manage their tasks without context switching."
alinaqi,mcp-linkedin-server,1.0,0,7.5,-2.25,0.775,MINIMAL,"This MCP server implementation provides a bridge to LinkedIn's platform, enabling AI assistants to perform various LinkedIn operations such as logging in, browsing feeds, searching profiles, viewing specific profiles, and interacting with posts. Developed by alinaqi, it uses Playwright for browser automation and implements secure session management with encrypted cookie storage. The server offers tools for both manual and automated LinkedIn interactions, making it particularly useful for AI applications requiring social media engagement, professional networking, or talent acquisition tasks. It focuses on rate limiting, error handling, and maintaining compliance with LinkedIn's terms of service, ensuring robust and responsible automation of LinkedIn activities."
alioshr,memory-bank-mcp,1.3,0,7.4,-2.2199999999999998,1.078,MINIMAL,"This Memory Bank MCP server implementation transforms traditional file-based memory banks into a centralized, remotely accessible service. Developed by Aliosh Pimenta, it enables multi-project memory bank management with consistent file structure and validation. The server provides full MCP protocol implementation for read/write operations, project listing, and file management. It ensures proper isolation between project memory banks and includes security features like path traversal prevention. The implementation is particularly useful for AI assistants and development teams requiring structured, remotely accessible project documentation and context management across multiple projects."
alistairwalsh,mcp_pandas,1.0,0,0,-0.0,1.0,MINIMAL,"This MCP server for pandas analysis, developed by an unnamed author, provides AI assistants with powerful data manipulation and analysis capabilities. Built with Python and leveraging libraries like pandas, numpy, and matplotlib, it offers a standardized interface for data processing, statistical analysis, and visualization tasks. The server abstracts the complexities of pandas operations, allowing AI systems to easily incorporate data analysis into their workflows. It's containerized using Docker for easy deployment and scalability. This implementation is particularly valuable for data scientists, analysts, and AI researchers working on data-driven projects, enabling use cases such as exploratory data analysis, time series forecasting, and automated report generation across various domains."
aliyun,mcp-server-esa,1.0,0,6.5,-1.9500000000000002,0.8049999999999999,MINIMAL,"MCP Server ESA provides a bridge to Alibaba Cloud's Edge Security Acceleration (ESA) service, enabling AI assistants to manage edge routines, deployments, routes, and sites. Developed by Aliyun, this TypeScript implementation exposes over 20 specialized tools for operations including creating and deploying edge routines, managing code versions, configuring routes, and handling site records through the ESA API. The server authenticates with Alibaba Cloud using access keys and handles complex operations like code uploads to OSS, making it particularly valuable for developers who need to automate edge computing deployments or manage ESA resources through AI assistants."
aliyun,alibabacloud-hologres-mcp-server,1.4,0,4.9,-1.4700000000000002,1.253,MINIMAL,"Hologres MCP Server provides a universal interface between AI Agents and Alibaba Cloud's Hologres databases, enabling seamless communication for metadata retrieval and SQL execution. Developed by TimothyDing, it supports executing SQL (including DDL, DML, and queries), collecting statistics with ANALYZE commands, and retrieving database metadata such as schemas, tables, and table statistics. The server requires Python 3.13+ and can be installed via pip or run directly from the repository, making it easy to integrate with MCP clients through simple configuration. This implementation is particularly valuable for data analysis workflows that need to interact with Hologres databases without switching contexts."
aliyun,alibabacloud-lindorm-mcp-server,1.0,0,5.3,-1.59,0.841,MINIMAL,"Lindorm MCP Server provides a bridge between AI assistants and Alibaba Cloud's Lindorm multi-model NoSQL database. Built in Python using FastMCP, it exposes tools for vector search operations and SQL query execution against Lindorm's wide-table engine. The server enables retrieval from knowledge bases using both full-text and vector search capabilities, allows exploration of index structures, and supports SQL operations with specialized error handling for inefficient queries. It requires configuration of Lindorm instance credentials and deployed text-embedding models, making it valuable for applications that need to leverage Lindorm's vector search capabilities for retrieval augmented generation or perform SQL operations on Lindorm data stores."
aliyun,alibabacloud-polardb-mcp-server,1.0,0,1.4,-0.41999999999999993,0.958,MINIMAL,"PolarDB MCP Server provides a bridge between AI assistants and Alibaba Cloud PolarDB databases, enabling direct interaction with MySQL and PostgreSQL database instances. The server supports two database types (MySQL and PostgreSQL) with similar capabilities including table listing, field information retrieval, data querying, and SQL execution with configurable safety controls for write operations. It implements both stdio and SSE transport modes, handles database connections securely, and includes specialized features like AI model management for PolarDB MySQL. This implementation is particularly valuable for developers who need to access and manipulate PolarDB database content through natural language interfaces without writing complex SQL queries manually."
alizdavoodi,mcpdocsearch,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"MCPDocSearch is a tool for crawling websites, generating Markdown documentation, and making it searchable via an MCP server. It consists of two main components: a crawler CLI that extracts content from documentation sites and converts it to Markdown, and an MCP server that loads these documents, chunks them into searchable sections, and generates vector embeddings using sentence-transformers. The server exposes tools for listing documents, retrieving document structures, and performing semantic searches over the content, making it particularly useful for AI agents that need to access up-to-date documentation beyond their training cutoff."
HEAD,openai-server,1.0,0,0,-0.0,1.0,MINIMAL,"This MCP server, developed by AllAboutAI-YT, implements a simple notes system to demonstrate core MCP concepts. It provides resources for text notes with URIs and metadata, tools for creating new notes, and prompts for generating summaries. The server uses TypeScript and offers a straightforward interface for AI assistants to manage and analyze textual information. By connecting AI capabilities with a basic note-taking system, this implementation serves as an educational example and starting point for developers looking to understand MCP principles. It is particularly useful for applications requiring simple text storage and retrieval, note summarization, or as a foundation for building more complex document management systems with AI integration."
allenbijo,mcp-sysinfo,1.0,0,5.0,-1.5,0.85,MINIMAL,"MCP-SysInfo is a lightweight server that provides real-time system information through a simple API. Developed by Allen Bijo, it retrieves detailed hardware and system metrics including CPU, memory, disk, and GPU statistics using libraries like psutil and GPUtil. The server exposes a single endpoint that returns comprehensive system data in a structured format, making it particularly useful for monitoring and diagnostic purposes where users need quick access to their system's performance metrics without leaving their AI assistant interface."
allenday,solr-mcp,1.0,0,6.1,-1.83,0.817,MINIMAL,"Solr MCP provides a bridge between AI assistants and Apache Solr search indexes, enabling powerful hybrid search capabilities that combine keyword precision with vector semantic understanding. Built by Allen Day, this Python implementation uses FastMCP to expose Solr's search functionality through a standardized protocol, with features including vector embeddings generation via Ollama (using nomic-embed-text), unified collections for storing both document content and embeddings, and Docker integration for easy deployment. The server is particularly valuable for workflows requiring advanced document retrieval from existing Solr indexes, allowing AI assistants to perform contextual searches against structured data repositories without direct database access."
allenporter,mcp-server-home-assistant,1.2,0,4.4,-1.3200000000000003,0.832,MINIMAL,"This MCP server, developed by allenporter, enables AI assistants to interact with Home Assistant through a standardized interface. It provides tools for querying and controlling smart home devices, sensors, and automations via the Home Assistant API. The server integrates directly with Home Assistant instances, abstracting away complexities to offer a simplified workflow for AI systems. By connecting AI capabilities with Home Assistant's comprehensive smart home platform, this implementation empowers AI assistants to manage and analyze home automation tasks. It is particularly useful for applications requiring smart home control, energy management, or any scenario where an AI system needs to interact with and reason about the state of a connected home."
allglenn,mcp-name-origin-server,1.0,0,6.3,-1.8900000000000001,0.6890000000000001,MINIMAL,"This MCP server predicts the origin of names using the Nationalize.io API, offering both single-name prediction and batch processing capabilities. It exposes two tools: 'predict_origin' for individual names and 'batch_predict' for multiple names, returning country predictions with probability scores. The implementation uses FastMCP with stdio transport for seamless integration with AI assistants, making it valuable for applications requiring demographic analysis, character development, or cultural research."
allthatjazzleo,mantrachain-mcp,1.0,0,6.5,-1.9500000000000002,0.8049999999999999,MINIMAL,"A Model Context Protocol (MCP) server for interacting with MantraChain (Cosmos SDK) blockchain. This server provides tools for sending tokens, delegating to validators, querying balances, and more using the MCP protocol."
mcp-100,stock-market-server,1.0,0,5.7,-1.7100000000000002,0.671,MINIMAL,"Stock Market MCP server that provides real-time financial data retrieval tools using the Alpha Vantage API. Enables querying current stock prices, market reports, financial statements, and company overviews through a standardized interface. Useful for financial analysis, investment research, and building trading-related AI assistants."
alsonwangkhem,github-mcp-2,1.0,0,6.3,-1.8900000000000001,0.31099999999999994,MINIMAL,"GitHub MCP server provides a bridge between Claude and the GitHub API, enabling AI assistants to interact with GitHub repositories. Built with TypeScript and Octokit, it offers tools for searching repositories, retrieving repository information, listing issues, and creating new issues. The server also includes prompt handlers that generate formatted content for issue descriptions, pull request descriptions, and search queries. This implementation is particularly useful for developers who want to manage their GitHub projects directly through AI conversations, streamlining workflows for issue tracking and repository exploration."
always-tinkering,rhinomcpserver,1.0,0,7.5,-2.25,0.775,MINIMAL,"RhinoMCP Server provides a bridge between AI systems and Rhino 3D's Python scripting capabilities through the Model Context Protocol. This implementation enables AI agents to generate and manipulate 3D models in Rhino by exposing scene context information and geometry creation tools (currently supporting spheres), with all operations requiring explicit user consent via dialog prompts. The server is designed to run within Rhino's Python environment and follows MCP security guidelines, making it particularly valuable for AI-assisted 3D modeling workflows that require direct interaction with Rhino documents."
alx99,db-mcp,1.0,0,5.1,-1.53,0.847,MINIMAL,"This MCP server, developed by ALX99, provides a standardized interface for AI models to interact with multiple database systems including PostgreSQL, MySQL, and SQLite. Built using Go, it offers tools for connecting to databases, executing queries, and retrieving results in CSV format. The implementation focuses on simplifying database access through a consistent MCP interface, enabling AI assistants to perform complex data operations across different database flavors. By connecting AI models with robust database functionality, this server facilitates sophisticated data analysis, reporting, and management scenarios. It's particularly valuable for applications and AI systems that need to work with diverse data sources or require flexible database interactions without being tied to a specific database management system."
alxspiker,ai-meta-mcp-server,1.0,0,6.4,-1.92,0.808,MINIMAL,"AI Meta MCP Server enables AI agents to dynamically create and execute custom tools through a meta-function architecture. Built with TypeScript and the Model Context Protocol SDK, it provides a secure sandbox for running JavaScript, Python, or shell code defined at runtime. The server includes persistent storage for tools, allowing AI to build up a library of functions that can be listed, updated, or deleted. With configurable security controls for different execution environments, it's ideal for AI agents that need to extend their capabilities programmatically without requiring developer intervention for each new tool."
alxspiker,mcp-server-ftp,1.0,0,6.8,-2.04,0.796,MINIMAL,"The MCP Server for FTP Access enables Claude.app to interact with FTP servers through natural language commands. Built with TypeScript and the basic-ftp library, it provides tools for listing directories, downloading and uploading files, creating directories, and deleting files or directories on remote FTP servers. The server is configured through environment variables for connection details and supports both standard FTP and secure FTPS connections. This implementation is particularly useful for users who need to manage remote file systems directly from their AI assistant interface without switching to dedicated FTP clients."
alxspiker,windows-command-line-mcp-server,1.0,0,7.5,-2.25,0.775,MINIMAL,"The Windows Command Line MCP Server provides a robust, secure bridge between AI models and Windows system operations. It allows controlled execution of commands, project creation, and system information retrieval while maintaining strict security protocols."
am2rican5,mcp-google-calendar,1.2,0,7.1,-2.13,0.487,MINIMAL,"Google Calendar MCP Server provides a TypeScript-based integration with Google Calendar API, enabling AI assistants to manage calendar events through a set of standardized tools. Developed by am2rican5, it features persistent token storage for seamless authentication, supports operations like listing calendars, creating/editing/deleting events, and offers both stdio and SSE transport options. The implementation handles OAuth 2.0 authorization flow automatically, making it ideal for AI agents that need to schedule meetings, retrieve calendar information, or manage events without requiring repeated user authentication."
amanasmuei,mcp-server-nodemcu,1.0,0,7.8,-2.34,0.766,MINIMAL,"NodeMCU MCP provides a bridge between AI assistants and ESP8266-based IoT devices, enabling remote management and monitoring through the Model Context Protocol. The server exposes tools for listing connected devices, retrieving device information, sending commands, and updating device configurations, while handling both WebSocket connections for real-time device communication and REST API endpoints for traditional client access. Built with a modular architecture using Express.js and the official MCP SDK, it's particularly valuable for smart home automation, environmental monitoring, and IoT device fleet management without leaving the AI assistant interface."
amansingh0311,mcp-qdrant-openai,1.0,0,6.6,-1.9799999999999998,0.698,MINIMAL,"MCP Qdrant Server with OpenAI Embeddings provides vector search capabilities by connecting AI assistants to Qdrant vector databases. The server exposes three main tools: semantic search in collections using OpenAI embeddings, listing available collections, and viewing collection information. It handles the generation of embeddings from natural language queries and performs vector similarity search against Qdrant collections, making it valuable for applications requiring semantic document retrieval, knowledge base search, or any use case where finding contextually similar content is important."
zxkane,mcp-server-amazon-bedrock,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"This Amazon Bedrock MCP server, developed by an unnamed author, provides a standardized interface for leveraging Amazon's Nova Canvas model for AI image generation. Built with TypeScript and utilizing the AWS SDK, it offers tools for creating images from text descriptions with features like negative prompts, configurable dimensions, and seed control. The server implements comprehensive input validation, error handling, and AWS credential management. By abstracting the complexities of the Bedrock API, it enables AI systems to easily generate images based on textual input. This implementation is particularly valuable for applications requiring programmatic image creation, facilitating use cases such as content illustration, visual concept exploration, and dynamic image generation for various platforms."
amekala,adspirer-mcp-server,1.0,0,6.8,-2.04,0.796,MINIMAL,"The Amazon Advertising MCP Server provides Claude Desktop users with access to Amazon Advertising data through a simple command-line interface. Built using the Model Context Protocol SDK, it connects to a Supabase backend database to retrieve advertiser information, account listings, and validate API keys. The implementation includes tools for basic operations like listing advertiser accounts and retrieving account details, along with utility functions for testing connectivity. It requires only an Amazon Advertising API key for authentication, making it accessible for marketers and advertisers who want to analyze their Amazon advertising data directly through Claude without needing to understand the underlying database infrastructure."
amgadabdelhafez,dbx-mcp-server,1.0,0,7.7,-2.31,0.2689999999999999,MINIMAL,"This MCP server integrates with Dropbox, exposing a set of Dropbox operations as MCP tools. Developed by Amgad, it allows MCP-compatible clients to interact with Dropbox for file management tasks such as listing, uploading, downloading, and sharing files. The server supports authentication via environment variables or runtime updates, and includes comprehensive error handling and testing capabilities. It's particularly useful for AI-assisted workflows requiring cloud storage integration and file manipulation."
amidabuddha,unichat-mcp-server,1.6,0,7.1,-2.13,1.3130000000000002,MINIMAL,"This Unichat MCP server, developed by amidabuddha, provides a unified interface for interacting with multiple AI language models including OpenAI, MistralAI, Anthropic, xAI, and Google AI. It exposes a single 'unichat' tool that takes messages as input and returns AI-generated responses, abstracting away the differences between various AI providers. Built in Python, the implementation offers predefined prompts for common tasks like code review, documentation generation, and code explanation. By bridging multiple AI services through a standardized MCP interface, this server enables flexible AI model selection and consistent interaction patterns across providers. It is particularly useful for developers and applications requiring AI-powered code assistance, natural language processing, or multi-model AI capabilities without vendor lock-in."
amidabuddha,unichat-ts-mcp-server,1.2,0,7.2,-2.16,0.9159999999999999,MINIMAL,"This TypeScript MCP server, developed by Stefan, integrates the Unichat library to enable AI assistants to interact with multiple language models including OpenAI, MistralAI, Anthropic, xAI, and Google AI. It provides a unified interface for sending requests to these models via a single 'unichat' tool, abstracting away the complexities of individual APIs. The server supports both STDIO and SSE transport mechanisms and includes predefined prompts for common tasks like code review, documentation, and explanation. By offering a consistent way to leverage multiple AI models, this implementation is particularly useful for developers building flexible chatbots, multi-model AI assistants, or applications that require seamless switching between different language models."
aminalali8,bns-mcp-server,1.0,0,7.1,-2.13,0.713,MINIMAL,"Bunnyshell MCP Server provides a bridge between Claude Desktop and the Bunnyshell platform, enabling AI assistants to manage cloud environments directly through conversation. Developed by Amin Al Ali Al Darwish, this TypeScript implementation leverages the Model Context Protocol SDK to expose Bunnyshell CLI capabilities including environment creation, component deployment, and remote development workflows. The server runs either locally or in a Docker container, authenticates via API tokens, and offers both resource templates and guided prompts that make it particularly valuable for DevOps teams looking to streamline environment management through natural language interactions."
aminforou,mcp-gsc,1.0,0,7.8,-2.34,0.266,MINIMAL,"The MCP-GSC server provides Google Search Console integration for AI assistants, enabling access to website search performance data, indexing status, and sitemap management. Created by SEO consultant Amin Foroutan, it offers tools for retrieving search analytics, inspecting URLs, comparing time periods, and managing sitemaps through the Google Search Console API. The implementation includes authentication via service account credentials and features detailed reporting capabilities for SEO analysis. This server is particularly valuable for digital marketers and SEO professionals who need to analyze website search performance, troubleshoot indexing issues, and manage Google Search Console operations through conversational interfaces."
amir-bengherbi,shopify-mcp-server,1.2,0,7.7,-2.31,0.46899999999999986,MINIMAL,"This Shopify MCP server, developed by Amir Bengherbi, enables AI agents to interact with Shopify stores through GraphQL API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for managing products, customers, orders, discounts, and more. The implementation focuses on comprehensive store management capabilities, with features like advanced order querying, webhook management, and draft order creation. It's particularly useful for e-commerce businesses and developers looking to automate Shopify operations, enabling use cases such as inventory management, customer segmentation, and sales analysis without dealing directly with Shopify's API complexities."
aarora79,aws-cost-explorer-mcp-server,1.0,0,7.3,-2.19,0.781,MINIMAL,"AWS Cost Explorer MCP Server provides a specialized interface for retrieving AWS cloud spending data and Amazon Bedrock usage statistics through CloudWatch logs. Developed by Amit Arora, this Python-based server exposes Cost Explorer API functionality and Bedrock model invocation logs as MCP tools, allowing detailed analysis of EC2 spending, service costs breakdowns, and Bedrock usage patterns by region, user, and model. The implementation supports both local deployment via Claude Desktop and remote operation on Amazon EC2, making it particularly valuable for AWS customers who need to monitor and analyze their cloud spending and AI model usage directly within Claude conversations."
amitdeshmukh,stdout-mcp-server,1.0,0,6.6,-1.9799999999999998,0.802,MINIMAL,"A lightweight MCP server that captures and manages stdout logs from multiple processes through a named pipe system. The server creates a cross-platform pipe at a standard location, monitors incoming logs, maintains a history of the last 100 entries, and provides tools for querying and filtering these logs, making it particularly useful for debugging and real-time log monitoring across different applications."
amitsh06,mcp-server,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"MCP Gemini Server provides a Flask-based implementation that enables AI assistants to interact with Google's Gemini API through a standardized protocol. It supports three key operations: text generation, text analysis (with sentiment, summary, and keyword extraction capabilities), and chat conversations. The server handles client-server communication through a RESTful API, processes requests with appropriate error handling, and securely manages API keys through environment variables. Particularly useful for developers looking to extend AI assistant capabilities with Google's generative models without direct API integration."
amoldericksoans,ffmpeg-mcp,1.0,0,1.5,-0.44999999999999996,0.955,MINIMAL,"FFmpeg-MCP provides a server implementation that enables AI models to perform multimedia processing operations using FFmpeg. Built by Amol Soans, it offers tools for video trimming, format conversion, audio extraction, watermarking, quality adjustment, and batch processing of media files. The implementation includes robust security measures like path validation and working directory isolation, comprehensive error handling, and thorough unit tests. It's particularly valuable for workflows requiring media manipulation without leaving the conversation interface, allowing models to process audio and video files directly."
amornpan,py-mcp-gcalendar,1.0,0,5.9,-1.7700000000000002,0.32299999999999995,MINIMAL,"The Google Calendar MCP server enables AI assistants to manage calendar events through a set of specialized tools for listing, creating, and deleting events. Built with the Model Context Protocol, it authenticates with Google Calendar API using OAuth credentials, provides timezone-aware event handling with fallback options, and implements robust error handling and logging. The server exposes four main tools: listing calendar events, creating new events with flexible time formats, deleting specific events by time and title, and removing duplicate events on a given date. This implementation is particularly valuable for productivity workflows where calendar management needs to happen directly within conversation interfaces without context switching."
amornpan,py-mcp-mysql,1.0,0,7.4,-2.2199999999999998,0.778,MINIMAL,"MySQL MCP server that provides a standardized interface for interacting with MySQL databases. It enables listing database tables as resources, reading table contents, and executing arbitrary SQL queries through a flexible tool interface. Designed to abstract database interactions and provide a consistent way for AI systems to explore and manipulate MySQL data sources."
amotivv,cloudflare-browser-rendering,1.0,0,7.2,-2.16,0.784,MINIMAL,"This MCP server implementation provides a bridge to Cloudflare's Browser Rendering API, enabling web scraping and screenshot capture capabilities. It utilizes Puppeteer for browser automation and offers endpoints for content extraction and screenshot generation. The server is designed for use cases requiring dynamic web content processing, such as data extraction from JavaScript-heavy websites or automated visual testing of web applications."
amotivv,memory-box-mcp,1.0,0,7.5,-2.25,0.775,MINIMAL,"This MCP server provides interactive memory capabilities for AI assistants through integration with Memory Box, a semantic memory storage and retrieval system. Developed by Amotivv, it offers tools for saving, searching, and formatting memories using vector embeddings and semantic search. The server is designed for use cases requiring persistent, context-aware AI interactions, such as personalized assistants or knowledge management systems."
amotivv,protonmail-mcp,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"Protonmail MCP Server enables Claude Desktop and Cline VSCode extension to send emails through Protonmail's SMTP service. Developed by amotivv, inc. (creators of Memory Box), this TypeScript implementation provides a single tool for sending emails with support for multiple recipients, CC/BCC functionality, and both plain text and HTML content. The server requires Protonmail SMTP credentials configured as environment variables and includes comprehensive error handling and logging capabilities, making it particularly valuable for workflows where AI assistants need to communicate via email without leaving the conversation interface."
zueai,cloudflare-api-mcp,1.0,0,5.3,-1.59,0.841,MINIMAL,"This MCP server implementation provides a bridge to Cloudflare's API, enabling AI assistants to manage and interact with Cloudflare services. Developed by amxv, it offers a wide range of tools for DNS management, SSL/TLS configuration, firewall rules, load balancing, and more. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on secure API key management and supports various Cloudflare products. It is particularly useful for applications requiring automated cloud infrastructure management, such as configuring CDN settings, managing DNS records, or adjusting security policies across multiple domains."
amysatterlee,nps_mcp,1.0,0,6.0,-1.7999999999999998,0.6799999999999999,MINIMAL,"This MCP implementation, developed by A. Satterlee, integrates with the National Park Service API to provide access to park information and services. Built with TypeScript and utilizing the Model Context Protocol SDK, it offers a command-line interface for interacting with NPS data. The implementation focuses on delivering structured park information, potentially including details on locations, amenities, and activities. It's particularly useful for applications requiring up-to-date national park data, enabling use cases such as trip planning, park exploration, and environmental research without complex API integrations."
yumia-pretty,cursor-mcp-installer,1.0,0,3.1,-0.9299999999999999,0.907,MINIMAL,"A cursor-mcp-installer is a utility server that enables the installation of other MCP servers for the Cursor editor. It provides two main tools: one for installing MCP servers from npm or Python packages via npx/uvx, and another for installing servers from local code repositories. The server handles the configuration by updating Cursor's mcp.json file with the appropriate command, arguments, and environment variables. Written by Ani Betts, it serves as a bridge to simplify the process of adding new MCP capabilities to Cursor without requiring users to manually edit configuration files."
zncou,mcp-installer,1.0,0,4.0,-1.2000000000000002,0.88,MINIMAL,"MCP-Installer is a specialized server that simplifies the installation of other MCP servers. Developed by Ani Betts, it allows Claude to install MCP servers hosted in npm or PyPi packages through natural language commands. The implementation supports both remote package installations via npx/uvx and local repository setups, handling environment variable configuration and command-line arguments. It automatically updates the Claude Desktop configuration file, making it particularly valuable for users who want to quickly expand their AI assistant's capabilities without manually editing configuration files or remembering complex installation commands."
anaisbetts,mcp-installer,2.9,0,4.0,-1.2000000000000002,2.78,MINIMAL,"This MCP server, developed by anaisbetts, serves as a meta-installer for other MCP servers. It enables AI assistants to dynamically install and configure additional MCP servers from npm or PyPi packages on demand. Built in JavaScript and leveraging npx and uv, this implementation extends Claude's capabilities by allowing it to adapt its toolset in real-time based on user needs. The server interprets natural language installation requests, handles package management, and sets up environment variables, abstracting away the technical complexities of server deployment. It is particularly useful for developers and power users who want to rapidly expand Claude's functionality without manual configuration, enabling on-the-fly access to a wide range of specialized tools and APIs through the MCP interface."
anaisbetts,mcp-youtube,1.9,0,2.3,-0.69,1.831,MINIMAL,"This YouTube MCP server, developed by Anais Betts, enables AI assistants to interact with YouTube video content through subtitles. It leverages yt-dlp to download video subtitles and exposes them via a standardized MCP interface, allowing AI models to analyze and summarize video content without needing to process audio or video directly. By bridging AI systems and YouTube's vast repository of video information, this server facilitates tasks like content summarization, information extraction, and topic analysis from video transcripts. It is particularly useful for AI assistants supporting research, content curation, or educational applications that involve YouTube videos as information sources."
anarcher,raindrop-io-mcp-server,1.0,0,6.3,-1.8900000000000001,0.8109999999999999,MINIMAL,"This MCP server implementation provides a bridge to the Raindrop.io API, enabling AI assistants to interact with bookmarks. Developed by anarcher, it offers tools for creating and searching bookmarks, including features like tagging and collection management. The server is built in Go and uses environment variables for secure token management, making it suitable for integrating Raindrop.io functionality into AI-assisted applications or automating bookmark management tasks."
ancode666,aemet-mcp,1.0,0,6.5,-1.9500000000000002,0.6950000000000001,MINIMAL,"AEMET-MCP provides direct access to Spain's State Meteorological Agency (AEMET) data through a server implementation that exposes tools for querying historical climate data, monthly summaries, and beach conditions across Spain. Built with Python and requiring an API key from AEMET's open data portal, this implementation handles secure API authentication and includes supporting data files for beach codes. The server is designed for integration with Claude AI and other MCP-compatible clients, making it valuable for weather analysis, historical climate research, and accessing real-time meteorological information from Spanish weather stations."
andre-jesus,claude-mcp,1.0,0,5.8,-1.7399999999999998,0.8260000000000001,MINIMAL,"Claude Terminal Monitor, developed by Andre Jesus, is a powerful terminal monitoring plugin for Claude AI that provides real-time terminal output monitoring through the Model Context Protocol (MCP). It integrates seamlessly with Claude Desktop to enable live terminal monitoring capabilities in conversations. Key features include support for multiple terminals, configurable output history, TypeScript support, and robust error handling. The implementation stands out with its automatic integration process, which configures Claude Desktop to use it as an MCP server and sets up necessary logging directories. This tool is particularly useful for developers and system administrators who need to monitor and analyze terminal outputs in real-time within their AI-assisted workflows, enabling use cases such as debugging, log analysis, and system monitoring."
andrelandgraf,mcp-vs-function-calling,1.0,0,5.1,-1.53,0.847,MINIMAL,"Demonstrates the difference between OpenAI function calling and the Model Context Protocol by implementing two approaches to controlling Home Assistant lights. The function calling implementation uses OpenAI's direct function invocation method, while the MCP server provides a standardized protocol for light control that can be used by any MCP-compatible AI assistant. Serves as an educational comparison of different AI interaction paradigms in home automation."
andresthor,cmd-line-mcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"This MCP server allows AI assistants to execute common Unix/macOS terminal commands through a controlled and secure interface. It supports the top ~40 most used terminal commands with appropriate security measures.

Features
- Safe execution of common Unix/macOS commands
- Security validation based on command type
- Command categorization (read, write, system)
- Interactive permission management
- Session-based approval system
- Configuration via environment variables or JSON file
- Comprehensive command filtering and pattern matching
- Support for command chaining via pipes (|), semicolons (;), and ampersands (&)
- Claude Desktop compatibility mode with auto-approval
- Detailed command metadata and help for AI assistants

Read Commands
ls, pwd, cat, less, head, tail, grep, find, which, du, df, file, sort, etc.

Write Commands
cp, mv, rm, mkdir, rmdir, touch, chmod, chown, etc.

System Commands
ps, top, htop, who, netstat, ifconfig, ping, etc."
andrew-beniash,mcp-command-server,1.0,0,7.1,-2.13,0.787,MINIMAL,"This MCP command server, developed by an unnamed creator, implements a robust security layer for handling and processing commands. Built with Python and utilizing the Model Context Protocol SDK, it provides tools for input validation, sanitization, and auditing. The implementation focuses on enhancing command security through a multi-step verification process, including confirmation mechanisms. It's particularly useful for systems requiring high-security command processing, enabling use cases such as critical infrastructure management, sensitive data handling, or secure automation without compromising on safety or auditability."
andybrandt,mcp-simple-arxiv,1.8,0,6.6,-1.9799999999999998,1.602,MINIMAL,"This MCP server, developed by Andy Brandt, provides AI assistants like Claude with access to arXiv's scientific paper repository. It offers tools for searching papers by title and abstract, retrieving metadata and abstracts, and accessing links to available formats. The server implements proper rate limiting according to arXiv's API guidelines. By bridging AI capabilities with arXiv's vast collection of research papers, this implementation enables AI-assisted literature reviews and scientific research. It integrates seamlessly with Claude Desktop on both macOS and Windows, facilitating natural language interactions for exploring and analyzing scientific publications. The server is particularly useful for scenarios requiring up-to-date information on scientific topics, conducting comprehensive literature searches, or generating insights from academic papers in AI-assisted research and writing tasks."
andybrandt,mcp-simple-openai-assistant,1.4,0,5.8,-1.7399999999999998,1.0739999999999998,MINIMAL,"This MCP server, developed by Andy Brandt, enables AI assistants like Claude to interact with OpenAI's GPT models through a simple interface. It provides tools for creating and managing OpenAI assistants, starting conversation threads, and exchanging messages. The server integrates seamlessly with Claude Desktop on both macOS and Windows, bridging the capabilities of different AI platforms. By allowing Claude to leverage OpenAI's specialized GPT models, this implementation expands the knowledge and skills available to the AI assistant. It is particularly useful for scenarios requiring access to OpenAI's latest models, collaborative AI interactions, or specialized task delegation in AI-powered applications."
andybrandt,mcp-simple-pubmed,1.6,0,7.1,-2.13,1.3130000000000002,MINIMAL,"This MCP server, developed by Andy Brandt, provides a bridge between large language models and the PubMed medical research database via the Entrez API. Built in Python, it enables AI assistants to search PubMed, access article abstracts, and potentially retrieve full-text content for open access papers. The implementation focuses on simplicity and ease of integration with Claude Desktop, offering a straightforward interface for querying biomedical literature. By connecting AI models with PubMed's vast repository of scientific articles, this server allows AI systems to access up-to-date medical research, analyze trends in healthcare, and provide evidence-based insights. It is particularly useful for scenarios like literature reviews, staying current on medical advancements, and building AI assistants that can leverage peer-reviewed scientific knowledge in the biomedical domain."
andybrandt,mcp-simple-timeserver,1.6,0,4.4,-1.3200000000000003,1.468,MINIMAL,"This MCP server, developed by Andy Brandt, provides AI assistants like Claude with the ability to access current time information. It offers two key tools: get_time for retrieving local time and timezone data from the user's machine, and get_utc for obtaining UTC time from an NTP server. By bridging AI capabilities with accurate timekeeping, this implementation enables time-aware interactions and calculations. The server is designed for easy integration with the Claude desktop app on both macOS and Windows. It addresses the limitation of AI models lacking inherent time awareness, making it useful for scenarios requiring temporal context, scheduling assistance, or time-based computations in AI-powered conversations and tasks."
andylee20014,mcp-replicate-flux,1.0,0,7.8,-2.34,0.734,MINIMAL,"MCP Replicate Flux provides a bridge to Replicate's AI image generation models, enabling Claude to create images from text prompts. The implementation uses Node.js to handle the communication between Claude and Replicate's API, and automatically uploads generated images to cloud storage (Cloudflare R2) for easy access. Built with the Model Context Protocol SDK, it exposes a single tool for image generation that accepts a prompt and filename parameter, returning both a confirmation message and the URL to the stored image. This server is particularly useful for creative workflows where visual content generation enhances the conversation experience."
andypost,mcp-server-ts-trello,1.0,0,6.7,-2.0100000000000002,0.7010000000000001,MINIMAL,"This Trello MCP server, developed by the GTT Team, integrates the Model Context Protocol with the Trello API. Built with TypeScript and leveraging the MCP SDK, it enables AI agents to interact with Trello boards, lists, and cards through natural language. The implementation provides tools for retrieving boards, lists, cards, and card details, with a focus on asynchronous operations and comprehensive error handling. It's particularly useful for project management and task tracking applications, enabling use cases such as automated task creation, progress monitoring, and workflow optimization without directly dealing with the complexities of the Trello API."
angheljf,nyt,1.0,0,7.1,-2.13,0.713,MINIMAL,"This New York Times article search MCP server, developed by angheljf, provides an interface for language models to retrieve recent news articles based on keywords. It integrates with the NYTimes API to search articles from the last 30 days, returning key details like title, abstract, URL, date, and author. Built in TypeScript, it demonstrates core MCP concepts while focusing on a specific use case. The server handles API authentication and request formatting. This implementation is particularly useful for AI assistants needing to access current news and trending topics, conduct research on recent events, or provide summaries of latest developments in specific areas."
angiejones,mcp-selenium,1.7,0,7.1,-2.13,1.4869999999999999,MINIMAL,"Navigate to URLs
Find elements using various locator strategies
Click, type, and interact with elements
Perform mouse actions (hover, drag and drop)
Handle keyboard input
Take screenshots
Upload files"
angrysky56,mcts-mcp-server,1.0,0,7.3,-2.19,0.781,MINIMAL,"MCTS MCP Server provides a Bayesian Monte Carlo Tree Search engine for AI-assisted analysis and reasoning. It enables Claude to systematically explore different angles and interpretations of topics using a probabilistic approach that balances exploration versus exploitation. The server implements multi-iteration analysis with state persistence between chat turns, approach taxonomy classification, Thompson sampling, surprise detection, and intent classification. It's particularly valuable for users seeking deep, explorative analysis that evolves through multiple iterations, producing insightful analyses that consider diverse philosophical approaches and perspectives."
angrysky56,mcp-logic,1.0,0,7.3,-2.19,0.781,MINIMAL,"This MCP-Logic server, developed by an AI researcher, provides automated reasoning capabilities using Prover9/Mace4 for AI systems. Built with Python 3.12+ and leveraging the MCP library, it offers tools for theorem proving, model verification, and syntax validation of logical statements. The implementation focuses on bridging formal logic with AI, enabling knowledge validation and complex reasoning. It's particularly useful for AI assistants or applications needing to perform logical proofs, verify knowledge representations, or analyze logical implications. The server supports nested quantifiers and multiple premises, making it suitable for tasks like validating AI knowledge models, reasoning about system behaviors, or formal verification of logical arguments."
angrysky56,mcp-windows-website-downloader,1.0,2,6.3,-1.8900000000000001,0.989,MINIMAL,"This Windows-compatible website downloader tool for the Model Context Protocol (MCP) enables AI assistants to efficiently retrieve and store web content. Developed to address the need for a robust, Windows-friendly solution, it leverages asynchronous processing and concurrent downloads to quickly capture websites and their assets. The implementation, built with Python using libraries like aiohttp and BeautifulSoup4, offers configurable crawl depth and media file handling. It's particularly useful for tasks like web scraping, content archiving, or offline browsing, allowing AI models to interact with web content without requiring direct internet access or complex setup procedures."
aniket310101,mcp-server-couchbase,1.0,0,6.1,-1.83,0.817,MINIMAL,"Your project is a sophisticated Model Context Protocol (MCP) server implementation that acts as a bridge between Large Language Models (specifically Claude) and Couchbase databases. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a comprehensive set of tools for database operations including document CRUD operations, scope and collection management, index handling, and N1QL query execution. The server is designed to work seamlessly with Claude Desktop, allowing natural language interactions with Couchbase databases.
The architecture is well-structured with clear separation of concerns, organized into distinct modules for different database operations. The core functionality is divided into five main tool categories: query tools for executing N1QL queries, document tools for CRUD operations, collection tools for managing collections, scope tools for scope management, and index tools for handling database indexes. Each tool is implemented with proper error handling and uses Zod for runtime type validation, making the server both robust and type-safe. The project also includes environment-based configuration and follows modern TypeScript practices with proper typing and error handling throughout the codebase."
anjor,coinmarket-mcp-server,1.0,0,5.7,-1.7100000000000002,0.671,MINIMAL,"This Coinmarket MCP server, developed by anjor, provides access to cryptocurrency market data via the CoinMarketCap API. It offers tools for retrieving latest currency listings and fetching quotes for specific tokens using symbols or slugs. Built in Python, the implementation exposes CoinMarketCap data through a standardized MCP interface, allowing Claude to analyze and interact with real-time crypto market information. By bridging AI models with CoinMarketCap's extensive cryptocurrency database, this server enhances Claude's ability to process market trends, assist with crypto portfolio analysis, and provide up-to-date information on digital assets. It is particularly useful for users seeking AI-powered insights into cryptocurrency markets, price tracking, and market cap analysis."
anoopt,outlook-meetings-scheduler-mcp-server,1.0,0,7.0,-2.0999999999999996,0.29000000000000004,MINIMAL,"Outlook Meetings Scheduler MCP Server provides integration with Microsoft Graph API to manage calendar events in Microsoft Outlook. The TypeScript implementation enables AI assistants to create, read, update, and delete calendar events, find people by name, and manage event attendees. It features tools for scheduling meetings with specific parameters like time, location, and attendees, making it particularly valuable for automating calendar management tasks and integrating with other MCP servers like GitHub for comprehensive workflow automation."
anpigon,mcp-server-obsidian-omnisearch,1.4,0,7.6,-2.2800000000000002,1.172,MINIMAL,"This MCP server, developed by anpigon, enables AI assistants to search Obsidian vaults using the Omnisearch plugin. It provides a REST API interface to query notes and retrieve absolute paths to matching results. The server uses FastMCP to expose the search functionality as a tool, allowing seamless integration with other services. By connecting AI capabilities with personal knowledge management, this implementation empowers assistants to leverage users' existing note collections. It is particularly useful for applications requiring context from personal notes, research assistance, or any scenario where an AI system needs to access and reason about information stored in Obsidian vaults."
anshuldalua,illustrator-mcp,1.0,0,2.6,-0.78,0.922,MINIMAL,"Illustrator MCP Server enables AI assistants to execute JavaScript/ExtendScript code directly in Adobe Illustrator and view the results. Developed by Anshul Dalua, this MacOS-only implementation uses AppleScript to bridge between the MCP protocol and Illustrator's scripting capabilities, allowing bots to programmatically generate and manipulate vector graphics. The server provides two main tools: one for running arbitrary code in the current Illustrator document and another for capturing screenshots of the Illustrator window to visualize results, making it particularly useful for automated design tasks and graphic generation workflows."
anshumax,world_bank_mcp_server,1.0,0,5.4,-1.62,0.838,MINIMAL,"This World Bank MCP server, developed by Anshuman Saxena, enables AI assistants to interact with the World Bank's open data API. Built in Python using the MCP framework, it provides tools for listing countries and indicators, as well as analyzing various socioeconomic metrics. The implementation stands out by offering a controlled interface for data exploration and analysis, making it safer and more structured for AI systems to access World Bank data. By connecting AI capabilities with a comprehensive global development database, this server allows for in-depth analysis of international economic trends, poverty statistics, and other key indicators. It is particularly useful for researchers, policymakers, and AI assistants working on global development projects, economic analysis, or cross-country comparisons."
torshepherd,compiler-explorer-mcp,1.2,0,6.2,-1.8599999999999999,1.014,MINIMAL,"Compiler Explorer MCP is a server that connects LLMs to the Compiler Explorer API, enabling them to compile code, explore compiler features, and analyze optimizations across different compilers and languages. The implementation provides three main tools: listing supported programming languages, retrieving available compilers for a specific language, and compiling source code with customizable options and filters. Built with FastMCP and asynchronous HTTP requests, it handles error cases gracefully and supports various compilation parameters, making it particularly valuable for developers and educators who want to compare compiler behaviors, investigate optimization differences, or explore language feature support without leaving their AI assistant conversation."
src,everart,3.1,0,0,-0.0,3.1,MINIMAL,"This EverArt MCP server, developed by Anthropic, provides AI assistants with image generation capabilities using the EverArt API. Built with TypeScript and leveraging the EverArt SDK, it offers a streamlined interface for creating images from text prompts using multiple AI models. The server implements robust error handling, automatic browser opening for generated images, and supports various image styles including photorealistic and vector art. By abstracting the complexities of API communication and image generation, it allows AI systems to easily incorporate visual content creation into their workflows. This implementation is particularly valuable for creative applications, content generation, and visual design tasks, enabling use cases such as automated illustration, concept visualization, and rapid prototyping of visual ideas."
upstreetai,ia-mcp,1.0,0,0,-0.0,1.0,MINIMAL,"GitHub MCP server that provides a comprehensive bridge to GitHub's API, enabling AI agents to perform a wide range of repository operations like creating repositories, managing issues and pull requests, searching code, and interacting with files. Built by Anthropic, this implementation focuses on providing a clean, type-safe interface to GitHub's functionality using TypeScript and Zod for robust validation, making it particularly useful for developers who want to automate GitHub workflows through conversational AI."
longyi1207,glean-mcp-server,1.0,0,5.5,-1.6500000000000001,0.665,MINIMAL,"This MCP server implementation, developed by Anthropic, integrates the Glean API to provide Search and Chat functionalities. It uses TypeScript and the @modelcontextprotocol/sdk to create a server that can be easily deployed using Docker. The implementation offers two main tools: a search function that queries Glean's search API, and a chat function that interacts with Glean's chatbot. It's designed for organizations already using Glean who want to incorporate these capabilities into AI-assisted workflows, enabling natural language interactions with their knowledge base and chatbot through the MCP protocol."
jwaldor,mcp-scrape-copilot,1.0,0,5.0,-1.5,0.85,MINIMAL,"This Puppeteer-based MCP server, developed by Anthropic, enables browser automation and web interaction capabilities for AI models. It provides tools for navigating web pages, taking screenshots, clicking elements, filling forms, and executing JavaScript in a real browser environment. The server uses Puppeteer to control either a headless Chromium instance (in Docker) or a visible browser window (when run locally). It integrates with TensorFlow.js for text embedding generation. This implementation is particularly useful for web scraping, automated testing, and scenarios where AI models need to interact with web content in a realistic browser context."
src,sequentialthinking,3.5,0,0,-0.0,3.5,MINIMAL,"This Sequential Thinking MCP server, developed by Anthropic, provides AI assistants with a structured approach to problem-solving and analysis. Built with TypeScript and leveraging the MCP SDK, it offers capabilities for breaking down complex problems into manageable steps, revising thoughts as understanding deepens, and branching into alternative reasoning paths. The server implements a dynamic thinking process that can adjust the total number of thoughts and generate solution hypotheses. By facilitating a detailed, step-by-step approach, it allows AI systems to maintain context over multiple steps and filter out irrelevant information. This implementation is particularly valuable for tasks requiring in-depth analysis, planning, or design, enabling use cases such as complex problem decomposition, iterative solution refinement, and multi-path reasoning exploration."
antipas,4oimage-mcp,1.2,0,6.1,-1.83,0.883,MINIMAL,"4o-image MCP Server provides a bridge between AI assistants and the 4o-image API for generating and editing images through text prompts. Built with Node.js and the Model Context Protocol SDK, it exposes a generateImage tool that supports both text-to-image creation and image editing with base64 inputs. The implementation features real-time progress updates, automatic browser opening of generated images, and robust error handling, making it valuable for AI systems that need to create high-quality art, 3D characters, or custom images based on user descriptions."
anton10xr,gibber-mcp,1.3,0,7.0,-2.0999999999999996,1.09,MINIMAL,"This MCP server implementation provides cryptographic tools for secure communication, including key pair generation, shared secret derivation, and message encryption/decryption using SJCL P-256 and AES-CCM. Built with Express.js and TypeScript, it offers real-time communication via server-sent events (SSE). The server is designed for applications requiring end-to-end encryption and secure data exchange between AI models and external tools."
antoncoding,mcp-brianknows,1.0,0,6.9,-2.0700000000000003,0.7070000000000001,MINIMAL,"This MCP server implementation provides a bridge to the BrianKnows knowledge base API, enabling AI assistants to perform searches and interact with an agent for information retrieval. Developed by antoncoding, it offers tools for querying the BrianKnows database and leveraging its AI agent capabilities. The server is designed for use cases requiring access to specialized knowledge, such as answering domain-specific questions or providing expert-level information on topics covered by the BrianKnows database."
antonorlov,mcp-postgres-server,1.2,0,6.9,-2.0700000000000003,0.9929999999999999,MINIMAL,"A PostgreSQL database server that enables AI models to execute SQL queries, manage tables, and inspect database schemas through a standardized interface. Built with TypeScript and the MCP SDK, it features prepared statement support, automatic connection management, and support for both PostgreSQL and MySQL-style parameter placeholders. The implementation is particularly valuable for developers who want to give AI assistants secure, controlled access to PostgreSQL databases for querying and analysis tasks."
antvis,mcp-server-chart,1.0,0,5.5,-1.6500000000000001,0.835,MINIMAL,"@antv/mcp-server-chart is a TypeScript-based server that enables AI assistants to generate data visualizations using AntV's charting capabilities. Developed by the AntV Visualization Team, it implements the Model Context Protocol to provide a standardized interface for creating various chart types from data. The server exposes chart generation functionality that can be accessed through MCP tools, making it particularly valuable for applications that need to produce visual data representations through conversational interfaces without requiring direct knowledge of visualization libraries."
anurag-dhamala,news-mcp-server,1.2,0,4.6,-1.38,0.838,MINIMAL,This MCP server fetches latest news and sources based on country and language using newsdata.io. You need to provide your own API key.
anurag-dhamala,os-info-mcp-server,1.0,0,4.0,-1.2000000000000002,0.88,MINIMAL,"OS Info MCP Server provides real-time system information about the host computer, including CPU, memory, operating system, disk, battery, processes, and CPU load details. Developed by Devnical, this TypeScript implementation uses the systeminformation library to gather comprehensive hardware and software metrics, making it valuable for monitoring system resources, troubleshooting performance issues, or integrating system diagnostics into AI assistant workflows. The server can be deployed either by cloning the repository or using npx, with a simple configuration that enables AI assistants to respond to natural language queries about the host system's specifications and current state."
anuragrai017,database-updater-mcp-server,1.0,0,6.3,-1.8900000000000001,0.8109999999999999,MINIMAL,"This database-updater MCP server, developed by an unnamed author, provides a streamlined interface for updating databases from CSV and Excel files. Built with TypeScript and leveraging libraries like csv-parser and xlsx, it offers tools for connecting to various database types including PostgreSQL, MySQL, MongoDB, and SQLite. The implementation focuses on configurable connection settings and table mapping, making it accessible for AI assistants or applications needing to perform bulk data updates. It's particularly useful for tasks like data migration, automated reporting, or synchronizing databases with external data sources, enabling efficient database management without requiring deep knowledge of individual database APIs or file parsing complexities."
anuragrai017,python-docs-server-mcp-server,1.0,0,5.5,-1.6500000000000001,0.835,MINIMAL,"This Python documentation MCP server, developed by an unnamed author, provides a tool for fetching Python documentation using the Brave Search API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined interface for querying Python-related information. The implementation focuses on simplicity, offering a single 'get_python_docs' function that takes a search query and returns relevant documentation links. It's particularly useful for AI assistants or applications needing quick access to Python documentation, enabling tasks like code explanation, function lookup, or general Python language queries without requiring direct web scraping or complex API integrations."
anycontext-ai,thingsboard-mcp-server,1.0,0,3.9,-1.17,0.883,MINIMAL,"ThingsBoard MCP Server provides a bridge between AI assistants and ThingsBoard IoT platforms, enabling access to device telemetry and attributes through a standardized interface. The server exposes tools for retrieving tenant devices, accessing historic and latest device telemetry data, and fetching device attributes. Built with Python using FastMCP and asynchronous HTTP requests, it handles authentication with JWT tokens and automatically refreshes expired credentials. This implementation is particularly valuable for IoT administrators and analysts who need to monitor device data, analyze telemetry history, or access device attributes directly through conversational AI."
aourpallynikhil,nuke-mcp-2,1.0,0,0,-0.0,1.0,MINIMAL,"Provides a bridge between AI assistants and Nuke, the professional compositing software, enabling automation of common tasks through a Python interface. The server exposes tools for creating and configuring nodes, setting knob values, retrieving node information, and executing render operations. Built with Node.js and a Python bridge script, it handles communication between the MCP protocol and Nuke's Python API, making it valuable for visual effects artists and compositors who want to automate their Nuke workflows through natural language interaction."
aourpallynikhil,photoroom-mcp,1.0,0,0,-0.0,0.5,MINIMAL,"Provides a bridge to the Photoroom API for removing backgrounds from images, with support for different output formats, types, and scaling options. The server exposes a single tool for background removal that accepts image URLs and returns processed results as data URLs. Useful for automated image editing workflows that require background removal capabilities."
ap425q,cuttermcp,1.0,0,6.5,-1.9500000000000002,0.8049999999999999,MINIMAL,"CutterMCP provides a bridge between the Cutter reverse engineering platform and MCP clients, enabling binary analysis capabilities through a REST API. The implementation uses FastMCP to expose Cutter's functionality including function listing, decompilation, segment analysis, and symbol management. Users can search for functions, rename them, add comments to decompiled code, and access imports and exports data. This server implementation is particularly valuable for reverse engineers who want to integrate Cutter's binary analysis capabilities into their AI-assisted workflows."
apache,iotdb-mcp-server,1.0,0,6.0,-1.7999999999999998,0.8200000000000001,MINIMAL,"The IoTDB MCP Server provides a secure interface for AI assistants to interact with Apache IoTDB time-series databases. Developed by the Apache Software Foundation, this Python-based implementation enables three core database operations: executing SELECT queries, listing available tables, and describing table schemas. The server connects to IoTDB instances using a session pool for efficient connection management and returns query results in a structured text format. It's particularly valuable for data analysts and IoT applications that need AI-assisted exploration and analysis of time-series data stored in IoTDB without requiring direct database access."
apappascs,tavily-search-mcp-server,1.0,0,7.4,-2.2199999999999998,0.722,MINIMAL,"This Tavily Search MCP server, developed by Alexandros Pappas, integrates the Tavily Search API into the Model Context Protocol framework. Built with TypeScript and leveraging Express.js, it provides a streamlined interface for AI models to perform web searches using Tavily's advanced search capabilities. The implementation supports both stdio and Server-Sent Events (SSE) communication methods, making it versatile for different deployment scenarios. It's particularly useful for enhancing AI-driven applications with real-time, high-quality web search results, enabling use cases like fact-checking, research assistance, or content generation that requires up-to-date information from the internet."
apecloud,kb-cloud-mcp-server,1.0,0,7.7,-2.31,0.769,MINIMAL,"KB Cloud MCP Server provides AI assistants with access to KubeBlocks Cloud resources through a standardized tool interface. Developed by ApeCloud, this Go implementation enables querying organizations, environments, instances, and backups via the KB Cloud API. The server authenticates using API keys, supports internationalization, and includes comprehensive logging capabilities. It's particularly valuable for automating database management tasks, retrieving cloud environment information, and building AI-powered tools that interact with the KubeBlocks ecosystem."
aperture147,exa-mcp-worker,1.0,0,0,-0.0,0.5,MINIMAL,"An MCP server that provides AI assistants with access to Exa.ai's search capabilities, enabling them to perform web searches with customizable parameters like result count and live crawling options. The server handles authentication with Exa's API, processes search queries, and returns structured results as JSON, making it valuable for AI assistants that need to retrieve up-to-date information from the web without leaving the conversation context."
apeyroux,mcp-xmind,1.2,0,6.9,-2.0700000000000003,0.9929999999999999,MINIMAL,"This MCP server, developed by apeyroux, enables AI assistants like Claude to analyze and query XMind mind maps. Built in TypeScript, it provides powerful capabilities for searching, extracting, and analyzing content across multiple XMind files. The implementation stands out by offering smart fuzzy search, hierarchical navigation, and multi-file analysis. By connecting AI capabilities with structured mind map data, this server enables AI systems to gain insights from personal or organizational knowledge bases. It is particularly useful for task management, information retrieval, and knowledge graph analysis scenarios where mind maps serve as a primary data source."
api7,apisix-mcp,1.2,0,7.1,-2.13,0.987,MINIMAL,"A plugin for Apache APISIX that implements the Model Context Protocol (MCP) server, allowing APISIX to serve as an MCP server for AI applications."
apicolet,brevo-mcp,1.0,0,7.3,-2.19,0.781,MINIMAL,"This MCP server, developed by Antoine Picolet, provides integration with Brevo's Multi-Channel Platform API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing email campaigns, contacts, and other communication channels. The implementation focuses on providing a standardized interface for AI models to interact with Brevo's features, enabling use cases such as automated email marketing, contact list management, and multi-channel communication orchestration. By connecting AI assistants with Brevo's platform, this server allows for sophisticated scenarios like personalized content generation, audience segmentation, and campaign performance analysis. It's particularly useful for businesses and marketers looking to enhance their customer communication strategies with AI-powered automation and insights."
apify,actors-mcp-server,1.3,0,7.8,-2.34,1.034,MINIMAL,"This MCP implementation, developed using TypeScript, provides a robust foundation for building and deploying web scraping and automation projects. It leverages the Apify platform and Crawlee library, offering a structured environment for creating scalable web crawlers and data extraction tasks. The implementation includes configuration files for ESLint, TypeScript, and Docker, ensuring code quality and consistency across different development environments. By abstracting common web scraping challenges and providing integration with Apify's cloud infrastructure, this tool enables developers to focus on building complex data acquisition workflows. It is particularly useful for projects requiring large-scale web data extraction, automated testing of web applications, or building AI training datasets from web sources."
apify,mcp-server-rag-web-browser,1.3,0,7.3,-2.19,1.081,MINIMAL,"This MCP server, developed by Apify, provides a web browsing interface for large language models and RAG pipelines. Built in JavaScript, it integrates with the RAG Web Browser Actor on the Apify platform to enable AI assistants to perform web searches, scrape content from top results, and fetch individual URLs. The implementation stands out by returning cleaned web content as Markdown and offering flexible search result limits. By connecting AI models with real-time web data, this server allows AI systems to access up-to-date information, analyze online content, and provide web-informed responses. It is particularly useful for scenarios like research tasks, content summarization, and building AI assistants that can leverage current web information to enhance their knowledge and capabilities."
apinetwork,piapi-mcp-server,1.0,0,7.7,-2.31,0.731,MINIMAL,"This PiAPI MCP server, developed by an unnamed creator, integrates with the PiAPI image generation service to provide AI-driven image creation capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized interface for generating images based on text prompts. The server implements environment variable management for API key security and uses strict TypeScript configuration for robust type checking. By abstracting the complexities of the PiAPI service, it enables AI systems to easily create images from textual descriptions. This implementation is particularly valuable for applications requiring programmatic image generation, facilitating use cases such as content creation, visual design assistance, and automated illustration generation."
apoorvv,mcp-claude-enhancements,1.0,0,2.9,-0.8699999999999999,0.913,MINIMAL,"MCP-Claude-Enhancements is a collection of utility servers that extend Claude's capabilities through simple, focused tools. Created by Apoorv Vishnoi, it includes modules for greeting users, counting desktop files, saving conversations to text files, and a smart context handler. Each server is built with FastMCP and designed to be easily configured through the provided JSON configuration file. The implementation demonstrates practical ways to enhance Claude's functionality with everyday tasks while maintaining a lightweight, modular approach that allows users to selectively enable the tools they need."
shadowfax92,apple-calendar-mcp,1.0,0,5.1,-1.53,0.847,MINIMAL,"A TypeScript-based MCP server for interacting with Apple Calendars on macOS, providing a standardized interface for AI models to read, create, update, and delete calendar events. Built to work with a companion Swift-based Calendar API Bridge, the implementation supports flexible date parsing and handles calendar permissions through a local HTTP server running on port 8080. Particularly useful for AI assistants that need to manage scheduling or retrieve calendar information directly from a user's macOS system."
appleinmusic,baidu-search-mcp,1.0,0,4.3,-1.29,0.629,MINIMAL,"A Baidu Search integration for AI assistants that enables direct access to China's largest search engine through the MCP. This TypeScript implementation allows agents to perform web searches on Baidu, retrieve search results, and extract relevant information without requiring users to leave their conversation interface. It leverages the @modelcontextprotocol/sdk and axios for making API requests, making it particularly valuable for use cases involving Chinese language queries, accessing China-specific content, or gathering information from behind the Great Firewall."
ayushsinghvi92,app-seo-ai,1.0,0,6.8,-2.04,0.796,MINIMAL,"App SEO AI provides a bridge between AI assistants and Google Ads Keyword Planner API, enabling SEO automation and optimization through keyword research, SERP analysis, and competitor insights. The server exposes RESTful endpoints for generating keyword ideas, analyzing search results, and evaluating competitor domains, making it valuable for digital marketers who need to optimize content, understand search trends, and identify competitive opportunities without leaving their AI assistant conversation."
apridachin,kagi-search-mcp,1.0,0,7.0,-2.0999999999999996,0.71,MINIMAL,"This Kagi MCP server, developed by Aleksey Pridachin, integrates the Kagi search API into the Model Context Protocol ecosystem. Built with Python using libraries like httpx and mcp, it provides tools for web search, news retrieval, and fast GPT-powered question answering. The server implements environment-based configuration for API key management and offers a streamlined interface to Kagi's advanced search capabilities. By abstracting Kagi API operations into a standardized MCP format, it enables AI systems to easily access high-quality web search results and enriched content. This implementation is particularly valuable for applications requiring up-to-date information retrieval, facilitating use cases such as research assistance, fact-checking, and content enrichment across various domains."
aptro,superset-mcp,1.0,9,7.3,-2.19,0.819,MINIMAL,"The Superset MCP Integration provides AI assistants with programmatic access to Apache Superset's data visualization and analytics capabilities through a comprehensive set of tools. Built with Python using FastMCP, it enables operations like dashboard management, chart creation, SQL query execution, and database administration via authenticated API calls. The implementation handles token management, automatic refreshing, and proper error handling to maintain secure connections with Superset instances. It's particularly valuable for users who want to leverage AI assistants to explore data, create visualizations, and manage analytics workflows without leaving their conversational interface."
aptro,zerodha-mcp,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"Zerodha-MCP provides a secure interface for AI models to interact with the Zerodha trading platform through a FastMCP server implementation. Built by Aptro, it enables models to authenticate with Zerodha, manage portfolios, place stock and mutual fund orders, retrieve market data, and set up SIPs. The implementation handles authentication flows securely, stores access tokens locally, and provides comprehensive error handling across all trading operations. This server is particularly valuable for users who want to automate trading workflows or analyze their investment portfolio directly within AI assistant conversations."
apw124,logseq-mcp,1.2,0,7.0,-2.0999999999999996,0.9099999999999999,MINIMAL,"Logseq MCP Tools provides a set of tools that enable AI agents to interact with local Logseq knowledge graphs through the Model Context Protocol. Developed by apw124, this implementation offers comprehensive functionality for managing pages and blocks in Logseq, including creating, updating, and searching content. The server communicates with Logseq's API to perform operations like retrieving journal entries, managing hierarchical block structures, and executing complex searches. It's particularly useful for AI assistants that need to capture notes, organize information, or retrieve knowledge from a user's personal Logseq database without requiring direct access to the application."
arabold,docs-mcp-server,1.2,0,7.8,-2.34,0.9339999999999999,MINIMAL,"Docs MCP Server provides a specialized documentation scraping and retrieval system that enables AI assistants to access library documentation from various sources including GitHub, NPM, PyPI, and web pages. Built with TypeScript, it implements a pipeline architecture that handles document scraping, processing, splitting, and storage with features like semantic markdown splitting, greedy chunk optimization, and version-aware retrieval. The server exposes tools for searching documentation, finding specific versions, listing available libraries, and managing scraping jobs through a well-defined API. Particularly valuable for developers who need AI assistants to reference accurate, up-to-date documentation without leaving their workflow."
arathald,mcp-editor,1.0,0,4.4,-1.3200000000000003,0.868,MINIMAL,"This MCP server, developed primarily by Claude Sonnet 3.5 with oversight from arathald, is a TypeScript port of Anthropic's filesystem editing tools. It provides a standardized interface for AI agents to perform file operations like reading, writing, and editing on the host system. Built using the Model Context Protocol SDK, it focuses on replicating the functionality of Anthropic's original Python implementation in a TypeScript environment. The server is designed for users familiar with Anthropic's tools who want similar capabilities in a TypeScript-based MCP setup. It's particularly useful for AI-assisted file manipulation tasks, but comes with strong warnings about potential security risks due to its lack of access controls."
arben-adm,brave-mcp-search,1.0,0,6.9,-2.0700000000000003,0.7070000000000001,MINIMAL,"This Brave Search MCP server, developed by Arben Ademi, integrates the Model Context Protocol with the Brave Search API. Built with Python and leveraging libraries like FastMCP and HTTPX, it enables AI agents to perform web searches and local business lookups through natural language queries. The implementation focuses on providing a streamlined interface to Brave's privacy-respecting search capabilities, offering tools for general web searches and geographically-targeted local searches. It's particularly useful for AI assistants and applications needing up-to-date web information or location-based data, enabling use cases such as research assistance, fact-checking, and local recommendations without directly interacting with the Brave Search API."
arben-adm,mcp-sequential-thinking,1.0,0,7.7,-2.31,0.769,MINIMAL,"Sequential Thinking is an MCP server developed by Arben Ademi for advanced problem solving. It implements a structured approach to break down complex problems into sequential steps, enabling more thorough and methodical analysis. The server integrates with the MCP CLI and leverages the Rich library for enhanced text formatting. Its key differentiator is the focus on step-by-step reasoning, making it particularly effective for tasks requiring detailed planning, logical deduction, or systematic troubleshooting. This implementation is well-suited for developers, researchers, and analysts working on intricate problems that benefit from a structured thinking process."
arben-adm,tavily-mcp-search,1.0,0,7.7,-2.31,0.731,MINIMAL,"This MCP server integrates with the Tavily search API, providing AI assistants with advanced web search capabilities. Developed by Arben Ademi, it leverages the MCP framework and Tavily's AI-powered search engine to deliver highly relevant and contextual search results. The implementation is built in Python 3.11+ and uses dependencies like httpx and python-dotenv for efficient HTTP requests and environment variable management. It's designed for developers and AI applications that require enhanced web search functionality, enabling natural language queries to retrieve up-to-date information from across the internet."
arborist-ai,claudehopper,1.0,0,7.4,-2.2199999999999998,0.778,MINIMAL,"ClaudeHopper is an AI-powered construction document assistant that integrates with Claude Desktop to help users analyze and search through architectural drawings and specifications. Developed by Tom Finlayson, it uses LanceDB for vector storage and Ollama for local AI processing, enabling features like image extraction from PDF drawings and semantic search across construction documents. The implementation includes tools for processing both textual specifications and visual elements from CAD drawings, making it particularly valuable for architects, engineers, and construction professionals who need to quickly access and interpret complex project documentation."
arbuthnot-eth,paypal-mcp-defunct,1.0,0,7.2,-2.16,0.28400000000000003,MINIMAL,"PayPal MCP Server provides integration with PayPal's payment processing APIs through a standardized interface. Built by Brandon Arbuthnot, it enables AI assistants to create and capture payments, manage subscriptions, handle business operations like invoicing and payouts, and access user information. The server implements robust authentication with automatic token refresh, comprehensive input validation using Zod schemas, and detailed error handling. It's particularly valuable for e-commerce applications, financial services, and any workflow requiring secure payment processing capabilities without leaving the conversation interface."
archimedescrypto,excel-reader-mcp,1.0,0,7.3,-2.19,0.781,MINIMAL,"This MCP server, developed by ArchimdesCrypto, provides a standardized interface for reading Excel files with automatic chunking and pagination support. Built with TypeScript and leveraging the Model Context Protocol SDK and SheetJS library, it offers tools for efficient handling of large Excel datasets. The implementation focuses on breaking down Excel files into manageable chunks, enabling AI models to process extensive spreadsheet data without memory constraints. By connecting AI assistants with Excel file content, this server allows for sophisticated data analysis, reporting, and manipulation tasks. It's particularly useful for applications dealing with large-scale data processing, financial analysis, or any scenario requiring programmatic access to Excel file contents through a standardized MCP interface."
archimedescrypto,figma-mcp-chunked,1.0,0,7.7,-2.31,0.2689999999999999,MINIMAL,"Figma MCP Server with Chunking provides a memory-efficient interface to the Figma API, designed to handle large Figma files by breaking operations into manageable chunks with pagination support. It features configurable memory limits, node type filtering, progress tracking, and resume capabilities for interrupted operations. The implementation includes tools for retrieving file data, listing files, accessing version history, comments, components, styles, and specific nodes, making it particularly valuable for designers and developers who need to programmatically access and analyze complex Figma designs without memory constraints."
dragonjump,mcp-arcknowledge,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"ArcKnowledge is a FastMCP server that bridges AI assistants to custom knowledge base API webhooks, enabling retrieval-augmented generation (RAG) capabilities. Built with Python using the FastMCP framework, it manages multiple knowledge sources through a configurable JSON structure, supports both text and image queries, and handles API authentication. The implementation provides tools for querying knowledge bases, managing document sources, and processing images, making it particularly useful for applications requiring access to specialized knowledge repositories, custom RAG implementations, or multi-source information retrieval with visual context support."
arc-computer,arc-mcp-server,1.0,0,7.8,-2.34,0.766,MINIMAL,"Arc MCP Server provides a bridge between AI assistants and the Arc Memory Temporal Knowledge Graph (TKG), enabling structured access to repository history and relationships. Built by the Arc Memory Team, it offers tools for tracing decision history, retrieving entity details, finding related entities, and getting line-specific commit information. The server uses FastMCP with stdio transport for seamless integration with Claude Desktop, VS Code Agent Mode, Cursor, and Windsurf. It's particularly valuable for developers who need to understand code provenance and relationships without manually navigating complex repository histories."
argia-andreas,linear-mcp-server,1.0,0,6.6,-1.9799999999999998,0.698,MINIMAL,"A TypeScript MCP server that bridges Linear's project management platform with AI assistants, enabling retrieval of a user's todo tickets by user ID or email. Built with the Model Context Protocol SDK, it provides a standardized way to fetch and expose Linear task data, making it easy to integrate project management context directly into AI workflows."
arindam200,devto-mcp,1.0,0,7.0,-2.0999999999999996,0.71,MINIMAL,"Dev.to MCP Server provides a bridge between AI assistants and Dev.to content, enabling access to articles and publishing capabilities. Built by Arindam Majumder, it offers tools for fetching latest and trending articles, searching by criteria, accessing article details, and creating or updating content on Dev.to. The server implements caching to improve performance and reduce API calls, requires a Dev.to API key for authentication, and is compatible with Claude and Cursor. It's particularly valuable for users who want to discover, analyze, or publish Dev.to content through conversational interfaces without manually navigating the platform."
ariunbolor,nsaf-mcp-server,1.0,0,7.1,-2.13,0.787,MINIMAL,"NSAF MCP Server provides AI assistants with access to the Neuro-Symbolic Autonomy Framework, focusing on Self-Constructing Meta-Agents (SCMA) that can evolve and optimize their neural network architectures through generations. The server exposes tools for running evolutionary processes with customizable parameters and comparing different agent architectures, enabling AI assistants to leverage advanced neural architecture search capabilities without requiring deep expertise in evolutionary algorithms. Built with TensorFlow and designed to work seamlessly with Claude Desktop and Cline, this implementation is particularly valuable for researchers and developers exploring autonomous AI systems that can self-design and adapt to different problem domains."
packages,phoenix-mcp,2.2,0,0,-0.0,2.2,MINIMAL,"Phoenix MCP Server provides a unified interface to Arize Phoenix's capabilities through the Model Context Protocol. Developed by Arize AI, this TypeScript implementation enables AI assistants to manage prompts, explore datasets, and run experiments against the Phoenix platform. The server exposes tools for creating and iterating on prompts across different LLM providers (OpenAI, Anthropic, Google), working with evaluation datasets, and visualizing experiment results, making it particularly valuable for teams building and evaluating LLM applications who want to leverage Phoenix's observability features through AI assistants."
arjshiv,localutils-mcp-server,1.0,0,6.6,-1.9799999999999998,0.802,MINIMAL,"The Local Utilities MCP Server provides access to various system utilities through a standardized interface, enabling AI assistants to retrieve local system information. Built with TypeScript and the Model Context Protocol SDK, it offers tools for getting current time and date, hostname, public IP address, directory listings, Node.js version information, and checking processes running on specific ports. The server can be used globally or via npx without installation, integrates seamlessly with Cursor through simple configuration, and includes a pre-commit hook that automatically builds the server before each commit to ensure build files are always up-to-date in the repository."
arjunbhuptani,sparkmango,1.6,0,5.9,-1.7700000000000002,1.2770000000000001,MINIMAL,"SparkMango is a Python-based server that converts Solidity smart contracts into functional RESTful API implementations following the MCP specification. Developed by Arjun Bhuptani, it analyzes contract ABIs, generates method implementations using OpenAI's GPT-4, and creates a complete server structure with state management, event handling, and comprehensive documentation. The server provides a bridge between blockchain contracts and Python applications, making it easier for AI agents to interact with smart contracts through standardized API endpoints without requiring deep blockchain knowledge."
arjunkmrm,mcp-minecraft,1.2,0,6.2,-1.8599999999999999,1.014,MINIMAL,"This MCP implementation provides a Minecraft integration, allowing AI models to interact with and control Minecraft game environments. Built using TypeScript and Node.js, it leverages the minecraft-protocol and mineflayer libraries to establish connections and manipulate in-game entities. The implementation supports various Minecraft versions and includes features like pathfinding and automated actions. It's designed for researchers, educators, and developers interested in using Minecraft as a sandbox for AI experimentation, educational simulations, or creating advanced in-game automation tools."
arjunkmrm,perplexity-deep-research,1.0,0,5.4,-1.62,0.662,MINIMAL,"Perplexity Deep Research MCP enables AI assistants to perform web searches using Perplexity's sonar-deep-research model through the chat completions API. It provides a single tool called 'deep_research' that accepts search queries and optional recency filters, returning comprehensive search results with proper citations. Built for integration with Claude Desktop via Smithery, this implementation requires a Perplexity API key and is particularly valuable for workflows requiring up-to-date information retrieval and research capabilities directly within AI assistant conversations."
arjunkmrm,perplexity-search,1.0,0,4.4,-1.3200000000000003,0.632,MINIMAL,"Perplexity Search MCP enables AI assistants to perform web searches using Perplexity's API with sonar or sonar-pro models. Built by arjunkmrm, it provides a single 'search' tool that accepts a query parameter and optional recency filtering, returning detailed search results with citations. The implementation runs on Node.js, can be deployed via Docker, and requires a Perplexity API key for authentication, making it ideal for workflows requiring up-to-date information from the web without leaving the conversation interface."
arjunkmrm,mcp-sg-lta,1.0,0,6.0,-1.7999999999999998,0.6799999999999999,MINIMAL,"This MCP server, developed by Arjun Kumar, provides a standardized interface for interacting with Singapore's Land Transport Authority (LTA) DataMall API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers real-time access to transportation information including bus arrivals, traffic conditions, and train service updates. The implementation focuses on exposing LTA's data through a consistent MCP interface, enabling AI models to perform complex transportation-related queries and analysis. By connecting AI assistants with LTA's extensive dataset, this server facilitates sophisticated urban mobility scenarios like route optimization, congestion prediction, and public transport planning. It's particularly valuable for applications and AI systems aimed at improving urban transportation efficiency and user experience in Singapore."
armorwallet,armor-crypto-mcp,1.3,1,7.0,-2.0999999999999996,1.1900000000000002,MINIMAL,"Armor Crypto MCP provides AI assistants with direct access to blockchain operations, crypto trading, and wallet management through the Armor Wallet API. This server exposes a comprehensive suite of tools for creating and managing wallets, checking token balances, executing swaps, setting up DCA (Dollar Cost Averaging) orders, and transferring tokens across different blockchains. Built with FastMCP, it authenticates via JWT tokens and includes detailed logging for all operations, making it particularly valuable for users who want their AI assistants to monitor crypto portfolios, execute trading strategies, or manage multiple wallets without leaving the conversation interface."
arnavsurve,gateway-mcp,1.0,0,0,-0.0,1.0,MINIMAL,"Gateway MCP serves as a bridge between AI assistants and various MCP services, enabling discovery and interaction with remote tools through a unified interface. Built with Python using FastMCP, it provides tools to discover available services from a registry, establish connections to both SSE-based MCP servers and HTTP APIs, and proxy tool calls to connected services. The implementation handles connection management, request routing, and response formatting, making it particularly valuable for workflows requiring access to multiple specialized services without leaving the conversation context."
arnavsurve,scdl-mcp,1.0,0,3.3,-0.9899999999999999,0.901,MINIMAL,"The SoundCloud Downloader MCP server enables Claude to download tracks, playlists, and user content from SoundCloud directly through conversation. Built by arnavsurve, this implementation wraps the popular scdl command-line tool in a FastMCP interface, providing granular control over download options including output location, download modes (all tracks, uploads, favorites, reposts, or playlists), track limits, and metadata handling. The server requires ffmpeg and the scdl package as dependencies, making it particularly valuable for users who want to archive or collect SoundCloud content without manually using command-line tools."
arodoid,fastlymcp,1.0,0,7.5,-2.25,0.725,MINIMAL,"FastlyMCP is a Node.js-based server that enables AI assistants to interact with Fastly's CDN services through the Model Context Protocol. It provides two main tools: one for making authenticated requests to the Fastly API for managing services, configurations, and cache operations, and another for executing Fastly CLI commands securely without exposing API keys. The implementation handles authentication automatically, logs operations for debugging, and includes comprehensive error handling, making it particularly useful for DevOps teams who want to manage their Fastly infrastructure through natural language conversations with AI assistants."
arodoid,unitymcp,1.3,0,6.9,-2.0700000000000003,1.093,MINIMAL,"UnityMCP, developed by an unnamed author, is a Unity Editor plugin and server implementation that enables AI assistants to interact with Unity projects in real-time. Built with C# and TypeScript, it offers tools for retrieving editor state, executing C# commands, and accessing logs. The implementation focuses on providing a standardized interface for AI models to manipulate Unity scenes, objects, and project settings. It's particularly useful for tasks like automated level design, asset management, or debugging assistance, allowing AI to directly influence Unity projects without requiring deep knowledge of the Unity API or editor interface."
aroglahcim,magick-mcp,1.0,0,0,-0.0,1.0,MINIMAL,"This MCP server, developed by aroglahcim, provides a bridge to ImageMagick's command-line interface. Built with Node.js and leveraging the Model Context Protocol SDK, it enables AI assistants to execute ImageMagick commands for image processing and manipulation. The implementation focuses on providing a simple, standardized interface for running ImageMagick operations through MCP. It's particularly useful for developers and content creators who want to integrate ImageMagick's powerful image editing capabilities into AI workflows, enabling use cases such as automated image resizing, format conversion, and applying filters or effects without directly managing command-line interactions."
arpitbatra123,mcp-googletasks,1.0,0,6.9,-2.0700000000000003,0.2929999999999999,MINIMAL,"Google Tasks MCP Server provides a bridge between Claude and Google Tasks, allowing users to manage task lists and tasks directly through Claude. Built with TypeScript and the Google Tasks API, it offers a comprehensive set of tools for creating, updating, and organizing tasks, including features like marking tasks as completed, reordering tasks, and clearing completed tasks. The implementation requires Google Cloud authentication and is designed for personal use, making it ideal for users who want to integrate their task management workflow with Claude's conversational interface."
arre-ankit,notion-mcp-server,1.0,0,5.2,-1.56,0.656,MINIMAL,"This Notion MCP server, developed as an open-source project, enables AI assistants to interact with Notion workspaces and databases. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for creating, reading, updating, and deleting Notion pages and databases. The server abstracts the complexities of the Notion API, allowing AI systems to seamlessly incorporate Notion's organizational and collaborative features into their workflows. It's particularly useful for productivity assistants, project management tools, and AI developers looking to integrate Notion capabilities, enabling use cases like automated note-taking, task management, and knowledge base maintenance within Notion workspaces."
artemis-xyz,artemis-mcp,1.4,0,5.4,-1.62,1.0619999999999998,MINIMAL,"Artemis MCP Server connects Claude Desktop with the Artemis API to create and manage ART formulas for cryptocurrency data analysis. Developed by Son Do at Artemis.xyz, it provides tools for validating API keys, retrieving crypto token metrics, and generating formulas for accessing price data, fees, revenue, and other time-series information. The implementation requires Python 3.10+, uv package manager, and an Artemis API key, making it valuable for users who need to analyze cryptocurrency data directly within Claude conversations without switching contexts."
arthurcolle,openai-mcp,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"This OpenAI-compatible MCP server implementation provides a bridge between AI assistants and large language models, supporting both OpenAI and Anthropic models. It features a robust architecture with prompt templating, streaming responses, efficient caching, and comprehensive error handling. The server exposes endpoints for health checks, context generation, and prompt management, while also offering advanced features like token usage tracking and Prometheus metrics integration. Ideal for applications requiring reliable, high-performance access to LLMs with the flexibility to customize prompts and manage response caching."
artillect,mtg-mcp-servers,1.0,0,5.1,-1.53,0.847,MINIMAL,"The MTG Deck Manager MCP servers provide Magic: The Gathering enthusiasts with two specialized tools for card management and information retrieval. Built with Python using the FastMCP framework, the implementation consists of an MTG deck manager server that handles deck uploads, card drawing, hand management, mulligans, and sideboarding, alongside a Scryfall API integration server that enables card searches, random card retrieval, and detailed card information lookups. The servers can be configured in the Claude Desktop client, allowing users to seamlessly interact with their MTG decks and access comprehensive card data without leaving their conversation interface - perfect for deck testing, card research, and game simulation."
aryankeluskar,canvas-mcp,1.0,0,6.5,-1.9500000000000002,0.6950000000000001,MINIMAL,"Canvas MCP is a tool that enables AI agents to interact with Canvas LMS, allowing them to find relevant educational resources based on natural language queries. Built by Aryan Keluskar, it leverages the Canvas API to retrieve course information, modules, and module items, while using Google's Gemini AI to analyze queries and determine the most relevant resources. The implementation includes caching mechanisms for improved performance and supports both text-based queries and image analysis to help students find learning materials without leaving their AI assistant conversation. It's particularly valuable for educational workflows where students need quick access to course materials based on specific learning objectives or questions."
ashdevfr,discourse-mcp-server,1.0,0,5.3,-1.59,0.659,MINIMAL,"Discourse MCP Server implements the Model Context Protocol for searching posts on Discourse forums. Built by Sylvain CAU, it provides a single tool 'search_posts' that allows AI assistants to query Discourse content using the discourse2 npm package. The server can be deployed via Docker or run directly with npx, requiring configuration of the Discourse API URL, key, and username as environment variables. This implementation is particularly useful for workflows where AI assistants need to reference or analyze content from Discourse forums without leaving the conversation interface."
ashdevfr,duckduckgo-mcp-server,1.4,0,4.2,-1.2600000000000002,1.2739999999999998,MINIMAL,"The DuckDuckGo MCP Server provides web search capabilities through the DuckDuckGo search engine, enabling Claude to retrieve real-time information from the internet. Developed by Sylvain CAU, this Python-based implementation offers a simple yet effective search tool that returns structured results from DuckDuckGo queries. The server can be deployed either through UVX or Docker, making it easily accessible for Claude Desktop users who need to augment their AI assistant with current web information for research, fact-checking, or staying updated on recent events."
ashiknesin,pushover-mcp,1.2,0,6.6,-1.9799999999999998,1.002,MINIMAL,"This MCP server implementation provides integration with Pushover.net for sending notifications. Developed by Ashik Nesin, it leverages the @modelcontextprotocol/sdk to enable seamless communication between MCP clients and the Pushover service. The server offers a straightforward way to send push notifications to various devices, making it useful for applications that require real-time alerts or updates within the MCP ecosystem."
ashley-ha,mcp-manus,1.0,0,7.1,-2.13,0.787,MINIMAL,"The MCP Browser Agent enables Claude to interact with web browsers through the Model Context Protocol, built during the AGI House MCP Hackathon by Jaeyun and Ashley Ha. It leverages the browser-use library to provide a seamless integration that allows Claude to automate browser interactions, detect interactive elements, and execute planned actions. The implementation includes two main tools: one for retrieving the current browser state and planning context, and another for executing actions in the browser. This server runs on macOS with Python 3.12 and Google Chrome, making it ideal for users who want to give Claude the ability to navigate websites, fill forms, and interact with web content directly from conversations."
ashwanth1109,mcp-spotify,1.0,0,5.1,-1.53,0.347,MINIMAL,"This Spotify MCP server implementation, developed by ashwanth1109, provides a comprehensive interface to control and interact with Spotify's music streaming service. It leverages the Spotipy library to offer a wide range of functionalities including playlist management, playback control, track searching, and user data retrieval. The server is designed to work seamlessly with Cursor Composer, enabling AI assistants to control Spotify playback, manage playlists, and access user listening data. It's particularly useful for creating voice-controlled music experiences, generating personalized playlists, and integrating Spotify functionality into AI-driven applications. The implementation focuses on ease of use and flexibility, supporting various Spotify API endpoints and offering detailed error handling for robust operation."
asimihsan,mcp-multilspy,1.0,0,5.4,-1.62,0.838,MINIMAL,"MCP-MultilspyLSP provides Language Server Protocol (LSP) capabilities to language models through the multilspy library, enabling code intelligence features like finding definitions, references, completions, and documentation across multiple programming languages including Python, Java, TypeScript, and more. Built by Asim Ihsan, this server exposes a consistent API for language intelligence that works with any MCP-compatible client like Claude Desktop, making it valuable for developers who need to analyze and understand code without switching contexts or installing language-specific tooling."
askjohngeorge,mcp-doc-scraper,1.0,0,6.3,-1.8900000000000001,0.8109999999999999,MINIMAL,"This Doc Scraper MCP server converts web documentation into markdown format using Jina.ai's API. It provides a single tool, 'scrape_docs', which takes a URL and output path as input, fetches the web page, converts it to clean markdown, and saves the result. Built with Python and leveraging libraries like aiohttp and pydantic, it offers a straightforward solution for automating documentation conversion. The implementation focuses on simplicity and ease of use, making it ideal for developers, technical writers, or content managers who need to quickly transform online documentation into a more portable markdown format for various purposes such as content migration, offline reading, or integration with markdown-based systems."
asmagin,mcp-server-flutter,1.0,0,0,-0.0,1.0,MINIMAL,"This MCP server implementation provides a bridge to the Model Context Protocol SDK for Flutter applications. Developed by asmagin, it offers a TypeScript-based server that can be easily integrated into Flutter projects. The server utilizes the @modelcontextprotocol/sdk package and Zod for data validation. It's designed to facilitate communication between Flutter clients and MCP-compatible AI models, enabling developers to incorporate advanced AI capabilities into their mobile applications. The implementation focuses on type safety, modularity, and ease of use, making it suitable for both development and production environments. It's particularly useful for Flutter developers looking to leverage MCP's capabilities in their mobile apps, supporting use cases like natural language processing, image recognition, or other AI-driven features."
assafelovic,gptr-mcp,1.0,0,7.8,-2.34,0.734,MINIMAL,"GPT Researcher MCP Server provides a bridge between AI assistants and web research capabilities, enabling real-time information gathering and report generation. Developed by Assaf Elovic, this implementation leverages the GPT Researcher library to offer tools for conducting deep research, performing quick searches, generating reports, and retrieving source information. The server exposes its functionality through well-defined tools and a resource endpoint that allows direct access to research context without explicit function calls. Built with FastMCP and Python, it includes features like research caching, custom report generation, and comprehensive source tracking, making it ideal for AI assistants that need to access current web information for tasks like answering time-sensitive questions, creating research reports, or providing evidence-based responses."
ast-grep,ast-grep-mcp,1.0,0,3.5,-1.0499999999999998,0.895,MINIMAL,"ast-grep MCP provides a bridge to the ast-grep code search tool, enabling AI assistants to find code patterns in projects using abstract syntax tree matching. The implementation exposes a single tool that accepts a pattern, project folder, and optional language parameter, then executes the ast-grep CLI command and returns the results as structured JSON. This server is particularly valuable for developers who want to leverage AI assistants for code analysis, pattern matching, and refactoring tasks without leaving their development environment."
astromined,pygithub-mcp-server,1.0,6,7.8,-2.34,0.866,MINIMAL,"PyGithub MCP Server provides a bridge between AI assistants and the GitHub API through PyGithub, enabling operations like managing issues, repositories, and pull requests. The implementation follows a modular architecture with domain-specific schemas, converters, and operations that handle authentication, rate limiting, and error recovery automatically. Built with a focus on reliability and maintainability, it includes comprehensive test coverage with both unit and integration tests, making it particularly valuable for AI-assisted software development workflows that require GitHub integration."
asusevski,opendota-mcp-server,1.0,0,6.6,-1.9799999999999998,0.698,MINIMAL,"This MCP server implementation provides a bridge to the OpenDota API, enabling AI assistants to access real-time Dota 2 statistics, match data, and player information. Developed by Anthony Susevski, it offers a wide range of tools for retrieving player profiles, match details, hero statistics, and professional player data. The server is designed for use cases requiring in-depth Dota 2 analytics, such as game analysis, player performance tracking, or esports research applications."
asyncfuncai,github-chat-mcp,1.2,0,7.3,-2.19,0.9189999999999999,MINIMAL,"GitHub Chat MCP server enables AI assistants to analyze and query GitHub repositories through a simple interface. Developed by AsyncFuncAI, it provides tools for indexing repositories and asking detailed questions about codebases, leveraging the GitHub Chat API to retrieve contextual information and source references. The implementation is built with Python using the FastMCP framework, supports both direct installation and containerized deployment, and is particularly valuable for developers seeking to understand unfamiliar repositories, analyze code architecture, or explore technical implementations without manually navigating through files."
athapong,aio-mcp,1.0,0,7.2,-2.16,0.716,MINIMAL,"This MCP server implementation, developed by athapong, integrates multiple services including GitLab, Jira, Confluence, YouTube, and Google AI. It provides AI-powered search capabilities and various utility tools for development workflows. The server offers a wide range of functionalities, from managing GitLab projects and issues to searching web content and executing command-line scripts, making it suitable for complex software development and project management tasks."
athapong,argus,1.0,0,7.2,-2.16,0.784,MINIMAL,"This MCP server implementation, named Argus, provides tools for analyzing GitLab repositories and performing security assessments. Developed by Athapong Kaewsalapoom, it offers capabilities such as retrieving repository structures, reading important files, and listing branches. Built with Python and leveraging libraries like GitPython and FastMCP, Argus focuses on secure GitLab integration and easy deployment via Docker. It is particularly useful for DevOps and security teams needing to automate repository analysis, conduct code reviews, or integrate GitLab operations into AI-assisted workflows. The implementation's modular design allows for easy extension of its functionality to cover additional GitLab-related tasks."
atharva-gundawar,macos_gui,1.0,0,0,-0.0,1.0,MINIMAL,"The macOS GUI Tools server provides AI assistants with the ability to interact with native macOS applications through a set of specialized tools. Built with Python using the FastMCP framework, it enables operations like capturing screenshots of applications, identifying UI elements (buttons and text areas), moving the mouse cursor to specific coordinates, clicking, and typing text. The implementation supports various Apple applications including Notes, Safari, Mail, and others by leveraging the macOS accessibility framework to extract UI element information. This server is particularly valuable for workflows requiring desktop automation within AI assistant conversations, allowing users to control their Mac applications without manual intervention."
atharvagupta2003,mcp-stripe,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"This MCP implementation, developed for Stripe integration, provides a streamlined interface for interacting with Stripe's payment processing API. Built using Python and leveraging the MCP SDK, it enables AI assistants to perform various payment-related operations such as transaction processing, customer management, and subscription handling. The implementation focuses on simplifying complex payment workflows, making it easier to incorporate Stripe's functionality into AI-driven financial applications. It's particularly useful for businesses and developers who want to automate payment processes, integrate Stripe services into their AI systems, or build intelligent financial management tools without directly managing API calls to Stripe."
atla-ai,atla-mcp-server,1.0,0,6.5,-1.9500000000000002,0.6950000000000001,MINIMAL,"Atla MCP Server provides a standardized interface for LLMs to interact with the Atla API for state-of-the-art LLMJ evaluation. It offers tools for evaluating LLM responses against single or multiple criteria, returning both numerical scores and textual critiques. Built with Python 3.11 and distributed under the MIT license, this server enables AI assistants to leverage Atla's evaluation models for assessing response quality across various dimensions. The implementation supports multiple connection methods including OpenAI Agents SDK, Claude Desktop, and Cursor, making it accessible for developers working with different MCP clients."
HEAD,modelcontextprotocol,1.0,0,0,-0.0,1.0,MINIMAL,"Atlan MCP Server provides a bridge between AI agents and Atlan data catalog services through a Python implementation using the pyatlan SDK. The server exposes tools for searching assets with flexible conditions, retrieving assets using DSL queries, traversing lineage relationships, and updating asset attributes like descriptions and certificate status. Built with a robust error handling system and comprehensive logging, it enables AI assistants to interact with enterprise data catalogs for use cases such as data discovery, lineage analysis, and metadata management. The implementation uses environment variables for configuration and supports deployment through Claude Desktop or the MCP Inspector for testing."
aashari,mcp-server-atlassian-confluence,1.4,0,6.9,-2.0700000000000003,1.107,MINIMAL,"A TypeScript-based MCP server for Atlassian Confluence integration that provides AI assistants with direct access to Confluence spaces, pages, and content. It offers tools for listing spaces, retrieving page details, and performing advanced searches using Confluence Query Language (CQL), all while converting content to Markdown format for optimal readability. The implementation includes robust error handling, pagination support, and a CLI interface for direct interaction, making it particularly valuable for teams that need to connect Claude or other AI systems to their Confluence knowledge bases without leaving the conversation interface."
atom2ueki,mcp-server-ios-simulator,1.0,0,7.2,-2.16,0.784,MINIMAL,"A TypeScript-based MCP server for interacting with iOS simulators, built using the Appium iOS Simulator library. Provides a robust session management approach for creating, booting, and controlling iOS simulators programmatically, with flexible device and OS version selection. Useful for AI assistants and testing scenarios that require dynamic iOS simulator interactions."
atomicchonk,roadrecon_mcp_server,1.0,0,6.2,-1.8599999999999999,0.31400000000000006,MINIMAL,"ROADrecon MCP Server provides access to Azure AD security data collected by ROADrecon through a standardized protocol, enabling AI assistants to analyze tenant security posture. The server exposes comprehensive Azure AD data including users, groups, applications, and service principals, while offering specialized security analysis tools for identifying privileged users, analyzing MFA status, detecting stale accounts, and evaluating PIM implementation. Built with Python using FastMCP, it integrates with a ROADrecon API instance to facilitate security assessments and vulnerability identification in Azure AD environments."
atotti,mozisu-mcp-server,1.0,0,4.5,-1.35,0.865,MINIMAL,"Mozisu MCP Server is a Go-based implementation that provides character counting functionality for text, with special handling for multi-byte characters like Japanese text and emojis. The server processes both total character count and non-whitespace character count, returning structured results through a clean API. Built with performance in mind, it uses Go's unicode package for accurate character classification and offers configurable server settings through JSON configuration. This implementation is particularly useful for applications requiring accurate text metrics across different languages and character sets."
attarmau,styleclip,1.0,0,6.5,-1.9500000000000002,0.6950000000000001,MINIMAL,"FastMCP_RecSys is a clothing recommendation system that uses CLIP (Contrastive Language-Image Pretraining) to analyze and classify fashion images. Built with a FastAPI backend and React frontend, it extracts clothing attributes like style, color, and fabric from uploaded images, then generates personalized recommendations based on detected tags and user behavior. The system stores clothing items and their metadata in MongoDB, making it particularly useful for e-commerce platforms seeking to enhance user experience through AI-powered fashion recommendations."
atuinturtle,heart-mcp-server,1.0,0,2.7,-0.81,0.919,MINIMAL,"Heart MCP server provides a basic foundation for building MCP-enabled applications using Bun and TypeScript. Built with the @modelcontextprotocol/sdk, it establishes a stdio transport connection and exposes a minimal server configuration that can be extended with custom resources and tools. Useful as a starting point for developers looking to create their own MCP server implementations."
audienseco,mcp-audiense-insights,1.0,0,7.8,-2.34,0.766,MINIMAL,"This MCP client, developed by an unspecified author, enables integration with Audiense's audience insights platform. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for accessing Audiense's API to retrieve audience data and insights. The implementation focuses on simplifying authentication and data retrieval from Audiense, offering functionality to query audience information. It includes optional integration with the Twitter API for enhanced capabilities. This client is particularly useful for applications requiring programmatic access to audience analytics, enabling use cases such as targeted marketing campaigns, social media strategy development, and demographic analysis without directly handling API authentication complexities."
audienseco,mcp-tweetbinder,1.0,0,7.8,-2.34,0.734,MINIMAL,"TweetBinder MCP Server provides Claude with access to Twitter/X analytics data through the TweetBinder by Audiense API. Developed by AudienseCo, it enables creating and analyzing Twitter reports with capabilities for searching tweets, tracking hashtags, measuring engagement metrics, and performing sentiment analysis. The server exposes seven tools that handle report creation, status checking, statistics retrieval, and content extraction, making it valuable for social media analysis, campaign tracking, and audience research without leaving the Claude conversation interface."
ichigo3766,audio-transcriber-mcp,1.0,0,6.1,-1.83,0.683,MINIMAL,"Audio transcription server that provides speech-to-text capabilities using OpenAI's Whisper API. Built with TypeScript and the MCP SDK, it exposes a tool for transcribing audio files with configurable language settings and optional file saving. Particularly valuable for users who need to convert spoken content to text through AI assistants while maintaining control over the transcription process and output format."
austinkelsay,nostr-mcp-server,1.0,0,7.8,-2.34,0.766,MINIMAL,"Nostr MCP Server provides a bridge between AI assistants and the Nostr decentralized social network, enabling interaction with user profiles, posts, and Lightning Network payments. Developed by Austin Kelsay, this TypeScript implementation offers seven specialized tools for retrieving profiles, text notes, long-form content, and analyzing zap payments (Bitcoin tips) with detailed transaction information. The server features native support for npub format identifiers, NIP-57 compliant zap receipt validation, and advanced bolt11 invoice parsing, making it ideal for users who want to analyze Nostr social data, track Lightning Network payments, or search through Nostr Implementation Possibilities (NIPs) documentation without leaving their AI assistant interface."
honeycombio,honeycomb-mcp,1.0,11,7.6,-2.2800000000000002,0.1280000000000001,LOW,"This Honeycomb MCP server, developed by Austin Parker, enables AI assistants to directly analyze and query Honeycomb observability data. Built with TypeScript and leveraging the MCP SDK, it provides tools for listing columns, running analytics queries, and analyzing data patterns within Honeycomb datasets. The server abstracts the complexities of interacting with the Honeycomb API, allowing AI systems to easily access and interpret observability data. By bridging AI capabilities with Honeycomb's powerful analytics, this implementation facilitates use cases such as automated performance analysis, anomaly detection, and data-driven troubleshooting in complex distributed systems."
auth0,auth0-mcp-server,1.2,2,7.8,-2.34,1.166,MINIMAL,"The Auth0 MCP Server integrates with LLMs and AI agents, allowing you to perform various Auth0 management operations using natural language. For instance, you could simply ask Claude to create a new Auth0 app and get the domain and client ID."
automata-labs-team,code-sandbox-mcp,1.3,0,7.7,-2.31,1.069,MINIMAL,"This MCP implementation, developed by Automata Labs, provides a sandboxed code execution environment for AI agents. Built with Go and leveraging Docker, it offers secure code running capabilities across multiple languages. The implementation focuses on safety and isolation, with features like resource limits and network restrictions. It integrates seamlessly with Claude Desktop and other AI applications through a standardized interface. Particularly useful for developers and researchers working on AI-assisted coding tasks, it enables use cases such as code generation, debugging, and automated testing without exposing the underlying system to potential security risks."
automata-labs-team,mcp-server-playwright,1.9,0,6.4,-1.92,1.708,MINIMAL,"This Playwright-based MCP implementation, developed by Automata Labs, provides a robust interface between language models and web browsers. It enables AI agents to perform a comprehensive range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution in real browser environments. The implementation distinguishes itself by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Playwright's cross-browser support, it ensures compatibility across major browsers. This tool is particularly powerful for AI-driven web testing, data scraping, and automated web interactions, enabling more sophisticated AI assistants that can directly manipulate web applications. Its integration with Claude Desktop and npm-based installation process make it easily accessible for developers and researchers working on advanced AI projects."
automateyournetwork,pyats_mcp,1.0,0,6.9,-2.0700000000000003,0.7929999999999999,MINIMAL,"PyATS MCP Server provides a containerized bridge between AI assistants and Cisco network devices through the pyATS automation framework. Built with Python and packaged in Docker, it enables interaction with network devices defined in a testbed YAML file, supporting routers, switches, and hosts with various operating systems. The server handles SSH connections to network devices with configurable timeouts and authentication, making it valuable for network engineers who need to automate device configuration, troubleshooting, or monitoring tasks without leaving their AI assistant interface."
automation-ai-labs,mcp-link,1.3,3,6.3,-1.8900000000000001,1.189,MINIMAL,"MCP-Link is a server implementation that converts OpenAPI specifications into MCP-compatible endpoints, enabling AI assistants to interact with any API described in OpenAPI format. Written in Go, it features a simple HTTP server that parses OpenAPI YAML/JSON files, transforms API endpoints into MCP tools, and handles authentication through header forwarding. The implementation supports path filtering, parameter mapping, and various authentication methods, making it ideal for developers who want to quickly expose existing APIs to AI assistants without writing custom MCP adapters for each service."
automation-ai-labs,mcp-wait,1.0,0,5.9,-1.7700000000000002,0.823,MINIMAL,"MCP-Wait provides a simple waiting functionality that allows pausing execution until other tasks finish. The server offers a single 'wait' tool that accepts a duration in seconds (0-300) and reports progress in 10% increments during the wait period. Built with TypeScript using FastMCP, it supports both stdio transport for CLI usage and SSE for HTTP server integration, making it easy to incorporate into Claude Desktop, Cursor, or Chatwise applications. This utility is particularly useful in workflows where synchronization between different processes is needed."
avarant,typesense-mcp-server,1.0,0,4.7,-1.4100000000000001,0.641,MINIMAL,"Typesense MCP Server provides a bridge between AI assistants and Typesense search engine through a Python implementation using the Model Context Protocol. The server exposes tools for managing collections, documents, and search operations, including vector similarity search capabilities. Built with robust error handling and comprehensive logging, it enables AI assistants to perform operations like creating collections, indexing documents, and executing both keyword and vector searches. The implementation uses environment variables for configuration and can be easily deployed through Cursor, making it valuable for developers who want to integrate powerful search functionality into their AI workflows."
avimbu,plausible-mcp-server,1.0,0,4.8,-1.44,0.644,MINIMAL,"Plausible MCP Server provides a bridge between Claude and Plausible Analytics, enabling AI assistants to query website analytics data directly. Developed by AVIMBU, this TypeScript implementation connects to the Plausible API v2 and offers a single tool for retrieving metrics like visitors, pageviews, bounce rates, and conversion data across customizable date ranges. The server handles authentication through API keys configured via environment variables or the Smithery configuration system, making it ideal for generating analytics reports, monitoring website performance trends, and extracting insights from Plausible data without leaving the conversation interface."
avimbu,slack-mcp-server,1.0,0,6.8,-2.04,0.29600000000000004,MINIMAL,"Slack MCP Server provides a bridge to the Slack API, enabling AI assistants to interact with Slack workspaces through two primary tools: posting messages to channels and retrieving user lists. Built by AVIMBU FlexCo in Austria, this TypeScript implementation uses the Model Context Protocol SDK to abstract Slack API interactions, making it easy to programmatically send messages or fetch workspace user information."
avioflagos,mcp-coding-assistant,1.0,0,6.8,-2.04,0.704,MINIMAL,"This Coding Assistant MCP server, developed by an unnamed creator, enhances AI coding capabilities by providing context-aware code suggestions and documentation integration. Built with TypeScript and leveraging the LangChain library, it offers tools for code analysis, technology detection, and automatic documentation retrieval. The server implements vectorized documentation search and integrates with OpenAI's API for intelligent code completion. By abstracting the complexities of code understanding and documentation lookup, it enables AI systems to provide more accurate and contextually relevant coding assistance. This implementation is particularly valuable for applications requiring enhanced code comprehension and generation, facilitating use cases such as automated code review, context-aware refactoring suggestions, and intelligent API usage recommendations."
awesimon,elasticsearch-mcp,1.2,0,7.7,-2.31,0.9309999999999999,MINIMAL,"Elasticsearch MCP Server provides a bridge between AI assistants and Elasticsearch databases, enabling natural language interaction with search functionality and index management. Built with TypeScript and leveraging the official Elasticsearch client, it offers tools for creating indices, defining mappings, performing searches, bulk importing data, and retrieving cluster health information. The implementation uses the Model Context Protocol SDK for standardized communication, making it particularly valuable for users who need to query and manage Elasticsearch data without remembering complex query syntax or API endpoints."
awkoy,notion-mcp-server,1.2,0,7.8,-2.34,0.9339999999999999,MINIMAL,"Notion MCP Server provides a bridge to the Notion API, enabling AI assistants to create, update, and manage Notion pages and blocks. Built by Yaroslav Boiko, it offers tools for page operations (creation, archiving, restoration, searching) and block manipulation (appending, retrieving, updating, deleting) with support for batch operations to improve efficiency. The implementation requires Notion API credentials (token and page ID) and is packaged as a Node.js application with Docker support, making it ideal for workflows that need to maintain documentation, notes, or knowledge bases in Notion without switching contexts."
awkoy,replicate-flux-mcp,1.2,0,7.8,-2.34,0.9339999999999999,MINIMAL,"Replicate Flux MCP provides a bridge to the Replicate API for accessing the Flux image generation model. Built by Yaroslav Boiko, this TypeScript implementation enables AI assistants to generate images through the Model Context Protocol without requiring users to manage separate API integrations. It handles configuration through a simple API token setup and is packaged as both an npm module and a Docker container, making it ideal for applications that need to incorporate AI image generation capabilities within conversation interfaces."
src,bedrock-kb-retrieval-mcp-server,2.3,0,0,-0.0,2.3,MINIMAL,"An MCP server implementation that enables retrieval from Amazon Bedrock Knowledge Bases, allowing AI applications to access information stored in knowledge bases through the Model Context Protocol."
src,aws-kb-retrieval-server,2.5,0,0,-0.0,2.5,MINIMAL,"This AWS Knowledge Base Retrieval MCP server, developed by the Model Context Protocol team, enables AI assistants to access information from AWS Knowledge Bases using the Bedrock Agent Runtime. It provides a tool for performing retrieval-augmented generation (RAG) operations, allowing queries against specified knowledge bases and retrieval of multiple results. The server integrates seamlessly with AWS services, requiring proper AWS credentials configuration. By connecting AI capabilities with AWS knowledge repositories, this implementation empowers AI systems to leverage curated information sources. It is particularly useful for building AI assistants that need access to company-specific knowledge, technical documentation, or any scenario where an AI system benefits from retrieving contextual information from AWS-managed knowledge bases."
src,cdk-mcp-server,2.3,0,0,-0.0,2.3,MINIMAL,"An MCP server implementation for AWS services, allowing AI applications to access AWS services like Bedrock, S3, and DynamoDB through the Model Context Protocol."
src,cost-analysis-mcp-server,2.3,0,0,-0.0,2.3,MINIMAL,An MCP server that analyzes the cost of LLM API calls by tracking tokens used and calculating costs based on model pricing. It provides detailed cost breakdowns and usage statistics for better budget management and optimization of AI applications.
src,aws-documentation-mcp-server,2.5,0,0,-0.0,2.5,MINIMAL,An MCP server that provides access to AWS documentation. This server allows Claude to search and retrieve information from AWS documentation to help answer questions about AWS services and features.
sammcj,mcp-aws-kb,1.0,0,7.2,-2.16,0.784,MINIMAL,"The AWS Knowledge Base Retrieval MCP Server enables AI assistants to access information from AWS Knowledge Bases using the Bedrock Agent Runtime. Built with TypeScript, it provides a retrieve_from_aws_kb tool that performs RAG (Retrieval-Augmented Generation) operations, returning both raw context and structured metadata about the sources. The server supports multiple authentication methods including IAM Access Keys and AWS SSO, can be configured with default Knowledge Base IDs, and returns results in a format optimized for AI consumption with separate content items for context and source metadata. This implementation is particularly valuable for organizations that maintain AWS Knowledge Bases and want to incorporate that information into their AI assistant workflows."
awslabs,log-analyzer-with-mcp,1.0,0,6.5,-1.9500000000000002,0.8049999999999999,MINIMAL,"Log Analyzer with MCP is an AWS Labs-developed server that provides AI assistants with structured access to CloudWatch Logs data. Built in Python using boto3, it exposes a comprehensive set of tools for searching, analyzing, and correlating logs across multiple AWS services. The implementation includes specialized capabilities for error pattern detection, log activity summarization, and cross-service correlation using common identifiers like request IDs. It's particularly valuable for DevOps teams and system administrators who need AI assistance with log analysis for troubleshooting, monitoring, and identifying patterns in their AWS infrastructure logs."
src,nova-canvas-mcp-server,2.3,0,0,-0.0,2.3,MINIMAL,"An MCP server implementation for AWS Nova Canvas, a service that enables developers to build AI applications with Claude. This server allows Claude to access and manipulate data in Nova Canvas workspaces."
awwaiid,mcp-server-taskwarrior,1.0,0,5.8,-1.7399999999999998,0.8260000000000001,MINIMAL,"This MCP server implementation provides a bridge to TaskWarrior, enabling AI assistants to interact with task management operations. Developed by Brock Wilcox, it offers tools for viewing pending tasks, adding new tasks with various attributes, and marking tasks as complete. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on executing TaskWarrior commands through a simple interface. It is particularly useful for AI applications that need to automate task management, such as personal productivity assistants or project management systems. The implementation leverages the local TaskWarrior installation, allowing seamless integration with existing task databases and workflows."
zed-extensions,mcp-server-axiom,1.0,0,3.3,-0.9899999999999999,0.901,MINIMAL,"Axiom MCP Server is a Zed extension that integrates with Axiom's log management platform, enabling AI assistants to query and analyze log data directly within conversations. The implementation downloads and manages the axiom-mcp binary from GitHub releases, configures it with user-provided API tokens and optional organization settings, and handles platform-specific compatibility across macOS, Linux, and Windows. This server is particularly valuable for developers who need to investigate application logs, troubleshoot issues, or extract insights from their observability data without leaving their Zed environment."
axiomhq,zed-axiom-context-server,1.0,0,3.2,-0.96,0.904,MINIMAL,"This Axiom Context Server, developed for use with the Zed AI assistant, provides a Model Context Server for Axiom. Built using Rust and the zed_extension_api, it offers a customizable command interface for integration with Axiom's model context protocol (MCP). The implementation allows users to specify custom commands and arguments in their Zed settings, enhancing flexibility in deployment. It's designed to seamlessly connect Axiom's capabilities with Zed's AI assistant, making it particularly useful for developers and teams looking to leverage Axiom's context-aware AI features within their Zed-based workflows. The server's ability to use a local executable or a custom-specified command path adds versatility for different setup requirements."
axiomhq,mcp-server-axiom,1.0,0,6.7,-2.0100000000000002,0.7989999999999999,MINIMAL,"This MCP server, developed by Axiom, enables AI agents to query data using Axiom Processing Language (APL). It integrates with the Axiom data platform to provide tools for executing APL queries against datasets and listing available datasets. By leveraging Axiom's powerful data processing capabilities, this implementation allows AI assistants to easily incorporate real-time data analysis into their responses. It is particularly useful for scenarios requiring rapid insights from large datasets, such as log analysis, application monitoring, or business intelligence through natural language queries to an AI assistant. The server is designed for seamless integration with the Claude desktop app and focuses on core querying functionality."
axliupore,mcp-code-runner,1.0,0,1.7,-0.51,0.949,MINIMAL,"MCP Code Runner is a TypeScript server that enables AI assistants to execute code snippets in isolated Docker containers. Developed by axliupore, it supports multiple programming languages including Python, JavaScript, TypeScript, Go, Java, C, and C++. The implementation uses Dockerode to manage container lifecycle, enforces resource limits (memory, CPU) and network isolation for security, and returns execution results with stdout/stderr output. It's particularly useful for code testing, debugging, and educational scenarios where safe execution of untrusted code is required."
aydinfer,spline-mcp-server,1.0,0,5.8,-1.7399999999999998,0.6739999999999999,MINIMAL,"Spline MCP Server provides a bridge to the Spline 3D design tool API, enabling AI assistants to interact with Spline's features through a structured interface. It supports core operations like exporting scenes to various formats (GLB, GLTF, FBX, OBJ), importing 3D models, and managing scene details, while offering robust animation capabilities including creating keyframe animations, triggering existing animations, and setting up event-based interactions. The server uses axios for API communication and implements comprehensive error handling, making it valuable for designers and developers who want to programmatically control Spline's 3D environment without leaving their AI assistant conversation."
ayeletstudioindia,unreal-analyzer-mcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"This Unreal Engine code analyzer MCP server, developed by Ayelet Technology Private Limited, provides powerful source code analysis capabilities for Unreal Engine codebases. Built with TypeScript and leveraging tree-sitter for robust C++ parsing, it enables AI assistants to deeply understand and analyze Unreal Engine source code. The server offers features like class analysis, hierarchy mapping, code search, reference finding, and subsystem analysis. It also includes a knowledge base of game genres and implementation patterns. By abstracting complex code analysis into standardized MCP endpoints, it allows AI systems to gain deep insights into Unreal Engine projects. This implementation is particularly useful for game developers, engine contributors, and AI assistants working on Unreal Engine-based projects, facilitating tasks like code comprehension, refactoring, and architectural analysis."
azdeltaqq,mcp-reasoning-server,1.0,0,7.0,-2.0999999999999996,0.79,MINIMAL,"MCP Reasoning Server provides advanced reasoning capabilities for Claude in Cursor AI through simulated reasoning algorithms including Monte Carlo Tree Search, Beam Search, R1 Transformer, and Hybrid Reasoning. Built by AzDeltaQQ (inspired by Jacck's mcp-reasoner), it implements auto-iterative reasoning that completes all steps in a single tool call, returning structured JSON responses with reasoning traces. The server is designed for complex problem-solving tasks in software development contexts like algorithm optimization, architecture design, and code refactoring."
azure-samples,remote-mcp-apim-functions-python,1.0,0,4.8,-1.44,0.856,MINIMAL,"This Azure-based MCP server implementation secures remote MCP servers using API Management as an AI Gateway. It implements the latest MCP Authorization specification with a complete OAuth2 flow, allowing clients to authenticate securely through Microsoft Entra ID. The architecture uses Azure Functions for the backend, with Python tools for snippet management, while API Management handles client registration, authorization, and token exchange. The implementation includes infrastructure as code (Bicep templates) for easy deployment with Azure Developer CLI (azd), making it particularly useful for organizations that need to provide secure, enterprise-grade access to MCP tools while leveraging existing Azure identity services."
azure,azure-mcp,1.3,0,7.7,-2.31,1.069,MINIMAL,"Azure MCP provides a .NET-based server implementation that enables AI assistants to interact with Azure cloud resources through a command-line interface. Built by Microsoft, this tool exposes capabilities for managing Azure services including Cosmos DB, Storage, App Configuration, and Monitor, with commands for listing resources, querying data, and performing administrative operations. The server supports both standard I/O and SSE transport protocols, implements robust authentication through Azure Identity, and features comprehensive retry policies and telemetry integration, making it valuable for developers seeking to automate Azure resource management or enable AI-assisted cloud operations."
munishm,azure-devops-mcp-server,1.0,0,0,-0.0,1.0,MINIMAL,"Azure DevOps Work Items MCP Server provides a programmatic interface for interacting with Azure DevOps work items, enabling AI assistants to retrieve, create, update, and analyze work items through a standardized set of resources and tools. Built using the FastMCP framework, it supports operations like fetching recent work items, creating tasks, updating work item details, and generating analysis prompts, making it valuable for project management and workflow automation."
src,redis,2.5,0,0,-0.0,2.5,MINIMAL,"This MCP server implementation, developed by Anthropic, provides a collection of specialized servers for various data sources and services. It includes integrations for Google Drive, PostgreSQL databases, Slack, Brave Search, filesystem access, and more. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized way for AI models to interact with diverse external systems and data. The implementation focuses on modularity, allowing users to selectively deploy servers based on their specific needs. It enables use cases like document retrieval, database querying, web search, and inter-application communication, making it particularly useful for enhancing AI assistants with real-world data access and action capabilities."
src,postgres,2.5,0,0,-0.0,2.5,MINIMAL,"This PostgreSQL MCP server, developed by Anthropic, provides a read-only interface for language models to interact with PostgreSQL databases. It enables AI agents to inspect database schemas and execute SQL queries through a controlled interface. The server integrates with Claude Desktop and can be run as a standalone application, offering deployment flexibility. By focusing on read-only access and using environment variables for configuration, it maintains data security while allowing AI systems to explore and analyze relational data. This implementation is particularly useful for AI assistants designed to perform database schema exploration, generate SQL queries, or provide data-driven insights using PostgreSQL as the backend."
src,memory,2.5,0,0,-0.0,2.5,MINIMAL,"This knowledge graph memory server, developed by Anthropic, provides a persistent memory system for language models using a local graph database. It enables AI agents to create, query, and update entities, relations, and observations through a controlled API. By storing information as a semantic network, it allows AI systems to build and maintain complex knowledge structures over time. The server integrates with Claude Desktop via NPM and focuses on personalization use cases. This implementation is particularly useful for AI assistants designed to remember user preferences, track relationships between people and organizations, or accumulate domain knowledge across conversations."
src,gitlab,2.5,0,0,-0.0,2.5,MINIMAL,"This GitLab MCP server, developed by Anthropic, provides AI assistants with comprehensive access to GitLab's API functionality. It enables operations like file management, repository creation, issue tracking, and merge request handling across GitLab projects. Built in TypeScript, the implementation handles authentication, request formatting, and exposes GitLab's features through a standardized MCP interface. By bridging AI models and GitLab's development platform, this server allows AI systems to interact with code repositories, manage projects, and analyze development workflows. It is particularly useful for AI assistants supporting software development teams in tasks like code review, project management, and collaborative coding on GitLab."
src,git,2.5,0,0,-0.0,2.5,MINIMAL,"This server, developed by Anthropic, provides AI assistants with Git repository interaction capabilities. It enables operations like viewing working tree status, staging changes, committing, and managing branches through a standardized interface. Built in Python, the implementation handles Git operations and exposes functionality via MCP. By bridging AI models and Git version control, this server allows AI systems to analyze codebases, track changes, and assist with source code management tasks. It is particularly useful for AI assistants supporting software development workflows, code review processes, and collaborative programming projects using Git repositories."
src,gdrive,2.5,0,0,-0.0,2.5,MINIMAL,"This Google Drive MCP server, developed by ModelContextProtocol, provides a secure interface for language models to interact with Google Drive files and folders. It enables AI agents to search, read, and access Google Drive content through a controlled API. The server handles OAuth authentication, automatically exports Google Workspace files to standard formats, and integrates with the desktop app via NPM. By focusing on read-only access and using OAuth for authorization, it maintains data security while allowing AI systems to work with cloud-stored documents and files. This implementation is particularly useful for AI assistants designed to analyze documents, search through cloud storage, or provide insights from Google Drive content."
src,time,2.5,0,0,-0.0,2.5,MINIMAL,"This MCP server, developed by the Model Context Protocol team, provides time and timezone conversion capabilities for AI assistants. It offers tools to get the current time in any timezone and convert times between timezones using IANA timezone names. The server automatically detects the system timezone and supports customization. By connecting AI capabilities with accurate time information, this implementation enables AI systems to handle time-sensitive queries and perform timezone calculations. It is particularly useful for applications like scheduling across timezones, travel planning, or any scenario where an AI assistant needs to work with localized time data."
src,sqlite,2.5,0,0,-0.0,2.5,MINIMAL,"This SQLite MCP server, developed by Anthropic, provides a versatile interface for language models to interact with SQLite databases. It enables AI agents to execute SQL queries, analyze business data, and generate insights through a controlled interface. The server features dynamic resources for aggregating discovered insights, and includes tools for database operations and schema inspection. This implementation is particularly useful for AI assistants designed to perform ad-hoc data analysis, generate business reports, or provide data-driven recommendations using SQLite as the lightweight, serverless backend."
mindsdb,mindsdb,2.5,5,6.7,-2.0100000000000002,2.201,MINIMAL,"MindsDB is an MCP server that enables your MCP applications to answer questions over large-scale federated data—spanning databases, data warehouses, and SaaS applications.

​
Key Features
Unified Data Gateway
MindsDB acts as a unified data gateway that handles complex data operations, freeing AI apps and agents from the need to manage individual data sources or write complex logic. MindsDB enables “one-step” querying across multiple sources with full auditability.

Superior User Experience
MindsDB delivers a polished, secure, and user-friendly experience on top of MCP integrations. Our turnkey solution includes robust security controls, monitoring, governance, and native integrations to ensure compatibility with non-MCP solutions and applications.

Advanced AI Workflows
MindsDB orchestrates complex AI workflows, such as joining data from multiple sources and coordinating across various models and data systems in a single query. These composite workflows are challenging to implement using MCP alone."
yamadashy,repomix,2.5,0,7.8,-2.34,2.266,MINIMAL,"Repomix is a powerful tool that packs your entire repository into a single, AI-friendly file.
It is perfect for when you need to feed your codebase to Large Language Models (LLMs) or other AI tools like Claude, ChatGPT, DeepSeek, Perplexity, Gemini, Gemma, Llama, Grok, and more."
screenpipe-integrations,screenpipe-mcp,2.5,0,0,-0.0,2.5,MINIMAL,"This screenpipe MCP server, developed by Mediar AI, provides a standardized interface for searching and retrieving screen recordings and associated data. Built with Python and leveraging libraries like httpx and nest-asyncio, it offers tools to query recordings based on content type, time range, and application context. The server integrates with a local screenpipe API, abstracting the complexities of data retrieval and formatting into a consistent MCP interface. By enabling AI systems to access and analyze screen capture data, this implementation facilitates use cases such as productivity tracking, user behavior analysis, and automated documentation of digital workflows."
integrations,mcp,2.5,0,0,-0.0,2.5,MINIMAL,An MCP implementation for Skyvern AI that enables browser automation and web interaction capabilities through the Model Context Protocol.
packages,mcp-docs-server,2.5,0,0,-0.0,2.5,MINIMAL,"A Model Context Protocol (MCP) server that provides AI assistants with direct access to Mastra.ai's complete knowledge base. This includes comprehensive documentation with MDX support, a collection of production-ready code examples, technical blog posts, and detailed package changelogs. The server integrates with popular AI development environments like Cursor and Windsurf, as well as Mastra agents, making it easy to build documentation-aware AI assistants that can provide accurate, up-to-date information about Mastra.ai's ecosystem."
github,github-mcp-server,2.5,0,7.3,-2.19,2.281,MINIMAL,"A Model Context Protocol (MCP) server for GitHub that enables AI assistants to access GitHub repositories, issues, pull requests, and other GitHub data."
supermemoryai,supermemory,2.2,0,5.7,-1.7100000000000002,2.0290000000000004,MINIMAL,"Supermemory is an open-source AI knowledge platform that helps users collect, organize, and recall information from various sources. It integrates with popular tools like Notion, Twitter, Obsidian, and more, allowing users to save content, build a personal knowledge base, and use AI to chat with and search through their collected information while maintaining privacy through end-to-end encryption and optional self-hosting."
microsoft,playwright-mcp,2.2,0,7.8,-2.34,1.9660000000000002,MINIMAL,"Playwright MCP is a server implementation that enables AI assistants to control web browsers through the Model Context Protocol. It provides tools for navigating websites, capturing page snapshots, interacting with elements, and taking screenshots - all accessible via standardized MCP interfaces. The server offers two modes: a snapshot-based approach that uses accessibility trees for better semantic understanding of web pages, and a vision-based mode that works with screenshots for visual interactions. Built by Microsoft, this implementation leverages Playwright's automation capabilities to allow AI assistants to perform complex web tasks like form filling, clicking elements, and extracting information from websites."
HEAD,mcp-run-python,2.2,0,0,-0.0,2.2,MINIMAL,"MCP-Run-Python provides a sandboxed environment for executing Python code through a standardized interface. Built with TypeScript and Pyodide, it allows AI assistants to run Python snippets safely in a browser-compatible environment, supporting package installation through PEP 723 script metadata. The server offers both SSE and stdio transport options, handles dependency management automatically, and returns execution results in a structured XML format containing stdout, stderr, and return values. This implementation is particularly valuable for interactive code examples, educational tools, and AI assistants that need to demonstrate or test Python code without requiring a full backend Python environment."
glips,figma-context-mcp,2.2,0,6.1,-1.83,1.8830000000000002,MINIMAL,"This MCP server, developed by GLips, provides a standardized interface for AI models to interact with Figma's design platform API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for accessing and manipulating Figma design files, components, and styles. The implementation focuses on exposing Figma's collaborative design features through a consistent MCP interface, enabling AI assistants to perform complex design operations, asset management, and team collaboration tasks. By connecting AI models with Figma's powerful design capabilities, this server facilitates sophisticated scenarios like automated design analysis, style guide enforcement, and design system management. It's particularly valuable for design teams and organizations looking to integrate AI-powered design assistance and automation into their Figma workflows."
packages,diff-mcp,1.9,0,0,-0.0,1.9,MINIMAL,"jsondiffpatch is a JavaScript library that compares and patches JSON objects, providing a compact delta format that captures additions, modifications, deletions, and array moves. Created by Benjamin Eidelman, it features smart array diffing using LCS algorithm, multiple output formatters (HTML, console, JSON Patch RFC 6902), and text diffing for long strings. The library includes an MCP server implementation that enables AI assistants to compare text or structured data in various formats (JSON, YAML, TOML, XML) and get readable diffs. Ideal for version control systems, data synchronization, and change visualization in web applications."
libs,mcp-server,1.9,0,0,-0.0,1.9,MINIMAL,"This server enables LLMs to run Computer-Use Agent (CUA) workflows on Apple Silicon macOS. It provides asynchronous access to a virtual macOS sandbox environment using Apple’s Virtualization.framework, and supports clients like Cursor, Claude Desktop, and other MCP-compatible tools."
lauriewired,ghidramcp,1.9,0,6.8,-2.04,1.696,MINIMAL,"GhidraMCP is a Model Context Protocol (MCP) server implementation that integrates with the Ghidra reverse engineering framework. It allows AI assistants to analyze binary files, decompiled code, and other reverse engineering artifacts directly from Ghidra, enabling more effective collaboration between AI systems and reverse engineers."
upstash,context7,1.9,0,7.6,-2.2800000000000002,1.672,MINIMAL,"Context7-MCP is a server implementation that provides AI assistants with access to up-to-date documentation and code examples for various libraries and frameworks. Developed by Upstash, this TypeScript-based server connects to Context7.com's documentation database, offering two main tools: one for resolving library names into compatible IDs, and another for retrieving relevant documentation with customizable token limits and topic filtering. The implementation includes intelligent project ranking algorithms to help find the most relevant documentation based on user queries, making it particularly valuable for developers seeking current technical information beyond an AI's knowledge cutoff date."
lharries,whatsapp-mcp,1.9,0,7.8,-2.34,1.666,MINIMAL,"WhatsApp MCP Server provides a secure bridge to your personal WhatsApp account, enabling AI assistants to search messages, manage contacts, and send messages through standardized tools. The implementation uses a two-component architecture with a Go-based WhatsApp bridge that connects to the WhatsApp web API via the whatsmeow library, storing all messages locally in SQLite, and a Python MCP server that exposes functionality through nine specialized tools. Designed for privacy, it keeps your message history on your device while allowing controlled AI access to your conversations for tasks like finding past information or sending new messages."
sonnylazuardi,cursor-talk-to-figma-mcp,1.9,0,7.5,-2.25,1.6749999999999998,MINIMAL,"Cursor Talk to Figma MCP enables AI assistants to interact with Figma designs through a bidirectional communication system. Created by Sonny Lazuardi, it consists of a Figma plugin, a WebSocket server, and an MCP server that together allow Cursor AI to read and modify Figma designs programmatically. The implementation provides tools for creating and manipulating design elements (rectangles, frames, text), styling (colors, strokes, corner radius), and organization (moving, resizing, deleting nodes), making it particularly valuable for AI-assisted design workflows where users need to generate or modify visual elements without leaving their AI conversation."
executeautomation,mcp-playwright,1.9,0,6.2,-1.8599999999999999,1.714,MINIMAL,"This Playwright-based MCP implementation, created by Execute Automation, provides a bridge between language models and web browsers. It enables AI agents to perform a wide range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution. The implementation stands out by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Playwright's cross-browser support, it ensures compatibility across Chrome, Firefox, and Safari. This tool is particularly useful for AI-driven web testing, data scraping, and automated web interactions, opening up possibilities for more sophisticated AI assistants that can directly interact with web applications."
mendableai,firecrawl-mcp-server,1.9,0,7.8,-2.34,1.634,MINIMAL,"This MCP server, developed by vrknetha, integrates with FireCrawl to provide advanced web scraping capabilities. It implements tools for extracting content from JavaScript-heavy websites, supporting mobile and desktop views, handling rate limits, and outputting multiple formats including HTML, Markdown, screenshots, and raw text. The server exposes functions for single URL scraping, batch processing, and job status checking. By leveraging FireCrawl's infrastructure, this implementation enables AI assistants to easily incorporate web data into their responses. It is particularly useful for scenarios requiring structured data extraction from complex web pages, such as market research, content aggregation, or generating reports from online sources."
HEAD,cognee-mcp,1.9,0,0,-0.0,1.9,MINIMAL,"This MCP server, developed by topoteretes, provides a boilerplate framework for building AI assistants with integrated database and API capabilities. It leverages uv for dependency management and offers configurable connections to graph databases like Neo4j, vector databases like LanceDB, and relational databases. The server stands out by combining multiple database paradigms and offering easy integration with Claude AI. By connecting AI capabilities with diverse data sources, this implementation enables the creation of knowledge-aware AI systems that can reason over structured and unstructured data. It is particularly useful for building complex AI assistants that require access to heterogeneous data stores, such as enterprise knowledge bases, research tools, or data analysis platforms."
wonderwhy-er,desktopcommandermcp,1.9,0,7.8,-2.34,1.166,MINIMAL,"This MCP server implementation, developed by Eduard Ruzga, provides a terminal interface for executing commands and managing processes on the local system. Built with TypeScript and leveraging the Model Context Protocol SDK, it extends the MCP Filesystem Server to enable full system command execution, process management, and advanced file operations. The implementation stands out by combining terminal access with filesystem capabilities, allowing for seamless integration of command-line tools and file manipulation in AI workflows. It's particularly useful for developers and system administrators who need to perform complex system operations, run scripts, or manage files through AI-assisted interfaces, enabling tasks like automated system maintenance, code deployment, or data processing pipelines."
idosal,git-mcp,1.9,13,7.8,-2.34,0.8339999999999999,MINIMAL,"Transforms any GitHub project (repositories or GitHub pages) into a documentation hub. It allows AI tools like Cursor to access up-to-date documentation and code, ending hallucinations seamlessly."
justinpbarnett,unity-mcp,1.9,0,7.2,-2.16,1.684,MINIMAL,"A Unity package that enables seamless communication between Unity and Large Language Models (LLMs) like Claude Desktop via the Model Context Protocol (MCP). This server acts as a bridge, allowing Unity to send commands to and receive responses from MCP-compliant tools, empowering developers to automate workflows, manipulate assets, and control the Unity Editor programmatically."
plugins,mcp,1.9,0,0,-0.0,1.9,MINIMAL,"This Genkit MCP plugin, developed by Firebase, provides seamless integration between Genkit and the Model Context Protocol (MCP). It enables Genkit developers to both consume MCP tools, prompts, and resources as a client and expose Genkit functionality as an MCP server. The client automatically discovers and registers available MCP actions with Genkit, while the server exposes Genkit tools and prompts via MCP. Built with TypeScript, it offers flexible configuration options for connecting to MCP servers, including local process spawning and remote connections. The implementation handles parsing and coercion of MCP responses for compatibility with Genkit's structured approach. It is particularly useful for developers looking to extend Genkit's capabilities with external MCP-compatible services or expose their Genkit-based AI assistants as MCP servers."
lingodotdev,lingo.dev,1.9,0,7.0,-2.0999999999999996,1.69,MINIMAL,"Lingo.dev MCP server enables AI assistants to translate content across multiple languages through the Model Context Protocol. Built by the Lingo.dev team, it provides a 'translate' tool that leverages advanced language models to handle app localization, website content, and other text data. The implementation can be run via npx command with an API key from the Lingo.dev platform, making it accessible from various AI tools including Cursor, Claude desktop, and Cline for VS Code. This integration is particularly valuable for developers and content creators who need to translate materials without leaving their AI assistant workflow."
mrexodia,ida-pro-mcp,1.9,0,7.8,-2.34,1.666,MINIMAL,"A Python-based MCP implementation for IDA Pro, a disassembler and reverse engineering tool"
zcaceres,markdownify-mcp,1.9,0,5.6,-1.6799999999999997,1.732,MINIMAL,"This Markdownify MCP server, developed by Zach Caceres, provides a versatile solution for converting various file types and web content to Markdown format. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for transforming PDFs, images, audio files, web pages, and more into easily readable and shareable Markdown text. The implementation stands out by supporting a wide range of input formats and including specialized converters for sources like YouTube transcripts and Bing search results. It's particularly useful for content creators, researchers, and developers who need to streamline document conversion workflows, create accessible content from diverse sources, or integrate Markdown generation capabilities into AI-assisted applications."
dhravya,apple-mcp,1.9,0,6.2,-1.8599999999999999,1.714,MINIMAL,"This MCP server implementation provides a bridge to Apple's native applications, enabling AI assistants to interact with Contacts, Notes, and Messages. Developed by Dhravya Shah, it offers tools for searching and retrieving contacts, managing notes, and sending messages. The server is built using TypeScript and Bun, integrating with the Model Context Protocol SDK. It focuses on secure handling of personal data and robust error management, making it suitable for AI applications that need to automate tasks within Apple's ecosystem. The implementation is designed for easy setup within the Claude Desktop environment and is particularly useful for personal productivity and communication workflows."
makenotion,notion-mcp-server,1.9,0,6.5,-1.9500000000000002,1.7049999999999998,MINIMAL,"Notion MCP Server provides a bridge to the Notion API, enabling AI assistants to interact with Notion workspaces through the Model Context Protocol. This TypeScript implementation converts the Notion OpenAPI specification into MCP-compatible tools, handling authentication, request formatting, and file uploads. The server exposes Notion's capabilities including searching content, querying databases, and managing pages and comments, while maintaining proper error handling and response formatting. It's particularly useful for AI agents that need to retrieve, create, or modify Notion content without requiring users to write complex API interaction code."
packages,agent-toolkit,1.9,0,0,-0.0,1.9,MINIMAL,"Clerk is a JavaScript SDK for authentication and user management that provides a comprehensive set of tools for implementing secure authentication flows in web applications. This repository contains the core Clerk packages and various framework integrations (React, Next.js, Remix, Express, Fastify) along with playground examples demonstrating implementation across different environments. The SDK supports features like user sign-in/sign-up, organization management, session handling, and authorization based on features and plans, making it particularly useful for applications requiring robust identity management with minimal setup."
cloudflare,mcp-server-cloudflare,1.9,0,6.5,-1.9500000000000002,1.7049999999999998,MINIMAL,"This Cloudflare MCP Server, developed by Cloudflare, provides a powerful interface for language models to interact with Cloudflare's API. It enables AI agents to perform a wide range of Cloudflare-specific tasks including managing KV stores, R2 storage, D1 databases, and Workers. The implementation distinguishes itself by offering deep integration with Cloudflare's unique services and infrastructure. By leveraging Cloudflare's global network, it ensures high-performance and low-latency operations. This tool is particularly powerful for AI-driven cloud management, serverless computing, and edge network optimization, enabling more sophisticated AI assistants that can directly manipulate Cloudflare resources."
cyberagiinc,devdocs,1.9,0,7.8,-2.34,1.634,MINIMAL,"🎯 Perfect For
🏢 Enterprise Software Developers
Skip weeks of reading documentation and dealing with technical debt. Implement ANY technology faster by letting DevDocs handle the heavy lifting of documentation understanding.

🕸️ Web Scrapers
Pull entire contents of websites with Smart Discovery of Child URLs up to level 5. Perfect for both internal and external website documentation with intelligent crawling.

👥 Development Teams
Leverage internal documentation with built-in MCP servers and Claude integration for intelligent data querying. Transform your team's knowledge base into an actionable resource.

🚀 Indie Hackers
DevDocs + VSCode(cline) + Your Idea = Ship products fast with ANY technology. No more getting stuck in documentation hell when building your next big thing."
browserbase,mcp-server-browserbase,1.9,0,5.1,-1.53,1.553,MINIMAL,"This MCP server, developed by Browserbase, provides cloud browser automation capabilities for AI assistants like Claude. It leverages Browserbase's infrastructure along with Puppeteer and Stagehand (upcoming) to enable web interactions, data extraction, and JavaScript execution in a cloud environment. The server exposes a standardized interface for tasks such as navigating web pages, capturing screenshots, and monitoring console logs. By bridging AI capabilities with web automation, this implementation facilitates use cases like web scraping, automated testing, and dynamic content analysis. It is particularly useful for developers and researchers who need programmatic control over web browsers through natural language commands, enabling complex web-based workflows and data collection tasks."
packages,mcp-server-postgrest,1.9,0,0,-0.0,1.9,MINIMAL,"This MCP server collection, developed by Supabase, provides tools for connecting Large Language Models to Supabase databases and services. Built with TypeScript and leveraging the Model Context Protocol SDK, it currently offers a PostgREST server for querying Supabase projects via natural language, with plans to add a Management API for schema and DDL operations. The implementation stands out by enabling direct LLM interaction with Supabase's PostgreSQL databases through a standardized protocol. It's particularly useful for developers looking to integrate AI-powered database querying and management into their applications, allowing for natural language data exploration and manipulation in Supabase projects."
supabase-community,supabase-mcp,1.9,0,7.8,-2.34,1.666,MINIMAL,"Supabase MCP Server connects AI assistants directly to Supabase projects, enabling database operations, project management, and configuration through natural language. The implementation provides tools for managing tables, executing SQL queries, applying migrations, and handling project configurations like API keys and TypeScript type generation. It also includes experimental features for database branching that allow creating development environments, merging changes, and managing migrations across branches. Built with TypeScript using the Model Context Protocol SDK, the server authenticates with Supabase's Management API using personal access tokens and is designed for developers who want to integrate database operations into their AI assistant workflows."
sendaifun,solana-agent-kit,1.9,0,7.8,-2.34,1.666,MINIMAL,"Solana Agent Kit MCP server connects AI agents to Solana blockchain protocols, enabling onchain interactions through a comprehensive set of tools. Developed by SendAI, it provides capabilities for token deployment, NFT collection creation, DeFi operations, and cross-chain transfers via Wormhole. The implementation supports both chat and autonomous modes, with a flexible architecture that allows developers to add custom tools. The server can be configured with various API keys and wallet credentials, making it ideal for AI workflows requiring direct blockchain interaction without leaving the conversation interface."
exa-labs,exa-mcp-server,1.9,0,6.9,-2.0700000000000003,1.607,MINIMAL,"This Exa MCP server, developed by exa-labs, provides an interface for AI assistants like Claude to perform web searches using Exa's search API. It enables AI agents to query Exa and retrieve structured search results including titles, URLs, and content snippets through a controlled MCP server. Built in TypeScript, the implementation handles API authentication, rate limiting, and error cases. By leveraging Exa's powerful search capabilities, this server allows AI systems to access real-time web information in a safe and controlled manner. It is particularly useful for AI assistants needing to conduct research, answer questions based on current information, or provide relevant search results to users while maintaining a clear separation between the AI model and external data sources."
sooperset,mcp-atlassian,1.9,0,7.8,-2.34,1.634,MINIMAL,"This MCP server, developed by sooperset, enables AI assistants to interact with Atlassian Cloud products, specifically Confluence and Jira. It provides tools for searching and reading Confluence spaces/pages, retrieving page comments, searching Jira issues, and accessing project metadata. Built in Python, the implementation exposes Atlassian's collaborative features via a standardized MCP interface, allowing AI models to analyze and manipulate content within Atlassian workspaces. By bridging AI capabilities with Atlassian's project management and documentation platforms, this server enhances an AI assistant's ability to support software development workflows, project tracking, and knowledge management. It is particularly useful for teams already using Atlassian tools who want to leverage AI for task automation, content analysis, and workflow optimization."
ppl-ai,modelcontextprotocol,1.9,0,7.6,-2.2800000000000002,1.628,MINIMAL,"An MCP server implementation that integrates the Sonar API to provide Claude with unparalleled real-time, web-wide research."
blazickjp,arxiv-mcp-server,1.6,0,6.4,-1.92,1.292,MINIMAL,"This ArXiv MCP server, developed by blazickjp, provides an interface for AI assistants to search and analyze academic papers from the arXiv repository. It enables precise querying with filters like date ranges and categories, as well as full-text access to papers. Built with an asynchronous architecture in Python, the implementation handles paper downloads, local caching, and exposes a standardized MCP interface. By bridging AI models and academic literature, this server allows AI systems to engage deeply with scientific research in fields like computer science and physics. It is particularly useful for AI assistants needing to conduct literature reviews, answer technical questions, or provide summaries of recent developments in specific research areas."
chatmcp,mcp-server-chatsum,1.6,0,5.9,-1.7700000000000002,0.923,MINIMAL,"This MCP server, developed by idoubi, enables AI assistants to query and summarize chat messages stored in a local database. Built in TypeScript, it integrates with Claude Desktop and provides a standardized interface for retrieving conversation history. The implementation stands out by offering flexible querying options and the ability to generate summaries based on custom prompts. By bridging AI models with chat logs, this server allows AI systems to analyze conversation patterns, extract insights, and provide context-aware responses. It is particularly useful for personal knowledge management, conversation analysis, and building more contextually-aware AI assistants that can reference and learn from past interactions."
smithery-ai,mcp-obsidian,1.6,0,6.1,-1.83,1.417,MINIMAL,"This Obsidian MCP connector, developed by calclavia, enables AI assistants to read and search Markdown notes in Obsidian vaults through Claude Desktop. It provides seamless integration between Claude and personal knowledge bases stored in Obsidian. Built in TypeScript and leveraging npx for easy installation, the connector allows Claude to list files, retrieve content, and perform searches across Obsidian documents. By bridging AI models with Obsidian's note-taking system, this implementation enhances Claude's ability to analyze personal knowledge, assist with note organization, and augment information retrieval from Obsidian vaults. It is particularly useful for users seeking AI-powered knowledge management, research assistance, and collaborative note-taking within their Obsidian environments."
googleapis,genai-toolbox,1.6,0,7.2,-2.16,0.8840000000000001,MINIMAL,"Toolbox is an MCP server implementation that enables AI assistants to interact with various database systems including PostgreSQL, MySQL, SQL Server, Neo4j, Dgraph, and Spanner. Developed by Google's SenseAI team, it provides a configurable interface for executing pre-defined queries against databases through a YAML-based configuration system. The implementation features telemetry integration, authentication services, and support for both HTTP and SSE transport protocols. Toolbox is particularly useful for AI applications that need to retrieve or manipulate data from multiple database types without exposing direct database access, making it ideal for creating secure, controlled database interfaces for generative AI applications."
markuspfundstein,mcp-obsidian,1.6,0,7.1,-2.13,1.3130000000000002,MINIMAL,"This Obsidian MCP server, developed by MarkusPfundstein, enables AI assistants to interact with Obsidian vaults through the Local REST API plugin. It provides tools for listing files, retrieving content, searching across documents, and modifying notes. Built in Python, the implementation handles API authentication and exposes Obsidian's functionality via a standardized MCP interface. By bridging AI models and Obsidian's note-taking system, this server allows AI systems to analyze personal knowledge bases, assist with note organization, and augment information retrieval. It is particularly useful for AI assistants supporting knowledge management, research workflows, and collaborative note-taking within Obsidian vaults."
stripe,agent-toolkit,1.6,0,7.4,-2.2199999999999998,1.322,MINIMAL,"This MCP server implementation provides a bridge to Stripe's API, enabling AI agents to perform various payment and financial operations. Developed by Stripe, it offers tools for managing customers, products, prices, payment links, invoices, and refunds. The server is built using both Python and TypeScript, integrating with popular agent frameworks like LangChain, CrewAI, and Vercel's AI SDK. It focuses on secure API key management and supports connected accounts. The implementation is particularly useful for AI applications that need to automate e-commerce tasks, handle billing operations, or integrate payment processing into their workflows."
suekou,mcp-notion-server,1.6,0,7.2,-2.16,1.316,MINIMAL,"This Notion MCP server, developed by suekou, enables AI assistants to interact with Notion workspaces through the Notion API. It provides tools for manipulating blocks, pages, and databases, including creating, retrieving, updating, and deleting content. Built in JavaScript, the implementation exposes Notion's powerful organizational features via a standardized MCP interface. By bridging AI models with Notion's collaborative workspace, this server enhances Claude's ability to manage information, assist with project organization, and augment knowledge management within Notion. It is particularly useful for users seeking AI-powered productivity enhancements, content creation, and data analysis within their existing Notion workspaces."
syedazharmbnr1,claude-chatgpt-mcp,1.6,0,7.0,-2.0999999999999996,1.3900000000000001,MINIMAL,"This MCP server implementation provides a bridge between Claude and the ChatGPT desktop app on macOS. Developed by Syed Azhar, it utilizes AppleScript to interact with the ChatGPT interface, allowing Claude to send prompts, retrieve responses, and manage conversations. The tool is designed for use cases where integration between different AI assistants is needed, such as comparing outputs or leveraging ChatGPT's capabilities within Claude's workflow."
elevenlabs,elevenlabs-mcp,1.6,0,7.4,-2.2199999999999998,1.322,MINIMAL,"An ElevenLabs MCP server implementation that provides AI assistants with access to ElevenLabs' text-to-speech, voice cloning, and conversation AI capabilities. Developed by the ElevenLabs team, this server enables voice synthesis with customizable parameters, audio file handling with similarity detection, and creation of conversational agents with specific voice profiles. The implementation includes utilities for environment configuration, output path management, and Claude Desktop integration, making it particularly useful for applications requiring high-quality voice generation, audio processing, and interactive voice-based AI experiences."
jae-jae,fetcher-mcp,1.6,0,7.5,-2.25,1.375,MINIMAL,"Fetcher MCP is a server that enables AI assistants to retrieve web page content using Playwright's headless browser capabilities. It excels at handling dynamic JavaScript-heavy websites by executing client-side code, and includes intelligent content extraction through Mozilla's Readability algorithm to remove ads and non-essential elements. The implementation offers both single URL and batch fetching tools, supports HTML or Markdown output formats, and automatically blocks unnecessary resources like images and stylesheets to improve performance. This tool is particularly valuable for research workflows, content analysis, and information gathering that requires processing of modern web applications."
grafana,mcp-grafana,1.6,0,7.6,-2.2800000000000002,1.328,MINIMAL,"Grafana MCP server provides access to Grafana instances and their surrounding ecosystem through the Model Context Protocol. Developed by Grafana Labs' Machine Learning team, it enables searching dashboards, fetching datasource information, querying Prometheus metrics, and managing incidents in Grafana Incident. The server supports both stdio and Server-Sent Events (SSE) transport modes, can be run locally or deployed as a Docker container, and authenticates using Grafana service account tokens. This implementation is particularly valuable for workflows requiring monitoring data analysis, metric exploration, or incident management directly within AI assistant conversations."
basicmachines-co,basic-memory,1.6,16,7.8,-2.34,0.23399999999999999,MINIMAL,"How It Works
Interact naturally with AIs to build and access your knowledge base.

1
Build on Past Knowledge
AI references previous notes in future conversations.

""Let's continue our conversation about coffee brewing.""
AI retrieves relevant notes rather than loading everything.

2
Chat Naturally
Have normal conversations with AI assistants like Claude.

""Find information about pour over coffee methods.""
AI searches your knowledge base and summarizes findings.

3
Save Knowledge
Ask Claude to create a note about your conversation.

""Create a note about coffee brewing methods.""
AI creates a structured note with observations and relations."
jetbrains,mcp-jetbrains,1.6,0,7.5,-2.25,1.375,MINIMAL,"This MCP proxy server, developed by JetBrains, enables AI assistants like Claude to interact with JetBrains IDEs. Built with Node.js, it acts as a bridge between Claude Desktop and JetBrains IDE plugins, allowing AI models to access IDE functionality and project data. The implementation stands out by providing deep integration with JetBrains' powerful development environments, supporting multiple concurrent IDE instances. By connecting AI capabilities with professional coding tools, this server enables AI systems to assist in code analysis, refactoring, and development tasks. It is particularly useful for scenarios like code reviews, bug detection, and building AI coding assistants that can understand and contribute to software projects within JetBrains IDEs."
janwilmake,openapi-mcp-server,1.6,0,6.1,-1.83,1.417,MINIMAL,"This MCP server, developed by snaggle-ai, enables AI assistants like Claude to interact with any API that has an OpenAPI v3.1 specification. It automatically converts API endpoints into Claude tools, allowing the AI to discover available endpoints, understand required parameters, make API calls, and handle responses. The server integrates seamlessly with Claude Desktop, facilitating natural language interactions with both local and remote APIs. By bridging AI capabilities with existing API infrastructures, this implementation empowers more dynamic and context-aware conversations. It is particularly useful for scenarios like API testing, prototyping integrations, or exploring API capabilities through natural language in AI-assisted development, documentation, and API interaction tasks."
qdrant,mcp-server-qdrant,1.3,0,7.8,-2.34,1.034,MINIMAL,"This MCP server, developed by Qdrant, provides a semantic memory layer on top of the Qdrant vector database. Built for use with Claude Desktop, it offers tools for storing and retrieving memories using Qdrant's vector search capabilities. The server leverages FastEmbed models for encoding memories, with the default being 'sentence-transformers/all-MiniLM-L6-v2'. Key features include automatic collection creation, configurable embedding models, and support for both command-line and environment variable configuration. By integrating AI capabilities with Qdrant's efficient vector search, this implementation enhances semantic memory retrieval for AI assistants. It is particularly useful for scenarios requiring persistent memory storage, semantic similarity search, and scalable vector operations in AI applications."
flux159,mcp-server-kubernetes,1.3,0,7.6,-2.2800000000000002,1.072,MINIMAL,"This MCP server, developed by Flux159, enables AI assistants like Claude to interact with Kubernetes clusters. It provides tools for listing pods, services, deployments, and namespaces, as well as creating and deleting pods. The server integrates with kubectl and automatically connects to the current context, allowing seamless management of Kubernetes resources through natural language commands. By bridging AI capabilities with Kubernetes operations, this implementation facilitates easier cluster management and troubleshooting. It is particularly useful for DevOps teams looking to streamline their Kubernetes workflows, developers needing quick access to cluster information, or system administrators performing routine cluster maintenance tasks through AI-assisted interactions."
tuananh,hyper-mcp,1.3,0,7.3,-2.19,1.081,MINIMAL,extensible MCP server that you can enhance with plugins written in any WebAssembly-compatible programming language. Think of it as a modular toolkit where each plugin adds new functionality without the overhead of running multiple MCP servers
saik0s,mcp-browser-use,1.3,0,7.6,-2.2800000000000002,1.028,MINIMAL,"This MCP server for browser-use, developed by an unnamed author, provides a robust interface for AI assistants to interact with web browsers and perform automated web tasks. Built with Python and leveraging libraries like browser-use, FastAPI, and LangChain, it offers tools for web scraping, form filling, and general web automation. The implementation focuses on abstracting away browser complexities, making it accessible for AI models to navigate websites, extract data, and interact with web applications. It's particularly useful for tasks like data collection, web testing, or integrating web-based workflows into AI systems, allowing assistants to interact with the web without requiring deep knowledge of browser automation techniques."
jjsantos01,qgis_mcp,1.3,0,7.2,-2.16,1.084,MINIMAL,"QGIS MCP provides a bridge between AI assistants and QGIS (Quantum GIS) through a socket-based server-client architecture. The implementation consists of a QGIS plugin that runs a server inside the GIS application, exposing geospatial capabilities like adding layers, executing processing algorithms, and rendering maps, while an MCP server component translates these capabilities into tools that can be called by AI assistants. This enables AI systems to perform complex GIS operations such as loading projects, manipulating vector and raster data, and generating map visualizations without requiring direct QGIS knowledge."
codergamester,mcp-unity,1.3,6,7.5,-2.25,0.925,MINIMAL,"MCP Unity currently provides the following tools:

execute_menu_item: Executes Unity menu items (functions tagged with the MenuItem attribute)
select_object: Selects game objects in the Unity hierarchy
package_manager: Installs, removes, and updates packages in the Unity Package Manager
run_tests: Runs tests using the Unity Test Runner
notify_message: Displays messages in the Unity Editor
MCP Unity currently provides the following resources:

get_menu_items: Retrieves a list of all available menu items in the Unity Editor to facilitate execute_menu_item tool
get_hierarchy: Retrieves a list of all game objects in the Unity hierarchy
get_console_logs: Retrieves a list of all logs from the Unity console
get_packages: Retrieves information about installed and available packages from the Unity Package Manager
get_assets: Retrieves information about assets in the Unity Asset Database"
loopwork-ai,imcp,1.3,0,6.8,-2.04,1.096,MINIMAL,"iMCP is a macOS menu bar application that enables AI assistants to access system services including Calendar, Contacts, Messages, Reminders, Location, and Weather. Developed by Loopwork, it creates a secure bridge between Claude Desktop and macOS native APIs through a Bonjour-advertised TCP server that requires explicit user permission for each connection. The app features a simple toggle interface for enabling specific services and includes integration with Claude Desktop for easy configuration. It's particularly useful for AI assistants that need to perform tasks like checking schedules, finding contacts, sending reminders, or getting weather information without requiring users to manually copy information."
client,mcp_server,1.3,0,0,-0.0,1.3,MINIMAL,"This MCP implementation, developed by rusiaaman, exposes the wcgw library's functionality via MCP. wcgw enables access the local shell and file system for task automation and code execution. It integrates with Docker to provide full control over a Linux environment, including mouse and keyboard input. It allows the AI to interact directly with the user's system, execute commands, manipulate files, and even control a virtualized desktop. The implementation is particularly useful for developers and power users who want to leverage LLM intelligence for system automation, code development, and complex multi-step tasks that require direct interaction with the operating system and applications."
mxiris-reverse-engineering,ida-mcp-server,1.3,0,7.0,-2.0999999999999996,0.5900000000000001,MINIMAL,"A Model Context Protocol server for programmatically reading and searching IDA databases via Large Language Models. Developed by Mx-Iris, this early-stage project aims to provide tools for reverse engineering and binary analysis automation, with a focus on enabling LLM interaction with IDA Pro's database. The server is currently under active development and will eventually support a more streamlined workflow for analyzing binary files."
designcomputer,mysql_mcp_server,1.3,0,7.6,-2.2800000000000002,1.028,MINIMAL,"This MySQL MCP server, developed by designcomputer, provides a secure interface for language models to interact with MySQL databases. It enables AI agents to list tables, read data, and execute SQL queries through a controlled interface. The server integrates with Claude Desktop and can be run standalone, offering flexibility in deployment. By focusing on read-only access and using environment variables for configuration, it maintains data security while allowing AI systems to explore and analyze relational data. This implementation is particularly useful for AI assistants designed to perform database schema exploration, generate SQL queries, or provide data-driven insights using MySQL as the backend."
rohitg00,kubectl-mcp-server,1.3,0,7.8,-2.34,1.066,MINIMAL,"kubectl-mcp-tool is an MCP server that enables natural language interaction with Kubernetes clusters, allowing AI assistants like Cursor, Claude, and WindSurf to perform kubectl operations through conversational commands. Developed by Rohit Ghumare under the MIT license, it features a minimal wrapper approach for better compatibility across different MCP SDK versions, supports multiple transport protocols (stdio and SSE), and includes specialized implementations for various AI assistants. The tool translates natural language queries into kubectl commands, handles resource management operations, and provides diagnostic capabilities, making it particularly valuable for developers who want to manage their Kubernetes resources through AI assistants without memorizing complex kubectl syntax."
co-browser,browser-use-mcp-server,1.3,0,7.1,-2.13,1.087,MINIMAL,"Browser Use MCP Server provides an async browser automation server using OpenAI's GPT-4o model. It enables remote browser tasks through a flexible MCP interface, allowing AI agents to navigate websites, perform actions, and extract content with configurable browser contexts and detailed task tracking."
mobile-next,mobile-mcp,1.3,0,7.0,-2.0999999999999996,1.09,MINIMAL,"Mobile MCP Server provides tools for controlling and interacting with mobile devices through the Model Context Protocol. Built with TypeScript, it offers functionality for both Android and iOS platforms, enabling AI assistants to take screenshots, list installed apps, launch applications, click on screen elements, type text, and navigate through device interfaces. The server implements various device-specific commands through native toolchains (adb for Android and xcrun for iOS simulators), making it particularly valuable for automated mobile app testing, UI navigation, and demonstration scenarios where direct device control is needed."
operative-sh,web-eval-agent,1.3,0,5.9,-1.7700000000000002,0.9770000000000001,MINIMAL,"Web-QA-Agent is an MCP server implementation that enables AI assistants to evaluate web application user experiences through automated browser interactions. Built by Operative-Sh, it leverages Playwright for browser automation and integrates with Claude AI models to perform UX/UI analysis tasks. The server provides a specialized tool for assessing web interfaces, capturing console logs and network requests during evaluation, and generating detailed reports on usability issues and recommendations. This implementation is particularly valuable for UX researchers, web developers, and product teams who need AI-powered analysis of web application interfaces without manual testing."
ckreiling,mcp-server-docker,1.3,0,6.7,-2.0100000000000002,1.099,MINIMAL,"This MCP server, developed by ckreiling, provides seamless integration with Docker containers. It implements a Python-based interface for managing containers, images, networks, and volumes through the Docker SDK. The server exposes tools for common Docker operations like creating, running, and removing containers, as well as fetching logs and stats. By leveraging natural language processing, it enables AI assistants to easily compose and manage Docker deployments through conversational interactions. The implementation is particularly useful for scenarios requiring dynamic container orchestration, such as deploying microservices, setting up development environments, or managing containerized applications through natural language commands to an AI assistant. The server focuses on core Docker functionality while prioritizing safety by restricting access to sensitive options."
langchain-ai,mcpdoc,1.3,0,7.1,-2.13,1.087,MINIMAL,"MCPDoc is a server that provides documentation access from llms.txt files through the Model Control Protocol. It allows AI assistants to query documentation sources like LangGraph by fetching and parsing llms.txt files from specified URLs. The implementation supports multiple configuration methods including YAML, JSON, or direct URL specification, and offers features like HTTP redirect following and customizable timeouts. Built for integration with Claude Code and other MCP-compatible assistants, MCPDoc enables seamless documentation lookup during coding sessions without requiring users to leave their conversation interface."
snagasuri,deebo-prototype,1.3,41,7.4,-2.2199999999999998,-3.0780000000000003,HIGH,"Deebo transforms debugging from a linear process into an autonomous investigation system where a coordinator agent analyzes errors, generates diverse hypotheses, and deploys specialized agents to test each potential cause in isolated environments simultaneously. The system maintains a persistent memory bank that evolves with each debugging session, allowing it to recognize patterns across bugs, avoid redundant approaches, and become increasingly effective with your specific codebase over time. When a solution emerges with high confidence, Deebo delivers not only the fix but comprehensive documentation of the investigation process, enabling developers to understand both the remedy and underlying causes."
coding-solo,godot-mcp,1.3,0,7.4,-2.2199999999999998,1.078,MINIMAL,"A Model Context Protocol (MCP) implementation for the Godot game engine, allowing game developers to integrate AI capabilities into their Godot projects."
resend,mcp-send-email,1.3,0,7.0,-2.0999999999999996,1.01,MINIMAL,"This MCP server implementation provides email sending functionality using the Resend API. It exposes a 'send-email' tool that allows for sending plain text emails with options for scheduling delivery and configuring reply-to addresses. The server accepts command-line arguments or environment variables for API keys and sender information, making it flexible for different deployment scenarios. Ideal for applications that need to integrate email notifications or communications within AI-assisted workflows."
bytebase,dbhub,1.3,0,6.9,-2.0700000000000003,1.093,MINIMAL,"DBHub is a universal database gateway implementing the MCP server interface, allowing AI assistants to connect to and explore different databases like PostgreSQL, MySQL, SQLite, and DuckDB. Developed by Bytebase, it provides capabilities for browsing tables, viewing schema information, running read-only SQL queries, and includes safety checks to prevent dangerous operations. The implementation is containerized with Docker for easy deployment and supports both stdio transport for direct integration with tools like Claude Desktop and SSE transport for browser and network clients, making it particularly valuable for AI assistants that need to access and analyze data stored in various database systems."
jlcases,paelladoc,1.3,11,7.2,-2.16,-0.08399999999999985,MEDIUM,"PAELLADOC is a documentation-focused MCP server implementation that enables AI assistants to generate structured documentation for software projects. Built with a hexagonal architecture in Python, it provides tools for code analysis, template management, and documentation generation through commands like PAELLA (project initialization), CONTINUE (resume work), and GENERATE_DOC (create documentation from code). The system maintains project memory in SQLite, supports various programming styles and Git workflows, and includes a comprehensive template library organized by MECE principles. Particularly valuable for teams seeking consistent documentation practices across different project types, from frontend React applications to Chrome extensions."
minhalvp,android-mcp-server,1.3,0,6.6,-1.9799999999999998,1.102,MINIMAL,"This MCP server implementation provides a bridge to control and interact with Android devices using ADB (Android Debug Bridge). It offers tools for retrieving installed packages, executing ADB commands, capturing screenshots, and analyzing UI layouts. Developed as an open-source project, it integrates with the MCP CLI and uses libraries like adb-shell and Pillow for device communication and image processing. The server is designed for use cases requiring automated Android device testing, app analysis, or remote device management."
markuspfundstein,mcp-gsuite,1.3,3,7.8,-2.34,0.8660000000000001,MINIMAL,"This Google Workspace (G Suite) MCP implementation, developed by MarkusPfundstein, provides an interface for AI agents to interact with Gmail and Google Calendar. It enables a wide range of operations including email management, calendar event handling, and multi-account support. This tool is helpful for AI-driven email and calendar management tasks, enabling sophisticated AI assistants that can directly manipulate and analyze Google Workspace data."
tavily-ai,tavily-mcp,1.3,0,7.8,-2.34,1.034,MINIMAL,"This MCP server, developed by Tavily, provides advanced web search capabilities through the Tavily API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers real-time search and data extraction functionalities. The implementation focuses on delivering high-quality, AI-enhanced search results and web content extraction. It's particularly useful for AI assistants and applications requiring up-to-date web information, enabling use cases such as research automation, content aggregation, and fact-checking without directly interacting with the Tavily API complexities."
zcaceres,fetch-mcp,1.3,0,6.6,-1.9799999999999998,1.102,MINIMAL,"This fetch MCP server, developed by Zach Caceres, provides AI assistants with a standardized interface for retrieving web content in various formats. Built using TypeScript and the Model Context Protocol SDK, it offers tools for fetching HTML, JSON, plain text, and Markdown from URLs. The server handles custom headers, HTML parsing, and Markdown conversion, abstracting away the complexities of web scraping and content transformation. It's particularly valuable for AI systems that need to gather and process online information, enabling use cases such as content aggregation, web research, data extraction, and automated summarization of web pages."
benborla,mcp-server-mysql,1.3,0,7.8,-2.34,1.066,MINIMAL,"This MCP server, developed by Ben Borla, provides read-only access to MySQL databases for large language models. Built in TypeScript, it integrates with Claude Desktop and enables AI assistants to inspect database schemas and execute read-only SQL queries. The implementation stands out by focusing on security through read-only transactions and offering flexible database connection options. By bridging AI models with relational databases, this server allows AI systems to analyze data patterns, extract insights, and provide data-driven responses. It is particularly useful for scenarios like data exploration, report generation, and building AI assistants that can leverage structured data from MySQL databases while maintaining data integrity."
jasonjmcghee,claude-debugs-for-you,1.3,0,6.4,-1.92,1.108,MINIMAL,"This MCP server and VS Code extension, created by Jason McGhee during a 2-hour hackathon, enables AI models like Claude to interactively debug code and evaluate expressions. Built as a language-agnostic tool, it integrates with VS Code's debugging capabilities and launch configurations. The implementation allows AI assistants to set breakpoints, step through code, and inspect variables in real-time, providing a unique approach to AI-assisted debugging. It's particularly useful for developers seeking AI guidance in troubleshooting complex code issues, understanding program flow, or learning debugging techniques, without requiring the AI to have direct access to the development environment."
reading-plus-ai,mcp-server-data-exploration,1.3,0,7.0,-2.0999999999999996,1.09,MINIMAL,"This MCP server, developed by ReadingPlus.AI LLC, provides AI assistants with powerful data exploration capabilities for CSV datasets. Built for use with Claude Desktop, it offers tools for loading CSV files, executing Python scripts, and generating insightful visualizations. The server leverages pandas and matplotlib to perform data analysis and create informative charts. By bridging AI models with data science libraries, this implementation enables AI systems to conduct exploratory data analysis, uncover patterns, and derive actionable insights from large datasets. It is particularly useful for scenarios requiring in-depth analysis of tabular data, trend identification, and data-driven decision making across various domains like real estate, weather patterns, or any field with structured CSV data."
kleneway,awesome-cursor-mpc-server,1.3,0,7.0,-2.0999999999999996,1.01,MINIMAL,"This MCP server, developed by kleneway, provides three Cursor Tools: Screenshot, Architect, and Code Review. Built with TypeScript and leveraging the Model Context Protocol SDK, OpenAI, and Puppeteer, it enables AI assistants to capture screenshots, analyze web page structures, and review code. The implementation focuses on automating visual and code-related tasks, making it easier to incorporate these capabilities into AI workflows. It's particularly useful for developers and QA teams who want to streamline web testing, UI analysis, and code review processes, enabling use cases such as automated UI testing, web scraping, and AI-assisted code quality checks without manual intervention."
ferrislucas,iterm-mcp,1.3,0,7.2,-2.16,1.084,MINIMAL,"iterm-mcp, created by Ferris Lucas, is a Model Context Protocol server that provides direct access to the currently active tab in iTerm. It enables seamless execution of shell commands within the active iTerm session, bridging the gap between AI assistants and terminal operations. This implementation stands out by focusing specifically on iTerm integration, making it particularly useful for developers and system administrators who frequently work in terminal environments. It simplifies workflow automation, remote system management, and interactive scripting tasks by allowing AI systems to directly interact with the user's terminal session. The server is built with TypeScript, ensuring type safety and easy integration with other JavaScript-based tools and environments."
minimax-ai,minimax-mcp,1.3,0,7.0,-2.0999999999999996,1.01,MINIMAL,"MiniMax MCP is a server implementation that provides AI assistants with access to MiniMax's text-to-speech, voice cloning, and video generation capabilities. Developed by Roy Wu at MiniMax, this Python-based server handles authentication with the MiniMax API, manages file operations, and provides tools for audio playback and file conversion. The implementation includes robust error handling, fuzzy filename matching, and environment variable configuration, making it particularly useful for applications requiring high-quality voice synthesis and media generation from AI interactions."
jerhadf,linear-mcp-server,1.3,0,7.2,-2.16,1.016,MINIMAL,"This MCP server, developed by jerhadf, provides seamless integration with Linear's issue tracking system for AI assistants. It offers tools for creating, updating, searching, and commenting on Linear issues through natural language interactions. The server leverages Linear's GraphQL API, enabling AI models to perform operations like creating high-priority bugs, finding in-progress tasks, and analyzing team workloads. Key features include flexible issue filtering, user-specific views, and support for markdown in descriptions and comments. By bridging AI capabilities with Linear's project management features, this implementation enhances issue tracking, task prioritization, and team collaboration through natural language. It is particularly useful for scenarios requiring dynamic project management, AI-assisted bug reporting, and automated task organization in software development workflows."
gojue,moling,1.3,0,6.6,-1.9799999999999998,1.102,MINIMAL,"MoLing is an MCP server implementation that enables AI assistants to interact with local system resources through a secure, configurable interface. Developed by CFC4N, it provides services for browser automation (using ChromeDP), file system operations (with strict path validation), and command execution (with allowlist filtering), making it particularly valuable for AI assistants like Claude that need controlled access to local resources. The server supports both stdio and SSE transport methods, includes client configuration tools for popular MCP clients (Claude Desktop, VSCode extensions), and implements robust security measures to prevent unauthorized access to system resources."
joshuayoes,ios-simulator-mcp,1.3,0,6.9,-2.0700000000000003,1.093,MINIMAL,"iOS Simulator MCP Tool provides a bridge between Claude and iOS simulators, enabling interaction with virtual iOS devices through a set of specialized tools. Built by Joshua Yoes, it leverages Facebook's IDB tool to allow users to get information about simulators, control UI interactions (tapping, swiping, typing), and inspect UI elements on screen. The implementation is packaged as an NPM module that can be easily integrated with Cursor via MCP configuration, making it valuable for developers who need to test, debug, or demonstrate iOS applications without manually operating the simulator."
centralmind,gateway,1.3,0,7.4,-2.2199999999999998,1.078,MINIMAL,"Gateway is a database connectivity server that enables AI assistants to interact with multiple database systems through a unified interface. It supports various database engines including PostgreSQL, MySQL, SQLite, MongoDB, Snowflake, and others, while providing advanced features like API key authentication, OAuth integration, PII data protection, and OpenTelemetry monitoring. The server can operate in multiple modes (REST API, MCP SSE, or MCP stdio) and includes plugins for caching, row-level security, and data anonymization, making it particularly useful for creating secure data access layers for AI applications without exposing raw database credentials."
mcp-servers,mcp-server-bing-search,1.3,0,0,-0.0,1.3,MINIMAL,
mcp-servers,mcp-server-open-deep-research,1.3,0,0,-0.0,1.3,MINIMAL,"This is a Model Context Protocol (MCP) server that wraps the HuggingFace Open Deep Research project, built on their smolagents library, making the project available for use with MCP clients, such as AI assistants.

This is an early work-in-progress, has limited testing, and requires access to API's that will be replaced in the near future. For now, the following API keys are required to be set in the environment or in a .env file (see .env.example):

OpenAI API Key: https://platform.openai.com/
HuggingFace API Key: https://huggingface.co/
SERP API Key: https://serpapi.com/"
strowk,mcp-k8s-go,1.3,0,7.3,-2.19,1.081,MINIMAL,"This Kubernetes MCP implementation, developed by strowk, provides a versatile interface for language models to interact with Kubernetes clusters. It enables AI agents to perform essential Kubernetes operations such as listing contexts, pods, and events, as well as retrieving pod logs across different namespaces and contexts. The implementation distinguishes itself by offering a dual-purpose design - functioning both as an MCP server and a library for building custom Kubernetes resource servers. By leveraging kubeconfig configurations, it ensures seamless integration with existing Kubernetes setups. This tool is particularly powerful for AI-driven Kubernetes management, debugging, and monitoring tasks, enabling more sophisticated AI assistants that can directly interact with and analyze Kubernetes environments. Its integration with Claude Desktop and straightforward installation process make it easily accessible for developers and DevOps professionals working on advanced AI projects involving Kubernetes automation and management."
mcp-servers,mcp-server-giphy,1.3,0,0,-0.0,1.3,MINIMAL,"Search and Retrieve: Uses the GIPHY API to search for images based on a provided search term.
(Future) Sampling: Employs the MCP ""sampling"" feature to request the assistant to choose the most appropriate image for the context.
Integration: The selected GIPHY image and its metadata are returned to the original assistant tool call, enabling it to be included in assistant responses to users."
mcp-servers,mcp-server-word,1.3,0,0,-0.0,1.3,MINIMAL,"MCP Server for Interaction with Office Apps
This is a Model Context Protocol (MCP) server project.

Warning: Be VERY careful with open Word or PowerPoint apps. Your content may be unexpectedly modified or deleted.

"
mcp-servers,mcp-server-vscode,1.3,0,0,-0.0,1.3,MINIMAL,"The VSCode MCP Server is a VSCode extension that acts as a Model Context Protocol (MCP) server integrated directly within VSCode. Its primary purpose is to expose a coding diagnostic tool—namely, the code_checker—which aggregates diagnostic messages (similar to those displayed in VSCode’s Problems panel) and makes them accessible to an external AI assistant via Server-Sent Events (SSE). This allows your assistant to invoke MCP methods and retrieve timely diagnostic information from your workspace."
stevenstavrakis,obsidian-mcp,1.3,0,7.1,-2.13,1.087,MINIMAL,"This Obsidian MCP server, developed by Steven Stavrakis, enables AI assistants to interact with Obsidian vaults, providing tools for reading, creating, editing, and managing notes and tags. It integrates with the Model Context Protocol SDK and uses TypeScript for type safety and modularity. The implementation includes features like note creation, content searching, and tag management, making it suitable for users who want to incorporate AI assistance into their knowledge management workflow. It's particularly useful for automating note-taking tasks, organizing information, and enhancing productivity within Obsidian vaults."
neo4j-contrib,mcp-neo4j,1.3,0,4.5,-1.35,1.165,MINIMAL,"This Neo4j MCP server, developed by neo4j-contrib, enables AI assistants to interact with Neo4j graph databases using natural language. It provides tools for converting natural language to Cypher queries, storing knowledge graph memories in Neo4j, and offering a file-based alternative for memory storage. Built for use with Claude Desktop and other MCP clients, it leverages Neo4j's graph capabilities to enhance AI interactions with structured data. The server allows AI systems to query, analyze, and manipulate graph data through a standardized MCP interface. It is particularly useful for scenarios requiring graph-based knowledge representation, complex relationship analysis, and persistent memory storage in AI applications working with Neo4j databases."
freestylefly,mcp-server-weread,1.3,0,4.8,-1.44,1.1560000000000001,MINIMAL,"mcp-server-weread is a TypeScript implementation that provides seamless integration between Claude Desktop and WeRead, a popular e-book platform. The server enables AI assistants to access book content, user highlights, and annotations through WeRead's API, with features for efficient cache management to improve performance. This implementation is particularly useful for research workflows, literature analysis, and knowledge management tasks where users need to reference or discuss book content with AI assistance."
varunneal,spotify-mcp,1.3,0,7.3,-2.19,0.5810000000000001,MINIMAL,"This MCP server, developed by varunneal, provides integration between MCP clients and Spotify. Built on top of the Spotify API, it enables natural language control of Spotify playback, including starting, pausing, and skipping tracks. The server offers tools for searching and retrieving information about tracks, albums, artists, and playlists, as well as managing the Spotify queue. By bridging AI capabilities with Spotify's extensive music library and playback features, this implementation enhances music discovery and control through conversational interfaces. It is particularly useful for hands-free music management, AI-assisted playlist curation, and integrating music playback into broader AI-powered applications and workflows."
quantgeekdev,docker-mcp,1.3,0,7.6,-2.2800000000000002,1.072,MINIMAL,"This Docker MCP server, developed by Alex Andru and Ali Sadykov, enables AI assistants to manage Docker containers and compose stacks through natural language. Built with Python, it provides tools for creating containers, deploying compose stacks, retrieving logs, and monitoring container status. The server leverages Docker's containerization capabilities, allowing AI models to orchestrate complex multi-container applications. Key features include seamless integration with Claude Desktop and a debugging interface for development. By bridging natural language processing with Docker operations, this implementation extends AI capabilities for tasks like application deployment, container management, and log analysis. It is particularly useful for scenarios requiring dynamic container orchestration, microservices management, and automated DevOps workflows in response to natural language instructions."
rafalwilinski,aws-mcp,1.3,0,6.4,-1.92,0.6080000000000001,MINIMAL,"This AWS MCP server, developed by an unknown author, provides a bridge between AI assistants and AWS services using the AWS SDK v2. It implements credential management, profile selection, and region configuration to enable secure access to AWS resources. The server exposes tools for executing AWS-related code, listing available credentials, and selecting profiles. By abstracting AWS SDK interactions into a standardized MCP interface, it allows AI systems to perform a wide range of AWS operations, from basic resource management to complex data analysis. This implementation is particularly useful for scenarios requiring programmatic AWS access, cloud infrastructure management, or data processing using AWS services, facilitating use cases such as automated deployments, resource monitoring, and large-scale data analytics in the AWS ecosystem."
tevonsb,homeassistant-mcp,1.3,0,7.8,-2.34,1.066,MINIMAL,"This MCP server, developed by tevonsb, enables AI assistants like Claude to interact with Home Assistant smart home systems. Built in TypeScript, it provides capabilities for querying device states, controlling smart home devices, and accessing floor plans and area information. The implementation stands out by offering a standardized interface to Home Assistant's rich ecosystem of integrations and automations. By connecting AI capabilities with smart home functionality, this server allows AI systems to understand and control various aspects of a user's living space. It is particularly useful for voice-controlled smart home assistants, automated home management scenarios, and building context-aware AI applications that can respond to and influence the physical environment."
hyperbrowserai,mcp,1.3,33,6.4,-1.92,-2.308,HIGH,"Hyperbrowser MCP Server provides web browsing capabilities for AI assistants through the Model Context Protocol, enabling scraping, structured data extraction, and web crawling. Built by hyperbrowserai, it offers tools to extract content in various formats (markdown, HTML, links, screenshots), follow links with customizable crawling parameters, and execute browser-based tasks. The server requires an API key for authentication and can be run in standard mode or with Server-Sent Events (SSE) for real-time communication, making it ideal for AI workflows requiring web content analysis, data collection, or automated browsing."
nwiizo,tfmcp,1.3,0,7.8,-2.34,1.066,MINIMAL,"tfmcp is a Rust-based MCP server for Terraform infrastructure management, providing AI-assisted tools for analyzing, initializing, planning, and applying Terraform configurations. Built by nwiizo, it enables seamless integration with Claude Desktop through a JSON-RPC 2.0 protocol, supporting operations like resource listing, configuration validation, and state management across different project environments."
evalstate,mcp-hfspace,1.3,0,7.6,-2.2800000000000002,1.028,MINIMAL,"This MCP server, developed by evalstate, enables AI assistants to seamlessly interact with Hugging Face Spaces. It provides a streamlined setup process where users simply specify desired spaces as arguments, with the server automatically configuring appropriate endpoints. Built for integration with Claude Desktop, it offers capabilities like image generation, vision tasks, text-to-speech, and more through various pre-configured spaces. The implementation handles authentication, file management, and API interactions, abstracting away complexities of working with Hugging Face. It is particularly useful for developers and researchers who want to leverage diverse AI models and tools from Hugging Face Spaces without manual configuration, enabling rapid prototyping and experimentation across a wide range of AI tasks."
mzxrai,mcp-webresearch,1.3,0,7.2,-2.16,1.084,MINIMAL,"This MCP server, developed by mzxrai, enables AI assistants like Claude to perform real-time web research. It integrates Google search, webpage content extraction, and screenshot capture capabilities. The server maintains a research session tracking visited pages, search queries, and extracted content. It is designed for seamless integration with the Claude Desktop app on macOS and Windows. By bridging AI capabilities with live web data, this implementation empowers more informed and up-to-date conversations. It is particularly useful for scenarios requiring fact-checking, gathering current information on topics, or conducting multi-source research in AI-assisted writing, analysis, and decision-making tasks."
datalayer,jupyter-mcp-server,1.3,0,6.9,-2.0700000000000003,1.093,MINIMAL,"This Jupyter MCP server implementation, developed by Datalayer, provides a bridge between the Model Context Protocol (MCP) and Jupyter environments. It leverages Jupyter's kernel and notebook model clients to enable AI assistants to interact with Jupyter notebooks, execute code, and manipulate notebook content. The server is designed to run in a Docker container, making it easily deployable and scalable. It's particularly useful for data scientists and researchers who want to integrate AI-powered tools into their Jupyter workflows, enabling automated analysis, code generation, and interactive data exploration within notebook environments."
baidu-maps,mcp,1.3,0,6.5,-1.9500000000000002,0.9950000000000001,MINIMAL,"Baidu Map MCP Server provides a standardized interface for accessing Baidu Maps API services, available in both Node.js and Python implementations. The server enables location-based operations through the Model Context Protocol, allowing applications to interact with Baidu's mapping services without directly managing API credentials or implementation details. Useful for applications requiring geocoding, route planning, location search, and other geospatial functionalities within the Baidu Maps ecosystem."
packages,python,1.3,0,0,-0.0,1.3,MINIMAL,"This MCP server, developed by E2B, enables AI assistants like Claude to execute code securely in E2B's cloud infrastructure. It bridges natural language interactions with real-time code execution in sandboxed environments, currently supporting JavaScript and Python. The server integrates with Claude Desktop and can run standalone, providing flexibility for different use cases. By combining AI capabilities with E2B's code execution platform, this implementation enhances AI assistants' ability to debug, prototype, and demonstrate coding concepts interactively. It is particularly valuable for scenarios requiring hands-on programming tutorials, automated testing, or interactive coding sessions guided by AI, allowing for more dynamic and practical coding assistance."
packages,js,1.3,0,0,-0.0,1.3,MINIMAL,"This MCP server, developed by e2b-dev, enables AI assistants like Claude to execute code using E2B's cloud infrastructure. It provides a bridge between natural language interactions and actual code execution, allowing AI models to run and test code snippets in real-time. The server leverages E2B's secure sandboxed environments to execute code in various languages, with current support for JavaScript and Python. By integrating AI capabilities with E2B's code execution platform, this implementation enhances the ability of AI assistants to debug, prototype, and demonstrate code concepts. It is particularly useful for scenarios requiring interactive coding sessions, automated testing, or hands-on programming tutorials guided by AI."
graphlit,graphlit-mcp-server,1.3,0,7.3,-2.19,1.081,MINIMAL,"This MCP server implementation provides a bridge to the Graphlit platform, enabling integration between MCP clients and Graphlit services. Developed by Unstruk Data Inc., it utilizes the Graphlit client library and Model Context Protocol SDK to facilitate communication. The server is designed for use cases requiring access to Graphlit's API capabilities, such as natural language processing tasks or data retrieval from the Graphlit ecosystem."
loopwork-ai,emcee,1.3,0,7.8,-2.34,1.034,MINIMAL,"Emcee is a CLI tool that creates Model Context Protocol servers from OpenAPI specifications, enabling AI assistants to interact with REST APIs through JSON-RPC. Developed by Loopwork AI, it processes an OpenAPI spec (from a file, URL, or stdin) and automatically generates tools that map to API endpoints, handling authentication, parameter validation, and response formatting. The tool supports various authentication methods including Bearer tokens and Basic auth, with secure 1Password integration for credential management. Emcee is particularly useful for quickly exposing existing APIs to Claude Desktop and other MCP-compatible assistants without writing custom integration code."
hyperdrive-eng,mcp-nodejs-debugger,1.3,0,6.5,-1.9500000000000002,1.105,MINIMAL,"MCP NodeJS Debugger connects Claude Code to Node.js's built-in Inspector Protocol, enabling real-time debugging capabilities directly within AI conversations. Developed by Hyperdrive, this tool allows users to set breakpoints, inspect variables, evaluate expressions, and step through code execution while a Node.js application is running in debug mode. The implementation includes continuous connection retry logic and comprehensive runtime state analysis features, making it particularly valuable for troubleshooting issues, understanding application behavior, and testing potential fixes without leaving the Claude interface."
clickhouse,mcp-clickhouse,1.3,0,6.8,-2.04,1.096,MINIMAL,"This MCP server integrates with ClickHouse, providing a bridge between MCP and ClickHouse's powerful analytical database capabilities. Developed by iskakaushik, it enables seamless interaction with ClickHouse features like executing SQL queries, listing databases, and retrieving table information through the MCP protocol. The implementation is built using Python 3.13+ and leverages libraries like FastMCP and clickhouse-connect for MCP and ClickHouse compatibility respectively. It's designed for data analysts and engineers who want to incorporate AI assistance into their ClickHouse workflows, allowing for natural language queries and exploration of large datasets while maintaining read-only safeguards."
financial-datasets,mcp-server,1.3,0,6.4,-1.92,0.992,MINIMAL,"Financial Datasets MCP Server provides AI assistants with direct access to stock market data through a set of specialized financial tools. Built by Financial Datasets, it enables Claude and other AI assistants to retrieve income statements, balance sheets, cash flow statements, current and historical stock prices, and market news via the Financial Datasets API. The server is designed to run locally using the uv package manager and can be easily integrated with Claude Desktop, making it valuable for financial analysis, investment research, and market monitoring workflows without leaving the conversation interface."
mark3labs,mcp-filesystem-server,1.3,0,6.3,-1.8900000000000001,1.111,MINIMAL,"This filesystem MCP server, developed by mark3labs, provides a secure interface for language models to interact with local filesystems. It enables AI agents to read, write, search, and manipulate files and directories through a controlled API. By restricting operations to specified directories, it maintains data security while allowing AI systems to work with file-based data and content. The server integrates with Claude Desktop and can be run standalone, offering deployment flexibility. This implementation is particularly useful for AI assistants designed to manage documents, analyze local datasets, or automate file organization tasks using the local filesystem as a backend."
gongrzhe,gmail-mcp-server,1.3,0,7.8,-2.34,0.5660000000000001,MINIMAL,"This Gmail AutoAuth MCP server, developed by gongrzhe, provides a standardized interface for AI assistants to interact with Gmail through natural language. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for sending emails, reading messages, searching emails, managing labels, and more. The server implements OAuth2 authentication with auto browser launch, supporting both desktop and web application credentials. By abstracting Gmail API operations and handling authentication complexities, it enables AI systems to easily manage email communications. This implementation is particularly valuable for applications requiring programmatic email access, facilitating use cases such as automated email management, intelligent email filtering, and AI-driven communication assistance."
dmontgomery40,deepseek-mcp-server,1.3,0,7.6,-2.2800000000000002,1.028,MINIMAL,"This DeepSeek MCP server, developed by David Montgomery, enables seamless integration of DeepSeek's advanced language models with MCP-compatible applications like Claude Desktop. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a chat completion tool with customizable parameters such as model selection, temperature control, and token limits. The implementation focuses on simplifying access to DeepSeek's powerful AI capabilities through a standardized interface. It's particularly useful for developers and researchers looking to incorporate state-of-the-art language models into their applications without dealing directly with DeepSeek's API intricacies, enabling use cases like AI-assisted writing, code generation, and complex reasoning tasks."
doobidoo,mcp-memory-service,1.3,1,7.8,-2.34,1.1660000000000001,MINIMAL,"This MCP implementation, built with Python, provides a versatile framework for integrating with ChromaDB, a vector database for AI applications. It utilizes sentence transformers for efficient text embedding and tokenization, enabling advanced natural language processing capabilities. The implementation supports websocket connections, allowing for real-time data exchange and updates. By combining these technologies, it offers a robust solution for building AI-powered applications that require semantic search, document similarity comparisons, and content recommendation systems. This implementation is particularly well-suited for use cases such as intelligent document retrieval, content categorization, and personalized information delivery across various domains."
mcpdotdirect,evm-mcp-server,1.3,0,7.8,-2.34,1.066,MINIMAL,"EVM-MCP-Server provides a bridge between AI assistants and Ethereum Virtual Machine (EVM) compatible blockchains through the Model Context Protocol. Built by mcpdotdirect, it enables interaction with multiple networks including Ethereum, Optimism, Arbitrum, and Base, offering tools for querying blockchain data, transferring tokens (ETH, ERC20, ERC721, ERC1155), reading smart contracts, and resolving ENS names. The server can run in both stdio mode for direct integration and HTTP mode with SSE support, making it flexible for various deployment scenarios while maintaining secure handling of private keys for transaction signing."
base,base-mcp,1.3,0,7.8,-2.34,1.034,MINIMAL,"This MCP server provides onchain tools for Claude AI to interact with the Base blockchain and Coinbase API. Developed by Dan Schlabach and Tina He, it enables operations like retrieving wallet addresses, getting testnet ETH, listing balances, transferring funds, and deploying smart contracts. The implementation uses TypeScript and leverages the Coinbase SDK to facilitate blockchain interactions, making it valuable for users who want to perform cryptocurrency operations or smart contract deployments directly through Claude."
yanxingliu,dify-mcp-server,1.3,0,6.3,-1.8900000000000001,0.9890000000000001,MINIMAL,"This Dify MCP server, developed by an unnamed creator, integrates with the Dify API to enable AI-driven workflow execution through the Model Context Protocol. Built with Python and leveraging libraries like httpx and mcp, it provides tools for interacting with Dify workflows and applications. The server implements environment-based configuration for flexible API key management. By abstracting Dify API interactions into a standardized MCP interface, it enables AI systems to easily trigger and manage Dify workflows and applications. This implementation is valuable for applications requiring programmatic access to Dify capabilities, facilitating use cases such as automated task execution, multi-step data processing, and AI-driven decision making across various domains."
cyberchitta,llm-context.py,1.3,0,7.5,-2.25,1.075,MINIMAL,"This LLM Context MCP server, developed by restlessronin, streamlines the process of sharing code context with Large Language Models. Built with Python using the Model Context Protocol SDK, it offers features like profile-based customization, code outlining, and integration with both MCP and clipboard for easy switching between tasks such as code review and documentation. The server implements smart file selection using .gitignore patterns and supports multiple programming languages. By abstracting the complexities of context generation, it enables AI systems to easily analyze and work with codebases. This implementation is particularly valuable for developers and teams requiring efficient code-related interactions with LLMs, facilitating use cases such as code reviews, documentation generation, and codebase analysis across various programming languages and project structures."
r-huijts,xcode-mcp-server,1.3,0,7.8,-2.34,1.066,MINIMAL,"This Xcode MCP server, developed by R. Huijts, provides a streamlined interface for AI assistants to interact with Xcode projects and iOS development workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing Xcode projects, automating build processes, and facilitating code generation. The implementation focuses on simplifying complex Xcode operations, making it accessible for AI models to assist in iOS app development tasks. It's particularly useful for automating repetitive development tasks, generating boilerplate code, or providing intelligent suggestions during iOS app creation, enabling AI assistants to contribute to Xcode projects without requiring deep knowledge of the IDE's intricacies."
enescinr,twitter-mcp,1.3,0,6.8,-2.04,1.096,MINIMAL,"This MCP server, developed by Enes Çınar, enables AI assistants to interact with Twitter through the Twitter API. Built with TypeScript and Node.js, it allows posting tweets and searching for tweets via simple function calls. The implementation integrates seamlessly with Claude Desktop, providing a straightforward interface for Twitter interactions. By connecting AI capabilities with Twitter's social media platform, this server enables AI systems to analyze social trends, engage with users, and disseminate information. It is particularly useful for scenarios like social media monitoring, automated customer engagement, and building AI assistants that can understand and contribute to real-time public discourse on Twitter."
leonardsellem,n8n-mcp-server,1.3,0,7.5,-2.25,1.075,MINIMAL,"n8n MCP Server provides a bridge between AI assistants and n8n workflow automation through the Model Context Protocol. It offers tools for managing workflows (listing, creating, updating, activating) and executions, along with resources for accessing workflow data. Built with TypeScript and using the MCP SDK, it authenticates with n8n via API keys and follows a layered architecture that separates API client, tools, and resources. This implementation is particularly valuable for users who want to automate tasks, monitor workflow executions, or integrate n8n capabilities directly within AI assistant conversations."
neondatabase-labs,mcp-server-neon,1.3,0,7.8,-2.34,1.066,MINIMAL,"This MCP server, developed by Neon, provides a bridge between AI assistants and Neon's serverless Postgres database platform. Built for use with Claude Desktop, it offers tools for managing Neon projects, branches, and databases through natural language interactions. The server leverages Neon's Management API, enabling AI models to perform operations like creating projects, running SQL queries, and executing database migrations. Key features include a two-step migration process for safe schema changes and support for various database management tasks. By integrating AI capabilities with Neon's cloud-native database services, this implementation enhances database administration, schema design, and query execution through natural language. It is particularly useful for scenarios requiring dynamic database management, collaborative data modeling, and AI-assisted database operations in a serverless Postgres environment."
shopify,dev-mcp,1.3,0,6.2,-1.8599999999999999,1.114,MINIMAL,"A Shopify MCP server implementation that provides access to Shopify's developer resources, including API documentation, tutorials, and guides."
rafalwilinski,mcp-apple-notes,1.3,0,6.7,-2.0100000000000002,1.099,MINIMAL,"This MCP server, developed by RafalWilinski, enables AI assistants like Claude to search and reference Apple Notes during conversations. Built in TypeScript, it provides semantic search capabilities using on-device embeddings and vector storage with LanceDB. The implementation stands out by offering native Apple Notes integration via JXA and fully local execution without API keys. By connecting AI capabilities with personal note content, this server allows AI systems to retrieve relevant information from a user's Apple Notes. It is particularly useful for building AI-powered tools that require context from personal notes, such as task planning, information retrieval, and knowledge management applications."
javascript,mcp-server,1.3,0,0,-0.0,1.3,MINIMAL,"foreverVM provides an API for running arbitrary, stateful Python code securely.

The core concepts in foreverVM are machines and instructions.

Machines represent a stateful Python process. You interact with a machine by running instructions (Python statements and expressions) on it, and receiving the results. A machine processes one instruction at a time."
mordavid,bloodhound-mcp-ai,1.3,0,7.0,-2.0999999999999996,1.09,MINIMAL,"BloodHound-MCP is a Python-based server that integrates with the BloodHound security tool to enable AI assistants to analyze Active Directory and Azure environments for security vulnerabilities. It connects to Neo4j databases containing BloodHound data and provides over 60 specialized tools for identifying attack paths, privilege escalation opportunities, certificate vulnerabilities, and security misconfigurations. The implementation supports both on-premises Active Directory and Azure/Entra ID environments, making it particularly valuable for security professionals conducting threat hunting, penetration testing, or security assessments who need AI assistance in analyzing complex network relationships and identifying potential security weaknesses."
nighttrek,software-planning-mcp,1.3,0,7.1,-2.13,1.087,MINIMAL,"Software Planning MCP is a tool that helps developers break down software goals into actionable implementation plans through a structured, question-based approach. Developed by Daniel Steigman, it guides users through a sequential thinking process to understand requirements, analyze technical considerations, and develop detailed task lists with complexity scores and code examples. The server stores goals and implementation plans locally, provides tools for managing todos, and uses a sophisticated parsing system to convert natural language plans into structured task items. Particularly valuable for developers who want to systematically approach complex software projects without losing track of implementation details."
nspady,google-calendar-mcp,1.3,0,7.6,-2.2800000000000002,0.5720000000000001,MINIMAL,"This Google Calendar MCP server enables AI assistants to interact with users' Google Calendar data. Developed as an open-source project, it provides a TypeScript-based interface for querying events, creating appointments, and managing calendars through natural language. The implementation leverages the Google Calendar API and OAuth 2.0 for secure authentication. It's designed for scenarios requiring AI-assisted calendar management, such as scheduling meetings, analyzing time usage, or integrating calendar functionality into conversational AI applications. The server is particularly useful for productivity-focused AI assistants or developers building tools to streamline calendar operations through natural language interfaces."
rectalogic,langchain-mcp,1.3,0,5.0,-1.5,0.9500000000000001,MINIMAL,"This LangChain integration, developed by rectalogic, enables AI assistants (powered by LangChain) to leverage Model Context Protocol (MCP) tools within the LangChain framework. It provides an MCPToolkit class that wraps an MCP ClientSession, allowing seamless incorporation of MCP capabilities into LangChain workflows. Built in Python, the implementation abstracts away the complexities of MCP communication, presenting tools as standard LangChain BaseTools. By bridging LangChain's flexible architecture with MCP's extensible toolset, this integration enhances AI models' ability to interact with external services and data sources. It is particularly useful for developers already using LangChain who want to expand their AI applications' capabilities with MCP-compatible tools without significant changes to their existing codebase."
runekaagaard,mcp-alchemy,1.3,0,7.8,-2.34,1.066,MINIMAL,"MCP Alchemy, developed by Rune Kaagaard, provides a seamless interface between Claude Desktop and SQL databases. Built with Python and SQLAlchemy, it enables AI systems to directly query and analyze data from PostgreSQL, MySQL, MariaDB, SQLite, and other SQLAlchemy-compatible databases. The implementation offers tools for database exploration, query assistance, and data analysis, with features like smart result truncation and integration with claude-local-files for handling large datasets. By abstracting database interactions into an MCP interface, it allows AI assistants to act as database experts, facilitating use cases such as data exploration, SQL query writing, relationship mapping, and comprehensive data analysis across various database engines."
dainfernalcoder,perplexity-mcp,1.3,0,6.7,-2.0100000000000002,1.0010000000000001,MINIMAL,"This MCP server, developed by DaInfernalCoder, leverages the Perplexity Sonar Pro API to provide AI-powered research assistance within the Cline development environment. Built with TypeScript and utilizing the Model Context Protocol SDK, it offers tools for general search queries, documentation retrieval, API discovery, and deprecated code analysis. The implementation focuses on enhancing developer productivity by integrating up-to-date information and code insights directly into the workflow. It's particularly useful for developers seeking real-time assistance with documentation, API integration, and code modernization, enabling use cases such as efficient library adoption, API evaluation, and codebase maintenance without leaving their development environment."
jacck,mcp-reasoner,1.3,2,5.1,-1.53,1.2530000000000001,MINIMAL,"This MCP reasoner, developed by Jacck, provides a systematic approach to problem-solving using beam search and thought evaluation. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers capabilities for exploring multiple solution paths, scoring thoughts, and managing tree-based reasoning states. The reasoner implements a configurable beam width, depth-limited search, and statistical analysis of the reasoning process. It's designed for tackling complex problems that require step-by-step analysis, such as mathematical puzzles, logical deductions, and multi-stage planning tasks. This implementation is particularly valuable for enhancing AI assistants' problem-solving abilities in scenarios requiring structured thinking and exploration of multiple solution strategies."
vivekvells,mcp-pandoc,1.3,0,7.8,-2.34,1.066,MINIMAL,"This MCP server, developed by Vivek Vells, provides document format conversion using Pandoc. It exposes tools to transform content between formats like plain text, Markdown, and HTML while preserving structure and formatting. By leveraging the Pandoc Python package, this implementation enables AI assistants to seamlessly convert documents without requiring complex setup. It is particularly useful for scenarios involving document processing, content migration, or generating formatted outputs from raw text inputs. The server is designed for easy integration into AI workflows and is actively being expanded to support additional formats like PDF."
kiliczsh,mcp-mongo-server,1.3,0,7.6,-2.2800000000000002,1.072,MINIMAL,"This MCP server, developed by kiliczsh, provides AI assistants like Claude with read-only access to MongoDB databases. It offers tools for querying collections, retrieving schema information, and executing aggregations. The server integrates seamlessly with Claude Desktop on both macOS and Windows, enabling AI-powered data analysis and insights. By bridging AI capabilities with MongoDB's flexible document model, this implementation facilitates natural language interactions with complex datasets. It is particularly useful for scenarios requiring data exploration, schema analysis, or generating insights from MongoDB-stored data in AI-assisted research, reporting, and decision-making applications."
disler,just-prompt,1.3,0,7.6,-2.2800000000000002,1.028,MINIMAL,"Just Prompt is a lightweight MCP server that provides a unified interface to multiple LLM providers including OpenAI, Anthropic, Google Gemini, Groq, DeepSeek, and Ollama. It offers tools for sending prompts to multiple models in parallel, automatic model name correction, and saving responses to files. The implementation supports provider shorthand notation, thinking tokens for Claude models, and includes comprehensive test coverage for all providers. Ideal for developers who need to interact with multiple LLM APIs through a single, consistent interface."
makafeli,n8n-workflow-builder,1.3,0,7.6,-2.2800000000000002,1.072,MINIMAL,"This n8n Workflow Builder MCP server, developed by an unnamed author, provides a programmatic interface for creating and managing n8n workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for defining nodes, connections, and workflow specifications. The implementation focuses on simplifying the creation of complex automation workflows, making it accessible for AI assistants or applications needing to generate n8n configurations. It's particularly useful for tasks like automated workflow generation, template creation, or integrating n8n capabilities into AI-driven systems, enabling programmatic workflow management without requiring deep knowledge of n8n's internal structures."
danhilse,notion_mcp,1.3,0,7.5,-2.25,1.025,MINIMAL,"This MCP server, developed by Dan Hilse, enables AI assistants like Claude to interact with a personal Notion todo list. Built in Python, it provides a minimalist interface for managing tasks with just three properties: task name, scheduling (today/later), and completion status. The implementation integrates with the Notion API to add, view, and update todos in a specific database structure. By connecting AI capabilities with a streamlined task management system, this server enables AI assistants to help organize daily activities and track personal productivity. It is particularly useful for individuals seeking a simple, AI-augmented todo list without complex features, prioritizing ease of use and quick task entry over advanced project management functionality."
chemiguel23,memorymesh,1.3,0,7.6,-2.2800000000000002,1.072,MINIMAL,"MemoryMesh, developed by CheMiguel23, is a local knowledge graph server that enables AI assistants like Claude to store, update, and recall structured information. It features dynamic schema-based tools, relationship modeling, and AI-aware interfaces for maintaining consistent data. Built on the Knowledge Graph Memory Server from MCP, MemoryMesh adds custom schemas, metadata expansion, and event tracking. It integrates seamlessly with Claude Desktop on macOS and Windows, facilitating natural language interactions for world-building and storytelling. While originally designed for text-based RPG scenarios, MemoryMesh is adaptable for social networks, organizational planning, or other structured data use cases requiring persistent information management and retrieval in AI-assisted creative and analytical tasks."
sshtunnelvision,mcp-logo-gen,1.3,0,7.1,-2.13,1.013,MINIMAL,"This MCP server implementation provides image generation capabilities using the FAL AI service. It offers a tool for generating images from text prompts, leveraging models like 'fal-ai/recraft-v3'. The server is built using FastAPI and includes features such as Server-Sent Events (SSE) for real-time communication. It's designed for use cases requiring AI-powered image creation, such as content generation or visual design assistance."
kimtaeyoon83,mcp-server-youtube-transcript,1.3,0,7.5,-2.25,1.075,MINIMAL,"This YouTube transcript extraction MCP server, developed by kimtaeyoon83, provides a streamlined interface for retrieving captions and subtitles from YouTube videos. It supports multiple video URL formats and offers language-specific transcript retrieval, making it versatile for various content analysis tasks. The server features error handling, including validation of input parameters, graceful handling of YouTube API errors, and implementation of timeouts. It's particularly useful for AI-driven content analysis, automated video summarization, and accessibility enhancement projects. Its ability to provide detailed metadata along with transcripts enhances its utility for comprehensive video content analysis."
coleam00,mcp-mem0,1.3,0,6.8,-2.04,1.004,MINIMAL,"MCP-Mem0 is a server implementation that integrates Mem0's long-term memory capabilities with AI agents through the Model Context Protocol. Developed by Cole Medin, it provides three essential memory management tools: storing information with semantic indexing, retrieving all stored memories, and finding relevant memories using semantic search. The server supports multiple LLM providers (OpenAI, OpenRouter, Ollama) and uses PostgreSQL for vector storage, making it particularly valuable for applications requiring persistent memory across conversations, such as personal assistants, knowledge management systems, or any AI agent that needs to recall past interactions and information."
ericzakariasson,uber-eats-mcp-server,1.3,0,5.6,-1.6799999999999997,1.1320000000000001,MINIMAL,"This MCP server implementation provides a bridge to Uber Eats, enabling AI assistants to search for restaurants, find menu options, and place food orders. Built using Python and the FastMCP framework, it leverages browser automation to interact with the Uber Eats website. The server offers asynchronous operations for searching and ordering, making it suitable for use cases requiring food delivery integration within AI-assisted applications."
magicuidesign,mcp,1.3,0,6.6,-1.9799999999999998,1.102,MINIMAL,"The official MCP server for Magic UI design system provides AI assistants with structured access to Magic UI's component library. Built by Beau Hayes-Pollard, it exposes tools for retrieving implementation details of UI components organized by categories like buttons, animations, text effects, and backgrounds. The server fetches component data from the Magic UI registry, formats it with proper installation instructions, and delivers it through categorized tools that help AI models generate accurate code suggestions for implementing visually appealing UI elements in web applications."
shaneholloman,mcp-knowledge-graph,1.3,0,6.7,-2.0100000000000002,1.099,MINIMAL,"This knowledge graph MCP server, developed by Anthropic, enables persistent memory for AI assistants through a local graph database. It provides tools for creating, querying, and manipulating entities and relationships, allowing assistants to build and maintain structured knowledge about users and contexts across conversations. The implementation uses TypeScript and file-based storage, with a customizable memory path for flexibility. It's designed for enhancing AI personalization and context retention in applications like chatbots, virtual assistants, or any scenario requiring long-term information persistence and retrieval in natural language interactions."
hannesrudolph,mcp-ragdocs,1.3,0,6.2,-1.8599999999999999,0.986,MINIMAL,"This MCP server, developed by Hannes Rudolph, enables AI assistants to augment their responses with relevant documentation context through vector-based search and retrieval. Built as a fork of qpd-v's original implementation, it integrates with OpenAI for embeddings generation and Qdrant for vector storage. The server provides tools for adding documentation from URLs, performing semantic searches, extracting links, and managing a processing queue. By connecting AI capabilities with efficient vector search of documentation, this implementation allows AI systems to enhance their knowledge with domain-specific information in real-time. It is particularly useful for building documentation-aware AI assistants, implementing semantic documentation search, and creating context-aware developer tools that require access to up-to-date technical information."
disler,aider-mcp-server,1.3,0,7.8,-2.34,1.066,MINIMAL,"Aider MCP Server enables Claude Code to offload AI coding tasks to Aider, reducing costs and enhancing development efficiency. The server exposes two main tools: aider_ai_code for implementing code changes based on natural language prompts, and list_models for discovering available AI models. By delegating specific coding tasks to Aider while maintaining Claude Code for orchestration and review, developers gain more control over their AI coding workflow and can leverage different models for different aspects of development."
gyoridavid,short-video-maker,1.3,0,7.7,-2.31,1.0310000000000001,MINIMAL,"Short Video Maker is an automated video creation tool that generates short-form content for platforms like TikTok, Instagram Reels, and YouTube Shorts. Built by David Gyori, it combines text-to-speech (Kokoro), automatic caption generation (Whisper), background video selection (Pexels API), and music to create professional-looking videos from simple text inputs. The implementation exposes both REST API and Model Context Protocol endpoints, allowing AI assistants to generate videos by providing scenes with text and search terms. It features Docker support with CPU and CUDA variants, making it accessible for users with different hardware capabilities while maintaining memory efficiency."
open-strategy-partners,osp_marketing_tools,1.3,0,7.8,-2.34,1.066,MINIMAL,"## Editing Codes 
A standardized system of codes for editing text.

## Writing Guide
OSP's guidelines and protocols for effective writing.

## Meta Information Guide 
A system to generate web-friendly titles and URLs.

## Value Map Positioning Guide
A framework for creating compelling product communications and positioning."
simonb97,win-cli-mcp-server,1.3,0,6.8,-2.04,1.096,MINIMAL,"This Windows CLI MCP server, developed by SimonB97, enables secure command-line interactions on Windows systems for AI assistants like Claude Desktop. Built with TypeScript, it provides controlled access to PowerShell, CMD, and Git Bash shells, as well as remote systems via SSH. The server implements robust security controls including command blocking, working directory validation, and injection protection. Its configuration system allows fine-tuning of allowed operations, paths, and SSH connections. By extending AI capabilities to local and remote command-line environments, this implementation is particularly useful for tasks involving system administration, development workflows, and secure remote management while maintaining strict control over permitted actions."
joshrutkowski,applescript-mcp,1.3,0,7.8,-2.34,1.066,MINIMAL,"This AppleScript MCP framework, developed by Josh Rutkowski, enables seamless integration of AppleScript capabilities with the Model Context Protocol. It leverages TypeScript and the MCP SDK to provide a robust interface for interacting with macOS applications and system functions through natural language. The implementation is designed for developers looking to incorporate AI-driven automation and control of macOS environments, making it particularly useful for creating intelligent assistants, workflow automation tools, or AI-enhanced macOS applications. Its focus on AppleScript integration sets it apart by offering unique access to macOS-specific functionality within the MCP ecosystem."
stevenyu113228,bloodhound-mcp,1.3,0,6.0,-1.7999999999999998,1.12,MINIMAL,"BloodHound MCP enables Large Language Models to interact with Active Directory and Azure Active Directory environments through natural language queries. By connecting to a Neo4j database containing BloodHound data, this implementation allows users to perform complex security analysis without writing Cypher queries manually. The server leverages the MCP protocol to translate conversational commands into database operations, making it particularly valuable for security professionals who need to quickly identify attack paths, permission issues, or vulnerabilities in their directory services through intuitive language-based interactions."
chand45,mcp-server-azure-impact-reporting,1.0,0,7.5,-2.25,0.725,MINIMAL,"The Azure Impact Reporting MCP server enables large language models to report infrastructure issues to Azure on behalf of customers. Built by Chand45, this Python implementation authenticates with Azure using DefaultAzureCredential and creates workload impact reports via the Azure Management API. The server exposes a tool that accepts subscription details, resource information, and impact categories (connectivity, performance, availability), then submits standardized reports through Azure's workload impacts endpoint. It's particularly useful for AI assistants that need to help users report Azure resource problems without requiring them to navigate complex Azure reporting processes manually."
packages,notte-mcp,1.3,0,0,-0.0,1.3,MINIMAL,"Notte MCP Server provides a bridge between AI assistants and Notte's cloud browser technology, enabling web automation and scraping capabilities. It offers tools for managing browser sessions, taking screenshots, observing page elements, scraping data, and executing actions on web pages. The server also includes an agent/operator feature that can autonomously complete specified tasks on websites. Built on FastMCP with tight integration to the Notte SDK, it's particularly valuable for applications requiring web interaction capabilities without managing browser automation directly."
samuelgursky,davinci-resolve-mcp,1.3,0,7.6,-2.2800000000000002,1.072,MINIMAL,"A Python-based MCP server for DaVinci Resolve that provides programmatic access to video editing, color grading, and media management functions. Created by Samuel Gursky, this implementation enables developers and editors to automate complex workflows in DaVinci Resolve through a flexible scripting interface, supporting operations like timeline manipulation, clip analysis, color correction, and media pool management."
freepeak,db-mcp-server,1.3,0,7.8,-2.34,1.066,MINIMAL,"DB-MCP-Server provides a database connectivity layer for AI assistants through the Model Context Protocol, enabling direct interaction with MySQL and PostgreSQL databases. Built in Go, it supports both local stdio and production SSE transport modes, with configurable database connections through environment variables. The server can be deployed using Docker for easy integration into existing workflows, making it ideal for AI applications that need to query, analyze, or manipulate structured data stored in relational databases without requiring separate database access tools."
dbt-labs,dbt-mcp,1.3,0,6.4,-1.92,0.6080000000000001,MINIMAL,"dbt-MCP server provides a bridge between AI assistants and dbt (data build tool) resources, enabling interaction with data models, metrics, and transformations. Built by dbt Labs, it offers tools for executing dbt CLI commands, discovering metadata about models, and querying the dbt Semantic Layer. The server supports local dbt project operations, metadata retrieval from dbt Cloud, and metric querying capabilities, making it valuable for data analysts and engineers who want to explore, analyze, and manage their data transformations through natural language interfaces without manually navigating dbt's command line or web interface."
elastic,mcp-server-elasticsearch,1.7,0,7.7,-2.31,1.431,MINIMAL,"Elasticsearch MCP server enables AI assistants to interact with Elasticsearch clusters through natural language conversations. Built with TypeScript and the official Elasticsearch client library, it provides tools for listing indices, inspecting field mappings, and executing full Query DSL searches with automatic highlighting of text fields. The implementation handles authentication via API keys, supports configurable security permissions, and is particularly valuable for users who need to explore and analyze their Elasticsearch data through conversational interfaces."
vast-ai-research,tripo-mcp,1.7,0,4.7,-1.4100000000000001,1.341,MINIMAL,"Tripo MCP provides a bridge between AI assistants and the Tripo 3D generation API, enabling the creation and manipulation of 3D models directly within conversation interfaces. Developed by VAST-AI-Research, this server implementation allows users to generate 3D assets from text descriptions, import models into Blender, and perform various operations on 3D objects through the Blender addon integration. The server exposes tools for creating models from text prompts, checking task status, importing GLB files, and manipulating scene objects - making it particularly valuable for 3D content creation workflows where users need to quickly prototype and visualize concepts without switching between applications."
crystaldba,postgres-mcp,1.7,0,7.8,-2.34,1.466,MINIMAL,"PostgreSQL MCP is a database tuning and analysis tool that provides real-time insights into PostgreSQL performance. It offers tools for analyzing query execution plans, identifying slow queries, monitoring database health metrics, and recommending index optimizations. The server implements features like hypothetical index testing, transaction health monitoring, and buffer cache analysis, making it valuable for database administrators and developers who need to optimize query performance, troubleshoot bottlenecks, or maintain healthy PostgreSQL databases. Built with Python 3.12 and packaged as a Docker container, it supports both PostgreSQL 15 and 16 with a focus on read-only safety through restricted access modes."
matthewdailey,figma-mcp,1.9,0,7.0,-2.0999999999999996,1.6099999999999999,MINIMAL,"This MCP server, developed by Matthew Dailey, enables AI assistants to interact with Figma design files through the Figma REST API. Built in TypeScript, it allows adding Figma files to conversations, viewing nodes, reading and posting comments. The implementation integrates seamlessly with Claude Desktop and stands out by providing a direct bridge between AI models and Figma's collaborative design platform. By connecting AI capabilities with Figma's extensive design ecosystem, this server enables AI systems to analyze designs, provide feedback, and assist in the design process. It is particularly useful for scenarios like design reviews, generating design suggestions, and building AI assistants that can understand and contribute to visual design workflows."
negokaz,excel-mcp-server,1.5,0,5.4,-1.62,1.338,MINIMAL,"This Excel MCP server, developed by Kazuki Negoro, provides a bridge between Model Context Protocol and Microsoft Excel files. It enables reading and writing of spreadsheet data, specifically focusing on text values in xlsx format files. The implementation is designed for Node.js environments and leverages libraries like exceljs for Excel file manipulation. It's particularly useful for scenarios where AI assistants or other MCP-compatible clients need to interact with structured data stored in Excel spreadsheets, such as data analysis, report generation, or automated spreadsheet updates based on AI-driven insights."
recursechat,mcp-server-apple-shortcuts,1.3,0,5.9,-1.7700000000000002,1.123,MINIMAL,"This MCP server, developed by recursechat, enables AI assistants like Claude to control Apple Shortcuts automations on macOS. Built with Node.js, it allows listing available shortcuts and running them by name with optional input parameters. The implementation provides a simple interface for automation control, integrating seamlessly with Claude Desktop. By connecting AI capabilities with Apple's powerful Shortcuts app, this server enables AI systems to trigger complex automations and perform tasks on macOS. It is particularly useful for scenarios like hands-free device control, automated workflow execution, and building AI assistants that can interact with and control macOS applications and system functions."
razorpay,razorpay-mcp-server,1.3,0,7.3,-2.19,1.081,MINIMAL,"Razorpay MCP Server provides a bridge between AI assistants and Razorpay's payment processing APIs, enabling seamless integration for payment operations. Built with Go, it exposes tools for managing payments, payment links, and orders through a clean abstraction layer over the Model Context Protocol. The server supports multiple transport mechanisms, features comprehensive logging, and includes a read-only mode for enhanced security. It's containerized for easy deployment in various environments including Claude Desktop and VS Code, making it particularly valuable for developers building AI-powered applications that need to interact with Razorpay's payment ecosystem without writing complex integration code."
mamertofabian,mcp-everything-search,1.9,0,7.4,-2.2199999999999998,1.678,MINIMAL,"This MCP server, developed by Mamerto Fabian, enables AI assistants to perform fast file searches using the Everything SDK on Windows systems. It provides a tool for executing complex file queries with support for wildcards, boolean operators, and various search criteria like file size, dates, and attributes. The server abstracts the Everything SDK's functionality, offering a simplified interface for AI systems to locate files and retrieve metadata. By connecting AI capabilities with Everything's ultra-fast file indexing, this implementation empowers AI assistants to quickly find and analyze files across entire drives. It is particularly useful for applications requiring rapid file discovery, system analysis, or any scenario where an AI system needs to efficiently locate and reason about files on a Windows machine."
egoist,fetch-mcp,1.9,0,4.3,-1.29,1.771,MINIMAL,"Fetch-MCP provides a server for retrieving web content and YouTube video transcripts through two specialized tools. The implementation fetches URLs and converts HTML to Markdown by default, with options to return raw HTML or limit content length. It also extracts YouTube video transcripts with timestamps, making it useful for AI assistants that need to reference web content or video information. Built with TypeScript using the Model Context Protocol SDK, it supports both stdio and SSE server modes for flexible integration options."
manusa,kubernetes-mcp-server,1.3,0,7.8,-2.34,1.066,MINIMAL,"Powerful and flexible Kubernetes MCP server implementation.
Provides features to perform both, low-level and high-level operations on Kubernetes and OpenShift.
Lower level features include performing CRUD operations on any Kubernetes or OpenShift resource.
Higher level features include abstractions to run and deploy container images and exposing them. This is helpful for smaller models which don't have enough context to generate complete and valid Kubernetes resources."
semgrep,mcp,1.3,0,7.0,-2.0999999999999996,1.09,MINIMAL,"Semgrep MCP Server provides a comprehensive interface to Semgrep's static analysis capabilities through the Model Context Protocol, enabling AI assistants to scan code for security vulnerabilities and coding issues. Built by Semgrep, Inc., it offers tools for scanning individual code snippets or entire directories, creating custom rules, analyzing results by severity, and filtering findings. The server is containerized with Docker for easy deployment and can be integrated with Cursor as a plugin, making it valuable for developers who want to leverage Semgrep's security analysis capabilities directly within their AI assistant workflows without leaving their coding environment."
elsejj,mcp-cn-a-stock,1.3,0,2.3,-0.69,1.231,MINIMAL,"A specialized MCP server for Chinese stock market data analysis, providing tools to retrieve detailed stock information across different levels of depth (brief, medium, full). Built to integrate with a custom data feed system, it enables AI assistants to fetch comprehensive stock data including basic metrics, trading information, financial details, and technical analysis through a standardized interface."
mem0ai,mem0-mcp,1.3,0,6.8,-2.04,1.004,MINIMAL,"Mem0-MCP provides a structured approach for managing coding preferences through an MCP server that integrates with mem0.ai. Built with Python using the FastMCP framework, it offers three main tools: adding coding preferences with comprehensive context, retrieving all stored preferences, and semantically searching through preferences to find relevant code implementations, solutions, and documentation. The server runs as a persistent process that agents can connect to via SSE, making it ideal for cloud-native environments where server and clients operate as decoupled processes. This implementation is particularly valuable for developers using Cursor who need efficient storage and retrieval of code snippets and programming knowledge."
jsonallen,perplexity-mcp,1.9,0,6.7,-2.0100000000000002,1.601,MINIMAL,"This Perplexity MCP server, developed by Jason Allen, provides AI assistants with web search capabilities using the Perplexity AI API. Built with Python using libraries like aiohttp and pydantic, it offers a streamlined interface for performing web searches and retrieving results. The server implements environment-based configuration for API key management and uses the Model Context Protocol to standardize interactions. By abstracting the complexities of API communication, it enables AI systems to easily incorporate up-to-date web information into their workflows. This implementation is particularly valuable for applications requiring real-time access to web data, facilitating use cases such as fact-checking, research assistance, and information retrieval across various domains."
nickclyde,duckduckgo-mcp-server,2.1,0,7.2,-2.16,1.8840000000000001,MINIMAL,"This MCP server implementation provides web search capabilities through DuckDuckGo, with additional features for content fetching and parsing. Developed by Nick Clyde, it offers tools for performing web searches and retrieving webpage content, with built-in rate limiting and error handling. The server is designed to format results specifically for large language model consumption, making it particularly useful for AI applications that require up-to-date web information. It includes features like intelligent text extraction, comprehensive error logging, and LLM-friendly output formatting. The implementation is built using Python and integrates with the Model Context Protocol, focusing on ease of use within the Claude Desktop environment."
mshojaei77,reactmcp,1.3,0,7.8,-2.34,1.034,MINIMAL,"ReActMCP Web Search integrates Exa API's web search capabilities into AI assistant frameworks through the Model Context Protocol. It provides both basic and advanced search tools with filtering options for domains, text requirements, and date ranges, returning markdown-formatted results with titles, URLs, publication dates, and content summaries. Built with Python using the FastMCP framework, this implementation is particularly valuable for workflows requiring real-time internet information within AI conversations, allowing users to access current data without leaving their conversation interface."
cyanheads,atlas-mcp-server,1.3,6,7.6,-2.2800000000000002,1.172,MINIMAL,"ATLAS, developed by cyanheads, is a Model Context Protocol server that provides hierarchical task management capabilities to Large Language Models. It enables AI assistants to break down complex projects into manageable tasks, track progress, and maintain dependencies within an organized structure. The server implements rich content support, including markdown documentation, code snippets, and structured reasoning documentation. ATLAS stands out by offering a comprehensive task management system tailored for AI-driven project planning and execution. It is particularly useful for applications requiring sophisticated task organization, collaborative AI workflows, or any scenario where an AI system needs to manage and reason about complex, multi-step processes."
formulahendry,mcp-server-code-runner,1.5,0,6.0,-1.7999999999999998,1.32,MINIMAL,"Code Runner MCP Server enables AI assistants to execute code snippets in multiple programming languages directly within conversations. Built by Jun Han, it supports over 30 languages including JavaScript, Python, Ruby, Go, and more by creating temporary files and executing them with the appropriate interpreter. The server is designed for easy integration with VS Code and Claude Desktop through simple configuration, making it ideal for demonstrating code examples, testing algorithms, or exploring system information without leaving the conversation interface."
g0t4,mcp-server-commands,1.7,0,6.7,-2.0100000000000002,1.4989999999999999,MINIMAL,"This MCP server, developed by g0t4, enables AI assistants to execute system commands and run scripts on the host machine. It provides tools for running individual shell commands and executing multi-line scripts in various languages like bash, fish, and Python. Built in JavaScript, the implementation exposes local system functionality via a standardized MCP interface, allowing Claude to interact directly with the host operating system. By bridging AI models with the local command line, this server enhances Claude's ability to perform system administration tasks, automate workflows, and execute code snippets. It is particularly useful for developers and power users seeking AI-powered assistance with command-line operations, scripting, and system automation tasks. The implementation emphasizes security, recommending careful review of commands before execution."
quantgeekdev,mongo-mcp,1.9,0,7.4,-2.2199999999999998,1.678,MINIMAL,"This MongoDB MCP server, developed by QuantGeekDev, enables AI assistants to interact directly with MongoDB databases through natural language. Built with TypeScript, it provides tools for querying collections, inspecting schemas, managing indexes, and performing document operations. The server leverages MongoDB's flexible document model and powerful query capabilities, allowing AI models to explore and manipulate complex data structures. By bridging natural language processing with MongoDB's features, this implementation extends AI capabilities for tasks like data analysis, content management, and database administration. It is particularly useful for scenarios requiring dynamic data exploration, schema inference, and performing database operations in response to natural language queries."
domdomegg,airtable-mcp-server,1.9,0,6.8,-2.04,1.6039999999999999,MINIMAL,"This MCP server, developed by domdomegg, enables AI assistants like Claude to interact with Airtable databases. Built in TypeScript, it provides capabilities for querying and modifying Airtable bases, tables, fields, and records through a standardized interface. The implementation stands out by offering full read/write access to Airtable's rich data model and metadata. By connecting AI capabilities with structured data in Airtable, this server allows AI systems to analyze, manipulate, and act on user-defined datasets. It is particularly useful for automating data entry workflows, building AI-powered data analysis tools, or creating natural language interfaces to Airtable-based applications."
fengin,image-gen-server,1.3,0,6.6,-1.9799999999999998,1.102,MINIMAL,"This MCP server, developed by an unknown author, provides a lightweight implementation for handling MCP requests. Built with Python and leveraging the aiohttp and aiofiles libraries, it offers asynchronous capabilities for efficient request processing. The server focuses on basic functionality, utilizing the fastmcp and mcp libraries for core MCP operations. It's designed for developers who need a simple, customizable MCP server solution, enabling use cases such as prototyping MCP-based applications, testing MCP integrations, or serving as a foundation for more complex MCP implementations."
sdglbl,mcp-claude-code,1.3,0,6.4,-1.92,1.108,MINIMAL,"MCP Claude Code enables Claude to directly execute code-related tasks through the Model Context Protocol, providing functionality similar to Claude Code. Developed by SDGLBL, it implements tools for code understanding, modification, command execution, and file operations with proper security controls. The server integrates seamlessly with Claude Desktop, allowing users to analyze codebases, make targeted edits, run commands in various shells, and execute scripts in multiple programming languages. This implementation is particularly valuable for developers seeking AI assistance with code modifications and project management without leaving their conversation interface."
cr7258,elasticsearch-mcp-server,1.3,0,6.5,-1.9500000000000002,0.9950000000000001,MINIMAL,"This Elasticsearch MCP server implementation provides a standardized interface for interacting with Elasticsearch clusters through natural language. Developed to bridge the gap between large language models and Elasticsearch, it offers tools for index operations, document searching, and cluster management. The server leverages Docker for easy deployment of a 3-node Elasticsearch cluster with Kibana, and integrates seamlessly with Claude Desktop via a simple configuration. It's particularly useful for developers and data analysts who want to explore and manipulate Elasticsearch data using conversational AI, enabling natural language queries for complex search operations and cluster insights without requiring in-depth Elasticsearch expertise."
fatwang2,search1api-mcp,1.7,0,7.6,-2.2800000000000002,1.428,MINIMAL,"This Search1API MCP server, developed by fatwang2, provides an interface for AI assistants to perform web searches, news searches, content extraction, and sitemap retrieval using the Search1API service. It enables AI agents to query Search1API and retrieve structured results through a controlled MCP server. Built in JavaScript, the implementation handles API authentication and request formatting for multiple Search1API endpoints. By leveraging Search1API's capabilities, this server allows AI systems to access real-time web information, news articles, and site structures in a safe manner. It is particularly useful for AI assistants needing to conduct web research, analyze current events, or extract content from websites while maintaining a clear separation between the AI model and external data sources."
motherduckdb,mcp-server-motherduck,1.9,0,7.8,-2.34,1.666,MINIMAL,"This MCP server, developed by tdoehmen at MotherDuck, provides seamless integration with MotherDuck and local DuckDB databases. Built with Python, it offers tools for initializing database connections, retrieving schema information, and executing queries. The implementation stands out by supporting both cloud-based MotherDuck and local DuckDB instances, allowing flexible deployment options. It's particularly useful for data analysts, researchers, and developers who need to incorporate on-demand access to DuckDB-powered databases into their AI-assisted workflows, enabling dynamic querying and analysis of structured data within MCP-compatible environments like Claude Desktop."
furey,mongodb-lens,1.3,0,7.8,-2.34,1.066,MINIMAL,"MongoDB Lens is an MCP server that provides AI assistants with direct access to MongoDB databases for exploration and analysis. Built with Node.js and the Model Context Protocol SDK, it enables browsing databases and collections, executing queries with filters and projections, running aggregation pipelines, analyzing schemas, managing indexes, and optimizing query performance. The implementation includes specialized tools for inferring collection schemas, explaining query execution plans, and generating recommendations for database optimization, making it valuable for database exploration, performance tuning, and schema design assistance within AI workflows."
hyperb1iss,droidmind,1.3,0,7.7,-2.31,1.069,MINIMAL,"DroidMind enables AI assistants to control and interact with Android devices through a secure, standardized interface. Built with Python and the Model Context Protocol, it provides tools for device management, app installation, UI automation, file operations, and system diagnostics. The implementation features a robust security layer that prevents dangerous operations, supports both stdio and SSE transport modes, and includes comprehensive test coverage. DroidMind is particularly valuable for developers, testers, and power users who need to debug, analyze, or control Android devices directly through conversational AI without switching to dedicated ADB tools."
blurrah,mcp-graphql,1.3,0,6.6,-1.9799999999999998,1.102,MINIMAL,"This MCP server, developed by an unnamed author, provides a GraphQL interface for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for querying GraphQL servers. The implementation currently uses a mock schema response for development purposes, but is designed to connect to actual GraphQL endpoints. It abstracts the complexities of GraphQL communication, allowing AI systems to easily interact with GraphQL APIs. This server is particularly useful for applications requiring flexible data querying and manipulation, enabling AI assistants to access and analyze structured data from various GraphQL sources. Its generic design allows it to work with any GraphQL schema, making it versatile for different data-driven use cases."
jacksteamdev,obsidian-mcp-tools,1.3,0,7.8,-2.34,1.034,MINIMAL,"This Obsidian MCP tools collection, developed by 2XR, provides a set of Model Context Protocol utilities tailored for integration with the Obsidian note-taking application. Built using TypeScript and leveraging modern JavaScript features, it offers a modular structure with workspaces for different tools. The implementation focuses on enhancing Obsidian's capabilities through AI-powered functionalities, potentially including features like intelligent note linking, content generation, or knowledge graph analysis. By bridging Obsidian's powerful note organization system with MCP's standardized AI communication, this toolkit enables users to augment their personal knowledge management workflows with advanced AI assistance. It is particularly suited for researchers, writers, and knowledge workers looking to leverage AI within their existing Obsidian setups for tasks such as information synthesis, idea generation, and content organization."
chroma-core,chroma-mcp,1.9,0,7.1,-2.13,1.613,MINIMAL,"Chroma MCP Server provides vector database integration for LLM applications, enabling AI models to create and manage collections of data with vector search capabilities. Built by Chroma Core, it supports multiple client types (ephemeral, persistent, HTTP, and cloud), offers comprehensive collection management tools, and enables document operations including adding, querying, and retrieving with advanced filtering options. The implementation integrates seamlessly with Claude Desktop through simple configuration options and supports environment variables for flexible deployment, making it ideal for workflows requiring memory capabilities such as knowledge bases and context-aware conversations."
fradser,mcp-server-mas-sequential-thinking,1.7,0,7.6,-2.2800000000000002,1.428,MINIMAL,"Sequential Thinking Multi-Agent System (MAS) implements a coordinated team of specialized AI agents to break down complex problems through structured thinking steps. Built by Frad LEE using the Agno framework and DeepSeek models, this server orchestrates a Team Coordinator, Strategic Planner, Researcher (with Exa search capabilities), Core Analyzer, Quality Controller, and Integration Specialist working in parallel to process thoughts with greater depth than single-agent approaches. The implementation supports revision steps, branching analysis paths, and provides detailed guidance throughout the thinking process, making it particularly valuable for multi-disciplinary problem solving requiring diverse expertise and comprehensive analysis."
bigcodegen,mcp-neovim-server,1.5,0,6.3,-1.8900000000000001,1.311,MINIMAL,"This Neovim MCP server, developed by Derek White (bigcodegen), integrates Claude Desktop with Neovim using the Model Context Protocol and the official neovim/node-client library. It leverages Vim's native text editing commands to create a lightweight code assistance layer, allowing AI to interact directly with Neovim sessions. The server connects to a running Nvim instance, providing tools to view and edit buffers, execute Vim commands, and retrieve editor status. By abstracting Neovim's complexities, it enables AI assistants to seamlessly work within the familiar Vim environment. This implementation is particularly useful for developers seeking AI-enhanced coding assistance within their preferred text editor, facilitating tasks such as code review, refactoring, and context-aware suggestions without leaving the Neovim ecosystem."
hellokaton,unsplash-mcp-server,1.3,0,6.6,-1.9799999999999998,1.102,MINIMAL,"Unsplash MCP Server provides AI assistants with access to the Unsplash photo library through a simple search interface. Built with Python using the FastMCP framework, it enables searching for high-quality images by keyword with additional filtering options for color, orientation, and sorting preferences. The implementation authenticates with the Unsplash API using environment variables and returns structured photo data including image URLs, dimensions, and descriptions. This server is particularly useful for workflows requiring visual content integration, allowing AI assistants to find and reference relevant imagery directly within conversations."
timholden,figma-mcp-server,1.3,0,7.8,-2.34,0.5660000000000001,MINIMAL,"This Figma MCP server, developed by TimHolden, provides a robust interface to the Figma API for managing design system elements. Built with TypeScript, it offers comprehensive variable management, file operations, component handling, and collaboration features. The server implements variable validation, batch operations, and support for variable modes and scopes. By abstracting Figma API interactions into a standardized MCP interface, it enables AI systems to easily manipulate and analyze design assets. This implementation is particularly valuable for design teams and developers working with Figma, facilitating use cases such as design system management, automated style updates, and collaborative design workflows across various project scales."
dvcrn,mcp-server-siri-shortcuts,1.3,0,5.8,-1.7399999999999998,1.1260000000000001,MINIMAL,"This MCP server provides access to Siri shortcuts functionality on macOS, allowing AI assistants to list, open, and run shortcuts from the Shortcuts app. It dynamically generates tools for each available shortcut, exposing all shortcuts to the LLM for flexible automation. The server uses the macOS 'shortcuts' CLI command under the hood and supports both direct text input and file-based input for shortcut execution."
burningion,video-editing-mcp,1.9,0,7.7,-2.31,1.6309999999999998,MINIMAL,"This MCP server, developed by Kirk Kaiser, enables AI-assisted video editing and searching using the Video Jungle API. It provides tools for adding videos, searching video content using embeddings, and generating edits from single or multiple video files. The implementation is built in Python 3.11+ and integrates with libraries like einops, timm, and transformers for advanced video processing capabilities. It's designed for content creators and video editors who want to leverage AI to streamline their workflow, allowing for natural language queries to find relevant video clips and automate editing tasks. The server also includes an optional feature to search local video files on macOS, making it versatile for both cloud-based and local video management."
opendatamcp,opendatamcp,1.9,0,7.6,-2.2800000000000002,1.672,MINIMAL,"OpenDataMCP, developed by the OpenDataMCP organization, connects open datasets to large language models through the Model Context Protocol. It provides a CLI tool for easy setup of MCP servers that expose public data sources, starting with integration for Claude AI. The implementation focuses on simplicity and standardization, using Python with minimal dependencies. OpenDataMCP aims to make millions of open government, NGO, and company datasets accessible to AI applications. It enables use cases like querying transportation data, analyzing public records, or incorporating open statistics into AI-assisted research and analysis tasks. The project is community-driven, allowing contributors to easily add new data sources using provided templates and guidelines."
ee0pdt,godot-mcp,1.3,0,7.0,-2.0999999999999996,1.09,MINIMAL,"This MCP server implementation provides integration between Godot and the Model Context Protocol, allowing access to the currently open script in the Godot editor. Developed as a TypeScript server with a Godot editor plugin, it enables AI assistants like Claude to interact with Godot scripts, supporting features such as reading current scripts, listing project scripts, and updating script information. The implementation is designed for game developers and AI researchers looking to enhance their Godot development workflow with AI assistance."
neka-nat,freecad-mcp,1.9,0,5.2,-1.56,1.744,MINIMAL,"FreeCAD MCP enables AI-driven CAD modeling by providing a remote procedure call (RPC) server that allows Claude Desktop to control FreeCAD programmatically. Developed by neka-nat, this implementation supports operations like creating documents, inserting parts from libraries, editing objects, and executing arbitrary Python code, making it powerful for generative design and automated 3D modeling workflows."
sirmews,mcp-pinecone,1.9,0,6.9,-2.0700000000000003,1.607,MINIMAL,"This MCP server, developed by sirmews, enables AI assistants like Claude to interact with Pinecone vector databases for retrieval-augmented generation (RAG) applications. Built with Python, it provides tools for semantic search, document retrieval, and document upsert operations on Pinecone indexes. The implementation stands out by leveraging Pinecone's inference API for embedding generation, simplifying the architecture. By connecting AI capabilities with Pinecone's efficient vector search, this server allows AI systems to augment their knowledge with relevant information from large document collections. It is particularly useful for building AI applications that require real-time access to up-to-date information, such as question-answering systems, chatbots with domain-specific knowledge, or AI-powered research assistants."
taida957789,ida-mcp-server-plugin,1.3,0,7.2,-2.16,1.084,MINIMAL,"IDA Pro MCP Server enables AI assistants to interact directly with IDA Pro for binary analysis tasks. This plugin provides a comprehensive set of tools for remote querying and control, allowing AI systems to examine byte data, retrieve disassembly code, access decompiled pseudocode, query function information, and perform various binary analysis operations. Running locally on port 3000, it creates a bridge between AI assistants like Claude and IDA Pro's powerful reverse engineering capabilities, making it particularly valuable for automated malware analysis, vulnerability research, and collaborative reverse engineering projects."
HEAD,filesystem,1.3,0,0,-0.0,1.3,MINIMAL,"This Quarkus-based MCP server implementation provides a filesystem interface for AI models. Developed by the Quarkus team, it leverages Quarkus' fast startup and low memory footprint to offer efficient file system operations. The server includes dependencies for Jackson JSON processing, Qute templating, and Arc dependency injection. It supports both JVM and native compilation modes, with a Maven wrapper for easy building and running. This implementation is ideal for scenarios requiring AI models to interact with local file systems, such as automated file management, content organization, or data processing tasks, while benefiting from Quarkus' performance optimizations."
HEAD,jdbc,1.3,0,0,-0.0,1.3,MINIMAL,"This Model Context Protocol server, developed by the Quarkus team, enables AI models to interact with databases through JDBC connections. Built using Quarkus and JBang, it provides tools for querying, modifying, and exploring database content with just a JDBC URL. The implementation focuses on simplicity and flexibility, supporting various database types including in-memory, downloadable, and live databases. It's particularly useful for AI-assisted database management tasks, allowing models to perform operations like data analysis, schema exploration, and content manipulation across different database systems without needing direct access to the underlying infrastructure. The server's design makes it adaptable for various use cases where AI needs to interact with structured data, such as automated reporting, data migration, or dynamic query generation."
xgenerationlab,xiyan_mcp_server,1.3,0,7.0,-2.0999999999999996,1.01,MINIMAL,"XiYan MCP Server enables AI assistants to interact with MySQL databases through natural language queries using XiYanSQL. Developed by Zhiling Luo, this server provides capabilities to list tables, read data, and execute SQL queries in a controlled, secure environment. It integrates with LLM APIs for natural language processing and requires minimal configuration through environment variables, making it particularly valuable for database exploration and analysis workflows where direct SQL access might be risky or impractical."
burtthecoder,mcp-maigret,1.5,0,7.7,-2.31,1.269,MINIMAL,"This MCP server, developed by BurtTheCoder, enables AI assistants like Claude to leverage the OSINT capabilities of Maigret. Built in JavaScript/TypeScript, it provides functionality for searching usernames across social networks and analyzing URLs. The implementation stands out by offering Docker-based execution, multiple output formats, and site filtering options. By connecting AI capabilities with Maigret's extensive data collection, this server allows AI systems to gather and process publicly available user information programmatically. It is particularly useful for building AI-powered tools for social media research, identity verification, and open-source intelligence gathering that require ethical and responsible use of public data sources."
gannonh,firebase-mcp,1.7,0,7.6,-2.2800000000000002,0.972,MINIMAL,"Firebase MCP server provides a standardized interface for AI assistants to interact with Firebase services including Authentication, Firestore, and Storage. Built by Gannon Hall, this TypeScript implementation enables LLM clients to perform user management, document database operations, and file storage tasks through a consistent set of MCP tools. Particularly useful for developers building AI-powered applications that require seamless integration with Firebase's backend services."
spences10,mcp-sequentialthinking-tools,1.7,0,6.4,-1.92,1.508,MINIMAL,"This MCP server for Sequential Thinking Tools, developed by Scott Spence, provides a structured approach to problem-solving and decision-making processes. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for step-by-step analysis, branching thoughts, and adaptive thinking strategies. The implementation focuses on guiding AI models through complex reasoning tasks, with features for tool recommendation and confidence assessment. It's particularly useful for AI assistants and applications needing to break down problems, plan solutions, and conduct reflective analysis, enabling use cases such as strategic planning, troubleshooting, and multi-step decision making without relying on predefined problem-solving frameworks."
tonypan2,minesweeper-mcp-server,1.3,0,4.3,-1.29,1.171,MINIMAL,"Minesweeper MCP Server provides a bridge between Claude and a Minesweeper game server, allowing AI assistants to play the classic puzzle game through a set of tools. Built by tonypan2, it communicates with a locally running game server via HTTP requests, translating game actions (start, click, flag, unflag) into API calls and returning the game state as images. The server is designed for integration with Claude Desktop through its configuration system, making it ideal for demonstrating AI problem-solving capabilities in a visual game environment without requiring the assistant to leave the conversation interface."
huccihuang,bilibili-mcp-server,1.3,0,3.0,-0.8999999999999999,1.21,MINIMAL,"Bilibili MCP Server provides a simple interface to the Bilibili API, enabling search functionality across the popular Chinese video platform. Built with FastMCP, it exposes a single tool that allows querying the Bilibili search API with optional authentication via session data cookies. The implementation is lightweight, requiring only Python 3.12 and minimal dependencies (mcp[cli] and requests), making it ideal for workflows that need to retrieve video content, user information, or other searchable data from Bilibili without leaving the conversation interface."
jae-jae,g-search-mcp,1.7,0,7.3,-2.19,1.4809999999999999,MINIMAL,"G-Search MCP is a powerful server for performing parallel Google searches with multiple keywords simultaneously, using Playwright to automate browser interactions. Developed by jae-jae, it features intelligent CAPTCHA detection with automatic switching to visible browser mode when verification is needed, browser state persistence to reduce detection likelihood, and user behavior simulation to mimic real browsing patterns. The implementation includes robust error handling, configurable search parameters (result limits, timeouts, locales), and returns structured JSON results, making it ideal for applications requiring efficient batch searching or when AI assistants need direct access to search engine results without triggering anti-bot measures."
jkf87,hwp-mcp,1.3,0,6.6,-1.9799999999999998,1.102,MINIMAL,"HWP MCP Server provides a bridge between AI assistants and Hangul Word Processor (HWP) documents, enabling document manipulation through a standardized interface. The implementation supports both Python (Flask-based) and Node.js versions, utilizing the HWP COM interface via pywin32 or winax respectively to control document operations. This server allows AI assistants to create, edit, and format Korean documents in the proprietary HWP format, making it particularly valuable for workflows involving Korean language document processing that require direct interaction with the Hangul Office suite."
openbnb-org,mcp-server-airbnb,1.9,0,5.8,-1.7399999999999998,1.726,MINIMAL,"This MCP server provides AI assistants with access to Airbnb's search and listing details functionality without requiring API keys. Built with TypeScript using the Model Context Protocol SDK, it offers two main tools: airbnb_search for finding vacation rentals with various filters, and airbnb_listing_details for retrieving comprehensive information about specific properties. The implementation respects robots.txt rules by default (with an option to bypass), uses cheerio for HTML parsing, and processes the data to reduce context load by flattening arrays and cleaning objects. Developed by OpenBnB, it's ideal for travel planning use cases where users need to explore accommodation options and compare listing details."
rishikavikondala,mcp-server-aws,1.3,0,6.7,-2.0100000000000002,1.099,MINIMAL,"This MCP server, developed by Rishika Vikondala, enables AI assistants like Claude to interact with AWS resources, specifically S3 and DynamoDB services. It provides tools for common operations such as creating/deleting S3 buckets, uploading/downloading objects, and performing CRUD operations on DynamoDB tables and items. The server integrates with the AWS SDK and automatically logs all operations, making them accessible through an audit endpoint. By bridging AI capabilities with AWS infrastructure management, this implementation facilitates easier cloud resource manipulation and monitoring. It is particularly useful for DevOps teams automating AWS workflows, developers needing quick access to cloud resources, or system administrators performing routine maintenance tasks through AI-assisted interactions."
newideas99,deepseek-thinking-claude-3.5-sonnet-cline-mcp,1.3,0,6.9,-2.0700000000000003,1.0070000000000001,MINIMAL,"This RAT (Retrieval Augmented Thinking) MCP server, developed by Skirano, implements a two-stage reasoning process combining DeepSeek's analysis capabilities with various response models. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers flexible model selection, persistent conversation context, and customizable reasoning visibility. The implementation focuses on enhancing AI responses through structured reasoning, with features like context management and multi-model support. It's particularly useful for developers and researchers working on improving AI conversation quality, enabling use cases such as more thoughtful chatbots, enhanced question-answering systems, and AI-assisted analysis tasks without directly dealing with individual API complexities."
pyroprompts,any-chat-completions-mcp,1.3,0,6.5,-1.9500000000000002,1.105,MINIMAL,"This MCP server, developed by pyroprompts, enables AI assistants to interact with any OpenAI SDK-compatible chat completion API, including OpenAI, Perplexity, Groq, xAI, and PyroPrompts. It provides a single 'chat' tool that relays questions to the configured AI provider and returns responses. Built in TypeScript, the implementation offers a flexible way to integrate various AI models into Claude Desktop through a standardized MCP interface. By abstracting away provider-specific details, this server allows easy switching between different AI services without changing the core integration. It is particularly useful for users who want to leverage multiple AI providers within Claude, experiment with different models, or avoid vendor lock-in while maintaining a consistent interaction pattern."
ccq1,awsome_kali_mcpservers,1.3,0,6.7,-2.0100000000000002,1.099,MINIMAL,"Awesome Kali MCP Servers provides a secure interface for AI assistants to execute Kali Linux security tools through a sandboxed environment. The implementation wraps common security utilities including nmap for network scanning, objdump and nm for binary analysis, strings for file examination, and wireshark/tshark for packet analysis. Built with Python using Docker containers for isolation, it enforces configurable resource limits and network access controls to prevent abuse while maintaining tool functionality. This server enables AI systems to perform security analysis tasks like vulnerability scanning, binary reverse engineering, and network traffic inspection without direct system access, making it valuable for security professionals who want to leverage AI assistants for technical security operations."
jingcheng-chen,rhinomcp,1.3,0,7.6,-2.2800000000000002,1.028,MINIMAL,"RhinoMCP is a plugin for Rhino 8 that implements the Model Context Protocol, enabling AI assistants to interact with Rhino's 3D modeling environment. The plugin creates a server that exposes Rhino's functionality through MCP, allowing for programmatic control of modeling operations. Built on the C# SDK for MCP, it features start and stop commands to manage the server connection, making it useful for automating design workflows and enabling conversational interfaces to control Rhino."
maquina-app,rails-mcp-server,1.3,0,7.8,-2.34,1.066,MINIMAL,"Rails MCP Server provides a Ruby implementation that allows LLMs to interact with Rails projects through a standardized protocol. It enables AI models to browse project files, view routes, inspect models, and retrieve database schema information across multiple Rails applications. The server follows the XDG Base Directory Specification for configuration, includes tools for project navigation and codebase exploration, and integrates seamlessly with Claude Desktop through either an automated setup script or manual configuration. Particularly valuable for developers seeking AI assistance with Rails application analysis, understanding, and exploration without leaving their conversation interface."
weaviate,mcp-server-weaviate,1.3,0,5.6,-1.6799999999999997,0.968,MINIMAL,"Bring intuitive AI-native applications to life with less hallucination, data leakage, and vendor lock-in with the open source vector database developers love."
ktanaka101,mcp-server-duckdb,1.9,0,7.0,-2.0999999999999996,1.69,MINIMAL,"This DuckDB MCP server, developed by ktanaka101, provides a flexible interface for language models to interact with DuckDB databases. It enables AI agents to execute SQL queries, create tables, and inspect schemas through a controlled interface. The server can be run in read-only mode for enhanced security and integrates with Claude Desktop. By leveraging DuckDB's column-oriented architecture, it allows AI systems to efficiently analyze large datasets locally. This implementation is particularly useful for AI assistants designed to perform ad-hoc data analysis, generate insights from local files, or provide data-driven recommendations using DuckDB as a high-performance analytical database backend."
tiberriver256,mcp-server-azure-devops,1.3,0,7.4,-2.2199999999999998,1.078,MINIMAL,"This MCP server implementation provides a bridge between AI assistants and Azure DevOps, enabling interaction with projects, work items, repositories, pull requests, branches, and pipelines. Developed by Tiberriver256, it offers tools for managing Azure DevOps resources and automating development workflows. The server is designed for DevOps teams looking to enhance their Azure-based processes with AI-driven assistance, supporting use cases like automated code reviews, work item management, and CI/CD pipeline optimization."
0xkoda,wiremcp,1.3,0,7.4,-2.2199999999999998,1.078,MINIMAL,"WireMCP is a network analysis server that empowers LLMs with real-time traffic monitoring capabilities by leveraging Wireshark's tshark utility. Developed by 0xKoda, it provides five specialized tools for capturing and analyzing network data: raw packet capture, protocol statistics, conversation tracking, and threat detection through URLhaus blacklist integration. The implementation automatically locates tshark across different operating systems, handles large packet captures by intelligently trimming output, and presents results in structured formats optimized for LLM comprehension. Ideal for security analysts using AI assistants for threat hunting, network diagnostics, and anomaly detection without requiring direct access to network monitoring tools."
ccabanillas,notion-mcp,1.0,0,7.5,-2.25,0.725,MINIMAL,"This Notion MCP server, developed by Chase Cabanillas, integrates Notion's API with the Model Context Protocol, enabling AI-assisted workflows to interact with Notion databases and pages. Built with Python and leveraging libraries like httpx and pydantic, it exposes Notion operations as MCP resources and tools, including database listing, querying, page creation/updating, and search functionality. The implementation focuses on asynchronous operations, proper error handling, and adherence to MCP specifications. It's particularly useful for developers and teams looking to incorporate Notion's organizational capabilities into AI-driven applications, allowing for dynamic content management and retrieval within Notion workspaces."
scorzeth,anki-mcp-server,1.0,0,5.1,-1.53,0.847,MINIMAL,"This Anki MCP server, developed as an open-source project, provides AI assistants with a bridge to interact with locally running Anki instances. It leverages the Anki-Connect add-on to offer tools for reviewing and creating flashcards, as well as retrieving cards from various decks. Built with TypeScript and the @modelcontextprotocol/sdk, it implements resource management for card retrieval, tools for card manipulation, and prompts for high-quality card creation based on Andy Matuschak's principles. The server abstracts Anki's complexities, allowing AI systems to seamlessly incorporate spaced repetition and flashcard management into their workflows. It's particularly useful for students, educators, and lifelong learners looking to enhance their study routines with AI-driven flashcard creation and review processes."
danilop,mcp2lambda,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"MCP2Lambda enables Large Language Models to interact with AWS Lambda functions as tools without code changes. It acts as a bridge between MCP clients and Lambda functions, allowing models to access private resources, interact with AWS services, and leverage Lambda's capabilities for data processing and external API access. The implementation includes autodiscovery of Lambda functions and secure invocation, making it useful for extending AI capabilities in enterprise environments with existing AWS infrastructure."
src,mcp,1.2,0,0,-0.0,1.2,MINIMAL,"Lokka is an MCP server that provides a bridge between AI assistants and Microsoft Graph API, enabling natural language interaction with Microsoft 365 tenants. Developed by Merill Fernando, it allows users to query and manage their Microsoft environment through simple conversational prompts rather than complex API calls. The server authenticates with Microsoft Entra using client credentials, translates natural language requests into appropriate Graph API calls, and returns formatted results. Particularly valuable for administrators who need to perform tasks like creating security groups, reviewing conditional access policies, or managing Intune configurations without leaving their AI assistant interface."
taazkareem,clickup-mcp-server,1.6,2,7.5,-2.25,1.125,MINIMAL,"This ClickUp MCP server, developed by Talib Kareem, integrates ClickUp task management with AI systems through the Model Context Protocol. Built with TypeScript and leveraging the MCP SDK, it provides a standardized interface for AI models to interact with ClickUp tasks, enabling automated task creation, updates, and retrieval. The implementation focuses on simplifying project management workflows and enhancing productivity by allowing AI assistants to manage tasks programmatically. It's particularly useful for teams looking to automate routine task management, generate task summaries, or incorporate AI-driven insights into their project workflows, bridging the gap between task management and AI capabilities."
blackwhite084,playwright-plus-python-mcp,1.0,0,6.6,-1.9799999999999998,0.802,MINIMAL,"This Playwright-powered MCP server, developed by YUNYING, enables AI assistants to interact with web browsers through the Model Context Protocol. Built in Python, it provides a bridge between MCP clients and Playwright's browser automation capabilities, allowing operations like navigation, screenshots, clicks, and JavaScript execution. The implementation leverages libraries such as MCP for protocol handling and Playwright for browser control. By abstracting browser interactions into MCP-compatible tools, it allows AI systems to easily perform web automation tasks without directly handling browser complexities. This server is particularly useful for scenarios requiring AI-driven web scraping, testing, or content generation, facilitating use cases such as automated data collection, UI testing, and dynamic web content creation."
chigwell,telegram-mcp,1.0,0,7.6,-2.2800000000000002,0.272,MINIMAL,"Telegram MCP Server provides a bridge between Claude and Telegram messaging, enabling direct interaction with Telegram chats without leaving the conversation interface. Built using Python, Telethon, and the MCP Python SDK, it exposes three core tools: retrieving chat lists, fetching messages from specific chats, and sending messages to contacts. The implementation authenticates with the Telegram API using credentials stored in environment variables and integrates seamlessly with Claude Desktop through a simple configuration. Particularly valuable for users who want to monitor or participate in Telegram conversations while working with Claude."
qpd-v,mcp-ragdocs,1.0,0,7.5,-2.25,0.725,MINIMAL,"This MCP server, developed by qpd-v, enables AI assistants to perform semantic search and retrieval of documentation using a vector database (Qdrant). It provides tools for adding documentation from URLs, searching through stored content, and listing sources. The server implements web scraping, text chunking, and embedding generation using either Ollama or OpenAI. By connecting AI capabilities with vector search technology, this implementation empowers AI assistants to quickly find relevant information within large document collections. It is particularly useful for applications requiring context-aware information retrieval, knowledge base augmentation, or any scenario where an AI system needs to efficiently access and reason about domain-specific documentation."
getsentry,sentry-mcp,1.0,12,7.5,-2.25,0.025000000000000022,LOW,"A server implementation of the Model Context Protocol (MCP) for Sentry, allowing AI applications to retrieve error and performance data from Sentry to provide context about application issues."
gongrzhe,office-word-mcp-server,1.6,0,7.8,-2.34,1.366,MINIMAL,"Office-Word-MCP-Server provides a bridge between AI assistants and Microsoft Word documents, enabling rich document editing capabilities through a standardized interface. Built with Python and python-docx, it exposes tools for document creation, content addition, text formatting, table manipulation, and style management while handling common edge cases like missing styles and locked files. The server is particularly valuable for users who need to programmatically create and modify Word documents through natural language requests, with features like proportional image scaling, custom style creation, and detailed error handling making it suitable for both simple editing tasks and complex document automation workflows."
wopal-cn,mcp-hotnews-server,1.6,0,6.5,-1.9500000000000002,1.405,MINIMAL,"This MCP server, developed by SamuelXu, provides real-time hot trending topics from major Chinese social platforms and news sites. It integrates with platforms like Zhihu, Weibo, and Bilibili to aggregate and serve up-to-date trending information. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers a containerized solution via Docker for easy deployment. The server is designed for applications requiring current Chinese social media trends, such as news aggregators, social media analytics tools, or AI assistants needing context on Chinese online discourse."
canvrno,proxmoxmcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"Proxmox MCP Server provides a Model Context Protocol interface for managing Proxmox virtualization environments, enabling AI assistants to interact with virtual machines, containers, storage, and cluster resources. Built by Kevin, it offers tools for retrieving node status, executing commands within VMs via QEMU guest agent, monitoring storage pools, and checking cluster health - all through a structured API with comprehensive error handling and logging. The implementation uses token-based authentication with Proxmox's API and includes detailed formatting for console output, making it particularly valuable for system administrators who need to monitor and manage their Proxmox infrastructure without leaving their conversation interface."
genomoncology,biomcp,1.4,2,7.5,-2.25,1.375,MINIMAL,"BioMCP is a server implementation that provides structured access to key biomedical databases through a unified interface. Developed by GenomOncology, it connects to ClinicalTrials.gov, PubMed (via PubTator3), and MyVariant.info to enable searching and retrieving information about clinical trials, research articles, and genetic variants. The server exposes these capabilities as MCP tools that can be used by AI assistants to access up-to-date biomedical data, overcoming knowledge cutoff limitations. BioMCP handles entity normalization, intelligent rendering of complex data as Markdown, and transparent attribution of sources, making it valuable for biomedical research, clinical decision support, and literature review workflows."
erickwendel,erickwendel-contributions-mcp,1.0,0,7.5,-2.25,0.775,MINIMAL,"The erickwendel-contributions-mcp server provides AI assistants with access to Erick Wendel's content contributions across different platforms through a set of specialized tools. Built with Node.js and the Model Context Protocol SDK, it enables querying talks, posts, and videos with filtering options by language, title, country, and other parameters. The implementation includes Docker containerization for easy deployment and is configured through Smithery.ai for seamless integration with AI assistants. This server is particularly valuable for users wanting to discover and reference Erick Wendel's technical content within AI assistant conversations without needing to search across multiple platforms manually."
admica,filescopemcp,1.0,1,7.3,-2.19,0.881,MINIMAL,"FileScopeMCP is a TypeScript-based MCP server that analyzes codebases to identify important files based on dependency relationships, providing AI tools with structural understanding of projects. It scans source files to detect imports across multiple languages (JavaScript, TypeScript, Python, C/C++, Rust, Lua, Zig), calculates importance scores (0-10) based on dependency patterns, and generates visualizations using Mermaid diagrams. The implementation features persistent storage of file trees, cross-platform path handling, and tools for querying file importance, finding critical components, and adding human-readable summaries to files, making it valuable for developers who want AI assistants to understand the architecture and significance of different files in their projects."
okooo5km,memory-mcp-server,1.0,0,7.1,-2.13,0.787,MINIMAL,"Memory MCP Server provides a knowledge graph management system for AI assistants to maintain persistent memory across conversations. Built in Swift, it enables creating, reading, updating, and deleting entities and relations in a JSON-based storage system. The server implements nine specialized tools for graph operations including entity creation, relation management, observation tracking, and search capabilities. Data is stored in a configurable file location, making it ideal for applications requiring AI assistants to build and maintain structured knowledge over time without losing context between sessions."
pfldy2850,py-mcp-naver,1.0,0,6.7,-2.0100000000000002,0.29900000000000004,MINIMAL,"Naver MCP Server provides a comprehensive interface to Naver's OpenAPI services through the Model Context Protocol. This implementation exposes 14 different tools for interacting with Naver's search capabilities, including blog, news, book, image, and shopping searches, as well as specialized functions like adult content checking and spelling correction. The server requires Naver API credentials to function and is built using FastMCP, making it easy to deploy and integrate with AI assistants. Particularly valuable for applications requiring Korean-language search capabilities and access to Naver's extensive content ecosystem."
tumf,mcp-text-editor,1.6,0,7.8,-2.34,1.366,MINIMAL,"This MCP text editor server, developed by tumf, enables AI assistants like Claude to perform line-oriented text file operations through a standardized API. Built in Python, it provides capabilities for efficient partial file access, concurrent editing with conflict detection, and atomic multi-file operations. The implementation stands out by optimizing for token efficiency in LLM applications while ensuring safe, synchronized file access. By connecting AI capabilities with robust text editing functionality, this server allows AI systems to read, modify, and analyze text files with fine-grained control. It is particularly useful for collaborative editing tools, automated text processing systems, and AI-powered development assistants that need to interact with codebases or documentation."
vertile-ai,next-mcp-server,1.0,0,6.8,-2.04,0.796,MINIMAL,"Next.js MCP server enables AI assistants to analyze and understand Next.js applications by extracting API route information, validation schemas, and type definitions. Built by jazelly, it scans project directories to discover route handlers, parameters, status codes and response types, providing structured insights about the application's API surface. Particularly valuable for developers who want AI assistants to help with Next.js API development, documentation, and testing without manually documenting endpoint details."
mcp,snak,1.0,0,0,-0.0,1.0,MINIMAL,"Snak is a toolkit for creating AI agents that interact with the Starknet blockchain, developed by Kasar Labs. The implementation provides both a ready-to-use NestJS server with web interface and an NPM package, supporting multiple AI providers including Anthropic, OpenAI, Google Gemini, and Ollama. It features a modular architecture with plugins for various DeFi operations, wallet management capabilities, and autonomous agent functionality, making it ideal for developers building blockchain-powered AI assistants that can execute transactions, monitor balances, and interact with smart contracts on Starknet."
madarco,ragrabbit,1.0,0,7.4,-2.2199999999999998,0.778,MINIMAL,"This MCP server implementation provides AI assistants with access to RagRabbit, an open-source system for site AI search and LLM.txt generation. It integrates with LlamaIndex and pgVector to crawl websites, convert pages to markdown, generate vector embeddings, and enable AI-powered search and question answering from indexed content. The server exposes functionality for crawling URLs, managing indexes, and querying the knowledge base, making it useful for applications requiring domain-specific information retrieval and conversational AI capabilities."
b12io,website-generator-mcp-server,1.0,0,4.0,-1.2000000000000002,0.88,MINIMAL,"B12's website generator MCP server enables AI assistants to create business websites through a simple interface. Developed by b12io, this TypeScript implementation provides a single tool that accepts a business name and description, then generates a customized website accessible via a signup link. The server uses the Model Context Protocol to handle tool registration and execution, communicating through stdio transport for seamless integration with Claude Desktop. It's particularly useful for quickly generating professional website designs during conversations about business needs without requiring technical expertise."
wshobson,mcp-trader,1.0,0,7.8,-2.34,0.734,MINIMAL,"This MCP trader server, developed by Seth Hobson, provides technical analysis capabilities for stock traders. It integrates with the Tiingo API to fetch financial data and leverages libraries like pandas and TA-Lib to perform comprehensive technical analysis on stocks. The server offers a single 'analyze-stock' tool that takes a stock symbol and returns key technical indicators including moving averages, momentum oscillators, and volume metrics. Built with Python and designed to run as a local MCP server, it's particularly useful for AI assistants or applications needing to generate detailed technical analysis reports or make data-driven trading recommendations based on current market data."
run-llama,llamacloud-mcp,1.0,0,5.9,-1.7700000000000002,0.677,MINIMAL,"LlamaCloud MCP server provides a tool for querying LlamaIndex documentation through RAG (Retrieval-Augmented Generation) using the LlamaCloud managed index service. Developed by Laurie Voss, this implementation connects to a pre-configured LlamaCloud index containing LlamaIndex documentation and uses it to answer queries with detailed responses including code examples. The server requires a LlamaCloud API key and optionally an OpenAI API key for powering the RAG queries, making it ideal for developers who need up-to-date access to LlamaIndex documentation within their AI assistant workflows."
yuchenssr,mindmap-mcp-server,1.4,0,7.8,-2.34,1.166,MINIMAL,"Mindmap-MCP-Server provides a bridge between Markdown content and interactive mind maps using the markmap-cli tool. Built by YuChenSSR, this server exposes a single tool that converts Markdown text into HTML-based mind maps, with options to return either the complete HTML content or just the file path to the generated visualization. The implementation handles temporary file creation, subprocess management for the markmap-cli tool, and proper error handling. It's particularly useful for workflows that involve visualizing structured content, organizing thoughts, or creating interactive knowledge maps directly within Claude conversations."
supercurses,powerpoint,1.0,0,6.5,-1.9500000000000002,0.6950000000000001,MINIMAL,"The server implements multiple tools:

create-presentation: Starts a presentation
Takes ""name"" as required string arguments
Creates a presentation object
add-slide-title-only: Adds a title slide to the presentation
Takes ""presentation_name"" and ""title"" as required string arguments
Creates a title slide with ""title"" and adds it to presentation
add-slide-title-content: Adds a title with content slide to the presentation
Takes ""presentation_name"", ""title"", ""content"" as required string arguments
Creates a title with content slide with ""title"" and ""content"" and adds it to presentation
add-slide-title-with-table: Adds a title slide with a table
Takes ""presentation_name"", ""title"", ""data"" as required string and array arguments
Creates a title slide with ""title"" and adds a table dynamically built from data
add-slide-title-with-chart: Adds a title slide with a chart
Takes ""presentation_name"", ""title"", ""data"" as required string and object arguments
Creates a title slide with ""title"" and adds a chart dynamically built from data. Attempts to figure out the best type of chart from the data source.
add-slide-picture-with-caption: Adds a picture with caption slide
Takes ""presentation_name"", ""title"", ""caption"", ""image_path"" as required string arguments
Creates a picture with caption slide using the supplied ""title"", ""caption"", and ""image_path"". Can either use images created via the ""generate-and-save-image"" tool or use an ""image_path"" supplied by the user (image must exist in folder_path)
open-presentation: Opens a presentation for editing
Takes ""presentation_name"" as required arguments
Opens the given presentation and automatically saves a backup of it as ""backup.pptx""
This tool allows the client to work with existing pptx files and add slides to them. Just make sure the client calls ""save-presentation"" tool at the end.
save-presentation: Saves the presentation to a file.
Takes ""presentation_name"" as required arguments.
Saves the presentation to the folder_path. The client must call this tool to finalize the process.
generate-and-save-image: Generates an image for the presentation using a FLUX model
Takes ""prompt"" and ""file_name"" as required string arguments
Creates an image using the free FLUX model on TogetherAI (requires an API key)"
context-hub,generator,1.0,0,7.5,-2.25,0.725,MINIMAL,"Context Generator is a PHP-based tool for creating structured documentation from various sources including files, GitHub repositories, Git diffs, and URLs. It features a modular architecture with a powerful configuration system that supports imports, variables, and custom modifiers to transform content. The implementation includes an MCP server component that exposes prompts and tools for AI assistants to interact with the filesystem, retrieve project structure, and execute custom commands. Particularly useful for generating comprehensive code documentation, analyzing changes in projects, and providing context for AI-assisted development workflows."
kaliaboi,mcp-zotero,1.2,0,6.9,-2.0700000000000003,0.907,MINIMAL,"This Zotero MCP server, developed by Abhishek Kalia, provides AI assistants with a standardized interface to interact with Zotero libraries. Built using TypeScript and leveraging the Zotero API client, it offers capabilities for listing collections, retrieving item details, searching libraries, and fetching recently added papers. The server abstracts Zotero API authentication and request handling, enabling seamless integration with AI systems. It's particularly valuable for researchers and academics working with AI assistants, facilitating use cases such as literature reviews, citation management, and research organization within the Zotero ecosystem."
metatool-ai,mcp-server-metamcp,1.6,0,6.9,-2.0700000000000003,1.393,MINIMAL,"This MCP server implementation manages multiple MCPs through a centralized interface, streamlining AI assistant interactions across various platforms. Developed by James Zhang, it utilizes TypeScript and integrates with the Model Context Protocol SDK. The server focuses on secure API key management and provides a unified access point for multiple MCP services. It's designed for scalability and easy configuration, making it particularly useful for applications that need to coordinate multiple AI assistants or integrate diverse AI services. The implementation supports Docker deployment and is optimized for production environments, offering a robust solution for complex AI orchestration scenarios."
thrashr888,terraform-mcp-server,1.4,0,7.4,-2.2199999999999998,1.178,MINIMAL,"This MCP server implementation provides tools for interacting with the Terraform Registry API, enabling AI agents to query provider information, resource details, module metadata, and generate example configurations. Developed by Paul Thrasher, it offers functionalities such as provider lookup, resource usage examples, module recommendations, data source lookup, and schema details retrieval. Built with TypeScript and leveraging the Model Context Protocol SDK, the server is particularly useful for AI applications that need to automate Terraform-related tasks, assist in infrastructure-as-code development, or provide intelligent suggestions for Terraform configurations."
biegehydra,bifrostmcp,1.0,0,7.8,-2.34,0.766,MINIMAL,This MCP server implementation provides C# language features via the Model Context Protocol. It integrates with the C# extension for Visual Studio Code and exposes capabilities like finding symbol references across a codebase. The server runs on port 8003 and is designed to enhance AI-assisted coding workflows for C# projects.
jfrog,mcp-jfrog,1.0,0,7.1,-2.13,0.28700000000000003,MINIMAL,"JFrog MCP Server provides a bridge to the JFrog Platform, enabling AI assistants to interact with Artifactory repositories, builds, security scanning, and release management. Developed by JFrog LTD, this TypeScript implementation exposes over 20 specialized tools for operations like repository creation, build tracking, package vulnerability scanning, and release bundle distribution. The server authenticates via JFrog access tokens and handles errors gracefully with detailed messages. Particularly valuable for DevOps teams and developers who want to leverage AI assistants for artifact management, security analysis, and release automation without switching context to the JFrog web interface."
pskill9,website-downloader,1.0,0,6.2,-1.8599999999999999,0.8140000000000001,MINIMAL,"This website downloader MCP server, developed by an unnamed author, provides a tool for downloading entire websites using wget. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers functionality to recursively download web pages, preserve site structure, and convert links for local viewing. The server implements depth control, domain restriction, and file extension handling. By abstracting the complexities of website archiving, it enables AI systems to easily capture and analyze web content offline. This implementation is particularly valuable for applications requiring local copies of websites, facilitating use cases such as web archiving, offline content analysis, and website migration or backup tasks."
sirmews,apple-notes-mcp,1.6,0,6.3,-1.8900000000000001,1.411,MINIMAL,"This Apple Notes MCP server, developed by sirmews, enables access and and search of local Apple Notes databases. It provides tools for retrieving all notes, reading specific notes, and performing searches across note content. Built in Python, the implementation exposes Apple Notes data via a standardized MCP interface, allowing Claude to analyze and interact with personal note collections. By bridging AI models with Apple's native note-taking app, this server enhances Claude's ability to process personal information, assist with note organization, and augment information retrieval from Apple Notes. It is particularly useful for users seeking AI-powered knowledge management and research assistance within their existing Apple Notes ecosystem."
jordyzomer,codeql-mcp,1.0,0,4.8,-1.44,0.856,MINIMAL,"CodeQL MCP Server provides a bridge to the CodeQL static analysis engine, enabling AI assistants to analyze codebases for security vulnerabilities and quality issues. The implementation offers tools for registering CodeQL databases, evaluating queries against codebases, decoding query results, and performing quick evaluations of specific classes or predicates. Built with Python using the FastMCP framework, it exposes a simple API that handles the complexities of CodeQL operations while providing structured results that can be easily interpreted by language models. This server is particularly valuable for security researchers and developers who want to leverage AI assistants for code analysis without directly interacting with the CodeQL CLI."
mhyrr,sketchup-mcp,1.0,0,6.8,-2.04,0.796,MINIMAL,"SketchupMCP connects Sketchup to Claude AI through a bidirectional TCP socket connection, enabling AI-assisted 3D modeling and scene manipulation. Built with Python and Ruby, it provides tools for creating, modifying, and transforming components, applying materials, inspecting scenes, and executing Ruby code directly in Sketchup. The implementation includes both a Sketchup extension that creates a TCP server within the application and a Python MCP server that handles the protocol communication, making it ideal for users who want to leverage AI capabilities for architectural design, interior modeling, or general 3D content creation without leaving their conversation interface."
richardhan,mssql_mcp_server,1.0,0,7.5,-2.25,0.775,MINIMAL,"This MCP server implementation, developed by Dana K. Williams, provides secure interaction with Microsoft SQL Server databases. Built with Python and leveraging libraries like mcp and pymssql, it offers a bridge between AI assistants and SQL Server data. The implementation focuses on security, with detailed guidance on creating restricted SQL logins, implementing row-level security, and following best practices for monitoring and auditing. It's particularly useful for organizations needing to integrate SQL Server data into AI workflows while maintaining strict security controls, enabling tasks like data analysis, reporting, and database management through AI interfaces while ensuring data protection and compliance."
inditextech,mcp-teams-server,1.0,0,7.2,-2.16,0.784,MINIMAL,"MCP Teams Server provides integration with Microsoft Teams, enabling AI assistants to interact with Teams channels through a standardized protocol. Developed by InditexTech, this Python implementation allows reading messages, creating threads, replying to messages, and mentioning team members. The server connects to Teams using Azure bot credentials and exposes functionality through a Docker container or local installation. It's particularly valuable for collaborative workflows where AI assistants need to monitor team communications, post updates to channels, or participate in threaded discussions without requiring users to switch contexts."
isaacphi,mcp-gdrive,1.2,4,6.4,-1.92,0.992,MINIMAL,"This Google Drive MCP server, developed by Phil Isaac, enables seamless integration of Google Drive and Sheets functionality into AI-assisted workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for accessing and manipulating Google Drive files and Sheets data through Claude Desktop and compatible MCP clients. The implementation supports file listing, reading, and writing operations, as well as specialized tools for interacting with Google Sheets. It's particularly useful for developers and businesses looking to incorporate on-demand access to cloud-stored documents and spreadsheets into their AI-assisted applications, allowing for dynamic querying and manipulation of Google Drive content."
v-3,notion-server,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"This Notion MCP server, developed by v-3, enables AI assistants to seamlessly interact with Notion workspaces through standardized tools for searching, reading, creating, and updating pages. It provides a simplified interface for complex Notion operations, making it easier for AI systems to manage and retrieve information from Notion databases and pages. The server stands out by offering a streamlined integration between AI capabilities and Notion's collaborative workspace features. It empowers AI assistants to handle tasks like knowledge management, note-taking, project tracking, and content creation within Notion. This implementation is particularly useful for applications that require AI-driven content organization, team collaboration tools, or any scenario where an AI system needs to work with structured data in a Notion workspace."
ozamatash,deep-research-mcp,1.0,0,7.1,-2.13,0.713,MINIMAL,"This open-source AI-powered research assistant performs iterative, deep research on any topic by combining search engines, web scraping, and large language models. It is available as a Model Context Protocol (MCP) tool for seamless integration with AI agents. The implementation focuses on simplicity, keeping the codebase under 500 lines of code for easy understanding and extensibility. It features intelligent query generation, depth and breadth control, smart follow-up questions, and comprehensive markdown reports. The tool is designed for efficient concurrent processing and can be used standalone or integrated into larger AI systems for in-depth, multi-level research tasks."
sammcj,mcp-package-version,1.6,0,7.0,-2.0999999999999996,1.3900000000000001,MINIMAL,"This MCP server, developed by sammcj, provides AI assistants with up-to-date package version information for npm and PyPI registries. Built with TypeScript, it offers tools to check latest stable versions for individual packages or bulk queries across both ecosystems. The implementation stands out by integrating directly with public registries and providing flexible version range options for different use cases. By connecting AI capabilities with real-time package data, this server enables AI systems to recommend and use current, compatible dependencies when writing or reviewing code. It is particularly useful for maintaining project dependencies, ensuring security compliance, and automating dependency updates in software development workflows."
delano,postman-mcp-server,1.0,13,7.8,-2.34,-0.06600000000000006,MEDIUM,"This Postman MCP server, developed by Delano, provides AI assistants with programmatic access to Postman's API management platform. It integrates with the Postman API to enable functionalities like managing collections, environments, and APIs. The server is built with TypeScript and leverages the @modelcontextprotocol/sdk for MCP implementation. By abstracting Postman interactions, it allows AI systems to automate API testing, documentation, and workflow management. This implementation is particularly useful for developers, QA engineers, and API designers who want to leverage AI capabilities for API lifecycle management, automated testing, and collaborative API development workflows."
egoist,ffmpeg-mcp,1.2,0,4.2,-1.2600000000000002,1.0739999999999998,MINIMAL,"ffmpeg-mcp is a stdio MCP server that provides a standardized interface for common media operations using FFmpeg. Developed by egoist and sponsored by ChatWise, this implementation allows AI assistants to perform video and audio processing tasks like speeding up videos and extracting audio from video files. The server acts as a bridge between natural language commands and FFmpeg's command-line interface, making media manipulation accessible through simple tool calls without requiring users to understand complex FFmpeg syntax."
sparfenyuk,mcp-telegram,1.0,0,7.0,-2.0999999999999996,0.79,MINIMAL,"This MCP implementation for Telegram, developed by Sergey Parfenyuk, provides a server interface to interact with Telegram through the MTProto protocol. Built with Python and leveraging libraries like Telethon and Pydantic, it offers tools for listing dialogs and messages. The implementation focuses on providing a standardized way to access Telegram functionality through MCP, making it easier to integrate Telegram capabilities into AI workflows. It's particularly useful for developers and researchers looking to incorporate Telegram messaging and data retrieval into their AI-assisted applications, enabling tasks like automated message analysis, chatbot integration, or social media monitoring."
utensils,mcp-nixos,1.4,0,7.8,-2.34,0.6659999999999999,MINIMAL,"MCP-NixOS provides a server for interacting with NixOS packages, system options, Home Manager configuration, and nix-darwin macOS configuration through standardized URL schemes. Developed by James Brink, this Python implementation features multi-level caching with filesystem persistence, detailed documentation integration, and support for advanced search capabilities including hierarchical paths and version filtering. The architecture separates concerns into cache, clients, contexts, resources, and tools components, making it ideal for developers seeking programmatic access to Nix ecosystem configuration options and package information through AI assistants."
weidwonder,crawl4ai-mcp-server,1.0,0,5.8,-1.7399999999999998,0.6739999999999999,MINIMAL,"This MCP server, developed by WeiDwonder, provides integration with Google Custom Search Engine for web crawling and search capabilities. Built with Python and leveraging libraries like Playwright and BeautifulSoup, it offers tools for automated web scraping, content extraction, and search result parsing. The implementation focuses on providing a standardized interface for AI-powered web crawling, enabling use cases such as data collection, content aggregation, and search engine development. By connecting AI models with Google's search infrastructure, this server allows for sophisticated web crawling scenarios, enhancing the ability to gather and analyze online information at scale."
illuminaresolutions,n8n-mcp-server,1.2,0,7.1,-2.13,0.987,MINIMAL,"n8n MCP Server provides a bridge between Claude and n8n automation workflows through the Model Context Protocol. Developed by Illuminare Solutions, it enables AI assistants to list, create, update, and execute n8n workflows directly within conversations, along with managing credentials, tags, executions, and generating security audits. The implementation supports both core features available to all n8n users and Enterprise-specific capabilities like project and variable management, making it particularly valuable for teams who want to integrate their automation workflows with AI assistants without switching contexts."
integromat,make-mcp-server,1.2,0,5.9,-1.7700000000000002,0.877,MINIMAL,"Make MCP Server enables AI assistants to trigger and interact with Make automation workflows through the Model Context Protocol. Developed by Make, it connects to your Make account to identify on-demand scenarios, parse input parameters, allow AI assistants to invoke scenarios with appropriate parameters, and return structured JSON output. The server runs as a Node.js application that can be installed via npm or run in a Docker container, requiring a Make API key with scenarios:read and scenarios:run scopes. This implementation is particularly valuable for maintaining complex automation logic in Make while exposing functionality to AI systems, creating bidirectional communication between assistants and existing workflows."
emzimmer,server-wp-mcp,1.2,0,7.5,-2.25,0.975,MINIMAL,"This WordPress MCP server, developed by mzimmer, enables AI assistants to interact securely with WordPress sites through a standardized interface. Built with Node.js and leveraging the Model Context Protocol SDK, it provides a bridge to WordPress REST API endpoints, handling authentication and site discovery. The server implements environment-based configuration, allowing for flexible deployment across different WordPress installations. By abstracting the complexities of WordPress APIs, it enables AI systems to easily manage content, users, and site settings. This implementation is particularly valuable for applications requiring programmatic WordPress management, facilitating use cases such as automated content publishing, user administration, and site maintenance tasks."
ivo-toby,mcp-openapi-server,1.0,0,7.1,-2.13,0.787,MINIMAL,"This OpenAPI MCP server, developed by Ivo Toby, enables AI assistants to interact with REST APIs defined by OpenAPI specifications. It integrates with the Model Context Protocol SDK to expose OpenAPI endpoints as MCP resources, allowing AI systems to discover and utilize a wide range of web services. Built with TypeScript and leveraging esbuild for bundling, it implements automatic resource generation from OpenAPI specs and handles authentication through configurable headers. The server is designed for flexibility, supporting various API configurations through environment variables or command-line arguments. It's particularly useful for developers and AI researchers looking to incorporate diverse API functionalities into their AI assistants, enabling use cases like data retrieval, third-party service integration, and dynamic API exploration."
lamaalrajih,kicad-mcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"KiCad MCP Server enables Claude to interact with KiCad electronic design automation projects, providing tools for PCB design analysis, validation, and visualization. The server offers Design Rule Check (DRC) capabilities with history tracking, PCB thumbnail generation, schematic analysis, and project management functions. Built to support macOS, Windows, and Linux, it integrates directly with KiCad's command-line tools and Python modules when available, falling back to alternative methods when needed. This implementation is particularly valuable for electronics designers seeking AI assistance with troubleshooting design rule violations, understanding PCB layouts, and preparing designs for manufacturing without leaving their Claude conversation."
revit-mcp,revit-mcp,1.0,0,6.0,-1.7999999999999998,0.8200000000000001,MINIMAL,"Revit-MCP is a Node.js server implementation that enables AI assistants to interact with Autodesk Revit models through the Model Context Protocol. It provides tools for creating, deleting, and modifying Revit objects, with specific functionality for wall creation and object deletion. The server uses a stdio transport layer for communication and implements a tool registration system that allows for extensible Revit model manipulation capabilities, making it particularly valuable for architectural design workflows and BIM (Building Information Modeling) processes."
mamertofabian,elevenlabs-mcp-server,1.0,0,6.7,-2.0100000000000002,0.7010000000000001,MINIMAL,"This ElevenLabs MCP server, developed by an unknown author, provides AI assistants with text-to-speech capabilities using the ElevenLabs API. Built with Python and leveraging libraries like pydub and requests, it offers a streamlined interface for generating audio from text using multiple voices and customizable speech parameters. The server implements features such as multi-part script handling, voice selection, and output file management. By abstracting the complexities of API communication and audio processing, it allows AI systems to easily incorporate high-quality speech synthesis into their workflows. This implementation is particularly valuable for applications in content creation, accessibility, and voice-driven interfaces, enabling use cases such as audiobook production, voice-over generation, and dynamic text-to-speech conversion."
meilisearch,meilisearch-mcp,1.0,0,6.7,-2.0100000000000002,0.7010000000000001,MINIMAL,"This MCP server for Meilisearch, developed by the Meilisearch team, provides a standardized interface for interacting with Meilisearch's powerful search capabilities. Built with Python and leveraging the official Meilisearch Python client, it offers tools for indexing, searching, and managing documents within Meilisearch instances. The server implements the Model Context Protocol, enabling AI systems to easily perform search operations and retrieve results. By abstracting Meilisearch's API complexities, it allows for seamless integration of advanced search functionality into AI-powered applications. This implementation is particularly valuable for use cases requiring fast, typo-tolerant, and customizable search experiences, such as e-commerce platforms, content management systems, or data exploration tools."
mladensu,cli-mcp-server,1.6,0,7.8,-2.34,1.366,MINIMAL,"This MCP server, developed by MladenSU, provides secure command-line execution with configurable security policies. It implements strict command whitelisting, path validation, and execution controls to enable controlled CLI access for AI applications while maintaining security. The server exposes tools for executing whitelisted commands and displaying security rules. By combining customizable restrictions with detailed error reporting, this implementation facilitates safe integration of command-line capabilities into AI workflows. It is particularly useful for scenarios requiring limited shell access, such as allowing an AI assistant to perform basic file operations or run specific utilities in a constrained environment."
ivanmurzak,unity-mcp,1.0,0,7.4,-2.2199999999999998,0.778,MINIMAL,"Unity-MCP is a template for creating Unity packages that implement the Model Context Protocol. It provides a structured project setup with automated workflows for testing across multiple Unity versions, deployment scripts for npm and GitHub, and utility commands for package management. The template includes SignalR client integration for real-time communication and follows best practices for Unity package development with comprehensive GitHub Actions CI/CD support."
ihor-sokoliuk,mcp-searxng,1.0,0,6.5,-1.9500000000000002,0.8049999999999999,MINIMAL,"This SearXNG MCP server, developed by Ihor Sokoliuk, integrates the SearXNG API to provide web search capabilities for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for executing web searches with pagination control. The server implements error handling, environment variable configuration for SearXNG instance URLs, and result formatting. By abstracting the complexities of API communication and search result parsing, it enables AI systems to easily access and analyze web content. This implementation is particularly valuable for applications requiring up-to-date information retrieval, enabling use cases such as research assistance, fact-checking, and content aggregation across various topics and domains."
ravinahp,flights-mcp,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"This flight search MCP server, developed by Ravina Patel, integrates with the Duffel API to provide flight search capabilities. Built with Python and leveraging libraries like httpx and pydantic, it offers a streamlined interface for querying flight information. The implementation focuses on simplicity and ease of use, making it accessible for AI assistants or applications needing to access flight data programmatically. It's particularly useful for tasks like travel planning, fare comparison, or building travel-related chatbots, enabling quick access to flight information without requiring deep knowledge of the underlying API complexities."
run-llama,mcp-server-llamacloud,1.0,0,6.4,-1.92,0.692,MINIMAL,"This MCP server, developed by run-llama, provides seamless integration between AI assistants and LlamaCloud's managed vector index service. Built for use with Claude Desktop, it offers a tool for retrieving information from a knowledge base using natural language queries. The server leverages LlamaCloud's API to perform efficient vector searches on managed indexes, enabling AI models to access and utilize custom knowledge bases. By bridging AI capabilities with LlamaCloud's scalable vector storage, this implementation enhances information retrieval and knowledge augmentation for AI assistants. It is particularly useful for scenarios requiring domain-specific knowledge integration, semantic search capabilities, and scalable information access in AI-powered applications."
strangelove-ventures,web3-mcp,1.0,0,7.8,-2.34,0.734,MINIMAL,"This MCP server, developed by Alex Cheng, provides a unified interface for interacting with multiple blockchains, including Solana and Ethereum. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for common blockchain operations such as checking balances, transferring tokens, and retrieving account information. The implementation focuses on simplifying blockchain interactions through standardized RPC endpoints, making it particularly useful for AI assistants and applications that require cross-chain functionality without deep blockchain expertise. By connecting to Solana's mainnet and supporting Ethereum operations, this server enables use cases ranging from basic account queries to more complex token transfers across different blockchain ecosystems."
kagisearch,kagimcp,1.0,0,6.9,-2.0700000000000003,0.7070000000000001,MINIMAL,"This Kagi MCP server, developed by Rehan Ali Rana at Kagi Search, integrates the Kagi API into AI-assisted workflows. Built with Python and leveraging libraries like httpx and pydantic, it provides a standardized interface for accessing Kagi's search capabilities through Claude Desktop and compatible MCP clients. The implementation supports Kagi's advanced search features and is designed for easy setup and use. It's particularly useful for researchers, developers, and professionals looking to incorporate high-quality, privacy-focused search results into their AI-assisted applications, enabling more informed decision-making and analysis based on up-to-date web information."
termix-official,bsc-mcp,1.0,0,6.6,-1.9799999999999998,0.802,MINIMAL,"BSC MCP Server provides a robust blockchain interaction layer for the Binance Smart Chain, enabling AI-driven transactions including native BNB and BEP-20 token transfers, smart contract interactions, and meme token creation. Built with Viem and PancakeSwap SDK, it offers secure wallet management and standardized blockchain operations through a flexible, environment-variable-configured architecture. The server is particularly useful for developers and traders seeking programmatic, AI-assisted blockchain interactions with minimal low-level complexity."
djyde,browser-mcp,1.0,0,5.2,-1.56,0.844,MINIMAL,"Browser MCP is a browser extension and server implementation that allows AI assistants to interact with the browser environment. It provides tools for retrieving page content as markdown, appending CSS styles to pages, searching browser history, and more. The implementation uses a WebSocket connection between the extension and server to enable real-time communication, with the server exposing these capabilities through the Model Context Protocol. This enables AI assistants to perform tasks like summarizing web pages, modifying page appearance, or retrieving browsing history data directly from the user's browser."
mikeyny,ai-image-gen-mcp,1.0,0,6.9,-2.0700000000000003,0.7070000000000001,MINIMAL,"This MCP server, developed by an unspecified author, enables image generation using Replicate's flux-schnell model. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers configurable image parameters such as resolution, aspect ratio, and quality. The implementation focuses on providing a standardized interface for text-to-image generation, including features like saving generated images to specified directories and full error handling. It's particularly useful for applications requiring on-demand image creation, enabling use cases such as content illustration, design prototyping, and AI-assisted art generation without complex API integrations or local model deployments."
carterlasalle,mac_messages_mcp,1.4,0,7.5,-2.25,1.125,MINIMAL,"Mac Messages MCP provides a bridge for AI assistants to interact with the macOS Messages app, enabling reading recent messages and sending new ones through a set of well-defined tools. Developed by Carter Lasalle, it accesses the Messages database and AddressBook contacts directly, with features for contact lookup, fuzzy name matching, and group chat support. The implementation includes robust error handling for permission issues and runs as an MCP server that integrates with Claude Desktop, making it particularly valuable for users who want to manage their iMessage conversations without leaving their AI assistant interface."
cheffromspace,mcpcontrol,1.0,7,7.4,-2.2199999999999998,0.978,MINIMAL,"This Windows control server leverages nut.js and the Model Context Protocol to enable remote automation of Windows systems. Developed by an unnamed author, it provides a TypeScript-based interface for programmatically controlling mouse movements, keyboard input, and screen captures on Windows machines. The implementation uses Express for the server, Jimp and Sharp for image processing, and Clipboardy for clipboard access. It's designed for scenarios requiring remote Windows automation, such as automated testing, remote administration, or building AI-assisted Windows control systems that can interact with desktop applications via natural language commands."
tumf,mcp-shell-server,1.6,0,7.6,-2.2800000000000002,1.372,MINIMAL,"This MCP shell server, developed by tumf, enables AI assistants like Claude to execute whitelisted shell commands on the host system. Built in Python, it provides a secure interface for running commands with stdin input support, returning comprehensive execution results including stdout, stderr, exit status, and runtime. The implementation focuses on security through command whitelisting and shell operator validation, preventing unauthorized access while allowing flexible command execution. By connecting AI capabilities with local system operations, this server enables AI assistants to interact with files, analyze data, and perform system tasks. It is particularly useful for scenarios requiring controlled system access, data processing, and building AI tools that can leverage local computing resources and file systems."
chatmol,molecule-mcp,1.0,0,5.2,-1.56,0.656,MINIMAL,"The molecule-mcp server provides a bridge between AI assistants and molecular visualization software, enabling interaction with PyMol and ChimeraX through the Model Context Protocol. It offers tools to open visualization software, execute commands directly in these applications, and save images of molecular structures. The implementation uses FastMCP to expose these capabilities as tools that can be called programmatically, making it valuable for scientific workflows where molecular visualization and manipulation are needed without leaving the conversation interface."
inditextech,mcp-server-simulator-ios-idb,1.0,0,7.8,-2.34,0.766,MINIMAL,"A Model Context Protocol server for iOS simulator automation via Facebook's IDB tool, enabling AI assistants to control iOS simulators using natural language commands. Developed by Inditex Tech, this TypeScript implementation provides a comprehensive command system for managing simulator sessions, launching apps, capturing screenshots, and performing UI interactions. The architecture includes a natural language parser that converts instructions into structured commands, an orchestrator that manages command execution, and an IDB manager that interfaces with the iOS simulator. This server is particularly useful for automated testing of iOS applications, UI validation, and creating interactive demos without requiring direct access to physical devices."
comet-ml,opik-mcp,1.0,5,7.6,-2.2800000000000002,0.22799999999999998,MINIMAL,"Opik MCP Server is an open-source implementation of the Model Context Protocol for the Opik platform. It provides a unified interface for interacting with Opik's capabilities, supporting multiple transport mechanisms for flexible integration into various environments."
mastergo-design,mastergo-magic-mcp,1.6,0,7.2,-2.16,1.316,MINIMAL,"MasterGo Magic MCP is a standalone service that enables AI models to directly retrieve DSL (Domain Specific Language) data from MasterGo design files. Developed as a lightweight Node.js tool, it provides a simple mechanism for extracting design file metadata using a personal access token, with a focus on enabling programmatic access to design element details. The implementation is particularly useful for AI-powered design analysis, code generation, and design system exploration."
sendaifun,solana-mcp,1.2,0,7.7,-2.31,0.9309999999999999,MINIMAL,"A Solana blockchain MCP server powered by the Solana Agent Kit, enabling programmatic interactions with Solana through a standardized protocol. Supports a wide range of blockchain actions including asset retrieval, token deployment, wallet management, transfers, NFT minting, and domain resolution. Designed to provide a flexible, developer-friendly interface for Solana-based operations."
cohnen,mcp-google-ads,1.0,0,7.8,-2.34,0.266,MINIMAL,"This MCP server implementation provides integration with Google Ads API, enabling AI assistants to access and manipulate advertising campaign data directly within conversations. The server appears to have encountered an error during setup, indicating it may be in development or experiencing configuration issues with the repository 'cohnen/mcp-google-ads'. When functioning properly, it would likely allow for campaign management, performance analysis, and optimization of Google Ads accounts without leaving the conversation interface."
lucashild,mcp-server-bigquery,1.6,0,5.8,-1.7399999999999998,0.926,MINIMAL,"This BigQuery MCP server, developed by LucasHild, provides a streamlined interface for language models to interact with Google BigQuery databases. It enables AI agents to inspect database schemas, list tables, and execute SQL queries using the BigQuery dialect. The server is configurable with project ID, location, and optional dataset filtering. By leveraging BigQuery's powerful data warehousing capabilities, it allows AI systems to analyze large datasets efficiently. This implementation is particularly useful for AI assistants designed to perform data analysis tasks, generate insights from business intelligence data, or automate reporting processes using BigQuery as the backend data source."
gongrzhe,office-powerpoint-mcp-server,1.2,0,6.4,-1.92,1.008,MINIMAL,"PowerPoint MCP server that enables AI assistants to create and manipulate PowerPoint presentations through python-pptx. Built by GongRzhe, it provides tools for adding and formatting slides, text, images, tables, charts and shapes with robust error handling and parameter validation. The implementation focuses on reliability with multiple fallback approaches for operations like image insertion and shape creation, making it particularly valuable for users who need to programmatically generate or modify presentations through natural language requests."
cyanheads,obsidian-mcp-server,1.2,0,7.8,-2.34,0.9339999999999999,MINIMAL,"This Obsidian MCP server, developed by cyanheads, enables AI models to interact with Obsidian vaults through a standardized interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for file operations, content search, and metadata management within Obsidian. The implementation features atomic operations, efficient query processing, and automatic timestamp handling. It's particularly useful for AI assistants and applications needing to manage knowledge bases in Obsidian, enabling use cases like note-taking, content organization, and information retrieval without dealing directly with Obsidian's API complexities."
dannymac180,mcp-think-tool,1.2,0,4.6,-1.38,1.062,MINIMAL,"The MCP Think Tool Server implements Anthropic's 'think' tool for Claude and other LLMs, providing a dedicated space for structured reasoning during complex problem-solving tasks. It maintains a timestamped log of thoughts that can be reviewed, cleared, or analyzed for statistics, enabling models to break down problems systematically, ensure policy adherence, and process complex tool outputs. Built using FastMCP, the server exposes four tools: think for recording thoughts, get_thoughts for retrieving the thinking history, clear_thoughts for resetting, and get_thought_stats for analyzing thinking patterns - making it particularly valuable for improving performance in tasks requiring long chains of reasoning."
v-3,discordmcp,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"This Discord MCP server, developed as an open-source project, enables AI assistants to interact directly with Discord channels through the Discord API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for sending messages, reading recent channel history, and automatic server/channel discovery. The implementation focuses on maintaining user control and security while allowing AI models to engage in Discord conversations. It's particularly useful for enhancing AI-driven community management, automated support, or interactive chatbots within Discord servers, enabling seamless integration of AI capabilities without requiring deep knowledge of Discord's API intricacies."
baryhuang,mcp-remote-macos-use,1.0,0,7.8,-2.34,0.766,MINIMAL,"MCP Remote macOS Server provides secure remote control of macOS machines through VNC protocol, enabling AI assistants to capture screenshots and interact with the remote desktop through mouse and keyboard inputs. The implementation supports Apple Authentication (protocol 30) for secure connections, handles screen scaling for consistent display, and includes comprehensive error handling for connection issues. Built with a focus on security and reliability, this server is ideal for remote administration, automated testing, or AI-powered interaction with macOS systems."
govcraft,rust-docs-mcp-server,1.0,0,7.3,-2.19,0.781,MINIMAL,"Rust documentation loader for the Model Context Protocol that efficiently processes HTML documentation files from Rust crates. Uses LlamaIndex's HTML reader to load and parse documentation, with intelligent file selection logic that handles duplicate files by selecting the largest version. Supports an optional 'dangerous' mode to include all HTML files, making it flexible for different documentation processing scenarios."
langfuse,mcp-server-langfuse,1.0,0,7.4,-2.2199999999999998,0.778,MINIMAL,"This MCP server implementation provides access to Langfuse's prompt management capabilities, allowing users to list and retrieve prompts through the Model Context Protocol. Developed by marcklingen, it transforms Langfuse prompts into MCP-compatible formats, supports pagination for prompt listing, and includes a prompt compilation feature. The server also offers tool-based operations for increased compatibility with MCP clients. It's particularly useful for AI applications requiring dynamic prompt management, version control, and integration with existing Langfuse workflows. The implementation focuses on production-labeled prompts and is designed to work seamlessly with Claude Desktop and Cursor environments."
nguyenvanduocit,all-in-one-model-context-protocol,1.0,0,7.3,-2.19,0.781,MINIMAL,"This MCP server, developed by nguyenvanduocit, enables AI assistants like Claude to interact with a wide range of development tools and services. Built in Go, it provides capabilities for searching Confluence, querying GitLab repositories, fetching Jira issues, executing command-line scripts, and more. The implementation stands out by offering a unified interface to multiple essential development platforms and APIs. By connecting AI capabilities with core development workflows and knowledge bases, this server allows AI systems to access documentation, analyze code, track issues, and assist with various development tasks. It is particularly useful for enhancing AI-powered developer tools, automating software development workflows, and building intelligent assistants that can seamlessly integrate with existing development infrastructure."
peakmojo,applescript-mcp,1.0,0,5.1,-1.53,0.347,MINIMAL,"AppleScript MCP Server provides a dual-implementation (Node.js and Python) bridge that enables AI assistants to execute AppleScript code on macOS systems. Developed by peakmojo, this lightweight server (<100 lines of core code) allows interaction with Mac applications and system features including Notes, Calendar, Contacts, Messages, Finder, and more. The implementation handles script execution through temporary files and subprocess calls, with configurable timeouts and comprehensive error handling. It's particularly valuable for automating Mac-specific tasks like creating reminders, searching files, checking system status, or controlling applications through natural language requests."
philliprt,think-mcp-server,1.0,0,7.3,-2.19,0.781,MINIMAL,"Think Tool MCP Server implements Anthropic's 'think' tool as described in their engineering blog, providing Claude with a dedicated space for structured reasoning during complex problem-solving tasks. This TypeScript implementation creates a simple MCP server that allows Claude to pause and reflect during response generation, without performing external actions or retrieving new information. Research shows this approach improves performance by up to 54% on complex tasks, especially when working with multiple tools or following detailed policies, making it particularly valuable for customer service, legal compliance, sequential decision-making, and coding challenges."
quantgeekdev,coincap-mcp,1.4,0,6.2,-1.8599999999999999,1.214,MINIMAL,"This MCP server, developed by QuantGeekDev, provides access to cryptocurrency data from the CoinCap API without requiring API keys or registration. It exposes tools for querying Bitcoin prices, retrieving prices for any supported cryptocurrency, and listing all available crypto assets. By integrating with CoinCap's public API, this implementation enables AI assistants to easily incorporate up-to-date cryptocurrency information into their responses. It is particularly useful for financial analysis, market tracking, and generating reports on crypto trends through natural language queries to an AI assistant."
tanigami,mcp-server-perplexity,1.6,0,5.7,-1.7100000000000002,1.2710000000000001,MINIMAL,"This MCP server, developed by tanigami, provides seamless integration with the Perplexity API for AI assistants. Built for use with Claude Desktop, it offers a tool for requesting chat completions with citations from Perplexity. The server bridges Claude's capabilities with Perplexity's advanced language models and real-time information retrieval, enabling more up-to-date and factual responses. Key features include citation support and easy configuration through Claude Desktop settings. By leveraging Perplexity's strengths in current events and factual queries, this implementation enhances AI capabilities for tasks requiring recent information or verified sources. It is particularly useful for scenarios like research assistance, fact-checking, or generating responses with reliable citations."
vinayak-mehta,mcp-browser-use,1.6,0,5.4,-1.62,1.4380000000000002,MINIMAL,"The MCP Browser-Use server connects any MCP client (like Claude or Cursor) with the browser-use library, allowing AI assistants to interact with web browsers. Unlike other browser-use MCPs that require purchasing a separate LLM API key, this implementation by Vinayak Mehta leverages the LLM already configured in your MCP client. It enables web browsing capabilities through a simple command (uvx mcp-browser-use) that can be added to MCP client configurations, making it ideal for users who want to give their AI assistants web access without additional API costs."
rootly-ai-labs,rootly-mcp-server,1.4,36,7.2,-2.16,-2.4840000000000004,HIGH,"Rootly MCP Server provides a dynamic interface to the Rootly API for incident management directly within MCP-compatible editors like Cursor, Windsurf, and Claude. Developed by Rootly AI Labs, it transforms Rootly's OpenAPI specification into MCP tools that enable users to resolve production incidents without leaving their IDE. The server intelligently limits exposed API paths to prevent AI agent overwhelm, focusing on core incident management endpoints with default pagination to prevent context window overflow. This implementation is particularly valuable for SRE teams and developers who need to quickly respond to and manage production incidents while staying in their development environment."
roychri,mcp-server-asana,1.4,0,7.4,-2.2199999999999998,0.6779999999999999,MINIMAL,"This Asana MCP server, developed by Christian Roy, enables AI assistants to interact with the Asana project management platform. It provides a comprehensive set of tools for managing workspaces, projects, tasks, comments, and dependencies through the Asana API. The implementation abstracts Asana's functionality, offering a standardized interface for AI systems to perform project management operations. By connecting AI assistants with Asana, this server facilitates task automation, project tracking, and team collaboration. It is particularly useful for AI applications requiring seamless integration with Asana, such as automated project updates, task prioritization, or intelligent workload management across teams and projects."
lsd-so,lsd-mcp,1.0,0,7.8,-2.34,0.734,MINIMAL,"This MCP server, developed by LSD.so, enables Claude to directly query and analyze web content using LSD SQL, a domain-specific language for web scraping. Built with Python and leveraging cloud browsers, it allows Claude to write and execute LSD SQL queries to extract structured data from websites. The implementation focuses on providing a flexible interface for web data extraction, including features like parallel processing and just-in-time table creation. It's particularly useful for applications requiring real-time web data analysis, enabling use cases such as market research, competitor analysis, and content aggregation without complex web scraping setups or API integrations."
tacticlaunch,mcp-linear,1.2,0,6.8,-2.04,0.9039999999999999,MINIMAL,"MCP Linear is a server implementation that bridges AI assistants with the Linear project management system, enabling natural language interaction with Linear's GraphQL API. Developed by tacticlaunch, it provides tools for managing issues, projects, teams, cycles, and users through a standardized interface. The server authenticates with Linear using an API token and translates assistant requests into appropriate API calls, handling everything from creating and updating issues to managing project workflows and team assignments. Particularly valuable for teams who want to integrate project management tasks directly into their AI assistant workflows without context switching."
donghao1393,mcp-dbutils,1.8,4,6.0,-1.7999999999999998,1.58,MINIMAL,"MCP Database Utilities is a unified database access service that supports multiple database types (PostgreSQL, SQLite, and MySQL). Through its abstraction layer design, it provides a simple and unified database operation interface for MCP servers."
fengin,search-server,1.0,0,6.4,-1.92,0.692,MINIMAL,"Search-Server provides a unified interface for AI assistants to access multiple search engines through a standardized API. The implementation integrates with Brave Search, Metaso, and Bocha search services, handling authentication, rate limiting, and response formatting for each provider. Built with Python and modern async libraries like httpx, aiohttp, and Playwright, it abstracts away the complexity of different search APIs while maintaining provider-specific features. This server is particularly valuable for developers who need to incorporate web search capabilities into AI applications without managing multiple search engine integrations separately."
jdubois,azure-cli-mcp,1.0,0,7.0,-2.0999999999999996,0.79,MINIMAL,"Azure CLI MCP is a server implementation that wraps the Azure CLI, enabling AI assistants to execute Azure commands through a standardized interface. Developed by Julien Dubois, it uses Spring Boot and Spring AI to expose Azure CLI functionality via the stdio transport, allowing users to manage Azure resources directly from tools like Claude Desktop or VS Code. The server runs locally using the user's Azure credentials and includes a carefully crafted prompt that improves how LLMs interact with Azure, making it particularly effective for listing resources, fixing configuration issues, and creating new Azure services."
secretiveshell,mcp-searxng,1.4,0,4.1,-1.23,1.277,MINIMAL,"This MCP server, developed by SecretiveShell, enables AI assistants like Claude to perform web searches using the SearXNG metasearch engine. Built in Python, it provides a simple interface for querying SearXNG and retrieving search results. The implementation stands out by leveraging SearXNG's privacy-focused approach and ability to aggregate results from multiple search engines. By connecting AI capabilities with a customizable search backend, this server allows AI systems to access up-to-date web information while maintaining user privacy. It is particularly useful for enhancing AI assistants with real-time web search capabilities, conducting research tasks, or building applications that require privacy-preserving internet queries."
isaacwasserman,mcp-snowflake-server,1.0,0,7.3,-2.19,0.781,MINIMAL,"This MCP server, developed by Isaac Wasserman, enables AI assistants like Claude to interact with Snowflake databases. Built in Python, it provides capabilities for executing SQL queries, managing database schema, and maintaining a dynamic insights memo. The implementation stands out by offering a standardized interface to Snowflake's powerful data warehousing capabilities, allowing AI systems to analyze and manipulate large-scale datasets. By connecting AI capabilities with enterprise data infrastructure, this server enables AI assistants to perform complex data analysis, generate insights, and interact with business intelligence workflows. It is particularly useful for data exploration tasks, automated reporting, and building AI-powered analytics tools that can leverage the full power of Snowflake's cloud data platform."
sammcj,mcp-package-docs,1.4,0,7.8,-2.34,1.166,MINIMAL,"This MCP server, developed by Sam McLeod, provides efficient access to package documentation across multiple programming languages. Built with TypeScript and Node.js, it supports Go packages via 'go doc', Python libraries using built-in 'help()', and NPM packages through registry documentation. The server implements smart parsing to deliver structured output with descriptions, usage, and examples, while maintaining a minimal memory footprint through built-in caching. By offering a standardized interface for package documentation retrieval, it enables AI models to quickly access and utilize up-to-date library information. This implementation is particularly useful for developers and AI assistants working on multi-language projects, code analysis tasks, and automated documentation generation."
silenceper,mcp-k8s,1.0,0,7.8,-2.34,0.766,MINIMAL,"mcp-k8s is a Kubernetes MCP server that enables AI assistants to interact with Kubernetes clusters through natural language. Built in Go using the mcp-go SDK and Kubernetes client-go library, it provides tools for querying resource types and performing CRUD operations on Kubernetes resources with configurable write permissions. The server connects to clusters using kubeconfig and supports both read-only and write operations (create/update/delete) that can be independently enabled or disabled for security. Particularly valuable for interactive resource management, automated operations, development support, and educational scenarios where users benefit from natural language interaction with Kubernetes environments."
tencentedgeone,edgeone-pages-mcp,1.6,0,5.9,-1.7700000000000002,1.423,MINIMAL,"EdgeOne Pages MCP server enables rapid deployment of HTML content to Tencent's EdgeOne Pages service. The server integrates with EdgeOne Pages Functions and KV store to host static content at the edge, providing a simple interface for deploying HTML and obtaining publicly accessible URLs. Built for developers who need quick content publishing capabilities through AI assistants, it handles API errors gracefully and returns immediate access to deployed content."
xing5,mcp-google-sheets,1.4,0,7.6,-2.2800000000000002,0.6719999999999999,MINIMAL,"This MCP server integrates with Google Drive and Google Sheets, enabling AI assistants to create, read, update, and manage spreadsheets. Built by Xing Wu, it provides tools for retrieving sheet data, updating cells, adding rows and columns, creating new spreadsheets, and listing available documents. The implementation supports both OAuth and service account authentication methods, making it suitable for personal assistants that need to interact with spreadsheet data or automate document workflows without requiring users to switch contexts."
baranwang,mcp-trends-hub,1.2,0,5.9,-1.7700000000000002,1.023,MINIMAL,"MCP Trends Hub provides AI assistants with access to trending topics and content from popular Chinese platforms including Weibo, Zhihu, Douyin, Bilibili, Douban, Toutiao, and 36kr. The implementation exposes each platform as a separate tool that fetches current trending data, with results cached temporarily to improve performance. Built with TypeScript and using the Model Context Protocol SDK, it features robust error handling and standardized response formatting. This server is particularly valuable for use cases requiring real-time insights into Chinese social media trends, content discovery, and cultural monitoring without leaving the conversation interface."
dfkai,xtquantai,1.0,0,5.0,-1.5,0.85,MINIMAL,"A lightweight MCP server for quantitative trading using the XTQuant API, enabling AI-driven financial analysis and trading strategies. Developed by davidfnck, this tool provides a Python-based integration for programmatic stock market interactions, with a focus on leveraging AI capabilities for quantitative investment approaches."
f4ww4z,mcp-mysql-server,1.6,0,7.2,-2.16,1.3840000000000001,MINIMAL,"This MCP MySQL server, developed by f4ww4z, enables AI assistants like Claude to interact with MySQL databases through a standardized interface. Built in JavaScript/TypeScript, it provides capabilities for executing queries, managing database connections, and retrieving schema information. The implementation stands out by offering prepared statement support, automatic connection management, and comprehensive error handling. By connecting AI capabilities with relational database operations, this server allows AI systems to query and manipulate data in MySQL databases programmatically. It is particularly useful for building AI-powered data analysis tools, automated reporting systems, and intelligent assistants that need to interact with MySQL-based applications and data stores."
meterlong,mcp-doc,1.0,0,6.5,-1.9500000000000002,0.8049999999999999,MINIMAL,"DocxProcessor MCP server provides a comprehensive Word document processing service that enables AI assistants to create, edit, and manipulate Microsoft Word documents through a rich set of tools. Built using Python with the python-docx library, it offers functionality for adding and formatting text, managing tables, searching and replacing content, and preserving document styling. The implementation includes state management for maintaining document sessions across server restarts and detailed error handling, making it particularly valuable for workflows requiring document generation, content editing, or template-based document creation without leaving the conversation interface."
portswigger,mcp-server,1.0,0,6.4,-1.92,0.808,MINIMAL,"Burp Suite MCP Server enables AI clients to interact with Burp Suite's web security testing capabilities through the Model Context Protocol. Developed by PortSwigger, this Kotlin-based extension exposes Burp's functionality as tools that AI assistants can use to send HTTP requests, analyze proxy history, manipulate Burp's configuration, and perform various security testing operations. The server includes automatic installation support for Claude Desktop through a packaged stdio proxy server, making it particularly valuable for security professionals who want to leverage AI assistance for web application security testing, vulnerability assessment, and penetration testing workflows."
tinybirdco,mcp-tinybird,1.6,0,7.8,-2.34,1.366,MINIMAL,"This MCP server, developed by Tinybird, enables AI assistants to interact with Tinybird workspaces for data exploration and analysis. Built in Python, it provides tools for querying data sources, executing API endpoints, and pushing data files. The server leverages Tinybird's real-time analytics capabilities, allowing AI models to access and analyze large datasets efficiently. Key features include SQL query execution, data source exploration, and integration with Tinybird's documentation. By bridging AI assistants with powerful analytics infrastructure, this implementation is particularly useful for tasks involving data-driven insights, business intelligence, and real-time data exploration across various domains."
voska,hass-mcp,1.0,0,7.5,-2.25,0.775,MINIMAL,"Hass-MCP enables AI assistants like Claude to interact directly with Home Assistant smart home systems through the Model Context Protocol. Built by Matt Voska, it provides tools for querying device states, controlling lights and switches, summarizing smart home configurations, troubleshooting automations, and searching for specific entities. The implementation runs as a Docker container that communicates with Home Assistant via its API, making it ideal for users who want to manage their smart home through natural language conversations without leaving their AI assistant interface."
waldzellai,waldzell-mcp,1.0,0,6.3,-1.8900000000000001,0.8109999999999999,MINIMAL,"The MCP Servers repository by Waldzell AI provides a collection of specialized MCP servers for different use cases. It includes server-typestyle for Google TypeScript style guide analysis, server-yelp-fusionai for Yelp Fusion API integration with business search and review capabilities, server-clear-thought for systematic thinking and mental models, and server-stochasticthinking for probabilistic decision-making algorithms. Each server is containerized with Docker, configured for Smithery deployment, and follows a consistent architecture pattern with TypeScript implementation. The monorepo structure enables shared utilities while maintaining independent versioning through changesets."
peakmojo,mcp-hubspot,1.0,0,7.5,-2.25,0.275,MINIMAL,"This HubSpot MCP server, developed by peakmojo, provides a streamlined interface for AI models to interact with HubSpot CRM data and operations. Built using Python and the HubSpot API client, it offers tools for managing contacts and companies, including creation and retrieval functionalities. The server implements auto-updating resources and a demonstration prompt to guide users through HubSpot operations. By abstracting HubSpot API interactions into a standardized MCP format, it enables AI systems to easily access and manipulate CRM data. This implementation is particularly valuable for sales and marketing applications, facilitating use cases such as lead management, customer data analysis, and automated CRM updates."
ergut,mcp-bigquery-server,1.2,0,7.4,-2.2199999999999998,0.978,MINIMAL,"This BigQuery MCP server, developed by Salih Ergüt, provides a secure interface for language models to interact with Google BigQuery datasets. It enables AI agents to explore schemas, run SQL queries, and analyze data within configurable limits. The server integrates seamlessly with Claude Desktop, offering a natural language interface to BigQuery's powerful data warehousing capabilities. By focusing on read-only access and built-in safety constraints, it allows AI systems to generate insights from large datasets while maintaining data security. This implementation is particularly useful for AI assistants designed to perform ad-hoc data analysis, generate business intelligence reports, or provide data-driven recommendations using BigQuery as the backend."
pydantic,logfire-mcp,1.6,0,7.7,-2.31,1.369,MINIMAL,"Logfire MCP Server provides AI assistants with access to OpenTelemetry traces and metrics through Logfire's API. Built by the Pydantic team, it enables LLMs to query application telemetry data, analyze distributed traces, and perform custom SQL queries on observability data with automatic token-based authentication. The server exposes tools for finding exceptions, analyzing errors in specific files, running arbitrary queries against trace data, and retrieving schema information - making it particularly valuable for debugging applications, investigating performance issues, and gaining insights from operational data without leaving the AI assistant conversation."
qpd-v,mcp-deepwebresearch,1.0,0,7.8,-2.34,0.766,MINIMAL,"This web research MCP server, developed by qpd-v, enables AI models to conduct deep web searches and content extraction. Built with TypeScript and leveraging Playwright for web automation, it provides tools for Google searches, parallel multi-query searches, webpage visits, and screenshot capture. The implementation stands out with its robust error handling, consent dialog management, and content cleaning capabilities. It's particularly useful for AI assistants or applications needing to perform comprehensive online research, enabling tasks like information gathering, content analysis, and visual data collection without requiring deep knowledge of web scraping techniques."
synthience,mcp-titan-cognitive-memory,1.0,0,0,-0.0,1.0,MINIMAL,"This Titan Memory Server implementation, developed to enhance AI model context management, provides a TensorFlow.js-based interface for efficient memory storage and retrieval. Built using the Model Context Protocol SDK and Express.js, it offers tools for storing, updating, and querying contextual information. The implementation focuses on optimizing memory operations through tensor computations, enabling AI models to maintain and utilize large amounts of contextual data effectively. It's particularly useful for long-running conversations, multi-session knowledge retention, and complex reasoning tasks that require persistent and quickly accessible memory structures."
szeider,mcp-solver,1.0,0,7.8,-2.34,0.734,MINIMAL,"This MCP solver, developed by Stefan Szeider, provides a server that exposes MiniZinc constraint solving capabilities to Large Language Models. It integrates MiniZinc's powerful constraint programming features with the Model Context Protocol, enabling AI models to submit and validate constraint models, set parameters, solve problems, and analyze solutions. The implementation stands out by offering asynchronous solving with timeout management, automatic library inclusion based on constraints, and progress tracking. By connecting AI capabilities with industrial-strength constraint solving, this server enables AI systems to tackle complex optimization and satisfaction problems. It is particularly useful for applications in areas like scheduling, planning, resource allocation, and combinatorial optimization where LLMs can benefit from rigorous mathematical modeling and solving."
xpn,mythic_mcp,1.0,0,4.1,-1.23,0.877,MINIMAL,"Mythic MCP is a server implementation that enables AI assistants to interact with the Mythic Command and Control (C2) framework for penetration testing. Created by XPN, it provides tools for executing shell commands, reading files, uploading content, and running specialized security tools like Mimikatz on compromised systems through Mythic agents. The server exposes a set of prompt templates for emulating specific threat actors or performing reconnaissance, making it particularly valuable for security professionals who want to leverage AI capabilities for automated penetration testing workflows while maintaining control through the Mythic interface."
eniayomi,gcp-mcp,1.2,0,7.2,-2.16,0.984,MINIMAL,"This MCP server implementation provides integration with Google Cloud Platform services. Developed by Oluwapelumi Oluwaseyi, it offers tools for interacting with various GCP resources including Compute Engine, Cloud Storage, Cloud Functions, Cloud Run, BigQuery, and more. The server uses official Google Cloud client libraries and implements robust error handling and retry mechanisms. It's designed for developers looking to leverage GCP capabilities within MCP-based applications and workflows."
skydeckai,skydeckai-code,1.6,0,7.8,-2.34,0.8660000000000001,MINIMAL,"This MCP server, developed by SkyDeck.ai, provides a comprehensive set of tools for AI-driven development workflows. It integrates file system operations, multi-language code analysis using tree-sitter, Git operations, and code execution capabilities. The implementation is built in Python and leverages libraries like GitPython for version control integration. It's designed with security in mind, featuring configurable workspace boundaries and safe code execution measures. This server is well-suited for AI assistants or development tools that need to analyze, modify, and execute code across multiple programming languages, manage Git repositories, and perform file system operations in a controlled environment."
ergut,mcp-logseq-server,1.0,0,6.6,-1.9799999999999998,0.698,MINIMAL,"This MCP server, developed by Salih, provides a seamless interface for AI assistants to interact with LogSeq via its API. Built using Python and the MCP library, it offers a range of tools for managing LogSeq graphs, including listing pages, searching content, and creating or updating pages. The server abstracts the complexities of API communication, allowing AI systems to easily integrate with LogSeq for note-taking and knowledge management tasks. It's particularly useful for scenarios requiring automated interaction with LogSeq, such as summarizing meeting notes, updating project statuses, or performing content searches across multiple pages. By bridging AI capabilities with LogSeq's functionality, this implementation enables more efficient and intelligent personal knowledge management workflows."
getfounded,mcp-tool-kit,1.2,0,7.8,-2.34,0.966,MINIMAL,"MCP Tool Kit provides a unified server implementation for Claude AI assistants with over 100 integrated tools spanning file operations, web search, browser automation, data analysis, and document management. Built by getfounded, it uses a modular architecture that reduces cognitive load on Claude by encapsulating domain knowledge in vertical agents that handle complex workflows internally. The Docker-based deployment makes it easy to set up and configure with API keys for services like Brave Search, NewsAPI, and FRED economic data, enabling powerful capabilities for tasks ranging from market analysis to presentation creation without requiring Claude to coordinate individual tool calls."
gongrzhe,quickchart-mcp-server,1.0,0,6.8,-2.04,0.796,MINIMAL,"This MCP server implementation provides integration with QuickChart, a service for generating charts and graphs. Developed by GongRzhe, it offers a bridge between AI assistants and QuickChart's API, enabling the creation of visual data representations. Built with TypeScript and leveraging the Model Context Protocol SDK, the server focuses on simplifying chart generation tasks. It is particularly useful for AI applications that need to produce data visualizations on-the-fly, such as report generators, dashboard creators, or data analysis tools."
mantrakp04,manusmcp,1.0,8,6.3,-1.8900000000000001,-0.11099999999999999,MEDIUM,"ManusMCP is a framework for orchestrating specialized AI agents that work together through a Model Context Protocol (MCP) server implementation. Built with TypeScript, it provides file operations, shell command execution, and browser automation capabilities through a comprehensive API. The server enables AI agents to read/write files, execute shell commands, navigate web pages, and interact with browser elements. The implementation includes a Docker-based deployment with services for Flowise, Unstructured API, and LiteLLM, making it ideal for creating AI team members with specialized roles like Planner, FileWizard, CommandRunner, and WebNavigator that can collaborate on complex tasks requiring filesystem access, command-line operations, and web interactions."
stefans71,wordpress-mcp-server,1.0,0,6.7,-2.0100000000000002,0.7989999999999999,MINIMAL,"This WordPress MCP server, developed by stefans71, provides integration between WordPress sites and AI systems using the Model Context Protocol. Built with TypeScript and leveraging the Axios library for HTTP requests, it offers a standardized interface for interacting with WordPress APIs. The server enables AI assistants to perform common WordPress operations like managing posts, pages, and users without dealing with the complexities of direct API authentication and requests. By abstracting WordPress functionality into MCP tools, this implementation facilitates use cases such as automated content creation, site management, and data analysis for WordPress-based websites. It is designed for easy deployment and extensibility, making it valuable for developers building AI-powered WordPress automation tools or content management systems."
tadasant,mcp-server-stability-ai,1.2,0,7.6,-2.2800000000000002,0.9279999999999999,MINIMAL,"This MCP server, developed by Tadas Antanavicius, integrates Stability AI's image manipulation capabilities into MCP-compatible systems. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers tools for generating, editing, and upscaling images using Stability AI's latest models. The server abstracts complex API interactions into simple MCP tools, enabling AI assistants to easily create and manipulate images. It stands out by providing a file-forward approach, saving processed images locally for easy reference. This implementation is particularly useful for applications requiring high-quality image generation and editing, such as content creation, design assistance, or visual storytelling."
tesla0225,mcp-create,1.0,0,6.9,-2.0700000000000003,0.7929999999999999,MINIMAL,"MCP Create Server is a dynamic management service that creates and controls Model Context Protocol servers on-demand. Built with TypeScript and the MCP SDK, it functions as both an MCP server itself and a controller for child MCP servers, allowing users to dynamically create, execute tools on, update, and remove servers as needed. The implementation provides tools for server creation from templates, tool execution on child servers, server listing and management, and is designed to be run in Docker for optimal isolation and security, making it ideal for environments requiring flexible, on-demand MCP server capabilities."
bazinga012,mcp_code_executor,1.0,0,5.5,-1.6500000000000001,0.835,MINIMAL,"This MCP Code Executor, developed by bazinga012, enables AI assistants to execute Python code within specified Conda environments. Built using TypeScript and the Model Context Protocol SDK, it provides a secure and configurable way to run code with access to predefined libraries and dependencies. The implementation focuses on isolating code execution, allowing for flexible environment management and code storage. It's particularly useful for AI workflows that require dynamic code generation and execution, such as data analysis, algorithm testing, or automated scripting tasks, without compromising system security or managing complex runtime setups."
chronulusai,chronulus-mcp,1.4,0,6.5,-1.9500000000000002,1.2049999999999998,MINIMAL,"The Chronulus MCP Server enables Claude to interact with Chronulus AI's forecasting and prediction agents, allowing users to analyze time series data and generate forecasts through natural language. Developed by Chronulus AI, this implementation is built using Python and integrates with the Chronulus API to provide specialized time series forecasting capabilities. The server can be deployed using pip, Docker, or uvx, and requires a Chronulus API key for authentication. It's particularly useful for users who need to perform time series analysis, generate predictions, and visualize forecasting data directly within their Claude conversations."
dcolley,swagger-mcp,1.0,0,7.1,-2.13,0.787,MINIMAL,"Swagger MCP Server ingests Swagger/OpenAPI specifications and exposes them as MCP tools, enabling AI assistants to interact with any API documented in the OpenAPI format. It supports multiple authentication methods (Basic Auth, Bearer Token, API Key, OAuth2), automatically generates tools from API endpoints, and provides real-time communication through Server-Sent Events. The implementation is designed for personal use to create a bridge between AI assistants and existing web APIs, making it particularly valuable for developers who want to give their AI assistants access to specific services without writing custom integrations for each API."
hanweg,mcp-discord,1.0,0,5.2,-1.56,0.844,MINIMAL,"This Discord MCP server, developed by Hanweg Altimer, provides a comprehensive integration between Discord and the Model Context Protocol. Built using Python and the discord.py library, it offers a wide range of Discord management tools including server information retrieval, message handling, channel and role management, and webhook operations. The server implements Discord's privileged intents for enhanced functionality and uses environment variables for secure bot token management. By abstracting Discord API interactions into a standardized MCP interface, it enables AI systems to easily interact with and manage Discord servers. This implementation is particularly useful for applications involving community management, automated moderation, and AI-assisted Discord bot development, facilitating use cases such as intelligent chatbots, content moderation, and server analytics."
isaacwasserman,mcp-vegalite-server,1.0,0,4.7,-1.4100000000000001,0.859,MINIMAL,"This MCP server, developed by Isaac Wasserman, enables AI assistants like Claude to create data visualizations using Vega-Lite syntax. Built in Python, it provides two core functions: saving data tables and generating visualizations from that data. The implementation stands out by leveraging the expressive power of Vega-Lite for creating a wide range of chart types. By connecting AI capabilities with data visualization, this server enables AI systems to analyze and present data visually. It is particularly useful for scenarios like exploratory data analysis, creating reports with charts, and building AI assistants that can generate insightful data visualizations on demand."
kazuph,mcp-taskmanager,1.4,0,5.9,-1.7700000000000002,1.2229999999999999,MINIMAL,"This MCP server, developed by kazuph, implements a task management system with a focus on structured workflows and user approval. It provides tools for planning, executing, and tracking tasks within requests, enforcing a step-by-step process that requires explicit user approval at key stages. The implementation uses TypeScript and leverages the @modelcontextprotocol/sdk for MCP compatibility. It's designed for scenarios where careful oversight and approval of task completion is critical, making it well-suited for project management in regulated industries, quality assurance processes, or any workflow where each step needs verification before proceeding."
mario-andreschak,mcp-windows-desktop-automation,1.0,0,6.3,-1.8900000000000001,0.8109999999999999,MINIMAL,"MCP Windows Desktop Automation provides a TypeScript server that wraps AutoIt functions for Windows desktop automation, allowing AI assistants to control mouse movements, keyboard input, window management, and UI controls. Developed by mario-andreschak, it exposes a comprehensive set of tools organized into categories like mouse, keyboard, window, process, and control operations, while also offering file access resources and screenshot capabilities. The server supports both stdio and WebSocket transports, making it particularly valuable for automating repetitive Windows tasks, form filling, and system monitoring directly through natural language instructions."
osomai,servicenow-mcp,1.0,0,7.8,-2.34,0.766,MINIMAL,"ServiceNow MCP server provides a bridge between AI assistants and ServiceNow ITSM functionality, enabling management of incidents, service catalogs, change requests, workflows, and changesets through natural language. Built with Python using the MCP protocol, it supports multiple authentication methods (Basic, OAuth, API Key) and features a modular architecture with specialized tools for each ServiceNow module. The implementation includes Claude Desktop integration for seamless interaction, making it particularly valuable for IT professionals who need to create incidents, browse service catalogs, manage change requests, or automate workflows without leaving their AI assistant interface."
pierrebrunelle,mcp-server-openai,1.0,0,4.6,-1.38,0.638,MINIMAL,"This OpenAI MCP server, developed by Pierre Brunelle, enables AI assistants to directly query OpenAI's language models through a standardized MCP interface. It integrates seamlessly with Claude, allowing it to leverage OpenAI's capabilities while maintaining a clear separation between the AI models. Built in Python, the implementation handles API authentication, request formatting, and exposes OpenAI's text generation features. By bridging Claude and OpenAI, this server expands Claude's knowledge and capabilities, enabling it to tackle a wider range of tasks. It is particularly useful for scenarios where Claude needs to complement its own abilities with OpenAI's specialized strengths, such as coding assistance, creative writing, or domain-specific knowledge."
tinyfish-io,agentql-mcp,1.2,0,7.1,-2.13,0.9129999999999999,MINIMAL,"AgentQL MCP server integrates with the AgentQL data extraction API to provide AI assistants with structured data extraction capabilities from web pages. The server exposes a single tool that accepts a URL and natural language prompt, then uses the AgentQL API to extract relevant data in JSON format based on the description. This implementation is particularly useful for scenarios requiring structured data from websites without needing to write custom scrapers, enabling AI assistants to gather specific information from web content on demand."
deepfates,mcp-replicate,1.0,0,7.2,-2.16,0.716,MINIMAL,"This Replicate MCP server implementation provides a bridge between the Model Context Protocol and Replicate's AI model hosting platform. Developed as an open-source project, it enables seamless interaction with Replicate's diverse collection of machine learning models through a standardized MCP interface. The server supports key operations such as listing available models, creating and managing predictions, and accessing model metadata. Built with TypeScript and leveraging the official Replicate API, it offers robust error handling, caching mechanisms, and webhook support. This implementation is particularly useful for developers and researchers looking to integrate Replicate's hosted AI models into their MCP-compatible applications, enabling easy access to a wide range of pre-trained models for tasks like image generation, text processing, and more."
66julienmartin,mcp-server-deepseek_r1,1.0,0,7.2,-2.16,0.716,MINIMAL,"This MCP server, developed by Kamel IRZOUNI, provides integration with the Deepseek R1 model. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with Deepseek's advanced language model capabilities. The implementation focuses on providing a standardized interface for text generation and analysis tasks, making it easier to incorporate Deepseek's AI features into various applications. It's particularly useful for developers and teams who want to leverage Deepseek's language model in their AI workflows, enabling use cases such as content generation, text analysis, and AI-assisted decision-making without directly managing API interactions with Deepseek."
smn2gnt,mcp-salesforce,1.6,0,3.7,-1.1099999999999999,1.489,MINIMAL,"This Salesforce MCP connector, developed by Suman G, enables seamless integration between Salesforce and AI-assisted workflows. It provides a Python-based interface for executing SOQL queries, performing SOSL searches, retrieving metadata, and managing Salesforce records through the Model Context Protocol. Built on the simple-salesforce library, it offers a range of Salesforce-specific operations including Tooling API and Apex REST requests. This implementation is particularly useful for developers and Salesforce administrators looking to incorporate AI assistance into their CRM workflows, enabling natural language interactions with Salesforce data and automating complex operations."
daipendency,daipendency-mcp,1.0,0,3.5,-1.0499999999999998,0.895,MINIMAL,"This MCP server, developed by Gus Narea, provides a standardized interface for extracting documentation and public API information from dependencies in local projects. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool called 'get_dependency_docs' that simplifies the process of retrieving dependency documentation. The implementation focuses on enhancing developer productivity by automating the extraction of dependency information, which is particularly useful for projects with complex dependency structures. It's designed for developers and AI agents working on code analysis, documentation generation, or dependency management tasks, enabling use cases such as automated code review, intelligent API suggestions, and streamlined project documentation without manually navigating through dependency files."
jayzeedesign,figma-mcp,1.6,0,4.8,-1.44,1.2440000000000002,MINIMAL,"Figma MCP allows AI coding agents to directly access Figma files and prototypes, bridging the gap between design and development workflows. Created by Jason Zhou, this Python-based implementation provides a server that connects to the Figma API using your personal API key. It's designed for seamless integration with Cursor and other MCP-compatible IDEs, enabling AI assistants to reference design files when generating code or answering queries about UI implementations."
marcelmarais,spotify-mcp-server,1.0,0,7.0,-2.0999999999999996,0.29000000000000004,MINIMAL,"Spotify MCP Server enables AI assistants like Claude and Cursor to control Spotify playback and manage playlists through the Model Context Protocol. Built by Marcel Marais, it provides a comprehensive set of tools for both reading operations (searching tracks, viewing playlists, getting currently playing tracks) and playback/creation operations (playing music, creating playlists, adding tracks). The implementation authenticates with the Spotify API using OAuth, automatically refreshes tokens when needed, and runs as a lightweight stdio server that can be easily integrated with Claude Desktop or Cursor for seamless music control during conversations."
rawveg,ollama-mcp,1.2,0,6.8,-2.04,0.996,MINIMAL,"This MCP server, developed by tigreen, provides a seamless integration between Ollama's local LLM models and MCP-compatible applications like Claude Desktop. Built with TypeScript and Express, it offers tools for listing, pulling, and interacting with Ollama models through a standardized interface. The implementation focuses on simplifying access to Ollama's capabilities, enabling AI assistants to utilize locally-run language models. By connecting AI models with Ollama's functionalities, this server allows for sophisticated scenarios like on-premise AI processing, custom model deployment, and privacy-focused applications. It's particularly valuable for developers and organizations looking to leverage local LLM capabilities within their AI workflows while maintaining data control and reducing cloud dependencies."
reading-plus-ai,mcp-server-deep-research,1.0,0,7.0,-2.0999999999999996,0.79,MINIMAL,"A deep research MCP server that enables AI assistants to conduct thorough, structured investigations on complex topics. It guides the research process through a systematic approach: elaborating on the research question, generating focused subquestions, performing web searches, and synthesizing findings into a comprehensive report. The server maintains a record of the research process and collected data, making them available as resources. Developed by ReadingPlus.AI, this implementation is particularly valuable for educational contexts, academic research, and professional report generation where well-cited, properly formatted research outputs are needed."
vidhupv,x-mcp,1.2,0,6.4,-1.92,1.008,MINIMAL,"This MCP server, developed by vidhupv, enables AI assistants like Claude to create, manage, and publish posts on X/Twitter directly. Built in Python, it provides a simple interface for composing tweets, creating threads, managing drafts, and publishing content. The implementation stands out by offering seamless integration with the X/Twitter API, allowing AI systems to interact with the social media platform programmatically. By connecting AI capabilities with Twitter's functionality, this server enables AI assistants to engage in social media management tasks. It is particularly useful for automating social media workflows, scheduling posts, analyzing engagement, and building AI-powered social media management tools."
xzq-xu,jvm-mcp-server,1.0,0,6.8,-2.04,0.796,MINIMAL,"JVM MCP Server provides a bridge between Claude and Java Virtual Machine applications, enabling direct interaction with running Java processes through Arthas diagnostic tools. Built with Python and Paramiko for SSH connectivity, it allows AI agents to execute commands, monitor performance, and debug Java applications remotely. The implementation connects to target JVM instances via SSH, manages connection pooling, and exposes Arthas capabilities as MCP tools, making it particularly valuable for developers who need to diagnose and troubleshoot Java applications without leaving their AI assistant conversation."
mattzcarey,mcp-thinking,1.0,0,4.9,-1.4700000000000002,0.647,MINIMAL,"This MCP thinking server, developed by Matt Carey, extracts the reasoning chain from the Deepseek R1 model and makes it available to Claude Desktop and other MCP clients. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a bridge between Deepseek's API and MCP-compatible applications. The implementation focuses on exposing Deepseek R1's step-by-step reasoning capabilities through a standardized interface. It's particularly useful for developers and researchers looking to incorporate Deepseek's advanced reasoning into their workflows, enabling use cases like complex problem-solving, decision analysis, and explainable AI without directly interacting with Deepseek's API."
mobilehackinglab,jadx-mcp-plugin,1.0,0,7.0,-2.0999999999999996,0.79,MINIMAL,"The jadx-mcp-plugin is a powerful extension for the popular Jadx decompiler that exposes the internal decompiled code structure through the Model Context Protocol (MCP) — a structured API designed to facilitate programmatic access and interaction with the decompiled codebase.

This plugin transforms Jadx into an AI-friendly analysis environment, making it easier to:

Navigate code programmatically: AI tools and scripts can query classes, methods, and fields using structured requests, removing the need for brittle regex-based parsing.

Automate analysis tasks: Streamline repetitive reverse engineering workflows by integrating AI agents or scripts that can reason over the code and metadata.

Power intelligent reverse engineering: Combine with LLMs or AI frameworks to build automated code summarizers, vulnerability scanners, or Android deobfuscators.

🧠 Use Case in AI Reverse Engineering AI models, such as Claude, GPT-40 or domain-specific agents, can use the MCP API to:

Extract call graphs or class hierarchies for architectural analysis.

Auto-document code by interpreting class roles and method behaviors.

Search and highlight suspicious patterns (e.g., dynamic loading, reflection).

🧠 𝗡𝗼𝘄 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗮𝘀𝗸 𝗖𝗹𝗮𝘂𝗱𝗲 𝘁𝗵𝗶𝗻𝗴𝘀 𝗹𝗶𝗸𝗲:
- ""𝑆𝑒𝑎𝑟𝑐ℎ 𝑎𝑙𝑙 𝐽𝑎𝑣𝑎 𝐶𝑙𝑎𝑠𝑠𝑒𝑠 𝑡ℎ𝑎𝑡 ℎ𝑎𝑛𝑑𝑙𝑒 𝑢𝑠𝑒𝑟 𝑐𝑜𝑛𝑡𝑟𝑜𝑙𝑙𝑒𝑑 𝑖𝑛𝑝𝑢𝑡 𝑡ℎ𝑎𝑡 𝑙𝑒𝑎𝑑 𝑡𝑜 𝑝𝑎𝑡ℎ 𝑡𝑟𝑎𝑣𝑒𝑟𝑠𝑎𝑙 𝑖𝑠𝑠𝑢𝑒𝑠""

- ""𝑆𝑒𝑎𝑟𝑐ℎ 𝑎𝑙𝑙 𝐽𝑎𝑣𝑎 𝐶𝑙𝑎𝑠𝑠𝑒𝑠 𝑡ℎ𝑎𝑡 ℎ𝑎𝑛𝑑𝑙𝑒 𝑢𝑠𝑒𝑟 𝑖𝑛𝑝𝑢𝑡 𝑡ℎ𝑎𝑡 𝑟𝑒𝑎𝑐ℎ 𝐽𝑁𝐼 𝑛𝑎𝑡𝑖𝑣𝑒 𝑐𝑎𝑙𝑙𝑠 𝑤𝑖𝑡ℎ 𝑢𝑠𝑒𝑟 𝑐𝑜𝑛𝑡𝑟𝑜𝑙𝑙𝑒𝑑 𝑖𝑛𝑝𝑢𝑡 𝑎𝑛𝑑 𝑓𝑖𝑛𝑑 𝑒𝑥𝑝𝑙𝑜𝑖𝑡𝑎𝑏𝑙𝑒 𝑣𝑢𝑙𝑛𝑒𝑟𝑎𝑏𝑖𝑙𝑖𝑡𝑖𝑒𝑠""

- ""𝐶𝑟𝑒𝑎𝑡𝑒 𝑎 𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛 𝑐𝑎𝑙𝑙 𝑔𝑟𝑎𝑝ℎ 𝑠ℎ𝑜𝑤𝑖𝑛𝑔 𝑡ℎ𝑒 𝑣𝑢𝑙𝑛𝑒𝑟𝑎𝑏𝑖𝑙𝑖𝑡𝑖𝑒𝑠""

Whether you're building a smarter reverse engineering assistant or just want more structured control over Jadx outputs, jadx-mcp-plugin is your gateway to the future of AI-augmented reverse engineering."
block,vscode-mcp,1.4,0,4.9,-1.4700000000000002,1.253,MINIMAL,"The VS Code MCP Server enables AI assistants to interact directly with VS Code through a bidirectional communication channel. It provides tools for file diffing with user approval, opening files and projects, executing shell commands in VS Code's terminal, and retrieving information about active editor tabs. The implementation consists of two main components: a server that handles MCP protocol communication and a VS Code extension that provides native integration features. This allows AI agents to perform code modifications, navigate projects, and execute commands without leaving the conversation interface, making it particularly valuable for collaborative coding sessions and AI-assisted development workflows."
cyanheads,git-mcp-server,1.0,0,7.8,-2.34,0.766,MINIMAL,"This Git MCP server provides AI assistants with capabilities to interact with Git repositories. Developed as an open-source project, it integrates with the simple-git library to enable core Git operations like cloning, committing, and managing branches. The server exposes a standardized interface for Git interactions, abstracting the complexities of version control operations. By leveraging TypeScript and following modern JavaScript practices, it offers a robust and type-safe implementation. This server is particularly useful for developers and DevOps teams looking to incorporate AI-driven Git operations into their workflows, such as automated code reviews, commit analysis, or intelligent branching strategies."
daniel-lxs,mcp-perplexity,1.6,0,7.7,-2.31,1.331,MINIMAL,"This MCP server, developed by Daniel Riccio, provides integration with the Perplexity API for advanced language understanding and generation. Built with Python and leveraging the MCP framework, it offers two main tools: ask_perplexity for expert programming assistance and chat_perplexity for ongoing conversations. The implementation focuses on maintaining chat history, supporting different Perplexity models, and providing streaming responses with progress reporting. It's particularly useful for developers and teams who want to incorporate Perplexity's language capabilities into their workflows, enabling use cases such as code debugging, technical explanations, and persistent AI-assisted conversations without directly managing API calls to Perplexity."
ramxx,mcp-tavily,1.6,0,7.6,-2.2800000000000002,1.328,MINIMAL,"This MCP server, developed by RamXX, provides AI-powered web search capabilities using Tavily's search API. It enables AI assistants like Claude to perform web searches, get direct answers to questions, and search recent news articles with relevant content extraction. The server exposes three main tools: comprehensive web search, answer generation with supporting evidence, and news article search. By integrating Tavily's AI-enhanced search functionality, this implementation facilitates more informed and up-to-date interactions. It is particularly useful for research tasks, fact-checking, generating reports, and staying current on specific topics through natural language queries to an AI assistant."
shenghaiwang,xcodebuild,1.4,0,5.6,-1.6799999999999997,1.232,MINIMAL,"This MCP server implementation provides tools for building and testing iOS Xcode projects. Developed by Tim Wang, it offers capabilities to build iOS Xcode workspaces/projects and run tests, sending errors back to the LLM. The server is designed for seamless integration with Visual Studio Code extensions like Cline or Roo Code, enabling efficient iOS development workflows and automated error handling in AI-assisted coding environments."
henryhawke,mcp-titan,1.0,0,7.4,-2.2199999999999998,0.778,MINIMAL,"This MCP server, developed by Henry Hawke, provides enhanced Titan Memory capabilities for AI agents. Built with TypeScript and leveraging TensorFlow.js, it offers improved context retention and retrieval through neural network-based memory encoding. The implementation focuses on optimizing long-term information storage and recall for conversational AI, enabling more coherent and contextually-aware interactions. It's particularly useful for applications requiring persistent memory across multiple conversations or complex, multi-step tasks where traditional context windows fall short."
fdrechsler,mcp-server-idapro,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"IDA Pro MCP server enables AI assistants to interact with IDA Pro for reverse engineering and binary analysis tasks. Created by Florian Drechsler, it provides a secure bridge between AI and IDA Pro through a remote control plugin that exposes key functionality like script execution, string/function analysis, and disassembly via HTTP endpoints. The implementation features robust error handling, automatic dialog suppression, and timeouts to ensure stable operation when automating IDA Pro tasks, making it valuable for security researchers and reverse engineers who want to leverage AI assistance while analyzing binaries."
joenorton,comfyui-mcp-server,1.0,0,6.3,-1.8900000000000001,0.8109999999999999,MINIMAL,"This MCP server implementation provides a bridge between ComfyUI and MCP clients for image generation tasks. It uses WebSockets for communication, allowing clients to send image generation requests with customizable parameters like prompt, width, and height. The server processes these requests through ComfyUI and returns the generated image URL. It's designed for easy integration into applications requiring on-demand AI image generation capabilities."
darkroaster,pubmearch,1.0,0,5.8,-1.7399999999999998,0.6739999999999999,MINIMAL,"PubMed Analysis MCP Server enables AI assistants to search, retrieve, and analyze scientific literature from PubMed. It leverages the Biopython library to access NCBI's Entrez API, providing structured article data including titles, authors, abstracts, and keywords. The server includes robust analysis capabilities for identifying research hotspots, tracking publication trends over time, and generating comprehensive statistical reports - making it valuable for researchers, academics, and healthcare professionals who need to quickly extract insights from medical literature."
quazaai,unitymcpintegration,1.0,0,7.5,-2.25,0.775,MINIMAL,"Unity MCP Integration enables AI assistants to understand and interact with Unity projects in real-time through a WebSocket-based communication system. It provides tools for retrieving scene hierarchies, project settings, and executing C# code directly in the Unity Editor. The implementation includes both a Unity Editor plugin with a debug window and a Node.js server component that implements the Model Context Protocol, making it particularly valuable for AI-assisted game development workflows."
shannonlal,mcp-postman,1.2,0,6.7,-2.0100000000000002,0.499,MINIMAL,"This MCP Postman server, developed using TypeScript and leveraging the Newman library, provides a standardized interface for running Postman collections via the Model Context Protocol. It offers tools for executing API tests, validating responses, and generating reports based on Postman collection runs. The server integrates seamlessly with existing Postman workflows, abstracting the complexities of collection execution into a consistent MCP interface. By enabling AI systems to interact with and analyze API test results, this implementation facilitates use cases such as automated API testing, continuous integration pipelines, and API documentation generation. The server is designed for easy deployment and configuration, making it valuable for developers and QA teams building AI-powered tools that interact with API test data."
spences10,mcp-memory-libsql,1.4,0,6.3,-1.8900000000000001,1.2109999999999999,MINIMAL,"This LibSQL-based persistent memory tool for MCP, developed by Scott Spence, provides a database interface for AI models to store and retrieve information. Built with TypeScript and leveraging the LibSQL client, it offers functionality for managing entities and relations in a knowledge graph structure. The implementation focuses on providing a robust, SQL-based storage solution that can be used locally or with remote databases. It's particularly useful for maintaining context across conversations, building knowledge bases, or creating persistent memory systems for AI assistants, enabling long-term information retention without requiring complex database management."
vectorize-io,vectorize-mcp-server,1.2,0,6.5,-1.9500000000000002,1.005,MINIMAL,"Vectorize MCP Server provides a bridge between Claude and Vectorize.io's vector database services, enabling advanced retrieval, text extraction, and deep research capabilities. Built with TypeScript, it exposes three primary tools: vector search for retrieving relevant documents from pipelines, text extraction for converting various document formats to Markdown, and deep research for generating comprehensive analyses from document collections. The implementation handles authentication through organization IDs and API tokens, making it particularly valuable for knowledge management, document analysis, and research workflows that require sophisticated vector search capabilities without leaving the conversation interface."
its-dart,dart-mcp-server,1.4,0,6.7,-2.0100000000000002,1.1989999999999998,MINIMAL,"Dart MCP Server provides AI assistants with direct access to Dart's project management platform, enabling task and document management through a comprehensive set of tools. Built by the Dart team, it allows for creating, retrieving, updating, and deleting tasks and documents, with support for filtering by various attributes like assignees, status, and priority. The server exposes both structured tools and resource templates that make it easy for AI assistants to interact with Dart's API, and includes prompts for common actions like creating tasks or summarizing work items. It's particularly valuable for teams using Dart who want to manage their projects directly through AI assistants like Claude without switching contexts."
ibraheem4,linear-mcp,1.0,0,7.5,-2.25,0.725,MINIMAL,"This Linear MCP server provides a bridge between AI assistants and Linear's project management platform. Built with TypeScript and leveraging the Linear SDK, it offers tools for issue, team, and project management. The implementation focuses on simplifying interactions with Linear's API, making it accessible for AI models to create, list, and update issues, as well as retrieve team and project information. It's particularly useful for tasks like automated issue tracking, project status reporting, or integrating task management into AI-driven workflows, enabling assistants to interact with Linear without requiring deep knowledge of the underlying API complexities."
kujenga,zotero-mcp,1.4,0,6.6,-1.9799999999999998,1.0979999999999999,MINIMAL,"This MCP server, developed by an unknown author, provides integration with the Zotero reference management system. Built with Python and leveraging the pyzotero library, it offers tools for searching Zotero libraries, retrieving item metadata, and accessing full-text content. The implementation focuses on providing a bridge between AI agents and scholarly research data, with features like formatted metadata output and attachment handling. It's particularly useful for researchers, students, and knowledge workers looking to incorporate their Zotero libraries into AI-assisted workflows, enabling use cases such as literature review automation, citation management, and content summarization without directly interacting with the Zotero API."
martinbowling,thoughtful-claude,1.0,0,7.3,-2.19,0.719,MINIMAL,"This FastMCP server implementation integrates DeepSeek's R1 reasoning engine with Claude, enabling advanced reasoning capabilities in MCP-compatible applications. Developed using Python and the FastMCP framework, it leverages DeepSeek's API to process queries and return formatted reasoning outputs. The server focuses on enhancing Claude's thought process by incorporating DeepSeek's large-scale reinforcement learning-based reasoning. It's particularly useful for developers and researchers looking to augment AI assistants with external reasoning capabilities, enabling more complex problem-solving, analysis, and decision-making tasks without requiring direct interaction with DeepSeek's API."
peng-shawn,mermaid-mcp-server,1.4,0,7.8,-2.34,1.166,MINIMAL,"This MCP server implementation converts Mermaid diagrams to PNG images. Developed by Shawn Peng, it uses Puppeteer for high-quality headless browser rendering and supports multiple diagram themes and customizable background colors. The server exposes a single 'generate' tool, making it easy to integrate Mermaid diagram generation into AI-assisted workflows or applications that require visual representation of data structures and processes."
spences10,mcp-svelte-docs,1.2,0,7.6,-2.2800000000000002,0.972,MINIMAL,"This MCP Svelte documentation server, developed by Scott Spence, provides an interface for AI assistants to access and query Svelte documentation. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for retrieving and parsing Svelte documentation content. The implementation focuses on efficient documentation access and formatting, making it easier for AI models to assist with Svelte-related queries and tasks. It's particularly useful for developers and AI assistants working with Svelte, enabling quick access to framework documentation, code examples, and best practices without requiring deep knowledge of Svelte's documentation structure or manual searching through web pages."
matthewhand,mcp-openapi-proxy,1.8,0,7.6,-2.2800000000000002,1.572,MINIMAL,"This MCP server, developed by Matthew Hand, dynamically exposes REST APIs defined by OpenAPI specifications as MCP tools. Built with Python and leveraging libraries like FastAPI and Pydantic, it offers two operation modes: a low-level mode that registers all API endpoints as separate tools, and a FastMCP mode for simplified exposure of specific endpoints. The implementation focuses on flexibility, allowing users to filter endpoints and customize tool naming. By connecting AI models with any OpenAPI-described API, this server enables seamless integration of external services into MCP-based workflows. It's particularly useful for developers and organizations looking to quickly incorporate diverse APIs into their AI systems without extensive custom coding."
mrjoshuak,godoc-mcp,1.0,0,7.5,-2.25,0.775,MINIMAL,"This MCP server, developed by mrjoshuak, provides efficient access to Go documentation for AI assistants. Built in Go, it offers tools for retrieving package documentation, exploring project structures, and accessing symbol-specific information. The server leverages Go's built-in documentation system, allowing AI models to understand Go projects without processing entire source files. Key features include support for local and remote packages, caching for performance, and flexible querying options. By bridging AI assistants with Go's documentation ecosystem, this implementation significantly reduces token usage and enhances AI capabilities for tasks like code comprehension, API exploration, and Go development assistance. It is particularly useful for scenarios requiring in-depth understanding of Go codebases, efficient project navigation, and context-aware coding support."
nexgene-research,nexonco-mcp,1.0,0,5.6,-1.6799999999999997,0.8320000000000001,MINIMAL,"Nexonco-MCP is an advanced server for accessing and analyzing clinical evidence data in precision oncology research. Developed by Nexgene Research, this Python implementation connects to the CIViC (Clinical Interpretation of Variants in Cancer) GraphQL API, providing flexible search capabilities across diseases, therapies, molecular profiles, and phenotypes. The server exposes a single tool that returns detailed reports containing summary statistics, top evidence entries, and literature citations, making it particularly valuable for researchers exploring relationships between genetic variants and cancer treatments. The implementation supports both Claude Desktop and NANDA server configurations, with Docker containerization available for easy deployment."
pab1it0,prometheus-mcp-server,1.0,0,7.7,-2.31,0.769,MINIMAL,"Prometheus MCP Server provides a bridge between AI assistants and Prometheus monitoring systems, enabling real-time metrics analysis through standardized interfaces. Built by pab1it0, it offers tools for executing PromQL queries, discovering available metrics, and retrieving metadata about monitoring targets. The implementation supports various authentication methods (basic auth and bearer tokens), is containerized with Docker for easy deployment, and includes comprehensive documentation for integration with Claude Desktop. This server is particularly valuable for DevOps workflows, system monitoring, and performance analysis use cases where AI assistants need direct access to operational metrics without switching context."
ruan11223344,mcpdocserver,1.0,0,6.4,-1.92,0.808,MINIMAL,"McpDocServer is a documentation crawler service that fetches and serves technical documentation through the Model Context Protocol. Built with Node.js and Puppeteer, it crawls specified documentation sources and makes them available via an API, allowing AI assistants to access up-to-date technical information. The implementation includes a browser manager for handling concurrent crawling tasks, a task manager for scheduling and monitoring crawl operations, and a server component that exposes the crawled documentation through standardized MCP endpoints."
translated,lara-mcp,1.2,0,7.6,-2.2800000000000002,0.972,MINIMAL,"Lara MCP Server provides a bridge to the Lara Translation API, enabling AI assistants to translate text between languages with support for language detection and context-aware translations. Developed by Translated, this TypeScript implementation uses the Model Context Protocol SDK to expose a single translation tool that leverages the official Lara client library. The server authenticates with Lara API credentials through environment variables and is packaged for both npm distribution and Docker deployment. Ideal for multilingual applications where AI assistants need to perform accurate translations without switching context."
yuniko-software,minecraft-mcp-server,1.0,0,7.3,-2.19,0.781,MINIMAL,"Minecraft MCP Server enables AI assistants to control a Minecraft bot through a comprehensive set of tools built on the Mineflayer library. The implementation provides capabilities for movement, block interaction, inventory management, entity detection, and in-game chat communication. Running as a command-line application with configurable server connection parameters, it establishes a bot that can navigate the Minecraft world, manipulate blocks, use items, and interact with the environment based on AI instructions. Particularly valuable for demonstrating AI-controlled gameplay, automated building, resource gathering, or exploration tasks without requiring direct player input."
hannesrudolph,sqlite-explorer-fastmcp-mcp-server,1.0,0,7.1,-2.13,0.787,MINIMAL,"This MCP server, developed by Hannes Rudolph, provides safe read-only access to SQLite databases for AI assistants. Built with FastMCP, it exposes tools for executing validated SELECT queries, listing tables, and describing table schemas. The implementation stands out with its focus on security, featuring query sanitization, parameter binding, and row limit enforcement. By connecting AI capabilities with local SQLite data sources, this server enables AI systems to explore and analyze structured data while maintaining strict safety controls. It is particularly useful for scenarios requiring AI-assisted data exploration, report generation, or insights extraction from SQLite databases, without risking data integrity or exposing sensitive information."
mubarakhalketbi,game-asset-mcp,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"Game Asset Generator MCP connects AI assistants to Hugging Face Spaces for creating 2D and 3D game assets from text prompts. It leverages three AI models: Flux-2D-Game-Assets-LoRA for pixel art sprites, Flux-Game-Assets-LoRA-v2 for 3D-ready images, and InstantMesh for converting images to 3D models. Built with Node.js, the server exposes these capabilities through a clean interface that saves generated assets locally, making it particularly valuable for game developers who want to rapidly prototype visual assets without leaving their AI assistant workflow."
qpd-v,mcp-guide,1.0,0,6.4,-1.92,0.808,MINIMAL,"This MCP guide server, developed by qpd-v, serves as an interactive tutorial for understanding and implementing Model Context Protocol concepts. It provides tools for explaining MCP components, demonstrating examples, and listing available servers across various categories. The implementation features a structured approach to presenting information through tools, resources, and prompts, making it particularly useful for developers new to MCP who want to explore its capabilities. By offering hands-on guidance for creating tools and resources, this server bridges the gap between theoretical knowledge and practical implementation, enabling users to quickly grasp MCP fundamentals and start building their own integrations."
burtthecoder,mcp-virustotal,1.2,0,6.8,-2.04,0.9039999999999999,MINIMAL,"This VirusTotal MCP server, developed by BurtTheCoder, enables AI assistants like Claude to leverage VirusTotal's threat intelligence capabilities. Built in JavaScript/TypeScript, it provides functionality for scanning URLs, analyzing file hashes, and retrieving IP address reports. The implementation stands out by offering relationship analysis tools and pagination support for large result sets. By connecting AI capabilities with VirusTotal's extensive threat data, this server allows AI systems to perform security analysis and threat detection programmatically. It is particularly useful for building AI-powered tools for malware research, phishing detection, and network security monitoring that require access to up-to-date threat intelligence."
radareorg,radare2-mcp,1.0,0,4.3,-1.29,0.871,MINIMAL,"Radare2 MCP Server provides a direct bridge between AI assistants like Claude and the radare2 binary analysis framework. This implementation enables AI tools to perform sophisticated binary analysis tasks including opening files, running commands, analyzing code, and disassembling instructions through a simple stdin/stdout communication model. The server exposes radare2's capabilities as MCP resources and tools, making it particularly valuable for reverse engineering workflows, malware analysis, and debugging applications without leaving the AI assistant conversation interface."
zh19980811,easy-mcp-autocad,1.0,0,4.1,-1.23,0.877,MINIMAL,"Easy-MCP-AutoCad is a Python-based server for integrating AutoCAD with the Model Context Protocol, enabling programmatic interaction with AutoCAD through libraries like pyautocad and comtypes. The implementation supports database management via SQLAlchemy and provides a flexible framework for automating CAD-related tasks, with deployment capabilities through PyInstaller."
gotoolkits,mcp-difyworkflow-server,1.0,0,5.6,-1.6799999999999997,0.6679999999999999,MINIMAL,"This Dify Workflow MCP server, developed by an unnamed creator, integrates with the Dify API to enable AI-driven workflow execution. Built with Go and leveraging the MCP-Go library, it provides tools for listing authorized workflows and executing specified workflows with custom inputs. The server implements environment-based configuration, allowing for flexible API key and workflow name management. By abstracting the complexities of Dify API interactions, it enables AI systems to easily trigger and manage complex workflows. This implementation is particularly valuable for applications requiring programmatic access to Dify workflows, facilitating use cases such as automated task execution, multi-step data processing, and AI-driven decision making across various domains."
joshuarileydev,app-store-connect-mcp-server,1.0,3,6.8,-2.04,0.904,MINIMAL,"This App Store Connect MCP server, developed by JoshuaRileyDev, enables AI assistants like Claude to interact with the App Store Connect API. Built in JavaScript/TypeScript, it provides capabilities for managing beta testers, beta groups, and apps in App Store Connect. The implementation stands out by offering a standardized interface to App Store Connect functionality, allowing AI systems to programmatically control app distribution and testing workflows. By connecting AI capabilities with iOS app management, this server enables automated beta testing, app submission processes, and analytics retrieval. It is particularly useful for building AI-powered tools for iOS app deployment, user feedback analysis, and streamlined App Store management."
lethain,library-mcp,1.0,0,4.4,-1.3200000000000003,0.868,MINIMAL,"Library-MCP is a server implementation that enables AI assistants to interact with Markdown knowledge bases through a set of specialized tools. Created by Will Larson (lethain), it indexes folders of Markdown files with YAML frontmatter, allowing users to retrieve content by tags, text search, slugs/URLs, or date ranges. The server exposes navigation tools for exploring tags and content relationships, making it particularly valuable for users with large document collections that exceed context windows or span multiple knowledge bases. Designed as a hobby project for local use, it works well with Claude Desktop and similar MCP-compatible assistants."
nighttrek,ollama-mcp,1.0,0,7.5,-2.25,0.775,MINIMAL,"This Ollama MCP server implementation provides a bridge between the Model Context Protocol and Ollama, a local large language model runner. Developed as an open-source project, it enables seamless interaction with Ollama-hosted models through a standardized MCP interface. The server supports key operations such as chat completions, with real-time streaming capabilities using Server-Sent Events (SSE). Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers robust error handling and configuration options. This implementation is particularly useful for developers and researchers looking to integrate locally-hosted AI models into their MCP-compatible applications, enabling low-latency access to powerful language models while maintaining data privacy and control."
psycharch,minimax-mcp-tools,1.0,0,7.4,-2.2199999999999998,0.722,MINIMAL,"Minimax MCP Tools provides integration with Minimax's AI services, offering image generation and text-to-speech capabilities through a Node.js implementation. The server exposes these features via the Model Context Protocol, allowing editors like Windsurf and Cursor to seamlessly access Minimax's image-01 model for creating images from text prompts and speech-01 models for converting text to natural-sounding speech with various voice options and customizations. It's particularly useful for creative workflows requiring AI-generated visual or audio content without leaving the editing environment."
spences10,mcp-omnisearch,1.2,0,7.6,-2.2800000000000002,0.9279999999999999,MINIMAL,"Unified search and content processing MCP server that integrates multiple AI and web search providers like Tavily, Brave, Kagi, Perplexity, and Firecrawl. Provides a flexible tool registry with detailed provider descriptions, supporting search, AI response, content extraction, and content enhancement across various domains. Designed to enable AI assistants to dynamically select the most appropriate provider for complex information retrieval and processing tasks."
davidshtian,mcp-on-aws-bedrock,1.0,0,6.9,-2.0700000000000003,0.7929999999999999,MINIMAL,"This AWS Bedrock MCP implementation, developed by Anthropic, provides a seamless integration between Anthropic's Model Context Protocol and Amazon's Bedrock service. Built with Python using boto3 and the MCP SDK, it offers a client that can interact with MCP-enabled tools through Bedrock's runtime service, specifically using the Nova Pro model. The implementation features tool format conversion for Bedrock compatibility, asynchronous communication handling, and structured logging. By bridging MCP and Bedrock, it enables AI systems to leverage both protocols' strengths, making it particularly useful for developers looking to combine Anthropic's MCP capabilities with AWS's scalable infrastructure for applications in natural language processing, task automation, and AI-assisted decision making."
hannesrudolph,imessage-query-fastmcp-mcp-server,1.0,0,6.2,-1.8599999999999999,0.8140000000000001,MINIMAL,"This MCP server, developed by Hannes Rudolph, enables AI assistants to query and analyze iMessage conversations on macOS. Built with FastMCP and the imessagedb library, it provides read-only access to the iMessage database with robust safety features like phone number validation and attachment handling. The server exposes a 'get_chat_transcript' tool that retrieves message history for specific contacts, including text, timestamps, and attachment info. By connecting AI capabilities with personal messaging data, this implementation allows AI systems to gain insights from conversation history while maintaining privacy and security. It is particularly useful for personal productivity use cases like summarizing past discussions, analyzing communication patterns, or extracting action items from chats."
mkummer225,google-sheets-mcp,1.0,0,6.5,-1.9500000000000002,0.30499999999999994,MINIMAL,"A Google Sheets MCP server that enables AI assistants to interact directly with spreadsheets through the Google Sheets API. Developed by Matt Kummer, this TypeScript implementation provides a comprehensive set of tools for creating, reading, and editing spreadsheets, including operations like creating new documents, managing sheets, manipulating rows and columns, and editing individual cells. The server handles OAuth authentication with Google's services and formats responses in a structured manner for AI consumption. It's particularly useful for scenarios requiring data analysis, report generation, or collaborative document management where AI assistants need direct access to spreadsheet functionality."
mzxrai,mcp-openai,1.2,0,7.4,-2.2199999999999998,0.9219999999999999,MINIMAL,"This MCP server, developed by mzxrai, enables AI assistants like Claude to seamlessly interact with OpenAI's language models directly from the Claude Desktop app. It supports multiple models including GPT-4 and provides a simple message passing interface for tasks like text generation and completion. The server integrates with the OpenAI API and handles authentication via API key. By bridging Claude's capabilities with OpenAI's models, this implementation allows users to leverage multiple AI systems in a single conversation. It is particularly useful for comparing model outputs, accessing specialized capabilities, or supplementing Claude's knowledge in areas where OpenAI models may excel."
r-huijts,rijksmuseum-mcp,1.0,0,6.9,-2.0700000000000003,0.7070000000000001,MINIMAL,"This Rijksmuseum Amsterdam MCP server, developed by R.Huijts, provides a bridge to the Rijksmuseum API, enabling AI assistants to explore and interact with the museum's vast art collection. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for artwork search, detailed information retrieval, high-resolution image access, and user collection exploration. The server implements error handling and environment configuration, using dotenv for API key management. By abstracting the complexities of the Rijksmuseum API, it allows AI systems to easily access and analyze art historical data. This implementation is particularly valuable for applications in art research, education, and cultural exploration, facilitating use cases such as virtual museum tours, art analysis, and personalized collection curation."
ruixingshi,deepseek-thinker-mcp,1.2,0,6.9,-2.0700000000000003,0.907,MINIMAL,"This MCP server, developed by Ruixing Shi, provides a standardized interface for interacting with the DeepSeek Thinker model. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for generating chain-of-thought reasoning. The implementation focuses on exposing DeepSeek's advanced reasoning capabilities through a consistent MCP interface, enabling AI models to perform complex problem-solving and analytical tasks. By connecting AI assistants with DeepSeek's powerful cognitive abilities, this server facilitates sophisticated scenarios like multi-step reasoning, decision-making support, and in-depth analysis. It's particularly valuable for applications requiring advanced AI-driven problem-solving, such as research assistance, strategic planning, and complex data interpretation."
square,square-mcp-server,1.0,0,7.7,-2.31,0.769,MINIMAL,"Square MCP Server provides a bridge between AI assistants and Square's complete API ecosystem, enabling comprehensive e-commerce and payment processing capabilities. Built by Block, Inc., it offers tools for managing payments, orders, inventory, customers, and more through a standardized interface that handles authentication, request formatting, and response parsing. The server supports both sandbox and production environments, implements write protection options, and is designed for integration with Claude Desktop and Goose. It's particularly valuable for developers who need to integrate Square's payment and business management capabilities into conversational AI applications."
winor30,mcp-server-datadog,1.2,0,7.6,-2.2800000000000002,0.9279999999999999,MINIMAL,"This MCP server implementation provides integration with Datadog's API, enabling AI assistants to manage and retrieve incident information. Developed by winor30, it offers tools for listing and retrieving Datadog incidents, with plans for future expansion to cover more Datadog resources. Built using TypeScript and leveraging the Datadog API client, the server focuses on incident management capabilities. It is particularly useful for AI applications that need to monitor and respond to system incidents or integrate Datadog's observability data into their workflows."
xeroapi,xero-mcp-server,1.2,0,7.3,-2.19,0.981,MINIMAL,"Xero MCP Server provides a bridge to the Xero accounting API, enabling AI assistants to interact with financial data and perform accounting operations. Built with TypeScript, it supports tools for managing contacts, invoices, quotes, and credit notes through OAuth2 custom connections. Particularly useful for businesses seeking to automate financial workflows and integrate accounting data directly into conversational AI interactions."
chanmeng666,server-google-news,1.0,0,7.5,-2.25,0.725,MINIMAL,"This Google News MCP server, developed by Chan Meng, provides a streamlined interface for accessing Google News search results via the SerpAPI. Built with TypeScript and leveraging the MCP SDK, it offers tools to query and retrieve up-to-date news articles, headlines, and related information. By abstracting the complexities of SerpAPI interactions into a standardized MCP interface, it enables AI systems to easily incorporate current news data into their workflows. This implementation is particularly useful for applications involving news aggregation, trend analysis, and information retrieval, facilitating use cases such as personalized news feeds, media monitoring, and real-time event tracking."
dmontgomery40,mcp-3d-printer-server,1.2,5,7.8,-2.34,0.9339999999999999,MINIMAL,"This MCP server implementation provides a bridge between AI assistants and various 3D printer management systems, including OctoPrint, Klipper, Duet, Repetier, and Bambu Labs printers. Developed by David Montgomery, it offers tools for printer control, file management, and advanced STL file manipulation. The server is designed for use cases requiring 3D printing integration, such as remote printer monitoring, automated print job management, and custom model modifications."
jurasofish,mcpunk,1.6,0,7.7,-2.31,1.369,MINIMAL,"This MCP implementation, developed by Michael Jurasovic, provides a Python-based framework for building and interacting with MCP servers. It leverages libraries like FastMCP, GitPython, and SQLAlchemy to offer a robust foundation for creating MCP tools and resources. The implementation includes features for version control integration, database management, and asynchronous operations. It stands out by focusing on extensibility and developer-friendly abstractions, making it easier to create custom MCP servers and clients. This framework is particularly useful for developers looking to rapidly prototype and deploy MCP-compatible applications, especially those requiring integration with existing Python codebases or complex data processing workflows."
pinkpixel-dev,mem0-mcp,1.0,0,7.8,-2.34,0.734,MINIMAL,"The mem0 MCP server provides a memory capabilities layer for AI assistants, enabling them to store, retrieve, and utilize information across conversations. Built with FastAPI and the mem0ai library, it features an autonomous memory system that automatically extracts user information from conversations without requiring explicit commands, categorizes it appropriately, and injects relevant memories into future interactions. The implementation supports multiple LLM providers including OpenAI, Anthropic, Google, and Ollama, with configurable embedding models for semantic search. This server is particularly valuable for applications requiring persistent user context, personalized interactions, and long-term memory capabilities that enhance the natural flow of AI conversations."
publikprinciple,obsidian-mcp-rest,1.0,0,7.5,-2.25,0.775,MINIMAL,"This MCP server implementation, developed by PublikPrinciple, provides a bridge between AI assistants and Obsidian vaults through a local REST API. Built with TypeScript and leveraging the Obsidian Local REST API plugin, it offers tools for reading, writing, and searching notes within Obsidian. The implementation focuses on secure, local access to Obsidian data, making it ideal for AI-assisted note-taking and knowledge management. It's particularly useful for developers and researchers looking to integrate Obsidian's powerful note-taking capabilities into AI workflows, enabling tasks like automated note analysis, content generation, and knowledge base querying while keeping sensitive data local and secure."
tuncer-byte,memory-bank-mcp,1.0,0,7.5,-2.25,0.725,MINIMAL,"Memory Bank MCP is a structured documentation system that helps teams create, manage, and access project knowledge through interconnected Markdown documents. Developed by tuncer-byte, it generates and maintains six core document types (project brief, product context, system patterns, tech context, active context, and progress) that capture different aspects of project information from high-level goals to technical details. The server leverages the Gemini API for AI-assisted document generation and updates, provides advanced search capabilities across all documents, and supports customizable storage locations, making it particularly valuable for teams seeking to maintain consistent project documentation and knowledge management through AI assistants."
george5562,jira-mcp-server,1.0,0,7.6,-2.2800000000000002,0.772,MINIMAL,"This Jira MCP server, developed by an unnamed creator, integrates Jira project management capabilities with AI assistants. It leverages the Jira API to provide a streamlined interface for managing projects, issues, and workflows. The server abstracts Jira's complex API, offering operations for user management, issue creation and updating, project configuration, and automated workflows. By connecting AI systems with Jira's collaborative features, this implementation enables assistants to automate project management tasks, track progress, and maintain organized development processes. It is particularly useful for software development teams and project managers looking to enhance their Jira-based workflows with AI-driven insights and automation."
heurist-network,heurist-mesh-mcp-server,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"Heurist Mesh MCP Server connects Claude to the Heurist Mesh network of specialized Web3 and blockchain tools through the Model Context Protocol. This implementation provides access to various agents including CoinGecko for cryptocurrency data, DexScreener for trading pair information, GoPlus for token security analysis, and search capabilities through Exa and Firecrawl. Built by Heurist AI, the server supports both SSE and stdio transports, making it compatible with Claude in Cursor, Claude Desktop, and other MCP-compatible interfaces. Users can access multiple blockchain services with a single API key, making it ideal for cryptocurrency research, token security verification, and Web3 data analysis workflows."
mixelpixx,google-search-mcp-server,1.2,0,7.8,-2.34,0.9339999999999999,MINIMAL,"This Google Search MCP server, developed using TypeScript and Python, provides AI assistants with a standardized interface to perform web searches and analyze webpage content. It integrates with the Google Custom Search API for retrieving search results and utilizes libraries like Trafilatura and BeautifulSoup for content extraction and markdown conversion. The server offers tools for executing searches, analyzing individual webpages, and batch processing multiple URLs. It's particularly valuable for AI systems that require up-to-date web information, enabling use cases such as research assistance, content summarization, and data aggregation from multiple online sources."
jagan-shanmugam,open-streetmap-mcp,1.0,0,7.5,-2.25,0.775,MINIMAL,"The Windows Command Line MCP Server provides a robust, secure bridge between AI models and Windows system operations. It allows controlled execution of commands, project creation, and system information retrieval while maintaining strict security protocols."
pv-bhat,vibe-check-mcp-server,1.0,0,7.6,-2.2800000000000002,0.728,MINIMAL,"The definitive Vibe Coder's sanity check Model Context Protocol (MCP) server: Prevent cascading errors in AI workflows by implementing strategic pattern interrupts. Uses tool call ""Vibe Check"" with LearnLM 1.5 Pro (Gemini API), fine-tuned for pedagogy and metacognition to enhance complex workflow strategy, and prevents tunnel vision errors.

- Prevent cascading errors in AI workflows by implementing strategic pattern interrupts.
- Uses tool call ""Vibe Check"" with LearnLM 1.5 Pro (Gemini API), fine-tuned for pedagogy and metacognition to enhance complex workflow strategy, and prevents tunnel vision errors.
- Implements ""Vibe Distill"" to encourage plan simplification, prevent over-engineering solutions, and minimize contextual drift in agents.
- Self-improving feedback loops: Agents can log mistakes into ""Vibe Learn"" to improve semantic recall and help the oversight AI target patterns over time."
