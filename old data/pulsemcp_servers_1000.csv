owner,repo,github_stars,download_count,experimental_ai_generated_description
021-factory,laravel-debugbar-mcp,1,,"Laravel DebugBar MCP Server provides a bridge between AI assistants and the Laravel DebugBar debugging tool, enabling access to detailed request logs and diagnostic information from Laravel applications. The server exposes tools for retrieving request logs with filtering capabilities and accessing specific debug data like queries, routes, views, and models through a standardized interface. Built with TypeScript and the MCP protocol, it features data formatting to simplify verbose debug output, retry logic for API requests, and relative time calculations for improved readability. This implementation is particularly valuable for developers who need to analyze Laravel application performance and behavior directly through conversational AI."
0xbeedao,mcp-taskwarrior,0,1222,"mcp-taskwarrior is a server implementation by Bruce Kroeze that facilitates task management through Taskwarrior. It provides four essential tools for managing tasks: adding, updating, deleting, and listing tasks, with support for organizing by project and priority levels. Built with TypeScript and using the fastmcp and taskwarrior-lib dependencies, it can be used either through npx or by local installation, making it ideal for users who want to integrate task management capabilities into their AI assistant workflows."
0xbruno,mcpexec,0,,"This MCP server implementation provides a tool for executing local CLI commands asynchronously. Developed by 0xBruno, it uses FastMCP and asyncio to run shell commands securely, handling command arguments with spaces and quotes properly. The server is designed for use cases requiring remote execution of system commands, with built-in error handling for failed commands."
0xdwong,sui-mcp,1,,"Sui MCP server enables AI assistants to interact with the Sui blockchain network through a standardized interface. Built with TypeScript, it provides tools for requesting test tokens from the Sui devnet faucet and integrates with the official Sui SDK. This implementation is particularly valuable for blockchain developers and users who need to test Sui smart contracts or manage wallets through conversational AI."
0xgval,evm-mcp-tools,5,,"EVM MCP Tools provides Ethereum blockchain analysis capabilities directly within Claude AI conversations. It offers a suite of tools for smart contract auditing, wallet analysis, token balance checking, and profitability tracking across Ethereum and compatible chains. The implementation leverages Web3.js, Moralis, and Etherscan APIs to fetch on-chain data, analyze contract security, detect token standards, and calculate wallet profit/loss metrics. Designed for integration with Claude for Desktop, it enables users to perform blockchain analysis tasks without leaving their conversation context, making it particularly valuable for developers, traders, and researchers who need quick access to Ethereum data."
0xgval,twitter-x-mcp-server,1,,"X Tools for Claude MCP is a lightweight toolkit that enables Claude AI to search Twitter with natural language queries and display results based on user intent. Built with Node.js and the Model Context Protocol SDK, it leverages the RapidAPI Twitter154 endpoint to provide advanced search capabilities including filtering by keywords, users, dates, and engagement metrics. The implementation formats tweets with clean markdown, supports pagination for larger result sets, and intelligently adapts its response style based on whether users want raw data viewing or analytical insights, making it particularly valuable for researchers, marketers, and social media analysts who need to quickly access and understand Twitter content."
0xhijo,mcp_twitter,7,525,"MCP Twitter provides direct interaction with Twitter/X through a standardized set of tools, enabling AI models to perform actions like creating posts, replying to tweets, following users, and retrieving profile data. Built by 0xhijo, it supports two authentication methods (API credentials or direct Twitter login) and exposes 11 distinct Twitter functionalities through a Node.js server. The implementation is designed for seamless integration with Claude through the claude_mcp_config.json file, making it particularly valuable for automated social media management, content creation, and Twitter data analysis without leaving the conversation interface."
0xkoda,eth-mcp,5,,"This Ethereum RPC MCP server provides a bridge to interact with the Ethereum blockchain through standard JSON-RPC calls. Developed by Koda, it exposes three essential tools: eth_getCode for retrieving contract bytecode, eth_gasPrice for checking current gas prices, and eth_getBalance for querying account balances. The implementation uses axios for making HTTP requests to a public Ethereum RPC endpoint (llamarpc) and includes error handling with human-readable responses. Ideal for AI assistants that need to perform basic Ethereum blockchain queries without requiring complex wallet integration."
0xkoda,mcp-rust-docs,30,,"This MCP server fetches and returns documentation for Rust crates from docs.rs, providing essential context for LLMs working with Rust code. It implements a single tool, 'lookup_crate_docs', which retrieves HTML documentation, converts it to plain text, and truncates it if necessary. The server is designed for easy integration with AI assistants like Claude Desktop and can be tested using the MCP Inspector."
0xrag,mcp,0,,"A lightweight MCP server built with TypeScript and Coinbase's AgentKit, designed to provide a flexible wallet interaction framework using Viem on the Base Sepolia testnet. The implementation sets up a standard MCP server with tool listing and execution capabilities, generating a random wallet client and exposing blockchain-related actions through a stdio transport mechanism."
0xshellming,mcp-summarizer,70,,"MCP Server for AI Summarization, Support for multiple content types:
  - Plain text
  - Web pages
  - PDF documents
  - EPUB books
  - HTML content"
0xzap,worldminiapp_mcp,2,,"WorldMiniApps MCP Server provides AI assistants with access to World ID and MiniApps documentation through vector search capabilities. The implementation uses FastMCP to expose query tools that retrieve relevant documentation chunks from locally stored vector databases built with OpenAI embeddings and SKLearnVectorStore. It supports both World ID authentication documentation and the World MiniApps JavaScript SDK, making it particularly valuable for developers building applications on the World ecosystem who want to access technical documentation without leaving their Cursor editor environment."
13rac1,videocapture-mcp,6,,"VideoCapture MCP provides AI assistants with access to webcams and video sources through OpenCV, enabling image capture and camera control capabilities. The server exposes tools for capturing still images, managing camera connections, adjusting video properties like brightness and resolution, and performing basic image transformations such as horizontal flipping. Developed by 13rac1, this implementation focuses on still image capture only (no video streaming) and is designed to integrate seamlessly with Claude Desktop, making it ideal for AI applications that need to analyze real-world objects or environments through webcam imagery."
1595901624,qrcode-mcp,5,,"This client implementation allows users to retrieve the latest proxy nodes and generate QR codes for them. It utilizes the Model Context Protocol SDK and the QRCode library to fetch proxy information and create visual representations. The tool is designed to simplify access to up-to-date proxy data, making it useful for applications that require quick and easy proxy configuration."
1broseidon,mcp-jira-server,7,,"This Jira MCP server, developed using TypeScript and the Model Context Protocol SDK, provides AI assistants with a standardized interface to interact with Jira's REST API. It offers tools for managing issues, including creation, listing, updating, and deletion, as well as adding comments. The server abstracts the complexities of Jira's API, handling authentication and request formatting. It's particularly valuable for AI systems focused on project management and issue tracking, enabling use cases such as automated task creation, status updates, and project overview generation. The implementation includes error handling for common Jira-specific scenarios and formats issue information for easy consumption by AI assistants."
1mcp-app,agent,7,700,"1MCP (One MCP) is a unified server implementation that aggregates multiple MCP servers into a single interface, reducing system resource usage and simplifying configuration management across different AI assistants. Developed by William Xu, it supports both stdio and SSE transport methods, handles dynamic configuration reloading without server restart, and enables filtering of servers by tags. The implementation allows AI tools like Claude Desktop, Cursor, Cherry Studio, and Roo Code to share access to the same underlying MCP servers, making it particularly valuable for users working with multiple AI assistants that need access to the same tools and resources."
1panel-dev,mcp-1panel,104,,"MCP-1Panel is a server implementation that provides AI assistants with direct access to 1Panel server management capabilities. It exposes tools for managing websites, databases, SSL certificates, and applications through a standardized interface. Built with Go, it supports both stdio and SSE transport modes, authenticates with 1Panel via access tokens, and handles API requests through a client that manages error states appropriately. This implementation is particularly valuable for server administrators who want to monitor system information, deploy applications like MySQL and OpenResty, or manage web infrastructure directly through conversational AI without switching contexts."
1rb,mongo-mcp,9,,"This MongoDB MCP server implementation enables interaction with MongoDB databases through the Model Context Protocol. It utilizes TypeScript and the MongoDB driver to provide a bridge between MCP clients and MongoDB operations. The server is designed to run in various environments, including Windows (Git Bash and WSL) and Unix-like systems, making it versatile for different development setups. It's particularly useful for projects that require seamless integration of MongoDB capabilities into MCP-based workflows."
1yhy,oss-mcp,1,,"OSS-MCP is a server implementation that provides a bridge between AI assistants and Object Storage Services (OSS), specifically Ali OSS. Developed by 1yhy, this TypeScript-based server enables file operations through a RESTful API, allowing assistants to upload, download, list, and manage files in cloud storage. The implementation leverages the ali-oss SDK and Express framework to handle requests efficiently, with environment-based configuration for secure credential management. It's particularly valuable for use cases requiring document management, media file handling, or backup operations without leaving the assistant interface."
1yhy,figma-context-mcp,8,,"Figma-Context-MCP is a server implementation that bridges AI assistants with the Figma design platform, enabling direct access to Figma file data through the MCP protocol. It transforms complex Figma API responses into simplified, structured design information that includes layout properties, styling, and text content, making it easier for AI assistants to understand and reason about design files. The server provides tools for retrieving complete Figma files or specific nodes, downloading images, and processing design hierarchies - making it particularly valuable for design review workflows, code generation from designs, and collaborative design discussions."
21st-dev,magic-mcp,1575,,"This MCP server implementation provides a bridge to the 21st.dev/magic API, enabling AI assistants to interact with frontend development tasks. Developed by sergeibynas, it offers tools for working with frontend code directly from IDEs like Cursor, WindSurf, and VSCode with Cline. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on secure API key management and is designed to streamline frontend development workflows. The implementation is particularly useful for AI applications that need to automate or assist with frontend coding tasks, offering a unique approach to AI-assisted web development."
oyasimi1209,magic-mcp,1,,"Magic MCP Server provides a bridge to 21st.dev's Magic API, enabling AI assistants to generate UI components and search for logos. Developed by serafim@21st.dev, this TypeScript implementation offers three specialized tools: creating UI components from descriptions, fetching existing components for inspiration, and searching for company logos in various formats (SVG, JSX, TSX). The server authenticates with the 21st.dev API using an API key and is designed to be easily integrated with AI clients like Cline and Windsurf through Smithery. Ideal for developers who want to quickly generate or find UI components and brand assets without leaving their AI assistant workflow."
29decibel,record-to-markdown,0,,"This Record to Markdown MCP implementation, developed by 29decibel, provides a Python-based interface for AI assistants to save conversation content to markdown files or Apple Notes. Built using libraries like httpx, markdown2, and mcp, it offers tools for converting markdown to HTML and creating notes with AppleScript integration. The implementation focuses on efficient content preservation and formatting, making it easier for AI models to store and organize conversation outputs. It's particularly useful for users of Claude desktop who want to automatically save their AI interactions, enabling easy reference, sharing, or further analysis of conversation content without manual copying and pasting."
2b3pro,markdown2pdf-mcp,2,,"This Markdown to PDF conversion MCP server, developed by 2b3pro, provides a robust solution for generating PDF documents from Markdown content. Built with TypeScript and leveraging Puppeteer for modern PDF generation, it offers features like syntax highlighting, custom CSS styling, and optional watermarking. The server implements file naming conflict resolution, configurable paper formats, and uses Chrome v131.0.6778.204 for consistent rendering across installations. By abstracting the complexities of PDF creation, it enables AI systems to easily produce formatted documents from Markdown input. This implementation is particularly valuable for applications requiring programmatic document generation, facilitating use cases such as report creation, documentation publishing, and content distribution in PDF format."
2b3pro,roam-research-mcp,38,,"This Roam Research MCP server, developed by Ian Shen / 2B3 PRODUCTIONS LLC, provides AI assistants with a standardized interface to interact with Roam Research graphs. Built using TypeScript and leveraging the Roam Research API SDK, it offers capabilities for searching blocks, creating and manipulating pages and blocks, and performing batch operations. The server implements recursive block reference resolution and markdown conversion for content retrieval. It's designed for flexibility, supporting various Roam Research operations through a set of eleven core tools. This implementation is particularly valuable for researchers, writers, and knowledge workers, enabling use cases such as automated note-taking, content organization, and intelligent information retrieval within Roam Research graphs."
304techmaven,plaid-mcp-server,4,,"Plaid MCP Server provides a robust bridge to the Plaid financial API, enabling AI assistants to securely access and interact with bank account data, transactions, and authentication flows. Built with TypeScript and supporting both stdio and SSE transports, it offers tools for creating link tokens, exchanging public tokens, syncing transactions, and handling Plaid webhooks. The implementation is particularly valuable for financial analysis, automated transaction tracking, and building AI-powered personal finance assistants."
3rzy,make-mcp-integration-issue,0,,"This MCP server implementation provides integration with Make (formerly Integromat) for automating workflows. It allows users to connect Make scenarios with MCP-enabled AI assistants, enabling automated task execution and data processing. The server is designed for developers looking to enhance their AI workflows with Make's extensive library of app integrations and automation capabilities."
54rt1n,container-mcp,4,,"Container-MCP provides a secure, sandboxed environment for executing code, running commands, accessing files, and performing web operations on behalf of large language models. Built by 54rt1n, it implements multiple layers of security including container isolation, AppArmor profiles, Firejail sandboxing, and strict resource limits to ensure safe execution of potentially risky operations. The architecture uses domain-specific managers for different operation types (Bash, Python, file operations, web browsing) and runs inside an Ubuntu container with carefully controlled permissions and access restrictions. This implementation is particularly valuable for AI workflows requiring secure tool execution without exposing the host system to potential risks."
5ajaki,veri5ight,1,,"This MCP server for local Ethereum node operations, developed by 5pence, provides a simplified interface for interacting with ENS DAO functions. Built with TypeScript and leveraging the ethers.js library, it offers a streamlined approach to Ethereum network interactions. The server implements environment variable configuration for node URL management and error handling. By abstracting the complexities of direct Ethereum node communication, it enables AI systems to easily perform ENS DAO operations. This implementation is particularly valuable for applications requiring programmatic access to ENS DAO functions, facilitating use cases such as automated domain management, governance participation, and decentralized identity operations within the Ethereum ecosystem."
5ajaki,mcp-etherscan-server,1,,"This MCP Etherscan server, developed by 5pence, provides Ethereum blockchain data tools via Etherscan's API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers features like balance checking, transaction history viewing, token transfer tracking, contract ABI fetching, gas price monitoring, and ENS name resolution. The implementation focuses on simplifying access to Ethereum blockchain data through a standardized MCP interface. It's particularly useful for developers and analysts looking to incorporate Ethereum data into their applications without dealing directly with Etherscan's API complexities, enabling use cases like wallet monitoring, transaction analysis, and smart contract interactions."
5ajaki,safe-mcp-server,0,,"This Safe MCP server, developed by 5pence, enables interaction with Safe (formerly Gnosis Safe) smart contract wallets through the Model Context Protocol. Built with TypeScript and leveraging the MCP SDK, it provides tools for querying Safe transactions, retrieving multisig transaction details, and decoding transaction data. The implementation focuses on simplifying access to Safe's functionality through a standardized interface, with default integration to the Safe Transaction API mainnet endpoint. It's particularly useful for developers and AI models needing to interact with Safe wallets, enabling use cases like transaction monitoring, multisig management, and smart contract interaction analysis without dealing directly with blockchain complexities."
611711dark,mcp_calculate_server,3,,"MCP Calculate Server provides mathematical computation capabilities through a Python-based server that leverages the SymPy library for symbolic mathematics. Developed by 611711Dark, this implementation enables AI assistants to perform complex calculations, equation solving, and symbolic manipulation without needing direct access to mathematical libraries. The server requires Python 3.11 or higher and depends on both the MCP framework and SymPy, making it ideal for use cases requiring advanced mathematical operations within AI assistant conversations."
7gugu,zip-mcp,9,,"A Model Context Protocol server that provides ZIP compression capabilities using fastMCP and zip.js. This implementation allows AI assistants to compress and decompress files directly through MCP, enabling efficient file handling without leaving the conversation interface. The server exposes compression utilities as tools that can be called programmatically, making it valuable for workflows involving file management, data transfer, and storage optimization."
8beeeaaat,touchdesigner-mcp,5,,"TouchDesigner MCP Server provides a bridge between AI assistants and TouchDesigner, a visual programming environment for real-time interactive content. Built by 8beeeaaat, it offers tools for creating, manipulating, and controlling TouchDesigner nodes through a REST API. The server implements a client-server architecture with TypeScript and Python components, enabling operations like executing Python scripts, managing node properties, and retrieving class information. It's particularly valuable for digital artists, VJ performers, and interactive installation designers who want to control TouchDesigner projects through natural language without manually navigating the TouchDesigner interface."
8bitgentleman,activitywatch-mcp-server,8,,"This MCP server connects to ActivityWatch, enabling LLMs like Claude to interact with time tracking data. It provides tools for listing buckets, executing AQL queries, and retrieving raw events from any bucket. Developed by Matt Vogel, it's designed to enhance productivity analysis and time management capabilities for AI assistants working with personal activity data."
8bitsats,grok-mcp,3,,"GrokArt is an MCP server that connects to the xAI/Grok image generation API, allowing AI assistants to generate images based on text prompts. The implementation supports multiple image generation (up to 10 images per request), different response formats (URL or base64 JSON), and includes proper error handling with lazy API key initialization. Built with Docker and Kubernetes deployment support, GrokArt is designed for seamless integration with Claude Desktop and other MCP clients, making it particularly valuable for creative workflows that require image generation capabilities without leaving the conversation interface."
8bitsats,grok_mcp,0,,"Grok AI MCP Server integrates with xAI's Grok API to provide AI-driven analysis tools for the Solana blockchain. Built by 8bitsats, it exposes four main tools through a standard I/O transport: analyzing transactions with detailed insights about program interactions and token transfers, investigating Solana addresses, interpreting images using Grok's vision capabilities, and answering general queries with optional context and image support. The server leverages both text-only and vision models from Grok, making it particularly valuable for blockchain developers and analysts who need detailed explanations of on-chain activities without leaving their workflow."
9ninety,mcpnotes,21,989,"This MCP notes server, developed by an unnamed author, provides a simple yet powerful tool for recording and managing notes with AI models. Built using TypeScript and leveraging the Model Context Protocol SDK, it offers both an MCP server and a web server interface for flexible note-taking capabilities. The implementation uses DynamoDB for data storage and includes features for creating, retrieving, and managing notes. By abstracting the complexities of note management and AI integration, it enables seamless interaction between AI assistants and user-generated content. This server is particularly useful for applications requiring persistent memory and context management, facilitating use cases such as personal assistants, knowledge management systems, and collaborative AI-enhanced note-taking platforms."
9olidity,mcp-server-pentest,13,,"MCP Server Pentest is a browser automation tool that enables AI assistants to perform security testing for web applications, specifically focusing on XSS and SQL injection vulnerability detection. Built on Playwright and Firefox, it provides tools for automatically testing URL parameters against common attack vectors, capturing screenshots of vulnerable pages, and manipulating web elements through various interaction methods. The server includes comprehensive error handling with fallback mechanisms for strict mode violations, making it particularly valuable for security professionals who need to conduct preliminary vulnerability assessments without leaving their AI assistant interface."
a01110946,rhinomcp,6,,"RhinoMCP connects Rhino3D to Claude AI through a WebSocket-based bridge, enabling AI-assisted 3D modeling capabilities. The implementation consists of three main components: a socket server running inside Rhino's Python environment, a Python client that communicates with the Rhino plugin, and an MCP server that exposes Rhino functionality as tools. It allows Claude to create and manipulate 3D geometry, run Python scripts in Rhino's context, and interact with the modeling environment, making it particularly valuable for architectural design, product development, and other 3D modeling workflows that benefit from AI assistance."
a0dotrun,expose,8,,"Expose is a proxy server implementation that enables communication between clients and MCP-compatible services through JSON-RPC. Built by a0dotrun, it provides a Go-based middleware that handles standard MCP methods like 'initialize', 'tools/list', and 'tools/call' by forwarding requests to a configured backend URL while maintaining proper error handling and response formatting. The server can operate over standard I/O streams with graceful shutdown capabilities, making it suitable for integrating existing services with MCP clients or creating lightweight proxies between different MCP implementations."
a21071,mcp-postgres,0,,"A PostgreSQL database integration server that provides type-safe CRUD operations for user data through MCP tools. Built with TypeScript and Prisma, it enables easy database interactions with a standardized interface, supporting operations like retrieving, adding, updating, and deleting user records with robust input validation."
a2amarket,mcp-clamav,1,,"ClamAV MCP provides virus scanning capabilities for files by integrating with the ClamAV antivirus engine. This implementation allows AI assistants to scan files for malware by accepting base64-encoded file data and returning scan results through a simple API endpoint. The server runs as a FastMCP instance that processes scan requests, temporarily stores files for scanning, and executes the clamscan command with proper error handling and cleanup. Particularly useful for security-focused applications that need to validate file safety before processing."
a2xdeveloper,tagesschau-mcp-server,1,,"Provides a bridge to the Tagesschau news API, enabling AI assistants to fetch and analyze German news articles from categories like domestic, foreign, economic and sports coverage. Built with Go and the MCP protocol, it exposes tools for retrieving latest headlines and detailed article content through a clean interface. This implementation is particularly valuable for users who want to access and analyze German news content programmatically through natural language interaction."
a37ai,ansible-tower-mcp,2,,"Ansible Tower MCP Server provides a bridge between LLMs and Ansible Tower/AWX instances, enabling AI assistants to manage infrastructure automation tasks through a comprehensive API interface. The implementation supports inventory, host, group, job template, project, credential, and organization management with secure authentication options via username/password or token. Built with Python using the FastMCP framework, it handles pagination, error management, and various response formats while maintaining secure connections to Ansible Tower instances. This server is particularly valuable for DevOps workflows where infrastructure management and deployment automation need to be integrated directly into AI assistant conversations."
aallsbury,qb-time-mcp-server,4,,"This QuickBooks Time MCP server, developed by an AI assistant, provides a unified interface to QuickBooks Time API functionality. Built with Python and leveraging libraries like requests and pydantic, it offers a comprehensive set of endpoints for managing jobcodes, timesheets, users, projects, and generating reports. The server implements robust error handling, pagination support, and date parameter formatting. By consolidating multiple QuickBooks Time services into a single, efficient interface, it simplifies integration and data access for developers. This implementation is particularly valuable for businesses using QuickBooks Time, enabling use cases such as automated time tracking, payroll processing, project management, and custom reporting workflows."
aantti,mcp-netbird,29,,"A Netbird API integration server that enables AI assistants to manage virtual private networks through natural language. Built by aantti and derived from Grafana's MCP implementation, it provides tools for listing and managing peers, groups, and access policies in a Netbird network. Particularly valuable for network administrators who want to monitor and configure their Netbird VPN infrastructure through conversational AI."
aaomidi,mcp-bazel,5,,"A Bazel integration server for the MCP protocol that enables AI assistants to interact with Bazel build systems. It provides tools for building targets, running tests, finding dependencies and reverse dependencies, and identifying source files within a Bazel workspace. The implementation wraps Bazel command-line operations in a structured API, making it easier for AI systems to analyze and manipulate Bazel projects without needing to understand the underlying command syntax."
aapanel,mcp-server,5,,"aaPanel MCP Server provides a bridge between AI assistants and aaPanel web hosting control panel, enabling management of websites, databases, Docker containers, and system resources through a standardized interface. Built with Go, this implementation authenticates with the aaPanel API using environment variables for base URL and API token, then translates MCP tool calls into appropriate aaPanel API requests. The server exposes functionality for retrieving system information, managing PHP websites, querying MySQL databases, handling Docker containers and images, and configuring email accounts, making it ideal for automating web hosting administration tasks through AI-powered workflows."
aaronsb,confluence-cloud-mcp,13,,"This Confluence Cloud MCP server, developed using TypeScript and the Model Context Protocol SDK, provides a standardized interface for AI assistants to interact with Atlassian Confluence Cloud. It offers tools for space management, page operations, content searching, and label handling, enabling seamless integration of Confluence functionality into AI workflows. The implementation stands out by abstracting Confluence's API complexities, allowing AI models to perform tasks like creating pages, managing content, and retrieving information without direct API knowledge. It's particularly valuable for teams looking to automate documentation processes, enhance knowledge management, or build AI-powered tools that leverage Confluence data and capabilities."
aaronsb,google-workspace-mcp,46,,"This Google Workspace MCP server, developed by Aaron Bockelie, enables AI agents to interact with Gmail and Google Calendar through a simplified interface. Built with TypeScript and leveraging the Google APIs, it provides functionality for email operations, calendar management, and multi-account support. The implementation focuses on robust OAuth handling, detailed error messaging, and a modular design for easy expansion to additional Google services. It's particularly useful for AI assistants and applications needing seamless integration with Google Workspace, enabling use cases such as email triage, meeting scheduling, and productivity automation without dealing directly with the complexities of individual Google APIs."
aaronsb,jira-insights-mcp,0,,"Jira Insights MCP provides tools for managing Jira Insights (JSM) asset schemas through the Model Context Protocol. Built by aaronsb, it enables CRUD operations on object schemas, object types, and objects in Jira Insights, with support for AQL (Atlassian Query Language) queries. The implementation is containerized with Docker for easy deployment and requires Jira API credentials for authentication. This server is particularly valuable for teams that need to programmatically manage their Jira Insights assets without leaving the conversation interface, streamlining workflows for IT asset management and configuration tracking."
aaronsb,apptio-target-process-mcp,0,,"This MCP server implementation provides a bridge between AI assistants and Targetprocess, a project management and agile planning platform. It enables AI assistants to search, retrieve, create, and update Targetprocess entities such as user stories, bugs, tasks, and features. The server handles authentication, API interactions, and data validation, allowing for complex queries and entity management. It's designed to enhance project tracking and agile workflows by integrating AI capabilities with Targetprocess functionality."
aarushkx,covid-mcp-server,2,,"COVID-19 MCP Server provides real-time COVID-19 statistics for any country by connecting to the disease.sh API. The server exposes a single tool called getCovidStatsByCountry that fetches comprehensive data including cases, deaths, recoveries, and testing information when given a country name. Built with TypeScript and the MCP SDK, it runs on stdio transport for seamless integration with Claude Desktop, making it useful for researchers, journalists, or anyone needing quick access to pandemic data without leaving their conversation interface."
aashari,mcp-server-atlassian-bitbucket,15,7921,"Bitbucket MCP server that provides tools for managing repositories, pull requests, and workspaces through Atlassian's REST APIs. Built with TypeScript and featuring robust error handling, pagination support, and detailed logging, it enables AI assistants to list workspaces, browse repositories, and interact with pull requests. The implementation uses a controller-service architecture with standardized formatters for consistent markdown output, making it particularly valuable for developers who want to monitor and manage Bitbucket resources directly through conversational AI."
ab498,code-context-provider-mcp,4,1038,"Code Context Provider MCP analyzes project directories to extract code structure and symbols using Tree-sitter parsers. It provides tools for generating directory trees and performing deep code analysis of JavaScript, TypeScript, and Python files, extracting functions, variables, classes, imports, and exports. The implementation handles gitignore patterns, supports customizable analysis depth, and automatically downloads required WASM parsers. Particularly useful for AI assistants that need to quickly understand project structure and code organization when starting new programming tasks."
ab498,computer-control-mcp,3,7396,"Computer Control MCP provides computer automation capabilities through a server that enables AI assistants to control mouse movements, keyboard input, take screenshots, perform OCR, and manage windows. Built with PyAutoGUI, RapidOCR, and ONNXRuntime, it offers similar functionality to Anthropic's 'computer-use' tool but with zero external dependencies. The implementation supports operations like clicking, typing, dragging, capturing screen content with text recognition, and window management, making it particularly useful for automating desktop tasks and enabling AI systems to interact directly with graphical user interfaces."
abdelstark,bitcoin-mcp,36,1904,"This MCP server provides integration with Bitcoin, enabling interactions with the Bitcoin network and blockchain data. Developed using TypeScript and the Model Context Protocol SDK, it offers functionality for querying transaction data, wallet information, and network statistics. The implementation focuses on providing a standardized interface for Bitcoin operations, supporting use cases such as transaction monitoring, wallet management, and blockchain analysis. By leveraging the Blockstream API, it allows AI models to access real-time Bitcoin data, making it valuable for financial applications, cryptocurrency tracking, and blockchain-based decision-making systems."
abdelstark,lightning-mcp,3,1478,"This Nostr MCP server, developed by an unspecified author, enables AI agents to interact with the Nostr decentralized social network protocol. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for posting notes and interacting with Nostr relays. The implementation focuses on simplifying Nostr interactions, offering functionality to publish content to the network. It integrates with LNbits for Lightning Network payments, allowing for potential monetization of posts. This server is particularly useful for applications requiring programmatic Nostr engagement, enabling use cases such as automated content publishing, social media management, and decentralized communication without directly dealing with Nostr protocol complexities."
abdelstark,nostr-mcp,27,,"This Nostr MCP server enables AI agents to interact with the decentralized Nostr social network protocol. Built with TypeScript using the Model Context Protocol SDK, it provides a streamlined interface for posting notes and connecting to Nostr relays. The implementation focuses on simplifying Nostr interactions for AI systems, offering core functionality to publish content to the network. It supports both stdio and SSE server modes for flexibility in different environments. This server is particularly useful for applications requiring programmatic Nostr engagement, enabling use cases such as automated content publishing, social media management, and decentralized communication without directly handling Nostr protocol complexities."
abhi5h3k,mcp-email-verify,1,,"MCP-Email-Verify provides a tool for validating email addresses using the Abstract API service. The server exposes a single function that checks email validity, deliverability, and quality through comprehensive validation including format checking, SMTP verification, and identification of disposable or role-based addresses. This implementation is particularly useful for applications requiring email validation to reduce bounces, prevent fake signups, and ensure data quality in forms or user registration flows."
abhi5h3k,mcp-url2snap,1,,"URL2SNAP is an MCP server that captures screenshots of websites through the Abstract API. It provides a simple tool that takes a URL as input and returns a local URL to access the captured screenshot. The implementation handles API requests, image processing, and local file storage, making it useful for applications that need to visualize web content without requiring users to visit the actual websites. The server runs on port 8011 and saves screenshots to a local directory for easy access."
abhijeetka,mcp-k8s-server,6,,"The MCP Kubernetes Server provides a bridge between Large Language Models and Kubernetes clusters through a set of specialized tools. Built with Python using the FastMCP framework, it wraps kubectl commands to enable operations like retrieving pod information, managing deployments, switching contexts, and troubleshooting cluster issues. The server requires a configured kubectl environment and can be integrated with Claude Desktop for seamless natural language interactions with Kubernetes resources. It's particularly valuable for DevOps workflows that benefit from conversational interfaces to Kubernetes, allowing users to create, scale, and monitor resources without remembering exact kubectl syntax."
abhinav-mangla,think-tool-mcp,1,671,"Think Tool server provides a structured way for AI assistants to maintain an explicit thought process through a session. It exposes tools for recording thoughts, retrieving the thought history, and clearing the thought log when needed. Built with TypeScript and the MCP protocol, it helps AIs break down complex reasoning tasks, verify policy compliance, and analyze tool outputs by maintaining a persistent memory of their thinking process."
abhinav7895,system-mcp,0,,"A Model Context Protocol server for real-time system monitoring, providing CPU, memory, disk, network, battery, and internet speed metrics via the systeminformation library. Developed by Abhinav, this implementation exposes both a resource endpoint for comprehensive system snapshots and individual tools for targeted metrics retrieval. The server uses multi-source speed tests from various providers to deliver reliable internet performance measurements, making it particularly useful for diagnosing performance issues, monitoring resource utilization, and tracking network connectivity without leaving the AI assistant conversation."
abhirockzz,mcp_cosmosdb_go,3,,"This MCP server implementation provides tools for interacting with Azure Cosmos DB databases using Go. Built with the Azure SDK for Go, it enables AI assistants to perform common Cosmos DB operations including listing databases and containers, executing SQL queries, reading container metadata, creating containers, and managing items. The implementation supports both key-based authentication and Azure managed identities, making it flexible for different deployment scenarios. It's particularly useful for applications that need to integrate AI capabilities with document database operations, allowing natural language interaction with Cosmos DB resources without requiring users to write complex database code."
abhirockzz,mcp_kusto,1,,"An MCP server for Azure Data Explorer (Kusto) that enables AI assistants to interact with Kusto clusters through the Azure SDK for Go. It provides tools for listing databases, tables, retrieving table schemas, and executing KQL queries against Azure Data Explorer databases. The implementation uses DefaultAzureCredential for authentication, making it secure and simple to use with local developer credentials or service principals. Ideal for data analysts and engineers who want to leverage AI assistants for exploring and analyzing data in Azure Data Explorer clusters."
abhishekbhakat,airflow-mcp-server,11,5554,"Airflow MCP Server provides a bridge between Claude and Apache Airflow, enabling direct interaction with Airflow workflows through the API. Built by Abhishek Bhakat, it supports both read-only (safe) and full-access (unsafe) operation modes, allowing users to list DAGs, check statuses, trigger runs, and manage Airflow resources without leaving their conversation interface. The implementation parses the Airflow OpenAPI specification to dynamically generate tools, supports both token and cookie-based authentication, and handles parameter validation - making it particularly valuable for DevOps teams who need to monitor and control workflow orchestration through natural language."
abhishekbhakat,mcp_server_code_assist,1,5439,"This MCP server implementation, developed for code modification and generation tasks, provides a set of tools for AI assistants to create, modify, delete, and rewrite code files. Built with Python and leveraging libraries like aiofiles, gitpython, and xmlschema, it offers a standardized XML-based interface for instructing code changes. The implementation focuses on file operations, search-and-replace modifications, and version control integration, making it accessible for AI models to perform complex code editing tasks. It's particularly useful for automated code refactoring, codebase maintenance, or integrating AI-driven code generation into existing projects, allowing assistants to manipulate code without requiring deep knowledge of file system operations or version control complexities."
abhishekjairath,sonic-pi-mcp,4,617,"A Model Context Protocol server that allows AI assistants to interact with Sonic Pi through OSC messages, enabling programmatic music creation and sound manipulation. The server provides tools for playing individual notes with customizable synth parameters and executing arbitrary Sonic Pi code, making it valuable for AI-assisted music composition, sound design, and educational scenarios. Developed by Abhishek Jairath, it works with any MCP-compatible client like Claude Desktop or Cursor, and requires Sonic Pi to be running with a specific OSC handler code to receive and execute the commands."
abhiz123,todoist-mcp-server,173,8883,"This MCP server, developed by abhiz123, enables natural language task management in Todoist through AI assistants like Claude. It provides tools for creating, retrieving, updating, completing, and deleting tasks using conversational language. The server leverages Todoist's API to translate natural language commands into precise Todoist operations, supporting features like smart task search, flexible filtering, and rich task details. By bridging AI capabilities with Todoist's task management system, this implementation enhances productivity workflows, allowing users to manage their tasks more intuitively. It is particularly useful for scenarios requiring hands-free task management, quick capture of ideas, or AI-assisted organization of complex projects within Todoist."
a-bonus,google-docs-mcp,10,,"Google Docs MCP Server provides a bridge between Claude Desktop (or other MCP clients) and Google Docs, enabling AI assistants to read document content, append text, and apply formatting to specific text within documents. Built with TypeScript and the fastmcp library, it handles OAuth 2.0 authentication with Google's APIs and offers three main tools: readGoogleDoc for fetching document content, appendToGoogleDoc for adding text to documents, and formatMatchingText for applying styling (bold, color, etc.) to specific text instances. The server is designed for users who want their AI assistants to interact directly with their Google Documents, making it useful for collaborative writing, document analysis, or automated content generation."
aborroy,alfresco-mcp-poc,3,,"This Alfresco MCP Proof of Concept, developed by aborroy, demonstrates integration of Alfresco's content management capabilities with AI applications using the Model Context Protocol. Built using Java and Node.js, it combines a standard Alfresco deployment with custom MCP client and server components. The implementation leverages Spring AI and the TypeScript SDK to connect Alfresco's document management features to AI workflows. It's particularly useful for organizations looking to enhance their Alfresco-based content repositories with AI capabilities, enabling use cases like intelligent document processing, automated metadata extraction, and content-aware chatbots without extensive custom development."
abutbul,gatherings-mcp,0,,"Gatherings MCP Server provides a tool for managing shared expenses in social events, helping users track costs, calculate reimbursements, and settle balances between friends. Built with a TypeScript wrapper around a Python backend using SQLAlchemy for data persistence, it offers features like creating gatherings, adding expenses, recording payments, and calculating who owes what to whom. The server uses a non-standard architecture where the Node.js component translates MCP requests to command-line calls to the Python implementation, making it suitable for personal expense tracking in group settings while acknowledging areas for architectural improvement."
abutbul,gatherings-mcp-python,0,,"This MCP server implementation provides a robust expense-sharing solution for social gatherings. Built with Python and SQLAlchemy, it offers tools for creating gatherings, managing members, tracking expenses, calculating reimbursements, and generating detailed payment summaries. The server employs a structured database model and includes features like member renaming and gathering closure. It's designed for use cases such as splitting costs for group trips, dinners, or any event where expenses need to be fairly divided among participants."
ac3xx,mcp-servers-kagi,31,,"Developed by ac3xx, this server provides an interface for language models to perform web searches using Kagi's search engine. It enables AI agents to query Kagi's API and retrieve search results through a controlled MCP server. Built in TypeScript, the implementation currently focuses on basic web search functionality, with plans to expand to other Kagi features like text summarization and enriched news results. The server handles API authentication and request formatting. By leveraging Kagi's privacy-focused search capabilities, this implementation is particularly useful for AI assistants needing to access current web information, conduct research, or provide search results while respecting user privacy preferences."
acashmoney,bio-mcp,11,,"BioMCP is a Model Context Protocol (MCP) server designed to enhance large language models with protein structure analysis capabilities. It provides tools for analyzing protein active sites and searching for disease-related proteins by interfacing with established protein databases.

Future work will be centered around enabling agents to utilize the BioMCP."
acryldata,mcp-server-datahub,23,,"This MCP server implementation provides a bridge to DataHub, a metadata platform for data ecosystems. Developed by Acryl Data, it integrates with the DataHub API to offer tools for entity retrieval and search functionality across various data assets. The server is designed for use cases requiring metadata management and discovery in complex data environments, such as data cataloging, lineage tracking, and governance."
activepieces,activepieces,14204,389,Connect to your hosted MCP Server using any MCP client to communicate with tools
andreasgassmann,acurast-mcp-server,1,,"Acurast MCP Server provides a bridge to the Acurast decentralized computing platform, enabling AI assistants to deploy scripts and review processor performance. Built with TypeScript and Express, it implements tools for script deployment and resources for retrieving processor metrics, such as count and detailed performance statistics. The server exposes endpoints for handling MCP requests through a StreamableHTTPServerTransport, making it valuable for managing and monitoring distributed computing tasks on the Acurast network."
acxelerator,mcp-tenki,0,,"This MCP server, developed by acxelerator, provides weather information for Japan. It integrates with an external weather API to retrieve current conditions and forecasts. The implementation is built using Python and leverages libraries like httpx for API requests and pydantic for data validation. It offers a straightforward interface for querying weather data by location within Japan. This server is particularly useful for applications or AI assistants that need up-to-date weather information for Japanese cities, enabling use cases such as travel planning, event scheduling, or local news and information services."
adamikhq,adamik-mcp-server,0,,"This MCP server implementation provides a bridge to the Adamik API, enabling AI assistants and other MCP-compatible clients to interact with Adamik's services. Developed by AdamikHQ, it supports integration with Starknet for blockchain operations. The server is designed to work seamlessly with Claude Desktop and other MCP environments, offering a straightforward setup process. It's particularly useful for AI applications requiring access to Adamik's specialized services, such as blockchain interactions or custom AI functionalities provided by the Adamik platform. The implementation focuses on secure API key management and efficient request handling, making it suitable for both development and production environments."
adam-paterson,mcp-crew-ai,11,,"A lightweight Python server for running CrewAI multi-agent workflows through the Model Context Protocol. Designed to automatically load agent and task configurations from YAML files, enabling flexible AI task orchestration with minimal custom code. Supports dynamic agent and task creation, variable templating, and seamless integration with tools like Claude Desktop or Cursor IDE."
adampippert,multi-service-mcp-server,3,,"This modular MCP server implementation provides a standardized way for AI models to interact with external tools and services through a unified gateway. It includes five specialized tools: GitHub for repository management, GitLab for project interactions, Google Maps for location services, Memory for persistent data storage, and Puppeteer for web automation. Built with Flask and designed for deployment on Red Hat environments, it features containerized deployment options using Podman or Docker, comprehensive error handling, and seamless integration with OpenAI and Anthropic LLMs through standardized request/response formats."
adamrtalbot,mcp-nextflow,0,,"Nextflow Developer Tools MCP provides a suite of tools for Nextflow development and testing, built with FastMCP. It enables AI assistants to interact with a local Nextflow repository to perform tasks like building from source, running tests (integration, specific, and plugin tests), executing the development version, and managing the development directory. The implementation includes comprehensive logging, error handling, and environment variable configuration, making it particularly valuable for developers working on Nextflow pipelines who want to streamline their workflow without leaving their AI assistant interface."
adamsilverstein,lighthouse-mcp-server,0,,"A Lighthouse MCP server that provides AI assistants with access to Google PageSpeed Insights API data. It enables running performance audits on web pages, retrieving detailed metrics like First Contentful Paint and Largest Contentful Paint, and identifying optimization opportunities. The server exposes a single tool that accepts URL parameters, strategy selection (mobile/desktop), and category filtering, making it valuable for web developers looking to analyze and improve site performance without leaving their AI assistant conversation."
adamwattis,resource-hub-server,2,,"This Resource Hub MCP server, developed by Adam Wattis, acts as a proxy between local MCP environments and a centralized Resource Hub. It enables access to shared tools, configurations, and resources across different environments, streamlining MCP server management. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers features like centralized configuration, environment variable-based authentication, and compatibility with Claude Desktop. The server includes debugging tools through the MCP Inspector and supports easy deployment via npx. By centralizing resource management, it facilitates consistent tool access and configuration sharing, making it particularly valuable for teams and organizations requiring standardized MCP setups across multiple environments or projects."
adamwattis,mcp-proxy-server,91,,"This MCP proxy server, developed by Adam Wattis, aggregates multiple MCP resource servers into a unified interface. It connects to and manages multiple backend servers, exposes their combined capabilities, handles request routing, and aggregates responses. The implementation features resource management across servers, tool aggregation and routing, and multi-server prompt handling. By centralizing access to distributed MCP resources, this proxy enables more flexible and scalable AI assistant deployments. It is particularly useful for organizations managing multiple specialized MCP servers or those looking to modularize their AI infrastructure while maintaining a single point of access for clients."
adarshp14,google-form-mcp-server,5,,"Google Forms MCP Server enables AI assistants to create and manage Google Forms through natural language requests. Built with Python and Flask, it features a two-tier architecture with an MCP server handling Google Forms API operations and a CamelAIOrg agent layer that processes natural language into structured form creation commands. The implementation includes real-time visualization of the request flow, comprehensive error handling, and support for various question types. It's particularly useful for automating form creation workflows, enabling quick generation of surveys, feedback forms, and event registrations without requiring direct interaction with the Google Forms interface."
adenot,mcp-google-search,17,3229,"This MCP server, developed by Allan Denot, provides web search capabilities using the Google Custom Search API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined interface for AI agents to perform web searches. The implementation focuses on simplifying the integration of Google's search functionality into AI workflows, requiring only an API key and search engine ID for setup. It's particularly useful for applications needing up-to-date web information, enabling use cases such as fact-checking, research assistance, and content generation without directly interacting with Google's API complexities."
adeosec,mcp-shodan,9,,"Shodan MCP Server provides cybersecurity analysts with direct access to Shodan's network intelligence capabilities through the Model Context Protocol. Developed by ADEO Cybersecurity Services, it exposes a comprehensive set of tools for host information lookup, DNS operations, vulnerability analysis, network scanning, and security alerts management. The implementation includes specialized prompt templates for common cybersecurity workflows like asset discovery, vulnerability assessment, and ICS analysis, making it particularly valuable for security reconnaissance, threat hunting, and infrastructure monitoring without leaving the AI assistant conversation."
adepanges,teamretro-mcp-server,0,1743,"TeamRetro MCP Server provides a bridge between AI assistants and TeamRetro's team management platform, enabling operations like team creation, user management, and member administration through natural language. Built by Ade Pangestu, it implements authentication via API keys, basic auth, or bearer tokens, and formats responses as either simple tables or raw JSON. The server exposes tools for listing, creating, updating, and deleting teams and users, with planned support for retrospectives, action tracking, health checks, and analytics. This unofficial integration is particularly valuable for team leaders who need to manage TeamRetro resources without switching context from their AI assistant conversation."
adexltd,mcp-google-suite,1,,"MCP server that provides AI assistants with direct access to Google Workspace (Drive, Docs, and Sheets) operations. Built with Python and the MCP protocol, it features OAuth authentication, configurable logging, and support for multiple transport modes (stdio, SSE, WebSocket). The server exposes tools for searching and creating files, managing documents and spreadsheets, and organizing content, making it valuable for users who need to interact with Google Workspace through AI assistants without manual API configuration."
adfin-engineering,mcp-server-adfin,4,,"The Adfin MCP server enables Claude to interact with Adfin's financial management platform through its public APIs, allowing users to perform tasks like checking credit control status, creating invoices, and uploading invoice documents. Built with FastMCP, it dynamically generates API tools by importing Adfin's API documentation and registering each endpoint as a separate function, while also providing specialized file system tools for managing invoice uploads from the user's desktop. The implementation includes automatic token refresh handling and is designed to be easily configured in Claude Desktop through environment variables, making it particularly valuable for financial professionals who need to perform Adfin operations without leaving their conversation interface."
adhikasp,mcp-linkedin,76,,"This MCP server, developed by Adhika Setya Pramudita, provides tools to interact with LinkedIn's Feeds and Job API using an unofficial LinkedIn API. It enables users to retrieve feed posts, search for jobs, and analyze job matches against resumes. The implementation uses Python 3.7+ and integrates with libraries like linkedin-api and fastmcp. It's designed for easy configuration through environment variables and can be run using uvicorn. This server is particularly useful for developers building LinkedIn-integrated applications, job search tools, or AI assistants that need to access LinkedIn data and functionality."
adhikasp,mcp-git-ingest,190,,"This MCP server, developed by adhikasp, enables AI assistants like Claude to fetch and analyze GitHub repository structures and contents. Built in Python, it provides capabilities for cloning repositories, generating directory trees, and reading specified files. The implementation stands out by offering deterministic temporary directory creation, Unicode tree representation, and flexible file reading with robust error handling. By connecting AI capabilities with GitHub's vast ecosystem of code repositories, this server allows AI systems to explore codebases, analyze project structures, and access important files programmatically. It is particularly useful for building AI-powered code analysis tools, automated documentation generators, and intelligent assistants for software development workflows that need to interact with GitHub repositories."
adhikasp,mcp-twikit,155,,"This MCP server, developed by adhikasp, integrates with Twitter's API to enable AI assistants to interact with the social media platform. It provides tools for searching tweets, retrieving timelines, and analyzing sentiment across multiple accounts. The server stands out by offering a simplified interface for complex Twitter operations, making it easier for AI systems to process and respond to social media data. By connecting AI capabilities with Twitter's vast user-generated content, this implementation empowers AI assistants to handle tasks like social media monitoring, trend analysis, and customer sentiment tracking. It is particularly useful for applications in brand management, market research, or any scenario where an AI system needs to work with real-time social media data."
adhikasp,mcp-reddit,63,,"This Reddit MCP server, developed by adhikasp, provides AI assistants with a standardized interface to interact with Reddit content. Built using Python and leveraging libraries like PRAW and RedditWarp, it offers capabilities for fetching hot threads, detailed post content, and comments from any subreddit. The server supports different post types including text, links, and galleries. It's designed for flexibility, allowing easy installation and usage through the MCP client CLI. This implementation is particularly valuable for AI assistants focused on social media analysis, content curation, and trend monitoring, enabling use cases such as summarizing popular discussions, tracking emerging topics, and analyzing user engagement across Reddit communities."
zo-valentine,mcp-twikit,0,,"MCP-Twikit provides Twitter search and interaction capabilities for AI assistants through the FastMCP framework. Built by Adhika Setya Pramudita, it leverages the Twikit library to enable both read operations (searching tweets, viewing timelines, retrieving user tweets) and write operations (posting tweets, sending direct messages) with built-in rate limiting. The implementation authenticates using Twitter credentials stored as environment variables, manages cookies for persistent sessions, and formats tweet data in markdown for easy readability, making it ideal for workflows requiring Twitter monitoring, social media analysis, or automated Twitter interactions."
adhikasp,mcp-youtube,14,,"This MCP server, developed by adhikasp, enables AI assistants like Claude to fetch and analyze YouTube video transcripts. Built in Python, it provides capabilities for downloading subtitles from YouTube videos using either video IDs or full URLs, and includes timestamp information. The implementation stands out by offering a standardized interface to YouTube's transcript data, allowing AI systems to easily access and process video content. By connecting AI capabilities with YouTube's vast repository of video transcripts, this server enables automated content analysis, subtitle generation, and video summarization. It is particularly useful for building AI-powered tools for video research, content moderation, and educational applications that leverage YouTube's extensive library."
adiletd,feature-request-collection-mcp,0,,"The Supabase MCP Server connects AI assistants to a Supabase database, allowing them to query feature suggestions stored in the database. Built with TypeScript using the Model Context Protocol SDK, it provides a single tool called 'query_feature_suggestions' that retrieves records from the feature_suggestions table with optional limit parameters. The server includes robust error handling and logging capabilities, making it ideal for workflows where AI assistants need to access, analyze, or present feature request data directly within conversations without requiring manual database queries."
adird,hilanet-mcp,29,,"Hilanet MCP provides a satirical corporate dystopia toolkit built with fastMCP, offering HR-related tools that parody toxic workplace behaviors. The implementation includes functions for requesting salary increases, filing manager complaints, scheduling inconvenient meetings, generating corporate jargon, and other humorous workplace sabotage actions. Each tool accepts specific parameters like employee names, percentages, or justifications, creating a playful commentary on office politics. The server can be run directly with npx or through npm scripts, making it easily accessible for users wanting to explore this tongue-in-cheek take on corporate culture through AI assistants."
adityak74,mcp-scholarly,95,,"This mcp-scholarly server, developed by Aditya Karnam, provides a standardized interface for searching academic articles through the arXiv database. Built with Python and leveraging the arxiv library, it offers a tool to query arXiv based on keywords. The server integrates seamlessly with Claude Desktop, abstracting the complexities of academic search into a consistent MCP interface. By enabling AI systems to access and analyze scholarly literature, this implementation facilitates use cases such as literature reviews, research assistance, and staying up-to-date with the latest publications in specific fields. The server is designed for easy deployment and debugging, making it valuable for researchers and developers building AI-powered tools that interact with academic content."
adrian-dotco,harvest-mcp-server,1,260,"This MCP server implementation provides natural language time tracking integration with Harvest, enabling AI assistants to interact with Harvest's time tracking and project management features. Developed by Adrian, it offers tools for managing projects, tracking time entries, and handling leave requests. Built with TypeScript and leveraging the Model Context Protocol SDK, the server focuses on secure credential management through environment variables and supports easy configuration within AI assistant environments. It is particularly useful for automating time tracking workflows, streamlining project management tasks, and integrating Harvest operations into AI-assisted work processes. The implementation includes features like natural language parsing for time entries and customizable work day hours and leave types."
adspower,local-api-mcp-typescript,13,,"AdsPower Local API MCP Server provides a TypeScript interface for controlling AdsPower browser profiles through the Model Context Protocol. This implementation enables AI assistants to manage browser profiles by offering tools for creating, updating, opening, and deleting browsers with customizable fingerprints and proxy configurations. It also includes functionality for managing browser groups and retrieving application information. Built with a modular architecture using axios for API requests, the server communicates with AdsPower's local API endpoint, making it ideal for automated browser profile management in web scraping, testing, or multi-account workflows."
ad-veritas,mcp-server-truerag,2,,"This Model Context Protocol server, developed for integrating with a GraphQL API for policy queries, provides AI assistants with access to state-specific policy information. Built using Python with FastMCP, GQL, and AIOHTTPTransport, it offers tools for connecting to the GraphQL endpoint, generating queries based on user descriptions, and executing those queries. The server implements environment-based configuration for API key management and includes features like schema fetching and query generation assistance. By abstracting the complexities of GraphQL interactions into a standardized MCP interface, it enables AI systems to easily access and analyze policy data across different states. This implementation is particularly valuable for applications requiring up-to-date policy information, facilitating use cases such as legal compliance checks, policy analysis, and state-specific regulatory guidance."
pab1it0,adx-mcp-server,32,,"The Azure Data Explorer MCP Server provides AI assistants with direct access to Azure Data Explorer (ADX) clusters and databases through standardized MCP interfaces. Built with Python using FastMCP, it enables executing KQL queries, discovering database resources, exploring table schemas, and sampling data from tables. The implementation supports authentication via client credentials or default Azure credentials and includes tools for listing tables, retrieving schemas, and executing custom queries. Ideal for AI workflows that need to analyze data stored in ADX, generate insights from logs and metrics, or help users explore their ADX resources."
aeon-seraph,searxng-mcp,1,,"This MCP server enables language models to perform web searches through SearXNG, a privacy-focused metasearch engine. Built with TypeScript and the Model Context Protocol SDK, it provides a clean interface for sending search queries with customizable parameters like categories, time ranges, and pagination. The server includes caching functionality to improve performance and can be configured via environment variables for connection settings. It's designed to run either directly via Node.js or as a Docker container, making it flexible for various deployment scenarios."
afrise,academic-search-mcp-server,31,,"This MCP server provides academic paper search and retrieval functionality across multiple sources like Semantic Scholar and Crossref. Built with Python using the FastMCP framework, it offers tools for searching papers, fetching detailed metadata, and filtering by topic and date range. The implementation focuses on delivering structured academic information through a standardized interface, making it particularly useful for AI assistants and applications that require access to scientific literature. By connecting to established academic APIs, this server enables use cases such as literature reviews, research trend analysis, and citation management, enhancing the capabilities of AI models in academic and research contexts."
afshawnlotfi,mcp-configurable-puppeteer,1,,"This Configurable Puppeteer MCP server enables AI assistants to automate browser interactions through a set of tools for navigation, screenshots, clicking, form filling, and JavaScript execution. Developed by Afshawn Lotfi as a modified version of Anthropic's original implementation, it uniquely allows customization of Puppeteer launch options through environment variables, supporting both Chrome and Firefox browsers with configurable viewport sizes and other browser parameters. The server captures console logs and screenshots as resources, making it ideal for web testing, data extraction, form automation, and interactive web demonstrations without requiring code modifications to adapt to different browser environments."
weotzi,browser-tools-mcp,0,,"Browser Tools MCP provides a bridge between AI assistants and web browsers, enabling real-time access to console logs, network requests, screenshots, and DOM elements through a Chrome extension and server architecture. The implementation includes Lighthouse-powered audit capabilities for accessibility, performance, SEO, and best practices, with AI-optimized reporting that prioritizes critical issues. Built by AgentDesk AI, it uses WebSocket communication for live updates and includes a Puppeteer service for cross-platform browser automation, making it valuable for debugging web applications, analyzing performance issues, and improving site accessibility without leaving the AI conversation interface."
HEAD,mcp-server,17,787,"DevTools MCP server provides specialized tools for software development workflows through a data-driven configuration system. Built with TypeScript and the MCP SDK, it loads tool configurations from YAML files in preset categories like thinking, coding, and GitHub integration, while supporting custom tool definitions through .workflows directories. The implementation features typed parameters, sequential/situational tool modes, and flexible prompt templating - making it particularly valuable for developers who want to integrate AI assistance directly into their development process without leaving their workflow."
packages,mcp,35,2163,"✨ Features
Connect to Ethereum, Optimism, Arbitrum & Polygon
Play with DeFi (Aave, DEXs, etc.)
Look up ENS domains, transfer tokens, check security
Get crypto news and market data
🧰 Tools
Tokens (ERC20, WETH)
DeFi (trading, lending)
Block explorers
Governance tools
Security checks
Basic web tools
All Agentek tools based on keys you provide.
"
agentience,practices_mcp_server,3,,"Practices MCP server extracts and standardizes development practices from the Tribal project into a reusable server implementation. Built with Python, it provides tools for managing Git workflows including branch validation, version management, and PR preparation, while integrating with GitHub and Jira MCP servers to automate common development tasks. The server is particularly valuable for teams looking to enforce consistent development practices and reduce manual workflow steps through configurable automation."
agentience,tribal_mcp_server,2,2593,"Tribal is an MCP server implementation for error knowledge tracking and retrieval, providing both REST API and native MCP interfaces for integration with tools like Claude Code and Cline. Developed by Troy Molander at Agentience.ai, it uses ChromaDB for vector similarity search to help AI assistants remember and learn from programming errors, storing error contexts with solutions and finding similar errors via semantic search. The server features JWT authentication, local and cloud storage options, and Docker deployment capabilities, making it ideal for development teams wanting to build a shared knowledge base of programming errors and solutions."
agentrpc,agentrpc,65,2331,"AgentRPC allows you to connect to any function, in any language, across network boundaries. It's ideal when you have services deployed in:

Private VPCs
Kubernetes clusters
Multiple cloud environments
AgentRPC wraps your functions in a universal RPC interface, connecting them to a hosted RPC server accessible through open standards:

Model Context Protocol (MCP)
OpenAI-compatible tool definitions (OpenAI, Anthropic, LiteLLM, OpenRouter, etc.)"
agree-able,room-mcp,5,,"This MCP server implementation enables Claude to create and interact with virtual rooms in a peer-to-peer space using the Room protocol. It provides tools for joining rooms with invite codes, sending messages, and exiting rooms. The server integrates with @agree-able/room and @agree-able/invite packages to handle room creation and invitation management. It's designed to facilitate multi-agent collaboration and communication in decentralized environments."
ahmad2x4,mcp-server-seq,3,,"This MCP server implementation provides a bridge to Seq's API, enabling comprehensive access to logging and monitoring features. Developed to enhance interaction with Seq's powerful event management system, it offers tools for retrieving signals, events, and alert states with extensive filtering options. The server is designed for seamless integration with Claude Desktop, allowing users to leverage Seq's capabilities within AI-assisted workflows. It is particularly useful for DevOps teams and system administrators who need real-time insights into their application logs and system performance metrics."
ahnlabio,bicscan-mcp,3,,"BICScan MCP Server provides a bridge to the BICScan API for assessing risk and analyzing assets across blockchain addresses, domains, and decentralized applications. Built with Python and FastMCP, it exposes tools for retrieving risk scores (0-100 scale) and detailed asset holdings information, with robust error handling and logging capabilities. This implementation is particularly valuable for blockchain security analysts and compliance teams who need to evaluate cryptocurrency addresses and monitor digital assets through natural language interaction."
ahodroj,mcp-iceberg-service,3,,"MCP Iceberg Catalog provides a SQL interface for querying and managing Apache Iceberg tables through Claude desktop. The server connects to Iceberg REST catalogs and S3-compatible storage, supporting operations like listing tables, describing schemas, executing SELECT queries, and inserting data. Built with PyIceberg and PyArrow for efficient data handling, it translates SQL commands to Iceberg operations and manages catalog connections transparently. This implementation is particularly valuable for data analysts and engineers who need to interact with data lakes directly through conversational AI without switching contexts."
ahonn,mcp-server-gsc,20,1284,"This MCP server, developed by ahonn, provides AI assistants like Claude with access to Google Search Console data. It offers tools for retrieving search analytics information with customizable parameters such as date ranges, dimensions, and search types. The server leverages Google Cloud authentication for secure API access. By integrating AI capabilities with Google Search Console insights, this implementation enables data-driven SEO analysis and website performance optimization. It is particularly useful for scenarios requiring trend analysis, keyword research, or automated reporting of search traffic metrics in AI-assisted digital marketing and web analytics applications."
ahujasid,ableton-mcp,1491,21222,"Ableton MCP enables AI assistants to control Ableton Live music production software through a bidirectional communication system. It consists of a Remote Script that runs within Ableton Live and exposes a socket server, paired with a Python MCP server that translates commands into actions. The implementation supports a wide range of music production operations including creating tracks and clips, adding MIDI notes, controlling playback, loading instruments, and browsing the Ableton library. Developed by Siddharth Ahuja, this integration is particularly valuable for AI-assisted music composition, production workflows, and automated sound design without leaving the conversation interface."
ahujasid,blender-mcp,10587,469943,"BlenderMCP enables Claude to control Blender through the Model Context Protocol, allowing for natural language manipulation of 3D scenes. The implementation consists of a Blender addon that creates a socket server and an MCP server that communicates with it, exposing resources and tools for scene inspection, object creation/manipulation, material application, and rendering. Users can create and modify 3D content through conversational prompts without needing to know Blender's interface or Python API, making it ideal for rapid prototyping, educational purposes, or assisting users unfamiliar with 3D modeling software."
ai-agent-hub,ai-agent-marketplace-index-mcp,13,,"AI Agent Marketplace Index MCP Server provides tools for searching and listing AI agents by keywords or categories, allowing AI assistants to discover available agents for specific tasks like coding, HR, finance, or healthcare. Developed by DeepNLP, it features a search API that returns detailed agent information including descriptions, websites, and performance metrics such as Google/Bing rankings and GitHub stars. The server is designed for easy integration with Claude Desktop and other MCP-compatible clients, making it valuable for users seeking specialized AI agents for particular use cases."
ai-fe,dify-mcp-server,36,,"This Dify MCP server, developed for integrating Dify's AI capabilities with the Model Context Protocol, provides a bridge between Dify's API and MCP-compatible clients. Built with TypeScript and leveraging the MCP SDK, it enables AI assistants to interact with Dify's features, including text generation and potentially other AI services. The implementation focuses on efficient API communication, handling streaming responses, and managing authentication. It's particularly useful for developers looking to incorporate Dify's AI capabilities into MCP-based systems, allowing for seamless integration of Dify's functionalities without deep knowledge of its API intricacies."
aindreyway,mcp-codex-keeper,60,4492,"The MCP Codex Keeper, developed by aindreyway, serves as an intelligent guardian of development knowledge for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides curated access to the latest documentation and best practices. The server integrates with external resources to maintain up-to-date information, offering a standardized interface for AI systems to query and retrieve relevant development knowledge. It's designed for flexibility, supporting various programming languages and frameworks through its modular architecture. This implementation is particularly valuable for enhancing AI-assisted software development, enabling use cases such as code generation, bug fixing, and providing context-aware programming advice."
aindreyway,mcp-neurolora,14,4525,"This MCP server, developed by aindreyway, streamlines the process of collecting and documenting code from directories. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a command-line interface for efficient code extraction and documentation generation. The server is designed for flexibility, supporting various file types and directory structures through customizable configuration options. It's particularly valuable for developers and teams working on large-scale projects, enabling use cases such as automated code documentation, project structure analysis, and codebase overview generation. The implementation's focus on TypeScript and modern JavaScript features ensures compatibility with current development practices while providing robust type checking and improved maintainability."
aindreyway,mcp-server-neurolora-p,6,,"This MCP server for code collection and documentation, developed by Aindrey, streamlines the process of gathering code from files and directories into a single markdown document. Built with Python and leveraging the Model Context Protocol SDK, it offers features like customizable ignore patterns, syntax highlighting, and table of contents generation. The server implements robust file system synchronization and comprehensive error handling, providing a standardized interface for code documentation tasks. By abstracting the complexities of file traversal and markdown generation, it enables AI systems to easily create comprehensive code overviews. This implementation is particularly valuable for applications requiring programmatic code documentation, facilitating use cases such as project audits, codebase analysis, and automated documentation generation."
aipotheosis-labs,aci-mcp,39,4206,"ACI.dev is an agent-computer interface (ACI) platform created by Aipolabs that helps developers connect AI agents to applications like Zendesk, Slack, Gmail, or their own internal tools, manage AI agent actions, and discover workflows.

The latest platform feature is a Unified MCP Server that elegantly solves this with a ""discover and execute"" pattern:
1. It exposes just TWO meta tools to your MCP Client:
 - ACI_SEARCH
 - ACI_EXECUTE
2. The Client uses the ACI_SEARCH to dynamically discover relevant tools based on user intent
3. The Client then executes the suitable tools with the ACI_EXECUTE tool

Benefits That Make a Difference ✨ 

⌚ Maximum Context Efficiency: Only two tool definitions in your MCP client’s LLM context window, no matter how many tools are available

🔐 Unified Authentication: One authentication scheme to rule them all – no more juggling credentials across multiple MCP server providers

💣 Zero Name Collisions: Eliminate tool naming conflicts when combining tools from different MCP Servers

🔎 Intelligent Tool Discovery: The server automatically finds the perfect tools for each specific task

♾️ Unlimited Tool Access: Your LLM can use ANY tools from the ACI.dev platform."
aircodelabs,grasp,23,,"Grasp is a self-hosted browser automation server that enables AI assistants to interact with web pages through natural language commands. Built with Node.js, TypeScript, and Playwright, it provides a human-like browsing experience by simulating realistic mouse movements, typing patterns, and keyboard interactions. The server exposes both a WebSocket API for real-time browser control and an MCP interface that allows AI systems to perform high-level tasks like navigation, form filling, and content extraction. With its live preview capability and detailed logging, Grasp is particularly valuable for web testing, data collection, and automated workflows that require authentic browser interaction."
airjlee,stock-llm,0,,"Stock-LLM is an MCP server that enhances LLM interactions with real-time stock market data through Yahoo Finance. It provides tools for retrieving current stock prices, financial statements, company information, earnings reports, and news about specific stocks. The implementation uses FastMCP to create a server that processes stock-related queries, while the client component employs vector search and LLM-based ticker extraction to identify relevant companies in user queries. This enables AI assistants to provide informed responses about stocks, including price information, company fundamentals, and recent news, making it valuable for financial analysis and investment research conversations."
wizd,airylark-mcp-server,9,,Airylark MCP Server provides translation capabilities for AI applications through a Node.js implementation. It integrates with external translation APIs to enable seamless language conversion within the Model Context Protocol framework. The server is containerized with Docker for easy deployment and configured through environment variables to support different translation models and API endpoints. Ideal for multilingual AI applications that need to process text in various languages.
minio,mcp-server-aistor,23,,"An MCP server implementation for AIStore, a distributed object storage system designed for AI workloads."
aiven-open,mcp-aiven,6,,"The Aiven MCP Server provides AI assistants with direct access to Aiven's cloud database and messaging services through the Aiven API. It exposes tools for listing projects, services, and retrieving detailed service information for PostgreSQL, Kafka, ClickHouse, Valkey, and OpenSearch running in the Aiven ecosystem. Built with FastMCP and requiring minimal configuration through environment variables, this server enables LLMs to interact with and manage cloud data infrastructure, making it valuable for building full-stack solutions that require database operations without leaving the AI assistant interface."
ai-yliu,filesystem-mcp-server,1,,"This MCP server implementation provides filesystem operations for AI assistants. Developed by ai-yliu, it offers tools for reading, writing, and manipulating files and directories, with built-in security measures to restrict access to specified directories. The server is designed for use cases requiring AI-assisted file management, content analysis, or automated file system interactions within allowed directories."
aiyogg,tinypng-mcp-server,4,,"TinyPNG MCP server provides image optimization capabilities through the TinyPNG API, enabling compression and resizing of both local and remote images. The implementation offers three main tools: compressing local images, compressing remote images via URL, and resizing images with various methods (scale, fit, cover, thumb). Built by Chuck, this server requires a TinyPNG API key and returns detailed compression statistics including original size, compressed size, and compression ratio, making it ideal for workflows that need efficient image optimization without quality loss."
ai-zerolab,mcp-email-server,27,17835,MCP email server implementation that provides IMAP and SMTP functionality. Integrates with existing email providers to allow AI assistants to send and receive emails on behalf of users. Includes a configuration UI and supports deployment via Docker. Useful for automating email-based workflows and enabling AI agents to manage email communications.
ai-zerolab,mcp-toolbox,12,25914,"This MCP server implementation provides a comprehensive toolbox for enhancing Large Language Models (LLMs) through various API integrations and utilities. Developed by ai-zerolab, it offers tools for executing command line instructions, interacting with Figma files, and performing file operations. The server is designed with an extensible architecture, allowing easy addition of new API integrations. It supports Claude Desktop and other MCP-enabled LLMs, making it suitable for a wide range of use cases including UI/UX design workflows, automated file management, and enhanced LLM interactions with external services."
ai-zerolab,yourware-mcp,5,5646,"Yourware MCP is a server that enables AI assistants to upload projects directly to yourware.so, a web hosting platform. Developed by Wh1isper, it provides tools for authenticating with the Yourware API, checking credentials, and uploading single files or entire directories with automatic compression. The implementation supports multiple transport methods (stdio and SSE) and integrates with AI assistants like Claude through configurations for Cursor, Cline, and other MCP-compatible clients. This server is particularly useful for developers who want to quickly showcase their web projects online without leaving their development environment."
ajbr0wn,gmail-mcp-server,7,,"This Gmail MCP server, developed by AJ Brown, integrates Gmail functionality into AI assistants using the Model Context Protocol. It provides secure access to Gmail inbox contents and search capabilities through OAuth2 authentication with the Gmail API. The server offers tools for viewing recent emails and performing advanced searches using Gmail's query syntax. By connecting AI capabilities with email management, this implementation enables assistants to analyze inbox contents, find specific messages, or automate email-related tasks. It is particularly useful for applications requiring email content analysis, personal information management, or any scenario where an AI system needs to interact with and reason about email data while maintaining user privacy and security."
akash-network,mcp,5,,"Akash MCP Server is a TypeScript implementation that bridges AI agents with the Akash Network, enabling deployment and management of decentralized applications through typed tools. Developed by Overclock Labs, it provides essential functionality for interacting with Akash's blockchain-based cloud computing marketplace, including wallet authentication, certificate management, deployment creation, bid management, and lease operations. The server leverages the Model Context Protocol to standardize communication between AI models and Akash services, making it particularly valuable for AI assistants that need to programmatically deploy applications, manage cloud resources, or interact with decentralized infrastructure without requiring deep technical knowledge of the Akash ecosystem."
akazwz,mcp-figma,10,,"This MCP server implementation integrates with the Figma API, enabling AI assistants to interact with Figma design files and projects. Developed by akazwz, it leverages TypeScript and the @modelcontextprotocol/sdk to provide a bridge between AI models and Figma's design capabilities. The implementation is useful for automating design tasks, analyzing Figma projects, or enabling AI-assisted design workflows within the Figma ecosystem."
akc2267,solana-mcp-server,0,,"This Solana MCP server, developed by Alex Cheng, provides integration with the Solana blockchain. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with Solana's Web3.js library for blockchain operations. The implementation focuses on providing a standardized interface for Solana transactions and data retrieval, making it easier to incorporate blockchain functionality into AI workflows. It's particularly useful for developers and teams working with Solana who want to automate blockchain interactions, enabling use cases such as automated token transfers, smart contract deployments, and AI-assisted blockchain analytics without deep Solana expertise."
akhidastech,github-agentic-chat-mcp,0,,"GitHub Agentic Chat MCP Server enables natural language interaction with GitHub repositories through a Go-based implementation that integrates with the GitHub API and provides vector search capabilities. It offers tools for searching repositories, creating issues, and performing semantic searches across stored documents using PostgreSQL with pgvector extension. The server connects to Claude Desktop through the Model Context Protocol, making it particularly valuable for developers who want to interact with GitHub and related documentation through conversational AI without leaving their chat interface."
akira-papa,akirapapa-mcp-notion-server,4,,"This MCP server, developed by suekou, enables seamless integration between Notion workspaces and AI systems like Claude Desktop. Built using the Model Context Protocol, it provides a comprehensive set of tools for interacting with Notion's API, including block manipulation, page and database operations, and querying capabilities. The implementation focuses on exposing Notion's features through a standardized interface, offering functionality to create, retrieve, update, and delete various Notion elements. It's particularly useful for organizations looking to incorporate Notion's collaborative workspace features into their AI workflows, enabling use cases such as automated note-taking, knowledge base management, and AI-assisted content creation without directly interacting with Notion's API."
akki91,ankr-mcp,1,329,"Ankr MCP Server provides blockchain data access through the Ankr API, enabling AI assistants to retrieve on-chain information such as token balances across multiple networks. Developed by Akshay Khare, this TypeScript implementation authenticates via an API token and exposes a specialized tool for querying wallet balances that returns detailed asset information including token metadata, amounts, and dollar values. The server handles various error conditions gracefully with custom error classes and is containerized for easy deployment, making it ideal for blockchain analysis, portfolio tracking, and financial applications where LLMs need direct access to distributed ledger data."
akr4,applemusic-mcp-server,1,,"Apple Music MCP Server provides tools for interacting with the Apple Music API, enabling AI assistants to search for songs and generate playback links. Built in Rust using the RMCP library, it authenticates with the Apple Music API using developer credentials and offers a simple command-line interface. The server requires an Apple Developer account with Apple Music API access and supports customizable storefronts, making it particularly useful for music discovery and playback integration in conversational AI applications."
akramsaouri,mcp-translate,2,,"Provides a translation service using the DeepL API, enabling text translation between multiple languages through a simple MCP tool. Designed to be easily integrated into AI workflows, it supports dynamic language selection and returns translated text as a response. Useful for multilingual communication and localization tasks."
akramsheriff5,mcp-server,1,,"This MCP server provides financial market analysis capabilities through the AlphaVantage API, enabling AI assistants to fetch intraday stock data and perform technical analysis. The implementation offers tools for calculating moving averages, RSI (Relative Strength Index), and generating comprehensive trade recommendations based on technical indicators. The server includes specialized prompts for analyzing individual stocks, comparing multiple tickers, and building intraday trading strategies, making it valuable for financial advisors, traders, and investment analysis use cases."
akrasia0,s-mcp,1,,"S/MCP provides a philosophical AI mentor named Stern who helps users realize their potential through guidance and accountability. Built with the Model Context Protocol, it offers a msg_stern tool that connects to OpenAI's GPT-4 model to generate responses based on Stern's character - a blend of rationalist thinking, stoic philosophy, and psychological insights from Dostoevsky. The implementation dynamically generates character context for varied interactions and includes examples for creating Solana-based smart contracts where users can stake tokens on their commitments, making it particularly valuable for those seeking philosophical mentorship with real accountability."
akseyh,bear-mcp-server,23,,"This Bear MCP server, developed by akseyh, provides an interface for AI assistants to interact with Bear notes on macOS. Built with TypeScript and leveraging the Model Context Protocol SDK and SQLite, it offers tools for reading notes, searching by text, and listing tags. The implementation focuses on direct database access to Bear's SQLite storage, making it efficient for AI models to retrieve and analyze note content. It's particularly useful for knowledge management, research assistance, or content generation tasks that benefit from accessing a user's personal notes, enabling AI to work with Bear data without requiring deep knowledge of the app's internal structure."
akshay23,spurs-blog-mcp-server,2,,"This MCP server provides access to San Antonio Spurs basketball news and information by scraping and parsing content from the Pounding The Rock blog. Built with Python 3.13 and the FastMCP framework, it offers tools to retrieve latest articles, search for specific content, extract game results, and get player information with recent mentions. The implementation features efficient caching to reduce redundant requests and includes structured data models for articles, game results, and player information. It enables AI assistants to deliver up-to-date Spurs content without direct web access, making it valuable for sports fans seeking team news, game analyses, and player updates."
alaturqua,mcp-trino-python,15,4789,"MCP Trino Server provides seamless integration between AI assistants and Trino/Iceberg databases through a standardized interface. Developed by alaturqua, this Python implementation exposes Trino's querying capabilities and Iceberg's table maintenance operations as MCP resources and tools, enabling data exploration, SQL execution, and table optimization. The server handles connection management, query formatting, and catalog navigation while supporting environment-based configuration, making it particularly valuable for interactive data analysis, automated table maintenance, and building AI-powered tools that interact with Trino databases."
albeorla,mcp,0,,"Aerith Admin MCP server implements a Manus-inspired 5-step development workflow for building RBAC dashboard applications. Built with FastAPI and browser-use integration, it provides tools for breaking down tasks, gathering information, analyzing requirements, executing changes, and generating reports. The implementation features resilient server modes (HTTP/STDIO), Git integration, comprehensive testing, and browser automation capabilities - making it particularly valuable for teams building complex admin interfaces who want structured, repeatable development processes."
albiemark,dbx-mcp-server,0,,"Dropbox MCP Server provides a secure integration with Dropbox's API, enabling AI assistants to perform file operations including uploading, downloading, listing, searching, and safely deleting files with recycle bin support. Built with TypeScript and the Model Context Protocol SDK, it implements OAuth 2.0 with PKCE for authentication, encrypts tokens for security, and offers resource handling capabilities that allow AI tools to work with files as attachments or inline content. The server includes specialized prompt handlers for file reviews and comparisons, making it particularly useful for document management, collaborative workflows, and scenarios requiring secure access to cloud storage directly within AI conversations."
getalby,lightning-tools-mcp-server,1,618,"The Lightning Tools MCP Server provides AI assistants with access to Bitcoin Lightning Network functionality through a set of specialized tools. Developed by Alby contributors, it leverages the @getalby/lightning-tools package to enable operations like interacting with lightning addresses and performing common lightning-related tasks. This implementation works well alongside the NWC MCP Server and can be easily integrated with Claude Desktop, Cline, or run from source. It's particularly valuable for workflows requiring cryptocurrency payment capabilities within AI assistant conversations."
getalby,nwc-mcp-server,8,412,"NWC MCP Server enables AI assistants to interact with Bitcoin Lightning wallets through Nostr Wallet Connect (NWC). Developed by Alby contributors, it provides tools for checking wallet balances, creating and paying invoices, and retrieving wallet information. The server uses the official MCP TypeScript SDK and can be easily integrated with Claude Desktop or Cline. It's particularly valuable for AI-assisted Bitcoin payments and wallet management without requiring users to implement complex Lightning Network interactions themselves."
alcova-ai,perplexity-mcp,5,,"Perplexity MCP Server provides a bridge between AI assistants and the Perplexity API, enabling Claude and other MCP-compatible tools to access real-time web search and specialized reasoning capabilities. Built by Alcova AI, this Go implementation exposes two primary tools: perplexity_ask for retrieving up-to-date information using Perplexity's Sonar Pro model, and perplexity_reason for complex problem-solving tasks using Sonar Reasoning Pro. The server supports seamless integration with Claude Code, Claude Desktop, and Cursor through the stdio protocol, allowing AI assistants to access current information and perform reasoning tasks without leaving their interface, making it particularly valuable for workflows requiring real-time data or specialized reasoning capabilities."
aldrin-labs,metal-mcp-server,2,,"This MCP server, developed for Metal Framework enthusiasts, provides specialized tools for searching Metal documentation and generating code snippets. Built with TypeScript and leveraging libraries like @xenova/transformers and hnswlib-node, it offers natural language querying of Metal docs and code generation for common Metal tasks in Objective-C, Swift, or Metal shading language. The server integrates seamlessly with the Model Context Protocol, allowing easy incorporation into existing MCP setups. It's particularly useful for developers working on graphics-intensive applications or games who need quick access to Metal-specific information and code examples without leaving their development environment."
aldrin-labs,metaplex-mcp-server,1,,"This Metaplex MCP server, developed by the Metaplex Foundation, provides a bridge between AI assistants and Metaplex documentation and repository information. Built with TypeScript and Node.js, it enables searching Metaplex documentation, retrieving repository details, and searching code across Metaplex repositories. The server leverages libraries like Axios for HTTP requests and Cheerio for HTML parsing to extract relevant information. By abstracting Metaplex-specific operations into a standardized MCP interface, it allows AI systems to easily access and utilize Metaplex resources without directly handling web scraping or API complexities. This implementation is particularly useful for developers working with Solana NFTs, facilitating use cases such as automated documentation lookup, code analysis, and integration of Metaplex functionalities into AI-assisted development workflows."
aldrin-labs,solana-mcp-server,19,,"This Solana MCP server provides direct access to Solana blockchain data through natural language queries. Developed as an open-source project, it implements 21 essential Solana RPC methods across categories like account operations, block information, token management, and system status. Built in Rust, it integrates with the Solana client library and MCP SDK to offer a bridge between AI assistants and the Solana network. The server is designed for developers, analysts, and blockchain enthusiasts who want to explore Solana data or integrate blockchain queries into AI-powered applications. It's particularly useful for tasks like balance checking, transaction analysis, and monitoring network health through conversational interfaces."
aldrin-labs,solana-docs-mcp-server,3,,"This Solana documentation server, developed for the Model Context Protocol, provides AI assistants with access to Solana blockchain documentation. Built with TypeScript and Node.js, it uses Axios and Cheerio to fetch and parse Solana's online documentation, making it available through MCP-compatible endpoints. The server enables AI systems to query and retrieve up-to-date Solana development information, facilitating accurate responses to blockchain-related queries. It's particularly useful for developers seeking real-time Solana documentation assistance, AI-powered Solana development tools, or educational platforms focused on blockchain technology."
alec2435,python_mcp,52,3481,"This MCP server, developed by Alex Velikanov, provides an interactive Python REPL environment for executing Python code within AI conversations. Built with Python and leveraging the MCP library, it offers persistent session management and captures stdout/stderr output. The implementation stands out by maintaining separate state for each session and supporting both expressions and statements. It's particularly useful for developers and data scientists who need to run Python code snippets, test algorithms, or perform data analysis tasks through AI-assisted workflows, allowing for seamless integration of Python programming into conversational AI interfaces."
alefcastelo,archai-static-analyzer-mcp,0,,"The Archai Static Analyzer MCP server provides AI assistants with code analysis capabilities focused on enforcing hexagonal architecture principles in Java applications. Built with TypeScript using the Model Context Protocol SDK, it implements various architectural rules such as limiting class dependencies, enforcing domain package isolation from infrastructure, validating use case naming conventions, and detecting improper email handling in models. The server exposes a single tool that accepts filename and content parameters, analyzes the code against these predefined rules, and returns violations as formatted text. This implementation is particularly valuable for development teams wanting to maintain architectural integrity through automated code reviews within AI assistant conversations."
alejandroballesterosc,document-edit-mcp,14,,"Document MCP server that enables Claude Desktop to perform operations on Microsoft Word, Excel, and PDF files. Built with FastMCP and Python, it provides tools for creating and editing documents, converting between formats, and handling spreadsheet data. Particularly valuable for users who need to automate document workflows or manipulate files through natural language requests without switching between applications."
alekspetrov,mcp-docs-service,19,10493,"MCP Documentation Service is a custom implementation that enables AI assistants to interact with markdown documentation files. Developed by Aleks Petrov, this service provides document management capabilities including creating, reading, updating, and deleting documentation files, working with YAML frontmatter metadata, searching through documentation, and analyzing documentation health. The implementation supports both Node.js and Deno environments, offers command-line options for specifying custom documentation directories, and integrates seamlessly with Cursor IDE and Claude Desktop through a SQL-like query format for executing commands."
alessandrorumampuk,mcpserver,0,,"MCP Server implementation that integrates with Ollama's Llama3 model to provide a terminal-based chat interface with persistent context management. Built with Node.js and Socket.IO, it features a PWA-ready web interface with offline support, YouTube video search/sharing capabilities, and a full xterm.js terminal emulator. The implementation focuses on maintaining conversation history and context across sessions while providing a familiar terminal experience for technical users."
alexandertsai,mcp-telegram,4,,"Telegram MCP Server enables Claude to access and interact with Telegram accounts, allowing for reading and sending messages through a simple interface. Developed by Alexander Tsai, it provides tools for retrieving chat lists, reading messages, marking messages as read, and sending replies while maintaining the user's conversational style. The implementation uses Telethon for Telegram API access and includes a conversation context analyzer that reads from a customizable style guide to help Claude generate responses that match the user's texting patterns. Perfect for users who want to monitor and respond to Telegram messages through Claude without switching applications."
alexandervtr,cursor-mcp-file-organizer,2,,"Cursor MCP File Organizer provides a server implementation for automatically organizing files in the Downloads folder based on file types. Built with TypeScript and Express, it offers a configurable rule-based system that sorts files into appropriate directories (like Documents, Images, Archives) while supporting options such as date-based organization and handling duplicate files. The server exposes RESTful endpoints for file operations and uses Server-Sent Events (SSE) for real-time communication with the Cursor IDE. This implementation is particularly useful for developers who want to maintain an organized file system without manual intervention, especially when working with multiple file types across different projects."
alexander-zuev,supabase-mcp-server,677,,"This MCP server implementation provides a bridge between Supabase and AI assistants, enabling database schema exploration and management through natural language interactions. It leverages the Supabase client to execute read-only SQL queries, retrieve schema information, and list tables and columns. The server offers tools for listing schemas, exploring table structures, and executing custom SQL queries, making it particularly useful for developers and data analysts who want to integrate Supabase database operations into their AI workflows. By abstracting database interactions into MCP tools, it simplifies the process of querying and analyzing Supabase data within AI-powered applications."
alexandrebagio,swapi-mcp,3,,"SWAPI MCP Server provides a simple interface to the Star Wars API (SWAPI), allowing AI assistants to retrieve information about planets from the Star Wars universe. Built with TypeScript and the Model Context Protocol SDK, it implements a single tool that enables searching for planets by name and paginating through results. The server returns planet names as text content along with metadata about the total number of results and current page, making it useful for Star Wars-related queries and demonstrations of basic API integration patterns."
alexandreroman,mcp-chess,6,,"This MCP server implementation provides a bridge to play chess games using AI. Developed by Alexandre Roman, it integrates with Spring AI and utilizes external chess libraries for game logic and board visualization. The server offers tools for move validation, game state management, and potentially AI-powered chess analysis. It's designed for use cases requiring interactive chess gameplay or automated chess analysis within AI-assisted applications."
alexandreroman,mcp-location,1,,"This MCP server implementation provides location-based functionality using the Spring AI framework. It integrates with external APIs to retrieve geolocation data, offering capabilities such as determining a user's location based on their IP address. The server is designed to enhance AI-assisted applications with contextual location awareness, making it useful for personalized recommendations, localized content delivery, or geographic data analysis in various domains."
alexandreroman,mcp-time,0,,"This MCP server implementation provides a time-related service using Spring Boot and Spring AI. Developed by Alexandre Roman, it integrates with the Spring AI MCP server starter, allowing for easy deployment and scalability. The server is designed to handle time-based operations and queries, making it suitable for applications that require precise time management or scheduling functionalities. It leverages Java 21 and the latest Spring Boot version, showcasing modern Java development practices."
alexanimal,tradovate-mcp-server,1,,"Tradovate MCP Server provides a bridge to the Tradovate trading platform API, enabling AI assistants to manage futures contracts, positions, and orders. Built by alexanimal, it offers tools for retrieving contract details, listing positions, placing and modifying orders, and accessing account information with real-time market data. The implementation includes robust authentication handling, data caching for offline operation, and fallback to simulated data when the API is unavailable. This server is particularly valuable for trading workflows that require monitoring positions, analyzing contract details, or executing trades directly within AI assistant conversations."
limklister,mcp-google-custom-search-server,18,,"This Google Custom Search MCP server, developed by Alexander Lindquister, integrates the Google Custom Search API to enable AI assistants to perform web searches. It exposes functions for querying the API and retrieving search results, including web pages, images, and videos. The server handles authentication, request formatting, and response parsing to simplify interactions with Google's search capabilities. By connecting AI systems to Google's vast index of web content, this implementation empowers assistants to find relevant information, answer queries, and gather data from across the internet. It is particularly useful for applications requiring up-to-date web information, content research, or any scenario where an AI needs to search and analyze online resources."
alexbakers,mcp-ipfs,3,993,"MCP-IPFS is a server implementation that provides AI assistants with access to the IPFS Storacha Network through the w3cli interface. Developed by Alex Baker, this TypeScript server enables file uploads, space management, delegation handling, and various IPFS operations via a set of well-defined tools. The implementation requires email authentication with the w3 service and handles command execution, parsing responses, and formatting results for AI consumption. Particularly useful for decentralized storage workflows, content addressing, and managing persistent data on IPFS without requiring direct CLI interaction."
alexei-led,aws-mcp-server,88,,"AWS MCP Server provides a lightweight bridge between AI assistants and the AWS CLI, enabling execution of AWS commands through a standardized interface. Built by alexei-led, it features two main tools: describe_command for retrieving AWS CLI documentation and execute_command for running AWS CLI operations with Unix pipe support. The server leverages existing AWS credentials on the host machine, includes pre-defined prompt templates for common AWS tasks following best practices, and supports multi-architecture deployment via Docker. This implementation is particularly valuable for cloud management workflows where users need to interact with AWS resources without leaving their AI assistant conversation."
alexeydubinin,hh-jira-mcp-server,2,3929,"This Jira MCP server, developed by Alexey Dubinin at HeadHunter, integrates with the Jira API to enable AI assistants to interact with Jira issues and projects. It exposes functions for querying, creating, and modifying Jira tickets, handling authentication and API interactions. The server simplifies Jira management tasks by abstracting away the complexities of the Jira API. By connecting AI capabilities with project management functionality, this implementation allows assistants to track tasks, update issue statuses, and manage workflows programmatically. It is particularly useful for applications requiring automated project tracking, issue management, or any scenario where an AI system needs to interact with Jira data."
alexgoller,mcp-server-agenda,2,,"This MCP server for Agenda, developed by alexgoller, provides AI assistants with a standardized interface to interact with the Agenda note-taking app on macOS. Built using Python and leveraging x-callback-urls, it offers capabilities for creating notes, managing projects, and opening existing notes in Agenda. The server abstracts the complexities of Agenda's x-callback-url scheme, handling URL encoding and execution through macOS system calls. It's particularly valuable for AI systems focused on note management and personal productivity, enabling use cases such as automated note creation, project organization, and seamless integration of AI-generated content into the user's Agenda workflow."
alexgoller,illumio-mcp-server,1,,"This Illumio MCP server, developed by alexgoller, provides an interface for AI assistants to interact with Illumio's Policy Compute Engine (PCE). It integrates with the Illumio API to enable programmatic management of workloads, labels, and traffic flows within a zero trust security environment. The server exposes tools for creating, updating, and deleting workloads and labels, as well as analyzing traffic patterns and security policies. By abstracting PCE interactions, it allows AI systems to easily perform tasks like workload management, label operations, and traffic analysis. This implementation is particularly useful for security teams, network administrators, and DevOps professionals who want to leverage AI capabilities for automating Illumio PCE operations, enhancing security posture, and gaining insights from network traffic data."
alexifeng,mcp_chat_logger,4,,"MCP Chat Logger is a simple tool that allows AI assistants to save chat conversations as formatted Markdown files. Developed by Alexi.F, this implementation provides a single function that takes chat messages and an optional conversation ID, then saves them with timestamps in a structured format. The saved files include role information, timestamps, and the full content of each message, making it useful for record-keeping, analysis, or creating permanent archives of important conversations."
alexkissijr,unrealmcp,4,,"UnrealMCP enables AI assistants to interact with Unreal Engine through a TCP server that exposes scene manipulation, material creation, and blueprint generation capabilities. The implementation includes both C++ components that integrate directly with the Unreal Editor and Python modules that implement the Model Context Protocol, allowing tools like Claude Desktop and Cursor to send commands to Unreal Engine. It features a modular command system that can be extended with custom handlers, making it particularly valuable for AI-assisted game development and virtual production workflows."
adiom-data,lance-mcp,52,,"This LanceDB MCP server, developed by Alex Komyagin, enables AI assistants to interact with LanceDB vector databases through natural language. It leverages the LanceDB Node.js client and Model Context Protocol to provide operations like querying, inserting, and managing vector data. Built with TypeScript and modern dependencies, it offers a bridge between large language models and efficient vector storage. The implementation is designed for developers and data scientists working on AI applications that require fast similarity search, recommendation systems, or semantic analysis on large datasets. It simplifies vector database operations for AI assistants, allowing them to perform complex queries and data manipulations using conversational language."
aithelab,mcp-terminal-use,0,,"This MCP terminal server, developed by Alex Man, enables AI assistants to interact with specified directories on a user's system through a command-line interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for executing shell commands, creating directories, and navigating the file system within allowed boundaries. The implementation focuses on security by restricting access to predefined directories and whitelisting permitted commands. It's particularly useful for tasks like file management, system automation, or providing AI assistants with controlled access to local resources, enabling safe interaction with the user's file system without requiring deep knowledge of system-level operations or security considerations."
al-how,supernotes-to-obsidian,0,,"This MCP implementation, developed by Alex Howard, provides a tool for importing Supernotes exports into Obsidian daily notes. Built with Python, it leverages the Model Context Protocol to streamline the process of transferring and formatting notes between these two popular note-taking applications. The script creates daily notes from templates, cleans up formatting, adds wikilinks for proper nouns, and handles OCR errors. By automating these tasks, it significantly reduces the manual effort required when migrating from Supernotes to Obsidian. This implementation is particularly useful for knowledge workers, researchers, and students who are transitioning between note-taking systems or looking to maintain a consistent daily journaling practice within Obsidian while importing content from Supernotes."
alexneyler,kusto-mcp,2,,"Kusto MCP provides a bridge between AI assistants and Azure Data Explorer (Kusto) databases, enabling natural language querying of Kusto data. Built with .NET 9 and containerized for easy deployment, it leverages Azure OpenAI to translate natural language questions into KQL queries. The implementation includes configuration via YAML files that define database connections and example prompts, making it particularly valuable for data analysis, resource monitoring, and information retrieval from Kusto databases without requiring KQL expertise."
mastercode-io,scaflog-zoho-mcp-server,1,,"This Zoho Creator MCP server, developed by Alex Sherin, integrates with the Zoho Creator API to enable AI assistants to interact with custom business applications. It provides a simple note storage system with a custom URI scheme, allowing for creation and retrieval of notes. The server implements a summarization prompt and a tool for adding new notes, abstracting away the complexities of the Zoho Creator API. By connecting AI capabilities with custom business logic and data storage, this implementation enables assistants to manage and analyze application-specific information. It is particularly useful for scenarios where AI systems need to interact with tailored business processes or maintain context across conversations within custom Zoho Creator applications."
alexsmirnov,mcp-server-continue,0,,"FastMCP Server for continue.dev provides a development automation server that exposes prompts, resources, and tools to LLM clients. Built by Alexander Smirnov, it implements the Model Context Protocol to offer features like URL content fetching, library documentation access, project structure analysis, and web search capabilities through both internet and Perplexity APIs. The server is designed with a modular architecture that separates configuration, resources, tools, and prompts into distinct components, making it particularly valuable for developers who want to enhance their coding workflow with AI assistance without leaving their development environment."
alexwohletz,language-server-mcp,19,,"This language server MCP implementation, developed by Alex Wohletz, provides language support for code editing by integrating with the Model Context Protocol. It offers features like hover information, code completion, and diagnostics for TypeScript and potentially Python. The server exposes these capabilities as MCP tools, allowing AI assistants to analyze and manipulate code. By connecting AI capabilities with language-specific tooling, this implementation enables assistants to provide contextual coding help, suggest improvements, and catch potential errors. It is particularly useful for applications requiring code understanding, automated refactoring, or any scenario where an AI system needs to reason about and interact with source code."
alfonsograziano,node-code-sandbox-mcp,10,,"Node Code Sandbox MCP provides a secure environment for executing JavaScript code within Docker containers. It offers tools for initializing sandboxes, running code with npm dependencies, and managing container lifecycles, all while maintaining isolation through resource limits (512MB memory, 1 CPU). The implementation supports both persistent containers for multiple operations and ephemeral containers for one-off executions, making it ideal for AI assistants that need to test JavaScript snippets, demonstrate npm package usage, or run isolated code examples without security risks."
alfredatnycu,grasshopper-mcp,12,1787,"Grasshopper MCP Bridge connects Grasshopper (a visual programming environment for Rhino) with Claude Desktop through a bidirectional communication system. Developed by alfredatnycu, it consists of a Grasshopper plugin component (GH_MCP.gha) that provides a TCP server and a Python bridge server that implements the Model Context Protocol. The system includes a component knowledge base with information about common Grasshopper components, their parameters, and connection rules, enabling Claude to create and manipulate parametric designs through natural language commands. This implementation is particularly valuable for architects, designers, and engineers who want to leverage AI assistance for parametric modeling workflows without leaving their conversation interface."
algonacci,mcp-gnews,1,,"This MCP server implementation provides integration with the GNews API, enabling news search and retrieval capabilities. It offers tools for searching news articles, fetching top headlines, and retrieving topic-specific news across multiple languages and countries. The server includes resource handlers for convenient news access and prompt generators to facilitate natural language interactions. Developed by Eric Julianto, it's useful for applications requiring up-to-date news data from diverse global sources."
algonacci,mcp-tavily-extract,0,,"This MCP server implementation provides a simple interface for extracting web page content using the Tavily API. It utilizes the FastMCP framework and exposes a single tool, 'extract_url', which takes a URL as input and returns the extracted content. The server requires a Tavily API key to be set as an environment variable and is designed for easy integration into projects that need web scraping capabilities."
algonacci,mcp-tools,0,,"This MCP server implementation integrates the Tavily search API to provide advanced web search capabilities. Developed by Eric Julianto, it offers tools for performing customizable searches with options for depth, result count, time range, and AI-generated answers. The server is built using the FastMCP framework and includes features like progress reporting and resource handling. It's designed for use cases requiring up-to-date web information, such as research, content creation, or data aggregation tasks."
algonacci,mcp-tavily-search,0,,"This MCP server implementation provides a web search capability using the Tavily API. It offers a search tool with customizable parameters, a resource for direct context insertion, and a prompt generator for search queries. The server is designed to enhance AI-assisted workflows by enabling internet searches, making it particularly useful for tasks requiring up-to-date information or fact-checking."
algonacci,mcp-unlock-pdf,0,,"This MCP server implementation provides functionality to read and extract content from both protected and unprotected PDF files. It offers tools for reading PDFs, handling password-protected documents, and formatting the extracted content as resources. The server is designed to be integrated into workflows that require PDF parsing and text extraction, making it useful for document analysis, content indexing, or data extraction from PDF sources."
algonacci,mcp-wikipedia,3,,"This MCP server provides AI assistants with access to Wikipedia content through a simple interface built with FastMCP. It exposes five tools that allow clients to search Wikipedia, retrieve article summaries, access full page content, get random articles, and change the language setting. Created by Eric Julianto, this implementation serves as a bridge between AI systems and the vast knowledge base of Wikipedia, making it useful for research tasks, fact-checking, and educational applications where quick access to encyclopedic information is needed."
aliargun,mcp-server-gemini,117,,"This Gemini MCP server, developed by Ali Argun, enables Claude Desktop to interact with Google's Gemini AI models. It provides a full implementation of the Model Context Protocol, supporting real-time response streaming and secure API key handling. The server integrates with the @google/generative-ai library to offer a streamlined interface for leveraging Gemini's capabilities within Claude Desktop. By abstracting the complexities of the Gemini API, this implementation allows for easy configuration of model parameters and seamless integration with existing Claude Desktop workflows. It is particularly useful for users who want to access Gemini's advanced language models through a familiar interface, enabling applications like chatbots, content generation, and AI-assisted analysis within the Claude Desktop environment."
aliyun,alibabacloud-adb-mysql-mcp-server,7,1119,"Adb MySQL MCP Server provides a universal interface between AI Agents and Alibaba Cloud's Adb MySQL databases, enabling seamless metadata retrieval and SQL operations. Developed by Alibaba Cloud, this Python-based implementation offers tools for executing SQL queries, analyzing query plans, and retrieving execution statistics, along with resource templates for accessing database schemas, table definitions, and configuration values. The server requires minimal configuration through environment variables and supports both local development and pip installation, making it ideal for data analysts and developers who need AI-assisted database interactions with Adb MySQL clusters."
aliyun,alibaba-cloud-ops-mcp-server,27,1761,"Alibaba Cloud MCP Server provides a bridge to Alibaba Cloud services, enabling AI assistants to manage cloud resources through natural language. Developed by Zheng Dayu at Alibaba, this implementation offers tools for managing ECS instances (start, stop, reboot, create, delete), viewing cloud resources (instances, regions, zones, images, security groups), monitoring system metrics (CPU, memory, disk usage), and configuring VPC networks. The server supports both API-based operations and more complex tasks through OOS (Operation Orchestration Service), making it particularly valuable for users who need to monitor and manage their Alibaba Cloud infrastructure without navigating the console interface."
aliyun,alibabacloud-observability-mcp-server,8,8134,"Alibaba Cloud Observability MCP Server provides tools for accessing Alibaba Cloud's monitoring and logging services, including Log Service (SLS) and Application Real-Time Monitoring Service (ARMS). The server enables AI assistants to query log structures, execute log queries, search applications, and analyze trace data through a standardized interface. Built with Python and supporting both stdio and SSE transport protocols, it securely handles authentication through Alibaba Cloud AccessKeys while offering comprehensive error handling. This implementation is particularly valuable for developers monitoring cloud applications, troubleshooting performance issues, or analyzing application logs within the Alibaba Cloud ecosystem."
aliyun,alibabacloud-rds-openapi-mcp-server,21,,"AlibabaCloud RDS OpenAPI MCP Server provides a bridge to Alibaba Cloud's Relational Database Service (RDS) through a set of tools that enable AI assistants to manage and monitor database instances. The implementation offers capabilities for querying instance details, modifying parameters, analyzing performance metrics, and creating new database instances. It also includes VPC management functions for network configuration. This server is particularly useful for DevOps teams managing Alibaba Cloud infrastructure who need to automate database administration tasks or troubleshoot performance issues through natural language interactions."
aliyun,alibabacloud-dataworks-mcp-server,15,9029,"DataWorks MCP Server exports the Alibaba Cloud DataWorks Open API to the Model Context Protocol, allowing AI agents to interact with DataWorks project management and data workflow tools through a standardized, type-safe interface. Built with TypeScript and Zod for robust schema validation, the server dynamically generates MCP tools from the DataWorks API, enabling programmatic project listing and management operations."
alihkhawaher,everything-search-server,4,,"This Everything Search MCP server provides AI assistants with powerful file search capabilities through integration with the Everything Search Engine. Developed to enhance file discovery and management tasks, it leverages the Everything Search HTTP server to offer advanced search options including case sensitivity, whole word matching, regular expressions, and path-specific searches. The server supports customizable result sorting and formatting, making it ideal for use cases such as document retrieval, file organization, and content analysis across large file systems. Its implementation in TypeScript, using the Model Context Protocol SDK, ensures efficient and standardized communication between AI systems and local file search functionalities."
alinagy,godspeed-mcp,1,1535,"Godspeed MCP provides a connector for AI assistants to interact with the Godspeed Task Management API through the Model Context Protocol. It enables task management operations including listing, creating, updating, and deleting tasks, as well as managing task lists. Built with TypeScript and using the MCP SDK, this implementation authenticates via API token and exposes a set of tools that allow AI assistants to help users organize their productivity workflow directly from within their development environment. The server is designed to work with Cursor and other MCP-compatible clients, making it useful for developers who want to manage their tasks without context switching."
alinaqi,mcp-linkedin-server,22,,"This MCP server implementation provides a bridge to LinkedIn's platform, enabling AI assistants to perform various LinkedIn operations such as logging in, browsing feeds, searching profiles, viewing specific profiles, and interacting with posts. Developed by alinaqi, it uses Playwright for browser automation and implements secure session management with encrypted cookie storage. The server offers tools for both manual and automated LinkedIn interactions, making it particularly useful for AI applications requiring social media engagement, professional networking, or talent acquisition tasks. It focuses on rate limiting, error handling, and maintaining compliance with LinkedIn's terms of service, ensuring robust and responsible automation of LinkedIn activities."
alioshr,memory-bank-mcp,231,,"This Memory Bank MCP server implementation transforms traditional file-based memory banks into a centralized, remotely accessible service. Developed by Aliosh Pimenta, it enables multi-project memory bank management with consistent file structure and validation. The server provides full MCP protocol implementation for read/write operations, project listing, and file management. It ensures proper isolation between project memory banks and includes security features like path traversal prevention. The implementation is particularly useful for AI assistants and development teams requiring structured, remotely accessible project documentation and context management across multiple projects."
alistairwalsh,mcp_pandas,2,,"This MCP server for pandas analysis, developed by an unnamed author, provides AI assistants with powerful data manipulation and analysis capabilities. Built with Python and leveraging libraries like pandas, numpy, and matplotlib, it offers a standardized interface for data processing, statistical analysis, and visualization tasks. The server abstracts the complexities of pandas operations, allowing AI systems to easily incorporate data analysis into their workflows. It's containerized using Docker for easy deployment and scalability. This implementation is particularly valuable for data scientists, analysts, and AI researchers working on data-driven projects, enabling use cases such as exploratory data analysis, time series forecasting, and automated report generation across various domains."
aliyun,mcp-server-esa,22,913,"MCP Server ESA provides a bridge to Alibaba Cloud's Edge Security Acceleration (ESA) service, enabling AI assistants to manage edge routines, deployments, routes, and sites. Developed by Aliyun, this TypeScript implementation exposes over 20 specialized tools for operations including creating and deploying edge routines, managing code versions, configuring routes, and handling site records through the ESA API. The server authenticates with Alibaba Cloud using access keys and handles complex operations like code uploads to OSS, making it particularly valuable for developers who need to automate edge computing deployments or manage ESA resources through AI assistants."
aliyun,alibabacloud-hologres-mcp-server,18,9150,"Hologres MCP Server provides a universal interface between AI Agents and Alibaba Cloud's Hologres databases, enabling seamless communication for metadata retrieval and SQL execution. Developed by TimothyDing, it supports executing SQL (including DDL, DML, and queries), collecting statistics with ANALYZE commands, and retrieving database metadata such as schemas, tables, and table statistics. The server requires Python 3.13+ and can be installed via pip or run directly from the repository, making it easy to integrate with MCP clients through simple configuration. This implementation is particularly valuable for data analysis workflows that need to interact with Hologres databases without switching contexts."
aliyun,alibabacloud-lindorm-mcp-server,3,,"Lindorm MCP Server provides a bridge between AI assistants and Alibaba Cloud's Lindorm multi-model NoSQL database. Built in Python using FastMCP, it exposes tools for vector search operations and SQL query execution against Lindorm's wide-table engine. The server enables retrieval from knowledge bases using both full-text and vector search capabilities, allows exploration of index structures, and supports SQL operations with specialized error handling for inefficient queries. It requires configuration of Lindorm instance credentials and deployed text-embedding models, making it valuable for applications that need to leverage Lindorm's vector search capabilities for retrieval augmented generation or perform SQL operations on Lindorm data stores."
aliyun,alibabacloud-polardb-mcp-server,7,,"PolarDB MCP Server provides a bridge between AI assistants and Alibaba Cloud PolarDB databases, enabling direct interaction with MySQL and PostgreSQL database instances. The server supports two database types (MySQL and PostgreSQL) with similar capabilities including table listing, field information retrieval, data querying, and SQL execution with configurable safety controls for write operations. It implements both stdio and SSE transport modes, handles database connections securely, and includes specialized features like AI model management for PolarDB MySQL. This implementation is particularly valuable for developers who need to access and manipulate PolarDB database content through natural language interfaces without writing complex SQL queries manually."
alizdavoodi,mcpdocsearch,8,,"MCPDocSearch is a tool for crawling websites, generating Markdown documentation, and making it searchable via an MCP server. It consists of two main components: a crawler CLI that extracts content from documentation sites and converts it to Markdown, and an MCP server that loads these documents, chunks them into searchable sections, and generates vector embeddings using sentence-transformers. The server exposes tools for listing documents, retrieving document structures, and performing semantic searches over the content, making it particularly useful for AI agents that need to access up-to-date documentation beyond their training cutoff."
HEAD,openai-server,70,,"This MCP server, developed by AllAboutAI-YT, implements a simple notes system to demonstrate core MCP concepts. It provides resources for text notes with URIs and metadata, tools for creating new notes, and prompts for generating summaries. The server uses TypeScript and offers a straightforward interface for AI assistants to manage and analyze textual information. By connecting AI capabilities with a basic note-taking system, this implementation serves as an educational example and starting point for developers looking to understand MCP principles. It is particularly useful for applications requiring simple text storage and retrieval, note summarization, or as a foundation for building more complex document management systems with AI integration."
allenbijo,mcp-sysinfo,0,,"MCP-SysInfo is a lightweight server that provides real-time system information through a simple API. Developed by Allen Bijo, it retrieves detailed hardware and system metrics including CPU, memory, disk, and GPU statistics using libraries like psutil and GPUtil. The server exposes a single endpoint that returns comprehensive system data in a structured format, making it particularly useful for monitoring and diagnostic purposes where users need quick access to their system's performance metrics without leaving their AI assistant interface."
allenday,solr-mcp,2,,"Solr MCP provides a bridge between AI assistants and Apache Solr search indexes, enabling powerful hybrid search capabilities that combine keyword precision with vector semantic understanding. Built by Allen Day, this Python implementation uses FastMCP to expose Solr's search functionality through a standardized protocol, with features including vector embeddings generation via Ollama (using nomic-embed-text), unified collections for storing both document content and embeddings, and Docker integration for easy deployment. The server is particularly valuable for workflows requiring advanced document retrieval from existing Solr indexes, allowing AI assistants to perform contextual searches against structured data repositories without direct database access."
allenporter,mcp-server-home-assistant,45,3802,"This MCP server, developed by allenporter, enables AI assistants to interact with Home Assistant through a standardized interface. It provides tools for querying and controlling smart home devices, sensors, and automations via the Home Assistant API. The server integrates directly with Home Assistant instances, abstracting away complexities to offer a simplified workflow for AI systems. By connecting AI capabilities with Home Assistant's comprehensive smart home platform, this implementation empowers AI assistants to manage and analyze home automation tasks. It is particularly useful for applications requiring smart home control, energy management, or any scenario where an AI system needs to interact with and reason about the state of a connected home."
allglenn,mcp-name-origin-server,0,,"This MCP server predicts the origin of names using the Nationalize.io API, offering both single-name prediction and batch processing capabilities. It exposes two tools: 'predict_origin' for individual names and 'batch_predict' for multiple names, returning country predictions with probability scores. The implementation uses FastMCP with stdio transport for seamless integration with AI assistants, making it valuable for applications requiring demographic analysis, character development, or cultural research."
allthatjazzleo,mantrachain-mcp,2,781,"A Model Context Protocol (MCP) server for interacting with MantraChain (Cosmos SDK) blockchain. This server provides tools for sending tokens, delegating to validators, querying balances, and more using the MCP protocol."
mcp-100,stock-market-server,4,,"Stock Market MCP server that provides real-time financial data retrieval tools using the Alpha Vantage API. Enables querying current stock prices, market reports, financial statements, and company overviews through a standardized interface. Useful for financial analysis, investment research, and building trading-related AI assistants."
alsonwangkhem,github-mcp-2,0,,"GitHub MCP server provides a bridge between Claude and the GitHub API, enabling AI assistants to interact with GitHub repositories. Built with TypeScript and Octokit, it offers tools for searching repositories, retrieving repository information, listing issues, and creating new issues. The server also includes prompt handlers that generate formatted content for issue descriptions, pull request descriptions, and search queries. This implementation is particularly useful for developers who want to manage their GitHub projects directly through AI conversations, streamlining workflows for issue tracking and repository exploration."
always-tinkering,rhinomcpserver,34,,"RhinoMCP Server provides a bridge between AI systems and Rhino 3D's Python scripting capabilities through the Model Context Protocol. This implementation enables AI agents to generate and manipulate 3D models in Rhino by exposing scene context information and geometry creation tools (currently supporting spheres), with all operations requiring explicit user consent via dialog prompts. The server is designed to run within Rhino's Python environment and follows MCP security guidelines, making it particularly valuable for AI-assisted 3D modeling workflows that require direct interaction with Rhino documents."
alx99,db-mcp,1,,"This MCP server, developed by ALX99, provides a standardized interface for AI models to interact with multiple database systems including PostgreSQL, MySQL, and SQLite. Built using Go, it offers tools for connecting to databases, executing queries, and retrieving results in CSV format. The implementation focuses on simplifying database access through a consistent MCP interface, enabling AI assistants to perform complex data operations across different database flavors. By connecting AI models with robust database functionality, this server facilitates sophisticated data analysis, reporting, and management scenarios. It's particularly valuable for applications and AI systems that need to work with diverse data sources or require flexible database interactions without being tied to a specific database management system."
alxspiker,ai-meta-mcp-server,5,,"AI Meta MCP Server enables AI agents to dynamically create and execute custom tools through a meta-function architecture. Built with TypeScript and the Model Context Protocol SDK, it provides a secure sandbox for running JavaScript, Python, or shell code defined at runtime. The server includes persistent storage for tools, allowing AI to build up a library of functions that can be listed, updated, or deleted. With configurable security controls for different execution environments, it's ideal for AI agents that need to extend their capabilities programmatically without requiring developer intervention for each new tool."
alxspiker,mcp-server-ftp,5,,"The MCP Server for FTP Access enables Claude.app to interact with FTP servers through natural language commands. Built with TypeScript and the basic-ftp library, it provides tools for listing directories, downloading and uploading files, creating directories, and deleting files or directories on remote FTP servers. The server is configured through environment variables for connection details and supports both standard FTP and secure FTPS connections. This implementation is particularly useful for users who need to manage remote file systems directly from their AI assistant interface without switching to dedicated FTP clients."
alxspiker,windows-command-line-mcp-server,3,,"The Windows Command Line MCP Server provides a robust, secure bridge between AI models and Windows system operations. It allows controlled execution of commands, project creation, and system information retrieval while maintaining strict security protocols."
am2rican5,mcp-google-calendar,0,1158,"Google Calendar MCP Server provides a TypeScript-based integration with Google Calendar API, enabling AI assistants to manage calendar events through a set of standardized tools. Developed by am2rican5, it features persistent token storage for seamless authentication, supports operations like listing calendars, creating/editing/deleting events, and offers both stdio and SSE transport options. The implementation handles OAuth 2.0 authorization flow automatically, making it ideal for AI agents that need to schedule meetings, retrieve calendar information, or manage events without requiring repeated user authentication."
amanasmuei,mcp-server-nodemcu,1,,"NodeMCU MCP provides a bridge between AI assistants and ESP8266-based IoT devices, enabling remote management and monitoring through the Model Context Protocol. The server exposes tools for listing connected devices, retrieving device information, sending commands, and updating device configurations, while handling both WebSocket connections for real-time device communication and REST API endpoints for traditional client access. Built with a modular architecture using Express.js and the official MCP SDK, it's particularly valuable for smart home automation, environmental monitoring, and IoT device fleet management without leaving the AI assistant interface."
amansingh0311,mcp-qdrant-openai,2,,"MCP Qdrant Server with OpenAI Embeddings provides vector search capabilities by connecting AI assistants to Qdrant vector databases. The server exposes three main tools: semantic search in collections using OpenAI embeddings, listing available collections, and viewing collection information. It handles the generation of embeddings from natural language queries and performs vector similarity search against Qdrant collections, making it valuable for applications requiring semantic document retrieval, knowledge base search, or any use case where finding contextually similar content is important."
zxkane,mcp-server-amazon-bedrock,20,,"This Amazon Bedrock MCP server, developed by an unnamed author, provides a standardized interface for leveraging Amazon's Nova Canvas model for AI image generation. Built with TypeScript and utilizing the AWS SDK, it offers tools for creating images from text descriptions with features like negative prompts, configurable dimensions, and seed control. The server implements comprehensive input validation, error handling, and AWS credential management. By abstracting the complexities of the Bedrock API, it enables AI systems to easily generate images based on textual input. This implementation is particularly valuable for applications requiring programmatic image creation, facilitating use cases such as content illustration, visual concept exploration, and dynamic image generation for various platforms."
amekala,adspirer-mcp-server,3,,"The Amazon Advertising MCP Server provides Claude Desktop users with access to Amazon Advertising data through a simple command-line interface. Built using the Model Context Protocol SDK, it connects to a Supabase backend database to retrieve advertiser information, account listings, and validate API keys. The implementation includes tools for basic operations like listing advertiser accounts and retrieving account details, along with utility functions for testing connectivity. It requires only an Amazon Advertising API key for authentication, making it accessible for marketers and advertisers who want to analyze their Amazon advertising data directly through Claude without needing to understand the underlying database infrastructure."
amgadabdelhafez,dbx-mcp-server,5,,"This MCP server integrates with Dropbox, exposing a set of Dropbox operations as MCP tools. Developed by Amgad, it allows MCP-compatible clients to interact with Dropbox for file management tasks such as listing, uploading, downloading, and sharing files. The server supports authentication via environment variables or runtime updates, and includes comprehensive error handling and testing capabilities. It's particularly useful for AI-assisted workflows requiring cloud storage integration and file manipulation."
amidabuddha,unichat-mcp-server,32,10218,"This Unichat MCP server, developed by amidabuddha, provides a unified interface for interacting with multiple AI language models including OpenAI, MistralAI, Anthropic, xAI, and Google AI. It exposes a single 'unichat' tool that takes messages as input and returns AI-generated responses, abstracting away the differences between various AI providers. Built in Python, the implementation offers predefined prompts for common tasks like code review, documentation generation, and code explanation. By bridging multiple AI services through a standardized MCP interface, this server enables flexible AI model selection and consistent interaction patterns across providers. It is particularly useful for developers and applications requiring AI-powered code assistance, natural language processing, or multi-model AI capabilities without vendor lock-in."
amidabuddha,unichat-ts-mcp-server,9,1617,"This TypeScript MCP server, developed by Stefan, integrates the Unichat library to enable AI assistants to interact with multiple language models including OpenAI, MistralAI, Anthropic, xAI, and Google AI. It provides a unified interface for sending requests to these models via a single 'unichat' tool, abstracting away the complexities of individual APIs. The server supports both STDIO and SSE transport mechanisms and includes predefined prompts for common tasks like code review, documentation, and explanation. By offering a consistent way to leverage multiple AI models, this implementation is particularly useful for developers building flexible chatbots, multi-model AI assistants, or applications that require seamless switching between different language models."
aminalali8,bns-mcp-server,0,,"Bunnyshell MCP Server provides a bridge between Claude Desktop and the Bunnyshell platform, enabling AI assistants to manage cloud environments directly through conversation. Developed by Amin Al Ali Al Darwish, this TypeScript implementation leverages the Model Context Protocol SDK to expose Bunnyshell CLI capabilities including environment creation, component deployment, and remote development workflows. The server runs either locally or in a Docker container, authenticates via API tokens, and offers both resource templates and guided prompts that make it particularly valuable for DevOps teams looking to streamline environment management through natural language interactions."
aminforou,mcp-gsc,59,,"The MCP-GSC server provides Google Search Console integration for AI assistants, enabling access to website search performance data, indexing status, and sitemap management. Created by SEO consultant Amin Foroutan, it offers tools for retrieving search analytics, inspecting URLs, comparing time periods, and managing sitemaps through the Google Search Console API. The implementation includes authentication via service account credentials and features detailed reporting capabilities for SEO analysis. This server is particularly valuable for digital marketers and SEO professionals who need to analyze website search performance, troubleshoot indexing issues, and manage Google Search Console operations through conversational interfaces."
amir-bengherbi,shopify-mcp-server,8,2194,"This Shopify MCP server, developed by Amir Bengherbi, enables AI agents to interact with Shopify stores through GraphQL API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for managing products, customers, orders, discounts, and more. The implementation focuses on comprehensive store management capabilities, with features like advanced order querying, webhook management, and draft order creation. It's particularly useful for e-commerce businesses and developers looking to automate Shopify operations, enabling use cases such as inventory management, customer segmentation, and sales analysis without dealing directly with Shopify's API complexities."
aarora79,aws-cost-explorer-mcp-server,87,,"AWS Cost Explorer MCP Server provides a specialized interface for retrieving AWS cloud spending data and Amazon Bedrock usage statistics through CloudWatch logs. Developed by Amit Arora, this Python-based server exposes Cost Explorer API functionality and Bedrock model invocation logs as MCP tools, allowing detailed analysis of EC2 spending, service costs breakdowns, and Bedrock usage patterns by region, user, and model. The implementation supports both local deployment via Claude Desktop and remote operation on Amazon EC2, making it particularly valuable for AWS customers who need to monitor and analyze their cloud spending and AI model usage directly within Claude conversations."
amitdeshmukh,stdout-mcp-server,2,625,"A lightweight MCP server that captures and manages stdout logs from multiple processes through a named pipe system. The server creates a cross-platform pipe at a standard location, monitors incoming logs, maintains a history of the last 100 entries, and provides tools for querying and filtering these logs, making it particularly useful for debugging and real-time log monitoring across different applications."
amitsh06,mcp-server,0,,"MCP Gemini Server provides a Flask-based implementation that enables AI assistants to interact with Google's Gemini API through a standardized protocol. It supports three key operations: text generation, text analysis (with sentiment, summary, and keyword extraction capabilities), and chat conversations. The server handles client-server communication through a RESTful API, processes requests with appropriate error handling, and securely manages API keys through environment variables. Particularly useful for developers looking to extend AI assistant capabilities with Google's generative models without direct API integration."
amoldericksoans,ffmpeg-mcp,8,,"FFmpeg-MCP provides a server implementation that enables AI models to perform multimedia processing operations using FFmpeg. Built by Amol Soans, it offers tools for video trimming, format conversion, audio extraction, watermarking, quality adjustment, and batch processing of media files. The implementation includes robust security measures like path validation and working directory isolation, comprehensive error handling, and thorough unit tests. It's particularly valuable for workflows requiring media manipulation without leaving the conversation interface, allowing models to process audio and video files directly."
amornpan,py-mcp-gcalendar,0,,"The Google Calendar MCP server enables AI assistants to manage calendar events through a set of specialized tools for listing, creating, and deleting events. Built with the Model Context Protocol, it authenticates with Google Calendar API using OAuth credentials, provides timezone-aware event handling with fallback options, and implements robust error handling and logging. The server exposes four main tools: listing calendar events, creating new events with flexible time formats, deleting specific events by time and title, and removing duplicate events on a given date. This implementation is particularly valuable for productivity workflows where calendar management needs to happen directly within conversation interfaces without context switching."
amornpan,py-mcp-mysql,0,,"MySQL MCP server that provides a standardized interface for interacting with MySQL databases. It enables listing database tables as resources, reading table contents, and executing arbitrary SQL queries through a flexible tool interface. Designed to abstract database interactions and provide a consistent way for AI systems to explore and manipulate MySQL data sources."
amotivv,cloudflare-browser-rendering,4,,"This MCP server implementation provides a bridge to Cloudflare's Browser Rendering API, enabling web scraping and screenshot capture capabilities. It utilizes Puppeteer for browser automation and offers endpoints for content extraction and screenshot generation. The server is designed for use cases requiring dynamic web content processing, such as data extraction from JavaScript-heavy websites or automated visual testing of web applications."
amotivv,memory-box-mcp,5,,"This MCP server provides interactive memory capabilities for AI assistants through integration with Memory Box, a semantic memory storage and retrieval system. Developed by Amotivv, it offers tools for saving, searching, and formatting memories using vector embeddings and semantic search. The server is designed for use cases requiring persistent, context-aware AI interactions, such as personalized assistants or knowledge management systems."
amotivv,protonmail-mcp,7,,"Protonmail MCP Server enables Claude Desktop and Cline VSCode extension to send emails through Protonmail's SMTP service. Developed by amotivv, inc. (creators of Memory Box), this TypeScript implementation provides a single tool for sending emails with support for multiple recipients, CC/BCC functionality, and both plain text and HTML content. The server requires Protonmail SMTP credentials configured as environment variables and includes comprehensive error handling and logging capabilities, making it particularly valuable for workflows where AI assistants need to communicate via email without leaving the conversation interface."
zueai,cloudflare-api-mcp,17,,"This MCP server implementation provides a bridge to Cloudflare's API, enabling AI assistants to manage and interact with Cloudflare services. Developed by amxv, it offers a wide range of tools for DNS management, SSL/TLS configuration, firewall rules, load balancing, and more. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on secure API key management and supports various Cloudflare products. It is particularly useful for applications requiring automated cloud infrastructure management, such as configuring CDN settings, managing DNS records, or adjusting security policies across multiple domains."
amysatterlee,nps_mcp,2,,"This MCP implementation, developed by A. Satterlee, integrates with the National Park Service API to provide access to park information and services. Built with TypeScript and utilizing the Model Context Protocol SDK, it offers a command-line interface for interacting with NPS data. The implementation focuses on delivering structured park information, potentially including details on locations, amenities, and activities. It's particularly useful for applications requiring up-to-date national park data, enabling use cases such as trip planning, park exploration, and environmental research without complex API integrations."
yumia-pretty,cursor-mcp-installer,2,,"A cursor-mcp-installer is a utility server that enables the installation of other MCP servers for the Cursor editor. It provides two main tools: one for installing MCP servers from npm or Python packages via npx/uvx, and another for installing servers from local code repositories. The server handles the configuration by updating Cursor's mcp.json file with the appropriate command, arguments, and environment variables. Written by Ani Betts, it serves as a bridge to simplify the process of adding new MCP capabilities to Cursor without requiring users to manually edit configuration files."
zncou,mcp-installer,1,,"MCP-Installer is a specialized server that simplifies the installation of other MCP servers. Developed by Ani Betts, it allows Claude to install MCP servers hosted in npm or PyPi packages through natural language commands. The implementation supports both remote package installations via npx/uvx and local repository setups, handling environment variable configuration and command-line arguments. It automatically updates the Claude Desktop configuration file, making it particularly valuable for users who want to quickly expand their AI assistant's capabilities without manually editing configuration files or remembering complex installation commands."
anaisbetts,mcp-installer,1025,105018,"This MCP server, developed by anaisbetts, serves as a meta-installer for other MCP servers. It enables AI assistants to dynamically install and configure additional MCP servers from npm or PyPi packages on demand. Built in JavaScript and leveraging npx and uv, this implementation extends Claude's capabilities by allowing it to adapt its toolset in real-time based on user needs. The server interprets natural language installation requests, handles package management, and sets up environment variables, abstracting away the technical complexities of server deployment. It is particularly useful for developers and power users who want to rapidly expand Claude's functionality without manual configuration, enabling on-the-fly access to a wide range of specialized tools and APIs through the MCP interface."
anaisbetts,mcp-youtube,311,29380,"This YouTube MCP server, developed by Anais Betts, enables AI assistants to interact with YouTube video content through subtitles. It leverages yt-dlp to download video subtitles and exposes them via a standardized MCP interface, allowing AI models to analyze and summarize video content without needing to process audio or video directly. By bridging AI systems and YouTube's vast repository of video information, this server facilitates tasks like content summarization, information extraction, and topic analysis from video transcripts. It is particularly useful for AI assistants supporting research, content curation, or educational applications that involve YouTube videos as information sources."
anarcher,raindrop-io-mcp-server,0,,"This MCP server implementation provides a bridge to the Raindrop.io API, enabling AI assistants to interact with bookmarks. Developed by anarcher, it offers tools for creating and searching bookmarks, including features like tagging and collection management. The server is built in Go and uses environment variables for secure token management, making it suitable for integrating Raindrop.io functionality into AI-assisted applications or automating bookmark management tasks."
ancode666,aemet-mcp,2,,"AEMET-MCP provides direct access to Spain's State Meteorological Agency (AEMET) data through a server implementation that exposes tools for querying historical climate data, monthly summaries, and beach conditions across Spain. Built with Python and requiring an API key from AEMET's open data portal, this implementation handles secure API authentication and includes supporting data files for beach codes. The server is designed for integration with Claude AI and other MCP-compatible clients, making it valuable for weather analysis, historical climate research, and accessing real-time meteorological information from Spanish weather stations."
andre-jesus,claude-mcp,1,,"Claude Terminal Monitor, developed by Andre Jesus, is a powerful terminal monitoring plugin for Claude AI that provides real-time terminal output monitoring through the Model Context Protocol (MCP). It integrates seamlessly with Claude Desktop to enable live terminal monitoring capabilities in conversations. Key features include support for multiple terminals, configurable output history, TypeScript support, and robust error handling. The implementation stands out with its automatic integration process, which configures Claude Desktop to use it as an MCP server and sets up necessary logging directories. This tool is particularly useful for developers and system administrators who need to monitor and analyze terminal outputs in real-time within their AI-assisted workflows, enabling use cases such as debugging, log analysis, and system monitoring."
andrelandgraf,mcp-vs-function-calling,4,,"Demonstrates the difference between OpenAI function calling and the Model Context Protocol by implementing two approaches to controlling Home Assistant lights. The function calling implementation uses OpenAI's direct function invocation method, while the MCP server provides a standardized protocol for light control that can be used by any MCP-compatible AI assistant. Serves as an educational comparison of different AI interaction paradigms in home automation."
andresthor,cmd-line-mcp,0,,"This MCP server allows AI assistants to execute common Unix/macOS terminal commands through a controlled and secure interface. It supports the top ~40 most used terminal commands with appropriate security measures.

Features
- Safe execution of common Unix/macOS commands
- Security validation based on command type
- Command categorization (read, write, system)
- Interactive permission management
- Session-based approval system
- Configuration via environment variables or JSON file
- Comprehensive command filtering and pattern matching
- Support for command chaining via pipes (|), semicolons (;), and ampersands (&)
- Claude Desktop compatibility mode with auto-approval
- Detailed command metadata and help for AI assistants

Read Commands
ls, pwd, cat, less, head, tail, grep, find, which, du, df, file, sort, etc.

Write Commands
cp, mv, rm, mkdir, rmdir, touch, chmod, chown, etc.

System Commands
ps, top, htop, who, netstat, ifconfig, ping, etc."
andrew-beniash,mcp-command-server,0,,"This MCP command server, developed by an unnamed creator, implements a robust security layer for handling and processing commands. Built with Python and utilizing the Model Context Protocol SDK, it provides tools for input validation, sanitization, and auditing. The implementation focuses on enhancing command security through a multi-step verification process, including confirmation mechanisms. It's particularly useful for systems requiring high-security command processing, enabling use cases such as critical infrastructure management, sensitive data handling, or secure automation without compromising on safety or auditability."
andybrandt,mcp-simple-arxiv,79,85823,"This MCP server, developed by Andy Brandt, provides AI assistants like Claude with access to arXiv's scientific paper repository. It offers tools for searching papers by title and abstract, retrieving metadata and abstracts, and accessing links to available formats. The server implements proper rate limiting according to arXiv's API guidelines. By bridging AI capabilities with arXiv's vast collection of research papers, this implementation enables AI-assisted literature reviews and scientific research. It integrates seamlessly with Claude Desktop on both macOS and Windows, facilitating natural language interactions for exploring and analyzing scientific publications. The server is particularly useful for scenarios requiring up-to-date information on scientific topics, conducting comprehensive literature searches, or generating insights from academic papers in AI-assisted research and writing tasks."
andybrandt,mcp-simple-openai-assistant,24,9256,"This MCP server, developed by Andy Brandt, enables AI assistants like Claude to interact with OpenAI's GPT models through a simple interface. It provides tools for creating and managing OpenAI assistants, starting conversation threads, and exchanging messages. The server integrates seamlessly with Claude Desktop on both macOS and Windows, bridging the capabilities of different AI platforms. By allowing Claude to leverage OpenAI's specialized GPT models, this implementation expands the knowledge and skills available to the AI assistant. It is particularly useful for scenarios requiring access to OpenAI's latest models, collaborative AI interactions, or specialized task delegation in AI-powered applications."
andybrandt,mcp-simple-pubmed,68,14311,"This MCP server, developed by Andy Brandt, provides a bridge between large language models and the PubMed medical research database via the Entrez API. Built in Python, it enables AI assistants to search PubMed, access article abstracts, and potentially retrieve full-text content for open access papers. The implementation focuses on simplicity and ease of integration with Claude Desktop, offering a straightforward interface for querying biomedical literature. By connecting AI models with PubMed's vast repository of scientific articles, this server allows AI systems to access up-to-date medical research, analyze trends in healthcare, and provide evidence-based insights. It is particularly useful for scenarios like literature reviews, staying current on medical advancements, and building AI assistants that can leverage peer-reviewed scientific knowledge in the biomedical domain."
andybrandt,mcp-simple-timeserver,13,10186,"This MCP server, developed by Andy Brandt, provides AI assistants like Claude with the ability to access current time information. It offers two key tools: get_time for retrieving local time and timezone data from the user's machine, and get_utc for obtaining UTC time from an NTP server. By bridging AI capabilities with accurate timekeeping, this implementation enables time-aware interactions and calculations. The server is designed for easy integration with the Claude desktop app on both macOS and Windows. It addresses the limitation of AI models lacking inherent time awareness, making it useful for scenarios requiring temporal context, scheduling assistance, or time-based computations in AI-powered conversations and tasks."
andylee20014,mcp-replicate-flux,6,,"MCP Replicate Flux provides a bridge to Replicate's AI image generation models, enabling Claude to create images from text prompts. The implementation uses Node.js to handle the communication between Claude and Replicate's API, and automatically uploads generated images to cloud storage (Cloudflare R2) for easy access. Built with the Model Context Protocol SDK, it exposes a single tool for image generation that accepts a prompt and filename parameter, returning both a confirmation message and the URL to the stored image. This server is particularly useful for creative workflows where visual content generation enhances the conversation experience."
andypost,mcp-server-ts-trello,0,,"This Trello MCP server, developed by the GTT Team, integrates the Model Context Protocol with the Trello API. Built with TypeScript and leveraging the MCP SDK, it enables AI agents to interact with Trello boards, lists, and cards through natural language. The implementation provides tools for retrieving boards, lists, cards, and card details, with a focus on asynchronous operations and comprehensive error handling. It's particularly useful for project management and task tracking applications, enabling use cases such as automated task creation, progress monitoring, and workflow optimization without directly dealing with the complexities of the Trello API."
angheljf,nyt,9,,"This New York Times article search MCP server, developed by angheljf, provides an interface for language models to retrieve recent news articles based on keywords. It integrates with the NYTimes API to search articles from the last 30 days, returning key details like title, abstract, URL, date, and author. Built in TypeScript, it demonstrates core MCP concepts while focusing on a specific use case. The server handles API authentication and request formatting. This implementation is particularly useful for AI assistants needing to access current news and trending topics, conduct research on recent events, or provide summaries of latest developments in specific areas."
angiejones,mcp-selenium,117,7467,"Navigate to URLs
Find elements using various locator strategies
Click, type, and interact with elements
Perform mouse actions (hover, drag and drop)
Handle keyboard input
Take screenshots
Upload files"
angrysky56,mcts-mcp-server,2,,"MCTS MCP Server provides a Bayesian Monte Carlo Tree Search engine for AI-assisted analysis and reasoning. It enables Claude to systematically explore different angles and interpretations of topics using a probabilistic approach that balances exploration versus exploitation. The server implements multi-iteration analysis with state persistence between chat turns, approach taxonomy classification, Thompson sampling, surprise detection, and intent classification. It's particularly valuable for users seeking deep, explorative analysis that evolves through multiple iterations, producing insightful analyses that consider diverse philosophical approaches and perspectives."
angrysky56,mcp-logic,20,,"This MCP-Logic server, developed by an AI researcher, provides automated reasoning capabilities using Prover9/Mace4 for AI systems. Built with Python 3.12+ and leveraging the MCP library, it offers tools for theorem proving, model verification, and syntax validation of logical statements. The implementation focuses on bridging formal logic with AI, enabling knowledge validation and complex reasoning. It's particularly useful for AI assistants or applications needing to perform logical proofs, verify knowledge representations, or analyze logical implications. The server supports nested quantifiers and multiple premises, making it suitable for tasks like validating AI knowledge models, reasoning about system behaviors, or formal verification of logical arguments."
angrysky56,mcp-windows-website-downloader,4,,"This Windows-compatible website downloader tool for the Model Context Protocol (MCP) enables AI assistants to efficiently retrieve and store web content. Developed to address the need for a robust, Windows-friendly solution, it leverages asynchronous processing and concurrent downloads to quickly capture websites and their assets. The implementation, built with Python using libraries like aiohttp and BeautifulSoup4, offers configurable crawl depth and media file handling. It's particularly useful for tasks like web scraping, content archiving, or offline browsing, allowing AI models to interact with web content without requiring direct internet access or complex setup procedures."
aniket310101,mcp-server-couchbase,5,,"Your project is a sophisticated Model Context Protocol (MCP) server implementation that acts as a bridge between Large Language Models (specifically Claude) and Couchbase databases. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a comprehensive set of tools for database operations including document CRUD operations, scope and collection management, index handling, and N1QL query execution. The server is designed to work seamlessly with Claude Desktop, allowing natural language interactions with Couchbase databases.
The architecture is well-structured with clear separation of concerns, organized into distinct modules for different database operations. The core functionality is divided into five main tool categories: query tools for executing N1QL queries, document tools for CRUD operations, collection tools for managing collections, scope tools for scope management, and index tools for handling database indexes. Each tool is implemented with proper error handling and uses Zod for runtime type validation, making the server both robust and type-safe. The project also includes environment-based configuration and follows modern TypeScript practices with proper typing and error handling throughout the codebase."
anjor,coinmarket-mcp-server,31,,"This Coinmarket MCP server, developed by anjor, provides access to cryptocurrency market data via the CoinMarketCap API. It offers tools for retrieving latest currency listings and fetching quotes for specific tokens using symbols or slugs. Built in Python, the implementation exposes CoinMarketCap data through a standardized MCP interface, allowing Claude to analyze and interact with real-time crypto market information. By bridging AI models with CoinMarketCap's extensive cryptocurrency database, this server enhances Claude's ability to process market trends, assist with crypto portfolio analysis, and provide up-to-date information on digital assets. It is particularly useful for users seeking AI-powered insights into cryptocurrency markets, price tracking, and market cap analysis."
anoopt,outlook-meetings-scheduler-mcp-server,2,358,"Outlook Meetings Scheduler MCP Server provides integration with Microsoft Graph API to manage calendar events in Microsoft Outlook. The TypeScript implementation enables AI assistants to create, read, update, and delete calendar events, find people by name, and manage event attendees. It features tools for scheduling meetings with specific parameters like time, location, and attendees, making it particularly valuable for automating calendar management tasks and integrating with other MCP servers like GitHub for comprehensive workflow automation."
anpigon,mcp-server-obsidian-omnisearch,15,7262,"This MCP server, developed by anpigon, enables AI assistants to search Obsidian vaults using the Omnisearch plugin. It provides a REST API interface to query notes and retrieve absolute paths to matching results. The server uses FastMCP to expose the search functionality as a tool, allowing seamless integration with other services. By connecting AI capabilities with personal knowledge management, this implementation empowers assistants to leverage users' existing note collections. It is particularly useful for applications requiring context from personal notes, research assistance, or any scenario where an AI system needs to access and reason about information stored in Obsidian vaults."
anshuldalua,illustrator-mcp,1,,"Illustrator MCP Server enables AI assistants to execute JavaScript/ExtendScript code directly in Adobe Illustrator and view the results. Developed by Anshul Dalua, this MacOS-only implementation uses AppleScript to bridge between the MCP protocol and Illustrator's scripting capabilities, allowing bots to programmatically generate and manipulate vector graphics. The server provides two main tools: one for running arbitrary code in the current Illustrator document and another for capturing screenshots of the Illustrator window to visualize results, making it particularly useful for automated design tasks and graphic generation workflows."
anshumax,world_bank_mcp_server,19,,"This World Bank MCP server, developed by Anshuman Saxena, enables AI assistants to interact with the World Bank's open data API. Built in Python using the MCP framework, it provides tools for listing countries and indicators, as well as analyzing various socioeconomic metrics. The implementation stands out by offering a controlled interface for data exploration and analysis, making it safer and more structured for AI systems to access World Bank data. By connecting AI capabilities with a comprehensive global development database, this server allows for in-depth analysis of international economic trends, poverty statistics, and other key indicators. It is particularly useful for researchers, policymakers, and AI assistants working on global development projects, economic analysis, or cross-country comparisons."
torshepherd,compiler-explorer-mcp,12,3769,"Compiler Explorer MCP is a server that connects LLMs to the Compiler Explorer API, enabling them to compile code, explore compiler features, and analyze optimizations across different compilers and languages. The implementation provides three main tools: listing supported programming languages, retrieving available compilers for a specific language, and compiling source code with customizable options and filters. Built with FastMCP and asynchronous HTTP requests, it handles error cases gracefully and supports various compilation parameters, making it particularly valuable for developers and educators who want to compare compiler behaviors, investigate optimization differences, or explore language feature support without leaving their AI assistant conversation."
src,everart,42166,12944,"This EverArt MCP server, developed by Anthropic, provides AI assistants with image generation capabilities using the EverArt API. Built with TypeScript and leveraging the EverArt SDK, it offers a streamlined interface for creating images from text prompts using multiple AI models. The server implements robust error handling, automatic browser opening for generated images, and supports various image styles including photorealistic and vector art. By abstracting the complexities of API communication and image generation, it allows AI systems to easily incorporate visual content creation into their workflows. This implementation is particularly valuable for creative applications, content generation, and visual design tasks, enabling use cases such as automated illustration, concept visualization, and rapid prototyping of visual ideas."
upstreetai,ia-mcp,2,,"GitHub MCP server that provides a comprehensive bridge to GitHub's API, enabling AI agents to perform a wide range of repository operations like creating repositories, managing issues and pull requests, searching code, and interacting with files. Built by Anthropic, this implementation focuses on providing a clean, type-safe interface to GitHub's functionality using TypeScript and Zod for robust validation, making it particularly useful for developers who want to automate GitHub workflows through conversational AI."
longyi1207,glean-mcp-server,6,,"This MCP server implementation, developed by Anthropic, integrates the Glean API to provide Search and Chat functionalities. It uses TypeScript and the @modelcontextprotocol/sdk to create a server that can be easily deployed using Docker. The implementation offers two main tools: a search function that queries Glean's search API, and a chat function that interacts with Glean's chatbot. It's designed for organizations already using Glean who want to incorporate these capabilities into AI-assisted workflows, enabling natural language interactions with their knowledge base and chatbot through the MCP protocol."
jwaldor,mcp-scrape-copilot,1,,"This Puppeteer-based MCP server, developed by Anthropic, enables browser automation and web interaction capabilities for AI models. It provides tools for navigating web pages, taking screenshots, clicking elements, filling forms, and executing JavaScript in a real browser environment. The server uses Puppeteer to control either a headless Chromium instance (in Docker) or a visible browser window (when run locally). It integrates with TensorFlow.js for text embedding generation. This implementation is particularly useful for web scraping, automated testing, and scenarios where AI models need to interact with web content in a realistic browser context."
src,sequentialthinking,42166,488109,"This Sequential Thinking MCP server, developed by Anthropic, provides AI assistants with a structured approach to problem-solving and analysis. Built with TypeScript and leveraging the MCP SDK, it offers capabilities for breaking down complex problems into manageable steps, revising thoughts as understanding deepens, and branching into alternative reasoning paths. The server implements a dynamic thinking process that can adjust the total number of thoughts and generate solution hypotheses. By facilitating a detailed, step-by-step approach, it allows AI systems to maintain context over multiple steps and filter out irrelevant information. This implementation is particularly valuable for tasks requiring in-depth analysis, planning, or design, enabling use cases such as complex problem decomposition, iterative solution refinement, and multi-path reasoning exploration."
antipas,4oimage-mcp,2,1173,"4o-image MCP Server provides a bridge between AI assistants and the 4o-image API for generating and editing images through text prompts. Built with Node.js and the Model Context Protocol SDK, it exposes a generateImage tool that supports both text-to-image creation and image editing with base64 inputs. The implementation features real-time progress updates, automatic browser opening of generated images, and robust error handling, making it valuable for AI systems that need to create high-quality art, 3D characters, or custom images based on user descriptions."
anton10xr,gibber-mcp,175,,"This MCP server implementation provides cryptographic tools for secure communication, including key pair generation, shared secret derivation, and message encryption/decryption using SJCL P-256 and AES-CCM. Built with Express.js and TypeScript, it offers real-time communication via server-sent events (SSE). The server is designed for applications requiring end-to-end encryption and secure data exchange between AI models and external tools."
antoncoding,mcp-brianknows,0,,"This MCP server implementation provides a bridge to the BrianKnows knowledge base API, enabling AI assistants to perform searches and interact with an agent for information retrieval. Developed by antoncoding, it offers tools for querying the BrianKnows database and leveraging its AI agent capabilities. The server is designed for use cases requiring access to specialized knowledge, such as answering domain-specific questions or providing expert-level information on topics covered by the BrianKnows database."
antonorlov,mcp-postgres-server,2,1530,"A PostgreSQL database server that enables AI models to execute SQL queries, manage tables, and inspect database schemas through a standardized interface. Built with TypeScript and the MCP SDK, it features prepared statement support, automatic connection management, and support for both PostgreSQL and MySQL-style parameter placeholders. The implementation is particularly valuable for developers who want to give AI assistants secure, controlled access to PostgreSQL databases for querying and analysis tasks."
antvis,mcp-server-chart,18,,"@antv/mcp-server-chart is a TypeScript-based server that enables AI assistants to generate data visualizations using AntV's charting capabilities. Developed by the AntV Visualization Team, it implements the Model Context Protocol to provide a standardized interface for creating various chart types from data. The server exposes chart generation functionality that can be accessed through MCP tools, making it particularly valuable for applications that need to produce visual data representations through conversational interfaces without requiring direct knowledge of visualization libraries."
anurag-dhamala,news-mcp-server,3,1788,This MCP server fetches latest news and sources based on country and language using newsdata.io. You need to provide your own API key.
anurag-dhamala,os-info-mcp-server,0,489,"OS Info MCP Server provides real-time system information about the host computer, including CPU, memory, operating system, disk, battery, processes, and CPU load details. Developed by Devnical, this TypeScript implementation uses the systeminformation library to gather comprehensive hardware and software metrics, making it valuable for monitoring system resources, troubleshooting performance issues, or integrating system diagnostics into AI assistant workflows. The server can be deployed either by cloning the repository or using npx, with a simple configuration that enables AI assistants to respond to natural language queries about the host system's specifications and current state."
anuragrai017,database-updater-mcp-server,0,,"This database-updater MCP server, developed by an unnamed author, provides a streamlined interface for updating databases from CSV and Excel files. Built with TypeScript and leveraging libraries like csv-parser and xlsx, it offers tools for connecting to various database types including PostgreSQL, MySQL, MongoDB, and SQLite. The implementation focuses on configurable connection settings and table mapping, making it accessible for AI assistants or applications needing to perform bulk data updates. It's particularly useful for tasks like data migration, automated reporting, or synchronizing databases with external data sources, enabling efficient database management without requiring deep knowledge of individual database APIs or file parsing complexities."
anuragrai017,python-docs-server-mcp-server,0,,"This Python documentation MCP server, developed by an unnamed author, provides a tool for fetching Python documentation using the Brave Search API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined interface for querying Python-related information. The implementation focuses on simplicity, offering a single 'get_python_docs' function that takes a search query and returns relevant documentation links. It's particularly useful for AI assistants or applications needing quick access to Python documentation, enabling tasks like code explanation, function lookup, or general Python language queries without requiring direct web scraping or complex API integrations."
anycontext-ai,thingsboard-mcp-server,4,,"ThingsBoard MCP Server provides a bridge between AI assistants and ThingsBoard IoT platforms, enabling access to device telemetry and attributes through a standardized interface. The server exposes tools for retrieving tenant devices, accessing historic and latest device telemetry data, and fetching device attributes. Built with Python using FastMCP and asynchronous HTTP requests, it handles authentication with JWT tokens and automatically refreshes expired credentials. This implementation is particularly valuable for IoT administrators and analysts who need to monitor device data, analyze telemetry history, or access device attributes directly through conversational AI."
aourpallynikhil,nuke-mcp-2,2,,"Provides a bridge between AI assistants and Nuke, the professional compositing software, enabling automation of common tasks through a Python interface. The server exposes tools for creating and configuring nodes, setting knob values, retrieving node information, and executing render operations. Built with Node.js and a Python bridge script, it handles communication between the MCP protocol and Nuke's Python API, making it valuable for visual effects artists and compositors who want to automate their Nuke workflows through natural language interaction."
aourpallynikhil,photoroom-mcp,0,,"Provides a bridge to the Photoroom API for removing backgrounds from images, with support for different output formats, types, and scaling options. The server exposes a single tool for background removal that accepts image URLs and returns processed results as data URLs. Useful for automated image editing workflows that require background removal capabilities."
ap425q,cuttermcp,3,,"CutterMCP provides a bridge between the Cutter reverse engineering platform and MCP clients, enabling binary analysis capabilities through a REST API. The implementation uses FastMCP to expose Cutter's functionality including function listing, decompilation, segment analysis, and symbol management. Users can search for functions, rename them, add comments to decompiled code, and access imports and exports data. This server implementation is particularly valuable for reverse engineers who want to integrate Cutter's binary analysis capabilities into their AI-assisted workflows."
apache,iotdb-mcp-server,14,,"The IoTDB MCP Server provides a secure interface for AI assistants to interact with Apache IoTDB time-series databases. Developed by the Apache Software Foundation, this Python-based implementation enables three core database operations: executing SELECT queries, listing available tables, and describing table schemas. The server connects to IoTDB instances using a session pool for efficient connection management and returns query results in a structured text format. It's particularly valuable for data analysts and IoT applications that need AI-assisted exploration and analysis of time-series data stored in IoTDB without requiring direct database access."
apappascs,tavily-search-mcp-server,1,,"This Tavily Search MCP server, developed by Alexandros Pappas, integrates the Tavily Search API into the Model Context Protocol framework. Built with TypeScript and leveraging Express.js, it provides a streamlined interface for AI models to perform web searches using Tavily's advanced search capabilities. The implementation supports both stdio and Server-Sent Events (SSE) communication methods, making it versatile for different deployment scenarios. It's particularly useful for enhancing AI-driven applications with real-time, high-quality web search results, enabling use cases like fact-checking, research assistance, or content generation that requires up-to-date information from the internet."
apecloud,kb-cloud-mcp-server,2,,"KB Cloud MCP Server provides AI assistants with access to KubeBlocks Cloud resources through a standardized tool interface. Developed by ApeCloud, this Go implementation enables querying organizations, environments, instances, and backups via the KB Cloud API. The server authenticates using API keys, supports internationalization, and includes comprehensive logging capabilities. It's particularly valuable for automating database management tasks, retrieving cloud environment information, and building AI-powered tools that interact with the KubeBlocks ecosystem."
aperture147,exa-mcp-worker,0,,"An MCP server that provides AI assistants with access to Exa.ai's search capabilities, enabling them to perform web searches with customizable parameters like result count and live crawling options. The server handles authentication with Exa's API, processes search queries, and returns structured results as JSON, making it valuable for AI assistants that need to retrieve up-to-date information from the web without leaving the conversation context."
apeyroux,mcp-xmind,24,1077,"This MCP server, developed by apeyroux, enables AI assistants like Claude to analyze and query XMind mind maps. Built in TypeScript, it provides powerful capabilities for searching, extracting, and analyzing content across multiple XMind files. The implementation stands out by offering smart fuzzy search, hierarchical navigation, and multi-file analysis. By connecting AI capabilities with structured mind map data, this server enables AI systems to gain insights from personal or organizational knowledge bases. It is particularly useful for task management, information retrieval, and knowledge graph analysis scenarios where mind maps serve as a primary data source."
api7,apisix-mcp,17,1237,"A plugin for Apache APISIX that implements the Model Context Protocol (MCP) server, allowing APISIX to serve as an MCP server for AI applications."
apicolet,brevo-mcp,0,,"This MCP server, developed by Antoine Picolet, provides integration with Brevo's Multi-Channel Platform API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing email campaigns, contacts, and other communication channels. The implementation focuses on providing a standardized interface for AI models to interact with Brevo's features, enabling use cases such as automated email marketing, contact list management, and multi-channel communication orchestration. By connecting AI assistants with Brevo's platform, this server allows for sophisticated scenarios like personalized content generation, audience segmentation, and campaign performance analysis. It's particularly useful for businesses and marketers looking to enhance their customer communication strategies with AI-powered automation and insights."
apify,actors-mcp-server,185,,"This MCP implementation, developed using TypeScript, provides a robust foundation for building and deploying web scraping and automation projects. It leverages the Apify platform and Crawlee library, offering a structured environment for creating scalable web crawlers and data extraction tasks. The implementation includes configuration files for ESLint, TypeScript, and Docker, ensuring code quality and consistency across different development environments. By abstracting common web scraping challenges and providing integration with Apify's cloud infrastructure, this tool enables developers to focus on building complex data acquisition workflows. It is particularly useful for projects requiring large-scale web data extraction, automated testing of web applications, or building AI training datasets from web sources."
apify,mcp-server-rag-web-browser,128,,"This MCP server, developed by Apify, provides a web browsing interface for large language models and RAG pipelines. Built in JavaScript, it integrates with the RAG Web Browser Actor on the Apify platform to enable AI assistants to perform web searches, scrape content from top results, and fetch individual URLs. The implementation stands out by returning cleaned web content as Markdown and offering flexible search result limits. By connecting AI models with real-time web data, this server allows AI systems to access up-to-date information, analyze online content, and provide web-informed responses. It is particularly useful for scenarios like research tasks, content summarization, and building AI assistants that can leverage current web information to enhance their knowledge and capabilities."
apinetwork,piapi-mcp-server,40,,"This PiAPI MCP server, developed by an unnamed creator, integrates with the PiAPI image generation service to provide AI-driven image creation capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized interface for generating images based on text prompts. The server implements environment variable management for API key security and uses strict TypeScript configuration for robust type checking. By abstracting the complexities of the PiAPI service, it enables AI systems to easily create images from textual descriptions. This implementation is particularly valuable for applications requiring programmatic image generation, facilitating use cases such as content creation, visual design assistance, and automated illustration generation."
apoorvv,mcp-claude-enhancements,7,,"MCP-Claude-Enhancements is a collection of utility servers that extend Claude's capabilities through simple, focused tools. Created by Apoorv Vishnoi, it includes modules for greeting users, counting desktop files, saving conversations to text files, and a smart context handler. Each server is built with FastMCP and designed to be easily configured through the provided JSON configuration file. The implementation demonstrates practical ways to enhance Claude's functionality with everyday tasks while maintaining a lightweight, modular approach that allows users to selectively enable the tools they need."
shadowfax92,apple-calendar-mcp,1,158,"A TypeScript-based MCP server for interacting with Apple Calendars on macOS, providing a standardized interface for AI models to read, create, update, and delete calendar events. Built to work with a companion Swift-based Calendar API Bridge, the implementation supports flexible date parsing and handles calendar permissions through a local HTTP server running on port 8080. Particularly useful for AI assistants that need to manage scheduling or retrieve calendar information directly from a user's macOS system."
appleinmusic,baidu-search-mcp,4,,"A Baidu Search integration for AI assistants that enables direct access to China's largest search engine through the MCP. This TypeScript implementation allows agents to perform web searches on Baidu, retrieve search results, and extract relevant information without requiring users to leave their conversation interface. It leverages the @modelcontextprotocol/sdk and axios for making API requests, making it particularly valuable for use cases involving Chinese language queries, accessing China-specific content, or gathering information from behind the Great Firewall."
ayushsinghvi92,app-seo-ai,0,,"App SEO AI provides a bridge between AI assistants and Google Ads Keyword Planner API, enabling SEO automation and optimization through keyword research, SERP analysis, and competitor insights. The server exposes RESTful endpoints for generating keyword ideas, analyzing search results, and evaluating competitor domains, making it valuable for digital marketers who need to optimize content, understand search trends, and identify competitive opportunities without leaving their AI assistant conversation."
apridachin,kagi-search-mcp,2,,"This Kagi MCP server, developed by Aleksey Pridachin, integrates the Kagi search API into the Model Context Protocol ecosystem. Built with Python using libraries like httpx and mcp, it provides tools for web search, news retrieval, and fast GPT-powered question answering. The server implements environment-based configuration for API key management and offers a streamlined interface to Kagi's advanced search capabilities. By abstracting Kagi API operations into a standardized MCP format, it enables AI systems to easily access high-quality web search results and enriched content. This implementation is particularly valuable for applications requiring up-to-date information retrieval, facilitating use cases such as research assistance, fact-checking, and content enrichment across various domains."
aptro,superset-mcp,29,,"The Superset MCP Integration provides AI assistants with programmatic access to Apache Superset's data visualization and analytics capabilities through a comprehensive set of tools. Built with Python using FastMCP, it enables operations like dashboard management, chart creation, SQL query execution, and database administration via authenticated API calls. The implementation handles token management, automatic refreshing, and proper error handling to maintain secure connections with Superset instances. It's particularly valuable for users who want to leverage AI assistants to explore data, create visualizations, and manage analytics workflows without leaving their conversational interface."
aptro,zerodha-mcp,10,,"Zerodha-MCP provides a secure interface for AI models to interact with the Zerodha trading platform through a FastMCP server implementation. Built by Aptro, it enables models to authenticate with Zerodha, manage portfolios, place stock and mutual fund orders, retrieve market data, and set up SIPs. The implementation handles authentication flows securely, stores access tokens locally, and provides comprehensive error handling across all trading operations. This server is particularly valuable for users who want to automate trading workflows or analyze their investment portfolio directly within AI assistant conversations."
apw124,logseq-mcp,7,2122,"Logseq MCP Tools provides a set of tools that enable AI agents to interact with local Logseq knowledge graphs through the Model Context Protocol. Developed by apw124, this implementation offers comprehensive functionality for managing pages and blocks in Logseq, including creating, updating, and searching content. The server communicates with Logseq's API to perform operations like retrieving journal entries, managing hierarchical block structures, and executing complex searches. It's particularly useful for AI assistants that need to capture notes, organize information, or retrieve knowledge from a user's personal Logseq database without requiring direct access to the application."
arabold,docs-mcp-server,29,3432,"Docs MCP Server provides a specialized documentation scraping and retrieval system that enables AI assistants to access library documentation from various sources including GitHub, NPM, PyPI, and web pages. Built with TypeScript, it implements a pipeline architecture that handles document scraping, processing, splitting, and storage with features like semantic markdown splitting, greedy chunk optimization, and version-aware retrieval. The server exposes tools for searching documentation, finding specific versions, listing available libraries, and managing scraping jobs through a well-defined API. Particularly valuable for developers who need AI assistants to reference accurate, up-to-date documentation without leaving their workflow."
arathald,mcp-editor,6,,"This MCP server, developed primarily by Claude Sonnet 3.5 with oversight from arathald, is a TypeScript port of Anthropic's filesystem editing tools. It provides a standardized interface for AI agents to perform file operations like reading, writing, and editing on the host system. Built using the Model Context Protocol SDK, it focuses on replicating the functionality of Anthropic's original Python implementation in a TypeScript environment. The server is designed for users familiar with Anthropic's tools who want similar capabilities in a TypeScript-based MCP setup. It's particularly useful for AI-assisted file manipulation tasks, but comes with strong warnings about potential security risks due to its lack of access controls."
arben-adm,brave-mcp-search,10,,"This Brave Search MCP server, developed by Arben Ademi, integrates the Model Context Protocol with the Brave Search API. Built with Python and leveraging libraries like FastMCP and HTTPX, it enables AI agents to perform web searches and local business lookups through natural language queries. The implementation focuses on providing a streamlined interface to Brave's privacy-respecting search capabilities, offering tools for general web searches and geographically-targeted local searches. It's particularly useful for AI assistants and applications needing up-to-date web information or location-based data, enabling use cases such as research assistance, fact-checking, and local recommendations without directly interacting with the Brave Search API."
arben-adm,mcp-sequential-thinking,87,,"Sequential Thinking is an MCP server developed by Arben Ademi for advanced problem solving. It implements a structured approach to break down complex problems into sequential steps, enabling more thorough and methodical analysis. The server integrates with the MCP CLI and leverages the Rich library for enhanced text formatting. Its key differentiator is the focus on step-by-step reasoning, making it particularly effective for tasks requiring detailed planning, logical deduction, or systematic troubleshooting. This implementation is well-suited for developers, researchers, and analysts working on intricate problems that benefit from a structured thinking process."
arben-adm,tavily-mcp-search,1,,"This MCP server integrates with the Tavily search API, providing AI assistants with advanced web search capabilities. Developed by Arben Ademi, it leverages the MCP framework and Tavily's AI-powered search engine to deliver highly relevant and contextual search results. The implementation is built in Python 3.11+ and uses dependencies like httpx and python-dotenv for efficient HTTP requests and environment variable management. It's designed for developers and AI applications that require enhanced web search functionality, enabling natural language queries to retrieve up-to-date information from across the internet."
arborist-ai,claudehopper,1,,"ClaudeHopper is an AI-powered construction document assistant that integrates with Claude Desktop to help users analyze and search through architectural drawings and specifications. Developed by Tom Finlayson, it uses LanceDB for vector storage and Ollama for local AI processing, enabling features like image extraction from PDF drawings and semantic search across construction documents. The implementation includes tools for processing both textual specifications and visual elements from CAD drawings, making it particularly valuable for architects, engineers, and construction professionals who need to quickly access and interpret complex project documentation."
arbuthnot-eth,paypal-mcp-defunct,0,,"PayPal MCP Server provides integration with PayPal's payment processing APIs through a standardized interface. Built by Brandon Arbuthnot, it enables AI assistants to create and capture payments, manage subscriptions, handle business operations like invoicing and payouts, and access user information. The server implements robust authentication with automatic token refresh, comprehensive input validation using Zod schemas, and detailed error handling. It's particularly valuable for e-commerce applications, financial services, and any workflow requiring secure payment processing capabilities without leaving the conversation interface."
archimedescrypto,excel-reader-mcp,16,,"This MCP server, developed by ArchimdesCrypto, provides a standardized interface for reading Excel files with automatic chunking and pagination support. Built with TypeScript and leveraging the Model Context Protocol SDK and SheetJS library, it offers tools for efficient handling of large Excel datasets. The implementation focuses on breaking down Excel files into manageable chunks, enabling AI models to process extensive spreadsheet data without memory constraints. By connecting AI assistants with Excel file content, this server allows for sophisticated data analysis, reporting, and manipulation tasks. It's particularly useful for applications dealing with large-scale data processing, financial analysis, or any scenario requiring programmatic access to Excel file contents through a standardized MCP interface."
archimedescrypto,figma-mcp-chunked,1,,"Figma MCP Server with Chunking provides a memory-efficient interface to the Figma API, designed to handle large Figma files by breaking operations into manageable chunks with pagination support. It features configurable memory limits, node type filtering, progress tracking, and resume capabilities for interrupted operations. The implementation includes tools for retrieving file data, listing files, accessing version history, comments, components, styles, and specific nodes, making it particularly valuable for designers and developers who need to programmatically access and analyze complex Figma designs without memory constraints."
dragonjump,mcp-arcknowledge,0,,"ArcKnowledge is a FastMCP server that bridges AI assistants to custom knowledge base API webhooks, enabling retrieval-augmented generation (RAG) capabilities. Built with Python using the FastMCP framework, it manages multiple knowledge sources through a configurable JSON structure, supports both text and image queries, and handles API authentication. The implementation provides tools for querying knowledge bases, managing document sources, and processing images, making it particularly useful for applications requiring access to specialized knowledge repositories, custom RAG implementations, or multi-source information retrieval with visual context support."
arc-computer,arc-mcp-server,1,,"Arc MCP Server provides a bridge between AI assistants and the Arc Memory Temporal Knowledge Graph (TKG), enabling structured access to repository history and relationships. Built by the Arc Memory Team, it offers tools for tracing decision history, retrieving entity details, finding related entities, and getting line-specific commit information. The server uses FastMCP with stdio transport for seamless integration with Claude Desktop, VS Code Agent Mode, Cursor, and Windsurf. It's particularly valuable for developers who need to understand code provenance and relationships without manually navigating complex repository histories."
argia-andreas,linear-mcp-server,0,,"A TypeScript MCP server that bridges Linear's project management platform with AI assistants, enabling retrieval of a user's todo tickets by user ID or email. Built with the Model Context Protocol SDK, it provides a standardized way to fetch and expose Linear task data, making it easy to integrate project management context directly into AI workflows."
arindam200,devto-mcp,5,,"Dev.to MCP Server provides a bridge between AI assistants and Dev.to content, enabling access to articles and publishing capabilities. Built by Arindam Majumder, it offers tools for fetching latest and trending articles, searching by criteria, accessing article details, and creating or updating content on Dev.to. The server implements caching to improve performance and reduce API calls, requires a Dev.to API key for authentication, and is compatible with Claude and Cursor. It's particularly valuable for users who want to discover, analyze, or publish Dev.to content through conversational interfaces without manually navigating the platform."
ariunbolor,nsaf-mcp-server,0,,"NSAF MCP Server provides AI assistants with access to the Neuro-Symbolic Autonomy Framework, focusing on Self-Constructing Meta-Agents (SCMA) that can evolve and optimize their neural network architectures through generations. The server exposes tools for running evolutionary processes with customizable parameters and comparing different agent architectures, enabling AI assistants to leverage advanced neural architecture search capabilities without requiring deep expertise in evolutionary algorithms. Built with TensorFlow and designed to work seamlessly with Claude Desktop and Cline, this implementation is particularly valuable for researchers and developers exploring autonomous AI systems that can self-design and adapt to different problem domains."
packages,phoenix-mcp,5503,532,"Phoenix MCP Server provides a unified interface to Arize Phoenix's capabilities through the Model Context Protocol. Developed by Arize AI, this TypeScript implementation enables AI assistants to manage prompts, explore datasets, and run experiments against the Phoenix platform. The server exposes tools for creating and iterating on prompts across different LLM providers (OpenAI, Anthropic, Google), working with evaluation datasets, and visualizing experiment results, making it particularly valuable for teams building and evaluating LLM applications who want to leverage Phoenix's observability features through AI assistants."
arjshiv,localutils-mcp-server,2,,"The Local Utilities MCP Server provides access to various system utilities through a standardized interface, enabling AI assistants to retrieve local system information. Built with TypeScript and the Model Context Protocol SDK, it offers tools for getting current time and date, hostname, public IP address, directory listings, Node.js version information, and checking processes running on specific ports. The server can be used globally or via npx without installation, integrates seamlessly with Cursor through simple configuration, and includes a pre-commit hook that automatically builds the server before each commit to ensure build files are always up-to-date in the repository."
arjunbhuptani,sparkmango,1,21917,"SparkMango is a Python-based server that converts Solidity smart contracts into functional RESTful API implementations following the MCP specification. Developed by Arjun Bhuptani, it analyzes contract ABIs, generates method implementations using OpenAI's GPT-4, and creates a complete server structure with state management, event handling, and comprehensive documentation. The server provides a bridge between blockchain contracts and Python applications, making it easier for AI agents to interact with smart contracts through standardized API endpoints without requiring deep blockchain knowledge."
arjunkmrm,mcp-minecraft,71,3962,"This MCP implementation provides a Minecraft integration, allowing AI models to interact with and control Minecraft game environments. Built using TypeScript and Node.js, it leverages the minecraft-protocol and mineflayer libraries to establish connections and manipulate in-game entities. The implementation supports various Minecraft versions and includes features like pathfinding and automated actions. It's designed for researchers, educators, and developers interested in using Minecraft as a sandbox for AI experimentation, educational simulations, or creating advanced in-game automation tools."
arjunkmrm,perplexity-deep-research,3,,"Perplexity Deep Research MCP enables AI assistants to perform web searches using Perplexity's sonar-deep-research model through the chat completions API. It provides a single tool called 'deep_research' that accepts search queries and optional recency filters, returning comprehensive search results with proper citations. Built for integration with Claude Desktop via Smithery, this implementation requires a Perplexity API key and is particularly valuable for workflows requiring up-to-date information retrieval and research capabilities directly within AI assistant conversations."
arjunkmrm,perplexity-search,4,,"Perplexity Search MCP enables AI assistants to perform web searches using Perplexity's API with sonar or sonar-pro models. Built by arjunkmrm, it provides a single 'search' tool that accepts a query parameter and optional recency filtering, returning detailed search results with citations. The implementation runs on Node.js, can be deployed via Docker, and requires a Perplexity API key for authentication, making it ideal for workflows requiring up-to-date information from the web without leaving the conversation interface."
arjunkmrm,mcp-sg-lta,0,,"This MCP server, developed by Arjun Kumar, provides a standardized interface for interacting with Singapore's Land Transport Authority (LTA) DataMall API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers real-time access to transportation information including bus arrivals, traffic conditions, and train service updates. The implementation focuses on exposing LTA's data through a consistent MCP interface, enabling AI models to perform complex transportation-related queries and analysis. By connecting AI assistants with LTA's extensive dataset, this server facilitates sophisticated urban mobility scenarios like route optimization, congestion prediction, and public transport planning. It's particularly valuable for applications and AI systems aimed at improving urban transportation efficiency and user experience in Singapore."
armorwallet,armor-crypto-mcp,189,,"Armor Crypto MCP provides AI assistants with direct access to blockchain operations, crypto trading, and wallet management through the Armor Wallet API. This server exposes a comprehensive suite of tools for creating and managing wallets, checking token balances, executing swaps, setting up DCA (Dollar Cost Averaging) orders, and transferring tokens across different blockchains. Built with FastMCP, it authenticates via JWT tokens and includes detailed logging for all operations, making it particularly valuable for users who want their AI assistants to monitor crypto portfolios, execute trading strategies, or manage multiple wallets without leaving the conversation interface."
arnavsurve,gateway-mcp,0,,"Gateway MCP serves as a bridge between AI assistants and various MCP services, enabling discovery and interaction with remote tools through a unified interface. Built with Python using FastMCP, it provides tools to discover available services from a registry, establish connections to both SSE-based MCP servers and HTTP APIs, and proxy tool calls to connected services. The implementation handles connection management, request routing, and response formatting, making it particularly valuable for workflows requiring access to multiple specialized services without leaving the conversation context."
arnavsurve,scdl-mcp,1,,"The SoundCloud Downloader MCP server enables Claude to download tracks, playlists, and user content from SoundCloud directly through conversation. Built by arnavsurve, this implementation wraps the popular scdl command-line tool in a FastMCP interface, providing granular control over download options including output location, download modes (all tracks, uploads, favorites, reposts, or playlists), track limits, and metadata handling. The server requires ffmpeg and the scdl package as dependencies, making it particularly valuable for users who want to archive or collect SoundCloud content without manually using command-line tools."
arodoid,fastlymcp,4,,"FastlyMCP is a Node.js-based server that enables AI assistants to interact with Fastly's CDN services through the Model Context Protocol. It provides two main tools: one for making authenticated requests to the Fastly API for managing services, configurations, and cache operations, and another for executing Fastly CLI commands securely without exposing API keys. The implementation handles authentication automatically, logs operations for debugging, and includes comprehensive error handling, making it particularly useful for DevOps teams who want to manage their Fastly infrastructure through natural language conversations with AI assistants."
arodoid,unitymcp,424,,"UnityMCP, developed by an unnamed author, is a Unity Editor plugin and server implementation that enables AI assistants to interact with Unity projects in real-time. Built with C# and TypeScript, it offers tools for retrieving editor state, executing C# commands, and accessing logs. The implementation focuses on providing a standardized interface for AI models to manipulate Unity scenes, objects, and project settings. It's particularly useful for tasks like automated level design, asset management, or debugging assistance, allowing AI to directly influence Unity projects without requiring deep knowledge of the Unity API or editor interface."
aroglahcim,magick-mcp,1,227,"This MCP server, developed by aroglahcim, provides a bridge to ImageMagick's command-line interface. Built with Node.js and leveraging the Model Context Protocol SDK, it enables AI assistants to execute ImageMagick commands for image processing and manipulation. The implementation focuses on providing a simple, standardized interface for running ImageMagick operations through MCP. It's particularly useful for developers and content creators who want to integrate ImageMagick's powerful image editing capabilities into AI workflows, enabling use cases such as automated image resizing, format conversion, and applying filters or effects without directly managing command-line interactions."
arpitbatra123,mcp-googletasks,5,,"Google Tasks MCP Server provides a bridge between Claude and Google Tasks, allowing users to manage task lists and tasks directly through Claude. Built with TypeScript and the Google Tasks API, it offers a comprehensive set of tools for creating, updating, and organizing tasks, including features like marking tasks as completed, reordering tasks, and clearing completed tasks. The implementation requires Google Cloud authentication and is designed for personal use, making it ideal for users who want to integrate their task management workflow with Claude's conversational interface."
arre-ankit,notion-mcp-server,0,,"This Notion MCP server, developed as an open-source project, enables AI assistants to interact with Notion workspaces and databases. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for creating, reading, updating, and deleting Notion pages and databases. The server abstracts the complexities of the Notion API, allowing AI systems to seamlessly incorporate Notion's organizational and collaborative features into their workflows. It's particularly useful for productivity assistants, project management tools, and AI developers looking to integrate Notion capabilities, enabling use cases like automated note-taking, task management, and knowledge base maintenance within Notion workspaces."
artemis-xyz,artemis-mcp,1,6098,"Artemis MCP Server connects Claude Desktop with the Artemis API to create and manage ART formulas for cryptocurrency data analysis. Developed by Son Do at Artemis.xyz, it provides tools for validating API keys, retrieving crypto token metrics, and generating formulas for accessing price data, fees, revenue, and other time-series information. The implementation requires Python 3.10+, uv package manager, and an Artemis API key, making it valuable for users who need to analyze cryptocurrency data directly within Claude conversations without switching contexts."
arthurcolle,openai-mcp,22,,"This OpenAI-compatible MCP server implementation provides a bridge between AI assistants and large language models, supporting both OpenAI and Anthropic models. It features a robust architecture with prompt templating, streaming responses, efficient caching, and comprehensive error handling. The server exposes endpoints for health checks, context generation, and prompt management, while also offering advanced features like token usage tracking and Prometheus metrics integration. Ideal for applications requiring reliable, high-performance access to LLMs with the flexibility to customize prompts and manage response caching."
artillect,mtg-mcp-servers,2,,"The MTG Deck Manager MCP servers provide Magic: The Gathering enthusiasts with two specialized tools for card management and information retrieval. Built with Python using the FastMCP framework, the implementation consists of an MTG deck manager server that handles deck uploads, card drawing, hand management, mulligans, and sideboarding, alongside a Scryfall API integration server that enables card searches, random card retrieval, and detailed card information lookups. The servers can be configured in the Claude Desktop client, allowing users to seamlessly interact with their MTG decks and access comprehensive card data without leaving their conversation interface - perfect for deck testing, card research, and game simulation."
aryankeluskar,canvas-mcp,6,,"Canvas MCP is a tool that enables AI agents to interact with Canvas LMS, allowing them to find relevant educational resources based on natural language queries. Built by Aryan Keluskar, it leverages the Canvas API to retrieve course information, modules, and module items, while using Google's Gemini AI to analyze queries and determine the most relevant resources. The implementation includes caching mechanisms for improved performance and supports both text-based queries and image analysis to help students find learning materials without leaving their AI assistant conversation. It's particularly valuable for educational workflows where students need quick access to course materials based on specific learning objectives or questions."
ashdevfr,discourse-mcp-server,4,153,"Discourse MCP Server implements the Model Context Protocol for searching posts on Discourse forums. Built by Sylvain CAU, it provides a single tool 'search_posts' that allows AI assistants to query Discourse content using the discourse2 npm package. The server can be deployed via Docker or run directly with npx, requiring configuration of the Discourse API URL, key, and username as environment variables. This implementation is particularly useful for workflows where AI assistants need to reference or analyze content from Discourse forums without leaving the conversation interface."
ashdevfr,duckduckgo-mcp-server,2,8940,"The DuckDuckGo MCP Server provides web search capabilities through the DuckDuckGo search engine, enabling Claude to retrieve real-time information from the internet. Developed by Sylvain CAU, this Python-based implementation offers a simple yet effective search tool that returns structured results from DuckDuckGo queries. The server can be deployed either through UVX or Docker, making it easily accessible for Claude Desktop users who need to augment their AI assistant with current web information for research, fact-checking, or staying updated on recent events."
ashiknesin,pushover-mcp,12,1304,"This MCP server implementation provides integration with Pushover.net for sending notifications. Developed by Ashik Nesin, it leverages the @modelcontextprotocol/sdk to enable seamless communication between MCP clients and the Pushover service. The server offers a straightforward way to send push notifications to various devices, making it useful for applications that require real-time alerts or updates within the MCP ecosystem."
ashley-ha,mcp-manus,3,,"The MCP Browser Agent enables Claude to interact with web browsers through the Model Context Protocol, built during the AGI House MCP Hackathon by Jaeyun and Ashley Ha. It leverages the browser-use library to provide a seamless integration that allows Claude to automate browser interactions, detect interactive elements, and execute planned actions. The implementation includes two main tools: one for retrieving the current browser state and planning context, and another for executing actions in the browser. This server runs on macOS with Python 3.12 and Google Chrome, making it ideal for users who want to give Claude the ability to navigate websites, fill forms, and interact with web content directly from conversations."
ashwanth1109,mcp-spotify,2,,"This Spotify MCP server implementation, developed by ashwanth1109, provides a comprehensive interface to control and interact with Spotify's music streaming service. It leverages the Spotipy library to offer a wide range of functionalities including playlist management, playback control, track searching, and user data retrieval. The server is designed to work seamlessly with Cursor Composer, enabling AI assistants to control Spotify playback, manage playlists, and access user listening data. It's particularly useful for creating voice-controlled music experiences, generating personalized playlists, and integrating Spotify functionality into AI-driven applications. The implementation focuses on ease of use and flexibility, supporting various Spotify API endpoints and offering detailed error handling for robust operation."
asimihsan,mcp-multilspy,3,,"MCP-MultilspyLSP provides Language Server Protocol (LSP) capabilities to language models through the multilspy library, enabling code intelligence features like finding definitions, references, completions, and documentation across multiple programming languages including Python, Java, TypeScript, and more. Built by Asim Ihsan, this server exposes a consistent API for language intelligence that works with any MCP-compatible client like Claude Desktop, making it valuable for developers who need to analyze and understand code without switching contexts or installing language-specific tooling."
askjohngeorge,mcp-doc-scraper,6,,"This Doc Scraper MCP server converts web documentation into markdown format using Jina.ai's API. It provides a single tool, 'scrape_docs', which takes a URL and output path as input, fetches the web page, converts it to clean markdown, and saves the result. Built with Python and leveraging libraries like aiohttp and pydantic, it offers a straightforward solution for automating documentation conversion. The implementation focuses on simplicity and ease of use, making it ideal for developers, technical writers, or content managers who need to quickly transform online documentation into a more portable markdown format for various purposes such as content migration, offline reading, or integration with markdown-based systems."
asmagin,mcp-server-flutter,2,,"This MCP server implementation provides a bridge to the Model Context Protocol SDK for Flutter applications. Developed by asmagin, it offers a TypeScript-based server that can be easily integrated into Flutter projects. The server utilizes the @modelcontextprotocol/sdk package and Zod for data validation. It's designed to facilitate communication between Flutter clients and MCP-compatible AI models, enabling developers to incorporate advanced AI capabilities into their mobile applications. The implementation focuses on type safety, modularity, and ease of use, making it suitable for both development and production environments. It's particularly useful for Flutter developers looking to leverage MCP's capabilities in their mobile apps, supporting use cases like natural language processing, image recognition, or other AI-driven features."
assafelovic,gptr-mcp,95,,"GPT Researcher MCP Server provides a bridge between AI assistants and web research capabilities, enabling real-time information gathering and report generation. Developed by Assaf Elovic, this implementation leverages the GPT Researcher library to offer tools for conducting deep research, performing quick searches, generating reports, and retrieving source information. The server exposes its functionality through well-defined tools and a resource endpoint that allows direct access to research context without explicit function calls. Built with FastMCP and Python, it includes features like research caching, custom report generation, and comprehensive source tracking, making it ideal for AI assistants that need to access current web information for tasks like answering time-sensitive questions, creating research reports, or providing evidence-based responses."
ast-grep,ast-grep-mcp,15,,"ast-grep MCP provides a bridge to the ast-grep code search tool, enabling AI assistants to find code patterns in projects using abstract syntax tree matching. The implementation exposes a single tool that accepts a pattern, project folder, and optional language parameter, then executes the ast-grep CLI command and returns the results as structured JSON. This server is particularly valuable for developers who want to leverage AI assistants for code analysis, pattern matching, and refactoring tasks without leaving their development environment."
astromined,pygithub-mcp-server,0,,"PyGithub MCP Server provides a bridge between AI assistants and the GitHub API through PyGithub, enabling operations like managing issues, repositories, and pull requests. The implementation follows a modular architecture with domain-specific schemas, converters, and operations that handle authentication, rate limiting, and error recovery automatically. Built with a focus on reliability and maintainability, it includes comprehensive test coverage with both unit and integration tests, making it particularly valuable for AI-assisted software development workflows that require GitHub integration."
asusevski,opendota-mcp-server,4,,"This MCP server implementation provides a bridge to the OpenDota API, enabling AI assistants to access real-time Dota 2 statistics, match data, and player information. Developed by Anthony Susevski, it offers a wide range of tools for retrieving player profiles, match details, hero statistics, and professional player data. The server is designed for use cases requiring in-depth Dota 2 analytics, such as game analysis, player performance tracking, or esports research applications."
asyncfuncai,github-chat-mcp,30,1899,"GitHub Chat MCP server enables AI assistants to analyze and query GitHub repositories through a simple interface. Developed by AsyncFuncAI, it provides tools for indexing repositories and asking detailed questions about codebases, leveraging the GitHub Chat API to retrieve contextual information and source references. The implementation is built with Python using the FastMCP framework, supports both direct installation and containerized deployment, and is particularly valuable for developers seeking to understand unfamiliar repositories, analyze code architecture, or explore technical implementations without manually navigating through files."
athapong,aio-mcp,9,,"This MCP server implementation, developed by athapong, integrates multiple services including GitLab, Jira, Confluence, YouTube, and Google AI. It provides AI-powered search capabilities and various utility tools for development workflows. The server offers a wide range of functionalities, from managing GitLab projects and issues to searching web content and executing command-line scripts, making it suitable for complex software development and project management tasks."
athapong,argus,1,,"This MCP server implementation, named Argus, provides tools for analyzing GitLab repositories and performing security assessments. Developed by Athapong Kaewsalapoom, it offers capabilities such as retrieving repository structures, reading important files, and listing branches. Built with Python and leveraging libraries like GitPython and FastMCP, Argus focuses on secure GitLab integration and easy deployment via Docker. It is particularly useful for DevOps and security teams needing to automate repository analysis, conduct code reviews, or integrate GitLab operations into AI-assisted workflows. The implementation's modular design allows for easy extension of its functionality to cover additional GitLab-related tasks."
atharva-gundawar,macos_gui,3,,"The macOS GUI Tools server provides AI assistants with the ability to interact with native macOS applications through a set of specialized tools. Built with Python using the FastMCP framework, it enables operations like capturing screenshots of applications, identifying UI elements (buttons and text areas), moving the mouse cursor to specific coordinates, clicking, and typing text. The implementation supports various Apple applications including Notes, Safari, Mail, and others by leveraging the macOS accessibility framework to extract UI element information. This server is particularly valuable for workflows requiring desktop automation within AI assistant conversations, allowing users to control their Mac applications without manual intervention."
atharvagupta2003,mcp-stripe,30,,"This MCP implementation, developed for Stripe integration, provides a streamlined interface for interacting with Stripe's payment processing API. Built using Python and leveraging the MCP SDK, it enables AI assistants to perform various payment-related operations such as transaction processing, customer management, and subscription handling. The implementation focuses on simplifying complex payment workflows, making it easier to incorporate Stripe's functionality into AI-driven financial applications. It's particularly useful for businesses and developers who want to automate payment processes, integrate Stripe services into their AI systems, or build intelligent financial management tools without directly managing API calls to Stripe."
atla-ai,atla-mcp-server,11,,"Atla MCP Server provides a standardized interface for LLMs to interact with the Atla API for state-of-the-art LLMJ evaluation. It offers tools for evaluating LLM responses against single or multiple criteria, returning both numerical scores and textual critiques. Built with Python 3.11 and distributed under the MIT license, this server enables AI assistants to leverage Atla's evaluation models for assessing response quality across various dimensions. The implementation supports multiple connection methods including OpenAI Agents SDK, Claude Desktop, and Cursor, making it accessible for developers working with different MCP clients."
HEAD,modelcontextprotocol,9,,"Atlan MCP Server provides a bridge between AI agents and Atlan data catalog services through a Python implementation using the pyatlan SDK. The server exposes tools for searching assets with flexible conditions, retrieving assets using DSL queries, traversing lineage relationships, and updating asset attributes like descriptions and certificate status. Built with a robust error handling system and comprehensive logging, it enables AI assistants to interact with enterprise data catalogs for use cases such as data discovery, lineage analysis, and metadata management. The implementation uses environment variables for configuration and supports deployment through Claude Desktop or the MCP Inspector for testing."
aashari,mcp-server-atlassian-confluence,3,9663,"A TypeScript-based MCP server for Atlassian Confluence integration that provides AI assistants with direct access to Confluence spaces, pages, and content. It offers tools for listing spaces, retrieving page details, and performing advanced searches using Confluence Query Language (CQL), all while converting content to Markdown format for optimal readability. The implementation includes robust error handling, pagination support, and a CLI interface for direct interaction, making it particularly valuable for teams that need to connect Claude or other AI systems to their Confluence knowledge bases without leaving the conversation interface."
atom2ueki,mcp-server-ios-simulator,20,,"A TypeScript-based MCP server for interacting with iOS simulators, built using the Appium iOS Simulator library. Provides a robust session management approach for creating, booting, and controlling iOS simulators programmatically, with flexible device and OS version selection. Useful for AI assistants and testing scenarios that require dynamic iOS simulator interactions."
atomicchonk,roadrecon_mcp_server,34,,"ROADrecon MCP Server provides access to Azure AD security data collected by ROADrecon through a standardized protocol, enabling AI assistants to analyze tenant security posture. The server exposes comprehensive Azure AD data including users, groups, applications, and service principals, while offering specialized security analysis tools for identifying privileged users, analyzing MFA status, detecting stale accounts, and evaluating PIM implementation. Built with Python using FastMCP, it integrates with a ROADrecon API instance to facilitate security assessments and vulnerability identification in Azure AD environments."
atotti,mozisu-mcp-server,4,,"Mozisu MCP Server is a Go-based implementation that provides character counting functionality for text, with special handling for multi-byte characters like Japanese text and emojis. The server processes both total character count and non-whitespace character count, returning structured results through a clean API. Built with performance in mind, it uses Go's unicode package for accurate character classification and offers configurable server settings through JSON configuration. This implementation is particularly useful for applications requiring accurate text metrics across different languages and character sets."
attarmau,styleclip,1,,"FastMCP_RecSys is a clothing recommendation system that uses CLIP (Contrastive Language-Image Pretraining) to analyze and classify fashion images. Built with a FastAPI backend and React frontend, it extracts clothing attributes like style, color, and fabric from uploaded images, then generates personalized recommendations based on detected tags and user behavior. The system stores clothing items and their metadata in MongoDB, making it particularly useful for e-commerce platforms seeking to enhance user experience through AI-powered fashion recommendations."
atuinturtle,heart-mcp-server,0,,"Heart MCP server provides a basic foundation for building MCP-enabled applications using Bun and TypeScript. Built with the @modelcontextprotocol/sdk, it establishes a stdio transport connection and exposes a minimal server configuration that can be extended with custom resources and tools. Useful as a starting point for developers looking to create their own MCP server implementations."
audienseco,mcp-audiense-insights,8,,"This MCP client, developed by an unspecified author, enables integration with Audiense's audience insights platform. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for accessing Audiense's API to retrieve audience data and insights. The implementation focuses on simplifying authentication and data retrieval from Audiense, offering functionality to query audience information. It includes optional integration with the Twitter API for enhanced capabilities. This client is particularly useful for applications requiring programmatic access to audience analytics, enabling use cases such as targeted marketing campaigns, social media strategy development, and demographic analysis without directly handling API authentication complexities."
audienseco,mcp-tweetbinder,3,,"TweetBinder MCP Server provides Claude with access to Twitter/X analytics data through the TweetBinder by Audiense API. Developed by AudienseCo, it enables creating and analyzing Twitter reports with capabilities for searching tweets, tracking hashtags, measuring engagement metrics, and performing sentiment analysis. The server exposes seven tools that handle report creation, status checking, statistics retrieval, and content extraction, making it valuable for social media analysis, campaign tracking, and audience research without leaving the Claude conversation interface."
ichigo3766,audio-transcriber-mcp,4,195,"Audio transcription server that provides speech-to-text capabilities using OpenAI's Whisper API. Built with TypeScript and the MCP SDK, it exposes a tool for transcribing audio files with configurable language settings and optional file saving. Particularly valuable for users who need to convert spoken content to text through AI assistants while maintaining control over the transcription process and output format."
austinkelsay,nostr-mcp-server,24,,"Nostr MCP Server provides a bridge between AI assistants and the Nostr decentralized social network, enabling interaction with user profiles, posts, and Lightning Network payments. Developed by Austin Kelsay, this TypeScript implementation offers seven specialized tools for retrieving profiles, text notes, long-form content, and analyzing zap payments (Bitcoin tips) with detailed transaction information. The server features native support for npub format identifiers, NIP-57 compliant zap receipt validation, and advanced bolt11 invoice parsing, making it ideal for users who want to analyze Nostr social data, track Lightning Network payments, or search through Nostr Implementation Possibilities (NIPs) documentation without leaving their AI assistant interface."
honeycombio,honeycomb-mcp,19,354,"This Honeycomb MCP server, developed by Austin Parker, enables AI assistants to directly analyze and query Honeycomb observability data. Built with TypeScript and leveraging the MCP SDK, it provides tools for listing columns, running analytics queries, and analyzing data patterns within Honeycomb datasets. The server abstracts the complexities of interacting with the Honeycomb API, allowing AI systems to easily access and interpret observability data. By bridging AI capabilities with Honeycomb's powerful analytics, this implementation facilitates use cases such as automated performance analysis, anomaly detection, and data-driven troubleshooting in complex distributed systems."
auth0,auth0-mcp-server,42,1182,"The Auth0 MCP Server integrates with LLMs and AI agents, allowing you to perform various Auth0 management operations using natural language. For instance, you could simply ask Claude to create a new Auth0 app and get the domain and client ID."
automata-labs-team,code-sandbox-mcp,146,,"This MCP implementation, developed by Automata Labs, provides a sandboxed code execution environment for AI agents. Built with Go and leveraging Docker, it offers secure code running capabilities across multiple languages. The implementation focuses on safety and isolation, with features like resource limits and network restrictions. It integrates seamlessly with Claude Desktop and other AI applications through a standardized interface. Particularly useful for developers and researchers working on AI-assisted coding tasks, it enables use cases such as code generation, debugging, and automated testing without exposing the underlying system to potential security risks."
automata-labs-team,mcp-server-playwright,167,13924,"This Playwright-based MCP implementation, developed by Automata Labs, provides a robust interface between language models and web browsers. It enables AI agents to perform a comprehensive range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution in real browser environments. The implementation distinguishes itself by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Playwright's cross-browser support, it ensures compatibility across major browsers. This tool is particularly powerful for AI-driven web testing, data scraping, and automated web interactions, enabling more sophisticated AI assistants that can directly manipulate web applications. Its integration with Claude Desktop and npm-based installation process make it easily accessible for developers and researchers working on advanced AI projects."
automateyournetwork,pyats_mcp,16,,"PyATS MCP Server provides a containerized bridge between AI assistants and Cisco network devices through the pyATS automation framework. Built with Python and packaged in Docker, it enables interaction with network devices defined in a testbed YAML file, supporting routers, switches, and hosts with various operating systems. The server handles SSH connections to network devices with configurable timeouts and authentication, making it valuable for network engineers who need to automate device configuration, troubleshooting, or monitoring tasks without leaving their AI assistant interface."
automation-ai-labs,mcp-link,338,,"MCP-Link is a server implementation that converts OpenAPI specifications into MCP-compatible endpoints, enabling AI assistants to interact with any API described in OpenAPI format. Written in Go, it features a simple HTTP server that parses OpenAPI YAML/JSON files, transforms API endpoints into MCP tools, and handles authentication through header forwarding. The implementation supports path filtering, parameter mapping, and various authentication methods, making it ideal for developers who want to quickly expose existing APIs to AI assistants without writing custom MCP adapters for each service."
automation-ai-labs,mcp-wait,1,361,"MCP-Wait provides a simple waiting functionality that allows pausing execution until other tasks finish. The server offers a single 'wait' tool that accepts a duration in seconds (0-300) and reports progress in 10% increments during the wait period. Built with TypeScript using FastMCP, it supports both stdio transport for CLI usage and SSE for HTTP server integration, making it easy to incorporate into Claude Desktop, Cursor, or Chatwise applications. This utility is particularly useful in workflows where synchronization between different processes is needed."
avarant,typesense-mcp-server,2,,"Typesense MCP Server provides a bridge between AI assistants and Typesense search engine through a Python implementation using the Model Context Protocol. The server exposes tools for managing collections, documents, and search operations, including vector similarity search capabilities. Built with robust error handling and comprehensive logging, it enables AI assistants to perform operations like creating collections, indexing documents, and executing both keyword and vector searches. The implementation uses environment variables for configuration and can be easily deployed through Cursor, making it valuable for developers who want to integrate powerful search functionality into their AI workflows."
avimbu,plausible-mcp-server,0,,"Plausible MCP Server provides a bridge between Claude and Plausible Analytics, enabling AI assistants to query website analytics data directly. Developed by AVIMBU, this TypeScript implementation connects to the Plausible API v2 and offers a single tool for retrieving metrics like visitors, pageviews, bounce rates, and conversion data across customizable date ranges. The server handles authentication through API keys configured via environment variables or the Smithery configuration system, making it ideal for generating analytics reports, monitoring website performance trends, and extracting insights from Plausible data without leaving the conversation interface."
avimbu,slack-mcp-server,11,,"Slack MCP Server provides a bridge to the Slack API, enabling AI assistants to interact with Slack workspaces through two primary tools: posting messages to channels and retrieving user lists. Built by AVIMBU FlexCo in Austria, this TypeScript implementation uses the Model Context Protocol SDK to abstract Slack API interactions, making it easy to programmatically send messages or fetch workspace user information."
avioflagos,mcp-coding-assistant,12,,"This Coding Assistant MCP server, developed by an unnamed creator, enhances AI coding capabilities by providing context-aware code suggestions and documentation integration. Built with TypeScript and leveraging the LangChain library, it offers tools for code analysis, technology detection, and automatic documentation retrieval. The server implements vectorized documentation search and integrates with OpenAI's API for intelligent code completion. By abstracting the complexities of code understanding and documentation lookup, it enables AI systems to provide more accurate and contextually relevant coding assistance. This implementation is particularly valuable for applications requiring enhanced code comprehension and generation, facilitating use cases such as automated code review, context-aware refactoring suggestions, and intelligent API usage recommendations."
awesimon,elasticsearch-mcp,8,1762,"Elasticsearch MCP Server provides a bridge between AI assistants and Elasticsearch databases, enabling natural language interaction with search functionality and index management. Built with TypeScript and leveraging the official Elasticsearch client, it offers tools for creating indices, defining mappings, performing searches, bulk importing data, and retrieving cluster health information. The implementation uses the Model Context Protocol SDK for standardized communication, making it particularly valuable for users who need to query and manage Elasticsearch data without remembering complex query syntax or API endpoints."
awkoy,notion-mcp-server,99,4392,"Notion MCP Server provides a bridge to the Notion API, enabling AI assistants to create, update, and manage Notion pages and blocks. Built by Yaroslav Boiko, it offers tools for page operations (creation, archiving, restoration, searching) and block manipulation (appending, retrieving, updating, deleting) with support for batch operations to improve efficiency. The implementation requires Notion API credentials (token and page ID) and is packaged as a Node.js application with Docker support, making it ideal for workflows that need to maintain documentation, notes, or knowledge bases in Notion without switching contexts."
awkoy,replicate-flux-mcp,20,2819,"Replicate Flux MCP provides a bridge to the Replicate API for accessing the Flux image generation model. Built by Yaroslav Boiko, this TypeScript implementation enables AI assistants to generate images through the Model Context Protocol without requiring users to manage separate API integrations. It handles configuration through a simple API token setup and is packaged as both an npm module and a Docker container, making it ideal for applications that need to incorporate AI image generation capabilities within conversation interfaces."
src,bedrock-kb-retrieval-mcp-server,2539,8039,"An MCP server implementation that enables retrieval from Amazon Bedrock Knowledge Bases, allowing AI applications to access information stored in knowledge bases through the Model Context Protocol."
src,aws-kb-retrieval-server,42166,,"This AWS Knowledge Base Retrieval MCP server, developed by the Model Context Protocol team, enables AI assistants to access information from AWS Knowledge Bases using the Bedrock Agent Runtime. It provides a tool for performing retrieval-augmented generation (RAG) operations, allowing queries against specified knowledge bases and retrieval of multiple results. The server integrates seamlessly with AWS services, requiring proper AWS credentials configuration. By connecting AI capabilities with AWS knowledge repositories, this implementation empowers AI systems to leverage curated information sources. It is particularly useful for building AI assistants that need access to company-specific knowledge, technical documentation, or any scenario where an AI system benefits from retrieving contextual information from AWS-managed knowledge bases."
src,cdk-mcp-server,2539,5908,"An MCP server implementation for AWS services, allowing AI applications to access AWS services like Bedrock, S3, and DynamoDB through the Model Context Protocol."
src,cost-analysis-mcp-server,2539,9161,An MCP server that analyzes the cost of LLM API calls by tracking tokens used and calculating costs based on model pricing. It provides detailed cost breakdowns and usage statistics for better budget management and optimization of AI applications.
src,aws-documentation-mcp-server,2539,25976,An MCP server that provides access to AWS documentation. This server allows Claude to search and retrieve information from AWS documentation to help answer questions about AWS services and features.
sammcj,mcp-aws-kb,0,,"The AWS Knowledge Base Retrieval MCP Server enables AI assistants to access information from AWS Knowledge Bases using the Bedrock Agent Runtime. Built with TypeScript, it provides a retrieve_from_aws_kb tool that performs RAG (Retrieval-Augmented Generation) operations, returning both raw context and structured metadata about the sources. The server supports multiple authentication methods including IAM Access Keys and AWS SSO, can be configured with default Knowledge Base IDs, and returns results in a format optimized for AI consumption with separate content items for context and source metadata. This implementation is particularly valuable for organizations that maintain AWS Knowledge Bases and want to incorporate that information into their AI assistant workflows."
awslabs,log-analyzer-with-mcp,21,,"Log Analyzer with MCP is an AWS Labs-developed server that provides AI assistants with structured access to CloudWatch Logs data. Built in Python using boto3, it exposes a comprehensive set of tools for searching, analyzing, and correlating logs across multiple AWS services. The implementation includes specialized capabilities for error pattern detection, log activity summarization, and cross-service correlation using common identifiers like request IDs. It's particularly valuable for DevOps teams and system administrators who need AI assistance with log analysis for troubleshooting, monitoring, and identifying patterns in their AWS infrastructure logs."
src,nova-canvas-mcp-server,2539,6644,"An MCP server implementation for AWS Nova Canvas, a service that enables developers to build AI applications with Claude. This server allows Claude to access and manipulate data in Nova Canvas workspaces."
awwaiid,mcp-server-taskwarrior,12,702,"This MCP server implementation provides a bridge to TaskWarrior, enabling AI assistants to interact with task management operations. Developed by Brock Wilcox, it offers tools for viewing pending tasks, adding new tasks with various attributes, and marking tasks as complete. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on executing TaskWarrior commands through a simple interface. It is particularly useful for AI applications that need to automate task management, such as personal productivity assistants or project management systems. The implementation leverages the local TaskWarrior installation, allowing seamless integration with existing task databases and workflows."
zed-extensions,mcp-server-axiom,4,,"Axiom MCP Server is a Zed extension that integrates with Axiom's log management platform, enabling AI assistants to query and analyze log data directly within conversations. The implementation downloads and manages the axiom-mcp binary from GitHub releases, configures it with user-provided API tokens and optional organization settings, and handles platform-specific compatibility across macOS, Linux, and Windows. This server is particularly valuable for developers who need to investigate application logs, troubleshoot issues, or extract insights from their observability data without leaving their Zed environment."
axiomhq,zed-axiom-context-server,0,,"This Axiom Context Server, developed for use with the Zed AI assistant, provides a Model Context Server for Axiom. Built using Rust and the zed_extension_api, it offers a customizable command interface for integration with Axiom's model context protocol (MCP). The implementation allows users to specify custom commands and arguments in their Zed settings, enhancing flexibility in deployment. It's designed to seamlessly connect Axiom's capabilities with Zed's AI assistant, making it particularly useful for developers and teams looking to leverage Axiom's context-aware AI features within their Zed-based workflows. The server's ability to use a local executable or a custom-specified command path adds versatility for different setup requirements."
axiomhq,mcp-server-axiom,38,,"This MCP server, developed by Axiom, enables AI agents to query data using Axiom Processing Language (APL). It integrates with the Axiom data platform to provide tools for executing APL queries against datasets and listing available datasets. By leveraging Axiom's powerful data processing capabilities, this implementation allows AI assistants to easily incorporate real-time data analysis into their responses. It is particularly useful for scenarios requiring rapid insights from large datasets, such as log analysis, application monitoring, or business intelligence through natural language queries to an AI assistant. The server is designed for seamless integration with the Claude desktop app and focuses on core querying functionality."
axliupore,mcp-code-runner,6,,"MCP Code Runner is a TypeScript server that enables AI assistants to execute code snippets in isolated Docker containers. Developed by axliupore, it supports multiple programming languages including Python, JavaScript, TypeScript, Go, Java, C, and C++. The implementation uses Dockerode to manage container lifecycle, enforces resource limits (memory, CPU) and network isolation for security, and returns execution results with stdout/stderr output. It's particularly useful for code testing, debugging, and educational scenarios where safe execution of untrusted code is required."
aydinfer,spline-mcp-server,6,,"Spline MCP Server provides a bridge to the Spline 3D design tool API, enabling AI assistants to interact with Spline's features through a structured interface. It supports core operations like exporting scenes to various formats (GLB, GLTF, FBX, OBJ), importing 3D models, and managing scene details, while offering robust animation capabilities including creating keyframe animations, triggering existing animations, and setting up event-based interactions. The server uses axios for API communication and implements comprehensive error handling, making it valuable for designers and developers who want to programmatically control Spline's 3D environment without leaving their AI assistant conversation."
ayeletstudioindia,unreal-analyzer-mcp,75,,"This Unreal Engine code analyzer MCP server, developed by Ayelet Technology Private Limited, provides powerful source code analysis capabilities for Unreal Engine codebases. Built with TypeScript and leveraging tree-sitter for robust C++ parsing, it enables AI assistants to deeply understand and analyze Unreal Engine source code. The server offers features like class analysis, hierarchy mapping, code search, reference finding, and subsystem analysis. It also includes a knowledge base of game genres and implementation patterns. By abstracting complex code analysis into standardized MCP endpoints, it allows AI systems to gain deep insights into Unreal Engine projects. This implementation is particularly useful for game developers, engine contributors, and AI assistants working on Unreal Engine-based projects, facilitating tasks like code comprehension, refactoring, and architectural analysis."
azdeltaqq,mcp-reasoning-server,9,,"MCP Reasoning Server provides advanced reasoning capabilities for Claude in Cursor AI through simulated reasoning algorithms including Monte Carlo Tree Search, Beam Search, R1 Transformer, and Hybrid Reasoning. Built by AzDeltaQQ (inspired by Jacck's mcp-reasoner), it implements auto-iterative reasoning that completes all steps in a single tool call, returning structured JSON responses with reasoning traces. The server is designed for complex problem-solving tasks in software development contexts like algorithm optimization, architecture design, and code refactoring."
azure-samples,remote-mcp-apim-functions-python,34,,"This Azure-based MCP server implementation secures remote MCP servers using API Management as an AI Gateway. It implements the latest MCP Authorization specification with a complete OAuth2 flow, allowing clients to authenticate securely through Microsoft Entra ID. The architecture uses Azure Functions for the backend, with Python tools for snippet management, while API Management handles client registration, authorization, and token exchange. The implementation includes infrastructure as code (Bicep templates) for easy deployment with Azure Developer CLI (azd), making it particularly useful for organizations that need to provide secure, enterprise-grade access to MCP tools while leveraging existing Azure identity services."
azure,azure-mcp,431,,"Azure MCP provides a .NET-based server implementation that enables AI assistants to interact with Azure cloud resources through a command-line interface. Built by Microsoft, this tool exposes capabilities for managing Azure services including Cosmos DB, Storage, App Configuration, and Monitor, with commands for listing resources, querying data, and performing administrative operations. The server supports both standard I/O and SSE transport protocols, implements robust authentication through Azure Identity, and features comprehensive retry policies and telemetry integration, making it valuable for developers seeking to automate Azure resource management or enable AI-assisted cloud operations."
munishm,azure-devops-mcp-server,0,,"Azure DevOps Work Items MCP Server provides a programmatic interface for interacting with Azure DevOps work items, enabling AI assistants to retrieve, create, update, and analyze work items through a standardized set of resources and tools. Built using the FastMCP framework, it supports operations like fetching recent work items, creating tasks, updating work item details, and generating analysis prompts, making it valuable for project management and workflow automation."
chand45,mcp-server-azure-impact-reporting,2,,"The Azure Impact Reporting MCP server enables large language models to report infrastructure issues to Azure on behalf of customers. Built by Chand45, this Python implementation authenticates with Azure using DefaultAzureCredential and creates workload impact reports via the Azure Management API. The server exposes a tool that accepts subscription details, resource information, and impact categories (connectivity, performance, availability), then submits standardized reports through Azure's workload impacts endpoint. It's particularly useful for AI assistants that need to help users report Azure resource problems without requiring them to navigate complex Azure reporting processes manually."
b12io,website-generator-mcp-server,3,,"B12's website generator MCP server enables AI assistants to create business websites through a simple interface. Developed by b12io, this TypeScript implementation provides a single tool that accepts a business name and description, then generates a customized website accessible via a signup link. The server uses the Model Context Protocol to handle tool registration and execution, communicating through stdio transport for seamless integration with Claude Desktop. It's particularly useful for quickly generating professional website designs during conversations about business needs without requiring technical expertise."
babelcloud,gbox,22,,"Gru-sandbox (gbox) is an open-source, self-hostable sandbox for MCP integration that provides secure local command execution for AI agents. Built by BabelCloud, it creates isolated Docker containers (boxes) for running Python, TypeScript, and Bash code, with a clean API for creating, managing, and executing commands in these sandboxes. The system supports both Docker and Kubernetes environments, features automatic resource reclamation, and includes a command-line interface for easy management, making it ideal for developers integrating AI tools with local execution capabilities while maintaining security boundaries."
bacoco,ai-expert-workflow-mcp,6,1815,"AI Expert Workflow MCP is a server implementation that facilitates structured collaboration with AI experts in product development. Developed by bacoco, it provides access to three specialized AI roles: Product Manager, UX Designer, and Software Architect, each generating comprehensive documentation based on user requirements. The server uses OpenRouter API for flexible model selection and includes Task Master integration for converting product requirements into actionable development tasks. This implementation is particularly valuable for teams seeking to streamline the planning-to-implementation pipeline through expert consultation and document generation."
badhansen,notion-mcp,11,,"This MCP server, developed by Badhan Sen, integrates with Notion's API to manage personal todo lists. Built with Python and leveraging libraries like httpx and python-dotenv, it provides a simple interface for interacting with Notion pages and databases. The implementation focuses on todo list management within a specified Notion page, offering functionality to add, retrieve, and potentially update tasks. It's particularly useful for individuals or teams looking to automate task management in Notion, enabling use cases such as programmatic todo creation, task syncing with external systems, or building custom productivity workflows on top of Notion's infrastructure."
baidu-maps,mcp,242,17339,"Baidu Map MCP Server provides a standardized interface for accessing Baidu Maps API services, available in both Node.js and Python implementations. The server enables location-based operations through the Model Context Protocol, allowing applications to interact with Baidu's mapping services without directly managing API credentials or implementation details. Useful for applications requiring geocoding, route planning, location search, and other geospatial functionalities within the Baidu Maps ecosystem."
bajoski34,mcp-flutterwave,0,,"MCP-Flutterwave enables AI assistants to interact with Flutterwave's payment processing API, providing tools for creating and managing payment checkout links, verifying transactions, and resending failed webhooks. Built with TypeScript using the Model Context Protocol SDK, it authenticates with Flutterwave using secret keys and exposes four main tools: creating payment links, disabling checkout links, retrieving transaction details, and resending failed webhooks. This implementation is particularly valuable for workflows requiring payment processing capabilities within AI assistant conversations, such as e-commerce support, transaction verification, or payment link generation."
bankless,onchain-mcp,29,1381,"Bankless Onchain MCP Server provides a middleware between AI models and blockchain data, enabling LLMs to interact with smart contracts, fetch events, and access transaction information across multiple networks. Developed by Bankless Engineering, it implements tools for reading contract state, retrieving proxy implementations, fetching ABIs and source code, filtering event logs, and accessing transaction history. The server requires a Bankless API token for authentication and is particularly valuable for blockchain analysis, smart contract interaction, and on-chain data exploration workflows without requiring users to leave their conversation interface."
baranwang,mcp-trends-hub,60,3793,"MCP Trends Hub provides AI assistants with access to trending topics and content from popular Chinese platforms including Weibo, Zhihu, Douyin, Bilibili, Douban, Toutiao, and 36kr. The implementation exposes each platform as a separate tool that fetches current trending data, with results cached temporarily to improve performance. Built with TypeScript and using the Model Context Protocol SDK, it features robust error handling and standardized response formatting. This server is particularly valuable for use cases requiring real-time insights into Chinese social media trends, content discovery, and cultural monitoring without leaving the conversation interface."
baranwang,mcp-tung-shing,26,,"This MCP implementation, developed by Baran, provides a TypeScript-based interface for working with dates, times, and calendars. Built using the dayjs library and its lunar calendar plugin, it offers tools for parsing, formatting, and manipulating dates in both Gregorian and lunar calendars. The implementation focuses on cross-calendar functionality and internationalization support, making it easier for AI models to handle date-related tasks across different cultural contexts. It's particularly useful for applications requiring date calculations, event scheduling, or cultural date conversions, enabling AI to perform complex calendar operations without needing deep knowledge of various calendar systems."
baronfel,mcp-msbuild-host,1,,"MSBuild MCP Demo is a Model Context Protocol server that exposes tools and prompts for analyzing MSBuild projects to any MCP client. The implementation allows AI assistants to interact with MSBuild project files, providing specialized capabilities for .NET development workflows. Built as a demonstration of the MCP protocol's extensibility, it can be configured to work with Claude or Visual Studio Code, enabling developers to leverage AI assistance for MSBuild-related tasks through a standardized interface."
barryyip0625,mcp-discord,8,,"A Discord integration server that enables AI assistants to interact with Discord's platform features through a standardized interface. Built with TypeScript and discord.js, it provides tools for managing channels, forums, messages, and reactions while handling authentication and permissions appropriately. The implementation focuses on common Discord operations like sending messages, managing forum posts, and adding reactions, making it valuable for users who want to automate Discord community management or enable AI assistants to participate in Discord conversations."
bart6114,my-bear-mcp-server,4,,"Bear MCP Server provides read-only access to the Bear note-taking app's SQLite database, allowing AI assistants like Claude to search and retrieve notes and tags. Built by Bart Smeets, it connects directly to Bear's database in a secure read-only mode and offers tools for opening notes by ID or title, searching notes by terms or tags, listing all tags, and viewing notes with specific tags. The server runs locally using Node.js and the Model Context Protocol, making it ideal for users who want to reference their Bear notes during AI conversations without leaving the interface."
bartekke8it56w2,new-mcp,17,,"This MCP server integrates with Google's Gemini API to provide analytical thinking capabilities without code generation. Developed by Anthropic, it features sequential thought processing, branching analysis paths, session persistence, and advanced semantic filtering of codebases. The server is designed for complex problem-solving tasks, codebase analysis, and architectural decision-making in software development contexts."
bmorphism,manifold-mcp-server,4,584,"This MCP server, developed by Barton Rhodes, enables seamless interaction with Manifold Markets prediction markets. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a comprehensive suite of tools for market search, analysis, betting, and portfolio management. The implementation stands out by providing precise probability specifications for limit orders and advanced filtering capabilities. It's particularly useful for AI systems and developers looking to integrate collective intelligence and decision-making through prediction markets, allowing for sophisticated market analysis, automated trading strategies, and data-driven forecasting in various domains."
bartwisch,mcprules,19,,"MCPRules, developed by Hugo Bartwisch, is a TypeScript-based server for managing and serving programming guidelines and rules. It integrates with development tools to enforce consistent coding standards across projects. The server supports both local and GitHub-hosted rules, offers flexible storage options, and organizes rules into categories like Core Programming Principles and Language-Specific Guidelines. MCPRules stands out by providing a structured rule format with categories and key-value pairs, making it easy to filter and access rules via MCP tools. This implementation is particularly useful for development teams looking to maintain code quality, streamline their coding practices, and ensure consistency across multiple projects."
baryhuang,mcp-server-any-openapi,30,,"This MCP server implementation, developed by Bary Huang, provides integration with any OpenAPI-compliant service. Built with Python and leveraging libraries like FastAPI, FAISS, and sentence-transformers, it offers a flexible approach to connecting AI models with diverse APIs. The implementation focuses on dynamic tool generation based on OpenAPI specifications, enabling seamless interaction with a wide range of services without requiring custom code for each integration. It supports vector-based semantic search for efficient API operation discovery, making it particularly useful for applications that need to work with multiple or frequently changing APIs. By abstracting the complexities of API integration, this server allows for rapid development of AI-powered applications that can leverage external services and data sources through a standardized interface."
baryhuang,mcp-headless-gmail,20,,"MCP Headless Gmail Server provides a way to access Gmail functionality without requiring local credential setup or browser access. Built by baryhuang, it enables any client to complete the OAuth flow independently and then pass credentials as context to the server, creating a complete separation between credential storage and implementation. The server supports getting recent emails, sending messages, and handling token refresh operations through a clean API that works in containerized environments. This implementation is particularly valuable for headless or remote applications where traditional Gmail access methods requiring local file access or browser interaction are not feasible."
baryhuang,mcp-remote-macos-use,65,,"MCP Remote macOS Server provides secure remote control of macOS machines through VNC protocol, enabling AI assistants to capture screenshots and interact with the remote desktop through mouse and keyboard inputs. The implementation supports Apple Authentication (protocol 30) for secure connections, handles screen scaling for consistent display, and includes comprehensive error handling for connection issues. Built with a focus on security and reliability, this server is ideal for remote administration, automated testing, or AI-powered interaction with macOS systems."
basebandit,kai,15,,"Kai is a Model Context Protocol server that provides a bridge between large language models and Kubernetes clusters, enabling users to manage their Kubernetes resources through natural language. Built in Go using the mcp-go library, it offers tools for pod management (listing, retrieving details, streaming logs, deletion), with a cluster manager that handles connections to multiple Kubernetes contexts. The server exposes a comprehensive API that Claude can use to interact with Kubernetes resources, making it particularly valuable for DevOps workflows where users need to monitor or manipulate container environments without remembering complex kubectl commands."
base,base-mcp,208,5600,"This MCP server provides onchain tools for Claude AI to interact with the Base blockchain and Coinbase API. Developed by Dan Schlabach and Tina He, it enables operations like retrieving wallet addresses, getting testnet ETH, listing balances, transferring funds, and deploying smart contracts. The implementation uses TypeScript and leverages the Coinbase SDK to facilitate blockchain interactions, making it valuable for users who want to perform cryptocurrency operations or smart contract deployments directly through Claude."
harshj23,deepseek-claude-mcp-server,39,,"This MCP server, developed by Based_H-10, integrates the DeepSeek API's reasoning capabilities with Claude. Built with Python and leveraging the FastMCP framework, it provides a tool for enhancing Claude's responses with DeepSeek's R1 reasoning engine. The implementation focuses on seamlessly combining DeepSeek's advanced reasoning, which evolved from large-scale reinforcement learning, with Claude's existing capabilities. It's particularly useful for applications requiring more sophisticated reasoning and analysis, enabling use cases such as complex problem-solving, in-depth research assistance, and nuanced decision support without directly exposing users to the intricacies of the DeepSeek API."
bashirk,inbound-mcp,4,,"The Lead Generation Server is a production-grade system built on the MCP Python SDK that enables AI assistants to discover and enrich business leads through multiple data sources. It implements a complete lead lifecycle with UUID-based tracking, leveraging Google CSE for discovery, Hunter.io and Clearbit for data enrichment, and LinkedIn scraping via Playwright for deeper insights. The server features smart caching with Redis, asynchronous processing for high concurrency, and comprehensive monitoring via Prometheus. Particularly valuable for sales teams and marketers who need to generate qualified leads without switching between multiple tools, it provides a unified API for lead generation, enrichment, and maintenance operations."
basicmachines-co,basic-memory,606,55786,"How It Works
Interact naturally with AIs to build and access your knowledge base.

1
Build on Past Knowledge
AI references previous notes in future conversations.

""Let's continue our conversation about coffee brewing.""
AI retrieves relevant notes rather than loading everything.

2
Chat Naturally
Have normal conversations with AI assistants like Claude.

""Find information about pour over coffee methods.""
AI searches your knowledge base and summarizes findings.

3
Save Knowledge
Ask Claude to create a note about your conversation.

""Create a note about coffee brewing methods.""
AI creates a structured note with observations and relations."
batteryshark,agent_construct,11,,"A lightweight, dynamically extensible MCP server built by BatteryShark that enables hot-reloading of tools with built-in rate limiting and configuration management. The server supports JavaScript-rendered web scraping, Gemini web search, and provides a flexible framework for adding new tools with minimal configuration overhead, making it ideal for rapid prototyping of AI agent capabilities."
bazinga012,mcp_code_executor,55,,"This MCP Code Executor, developed by bazinga012, enables AI assistants to execute Python code within specified Conda environments. Built using TypeScript and the Model Context Protocol SDK, it provides a secure and configurable way to run code with access to predefined libraries and dependencies. The implementation focuses on isolating code execution, allowing for flexible environment management and code storage. It's particularly useful for AI workflows that require dynamic code generation and execution, such as data analysis, algorithm testing, or automated scripting tasks, without compromising system security or managing complex runtime setups."
bcharleson,sound-mcp,0,,"Cursor Sound MCP is a server that plays audio feedback when AI completes code generation in the Cursor editor. Built with TypeScript and the Model Context Protocol SDK, it uses the play-sound library to trigger customizable sound effects through a simple tool interface. The implementation features error handling, proper logging to stderr, and a stable JSON response format. Originally inspired by @EricListin on X.com, this MCP enhances the coding experience by providing auditory notifications that alert users when Cursor AI has finished generating code, eliminating the need to constantly monitor the screen for completions."
bcharleson,instantly-mcp,1,,"Instantly MCP Server provides a bridge to the Instantly API v2, enabling AI assistants to manage email campaigns and leads through a set of 17 tools. Developed by bcharleson, it implements endpoints for creating and managing leads, listing campaigns, analyzing email warmup performance, testing account health, and handling email account administration. The server is built with TypeScript using the Model Context Protocol SDK, can be run via Docker or NPX, and requires an Instantly API key for authentication. It's particularly valuable for users who need to automate email outreach, monitor campaign performance, or manage email account health directly within AI assistant conversations."
bearnetwork-brnkc,sketchup-mcp,8,,"SketchUp MCP Server enables AI assistants to control and manipulate 3D models in SketchUp through a WebSocket-based communication system. It provides tools for creating, transforming, and modifying components, applying materials, performing boolean operations, and executing arbitrary Ruby code directly in the SketchUp environment. The implementation includes both a Python server component that implements the Model Context Protocol and a Ruby extension for SketchUp, making it particularly valuable for AI-assisted 3D modeling, architectural design, and woodworking projects."
beat4ocean,mcp-mysql,1,,"MCP-Doris provides a server implementation that connects AI assistants to Apache Doris databases using the MySQL protocol. It offers tools for listing databases, exploring table schemas, and executing SELECT queries with built-in security constraints and timeout protection. The implementation handles connection management, query execution in separate threads, and proper error handling while exposing a clean API through FastMCP. Particularly valuable for data analysis workflows that need to query and explore data in Doris databases directly from conversation interfaces."
behole,cooper-hewitt-mcp,3,,"This Cooper Hewitt MCP server, developed by behole, provides an interface for AI assistants to interact with the Cooper Hewitt Museum's collection API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for searching objects and retrieving detailed information about specific museum artifacts. The implementation focuses on efficient data retrieval and formatting, making it easy for AI models to explore and analyze the museum's vast collection. It's particularly useful for tasks like art research, cultural analysis, or integrating museum data into AI-driven applications, allowing assistants to access Cooper Hewitt's extensive design archive without requiring deep knowledge of the underlying API complexities."
ben4mn,amadeus-mcp,7,,"This Amadeus MCP server, developed for integration with Claude Desktop, provides flight search capabilities using the Amadeus API. Built with Python and leveraging the FastMCP library, it offers a tool for searching flights based on origin, destination, and date. The implementation focuses on simplifying access to Amadeus flight data through a standardized MCP interface, with features like error handling and logging. It's particularly useful for AI assistants and applications needing to incorporate real-time flight information, enabling use cases such as travel planning, itinerary creation, and price comparison without directly dealing with the complexities of the Amadeus API."
benborla,mcp-server-mysql,321,43215,"This MCP server, developed by Ben Borla, provides read-only access to MySQL databases for large language models. Built in TypeScript, it integrates with Claude Desktop and enables AI assistants to inspect database schemas and execute read-only SQL queries. The implementation stands out by focusing on security through read-only transactions and offering flexible database connection options. By bridging AI models with relational databases, this server allows AI systems to analyze data patterns, extract insights, and provide data-driven responses. It is particularly useful for scenarios like data exploration, report generation, and building AI assistants that can leverage structured data from MySQL databases while maintaining data integrity."
hkk101,mcp-server-mysql,0,,"MCP Server for MySQL provides read-only access to MySQL databases, enabling AI assistants to inspect database schemas and execute safe queries. Built by Ben Borla, this Node.js implementation establishes connections to MySQL servers using environment variables for configuration, enforces read-only transactions for security, and exposes both database schema information as resources and a mysql_query tool for executing SQL statements. The server is containerized with Docker for easy deployment and is particularly valuable for workflows requiring database exploration and data analysis without modifying database contents."
zhaoxin34,mcp-server-mysql,1,,"MCP Server for MySQL provides read-only access to MySQL databases, enabling AI models to inspect database schemas and execute SQL queries. Built by Ben Borla, it connects to MySQL servers using configurable connection parameters, enforces read-only transactions for security, and supports comprehensive schema information retrieval. The implementation is written in TypeScript using Node.js and the mysql2 library, with Docker support for easy deployment. It's particularly valuable for data analysis workflows where AI assistants need to explore database structures and extract information without modifying the underlying data."
bendusy,pollinations-mcp,6,,"Pollinations MCP is a TypeScript-based server implementation that provides text-to-audio API capabilities. Built with the Model Context Protocol SDK, it enables programmatic audio generation through a streamlined interface, supporting developers who need to integrate dynamic audio creation into their applications."
benhaotang,mcp-mma-docs,5,,"This Mathematica Documentation MCP server, developed using FastMCP, provides a bridge between AI assistants and Wolfram Mathematica's extensive documentation. It offers tools for retrieving function documentation, including support for packages and add-ons, as well as listing symbols within packages. Built with Python and integrating with Wolfram's wolframscript, it enables AI models to access and interpret Mathematica's rich function library without direct interaction with the software. The implementation is particularly useful for tasks involving mathematical modeling, symbolic computation, or data analysis, allowing AI assistants to leverage Mathematica's capabilities in problem-solving and scientific computing workflows."
benhaotang,mcp-serverman,9,7933,"The mcp-serverman companion server is a powerful tool designed to allow Claude/LLMs to manage MCP server configurations across different clients. It provides a comprehensive set of tools for listing, enabling, disabling, profiling, and version-controlling MCP servers, while also supporting operations across multiple clients like Claude Desktop, Cline, and MCP-Bridge. Through its JSON-based interface, it allows AI assistants to perform sophisticated server management tasks, such as saving server states, managing configuration profiles, and bulk operations on multiple servers.

Install this server by
```
pip install mcp-serverman
mcp-serverman client init
mcp-serverman companion
```"
benhaotang,mcp-semantic-scholar-server,11,,"This Semantic Scholar API MCP server, built with FastMCP, provides a streamlined interface for AI assistants to access academic literature through the Semantic Scholar database. Developed to bridge the gap between AI systems and scholarly research, it offers tools for querying papers, authors, and citations. The implementation stands out by leveraging FastMCP's efficient request handling and Semantic Scholar's comprehensive academic database. By exposing Semantic Scholar's capabilities through standardized MCP endpoints, it allows AI systems to easily incorporate up-to-date research findings and bibliometric data. This server is particularly useful for enhancing AI assistants with academic research capabilities, supporting literature reviews, trend analysis in scientific fields, or building applications that require access to scholarly information."
packages,diff-mcp,4986,765,"jsondiffpatch is a JavaScript library that compares and patches JSON objects, providing a compact delta format that captures additions, modifications, deletions, and array moves. Created by Benjamin Eidelman, it features smart array diffing using LCS algorithm, multiple output formatters (HTML, console, JSON Patch RFC 6902), and text diffing for long strings. The library includes an MCP server implementation that enables AI assistants to compare text or structured data in various formats (JSON, YAML, TOML, XML) and get readable diffs. Ideal for version control systems, data synchronization, and change visualization in web applications."
benniu,emqx-mcp-server,14,,"This MCP server implementation provides EMQX MQTT broker interaction, enabling AI assistants to manage MQTT clients and publish messages. Developed by Benniu Ji, it offers tools for listing and disconnecting clients, retrieving client information, and publishing messages with configurable QoS and retention settings. The server is designed for use cases requiring real-time communication in IoT scenarios, such as monitoring connected devices or sending commands to MQTT-enabled systems."
benyue1978,run-command-mcp,0,,"The Run Command MCP server enables AI assistants to execute shell commands directly from Cursor chat. Based on the Model Context Protocol (MCP) framework, this TypeScript implementation allows users to run system commands through natural language prompts, such as finding services using specific ports. The server leverages Node.js and the MCP SDK to create a bridge between the AI assistant and the local system shell, making it particularly useful for developers who need to perform quick system operations without leaving their coding environment."
berlinbra,alpha-vantage-mcp,32,,"This Alpha Vantage MCP server provides AI assistants with real-time access to financial market data through a standardized interface. Developed using Python, it integrates with the free Alpha Vantage API to offer tools for retrieving stock quotes, company information, cryptocurrency exchange rates, and historical price data. The server abstracts the complexities of API authentication, rate limiting, and error handling, enabling AI systems to seamlessly incorporate financial data into their workflows. It's particularly valuable for AI assistants focused on financial analysis, investment research, and market trend identification, facilitating use cases such as portfolio management, algorithmic trading strategy development, and automated financial reporting."
berlinbra,binary-reader-mcp,0,,"This MCP server, developed by an unspecified author, provides tools for binary file analysis, focusing on Unreal Engine asset files (.uasset) and generic binary metadata extraction. Built with Python and leveraging the Model Context Protocol, it offers functionality to read and analyze binary file structures, with a specific emphasis on Unreal Engine assets. The implementation includes tools for parsing .uasset files and extracting metadata from various binary formats. It's particularly useful for game developers, modders, and digital forensics professionals working with Unreal Engine assets or analyzing binary file structures, enabling use cases such as asset inspection, file format analysis, and automated binary data extraction without directly dealing with low-level binary parsing complexities."
berlinbra,bluesky-mcp,9,,"This BlueSky MCP server, developed by berlinbra, provides access to BlueSky social network data through its official API. Built with Python and leveraging the Model Context Protocol, it offers tools for retrieving user profiles and social graph information. The implementation features built-in authentication handling, session management, and comprehensive error handling. It's particularly useful for AI assistants and applications needing to incorporate BlueSky social data, enabling use cases such as user analysis, network visualization, and content discovery without directly dealing with the complexities of the BlueSky API."
berlinbra,polymarket-mcp,13,,"This PolyMarket MCP server, developed by berlinbra, provides a robust interface for interacting with the PolyMarket API, enabling AI assistants to access and analyze prediction market data. Built with Python and leveraging libraries like httpx and python-dotenv, it offers tools for fetching market information, prices, and historical data. The implementation focuses on clean data formatting, comprehensive error handling, and rate limit management, making it accessible for AI models to perform tasks like market analysis, trend identification, and price tracking. It's particularly useful for financial analysis, decision-making support, or integrating prediction market insights into AI-driven systems, allowing assistants to interact with PolyMarket without requiring deep knowledge of the underlying API complexities."
berrykuipers,mcp_services_radarr_sonarr,5,,"This MCP server provides AI assistants with access to Radarr (movies) and Sonarr (TV series) data. Built with FastMCP, it implements a standardized protocol for querying movie and TV show collections, offering rich filtering options by year, watched status, actors, and more. The server is designed for seamless integration with Claude Desktop and other MCP-compatible clients, enabling natural language interactions with media libraries."
berry-street,berrystreet-metabase-mcp,1,,"The Metabase MCP server enables AI assistants to interact with Metabase analytics platforms, providing access to dashboards, questions/cards, and databases through a structured interface. Developed by Berry Street, it implements tools for listing and executing Metabase queries, viewing dashboard cards, and running SQL queries against Metabase databases. The server authenticates with Metabase using credentials provided as environment variables and exposes resources via metabase:// URIs with JSON content types for structured data access. This implementation is particularly valuable for data analysis workflows where users need to retrieve and analyze information from their Metabase instances directly within AI assistant conversations."
bestjane,mcp-coingecko-server,2,,"MCP CoinGecko Server provides a bridge to the CoinGecko cryptocurrency data API, enabling access to real-time and historical cryptocurrency market information. Built with Python using FastAPI and the pycoingecko library, this server exposes cryptocurrency data as MCP resources, making it valuable for AI assistants that need to retrieve current prices, market trends, or historical data about cryptocurrencies. The implementation supports deployment through the MCP CLI tool and is designed for use cases like financial analysis, investment research, and tracking cryptocurrency market performance."
beverm2391,chain-of-thought-mcp-server,7,,"A Chain of Thought MCP server that exposes raw reasoning tokens from large language models through Groq's API. The server captures and streams the model's thinking process by intercepting content within <think> tags, allowing AI assistants to reveal their step-by-step reasoning before providing final answers. Built with FastMCP and supporting models like Qwen and DeepSeek, it enables more transparent AI interactions where users can see how the model arrives at conclusions rather than just receiving the final output."
beyond-network-ai,beyond-mcp-server,11,,"Beyond MCP Server provides standardized access to social platform data, currently supporting Farcaster (via Neynar API) with placeholders for Twitter and Telegram integration. It implements a flexible architecture with both stdio and HTTP/SSE transports, making it compatible with Claude Desktop. The server exposes resources and tools for searching content, retrieving user profiles, analyzing threads, and exploring trending topics across platforms. Built with extensibility in mind, it allows easy addition of new platform providers and is particularly valuable for AI assistants that need to incorporate social media context into conversations."
hedera-dev,mirrornode-mcp-server,1,,"Hedera MCP Server provides a bridge to the Hedera Testnet Mirror Node API, dynamically converting Zodios API endpoints into MCP tools using Server-Sent Events (SSE) transport. Built by bguiz, this implementation enables programmatic interaction with Hedera blockchain data by automatically generating tools for querying accounts, transactions, tokens, and other network information with robust Zod-based validation."
bharathvaj-ganesan,whois-mcp,13,,A Model Context Protocol (MCP) server implementation for WHOIS domain lookup service.
gnosis23,apple-mcp-server,1,,"Apple MCP Server provides a lightweight server for controlling macOS applications via AppleScript, with built-in tools for managing Spotify playback and opening iTerm. Developed by bhwang, this implementation enables programmatic interaction with specific macOS apps through simple, predefined commands like playing music or launching terminal windows. The server uses the Model Context Protocol SDK to expose these system control capabilities as callable tools."
kryzo,mcp-bibliotheque_nationale_de_france,3,,"Bibliothèque Nationale de France MCP server provides access to the Gallica digital library through a structured API client. It enables searching for books, periodicals, manuscripts, images, and other documents using natural language queries or specific metadata fields like title, author, and subject. The implementation includes a sequential reporting tool that helps generate comprehensive research reports with proper citations, automatically searching for relevant sources and organizing them into structured sections. Particularly valuable for academic research, historical analysis, and educational content creation that requires access to France's national library collections."
biegehydra,bifrostmcp,84,,This MCP server implementation provides C# language features via the Model Context Protocol. It integrates with the C# extension for Visual Studio Code and exposes capabilities like finding symbol references across a codebase. The server runs on port 8003 and is designed to enhance AI-assisted coding workflows for C# projects.
bigcodegen,mcp-neovim-server,118,2415,"This Neovim MCP server, developed by Derek White (bigcodegen), integrates Claude Desktop with Neovim using the Model Context Protocol and the official neovim/node-client library. It leverages Vim's native text editing commands to create a lightweight code assistance layer, allowing AI to interact directly with Neovim sessions. The server connects to a running Nvim instance, providing tools to view and edit buffers, execute Vim commands, and retrieve editor status. By abstracting Neovim's complexities, it enables AI assistants to seamlessly work within the familiar Vim environment. This implementation is particularly useful for developers seeking AI-enhanced coding assistance within their preferred text editor, facilitating tasks such as code review, refactoring, and context-aware suggestions without leaving the Neovim ecosystem."
bigcoder84,mcp-excel-server,3,,"MCP Excel Server provides a bridge between AI assistants and Excel files, enabling reading from and writing to spreadsheets through a Spring Boot application. Developed by bigcoder84, this server exposes Excel operations as MCP tools that handle structured data exchange with standardized request/response patterns. The implementation includes services for both reading data from Excel files (returning content as a list of key-value maps) and writing data to Excel files, making it particularly useful for data analysis, reporting, and automated document generation workflows."
bigsweetpotatostudio,hyper-mcp-browser,2,3606,"Hyper MCP Browser provides a browser automation interface for AI assistants, enabling web browsing capabilities through Puppeteer and Chrome. Built with TypeScript and the Model Context Protocol SDK, it allows AI systems to programmatically navigate websites, extract content, and interact with web pages. The implementation uses a stdio server transport for communication and includes evaluation modules for handling different content types, making it particularly useful for web scraping, content analysis, and automated testing workflows."
bigsy,clj-kondo-mcp,1,,"The clj-kondo MCP server provides linting capabilities for Clojure, ClojureScript, and EDN files through a standardized interface. It exposes a single tool that runs the popular clj-kondo static analyzer on specified files, supporting custom configuration directories and returning detailed linting results including warnings about unused namespaces, private variables, and other code quality issues. Built with TypeScript using the Model Context Protocol SDK, this implementation enables AI assistants to perform code quality checks on Clojure codebases, making it particularly valuable for Claude code and desktop environments where built-in linting capabilities are not available."
bigsy,clojars-mcp-server,4,,"This Clojars MCP server, developed by Bigsy, enables AI assistants like Claude to retrieve the latest version information for Clojars dependencies. Built in TypeScript, it provides a focused tool for querying the Clojars API to get up-to-date version data for any Maven artifact in the Clojars repository. The implementation stands out by offering a simple, targeted interface specifically for Clojars version lookups. By connecting AI capabilities with Clojars dependency information, this server allows AI systems to programmatically check and suggest library versions for Clojure projects. It is particularly useful for building AI-powered tools that assist with Clojure dependency management, automated project updates, and compatibility checks across Clojure libraries."
bigsy,maven-mcp-server,6,,"This Maven Dependencies MCP server, developed by Bill Hedworth, provides tools for verifying and retrieving Maven dependency versions from the Maven Central Repository. It offers functions to check the latest version of a dependency and verify if specific versions exist. The server uses the Maven Central REST API to fetch real-time dependency information, ensuring up-to-date results. By connecting AI capabilities with Maven dependency management, this implementation enables assistants to validate and update project dependencies, ensuring compatibility and security. It is particularly useful for applications requiring automated dependency checks, version upgrades, or any scenario where an AI system needs to reason about and manage Maven dependencies in software projects."
billduke13,code-explainer-mcp,3,,"This MCP server implementation provides a code explanation service for Cloudflare Workers. It analyzes source code to generate architecture diagrams, identify core functionality, and break down components across multiple programming languages. The server uses bearer token authentication for security and is designed for use cases requiring automated code analysis, documentation generation, or AI-assisted code comprehension. It leverages Cloudflare's edge computing platform for efficient processing and deployment."
billster45,mcp-chatgpt-responses,5,,"ChatGPT MCP Server provides a bridge between Claude Desktop and OpenAI's ChatGPT API through the OpenAI Responses API for simplified conversation management. It offers two main tools: standard ChatGPT interactions and web search-enabled queries, both supporting conversation continuity through response IDs. The server handles various response structures, extracts text content appropriately, and includes comprehensive error handling. Particularly valuable for users who want to leverage ChatGPT's capabilities directly within Claude Desktop conversations, especially when needing to compare responses between different AI systems or utilize ChatGPT's web search functionality."
bimgeek,speckle-mcp,9,,"This Speckle MCP server enables AI assistants to interact with Speckle, a version control platform for 3D design and AEC data. Built with FastMCP and the SpecklePy client library, it provides tools for listing projects, retrieving project details, searching projects by name or description, and accessing model versions. The implementation requires a Speckle token for authentication and connects to the Speckle server (defaulting to app.speckle.systems), making it valuable for architects, engineers, and construction professionals who want to query and analyze their Speckle project data through natural language."
binalyze,air-mcp,3,3442,"Binalyze AIR MCP Server provides a bridge to the Binalyze AIR digital forensics platform, enabling access to endpoint data, cases, and investigation tools. This TypeScript implementation offers tools for listing assets, organizations, users, cases, tasks, policies, acquisition profiles, and triage rules through a secure API connection. The server validates API tokens, handles organization-specific filtering, and formats responses for easy consumption, making it valuable for security teams who need to query forensic data, monitor endpoint status, or manage digital investigations through AI assistants."
bingal,fastdomaincheck-mcp-server,4,,"FastDomainCheck MCP Server provides a bulk domain registration status checking service that enables AI tools like Claude to verify domain availability through WHOIS and DNS queries. Developed by Bingal, it supports checking up to 50 domains simultaneously with dual verification methods for reliability, handling internationalized domain names (IDN), and providing concise registration status results. The implementation is optimized for performance with reasonable timeouts and fallback mechanisms, making it ideal for domain research, brand protection monitoring, and availability checking workflows without leaving the conversation interface."
mcp-servers,mcp-server-bing-search,266,,
zizzfizzix,mcp-server-bwt,2,,"MCP server for Bing Webmaster Tools that provides AI assistants like Claude and Cursor with access to the complete Bing Webmaster API functionality. Developed by Kuba Serafinowski, this Python implementation creates a bridge between AI assistants and Bing's site management, URL submission, traffic analysis, crawling, keyword analysis, and content management capabilities. The server dynamically wraps all API methods from the underlying bing-webmaster-tools library as MCP tools while preserving their signatures and documentation, making it particularly useful for SEO professionals who want to manage their Bing Webmaster accounts through natural language interactions."
birdsmith,gauntlet-incept-mcp,1,,"Gauntlet-Incept is an MCP server implementation for generating high-quality educational content tailored to students' knowledge levels and interests. It integrates with a QTI service for question and test item handling, an LLM service for content generation, and a PostgreSQL database for data storage. The system is designed to streamline the creation of personalized learning materials, making it particularly useful for educators, e-learning platforms, and educational content creators."
bitrefill,bitrefill-mcp-server,3,668,"Bitrefill MCP Server enables AI assistants to search for and retrieve information about gift cards, mobile refills, eSIMs, and digital services available on Bitrefill's platform. Built by Bitrefill, this TypeScript implementation provides tools for searching products by query, country, or category, fetching detailed product information, and browsing available product categories. The server communicates via stdio transport, making it compatible with Claude Desktop integration, and includes comprehensive error handling for API requests. It's particularly valuable for users who want to explore Bitrefill's cryptocurrency-based digital services without leaving their conversation interface."
bitrise-io,bitrise-mcp,21,,"Bitrise MCP Server provides a bridge to the Bitrise CI/CD platform API, enabling AI assistants to manage mobile app development workflows. Developed by Bitrise, this Python implementation offers tools for app management, build operations, artifact handling, and release management across iOS and Android platforms. The server organizes functionality into logical API groups that can be selectively enabled, and integrates with Claude Desktop through a simple configuration process. It's particularly valuable for developers who need to monitor builds, trigger workflows, manage testing groups, or handle app distribution without leaving their AI assistant interface."
bitscorp-mcp,mcp-adjust,1,,"The Adjust MCP server provides a bridge to the Adjust API, allowing AI assistants to query marketing analytics data from Adjust campaigns. Developed by Alexandr Korsak at Bitscorp, this TypeScript implementation enables users to access reports, metrics, and performance data through natural language queries. The server requires an Adjust API key for authentication and can be installed via Smithery or run locally. It's particularly useful for marketing teams who need quick access to campaign performance data, such as checking install numbers for specific campaigns without leaving their AI assistant interface."
bitscorp-mcp,mcp-ffmpeg,12,,"MCP FFmpeg Video Processor enables AI assistants to manipulate video files through FFmpeg, offering capabilities to resize videos to different resolutions (360p, 480p, 720p, 1080p) and extract audio in various formats (MP3, AAC, WAV, OGG). Developed by Bitscorp, this Node.js implementation can be installed via Smithery for Claude Desktop or configured manually for other clients. The server processes uploaded videos temporarily and stores outputs in a dedicated directory, making it ideal for workflows requiring video manipulation without leaving the conversation interface."
bitteprotocol,mcp,5,,"Bitte-mcp-proxy serves as a bridge between AI assistants and the Bitte AI ecosystem, enabling access to AI agents and tools from the Bitte registry. Built with the MCP-SDK server framework, it provides four key tools: retrieving agent listings, fetching specific agent details, accessing available tools, and executing agents with user inputs. The implementation uses Server-Sent Events for real-time communication and authenticates with the Bitte API using an API key, making it ideal for workflows that require leveraging specialized AI agents from the Bitte marketplace without leaving the conversation interface."
bjoernbonk,letsbonk_mcp_server,30,,"The bonk-mcp server implements Solana blockchain functionality for the LetsBonk launchpad, enabling users to launch and trade tokens on letsbonk.fun. Built by letsbonk-ai, it provides a token launcher tool that handles the entire token creation process including IPFS metadata preparation, image uploading, and Raydium launchpad integration. The server requires a Solana keypair and RPC endpoint for authentication, making it particularly valuable for developers and users who want to create and manage meme tokens on Solana without dealing with the complexities of blockchain transactions directly."
blacktop,mcp-say,5,,"MCP-Say is a server implementation that provides text-to-speech capabilities through both native system voices and ElevenLabs integration. Developed by blacktop, it exposes two main tools: 'say' for using local system voices and 'elevenlabs' for cloud-based high-quality voice synthesis. The server handles JSON-RPC requests following the MCP protocol, with safeguards against command injection attacks as evidenced by the test files. Built with Go and leveraging the beep audio library, it's particularly valuable for AI assistants that need to vocalize responses or generate audio content without requiring users to leave their conversation interface."
blackwhite084,playwright-plus-python-mcp,96,,"This Playwright-powered MCP server, developed by YUNYING, enables AI assistants to interact with web browsers through the Model Context Protocol. Built in Python, it provides a bridge between MCP clients and Playwright's browser automation capabilities, allowing operations like navigation, screenshots, clicks, and JavaScript execution. The implementation leverages libraries such as MCP for protocol handling and Playwright for browser control. By abstracting browser interactions into MCP-compatible tools, it allows AI systems to easily perform web automation tasks without directly handling browser complexities. This server is particularly useful for scenarios requiring AI-driven web scraping, testing, or content generation, facilitating use cases such as automated data collection, UI testing, and dynamic web content creation."
blake365,macrostrat-mcp,0,,"This Macrostrat MCP server, developed by Blake Morgan, integrates the Macrostrat API with the Model Context Protocol, enabling AI assistants to access and analyze geological data. Built with TypeScript and leveraging the MCP SDK, it provides a standardized interface for querying stratigraphic information, geological maps, and related datasets. The implementation focuses on efficient data retrieval and processing, making it particularly valuable for applications in earth sciences, resource exploration, and environmental studies. By bridging the gap between geological databases and AI systems, this server facilitates use cases such as automated stratigraphic analysis, geological risk assessment, and integration of geological data into broader analytical workflows."
blake365,usgs-quakes-mcp,1,,"This USGS Earthquakes MCP server, developed by Blake Morgan, provides real-time access to earthquake data from the United States Geological Survey. Built with TypeScript and Node.js, it leverages the Model Context Protocol SDK to offer a standardized interface for querying and analyzing seismic events. The server implements robust error handling and data validation using Zod, ensuring reliable information retrieval. By abstracting USGS API interactions, it enables AI systems to easily process and interpret earthquake data. This implementation is particularly valuable for applications in disaster response, geological research, and risk assessment, facilitating use cases such as early warning systems, seismic trend analysis, and automated reporting of significant events."
blankcut,kubernetes-mcp-server,6,,"Kubernetes Claude MCP Server integrates Claude's AI capabilities with Kubernetes, ArgoCD, and GitLab to provide AI-powered analysis and troubleshooting for GitOps workflows. Built with Go, it collects comprehensive information about Kubernetes resources, correlates data across systems, and presents structured context to Claude for intelligent analysis. The server features a RESTful API for querying resources, analyzing deployments, and troubleshooting issues, making it particularly valuable for DevOps teams seeking to understand complex Kubernetes environments, identify root causes of failures, and receive actionable recommendations for GitOps pipeline improvements."
blazickjp,arxiv-mcp-server,1011,192921,"This ArXiv MCP server, developed by blazickjp, provides an interface for AI assistants to search and analyze academic papers from the arXiv repository. It enables precise querying with filters like date ranges and categories, as well as full-text access to papers. Built with an asynchronous architecture in Python, the implementation handles paper downloads, local caching, and exposes a standardized MCP interface. By bridging AI models and academic literature, this server allows AI systems to engage deeply with scientific research in fields like computer science and physics. It is particularly useful for AI assistants needing to conduct literature reviews, answer technical questions, or provide summaries of recent developments in specific research areas."
blazickjp,shell-mcp-server,10,4797,"This Shell MCP server, developed by Joe Blazick, enables AI assistants to interact with the local shell environment. It leverages the MCP library to provide a standardized interface for executing shell commands, managing files and directories, and retrieving system information. The server abstracts the complexities of shell interactions, offering a set of high-level operations that simplify task automation and system management. By connecting AI systems with the shell, this implementation facilitates tasks such as file manipulation, process management, and system configuration. It is particularly useful for AI applications requiring direct interaction with the operating system, such as automated system administration, DevOps tools, or any AI that needs to perform local system operations."
blazickjp,web-browser-mcp-server,28,10040,"This web browser MCP server, developed as an open-source project, enhances AI applications with advanced web browsing capabilities. It integrates with popular Python libraries like BeautifulSoup and requests to provide a robust interface for web scraping, content extraction, and navigation. The server abstracts the complexities of HTTP requests and HTML parsing, offering AI assistants streamlined operations for fetching web pages, extracting specific elements, and following links. By connecting AI systems with real-time web data, this implementation enables dynamic information retrieval, content analysis, and web-based task automation. It is particularly useful for applications requiring up-to-date online information, such as research assistants, content aggregators, or any AI system that needs to interact with web content programmatically."
HEAD,CG-MCP,3,,"CoinGecko API Server provides a Node.js Express server that interfaces with the CoinGecko cryptocurrency data API through JSON-RPC 2.0. It implements essential cryptocurrency data retrieval methods including price lookups, market data, trending coins, and global statistics. The server automatically detects API key presence to switch between free and Pro API endpoints, making it particularly valuable for AI assistants that need real-time cryptocurrency market information without requiring users to implement complex API interactions themselves."
blockscience,koi-mcp,1,,"KOI-MCP Integration enables agent personality exchange through a distributed network architecture, connecting AI agents with distinct traits and capabilities. Built on the KOI-net protocol, it features a coordinator node that maintains a registry of agent personalities and individual agent nodes that expose their traits as callable tools through MCP-compatible endpoints. The implementation supports dynamic trait updates, secure personality exchange, and automatic discovery of agent capabilities, making it ideal for creating heterogeneous agent networks where specialized AI personalities can collaborate and share their unique capabilities."
block,vscode-mcp,50,6973,"The VS Code MCP Server enables AI assistants to interact directly with VS Code through a bidirectional communication channel. It provides tools for file diffing with user approval, opening files and projects, executing shell commands in VS Code's terminal, and retrieving information about active editor tabs. The implementation consists of two main components: a server that handles MCP protocol communication and a VS Code extension that provides native integration features. This allows AI agents to perform code modifications, navigate projects, and execute commands without leaving the conversation interface, making it particularly valuable for collaborative coding sessions and AI-assisted development workflows."
blue7wings,jira-mcp-server,0,,"JIRA MCP Server integrates JIRA services with MCP, allowing AI assistants to fetch JIRA issue content for use with LLMs. Built with Go and leveraging the mcp-go library, it provides a tool to retrieve issue descriptions by ID from JIRA instances. The server requires configuration of JIRA credentials (API key, email, and URL) and exposes an SSE endpoint at localhost:8080/sse that MCP clients can connect to. Currently focused on retrieving custom field data (specifically customfield_10330), this early implementation serves as a foundation for more comprehensive JIRA integration capabilities."
lallen30,mcp-remote-server,1,,"This MCP remote server implementation provides access to BluestoneApps coding standards and code examples over HTTP. It uses FastAPI to expose a JSON-RPC 2.0 endpoint and Server-Sent Events (SSE) for streaming responses, with support for HTTP Basic Authentication. The server offers tools for retrieving React Native development standards (project structure, API communication, component design, state management) and code examples (components, hooks, services, screens, themes). Designed for deployment via Docker, it can be accessed locally or remotely through a domain (mcp.betaplanets.com), enabling seamless integration with Windsurf/Cascade clients."
blurrah,mcp-graphql,120,,"This MCP server, developed by an unnamed author, provides a GraphQL interface for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for querying GraphQL servers. The implementation currently uses a mock schema response for development purposes, but is designed to connect to actual GraphQL endpoints. It abstracts the complexities of GraphQL communication, allowing AI systems to easily interact with GraphQL APIs. This server is particularly useful for applications requiring flexible data querying and manipulation, enabling AI assistants to access and analyze structured data from various GraphQL sources. Its generic design allows it to work with any GraphQL schema, making it versatile for different data-driven use cases."
bmorphism,anti-bullshit-mcp-server,17,,"This Anti-Bullshit MCP server, developed by Teglon Labs, provides tools for analyzing claims, validating sources, and detecting manipulation using multiple epistemological frameworks. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers empirical, responsible, harmonic, and pluralistic approaches to evaluate information. The implementation focuses on rigorous fact-checking and critical thinking, making it accessible for AI models to assess the credibility and implications of various claims. It's particularly useful for tasks like academic research validation, media literacy enhancement, or combating misinformation in digital content, enabling AI assistants to apply nuanced epistemological analysis without requiring deep expertise in each framework."
bmorphism,babashka-mcp-server,13,,"This Babashka MCP server, developed as an open-source project, enables AI assistants to interact with Babashka, a native Clojure interpreter for scripting. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides tools for executing Babashka code, caching recent command results, and accessing command history through standardized MCP endpoints. The implementation features configurable command timeouts and a roadmap for self-hosting in Babashka itself. By connecting AI capabilities with Babashka's scripting power, this server allows for dynamic code execution and interaction with Clojure ecosystems. It is particularly useful for scenarios involving Clojure-based data processing, system automation, or building AI-assisted development tools for Clojure projects."
bmorphism,krep-mcp-server,0,,"Krep MCP Server provides a high-performance string search utility that wraps the krep binary, offering significantly faster pattern matching than traditional tools like grep. It exposes search functionality through both HTTP endpoints and the Model Context Protocol, automatically selecting optimal search algorithms (KMP, Boyer-Moore-Horspool, or Rabin-Karp) based on pattern length and leveraging hardware acceleration when available. The server includes dynamic CPU core detection for optimal thread allocation, supports both file and string searching modes, and integrates with Claude Desktop and VSCode's Cline extension, making it valuable for developers needing efficient pattern matching within AI assistant workflows."
bmorphism,marginalia-mcp-server,1,,"This Marginalia MCP server, developed by Barton Rhodes, integrates Marginalia Search into MCP-compatible systems, enabling AI assistants to discover non-commercial and independent web content. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers a simple search tool that returns URLs, titles, and descriptions focused on lesser-known websites and unique content. The server is designed for easy installation in Claude Desktop, abstracting Marginalia Search API interactions into a standardized MCP interface. This implementation is particularly useful for researchers, writers, and curious individuals seeking to explore the independent web, facilitating use cases such as content discovery, trend analysis, and alternative perspective gathering."
bmorphism,say-mcp-server,13,,"This MCP server, developed by Barton Rhodes, provides text-to-speech functionality using macOS's built-in 'say' command. It offers extensive customization options for voice, rate, volume, and emphasis, allowing for dynamic speech modulation. The server integrates seamlessly with other MCP tools, enabling scenarios like reading search results or YouTube transcripts aloud. It differentiates itself through its focus on macOS-specific capabilities and its support for background speech processing. This implementation is particularly useful for creating audio content, enhancing accessibility, or adding voice output to various applications and workflows on macOS systems."
bmorphism,slowtime-mcp-server,2,,"This MCP server, developed for managing slow time intervals, integrates with drand for randomness and tlock-js for time-locked encryption. Built with TypeScript and leveraging DuckDB for efficient data handling, it offers tools for creating and managing time-based events with cryptographic guarantees. The server stands out by combining distributed randomness with time-locked encryption, enabling secure scheduling and reveal of information at predetermined future times. This implementation is particularly useful for applications requiring trusted delays, such as sealed-bid auctions, scheduled announcements, or time-capsule services, where information must remain confidential until a specific future time."
bmorphism,vibespace-mcp-go-ternary,0,,"Vibespace MCP Go Ternary provides real-time streaming of world moments and vibes through NATS, enabling multiplayer experiences with balanced ternary data representation. The implementation features robust access control with configurable sharing settings, rate limiting to prevent abuse, and comprehensive test coverage for reliability. It exposes JSON-RPC methods for resource reading and tool calling, with specialized streaming tools for starting/stopping streams, checking status, and updating configurations. This server is particularly valuable for collaborative virtual environments where users need to share contextual information with varying levels of privacy control."
bneil,mcp-memory-pouchdb,3,,"MCP Memory PouchDB provides a knowledge graph-based memory system for AI assistants to store and retrieve information about entities, their relationships, and observations. Built by bneil, it uses PouchDB with a memory adapter for primary storage and maintains a JSON file backup, offering tools for creating, reading, updating, and deleting graph elements through a comprehensive API. The implementation includes robust error handling with retry mechanisms, supports both in-memory and file-based persistence, and is particularly valuable for maintaining conversational context across interactions, enabling assistants to remember user preferences, relationships, and historical information."
bochaai,bocha-search-mcp,8,,"Bocha Search MCP provides integration with Bocha, a Chinese search engine for AI, enabling AI assistants to perform web searches and retrieve enhanced search details from billions of documents. Developed by kunkun, this Python-based server implementation offers two primary tools: bocha_web_search for retrieving standard search results including titles, URLs, summaries, and publication dates; and bocha_ai_search for semantic search with additional structured modal cards from vertical domains like weather, news, wikis, healthcare, and more. The server requires a Bocha API key and handles authentication, request formatting, and error handling, making it particularly useful for applications needing multilingual search capabilities with rich structured data."
boldcommerce,magento2-mcp,13,,"The Magento 2 MCP Server connects Claude and other AI assistants to Magento 2 e-commerce platforms through a standardized interface. Developed by Bold Commerce, it provides tools for querying product information, customer data, order statistics, and revenue metrics with support for natural language date expressions and geographical filtering. The server handles authentication with Magento's REST API, formats responses for readability, and includes comprehensive error handling. This implementation is particularly valuable for business users who need quick access to e-commerce data through conversational interfaces without navigating complex admin screens."
boorich,mcp-human-loop,9,,"This Human Loop MCP Server, developed using TypeScript and the Model Context Protocol SDK, facilitates coordination between AI agents and human operators. It provides a standardized interface for managing human-in-the-loop processes, enabling seamless integration of human judgment into AI workflows. The server's modular structure and use of modern JavaScript features make it adaptable for various AI-assisted tasks. It is particularly suited for applications requiring human oversight or intervention in AI decision-making processes, such as content moderation, complex problem-solving, or ethical AI implementations where human values need to be incorporated into AI systems."
b-open-io,bsv-mcp,11,6687,"BSV-MCP provides Bitcoin SV blockchain integration tools for AI assistants, enabling wallet operations, transaction management, and ordinals (NFT) interactions. Built with Bun and TypeScript, it offers a secure environment where private keys are managed locally while exposing capabilities like sending BSV, creating and transferring ordinals, purchasing marketplace listings, and exploring blockchain data. The implementation includes market fee handling, royalty payments for NFT transactions, and comprehensive BSV-20/BSV-21 token support, making it valuable for cryptocurrency applications, digital asset management, and blockchain data analysis."
boristopalov,spotify-mcp,0,2135,"Spotify-MCP connects Claude with Spotify's API, allowing users to control music playback, search for tracks/albums/artists/playlists, get detailed information about music content, and manage the Spotify queue directly within conversations. Built by Boris Topalov on top of the spotipy-dev API, this implementation requires Spotify Premium and API credentials from the Spotify Developer Dashboard. The server can be run locally using stdio or deployed as a Docker container, making it ideal for seamless music control and discovery without leaving the Claude interface."
bornpresident,volatility-mcp-server,13,,This project bridges the powerful memory forensics capabilities of the Volatility 3 Framework with Large Language Models (LLMs) through the Model Context Protocol (MCP). It allows you to perform memory forensics analysis using natural language by exposing Volatility plugins as MCP tools that can be invoked directly by Claude or other MCP-compatible LLMs.
bourbonkk,k8s-pilot,10,,"K8s-pilot is a Kubernetes management tool that enables AI assistants to interact with Kubernetes clusters through a comprehensive set of tools. Built with Python and the FastMCP framework, it provides capabilities for managing contexts, namespaces, pods, deployments, services, and other Kubernetes resources. The implementation includes a client cache to optimize kubeconfig loading, supports context-aware operations with automatic namespace detection, and offers both resource listing and CRUD operations for all major Kubernetes object types, making it valuable for DevOps teams seeking to streamline cluster management through AI assistance."
box-community,mcp-server-box,18,,"MCP Server Box integrates with the Box API to enable AI assistants to perform operations on Box files and folders, including search, text extraction, AI-based querying, and structured data extraction. Built by the Box community, it leverages Box's Claude AI capabilities to analyze documents, extract specific information from files, and answer questions about content. The server exposes tools for authenticating with Box, searching for files by name or content, reading file contents, asking AI about documents, locating folders, extracting structured data, and listing folder contents - making it particularly valuable for workflows that require document analysis, information extraction, or content management within Box."
bracketbotcapstone,bracketbot-mcp,0,,"The Multi-Robot Control MCP server enables AI agents to simultaneously control multiple robots through existing FastAPI robot control servers. Built with Python using FastMCP, it provides a unified interface for controlling robot movement (forward, backward, left, right), playing sounds through speakers, accessing camera images, and retrieving robot status information. The implementation includes port specification to target specific robots, precise velocity control, and comprehensive error handling. This server is particularly valuable for robotics applications requiring coordinated control of multiple robots through a conversational AI interface, allowing seamless integration with the Claude desktop client which automatically runs the MCP server."
bob-lance,grok-mcp,1,99,"Grok MCP provides a direct integration with Grok AI's powerful language and vision capabilities, exposing three primary tools: chat completion, image understanding, and function calling. Built by Braden Olmstead, this TypeScript-based server enables developers to interact with Grok's latest models through a standardized MCP interface, with a focus on seamless AI interaction across different use cases like text generation, image analysis, and intelligent function invocation."
bob-lance,instagram-engagement-mcp,8,253,"Instagram Engagement MCP provides tools for analyzing Instagram interactions, extracting demographic insights, and identifying potential leads through a private Instagram API integration. Built by Braden Olmstead, the server enables detailed engagement analysis including sentiment tracking, account comparisons, and lead generation by processing comments, user profiles, and post metrics. Particularly useful for marketing professionals and social media strategists seeking data-driven insights from Instagram interactions."
bradfair,mcp-cline-personas,21,,"This MCP server, developed by Brad Fair, implements a persona management system for Cline using shared components and templates. Built with TypeScript, it provides tools for creating, updating, and activating personas defined in `.clinerules` files. The implementation features component reusability, mustache-style variable substitution in templates, dependency validation, and version tracking for both components and personas. By abstracting persona management into standardized MCP endpoints, it allows AI systems to dynamically adjust their behavior and responses. This server is particularly useful for scenarios requiring flexible AI personality management, such as customer support chatbots, interactive storytelling applications, or personalized AI assistants that need to adapt to different user preferences or contexts."
braffolk,mcp-summarization-functions,30,1490,"This MCP implementation, developed by Remi Sebastian Kits, provides summarized output from various actions to avoid token consumption and crashes. It integrates with the Anthropic AI SDK and uses environment variables for configuration. Built with TypeScript and designed for Node.js 22+, it leverages modern JavaScript features and practices. The implementation is well-suited for developers working on AI projects that require efficient token usage, particularly when interfacing with large language models or processing extensive datasets. Its focus on summarization makes it valuable for applications needing to condense large amounts of information quickly and effectively."
ssdeanx,branch-thinking-mcp,1,,"Branch Thinking is an MCP server that enables AI assistants to manage multiple lines of thought simultaneously through a branch-based navigation system. Built on the sequential-thinking concept, it extends functionality by supporting branch creation, cross-references between related thoughts, automatic insight generation, and priority tracking based on confidence and connections. The implementation provides commands for listing branches, focusing on specific thought paths, and viewing branch history, making it particularly valuable for complex reasoning tasks like adversarial thinking, scientific method application, design pattern exploration, and trade-off analysis."
brandon-butterwick,mrp_calculation,0,,"The MRP Calculator MCP server enables AI assistants to perform Material Requirements Planning calculations based on inventory data, forecasts, and delivery schedules. It exposes a single tool, calculate_order_need, which takes inputs including SKU location, current balance, open orders, delivery schedule, and forecast periods to determine optimal order quantities. The implementation features comprehensive input validation, batch size optimization, and detailed calculation steps with projected inventory balances. Built with TypeScript and the Model Context Protocol SDK, it handles data processing through a standardized interface, making it particularly valuable for supply chain managers and inventory planners who need to make data-driven ordering decisions without switching to specialized MRP software."
13bm,ghidramcp,39,,"GhidraMCP enables AI assistants to interact with Ghidra's binary analysis capabilities through a WebSocket server interface. The implementation provides tools for retrieving decompiled code, analyzing functions, exploring imports/exports, and performing security analysis of binaries, with a focus on natural language queries about program behavior. Built with Java and integrated directly into Ghidra's plugin architecture, it features automatic server startup, concurrent client handling, and contextual binary analysis - making it particularly valuable for reverse engineers who want to leverage AI assistance while working with complex binaries."
anath2,research-llama,0,,"Research-Llama provides a Brave Search integration through MCP, enabling AI assistants to perform both web and local business searches. The server implements rate limiting to respect Brave API constraints and offers two primary tools: web search for general information queries and local search for finding businesses, restaurants, and other physical locations with detailed information including ratings, hours, and descriptions. Built with FastMCP, it's particularly useful for information retrieval tasks that require up-to-date web content or location-based data."
brendancopley,mcp-chain-of-draft-prompt-tool,8,,"MCP Chain of Draft Prompt Tool is a server implementation that enables structured, multi-step prompt workflows through a chain execution system. Built by Brendan Copley, it organizes prompts into categories like research, analysis, and development, with each prompt stored as a markdown file containing system messages and user templates. The server supports both individual prompts and complex chains where outputs from one step become inputs for subsequent steps, making it particularly valuable for workflows requiring progressive refinement such as deep research, code review, and documentation generation."
brevdev,brev-mcp,3,,"This Brev MCP server implementation, developed by tmonty12, provides a bridge between the Model Context Protocol and Brev's cloud development platform. It enables AI assistants to interact with Brev resources and operations through natural language commands. Built with Python 3.10+ and leveraging the Brev CLI's authentication, it offers functionality for managing Brev workspaces, deployments, and other cloud resources. The implementation stands out by focusing specifically on Brev's ecosystem and tooling. It is particularly useful for developers and DevOps teams looking to streamline their Brev workflows, automate cloud resource management, or integrate AI-assisted operations into their existing Brev-based projects."
briancusack,mcpsharepoint,13,,"The SharePoint MCP server provides AI assistants with direct access to organizational SharePoint content through Microsoft Graph API integration. Developed by Brian Cusack, this TypeScript implementation exposes SharePoint documents, folders, and sites as resources while offering tools for document searching, content retrieval, and folder exploration. The server authenticates with Microsoft Entra using client credentials and translates requests into appropriate Graph API calls, returning formatted results. It includes specialized prompts for common tasks like document summarization and relevant content discovery, making it particularly valuable for users who need to access, search, and analyze corporate knowledge stored in SharePoint without leaving their AI assistant interface."
briandconnelly,mcp-server-ipinfo,18,,"This MCP server, developed by Brian Connelly, provides IP geolocation services using the ipinfo.io API. Built with Python and leveraging the Model Context Protocol, it offers detailed location and network information for any IP address. The implementation focuses on delivering clean, formatted output for AI agents like Claude, including data such as city, region, country, coordinates, timezone, and organization. It requires an ipinfo.io API token for authentication. The server is particularly useful for applications requiring location-based insights, enabling use cases such as user location verification, content localization, and network analysis without complex API integrations."
brianellin,bsky-mcp-server,14,,"Bluesky MCP Server provides a bridge between Claude and the Bluesky social network, enabling direct interaction with Bluesky's features through conversational AI. Built by Brian Ellin, this implementation authenticates with Bluesky using environment variables and offers tools for browsing timelines, creating posts, searching content, managing follows, and interacting with custom feeds and lists. The server formats Bluesky's complex post structures into readable text, handling various content types including quotes, reposts, images, and external links, making it particularly valuable for users who want to monitor or engage with their Bluesky network without leaving their AI assistant conversation."
brian-knows,mcp-server-brian,1,,"A specialized MCP server that uses the Brian AI SDK to retrieve transaction data from blockchain addresses via natural language prompts. Built with TypeScript and Bun, it provides a simple tool for extracting blockchain transaction information by translating user prompts into structured data retrieval, with flexible support for specifying chain ID and address."
briankscheong,k8s-mcp-server,3,,"K8s MCP Server provides a bridge between AI assistants and Kubernetes clusters, enabling management of various Kubernetes resources through a standardized protocol. This Go implementation supports operations like listing and retrieving pods, deployments, services, and configmaps, as well as performing actions such as scaling deployments and viewing pod logs. The server connects to Kubernetes clusters using either in-cluster configuration or kubeconfig files, with support for read-only mode to prevent destructive operations. Particularly valuable for DevOps workflows, it allows AI assistants to help with cluster monitoring, troubleshooting, and resource management without requiring direct access to kubectl."
brian-mwangi-developer,africastalking-mcp,1,,"Africastalking MCP Server enables Claude Desktop to send SMS messages through Africa's Talking SMS API. Built with TypeScript, it provides a simple tool for sending text messages to recipients across African mobile networks, supporting features like dynamic message customization and sender ID configuration. The implementation requires configuration of API credentials in the claude_desktop_config.json file, making it particularly useful for applications needing to send notifications, alerts, or engage users via SMS directly from Claude Desktop."
brianshin22,youtube-translate-mcp,0,,"YouTube Translate MCP server enables AI assistants to access YouTube video transcripts, translations, and summaries through a simple API interface. Built by Brian Shin, it provides tools to retrieve transcripts, translate content to different languages, generate subtitles in SRT or VTT format, create video summaries, and search for specific content within videos. The implementation requires a YouTube Translate API key for authentication and can be run locally using stdio transport or deployed as a Docker container with SSE transport, making it ideal for research, content analysis, and multilingual video accessibility workflows."
bright8192,esxi-mcp-server,14,,"The ESXi MCP Server provides a RESTful API interface for managing VMware ESXi/vCenter environments through the Model Control Protocol. Built with Python using pyVmomi, it offers complete virtual machine lifecycle management including creation, cloning, deletion, and power operations, along with real-time performance monitoring of CPU, memory, storage, and network usage. The server implements API key authentication, SSL/TLS secure connections, and flexible configuration options via YAML, JSON, or environment variables, making it particularly valuable for automating VMware infrastructure management tasks through AI assistants or integration with other management tools."
luminati-io,brightdata-mcp,33,1541,"Bright Data MCP is an official server implementation that enables AI assistants to access public web data through various specialized tools. It integrates with Bright Data's web scraping infrastructure to provide capabilities like search engine scraping, webpage content extraction in markdown or HTML formats, and structured data retrieval from popular websites including Amazon, LinkedIn, and more. The implementation also offers optional browser control tools for interactive web navigation, allowing AI assistants to click elements, fill forms, and capture screenshots. This server is particularly valuable for use cases requiring real-time web data access, such as market research, product information retrieval, and answering questions based on current online information."
bro3886,mcp-memory-custom,3,,"This MCP server implementation provides a knowledge graph-based memory system for AI assistants. Developed by BRO3886, it offers tools for creating, managing, and querying a graph structure of entities, relations, and observations. The server supports features like custom memory file paths, timestamping, and advanced search capabilities. It's designed for use cases requiring persistent, structured memory for AI interactions, such as maintaining context in long-term conversations or building knowledge bases from user interactions."
brockreece,whimsical-mcp-server,7,,"This MCP server enables the creation of Whimsical diagrams programmatically through integration with Whimsical's API. It allows AI assistants to generate diagrams from Mermaid markup, returning both the Whimsical diagram URL and a base64 encoded image for iterative refinement. The server is particularly useful for creating complex system architecture diagrams, as demonstrated by the included example of the MCP architecture itself."
djyde,browser-mcp,71,343,"Browser MCP is a browser extension and server implementation that allows AI assistants to interact with the browser environment. It provides tools for retrieving page content as markdown, appending CSS styles to pages, searching browser history, and more. The implementation uses a WebSocket connection between the extension and server to enable real-time communication, with the server exposing these capabilities through the Model Context Protocol. This enables AI assistants to perform tasks like summarizing web pages, modifying page appearance, or retrieving browsing history data directly from the user's browser."
janspoerer,mcp_browser_use,3,,"Selenium-powered browser automation MCP server that enables AI agents to perform web interactions like navigation, clicking, form filling, and scrolling with minimal human supervision. Built to support complex web tasks through a flexible, robust set of tools that handle various edge cases in web element interaction, making it particularly useful for web scraping, testing, and automated browsing scenarios."
browserbase,mcp-server-browserbase,1416,,"This MCP server, developed by Browserbase, provides cloud browser automation capabilities for AI assistants like Claude. It leverages Browserbase's infrastructure along with Puppeteer and Stagehand (upcoming) to enable web interactions, data extraction, and JavaScript execution in a cloud environment. The server exposes a standardized interface for tasks such as navigating web pages, capturing screenshots, and monitoring console logs. By bridging AI capabilities with web automation, this implementation facilitates use cases like web scraping, automated testing, and dynamic content analysis. It is particularly useful for developers and researchers who need programmatic control over web browsers through natural language commands, enabling complex web-based workflows and data collection tasks."
browsercat,browsercat-mcp-server,1,1176,"BrowserCat MCP Server provides cloud-based browser automation capabilities through the Model Context Protocol, enabling LLMs to interact with web pages without local browser installation. Developed by BrowserCat, it offers tools for navigation, screenshot capture, element interaction (clicking, hovering, form filling), and JavaScript execution in a real browser environment. The server connects to BrowserCat's cloud browser service via WebSocket, authenticates with an API key, and exposes both console logs and screenshots as resources. This implementation is particularly valuable for AI assistants that need to perform web-based tasks like data extraction, form submission, or visual analysis of websites."
brunosantoslab,spring-mcp-bridge,1,,"Spring-MCP-Bridge is a Python tool that automatically converts Spring Boot REST applications into MCP servers, enabling AI assistants to interact with existing Spring APIs. Developed by Bruno Santos, it scans Java source code to identify controllers, endpoints, and data models, then generates a FastAPI server that acts as a bridge between MCP clients and the original Spring application. The tool preserves all endpoint functionality while adding the MCP schema layer, making it valuable for developers who want to expose their Spring Boot APIs to AI tools like Claude or Cursor without rewriting their backend services."
bryangsmith,mailchimpmcp,0,,"The MailchimpMCP server provides a bridge between AI assistants and Mailchimp's marketing platform API, enabling automated email campaign management. Built with Python using the FastMCP framework, it exposes tools for listing campaigns, creating new campaigns, sending campaigns, managing automation workflows, and starting automations. The implementation includes proper authentication handling with API keys stored in environment variables, comprehensive error handling for API responses, and a clean separation between the client and server components. This server is particularly useful for marketing workflows requiring campaign monitoring, automated email sending, or integration of AI-generated content into email marketing campaigns."
brysontang,deltatask,6,,"DeltaTask is a locally-hosted task management system with Obsidian integration. It provides a SQLite-backed database for storing tasks with properties like urgency, effort, and tags, while offering intelligent prioritization and task decomposition. The MCP server exposes a full API for creating, updating, and querying tasks, as well as syncing with Obsidian markdown files. Ideal for users wanting a powerful, customizable todo system with local data storage and markdown integration."
misterboe,strapi-mcp-server,23,2284,"This Strapi MCP server, developed by bschauer, enables seamless integration of Strapi CMS content into AI-assisted workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for accessing and manipulating Strapi data through compatible MCP clients. The implementation supports content type retrieval, CRUD operations, and media handling, offering tools for dynamic content management and querying. It's particularly useful for developers and content managers looking to incorporate on-demand access to CMS data into their AI-assisted applications, allowing for dynamic content creation, updating, and analysis within Strapi-powered websites and applications."
bsmi021,mcp-chain-of-draft-server,14,394,"MCP Chain of Draft Server provides a tool for enhancing reasoning through iterative critique and revision cycles. Developed by bsmi021, this TypeScript implementation exposes a Chain of Draft tool that structures thinking into drafts with explicit reasoning chains, allowing for focused critiques and targeted revisions. The server maintains session state to track thought history and branching paths, making it particularly valuable for complex problem-solving tasks where initial reasoning may contain errors or gaps. It integrates with the Model Context Protocol SDK to enable AI assistants to improve their reasoning quality through systematic refinement rather than single-pass thinking."
bsmi021,mcp-file-context-server,10,,"This file context server, developed for enhanced Model Context Protocol (MCP) interactions, provides AI assistants with advanced file system access and code analysis capabilities. It implements real-time file watching, smart caching with LRU strategy, and detailed code metrics calculation including cyclomatic complexity and dependency extraction. The server exposes tools for file operations, code analysis, and advanced searching with regex support and context-aware results. By offering a comprehensive file system interface through MCP, it enables AI systems to efficiently read, search, and analyze code files. This implementation is particularly suited for scenarios involving large codebases, continuous integration environments, or AI-assisted code review processes, facilitating use cases such as automated code quality assessment, intelligent code navigation, and context-aware programming assistance."
bsmi021,mcp-file-operations-server,10,31,"This file operations MCP server, developed by Brian W. Smith, provides enhanced capabilities for file and directory management with streaming, patching, and change tracking support. Built with TypeScript and leveraging libraries like diff and glob, it offers tools for basic file operations, directory handling, file watching, and change tracking. The implementation stands out by incorporating streaming for large file handling, robust error handling, and rate limiting for protection against excessive requests. It's particularly useful for developers and applications requiring advanced file manipulation, real-time file system monitoring, or integration of file operations into AI-assisted workflows, enabling tasks like automated file management, backup systems, or content processing pipelines."
bsmi021,mcp-filesystem-server,2,,"This filesystem MCP server, developed by Brian W. Smith, provides AI assistants with standardized access to file system operations, analysis, and manipulation capabilities. Built with TypeScript and the Model Context Protocol SDK, it offers a comprehensive set of tools for directory and file operations, text analysis, file hashing, duplicate detection, and archive handling. The server is organized into distinct layers for protocol handling, tool registry, and core operations, with a focus on safe file system access. It's particularly valuable for AI systems that need to interact with local file systems, enabling use cases such as automated file management, content analysis, and data organization across various file types and structures."
bsmi021,mcp-mistral-codestral,2,,"This Mistral Codestral MCP server, developed by the Mistral AI team, provides a TypeScript-based interface for AI assistants to interact with Mistral's code-related APIs. Built using the Model Context Protocol SDK, it offers tools for code completion, bug fixing, and test generation across multiple programming languages. The implementation focuses on efficient code processing and includes features like Fill-in-the-Middle completion, rate limiting, and comprehensive error handling. It's particularly useful for enhancing AI-driven software development workflows, enabling tasks like automated code review, bug detection, and test suite generation without requiring deep knowledge of Mistral's API intricacies."
bsmi021,mcp-node-omnibus-server,3,,"This Node.js-based MCP server, developed as a comprehensive development tool, integrates with the Model Context Protocol SDK to facilitate AI-assisted Node.js and TypeScript development. It leverages TypeScript for type safety and includes Axios for HTTP requests. The server is designed to be extensible, allowing developers to add custom functionality for various Node.js development tasks. It's particularly suited for scenarios requiring AI assistance in code generation, debugging, and project management within Node.js environments. The implementation's focus on Node.js specifics differentiates it from more general-purpose MCP servers, making it valuable for teams working extensively with Node.js and TypeScript."
bsmi021,mcp-conversation-server,0,,"MCP Conversation Server provides a standardized interface for managing conversations with OpenRouter's language models. It enables applications to create and manage multiple conversations, send messages with streaming support, and persist conversation state to the filesystem. Built with TypeScript and the OpenAI SDK, it features automatic token counting, context window management, and support for various models including Claude 3 Opus, Claude 3 Sonnet, and Llama 2 70B. The server loads configuration from YAML files, handles error states appropriately, and is particularly valuable for developers who need a unified conversation management system across different AI models without managing provider-specific implementations."
bsmi021,mcp-server-webscan,5,,"This MCP server for web content scanning and analysis, developed using TypeScript, provides tools for extracting and processing web page content. It leverages libraries like Cheerio for HTML parsing and Turndown for HTML-to-Markdown conversion, offering capabilities to fetch, analyze, and transform web content. The implementation is designed to integrate seamlessly with AI-assisted workflows, enabling tasks such as web scraping, content summarization, and data extraction. It's particularly useful for researchers, content creators, and developers who need to automate web content analysis, generate structured data from websites, or incorporate web-based information into their AI applications."
b-step62,mcp-server-mlflow,1,,"MLflow Prompt Registry MCP Server provides a bridge between Claude Desktop and MLflow's Prompt Registry, enabling users to discover and use prompt templates managed in MLflow directly within Claude. Developed by B-Step62, this TypeScript implementation exposes two main tools: 'list-prompts' for browsing available templates and 'get-prompt' for retrieving and compiling specific prompts with variable substitution. The server connects to MLflow's API to fetch prompt metadata and content, then formats it according to the MCP specification. This integration is particularly valuable for teams already using MLflow for prompt management who want to streamline their prompt engineering workflow by accessing their templates directly in Claude Desktop."
btwiuse,npm-search-mcp-server,9,1684,"This npm search MCP server, developed by Anthropic, enables AI assistants to search for npm packages using the npm CLI. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it exposes a 'search_npm_packages' tool that executes the 'npm search' command and returns the results. The server runs on stdio, making it compatible with various MCP clients. By providing a standardized interface for npm package searches, it allows AI systems to easily access and analyze the npm registry. This implementation is particularly useful for scenarios involving JavaScript/Node.js development, package discovery, or dependency management, facilitating use cases such as finding suitable libraries, comparing package versions, or assessing package popularity within the npm ecosystem."
packages,cli,10,18832,"With [Bucket](https://bucket.co/)'s MCP you can flag features directly from the chat window in your code editor. Whether that’s VS Code, Cursor, Windsurf, Claude Code—any IDE that has MCP support.

For example, if you’ve built a “Download CSV” feature and want to flag it, you no longer have to go to bucket.co or use the CLI to create a feature key. Instead, ask the MCP to do it for you: “flag the download button with bucket.”

You can also use the MCP to grant company segments and individual companies or users access to the feature—straight from the chat window. To give “Acme” access, for example, you’d ask something like: “give Acme access to the download csv feature” and Bucket will look up the company name and enable the Download CSV feature for it.

To get started, [add the Bucket MCP in your IDE](https://docs.bucket.co/api/mcp)."
buga-luga,cursor-mcp,38,,"This MCP implementation, developed by Buga-luga, provides seamless integration between Claude AI and desktop applications through Cursor IDE. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables real-time AI assistance in development workflows, offering context-aware code suggestions and completions. The implementation focuses on enhancing productivity by bridging Claude's capabilities with desktop software, making it particularly useful for developers seeking AI-powered coding support within their existing IDE environment. It stands out by offering a TypeScript-based approach for improved type safety and developer experience."
buhe,mcp_rss,4,868,"MCP RSS is a server that enables AI assistants to interact with RSS feeds, providing tools to parse OPML files, fetch articles, and manage content from subscribed sources. Built with TypeScript and MySQL, it offers features for importing feed subscriptions, automatically updating articles, and filtering content by source or favorite status. The implementation uses TypeORM for database management and exposes three main API methods: retrieving articles with customizable filters, listing available sources, and marking articles as favorites. Ideal for users who want their AI assistants to access and manage their RSS content without switching context."
bunasq,fs,5,10278,"FS MCP is a file system server that enables AI assistants to read files from the local system. Built by Sergey Bunas, it provides a simple interface for accessing file content through the Model Context Protocol, with optional API key authentication for security. The implementation is written in TypeScript, runs on Node.js, and can be easily installed and executed using npx. This tool is particularly valuable for workflows where AI assistants need to analyze, reference, or work with local file content without requiring manual file uploads or content copying."
buoooou,mcp-ui-gen,3,333,"SupaUI MCP Server enables AI agents to generate, fetch, and manage React UI components through natural language interactions with the buouui.com platform. Built with TypeScript and leveraging the Model Context Protocol, it provides tools for creating, searching, and listing UI components with a focus on developer productivity and seamless AI-driven design workflows."
burakdirin,clickhouse-mcp-server,0,1683,"Clickhouse MCP Server provides a direct integration with ClickHouse databases, enabling AI assistants to execute SQL queries and connect to specific databases through a simple interface. Built by Burak Dirin, this Python-based implementation offers two main tools: 'connect_database' for establishing database connections and 'execute_query' for running SQL queries with results returned in JSON format. The server supports configuration through environment variables for connection settings and includes a read-only mode option for enhanced security. It's particularly valuable for workflows requiring data analysis, reporting, or exploration of information stored in ClickHouse databases without leaving the conversation interface."
burakdirin,mysqldb-mcp-server,3,4275,"MySQL Database MCP Server provides a bridge between Claude and MySQL databases, enabling direct SQL query execution and database connections through a simple interface. Developed by Burak Dirin, it offers two main tools: 'connect_database' for establishing connections to specific databases and 'execute_query' for running SQL queries with results returned in JSON format. The implementation includes configurable read-only mode for security, supports Python 3.11+, and can be deployed via Docker or installed directly using pip, making it ideal for workflows requiring database access without leaving the conversation interface."
burningion,geoapify-mcp,0,,"This map generation MCP server, developed by an unnamed author, provides tools for creating map images from geographic coordinates. Built with Python 3.13 and leveraging libraries like Folium and Selenium, it offers functions for geocoding addresses and generating static map images from GeoJSON data. The implementation focuses on simplicity, with just two main tools: one for fetching GPS coordinates and another for creating map visualizations. It's particularly useful for tasks like location-based data visualization, address validation, or generating custom map images for reports or presentations, enabling AI assistants or applications to work with geographic data without directly handling mapping APIs or browser interactions."
burningion,video-editing-mcp,114,19222,"This MCP server, developed by Kirk Kaiser, enables AI-assisted video editing and searching using the Video Jungle API. It provides tools for adding videos, searching video content using embeddings, and generating edits from single or multiple video files. The implementation is built in Python 3.11+ and integrates with libraries like einops, timm, and transformers for advanced video processing capabilities. It's designed for content creators and video editors who want to leverage AI to streamline their workflow, allowing for natural language queries to find relevant video clips and automate editing tasks. The server also includes an optional feature to search local video files on macOS, making it versatile for both cloud-based and local video management."
burtthecoder,mcp-maigret,109,2913,"This MCP server, developed by BurtTheCoder, enables AI assistants like Claude to leverage the OSINT capabilities of Maigret. Built in JavaScript/TypeScript, it provides functionality for searching usernames across social networks and analyzing URLs. The implementation stands out by offering Docker-based execution, multiple output formats, and site filtering options. By connecting AI capabilities with Maigret's extensive data collection, this server allows AI systems to gather and process publicly available user information programmatically. It is particularly useful for building AI-powered tools for social media research, identity verification, and open-source intelligence gathering that require ethical and responsible use of public data sources."
burtthecoder,mcp-dnstwist,19,1541,"This MCP server for dnstwist, developed by burtmacklin, provides AI assistants with DNS fuzzing capabilities to detect typosquatting, phishing, and corporate espionage. Built using TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized interface for domain security analysis. The server integrates with the dnstwist tool, enabling automated generation and analysis of domain name variations. It's particularly valuable for cybersecurity professionals and organizations looking to proactively identify potential threats to their online presence, facilitating use cases such as brand protection, phishing prevention, and domain security audits."
burtthecoder,mcp-shodan,34,16557,"This MCP server, developed by BurtTheCoder, enables AI assistants like Claude to interact with the Shodan API and CVEDB. Built in JavaScript, it provides capabilities for IP lookups, device searches, DNS resolution, vulnerability queries, and CPE lookups. The implementation stands out by offering a standardized interface to Shodan's extensive IoT device data and vulnerability information. By connecting AI capabilities with Shodan's global device intelligence, this server allows AI systems to gather detailed information about internet-connected devices, analyze potential security vulnerabilities, and understand the global threat landscape. It is particularly useful for cybersecurity analysis, threat intelligence gathering, and building AI-powered network monitoring and risk assessment tools."
burtthecoder,mcp-virustotal,45,2865,"This VirusTotal MCP server, developed by BurtTheCoder, enables AI assistants like Claude to leverage VirusTotal's threat intelligence capabilities. Built in JavaScript/TypeScript, it provides functionality for scanning URLs, analyzing file hashes, and retrieving IP address reports. The implementation stands out by offering relationship analysis tools and pagination support for large result sets. By connecting AI capabilities with VirusTotal's extensive threat data, this server allows AI systems to perform security analysis and threat detection programmatically. It is particularly useful for building AI-powered tools for malware research, phishing detection, and network security monitoring that require access to up-to-date threat intelligence."
baryhuang,mcp-server-aws-resources-python,7,,"This AWS Resources MCP server, developed by peakmojo, provides a Python-based interface for AI models to interact with AWS services using boto3. Built to address limitations in existing solutions, it offers a containerized approach that simplifies deployment and enhances stability. The server exposes a dynamic resource for executing AWS queries, supporting operations across various AWS services like S3 and CodePipeline. It features a sandboxed environment for code execution, ensuring security while allowing flexibility in query construction. This implementation is particularly useful for DevOps tasks, cloud resource management, and integrating AWS functionality into AI-powered workflows, offering a more accessible and customizable alternative to AWS Chatbot with Developer Access."
peakmojo,mcp-hubspot,58,,"This HubSpot MCP server, developed by peakmojo, provides a streamlined interface for AI models to interact with HubSpot CRM data and operations. Built using Python and the HubSpot API client, it offers tools for managing contacts and companies, including creation and retrieval functionalities. The server implements auto-updating resources and a demonstration prompt to guide users through HubSpot operations. By abstracting HubSpot API interactions into a standardized MCP format, it enables AI systems to easily access and manipulate CRM data. This implementation is particularly valuable for sales and marketing applications, facilitating use cases such as lead management, customer data analysis, and automated CRM updates."
baryhuang,mcp-twitter-noauth,0,,"MCP Server - Twitter NoAuth provides Twitter API access without requiring local credential setup, enabling headless operation in remote environments. Built by buryhuang, it implements a decoupled architecture where clients complete OAuth flows independently and pass credentials as context to the server. The implementation supports core Twitter operations including searching tweets, retrieving user tweets, posting new content, and replying to existing tweets. It handles automatic token refreshing and is designed for containerization with Docker, making it particularly valuable for AI assistants that need to interact with Twitter while maintaining separation between credential storage and server implementation."
baryhuang,mcp-unipile,7,,"This MCP server, developed by Bary Huang, integrates with Unipile to provide a unified interface for accessing messages across multiple messaging platforms including LinkedIn, WhatsApp, Instagram, Messenger, and Telegram. It offers tools for retrieving chat messages with pagination support, making it particularly useful for AI models to interact with diverse communication channels through a standardized protocol. The implementation is containerized for easy deployment across various Linux architectures and includes detailed setup instructions for both Docker and local environments. It's designed for users who need to manage communications across multiple platforms efficiently, especially beneficial for professionals leveraging AI capabilities to enhance their networking and communication strategies."
buu-ai,buu-mcp-server,0,,"Buu MCP Server provides a bridge between AI assistants and the Buu AI platform, enabling 3D model generation from text prompts. Built with TypeScript and the Model Context Protocol SDK, it exposes tools for managing teams, generating subthreads, and creating both 2D images and 3D models in various styles including Realistic, LowPoly, Voxel, and Stylized. The server requires a Buu Team API key for authentication and communicates with Buu's GraphQL API, making it valuable for designers, game developers, and creative professionals who need to quickly generate 3D assets through natural language descriptions without leaving their AI assistant interface."
bytebase,dbhub,349,21348,"DBHub is a universal database gateway implementing the MCP server interface, allowing AI assistants to connect to and explore different databases like PostgreSQL, MySQL, SQLite, and DuckDB. Developed by Bytebase, it provides capabilities for browsing tables, viewing schema information, running read-only SQL queries, and includes safety checks to prevent dangerous operations. The implementation is containerized with Docker for easy deployment and supports both stdio transport for direct integration with tools like Claude Desktop and SSE transport for browser and network clients, making it particularly valuable for AI assistants that need to access and analyze data stored in various database systems."
bytefer,mcp-flux-schnell,5,,"MCP server for generating images using the Flux Schnell model via a Cloudflare worker API. Built by bytefer, this implementation provides a single 'generate_image' tool that allows users to create images by sending text prompts, with robust error handling and environment variable configuration. Useful for developers needing a streamlined text-to-image generation service with clean TypeScript implementation."
kbsooo,mcp_atom_of_thoughts,20,0,"Atom of Thoughts is a TypeScript-based MCP implementation that enables AI assistants to break down complex problems into smaller, manageable components. Developed by Byungsoo Kang, this server leverages the Model Context Protocol SDK to facilitate structured thinking processes through atomic thought units. The implementation runs on Node.js and uses stdio for communication, making it lightweight and easily deployable in various environments. It's particularly useful for reasoning tasks that benefit from decomposition, allowing AI systems to tackle problems step-by-step rather than attempting to solve them all at once."
c0h1b4,mssql-mcp-server,10,,"This MSSQL MCP server enables AI agents to interact with Microsoft SQL Server databases through a standardized interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for executing SQL queries, managing database connections, and retrieving schema information. The implementation focuses on security and performance, offering features like connection pooling, query parameterization, and TLS encryption support. It's particularly useful for applications requiring AI-driven database operations, enabling use cases such as automated data analysis, dynamic reporting, and intelligent database management without direct exposure to SQL Server complexities."
c4pt0r,mcp-server-s3,2,,"MCP-Server-S3 provides a bridge to Amazon S3 storage services, enabling AI assistants to perform common S3 operations through a standardized interface. The implementation offers seven specialized tools for listing buckets, browsing objects, retrieving file contents, uploading and downloading files, and deleting objects. Built with Python 3.13 using the boto3 library, it authenticates with AWS credentials through environment variables and runs as a FastMCP server. This tool is particularly valuable for developers and data engineers who need to interact with cloud storage directly through AI assistants without switching to separate AWS management interfaces."
cablate,mcp-doc-forge,9,1380,"This MCP server implementation provides document processing and manipulation capabilities, integrating various libraries for handling different file formats including PDF, DOCX, HTML, CSV, and EPUB. It offers functionalities such as text extraction, conversion between formats, image processing, and markdown generation. The implementation is designed to be used within the Model Context Protocol ecosystem, enabling AI assistants to perform complex document operations. It's particularly useful for tasks like content analysis, data extraction from documents, and automated report generation across multiple file types."
cablate,mcp-google-gmail,2,,"This MCP server implementation provides Google Gmail capabilities, enabling integration with Gmail's API for email-related operations. Developed by CabLate, it offers functionalities for interacting with Gmail accounts, likely including sending, receiving, and managing emails. The implementation is built using TypeScript and utilizes the googleapis library for API interactions. It's designed to be used within the Model Context Protocol ecosystem, making it suitable for AI assistants or applications that require email automation, content analysis, or integration of email functionalities into larger workflows. The server is particularly useful for tasks such as automated email responses, email content processing, and managing email-based workflows within AI-driven systems."
cablate,mcp-google-calendar,1,1039,"This MCP server implementation provides Google Calendar capabilities, enabling AI assistants to interact with and manage calendar events. Developed by CabLate, it integrates with the Google Calendar API to offer functionalities such as creating, updating, and retrieving calendar events. The implementation is built using TypeScript and leverages the @google-cloud/local-auth library for authentication. It is designed to be easily integrated into existing MCP ecosystems, allowing for seamless calendar management within AI-powered applications. This server is particularly useful for scheduling assistants, productivity tools, and any application requiring calendar integration."
cablate,mcp-google-map,10,959,"MCP Google Map provides a bridge to the Google Maps API, enabling location-based operations like place searching and geocoding. Developed by CabLate, this TypeScript implementation uses the @googlemaps/google-maps-services-js library to interact with Google's services. The server exposes tools for querying location data, finding nearby places, and retrieving geographical information - making it particularly valuable for applications that need to incorporate location intelligence without leaving the conversation interface."
cabra-lat,tuyactl,2,11457,"This MCP server, developed by @cabra.lat, provides integration with Tuya smart home devices. Built with Python and leveraging the tinytuya library, it offers tools for controlling and monitoring Tuya-compatible devices. The implementation focuses on enabling AI assistants to interact with smart home ecosystems, including features like device discovery, state management, and command execution. It requires Python 3.13+ and uses libraries like numpy and scipy for data processing. The server is particularly useful for home automation scenarios, enabling use cases such as voice-controlled smart devices, energy usage optimization, and automated routines without direct user interaction with individual device apps or hubs."
cactusinhand,mcp_server_notify,12,,"MCP Server Notify provides a system notification service that integrates with desktop environments to display alerts and play sounds when triggered by API requests. The implementation uses Pydantic for request validation, supports cross-platform notifications through the Plyer library, and includes sound playback capabilities (with platform-specific implementations). Built with a simple HTTP server architecture, it enables applications to send customizable notifications with configurable timeouts, making it particularly useful for alerting users about completed tasks, important events, or status changes without requiring constant monitoring of the application interface."
caesaryangs,prometheus_mcp_server,26,,"This MCP server, developed by CaesarYangs, enables AI assistants to interact with Prometheus metrics through a standardized interface. It provides tools for querying and analyzing time-series data from Prometheus instances via the Prometheus API. The server abstracts away complexities of metric retrieval and offers a simplified workflow for AI systems to access and reason about system and application performance data. By connecting AI capabilities with Prometheus' powerful monitoring and alerting toolkit, this implementation empowers AI assistants to perform tasks like anomaly detection, capacity planning, or troubleshooting. It is particularly useful for applications requiring real-time metrics analysis, infrastructure monitoring, or any scenario where an AI system needs to understand and act on the operational state of complex distributed systems."
caicongyang,mcp-demo,2,,"MySQL server implementation for the Model Context Protocol (MCP), providing a standardized interface for database interactions. Built with SQLAlchemy and PyMySQL, it enables secure and configurable MySQL database access through a FastAPI-powered server, supporting connection pooling, environment-based configuration, and optional query restrictions."
smithery-ai,mcp-obsidian,769,103223,"This Obsidian MCP connector, developed by calclavia, enables AI assistants to read and search Markdown notes in Obsidian vaults through Claude Desktop. It provides seamless integration between Claude and personal knowledge bases stored in Obsidian. Built in TypeScript and leveraging npx for easy installation, the connector allows Claude to list files, retrieve content, and perform searches across Obsidian documents. By bridging AI models with Obsidian's note-taking system, this implementation enhances Claude's ability to analyze personal knowledge, assist with note organization, and augment information retrieval from Obsidian vaults. It is particularly useful for users seeking AI-powered knowledge management, research assistance, and collaborative note-taking within their Obsidian environments."
mumunha,cal_dot_com_mcpserver,1,,"A Cal.com Calendar MCP server that integrates with the Cal.com Calendar API to provide appointment scheduling capabilities for AI assistants. It offers tools for adding, updating, deleting, and listing calendar appointments with features like rate limiting and error handling. The implementation uses the MCP SDK to expose these calendar operations as tools that can be called programmatically, making it valuable for workflows where scheduling and calendar management are needed without leaving the conversation interface."
calebl,ynab-mcp-server,1,,"YNAB MCP server provides a bridge between AI assistants and the You Need A Budget (YNAB) personal finance API. Built by Caleb LeNoir, it exposes tools for listing budgets, retrieving detailed budget information including accounts and categories, and creating transactions. This implementation is particularly valuable for users who want to manage their YNAB budgets and track finances directly through conversational AI without switching contexts."
calvernaz,alphavantage,33,,"This MCP server, developed by calvernaz, provides integration with the Alphavantage stock market data API. It exposes tools for querying financial data like stock prices, company fundamentals, and economic indicators. By leveraging Alphavantage's comprehensive financial datasets, this implementation enables AI assistants to easily incorporate up-to-date market information into their analyses and recommendations. It is particularly useful for scenarios requiring real-time financial data, such as portfolio tracking, investment research, or generating market reports through natural language queries to an AI assistant. The server is designed for seamless integration with the Claude desktop app and focuses on core stock market data retrieval functionality."
cam10001110101,mcp-server-obsidian-jsoncanvas,3,,"This MCP server implementation provides tools for working with JSON Canvas files according to the official specification. It enables creating, modifying, and validating infinite canvas data structures, supporting all node types and edge connections. The server offers a RESTful API for canvas operations, includes example resources, and can export canvases to different formats. It's designed for applications requiring AI assistants to interact with and manipulate canvas-based data visualizations."
cam10001110101,mcp-server-outlook-email,8,,"This MCP server provides email processing capabilities for Outlook, integrating with MongoDB for semantic search and SQLite for efficient storage. It features multi-mailbox support, date range filtering, and vector embedding generation using Ollama. Designed for Windows environments, it offers tools for processing emails, storing metadata, and preparing data for advanced search and analysis tasks. The server is particularly useful for applications requiring automated email processing, semantic search capabilities, and integration with local Outlook installations."
camdenclark,anki-mcp-server,40,,"This Anki MCP server, developed using TypeScript and the Model Context Protocol SDK, provides AI assistants with a standardized interface to interact with Anki flashcard decks via the AnkiConnect plugin. It offers resources for accessing Anki decks and note models, along with tools for listing, retrieving, and creating notes. The server abstracts the complexities of the AnkiConnect API, enabling AI systems to seamlessly incorporate flashcard management into their workflows. It's particularly valuable for educational assistants, language learning applications, and AI developers working on knowledge retention tools, facilitating use cases such as automated flashcard creation, personalized study sessions, and intelligent review scheduling within the Anki ecosystem."
camdenclark,jira-mcp,22,5050,"This JIRA MCP server, created by Camden Clark, enables seamless integration between Large Language Models and JIRA project management software. It provides standardized tools for executing JQL searches and retrieving detailed issue information through the Model Context Protocol. Built with Node.js and leveraging the @modelcontextprotocol/sdk, this implementation stands out by offering a streamlined interface to JIRA's powerful querying capabilities. It's particularly useful for AI assistants and chatbots that need to access or manipulate JIRA data, enabling natural language interactions for project management tasks, issue tracking, and reporting."
canadaduane,browse-together-mcp,3,,"A Playwright browser and MCP Server on your desktop. You can spin up a headful browser (for human interaction) and an accompanying MCP server that can be used to control the browser via HTTP API or MCP server.

This project provides two complementary services for browser automation and co-browsing:

    A Browser Proxy Service that controls a persistent Playwright browser instance via HTTP. Let's you log in to services you use, like you normally would.
    An MCP Server that exposes browser functionality to MCP clients (like Claude Desktop) via the FastMCP framework. Can operate inside the authenticated session you provide, giving your MCP commands more power and usefulness as an authenticated user.

Both services are built with Deno and TypeScript and work together seamlessly.
Features

- Multiple Browser Support: Run with either Chromium (default) or Firefox.
- Persistent Browser Session: A single browser instance runs for the lifetime of the service.
- Named Tabs: Control multiple pages (tabs) within the single browser session using unique IDs.
- HTTP API: Interact with the browser using simple JSON commands over HTTP.
- MCP Integration: Use the browser through Cline, Windsurf, Claude Desktop, or other MCP clients.
- Type Safety: Uses Zod for robust validation of incoming commands.
- Secure your browser proxy service (HTTP) endpoint with an API token.

Note: Currently supports Mac OS, but can be extended to other platforms with minor changes."
cantian-ai,bazi-mcp,12,,"Bazi MCP server provides a bridge to Chinese BaZi (Eight Characters) astrology calculations, enabling AI assistants to access traditional fortune-telling and personality analysis based on birth date and time. Built with TypeScript using the Model Context Protocol SDK, it leverages the tyme4ts library for date calculations and implements functionality through a stdio transport layer. The server exposes BaZi-related functions that likely include generating charts, interpreting elements, and providing insights based on traditional Chinese metaphysics principles, making it valuable for users interested in exploring Eastern astrology without specialized knowledge of the complex calculation systems."
cantpr09ram,tku-mcp,1,,"TKU-MCP connects Blender to Claude AI through the Model Context Protocol, allowing Claude to directly interact with TronClass and TKU-ilife systems. This implementation provides authentication with TKU's student systems using environment variables for credentials, and is designed to be run with the uv package manager. The server enables AI assistants to access and manipulate data from Tamkang University's learning management and student information systems, making it useful for students who want to automate interactions with university platforms."
ranver,mcp,0,,"A Model Context Protocol server that enables AI assistants like Claude to interact with Canvas LMS through a comprehensive API integration. Built by R.Huijts, this implementation provides tools for managing courses, posting announcements, viewing rubrics, accessing student enrollment information, and handling assignment submissions and comments. The server uses TypeScript and the MCP SDK to expose Canvas functionality as structured tools, making it particularly valuable for educators who want to automate administrative tasks, analyze student performance data, and generate visualizations of rubric statistics without leaving their AI assistant conversation."
canvrno,proxmoxmcp,92,,"Proxmox MCP Server provides a Model Context Protocol interface for managing Proxmox virtualization environments, enabling AI assistants to interact with virtual machines, containers, storage, and cluster resources. Built by Kevin, it offers tools for retrieving node status, executing commands within VMs via QEMU guest agent, monitoring storage pools, and checking cluster health - all through a structured API with comprehensive error handling and logging. The implementation uses token-based authentication with Proxmox's API and includes detailed formatting for console output, making it particularly valuable for system administrators who need to monitor and manage their Proxmox infrastructure without leaving their conversation interface."
capecoma,winterm-mcp,0,,"WinTerm MCP is a server that enables AI models to interact with the Windows command line interface through standardized tools. It provides functionality to write commands, read terminal output, and send control characters, allowing for programmatic access to Windows terminal operations. This implementation is particularly useful for AI-driven automation tasks and integrations that require direct interaction with the Windows command line environment."
automateyournetwork,chatgpt_mcp,3,,"A ChatGPT integration server that enables AI assistants to access OpenAI's GPT-4o model through a simple API. Developed by John Capobianco, this implementation provides a single tool for sending text content to ChatGPT for analysis, summarization, or generation tasks. The server handles the OpenAI API communication, error management, and response formatting, making it easy to augment an assistant's capabilities with ChatGPT's perspective. It's particularly useful for scenarios requiring complex analysis beyond the primary assistant's capabilities, such as detailed security reviews of configurations or summarizing large documents."
capoom,houdini-mcp,37,,"HoudiniMCP provides a bridge between AI assistants and the Houdini 3D software through a socket-based communication protocol. The implementation consists of a Python addon that runs within Houdini to expose a TCP server, paired with an MCP server that translates AI requests into Houdini operations. It supports a wide range of 3D modeling capabilities including geometry creation, material application, lighting, camera setup, simulation, and rendering, making it valuable for AI-driven 3D content creation workflows without leaving the assistant interface."
cappahccino,sb-mcp,1,2692,"Supabase MCP Server enables Claude and other LLMs to interact with Supabase databases and Edge Functions through a standardized API. It provides tools for performing CRUD operations on Postgres tables and invoking Edge Functions with custom payloads, all secured by API key authentication. The implementation includes a complete Express server with database query builders, comprehensive error handling, and configuration management, making it particularly valuable for applications that need AI assistants to access or modify data in Supabase projects without requiring custom integration code."
captain-blue210,anki-mcp-server,0,,"An MCP server that connects Claude Desktop to Anki via the AnkiConnect API, allowing AI assistants to retrieve and analyze cards tagged as 'leech' in a user's Anki collection. The server provides tools to fetch either detailed card information or just IDs, with support for random selection of a specified number of cards. Built with TypeScript and Node.js, it handles connection management, error recovery, and batch processing to prevent overwhelming the AnkiConnect API, making it particularly valuable for users seeking AI assistance in analyzing and improving their spaced repetition study habits."
captainchaozi,search-intent-mcp,1,485,A Message Context Protocol (MCP) server implementation that detects search intent in user queries and provides relevant search results from Brave Search API.
captaincrouton89,mcp-maker,2,,"MCP Maker is a specialized server designed to help developers create new Model Context Protocol servers by providing scaffolding tools and templates. It offers utilities for generating boilerplate code, tool definitions, resource templates, and prompt templates through a set of well-defined tools accessible via Claude Desktop. Built with TypeScript and using Handlebars for templating, it streamlines the MCP development process by automating repetitive setup tasks and providing standardized patterns for common MCP components. The implementation is particularly valuable for developers new to MCP who want to quickly bootstrap projects with best practices already in place."
caretdev,mcp-server-iris,3,3841,"InterSystems IRIS MCP server provides a bridge between AI assistants and InterSystems IRIS databases, enabling SQL query execution and interoperability production management through a standardized interface. Built with Python, it exposes tools for running SQL queries, creating/starting/stopping productions, managing production items, and monitoring system logs. The implementation is particularly valuable for database administrators and developers who need to interact with IRIS databases and manage InterSystems productions directly through conversational AI."
carlmontanari,scrapli-mcp,5,,"Scrapli-MCP is a server implementation that integrates the Scrapli network automation library with MCP to enable AI assistants to execute SSH commands on network devices. Built by Carl Montanari, this implementation provides resources for retrieving host information and a tool for executing commands on Cisco IOS XE devices using AsyncScrapli. The server includes custom prompts to facilitate natural language interactions when requesting command execution, making it particularly useful for network engineers who need to automate device configuration and troubleshooting tasks through an AI interface."
carrie-l,blog_publisher_mcp_server,0,,"This Blog Publisher MCP server enables AI assistants to publish blog content to external platforms. Built with Python using httpx for HTTP requests and the MCP library with CLI support, it provides a streamlined interface for content submission. The implementation includes both standard and local execution modes with logging capabilities, making it suitable for automated content publishing workflows or integration with AI writing assistants that need to push finalized content to publishing platforms."
carsonjones,nhl-go,1,,"This MCP server, developed by Carson Jones, provides comprehensive access to NHL data and statistics. Built with Go and leveraging the Model Context Protocol, it offers a wide range of functionalities including retrieving schedules, game details, team information, player stats, and league standings. The implementation focuses on delivering up-to-date hockey information with features like live game updates and play-by-play data. It's particularly useful for sports analysts, fantasy hockey enthusiasts, and developers building NHL-related applications, enabling use cases such as real-time score tracking, in-depth player performance analysis, and automated reporting on league standings without complex API integrations."
carterlasalle,mac_messages_mcp,70,8517,"Mac Messages MCP provides a bridge for AI assistants to interact with the macOS Messages app, enabling reading recent messages and sending new ones through a set of well-defined tools. Developed by Carter Lasalle, it accesses the Messages database and AddressBook contacts directly, with features for contact lookup, fuzzy name matching, and group chat support. The implementation includes robust error handling for permission issues and runs as an MCP server that integrates with Claude Desktop, making it particularly valuable for users who want to manage their iMessage conversations without leaving their AI assistant interface."
carterlasalle,system_information_mcp,3,,"This MCP server implementation provides detailed information about the development environment to enhance context-aware assistance in the Cursor code editor. Developed by Carter Lasalle, it uses Python to gather comprehensive system data including OS details, hardware specifications, installed software, and running processes. The server exposes this information through various tools, allowing Cursor's intelligent agent to access specific environmental details as needed. It's particularly useful for scenarios requiring deep understanding of the local development setup, such as troubleshooting environment-specific issues or providing tailored coding suggestions."
catalystneuro,mcp_read_images,6,,"This MCP server, developed by CatalystNeuro, provides image analysis capabilities using OpenRouter's vision models, particularly Claude-3 variants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined interface for AI agents to analyze images through natural language queries. The implementation focuses on ease of use and flexibility, with features like automatic image optimization, configurable model selection, and detailed error handling. It's particularly useful for developers and researchers working with visual data, enabling use cases such as content moderation, data extraction from images, and automated image captioning without directly interacting with the OpenRouter API."
catherinedparnell,mcp-finnhub,0,,"This Finnhub MCP server, developed by Catherine Parnell, provides a streamlined interface to Finnhub's financial API. Built with Python using the FastMCP framework, it offers tools for retrieving market news, stock quotes, basic financials, and recommendation trends. The implementation stands out by abstracting away the complexities of API authentication and request handling, making it accessible for AI assistants or applications needing financial data. It's particularly useful for tasks like market analysis, portfolio management, or building financial chatbots, enabling quick access to real-time and historical financial information without deep API knowledge."
cat-state,nrepl-mcp,1,,"This MCP server provides a bridge between Anthropic's Model Control Protocol and Basilisp's nREPL server, allowing Claude Code to interact directly with a Basilisp REPL environment. It enables execution of Basilisp code (a Lisp dialect similar to Clojure that runs on the Python VM), retrieval of documentation, namespace exploration, and Python interoperability through a set of well-defined tools. The implementation features robust error handling, syntax highlighting for results, and comprehensive documentation to facilitate seamless interaction between AI assistants and Basilisp code execution environments."
caue397,google-calendar-mcp,0,,"Google Calendar MCP Server provides a robust bridge to the Google Calendar API, enabling AI assistants to perform calendar management tasks like listing calendars, creating/updating/deleting events, and handling Brazilian date formats. Built with TypeScript and the Model Context Protocol SDK, it features comprehensive authentication handling through OAuth2, automatic token refresh, and flexible event manipulation capabilities."
cc8887,ue-editor-mcpserver,5,,"The MCPServer plugin for Unreal Engine Editor transforms the editor into an MCP-compatible server for AI agent interaction. It leverages Python's asyncio framework with a custom event loop implementation to handle asynchronous operations within the Unreal Editor environment. The server integrates with Unreal's slate tick system to maintain responsiveness while processing requests, and requires dependencies like mcp, anyio, click, and starlette. This implementation enables AI agents to programmatically control and interact with Unreal Editor functionality, making it valuable for automating editor workflows and enabling AI-driven content creation."
ccabanillas,notion-mcp,99,,"This Notion MCP server, developed by Chase Cabanillas, integrates Notion's API with the Model Context Protocol, enabling AI-assisted workflows to interact with Notion databases and pages. Built with Python and leveraging libraries like httpx and pydantic, it exposes Notion operations as MCP resources and tools, including database listing, querying, page creation/updating, and search functionality. The implementation focuses on asynchronous operations, proper error handling, and adherence to MCP specifications. It's particularly useful for developers and teams looking to incorporate Notion's organizational capabilities into AI-driven applications, allowing for dynamic content management and retrieval within Notion workspaces."
c-cf,imf-data-mcp,2,,"IMF Data MCP Server provides access to International Monetary Fund data through a structured API interface. It offers resources for listing datasets, retrieving dataset structures, and tools for fetching time series data from various IMF databases including International Financial Statistics, Direction of Trade Statistics, and Balance of Payments. The server processes raw IMF API responses into readable formats, handling complex data structures and providing clear error messages when data is unavailable. This implementation is particularly valuable for economic analysis, research, and financial reporting workflows requiring access to authoritative international economic indicators."
ccnn2509,app-seo-ai,7,,"App SEO AI provides a bridge to Google Ads Keyword Planner API, enabling AI assistants to perform SEO research and optimization tasks. The implementation offers tools for keyword research, SERP analysis, and competitor analysis through a Node.js Express server that can be deployed via Docker or Smithery. It handles Google OAuth2 authentication for API access and formats API responses into structured data, making it valuable for content creators, marketers, and SEO professionals who need to research keywords, analyze search results, or evaluate competitor strategies without leaving their AI assistant workflow."
ccq1,awsome_kali_mcpservers,103,,"Awesome Kali MCP Servers provides a secure interface for AI assistants to execute Kali Linux security tools through a sandboxed environment. The implementation wraps common security utilities including nmap for network scanning, objdump and nm for binary analysis, strings for file examination, and wireshark/tshark for packet analysis. Built with Python using Docker containers for isolation, it enforces configurable resource limits and network access controls to prevent abuse while maintaining tool functionality. This server enables AI systems to perform security analysis tasks like vulnerability scanning, binary reverse engineering, and network traffic inspection without direct system access, making it valuable for security professionals who want to leverage AI assistants for technical security operations."
cdgaete,token-scope-mcp,1,1629,"TokenScope is a token-aware directory explorer for Large Language Models that enables intelligent codebase analysis while respecting token limitations. Built by Carlos Gaete-Morales, this Python-based MCP server provides tools for scanning directory structures, extracting file contents, analyzing token usage statistics, and generating comprehensive reports. It features security validation to restrict operations to specified base directories, intelligent file prioritization based on importance, and automatic handling of common file formats like JSON. The implementation respects .gitignore files and includes default ignore patterns for common non-source directories, making it valuable for developers who need to help LLMs understand codebases efficiently without exceeding token limits."
cdpath,mcp-server-chatgpt-app,3,3798,"MCP Server for ChatGPT enables AI assistants to interact with the ChatGPT macOS app through AppleScript automation. Developed by cdpath, this Python implementation provides a simple interface for sending prompts to ChatGPT via keyboard input simulation, making it compatible with tools like cursor and chatwise. The server handles permission errors gracefully with helpful troubleshooting messages and is particularly useful for users who want to leverage their existing ChatGPT app within an MCP workflow without switching interfaces."
cdugo,package-documentation-mcp,13,318,"This MCP server implementation provides a bridge to fetch package documentation from multiple language ecosystems without requiring API keys. Developed by cdugo, it integrates with various package registries and documentation sources, offering a standardized interface for AI assistants to access library documentation. The server includes caching capabilities, Docker support, and is designed for use cases requiring up-to-date package information, such as code assistance, dependency analysis, or learning about new libraries."
centralmind,gateway,282,,"Gateway is a database connectivity server that enables AI assistants to interact with multiple database systems through a unified interface. It supports various database engines including PostgreSQL, MySQL, SQLite, MongoDB, Snowflake, and others, while providing advanced features like API key authentication, OAuth integration, PII data protection, and OpenTelemetry monitoring. The server can operate in multiple modes (REST API, MCP SSE, or MCP stdio) and includes plugins for caching, row-level security, and data anonymization, making it particularly useful for creating secure data access layers for AI applications without exposing raw database credentials."
cerebrofoundation,mcp-intent,0,442,"A Bitcoin transaction signing server that enables AI assistants to generate Bitcoin addresses and sign transactions through the MCP protocol. Built by Cerebro Foundation, this implementation provides two key tools: one for generating P2WPKH addresses from private keys in WIF format, and another for signing partially signed Bitcoin transactions (PSBTs). The server uses the @scure/btc-signer library along with secp256k1 cryptography to securely handle Bitcoin operations, making it useful for cryptocurrency wallet integrations and transaction signing workflows, though the authors note it's intended as a play project rather than for production use."
ceshine,git-prompts-mcp-server,1,,"Git Prompts MCP Server provides a specialized interface for generating pull request descriptions based on Git repository changes. Developed by Ceshine Lee, this server analyzes the differences between Git commits and formats them as either plain text or JSON to create contextually relevant PR descriptions. The implementation uses GitPython to access repository data and exposes its functionality through a single command that compares the current HEAD with a specified ancestor branch or commit. This server is particularly useful for developers who want to automate the creation of detailed pull request descriptions without manually analyzing code changes."
cfdude,mac-shell-mcp,3,,"Mac Shell MCP Server enables secure execution of macOS terminal commands through ZSH shell with a built-in security system that categorizes commands as safe, requiring approval, or forbidden. It features a pre-configured whitelist of common commands, an approval workflow for potentially dangerous operations, and comprehensive command management tools. Written in TypeScript and designed to work with Roo Code and Claude Desktop, it can be installed locally or run via npx, making it ideal for AI assistants that need controlled access to the macOS terminal while maintaining security through command whitelisting and explicit approval mechanisms."
ch1nhpd,pentest-tools-mcp-server,1,,"Pentest-Tools-MCP-Server is a security-focused server implementation that enables AI assistants to perform penetration testing and security assessments on web applications and networks. Built on Kali Linux with Python, it provides tools for reconnaissance, vulnerability scanning, and exploitation including subdomain enumeration, directory scanning, API testing, and vulnerability detection for XSS, SQL injection, and SSRF. The server leverages popular security tools like Nmap, SQLMap, and XSStrike while implementing custom scanning logic, making it valuable for security professionals who need to conduct thorough security assessments, identify vulnerabilities, and generate comprehensive security reports without leaving their AI assistant interface."
chaichungsang,mcp_supabase_self_host,0,,"This self-hosted MCP Supabase implementation provides a containerized setup for running the Model Context Protocol with a PostgreSQL database backend. The solution uses Docker Compose to orchestrate two services: a Supabase PostgreSQL database container and a Node.js container running the MCP server that connects directly to the database. The implementation allows users to maintain full control over their data by hosting the entire stack on their own infrastructure, with configurable database credentials and persistent storage through Docker volumes. It's particularly valuable for developers who need MCP functionality while keeping sensitive data within their own environment."
chaindead,telegram-mcp,37,8215,"Telegram MCP server provides a bridge between AI assistants and the Telegram API, enabling access to user data, dialog management, and message handling capabilities. Developed by Bary Huang, this Go implementation supports retrieving account information, listing dialogs with unread filtering, accessing message history, sending draft messages, and marking conversations as read. The server uses the gotd/td library for Telegram API interactions and includes authentication workflows for secure access, making it particularly valuable for AI assistants that need to monitor, organize, and respond to Telegram communications."
champaya,note-mcp,1,,"Note-MCP-Server provides a bridge between AI assistants and the note.com API, enabling content discovery and retrieval through conversation. The implementation offers three main tools: searching articles by keyword, retrieving detailed article information, and listing articles by specific users. Built with TypeScript using the Model Context Protocol SDK, it handles API responses and error management while maintaining a clean interface to the note.com platform. This server is particularly valuable for users who want to access note.com content directly through AI assistants without switching contexts."
champierre,image-mcp-server,6,,"Server implementation that enables AI assistants to analyze images using GPT-4-turbo's vision capabilities. Built with TypeScript and the OpenAI API, it provides a standardized interface for image analysis tasks through the MCP protocol, making it valuable for applications that need to extract information, generate descriptions, or answer questions about visual content."
changjunpark,mcp-qdrant-server-with-qdrant-db,1,,"MCP-Qdrant Server provides a vector database integration for AI assistants, combining a Qdrant vector database with a specialized server that enables knowledge storage and retrieval. The implementation uses Docker containers to run both the Qdrant database and the MCP server, with the server utilizing the sentence-transformers embedding model to convert natural language into vector representations. It exposes two primary tools: one for storing code snippets with natural language descriptions, and another for searching the knowledge base using semantic queries. This setup is particularly useful for AI assistants that need to maintain persistent memory of code examples and technical knowledge across conversations."
chanmeng666,server-google-jobs,7,,"This MCP server for Google Jobs search, developed by Chan Meng, provides a standardized interface for querying job listings via the Serp API. Built with TypeScript and leveraging the MCP SDK, it offers a streamlined way to access Google's job search functionality programmatically. The server is designed as a command-line tool, making it easy to integrate into various workflows and applications. By abstracting the complexities of job search queries into an MCP interface, it enables AI systems and developers to efficiently retrieve and process job listing data. This implementation is particularly useful for applications involving career guidance, labor market analysis, or automated job matching systems."
chanmeng666,server-google-news,43,,"This Google News MCP server, developed by Chan Meng, provides a streamlined interface for accessing Google News search results via the SerpAPI. Built with TypeScript and leveraging the MCP SDK, it offers tools to query and retrieve up-to-date news articles, headlines, and related information. By abstracting the complexities of SerpAPI interactions into a standardized MCP interface, it enables AI systems to easily incorporate current news data into their workflows. This implementation is particularly useful for applications involving news aggregation, trend analysis, and information retrieval, facilitating use cases such as personalized news feeds, media monitoring, and real-time event tracking."
characat0,databricks-mcp-server,2,581,"Databricks MCP Server provides a bridge between AI assistants and Databricks workspaces, enabling interaction with data catalogs, schemas, tables, and SQL warehouses. Built with Go and the Model Context Protocol, it offers tools for listing database objects, executing SQL queries, and retrieving detailed table information through a standardized interface. The server authenticates with Databricks using unified authentication, supports multiple platforms including Linux, Windows, and macOS, and can be easily installed in VS Code through an extension, making it valuable for data analysts and engineers who need to query and analyze Databricks data directly from their AI assistant conversations."
HEAD,modelcontextprotocol,7,1098,"Chargebee empowers businesses of all sizes to scale revenue with a complete suite of solutions, including subscription management, recurring billing, pricing and payment optimization, revenue recognition, collections, and customer retention.

This MCP Server connects AI agents to Chargebee platform."
charles-adedotun,lilith-shell,0,,"Lilith-Shell is an MCP server that enables AI assistants to securely execute terminal commands through a standardized interface. Built by Charles Adedotun, it implements the Model Context Protocol to provide a single powerful tool for executing shell commands with configurable working directories and timeout protection. The implementation uses asyncio and the MCP server library to handle command execution requests, capturing both stdout and stderr output along with exit codes. It includes comprehensive error handling for timeouts and invalid commands, making it particularly valuable for AI assistants that need to perform system operations, file management, or run development tools without leaving the conversation interface."
chase-bullock,python-jira-mcp,0,,"This Python-based MCP server implementation integrates with the Jira API, allowing AI models to interact with Jira through standardized tools. It provides functionality for JQL searches and retrieving issue details, making it useful for AI-assisted project management and issue tracking workflows. The server uses the stdio transport mechanism for communication and supports environment-based configuration for easy setup and deployment."
chatmcp,heybeauty-mcp,5,76,"HeyBeauty MCP Server provides a bridge between AI assistants and the HeyBeauty virtual try-on API, enabling users to visualize how clothing items would look on them. Built with TypeScript, it exposes resources representing clothes with metadata, tools for submitting and querying try-on tasks, and prompts for guiding the try-on experience. The server communicates with the HeyBeauty API to process user images with selected clothing items, returning the generated try-on images. It supports both stdio and REST transport options, making it flexible for integration with Claude Desktop and other MCP-compatible clients."
chatmcp,mcp-server-router,2,23315,"MCP Server Router provides a proxy for connecting to remote MCP servers, enabling clients like Claude Desktop to access tools hosted on external servers. Developed by chatmcp, this implementation creates a bridge between local MCP clients and remote servers by routing requests through a central service at router.mcp.so. The server authenticates with a server key obtained from MCP.so and handles tool listing and execution requests, forwarding them to the appropriate remote endpoints. Built with TypeScript using the Model Context Protocol SDK, it communicates over stdio and is particularly valuable for users who want to leverage remotely hosted tools without running their own MCP server infrastructure."
chatmol,molecule-mcp,69,,"The molecule-mcp server provides a bridge between AI assistants and molecular visualization software, enabling interaction with PyMol and ChimeraX through the Model Context Protocol. It offers tools to open visualization software, execute commands directly in these applications, and save images of molecular structures. The implementation uses FastMCP to expose these capabilities as tools that can be called programmatically, making it valuable for scientific workflows where molecular visualization and manipulation are needed without leaving the conversation interface."
egoist,raindrop-mcp,15,720,"Raindrop-mcp is an MCP server for Raindrop.io bookmarking service, sponsored by ChatWise. It provides tools for searching bookmarks, creating new bookmarks, and retrieving collections through a clean API that supports multiple transport mechanisms (stdio, SSE, and HTTP). The implementation authenticates with Raindrop.io using an access token and returns responses in YAML format, making it particularly useful for AI assistants that need to help users organize, retrieve, or create web bookmarks without directly interacting with the Raindrop.io interface."
cheerlights,cheerlights-mcp,1,,"CheerLights MCP Server provides a bridge between Claude and the CheerLights IoT ecosystem, allowing AI assistants to retrieve current colors and history from the global light synchronization project. Built by Hans Scharler, this Python implementation uses FastMCP and httpx to connect with the ThingSpeak API, offering tools to fetch the current CheerLights color and view recent color change history. The server parses timestamp data into readable formats and includes proper error handling, making it ideal for IoT enthusiasts who want to integrate CheerLights data directly into their AI conversations without leaving the interface."
cheffromspace,mcpcontrol,70,,"This Windows control server leverages nut.js and the Model Context Protocol to enable remote automation of Windows systems. Developed by an unnamed author, it provides a TypeScript-based interface for programmatically controlling mouse movements, keyboard input, and screen captures on Windows machines. The implementation uses Express for the server, Jimp and Sharp for image processing, and Clipboardy for clipboard access. It's designed for scenarios requiring remote Windows automation, such as automated testing, remote administration, or building AI-assisted Windows control systems that can interact with desktop applications via natural language commands."
chemiguel23,memorymesh,173,,"MemoryMesh, developed by CheMiguel23, is a local knowledge graph server that enables AI assistants like Claude to store, update, and recall structured information. It features dynamic schema-based tools, relationship modeling, and AI-aware interfaces for maintaining consistent data. Built on the Knowledge Graph Memory Server from MCP, MemoryMesh adds custom schemas, metadata expansion, and event tracking. It integrates seamlessly with Claude Desktop on macOS and Windows, facilitating natural language interactions for world-building and storytelling. While originally designed for text-based RPG scenarios, MemoryMesh is adaptable for social networks, organizational planning, or other structured data use cases requiring persistent information management and retrieval in AI-assisted creative and analytical tasks."
chenhunghan,mcp-k8s-lens,0,,"MCP-K8s-Lens provides a bridge between Claude and the Kubernetes Lens desktop application, enabling AI assistants to interact with and analyze Kubernetes clusters through automated UI interactions. Built by Hung-Han Chen, this implementation uses Playwright to control the Lens Desktop application, offering tools for taking screenshots of the interface and capturing console logs with filtering capabilities. The server runs on stdio transport for seamless integration with Claude Desktop, making it particularly valuable for DevOps engineers who need AI assistance with Kubernetes cluster management without leaving their conversation interface."
chenningling,redbook-search-comment-mcp,7,,"RedBook-Search-Comment-MCP is a Python-based MCP server that enables AI assistants to search and analyze content from Xiaohongshu (Little Red Book), a popular Chinese social media platform. Built with Playwright for browser automation, the implementation provides tools for retrieving comments and search results from Xiaohongshu, allowing AI systems to access real-time social media data without direct API access. The server handles web scraping complexities including authentication, pagination, and content extraction, making it valuable for market research, trend analysis, and social media monitoring use cases focused on the Chinese consumer market."
chenxilol,perplexity-mcp-go,4,,"Perplexity Search MCP Server provides a Go-based interface to the Perplexity AI search API, enabling large language models to perform real-time web searches with customizable parameters. The implementation supports multiple Perplexity models including Sonar Pro, Deep Research, and Reasoning variants, with options to filter results by recency, limit searches to specific domains, and control response characteristics like temperature and token count. Built with the mcp-go library, this server facilitates integration between Claude and other LLMs with Perplexity's search capabilities, making it valuable for applications requiring up-to-date information retrieval with citation support."
chew-z,researchmcp,1,,"ResearchMCP provides internet research capabilities through Perplexity AI's API, enabling AI assistants to retrieve up-to-date information on a wide range of topics. The server exposes a 'research' tool that accepts natural language queries, processes them through Perplexity's Sonar models, and returns comprehensive research reports with source citations. It features robust error handling with degraded mode operation, configurable retry mechanisms for network issues, and structured logging for better debugging. Particularly valuable for applications requiring factual, current information without leaving the conversation interface."
chiaoteni,mcp-github-helper,0,,"GitHub PR Helper is an MCP server implementation that enables AI assistants to interact with GitHub repositories through the GitHub CLI. It provides tools for creating pull requests and adding line-specific comments to PRs, handling authentication through either environment variables or existing GitHub CLI credentials. The server exposes these capabilities through both a REST API and an MCP interface, making it particularly valuable for developers who want to streamline their code review workflows and PR management directly from AI conversations."
chigwell,telegram-mcp,94,,"Telegram MCP Server provides a bridge between Claude and Telegram messaging, enabling direct interaction with Telegram chats without leaving the conversation interface. Built using Python, Telethon, and the MCP Python SDK, it exposes three core tools: retrieving chat lists, fetching messages from specific chats, and sending messages to contacts. The implementation authenticates with the Telegram API using credentials stored in environment variables and integrates seamlessly with Claude Desktop through a simple configuration. Particularly valuable for users who want to monitor or participate in Telegram conversations while working with Claude."
chikingsley,browser-tools-mcp,7,220792,"Browser Tools MCP provides web browsing capabilities for AI assistants through the @agentdeskai/browser-tools-mcp package. It runs as a Node.js application in a Docker container, configurable via smithery.yaml to adjust port settings and log levels. The implementation uses a non-root user for security and supports both standard and Server-Sent Events (SSE) communication modes. This tool enables AI models to interact with web content, making it valuable for workflows requiring web scraping, content analysis, or automated browsing tasks."
chriscarrollsmith,taskqueue-mcp,13,3264,"TaskQueue MCP Server provides a structured task management system for AI assistants, enabling them to break down complex projects into manageable tasks with progress tracking and user approval checkpoints. Developed by Christopher C. Smith, this TypeScript implementation uses the Model Context Protocol to expose tools for project planning, task creation, status updates, and completion approvals through both a server interface and companion CLI utility. The server supports multiple LLM providers (OpenAI, Google, Deepseek) for generating project plans and includes features like auto-approval, task recommendations, and detailed progress visualization. Ideal for collaborative workflows where AI assistants need to maintain structured progress on multi-step tasks with human oversight."
chrishayuk,mcp-code-sandbox,6,,"MCP Code Sandbox provides secure, isolated environments for executing Python code through multiple backend options including E2B and Firecracker microVMs. Built with a modular architecture, it offers tools for sandbox creation, code execution, file operations, package installation, and data visualization through chart generation. The implementation features an abstract interpreter interface that allows seamless switching between execution backends, robust error handling, and resource cleanup mechanisms. This server is particularly valuable for AI assistants that need to run untrusted code, test programming solutions, generate data visualizations, or interact with files in a controlled environment without security risks."
chris-june,mcp-server,0,,"Role-Context MCP Server enables AI assistants to maintain distinct expert personas through role-based context management. It provides tools for creating and managing specialized roles (like Marketing Expert or Songwriter), each with its own memory, tone, and domain expertise. The implementation features a memory management system with vector search capabilities for retrieving relevant context, real-time context switching based on triggers, and integration with OpenAI's GPT-4o-mini model. Particularly valuable for applications requiring consistent AI personalities across different domains without context bleed between roles."
chris-miaskowski,custom-gitlab-mcp-server,0,,"This custom GitLab MCP server provides integration with GitLab repositories, fixing schema validation issues present in the standard implementation. Built with Node.js and the Model Context Protocol SDK, it enables AI assistants to search repositories, manage files, create issues and merge requests, fork repositories, and create branches. The implementation uses Zod for robust schema validation and includes specific fixes for the search_repositories tool. It requires a GitLab Personal Access Token for authentication and can be configured to work with both gitlab.com and self-hosted GitLab instances."
christian561,gel-mcp-server,8,,"This MCP server implementation provides a bridge between LLM agents and Gel databases, enabling automated schema discovery, query validation, and execution of EdgeQL and TypeScript queries. Developed by Christian561, it leverages the Model Context Protocol SDK and Gel query builder to offer tools for describing database schemas, validating EdgeQL syntax, and executing queries. The server is designed for use cases requiring AI-assisted database interactions, such as automated data analysis, query generation, and database management tasks."
cremich,promptz-mcp,0,335,"Provides a bridge to the promptz.dev platform, enabling AI assistants to directly access and use prompts without manual copy-pasting. Built by Christian Bonzelet, this TypeScript server implements two primary tools for listing and retrieving prompts, reducing context switching for developers and content creators by seamlessly integrating the promptz.dev prompt library into AI workflows."
christianhinge,dicom-mcp,28,,"DICOM MCP Server enables AI assistants to interact with medical imaging systems through standard DICOM networking protocols. It provides tools for querying patient information, studies, series, and instances from DICOM servers, as well as extracting text from encapsulated PDF documents stored in DICOM format. Built on pynetdicom, the server supports multiple DICOM nodes, configurable calling AE titles, and various attribute presets for different query levels, making it particularly valuable for medical professionals and researchers who need to access and analyze medical imaging metadata without leaving their AI assistant conversation."
christophenglisch,keycloak-model-context-protocol,19,1106,"This Keycloak MCP server, developed by Christoph Englisch, provides a streamlined interface for managing Keycloak users and realms. It integrates with the Keycloak Admin Client to offer essential operations like user creation, deletion, and listing, as well as realm management. The implementation is designed for simplicity and ease of use, making it ideal for developers and administrators who need to automate Keycloak tasks or integrate Keycloak management into their workflows. It's particularly useful for scenarios involving user provisioning, access control, and identity management across multiple realms."
christophersutton,instantdb-mcp,0,,"An InstantDB MCP server that provides tools for querying and managing data through the InstantDB Admin SDK. Enables developers to interact with their InstantDB applications via a standardized interface, supporting operations like executing database queries, retrieving query results, and serving code examples across different usage contexts like admin access, CLI interactions, and data modeling."
christopherwoodall,nmap-mcp,1,,"NMAP MCP Server provides a bridge to the popular network scanning tool Nmap, enabling AI assistants to perform network reconnaissance and banner grabbing through a structured API. The implementation offers two main tools: network scanning with customizable port ranges and script options, and TCP banner grabbing for service identification. Built with security considerations in mind, the server handles subprocess execution safely and includes proper error handling for timeouts and connection issues. This server is particularly valuable for security professionals and network administrators who need to discover hosts, identify services, or assess network vulnerabilities through natural language interactions."
appwrite,mcp,36,,"This MCP server provides a comprehensive interface to Appwrite's database functionality. Developed by Christy Jacob, it enables AI-assisted workflows to interact with Appwrite databases, collections, attributes, documents, and indexes. The server supports operations like creating and managing databases, defining collection schemas, performing CRUD operations on documents, and creating custom indexes. It's particularly useful for applications requiring flexible database management, complex data modeling, or integration with Appwrite's backend services."
chroma-core,chroma-mcp,119,23120,"Chroma MCP Server provides vector database integration for LLM applications, enabling AI models to create and manage collections of data with vector search capabilities. Built by Chroma Core, it supports multiple client types (ephemeral, persistent, HTTP, and cloud), offers comprehensive collection management tools, and enables document operations including adding, querying, and retrieving with advanced filtering options. The implementation integrates seamlessly with Claude Desktop through simple configuration options and supports environment variables for flexible deployment, making it ideal for workflows requiring memory capabilities such as knowledge bases and context-aware conversations."
qoxogus,spring-ai-chrome-mcp-server,3,,"Spring AI Chrome MCP Server provides a bridge between AI assistants and web browsers using Selenium WebDriver. This Java implementation leverages Spring Boot and Spring AI to expose Chrome browser automation capabilities as tools that can be called by AI models. The server sets up a WebDriverManager to handle Chrome driver installation automatically and exposes browser automation functionality through the ChromeToolService. It's particularly useful for AI assistants that need to perform web scraping, automated testing, or any task requiring direct browser interaction without requiring users to write complex browser automation code."
lxe,chrome-mcp,13,,"Chrome MCP Server provides fine-grained control over a Chrome browser instance through the Chrome DevTools Protocol (CDP). It enables AI assistants to navigate web pages, interact with elements, type text, and extract page content through a set of specialized tools. The server implements SSE transport for the Model Context Protocol and includes features like automatic handling of dynamic content, mutation tracking, and prevention of new window/tab openings. Particularly valuable for workflows requiring web automation, form filling, or content extraction directly within conversation interfaces."
chromewillow,greyhack-mcp-server,1,,"Grey Hack MCP Server provides a specialized toolkit for the Grey Hack game, enabling AI assistants to search GitHub for code examples, validate scripts against the game's API, generate common script templates, and transpile GreyScript to JavaScript. The implementation offers four main tools: searching GitHub repositories for Grey Hack code, validating scripts against official API documentation, generating templates for common game tasks like port scanning and password cracking, and transpiling between GreyScript and JavaScript. Built with TypeScript using the Model Context Protocol SDK, this server is particularly valuable for Grey Hack players who want to develop, validate, and discover scripts without leaving their AI assistant interface."
chromewillow,mcp-forge,0,,"MCP Forge is a powerful server generator for creating Model Context Protocol (MCP) servers with multiple template options including basic, web search, and database configurations. It provides utility functions for generating server templates, creating Cursor IDE integration configurations, and generating deployment instructions, making it easy to quickly bootstrap and configure new MCP servers with standardized structures and best practices."
chromindscan,chromia-mcp,1,,"This Chromia MCP server, developed by an unnamed author, enables AI assistants to interact with the Chromia blockchain and wallet for sending $CHR transactions. Built with TypeScript and leveraging libraries like @chromia/ft4 and @goat-sdk/wallet-chromia, it abstracts the complexities of blockchain interactions, allowing AI systems to easily incorporate cryptocurrency operations into their workflows. The server integrates with the OpenAI API for AI capabilities and uses environment variables for configuration. It's designed to be run as a local server, with setup instructions for integrating with Claude's desktop application. This implementation is particularly useful for developers and researchers exploring AI-assisted cryptocurrency management, enabling use cases like automated transactions, wallet monitoring, and blockchain-based decision making."
chronulusai,chronulus-mcp,55,8026,"The Chronulus MCP Server enables Claude to interact with Chronulus AI's forecasting and prediction agents, allowing users to analyze time series data and generate forecasts through natural language. Developed by Chronulus AI, this implementation is built using Python and integrates with the Chronulus API to provide specialized time series forecasting capabilities. The server can be deployed using pip, Docker, or uvx, and requires a Chronulus API key for authentication. It's particularly useful for users who need to perform time series analysis, generate predictions, and visualize forecasting data directly within their Claude conversations."
chrusic,todoist-mcp-server-extended,14,,"This extended Todoist MCP server implementation enhances task management capabilities by integrating with the Todoist API. Developed by Chrusic, it offers a range of tools for project, section, task, and label management. The server provides functionalities such as creating and updating projects, managing tasks with natural language processing, and handling personal labels. It is designed for users who need advanced Todoist features within the MCP ecosystem, making it particularly useful for AI assistants or applications requiring detailed task and project organization."
chuanmingliu,mcp-webresearch,11,,"MCP-WebResearch provides AI assistants with web browsing capabilities for conducting research through Google searches and webpage content extraction. Built with TypeScript using Playwright for browser automation and Turndown for HTML-to-Markdown conversion, it offers tools to search Google, visit webpages, and capture screenshots while handling common challenges like consent dialogs and bot detection. The implementation includes an agentic research prompt that guides assistants through iterative research workflows, making it particularly valuable for deep topic exploration, fact-checking, and information gathering directly within AI conversations."
chulanpro5,evm-mcp-server,0,,"EVM MCP Server provides a bridge to Ethereum Virtual Machine (EVM) compatible blockchains, enabling AI assistants to interact with blockchain networks like Binance Smart Chain. Built by Etheral, it offers tools for querying blockchain data including balances, transactions, and smart contracts, while also supporting token transfers and swaps through PancakeSwap integration. The server exposes both HTTP and stdio interfaces, implements comprehensive resources for blockchain exploration, and includes wallet management capabilities—making it valuable for blockchain analysis, token transfers, and DeFi interactions without leaving the conversation context."
chy168,google-chat-mcp-server,6,,"A lightweight MCP server for Google Chat integration that enables programmatic access to Google Chat spaces and messages. Developed by Zz Chen, this implementation provides OAuth2-based authentication and tools for listing chat spaces and retrieving messages with flexible date filtering. Useful for developers needing automated interactions with Google Chat data."
cicatriiz,healthcare-mcp-public,1,,"Healthcare MCP Server provides AI assistants with access to medical information through five specialized tools: FDA drug information lookup, PubMed research search, Health.gov topic retrieval, clinical trials search, and ICD-10 code lookup. The implementation features efficient caching to reduce API calls, anonymous usage tracking, and supports both stdio mode for Cline integration and HTTP/SSE mode for web clients. Built with FastMCP and deployed via Docker or Railway, it's particularly valuable for healthcare professionals, researchers, and patients who need to access evidence-based medical information without leaving their AI assistant interface."
circleci-public,mcp-server-circleci,20,2569,"A specialized server implementation for the Model Context Protocol (MCP) designed to integrate with CircleCI's development workflow. This project serves as a bridge between CircleCI's infrastructure and the Model Context Protocol, enabling enhanced AI-powered development experiences."
ckanthony,gin-mcp,18,,"Gin-MCP is a zero-configuration bridge that automatically exposes existing Gin API endpoints as Model Context Protocol tools. Developed by Anthony WK Chan, this implementation allows developers to integrate their Gin applications with MCP-compatible clients like Cursor with minimal setup—just a single line of code. The library intelligently discovers routes, infers schemas from Go structs, and handles all the MCP communication details through Server-Sent Events. Particularly valuable for teams looking to make their existing APIs instantly accessible to AI assistants without writing tedious boilerplate code."
ckanthony,openapi-mcp,35,,"OpenAPI-MCP is a dockerized server that automatically converts Swagger/OpenAPI specifications into Model Context Protocol toolsets, enabling AI agents to interact with any API without additional coding. Built in Go, it handles both OpenAPI v2 and v3 formats, securely manages API keys, supports filtering operations by tags, and injects custom headers for authentication. The implementation features a robust connection manager for Server-Sent Events, JSON-RPC request handling, and dynamic request construction with parameter mapping. Particularly valuable for developers who want to quickly expose existing APIs to AI assistants like Cursor without writing custom MCP implementations for each service."
ckreiling,mcp-server-docker,364,,"This MCP server, developed by ckreiling, provides seamless integration with Docker containers. It implements a Python-based interface for managing containers, images, networks, and volumes through the Docker SDK. The server exposes tools for common Docker operations like creating, running, and removing containers, as well as fetching logs and stats. By leveraging natural language processing, it enables AI assistants to easily compose and manage Docker deployments through conversational interactions. The implementation is particularly useful for scenarios requiring dynamic container orchestration, such as deploying microservices, setting up development environments, or managing containerized applications through natural language commands to an AI assistant. The server focuses on core Docker functionality while prioritizing safety by restricting access to sensitive options."
ckz,edu_data_mcp_server,0,,"An MCP server that provides access to the Urban Institute's Education Data API, enabling AI assistants like Claude to retrieve and analyze educational statistics. The server exposes tools for fetching detailed and aggregated education data across various levels (schools, districts, universities), sources (CCD, IPEDS, CRDC), and topics (enrollment, finance, assessment). Built with TypeScript and the MCP SDK, it simplifies complex data retrieval operations through structured parameters and filters, making it valuable for educational research, policy analysis, and data visualization without requiring specialized API knowledge."
ckz,flux-img-mcp,1,,"This MCP server provides image generation capabilities using the Flux Schnell model on Replicate. Developed by ckz, it offers a simple interface for generating images based on text prompts. The server is built with TypeScript and integrates with the Model Context Protocol SDK. It's designed for use cases requiring AI-powered image creation, such as content generation, visual brainstorming, or enhancing creative workflows."
ckz,flux-schnell-mcp,3,,"Flux-Schnell-MCP provides a bridge between Claude and Replicate's flux-schnell image generation model. This TypeScript implementation creates an MCP server that exposes a single 'generate_image' tool, which accepts text prompts and communicates with the Replicate API to generate images. The server runs on stdio transport for compatibility with Claude Desktop, includes error handling for API failures, and requires a Replicate API token for authentication. It's particularly useful for generating images directly within conversations without switching contexts."
mcherukara,claude-deep-research,2,,"Claude Deep Research is an MCP server that extends AI assistants' capabilities by providing unified access to web and academic information through DuckDuckGo and Semantic Scholar integrations. It enables Claude to search multiple sources, extract content from web pages, follow relevant links, and deliver structured research results with proper citations. The implementation features a multi-stage research workflow that guides users through initial exploration, synthesis, visualization, follow-up research, and comprehensive analysis, making it particularly valuable for users needing thorough, well-organized information on complex topics."
djbuildit,claude-think-mcp,0,,"Claude Think MCP enables explicit step-by-step reasoning in Claude's responses by wrapping prompts with special thinking tags when users type 'think [question]' in Cursor chat. Built with Node.js and requiring no external dependencies, it provides a lightweight way to see Claude's full analytical process, making it especially valuable for complex problem-solving, mathematical proofs, and algorithm analysis tasks where understanding the reasoning chain is important."
clay-inc,clay-mcp,2,257,"A Model Context Protocol (MCP) server for Clay (https://clay.earth). Search your email, calendar, Twitter / X, Linkedin, iMessage, Facebook, and WhatsApp contacts. Take notes, set reminders, and more.

Examples

    ""Who in my network works at Google as a Product Manager?""
    ""Who is John Smith?""
    ""Add a new contact named Jane Doe, who is a Designer at Figma.""
    ""Save a note for John Smith: 'Follow up about the Q2 report.'""
    ""Create a group called 'Investors 2025.'"""
packages,agent-toolkit,1421,37622,"Clerk is a JavaScript SDK for authentication and user management that provides a comprehensive set of tools for implementing secure authentication flows in web applications. This repository contains the core Clerk packages and various framework integrations (React, Next.js, Remix, Express, Fastify) along with playground examples demonstrating implementation across different environments. The SDK supports features like user sign-in/sign-up, organization management, session handling, and authorization based on features and plans, making it particularly useful for applications requiring robust identity management with minimal setup."
yunqiqiliang,mcp-clickzetta-server,0,,"MCP ClickZetta Server provides a bridge between AI assistants and ClickZetta databases, enabling SQL query execution and data analysis through natural language interaction. The server exposes tools for reading data with SELECT queries, writing data (when explicitly allowed), managing tables, and maintaining a memo of discovered insights. Built with Python and the MCP protocol, it features SQL write operation detection for security, configurable logging, and optional tool exclusion. This implementation is particularly valuable for data analysts who need to query ClickZetta databases, explore schema information, and document insights without leaving their AI assistant interface."
cliffhall,puzzlebox,12,,"Puzzlebox is an MCP server implementation that hosts finite state machines (puzzles) as dynamic resources that clients can subscribe to and be updated when their state changes. It enables coordination between multiple agents working on long-horizon tasks by providing a shared state machine that can transition between discrete states through valid actions, with optional guards that can prevent transitions. The server exposes tools for adding puzzles, getting snapshots of puzzle states, performing actions on puzzles, and supports resource subscriptions so clients receive real-time updates when puzzle states change, making it particularly valuable for orchestrating multi-agent workflows where different teams need to operate within distinct project phases."
codeshark-net,climate-triage-mcp,1,,"The ClimateTriage MCP server connects AI assistants to the ClimateTriage API, enabling users to search for open source issues related to climate change and sustainability. Built with TypeScript and the FastMCP framework, this implementation provides structured access to climate project issues with filtering capabilities by category, programming language, and keywords. The server transforms API responses into well-formatted results that include detailed project information, issue descriptions, and direct links to GitHub repositories. It's particularly useful for developers looking to contribute to climate-focused open source projects, researchers tracking sustainability initiatives, or organizations wanting to engage with the climate tech ecosystem."
1595901624,crypto-mcp,4,,"This MCP server provides encryption, decryption, and hashing functionalities using the crypto-js library. Developed by Cloris, it offers a standardized interface for cryptographic operations, making it easier to integrate secure data handling into AI-assisted workflows. The server is particularly useful for applications requiring data protection, secure communication, or verification of data integrity."
turinhub,cf-mcp-server,0,,"CF-MCP-Server is a collection of Cloudflare Workers that provide AI-related API integrations through the Model Context Protocol. The implementation includes three specialized workers: mcp-image-generation for creating images using Cloudflare's AI models, mcp-jina-api for extracting content from URLs and performing web searches, and mcp-tavily-api for comprehensive web search and content extraction capabilities. Each worker is built using TypeScript and deployed on Cloudflare's edge network, making them highly performant and globally available. The implementation leverages Cloudflare's infrastructure to provide secure, scalable API access for AI assistants needing image generation and web search functionality."
cloudflare,mcp-server-cloudflare,1409,60745,"This Cloudflare MCP Server, developed by Cloudflare, provides a powerful interface for language models to interact with Cloudflare's API. It enables AI agents to perform a wide range of Cloudflare-specific tasks including managing KV stores, R2 storage, D1 databases, and Workers. The implementation distinguishes itself by offering deep integration with Cloudflare's unique services and infrastructure. By leveraging Cloudflare's global network, it ensures high-performance and low-latency operations. This tool is particularly powerful for AI-driven cloud management, serverless computing, and edge network optimization, enabling more sophisticated AI assistants that can directly manipulate Cloudflare resources."
cloudflare,playwright-mcp,35,,"Playwright MCP provides browser automation capabilities through structured accessibility snapshots, enabling LLMs to interact with web pages without requiring vision models. Developed by Microsoft, this TypeScript implementation offers tools for navigation, form-filling, element interaction, and data extraction using Playwright's accessibility tree rather than pixel-based input. The server supports both snapshot mode (default) for better performance and reliability, and vision mode for screenshot-based interactions, making it particularly valuable for web testing, data extraction, and agent-driven browser automation tasks."
cloudflare,workers-mcp,491,50375,"This MCP transport for Cloudflare Workers, developed by Cloudflare, enables seamless integration of MCP capabilities into serverless edge computing environments. Built with TypeScript and leveraging Cloudflare's Workers platform, it provides a standardized interface for deploying MCP-compatible services at the network edge. The implementation supports rapid development and deployment of AI-assisted applications, taking advantage of Cloudflare's global network for low-latency, scalable MCP services. It's particularly useful for developers looking to build AI-powered applications that require edge computing capabilities, such as real-time content processing, personalized user experiences, or distributed AI inference."
HEAD,butler,3,,
HEAD,hoover,3,,cf-butler has a one-to-one relationship with a Cloud Foundry foundation. cf-hoover acts as a registry and aggregator. It queries for and aggregates cf-butler instances' data. So cf-kaizen is the home for two MCP server implementations. Consumers have a choice to configure either multiple butler client configs targeting individual cf-butler instances. Or you configure a hoover client config targeting a cf-hoover instance.
cloudwerx-dev,diffugen,10,,"DiffuGen is an AI image generation MCP server that provides a flexible interface for creating images using multiple stable diffusion models like Flux, SDXL, and SD3. Developed by CloudWerx, it supports advanced configuration options including prompt engineering, model selection, and generation parameters, with robust error handling and logging. The implementation is designed to simplify AI image generation workflows by providing a standardized, configurable tool for developers and creative professionals."
burkestar,cloudzero-mcp,2,,"CloudZero MCP server enables direct interaction with cloud cost data through the CloudZero v2 API, allowing users to query billing information, dimensions, budgets, and insights directly from Claude Desktop. Developed by Dustin Burke, it implements several specialized tools for retrieving cost data within specified date ranges, analyzing billing dimensions, and accessing budget information. The server runs as a background process on the user's machine, making it ideal for financial teams needing to visualize and analyze cloud spending patterns, identify cost centers, and discover optimization opportunities without leaving their conversation interface."
clpublic,mcp-server-cloudbrowser,0,,"A cloud-native solution specifically designed for LLM (Large Language Model) agents, providing an anti-association fingerprint browser environment and automated interaction APIs. There is no need to deploy a local environment, eliminating performance bottlenecks and operation and maintenance burdens, allowing developers to focus on the development of core logic.
Core Capabilities:
▷ Anti-association Cloud Environment: Independent fingerprint isolation in multiple environments, supporting 无痕自动化操作 (seamless automated operations).
▷ Browser Behavior Simulation: Precisely execute interactions such as web page access, element-level screenshots, dynamic data scraping, and intelligent form filling.
▷ Exclusive Adaptation for LLM: Browser behavior trajectory simulation, DOM tree parsing optimization, and structured data output.
▷ Elastic Resource Scheduling: From single-session debugging to concurrent collection at the scale of tens of thousands, automatically matching computing power requirements."
cmann50,mcp-chrome-google-search,8,1975,"This MCP tool, developed by Chris Mann, enables Google search and webpage content extraction using the Chrome browser. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a bridge between AI models like Claude and web-based information sources. The implementation focuses on automating browser interactions to perform searches and extract content, making it easier for AI systems to access up-to-date web information. It's particularly useful for enhancing AI capabilities with real-time web data, enabling use cases like fact-checking, research assistance, and content generation that requires current online information."
HEAD,reddit-mcp,14,,"MCP Reddit is a server that enables AI assistants to extract content from Reddit discussions without requiring an API key. Developed by Andi Ellison, this Python implementation uses both API and HTML parsing methods to retrieve post metadata and comments from Reddit threads. The server exposes a single tool called 'reddit_extract' that accepts a Reddit URL and returns formatted discussion data including the post content, author information, and comments. It's particularly useful for research, content analysis, and staying updated on Reddit discussions while avoiding API rate limits and authentication requirements."
cnosuke,mcp-command-exec,1,,"MCP Command Executor is a secure server that enables safe remote command execution via the MCP protocol, with robust security controls like command allowlisting, direct command execution without shell invocation, and strict environment variable management. Created by cnosuke, it provides a controlled mechanism for executing predefined system commands with granular configuration options, making it useful for scenarios requiring restricted, auditable command execution across different environments."
cnosuke,mcp-meilisearch,0,,"This MCP server implementation provides a Go-based wrapper for Meilisearch, enabling large language models to access Meilisearch's search capabilities through the Model Context Protocol. Developed by cnosuke, it offers tools for index management, document operations, and search functionality, allowing AI assistants like Claude to perform powerful search operations against Meilisearch indexes. The lightweight server supports features such as health checks, creating indexes, adding documents, and executing complex searches with filtering and sorting options, making it ideal for applications requiring AI-assisted information retrieval from structured data."
cnych,seo-mcp,11,2270,"Backlinks MCP is a FastMCP service that retrieves backlink information for any domain using Ahrefs' data. Developed by cnych, it solves CAPTCHA challenges automatically using CapSolver's API to access Ahrefs' backlink checker, then caches signature tokens to minimize redundant requests. The server exposes a tool that returns detailed backlink data including anchor text, domain rating, and URL information. This implementation is particularly useful for SEO analysis, competitive research, and link building strategies where understanding a website's backlink profile is essential."
co-browser,browser-use-mcp-server,396,7280,"Browser Use MCP Server provides an async browser automation server using OpenAI's GPT-4o model. It enables remote browser tasks through a flexible MCP interface, allowing AI agents to navigate websites, perform actions, and extract content with configurable browser contexts and detailed task tracking."
sdi2200262,eclass-mcp-server,3,,"eClass MCP Server provides integration with the Open eClass platform, specifically tailored for UoA's SSO authentication system. Built with Python and the MCP protocol, it handles authentication, session management, and course access through a modular architecture that separates concerns like HTML parsing and course management. The server exposes tools for logging in, retrieving course lists, and managing authentication state, making it valuable for students and faculty who need to access eClass resources through AI assistants."
codealive-ai,codealive-mcp,6,,"CodeAlive MCP Server provides a bridge between AI assistants and the CodeAlive platform, enabling deep code understanding for large codebases. It offers tools for semantic code search, repository exploration, and context-aware chat completions that leverage CodeAlive's ability to analyze entire codebases including documentation and dependencies. The server integrates with popular AI clients like Claude Desktop, Cursor, and VS Code (GitHub Copilot), making it particularly valuable for developers who need to quickly find relevant code snippets, understand project structure, and get precise answers about implementation details without extensive manual searching."
codebywaqas,mrconfluencelinker-mcp-server,0,,"MRConfluenceLinker-mcp-server provides a bridge between GitLab merge requests and Confluence documentation, enabling AI assistants to fetch, analyze, and document code changes. The server offers tools to retrieve merge request details, perform code analysis (including file type breakdowns and change statistics), and automatically generate structured documentation in Confluence pages. Built with comprehensive error handling and detailed logging, it's particularly valuable for development teams who want to maintain up-to-date documentation of their code changes without leaving their conversation interface."
fkesheh,code-context-mcp,7,,"Code Context MCP server that provides semantic code search and understanding capabilities by cloning git repositories, splitting code into semantic chunks, and generating embeddings using HuggingFace transformers. Built with TypeScript and SQLite, it features intelligent code splitting based on file types, vector similarity search, and keyword filtering. Particularly valuable for developers who want to search and understand large codebases through natural language queries without leaving their AI assistant interface."
codefriar,sf-mcp,25,448,"SF-MCP is a Node.js server that exposes Salesforce CLI functionality through the Model Context Protocol, allowing AI assistants to interact with Salesforce orgs. Developed by Kevin Poorman, it dynamically discovers and registers all available SF CLI commands as MCP tools, supports project-specific command execution through configurable roots, and includes caching mechanisms for improved performance. The implementation handles contextual command execution within Salesforce project directories, making it particularly valuable for developers and administrators who need to perform Salesforce operations like querying data, deploying code, or managing orgs through AI assistants."
yy1588133,code-merge-mcp,14,,"Code-merge-mcp is an MCP server that enables AI assistants to analyze and merge code from multiple files in a project. Built with Node.js and the official MCP SDK, it provides tools for retrieving file trees, merging content from multiple files with optional compression, and analyzing code metrics like line counts and function counts. The implementation handles file filtering through .gitignore rules and custom blacklists, while efficiently processing both individual files and entire directories. This server is particularly useful for code review workflows, project analysis, and providing AI assistants with comprehensive context about codebases without requiring them to process each file individually."
codergamester,mcp-unity,437,,"MCP Unity currently provides the following tools:

execute_menu_item: Executes Unity menu items (functions tagged with the MenuItem attribute)
select_object: Selects game objects in the Unity hierarchy
package_manager: Installs, removes, and updates packages in the Unity Package Manager
run_tests: Runs tests using the Unity Test Runner
notify_message: Displays messages in the Unity Editor
MCP Unity currently provides the following resources:

get_menu_items: Retrieves a list of all available menu items in the Unity Editor to facilitate execute_menu_item tool
get_hierarchy: Retrieves a list of all game objects in the Unity hierarchy
get_console_logs: Retrieves a list of all logs from the Unity console
get_packages: Retrieves information about installed and available packages from the Unity Package Manager
get_assets: Retrieves information about assets in the Unity Asset Database"
coderjun,shaka-packager-mcp-server,1,,"Shaka Packager MCP Server provides a bridge between AI assistants and Google's Shaka Packager media processing tool, enabling video analysis, transcoding, and packaging operations through a standardized interface. Developed by Jun Heider, this Python implementation handles file path translation between Docker and host environments, offers robust error handling with structured responses, and includes pre-configured prompts for common operations like MP4 to TS conversion, VOD/live streaming packaging, content encryption, and ad insertion. The server is particularly useful for media workflow automation, streaming content preparation, and video format conversion tasks without requiring direct command-line interaction with Shaka Packager."
code-yeongyu,perplexity-advanced-mcp,21,3193,"Perplexity Advanced MCP provides a flexible interface for AI assistants to interact with both Perplexity and OpenRouter APIs, supporting simple queries and complex file attachments. Built by YeonGyu Kim, it offers a command-line interface that accepts API keys for either service through a simple configuration schema, making it easy to switch between providers. The implementation is containerized with Docker for easy deployment and uses the uv package manager for dependency management. It's particularly valuable for workflows requiring advanced search capabilities or when working with document-based queries that need file context."
coding-solo,godot-mcp,334,,"A Model Context Protocol (MCP) implementation for the Godot game engine, allowing game developers to integrate AI capabilities into their Godot projects."
codyde,mcp-file-tool,0,,"This MCP server implementation provides file system operations through a standardized interface. Built using the Model Context Protocol SDK, it offers tools for reading, creating, and listing files on the local file system. The server includes features like performance monitoring through Sentry integration and communicates via stdin/stdout using the MCP protocol, making it suitable for AI models to perform file operations in a controlled manner."
codyde,mcp-firecrawl-tool,0,,This MCP server provides tools for crawling websites and translating content into model context using the Firecrawl API. It offers two main functionalities: scraping websites in various formats and extracting structured data based on custom schemas. The implementation integrates with Sentry for error tracking and is designed to enhance AI-assisted workflows that require web data extraction and processing.
codyde,mcp-sentry-ts,13,,"This MCP server implementation provides a robust integration with the Sentry error tracking platform. Developed using TypeScript, it offers tools for managing projects, analyzing issues, retrieving event details, and listing error events and replays. The server leverages Sentry's API to enable comprehensive error monitoring and debugging capabilities. It's designed for use cases requiring detailed error analysis, project management, and user session replay within software development and operations environments."
cognitive-stack,orion-vision-mcp,2,596,"Orion Vision MCP provides Azure Form Recognizer integration for document analysis and data extraction. Built with TypeScript, this server offers tools for analyzing general documents and extracting structured data from specific form types including receipts, invoices, ID documents, and business cards. The implementation handles document retrieval from URLs, processes them through Azure's Document Intelligence services, and returns structured JSON results, making it valuable for automated document processing workflows and form data extraction tasks."
cognitive-stack,hermes-search-mcp,2,399,"Hermes Search MCP provides a bridge to Azure Cognitive Search, enabling AI assistants to search, index, and manage documents in Azure search indexes. Built with TypeScript and the FastMCP framework, it offers tools for executing search queries with filtering options, indexing or updating documents, and deleting indexes. The server supports both stdio and SSE transport protocols, making it suitable for integration with various AI platforms that need to access and manipulate structured data stored in Azure Cognitive Search."
cognitive-stack,search-stock-news-mcp,2,237,"Search Stock News MCP Server provides a specialized tool for retrieving stock-related news using the Tavily API. Built with TypeScript and FastMCP, it enables AI assistants to search for financial news about specific stocks by symbol and company name, with configurable parameters for search depth, result filtering, and domain inclusion/exclusion. The server processes multiple search query templates in parallel, filters results based on relevance scores, and returns structured news data including titles, URLs, content snippets, and publication dates. It's particularly valuable for financial analysts, investors, and chatbots that need to access current stock market news and company information from Vietnamese financial news sources like CafeF and Nguoi Quan Sat."
cognitive-stack,volume-wall-detector-mcp,2,302,"Volume Wall Detector MCP Server provides real-time analysis of stock trading data to identify significant price levels (volume walls) where substantial trading activity occurs. Built with TypeScript and MongoDB integration, it offers tools for fetching order book data, retrieving recent trades, and analyzing volume distribution across price points. The server calculates volume and value imbalances, tracks regular and after-hours trading patterns, and identifies key support/resistance levels based on accumulated trading activity. Particularly valuable for traders seeking to understand market structure, identify potential price reversal points, and analyze buying/selling pressure at different price levels."
cohnen,mcp-google-ads,67,,"This MCP server implementation provides integration with Google Ads API, enabling AI assistants to access and manipulate advertising campaign data directly within conversations. The server appears to have encountered an error during setup, indicating it may be in development or experiencing configuration issues with the repository 'cohnen/mcp-google-ads'. When functioning properly, it would likely allow for campaign management, performance analysis, and optimization of Google Ads accounts without leaving the conversation interface."
zhangzhongnan928,mcp-coinbase-commerce,0,,"MCP Coinbase Commerce server enables AI assistants to generate and manage cryptocurrency payment links through the Coinbase Commerce API. The implementation provides two main tools: create-charge for generating payment links with customizable amounts and currencies, and get-charge for retrieving details of existing payments including their status and transaction history. Built with TypeScript and the MCP SDK, it securely handles API authentication and error states while providing a standardized interface for payment processing. This server is particularly valuable for businesses and developers who want to accept cryptocurrency payments through conversational AI without manually configuring the Coinbase Commerce API."
matthewlaw1,near-intents-mcp-agentkit,3,,"This MCP server, developed by Coinbase, provides AI agent and task management capabilities using the CrewAI framework. Built with Python and leveraging the OpenAI API, it offers tools for creating agents with specific roles and goals, defining tasks, and orchestrating multi-agent workflows. The implementation focuses on flexibility and ease of use, allowing for the creation of diverse AI agent teams to tackle complex tasks. It's particularly useful for developers and researchers working on collaborative AI systems, enabling use cases such as automated research, data analysis, and problem-solving across various domains without extensive AI infrastructure setup."
coinpaprika,dexpaprika-mcp,4,724,"DexPaprika MCP Server provides access to decentralized exchange (DEX) data across multiple blockchain networks through a standardized interface. Developed by CoinPaprika, this implementation offers tools for querying network information, DEX listings, liquidity pool metrics, token details, and price analytics without requiring API keys. The server handles rate limiting gracefully and formats all responses as structured JSON, making it ideal for AI assistants that need to analyze cryptocurrency market data, compare liquidity pools, or track token performance across different blockchain ecosystems."
coleam00,mcp-mem0,176,,"MCP-Mem0 is a server implementation that integrates Mem0's long-term memory capabilities with AI agents through the Model Context Protocol. Developed by Cole Medin, it provides three essential memory management tools: storing information with semantic indexing, retrieving all stored memories, and finding relevant memories using semantic search. The server supports multiple LLM providers (OpenAI, OpenRouter, Ollama) and uses PostgreSQL for vector storage, making it particularly valuable for applications requiring persistent memory across conversations, such as personal assistants, knowledge management systems, or any AI agent that needs to recall past interactions and information."
colesmcintosh,numpy-mcp,1,,"This MCP server implementation provides NumPy-based mathematical operations and statistical analysis tools. It offers functions for matrix multiplication, eigendecomposition, polynomial fitting, and basic statistical measures. Developed using FastMCP, it's designed for AI assistants requiring advanced numerical computations, data analysis, and linear algebra operations in Python environments."
colygon,zkpmcp,9,,"zkMCP provides a Model Context Protocol server for zero-knowledge proofs using circom, enabling AI assistants to build circuits, perform trusted setup, generate proofs, and verify proofs without revealing sensitive data. Implemented in TypeScript, the server executes shell scripts that interact with circom and snarkjs, exposing four standardized tools through the MCP SDK: building circuits from Circom files, performing trusted setup, generating proofs, and verifying proofs. The repository includes a practical age verification example that demonstrates how users can prove they meet age requirements without revealing their actual birth date, showcasing the privacy benefits of zero-knowledge proofs for real-world applications."
conechoai,openai-websearch-mcp,36,31105,"The OpenAI WebSearch MCP Server provides AI assistants with access to real-time web search capabilities through OpenAI's websearch functionality. Developed by ConechoAI, this Python-based implementation allows Claude and other AI assistants to search the web during conversations, retrieving up-to-date information not available in their training data. The server supports configurable search context sizes and user location parameters, making it particularly valuable for answering questions about current events, retrieving recent information, or accessing specialized knowledge that may be outside an assistant's knowledge cutoff. It can be easily installed via pip or uv and configured for use with Claude.app or Zed editor."
conechoai,time-mcp-local,1,6229,"This MCP server provides time and timezone conversion capabilities, enabling LLMs to access current time information and perform timezone conversions using IANA timezone names. It features automatic system timezone detection and offers tools for getting current time in specific timezones and converting times between different timezones. The server is designed for integration with AI assistants and applications requiring accurate and localized time-based functionalities."
bootcamptoprod,spring-boot-ai-confluence-mcp-server,1,,"A Spring Boot AI-powered MCP server that enables seamless interaction with Confluence Cloud. This implementation provides tools for managing Confluence spaces and documents, including listing spaces, counting documents, creating new content, and extracting document metadata and history. Built with Spring AI's tool callback framework, it securely connects to Confluence using API token authentication and exposes a set of well-defined operations that AI assistants can leverage to work with organizational knowledge stored in Confluence. Ideal for enterprise use cases where AI needs to access, create, or analyze documentation in Confluence workspaces."
mgsrevolver,consolespy,7,,"ConsoleSpy is an MCP server implementation that captures browser console logs and makes them available in the Cursor IDE. It consists of a server that captures logs, an MCP server that interfaces with Cursor, and a browser extension for sending logs. The tool supports both automatic and manual logging, provides a web interface for viewing logs, and offers easy setup and configuration for seamless integration into development workflows."
f-inc,containerinc-mcp,7,816,"@container-inc/mcp enables seamless deployment of applications to Container Inc.'s platform directly from code editors. Built by Founders Inc., this TypeScript-based server implementation uses GitHub authentication to manage repository creation, Docker image publishing, and code deployment. It features a three-step workflow: authenticating with GitHub, setting up Git repositories, and initiating containerized deployments. The server stands out by abstracting away complex deployment processes through simple editor commands, making it particularly valuable for developers looking to quickly deploy Dockerized applications without leaving their development environment."
viveksingh-ctrl,mcp-contentstack,1,,"This MCP server implementation provides a bridge to Contentstack's BrandKit product, enabling AI assistants to manage knowledge vault content. It offers CRUD operations for adding, updating, deleting, and searching content in the knowledge vault through a FastMCP server with authenticated API endpoints. The implementation requires environment variables for authentication tokens and brand kit UID, making it suitable for content management workflows that need to programmatically interact with Contentstack's knowledge vault system."
context-hub,generator,85,,"Context Generator is a PHP-based tool for creating structured documentation from various sources including files, GitHub repositories, Git diffs, and URLs. It features a modular architecture with a powerful configuration system that supports imports, variables, and custom modifiers to transform content. The implementation includes an MCP server component that exposes prompts and tools for AI assistants to interact with the filesystem, retrieve project structure, and execute custom commands. Particularly useful for generating comprehensive code documentation, analyzing changes in projects, and providing context for AI-assisted development workflows."
paulotaylor,voyp-mcp,8,311,"This MCP server, developed by Control Space BV, provides integration with the VOYP API for call automation and assistance. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for interacting with VOYP's call center and conversational AI capabilities. The implementation focuses on providing a standardized interface for AI-powered call handling, enabling use cases such as automated customer service, call routing, and intelligent voice response systems. By connecting AI models with telephony systems, this server allows for sophisticated call automation scenarios, enhancing efficiency and customer experience in call center environments."
cookey-monster,ebaymcpserver,1,,"The server provides a single tool:

list_auction: Scan ebay for auctions. This tool is helpful for finding auctions on ebay.
Required ""query"" argument for the search query
Optional ""ammount"" argument for ammount of results
defaults to 0
Returns result from Ebay's REST API"
uh-joan,cortellis-mcp-server,1,1536,"MCP server for Cortellis drug database search and ontology exploration, enabling AI assistants to query pharmaceutical data through a standardized interface. Developed by Joan Saez-Pons, it provides two main tools: search_drugs for finding medications based on criteria like company, indication, phase, or technology; and explore_ontology for discovering taxonomy terms within the Cortellis database. The implementation authenticates with the Cortellis API using digest authentication and supports both stdio and HTTP transport methods, making it valuable for researchers and pharmaceutical professionals who need to access structured drug development information without leaving their AI assistant conversation."
cosmix,confluence-mcp,3,,"Confluence-MCP is a server implementation that provides AI assistants with direct access to Atlassian Confluence wikis. Built with TypeScript and Bun, it offers tools for retrieving, searching, creating, and updating Confluence pages through a clean interface. The server handles authentication via API tokens, transforms Confluence's storage format content into both plain text and markdown, and optimizes content for AI context windows. It includes robust error handling and content cleaning utilities, making it particularly valuable for teams who want to query and manage their knowledge base directly through AI assistants without switching contexts."
cosmix,jira-mcp,18,,"This JIRA MCP server, developed by Dimosthenis Kaponis, enables AI assistants to interact with JIRA data through the Model Context Protocol. Built with TypeScript and leveraging the JIRA REST API v3, it provides tools for searching issues, retrieving epic children, and getting detailed issue information. The implementation stands out by offering robust data cleaning features, including extraction of text from Atlassian Document Format and tracking of issue relationships. It's particularly useful for AI systems or applications needing to analyze JIRA data, automate project management tasks, or generate reports based on issue tracking information."
cosmix,linear-mcp,30,,"This Linear MCP server, developed by Dimosthenis Kaponis, integrates Linear's issue tracking system with MCP-compatible applications. Built with TypeScript and leveraging the Linear SDK, it provides tools for querying and searching Linear issues through a standardized interface. The implementation focuses on type-safety, error handling, and rate limit management. It's particularly useful for developers and project managers looking to incorporate Linear's issue tracking capabilities into their AI workflows, enabling use cases like automated issue analysis, task prioritization, and project status reporting without dealing directly with Linear's API complexities."
adairrr,cosmwasm-mcp,1,,"CosmWasm MCP Server provides a bridge between AI assistants and CosmWasm-based blockchains using cw-orchestrator. This Rust implementation enables programmatic interaction with smart contracts through a standardized interface, allowing for querying contract state, executing transactions, checking balances, and retrieving blockchain information. The server uses a stdio-based transport layer and supports configuration of chain connections through environment variables, making it particularly useful for AI agents that need to manage and interact with blockchain contracts without direct access to the underlying infrastructure."
cpage-pivotal,cloud-foundry-mcp,3,,"This Cloud Foundry MCP server, developed using Spring AI MCP, provides an LLM interface for interacting with Cloud Foundry foundations. It offers tools for managing applications, services, and resources within a Cloud Foundry environment through natural language commands. The implementation leverages the Cloud Foundry Java Client to execute operations, making it easier for AI models to perform complex Cloud Foundry tasks without deep knowledge of CF CLI commands or API endpoints. It's particularly useful for DevOps teams and developers who want to streamline Cloud Foundry management, enabling efficient application deployment, scaling, and monitoring through AI-assisted workflows."
cpage-pivotal,loot-mcp,0,,"This MCP server, developed by cpage-pivotal, provides a standardized interface for AI models to interact with Spring AI components. Built using Java and Spring Boot, it leverages the Spring AI BOM for dependency management. The implementation focuses on simplifying access to Spring AI functionalities, enabling AI assistants to utilize various AI-powered features within the Spring ecosystem. By connecting AI models with Spring AI capabilities, this server allows for sophisticated scenarios like natural language processing, machine learning model integration, and AI-driven data analysis. It's particularly useful for Java developers and organizations already using Spring frameworks who want to incorporate AI functionalities into their applications through a standardized MCP interface."
cpage-pivotal,app-advisor-mcp,2,,"This Cloud Foundry MCP Server, developed by @Albertoimpl, provides an LLM interface for interacting with Spring Application Advisor. Built using the Spring AI MCP project, it offers a streamlined way for AI models to access and utilize Spring Application Advisor's capabilities. The implementation focuses on simplifying the integration between LLMs and Spring's application analysis tools, making it easier for AI assistants to provide insights and recommendations for Spring-based applications. It's particularly useful for developers and DevOps teams looking to leverage AI for application optimization, troubleshooting, and best practice adherence in Cloud Foundry environments, without requiring deep knowledge of Spring Application Advisor's intricacies."
cpage-pivotal,time-mcp,3,,"This MCP server implementation provides an interface to the World Time API, enabling AI assistants to retrieve current time information. Developed by cpage-pivotal, it leverages the Spring AI MCP project to offer a streamlined way of accessing time data. The server is built using Java and Spring Boot, focusing on simplicity and ease of integration. It's particularly useful for AI applications that need to incorporate real-time clock information, such as scheduling assistants, time zone converters, or any system requiring accurate current time data from various locations globally."
cpbrad31,mcp_ga_511,0,,"This MCP server provides access to real-time traffic data from Georgia's 511 service. Developed by cpbrad31, it offers tools for retrieving information on traffic cameras, message signs, variable speed signs, traffic events, alerts, rest areas, ports of entry, and express lanes. The implementation is designed to integrate seamlessly with MCP clients like Claude Desktop, enabling easy access to Georgia's traffic information for various applications and analyses."
cploujoux,mcp-puppeteer,0,,"This MCP server provides browser automation capabilities using Puppeteer, enabling AI assistants to interact with web pages through a standardized interface. It offers tools for navigation, taking screenshots, clicking elements, filling forms, and executing JavaScript in a real browser environment. The implementation captures console logs and manages screenshots as resources, making them available to the client. Built with TypeScript and the MCP SDK, it supports both headless operation in Docker containers and visible browser windows when run directly, making it ideal for web testing, data extraction, and automated web interactions without requiring users to write browser automation code."
cpropster,linear-mcp-server,2,,"This MCP server implementation provides integration with Linear, a project management platform. It offers tools for managing teams, issues, projects, and cycles through Linear's API. The server enables operations like retrieving team information, searching issues, creating and updating tasks, and handling project data. It's particularly useful for AI-assisted project management workflows that require seamless interaction with Linear's features."
cr7258,elasticsearch-mcp-server,123,,"This Elasticsearch MCP server implementation provides a standardized interface for interacting with Elasticsearch clusters through natural language. Developed to bridge the gap between large language models and Elasticsearch, it offers tools for index operations, document searching, and cluster management. The server leverages Docker for easy deployment of a 3-node Elasticsearch cluster with Kibana, and integrates seamlessly with Claude Desktop via a simple configuration. It's particularly useful for developers and data analysts who want to explore and manipulate Elasticsearch data using conversational AI, enabling natural language queries for complex search operations and cluster insights without requiring in-depth Elasticsearch expertise."
cr7258,higress-ai-search-mcp-server,5,4070,"This MCP server implementation provides an AI search tool that enhances AI model responses with real-time search results from various engines through Higress ai-search. Developed by cr7258, it supports internet search (Google, Bing, Quark), academic search (Arxiv), and internal knowledge search. The server is configurable via environment variables and can be run using uvx or uv, making it suitable for both production deployments and local development."
crawlab-team,crawlab-mcp,2,,"This MCP server provides a bridge between AI applications and Crawlab, a web-based distributed crawler admin platform. Developed by the Crawlab team, it offers tools for spider and task management, file operations, and resource access. The server uses FastMCP and integrates with Crawlab's API, enabling AI-driven web scraping, task automation, and data extraction workflows."
crazyrabbitltc,mcp-brex-server,2,,"Brex MCP Server provides a secure bridge between AI agents and the Brex financial platform, enabling access to account information, transactions, expenses, and budget resources. Developed by Dennison Bertram, this TypeScript implementation exposes Brex API data through standardized resource handlers and tools following the MCP specification. The server implements read-only operations for sensitive financial resources, proper error handling, and rate limiting for API requests. It's particularly valuable for financial analysts using AI tools to retrieve and analyze Brex financial data without requiring direct API access, supporting use cases like expense analysis, budget monitoring, and transaction categorization."
crazyrabbitltc,mcp-expert-server,3,,This MCP server leverages the Anthropic Claude API to provide query generation and documentation assistance capabilities. It is built with TypeScript and uses the Model Context Protocol SDK for standardized interactions. The server can be run as a standalone application or integrated into other projects. It includes features for loading custom API documentation and environment variable configuration. This implementation is well-suited for developers looking to add AI-powered querying and documentation tools to their workflows or applications.
crazyrabbitltc,mcp-code-review-server,7,,"Code Review Server is an MCP implementation that enables AI assistants to perform automated code reviews using multiple LLM providers (OpenAI, Anthropic, Gemini). It integrates with Repomix to flatten repository structures for analysis, then processes the code through configurable LLM prompts focused on security, performance, quality, and maintainability. The server exposes tools for repository analysis and code review with structured output containing issues, strengths, and recommendations, making it valuable for developers seeking AI-powered code quality assessment without leaving their assistant interface."
crazyrabbitltc,mcp-coingecko-server,6,,"This CoinGecko MCP server, developed by Dennison Bertram and Claude + Anthropic, provides a standardized interface for accessing cryptocurrency data through the CoinGecko Pro API. Built with TypeScript and leveraging the MCP SDK, it offers tools for retrieving coin listings, historical price data, and OHLC candlestick information. The server implements caching and pagination to optimize API usage and performance. By abstracting CoinGecko API interactions into an MCP interface, it enables AI systems to easily incorporate up-to-date cryptocurrency data into their workflows. This implementation is particularly useful for applications involving crypto market analysis, portfolio tracking, and price monitoring, facilitating use cases such as automated trading strategies, investment research, and crypto-economic modeling."
crazyrabbitltc,mcp-etherscan-server,17,,"This MCP Etherscan server provides Ethereum blockchain data tools via Etherscan's API. Built with TypeScript and leveraging the ethers.js library, it offers features like balance checking, transaction history viewing, token transfer tracking, contract ABI fetching, gas price monitoring, and ENS name resolution. The server is designed to run on stdio, making it compatible with MCP clients like Claude Desktop. By abstracting Etherscan API interactions into standardized MCP tools, it enables AI systems to easily access and analyze Ethereum blockchain data. This implementation is particularly useful for applications requiring real-time Ethereum data, such as DeFi analytics, wallet monitoring, or smart contract development assistance."
crazyrabbitltc,mcp-ethers-server,5,,"This Ethereum wallet MCP server, implemented in TypeScript, provides a comprehensive interface for interacting with Ethereum networks and smart contracts. It leverages the ethers.js library to offer a wide range of blockchain operations, including balance queries, transaction management, gas price estimation, and ENS resolution. The server supports multiple networks and custom RPC endpoints, making it versatile for various Ethereum ecosystems. It stands out by providing a clean API that abstracts away much of the complexity of blockchain interactions, making it ideal for AI assistants, DApps, or any application requiring programmatic access to Ethereum functionality. Use cases include automated portfolio management, smart contract deployment and interaction, and blockchain data analysis."
crazyrabbitltc,mcp-morpho-server,0,492,"This MCP server, developed by crazyrabbitLTC, provides a bridge to the Morpho DeFi protocol's GraphQL API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for querying market data, vaults, positions, and historical APY information. The implementation focuses on data validation, error handling, and comprehensive pagination options. It's particularly useful for AI agents and applications needing to analyze or interact with Morpho's lending markets, enabling use cases such as portfolio management, risk assessment, and yield optimization without directly dealing with the complexities of Morpho's GraphQL API."
crazyrabbitltc,mpc-tally-api-server,4,,"This MCP Tally API server, developed using TypeScript, provides a standardized interface for accessing DAO governance data through the Tally API. Built with the Model Context Protocol SDK and leveraging GraphQL, it enables AI agents to query and analyze information about DAOs, proposals, and voting activities. The server is designed for easy deployment and configuration, with environment variable management and comprehensive error handling. By abstracting the complexities of the Tally API into an MCP interface, it facilitates use cases such as DAO analytics, governance monitoring, and automated reporting on decentralized decision-making processes. This implementation is particularly valuable for researchers, DAO participants, and developers building AI-powered tools for decentralized governance analysis."
crazyrabbitltc,mcp-twitter-server,14,789,"This Twitter MCP server, developed by Dennison Bertram, enables Large Language Models (LLMs) to interact with Twitter (X) through the Model Context Protocol. Built with TypeScript and leveraging the Twitter API v2, it provides tools for posting tweets, searching tweets, and replying to tweets. The implementation stands out by offering a straightforward setup process and integration with Claude Desktop, making it accessible for users without extensive technical knowledge. It's particularly useful for AI assistants or applications needing to automate Twitter interactions, conduct social media research, or manage Twitter accounts programmatically, enabling tasks like sentiment analysis, trend monitoring, or automated customer engagement."
crazyrabbitltc,mcp-vibecoder,8,,"Vibe-Coder MCP Server implements a structured development workflow that guides LLMs through feature creation with a systematic approach. It provides tools for feature clarification through iterative questioning, automatic generation of PRDs and implementation plans based on gathered requirements, and phase-based development tracking with task management. The server stores documents both in-memory and in the file system, offering a hybrid storage solution that makes it particularly valuable for AI-assisted software development where maintaining context and organization throughout the development lifecycle is essential."
crewaiinc,enterprise-mcp-server,33,,"CrewAI Enterprise MCP Server provides a bridge to deployed CrewAI workflows, enabling AI assistants to kickoff crews and monitor their execution status. The server exposes two main tools: kickoff_crew for starting new crew tasks with custom inputs, and get_crew_status for checking the progress of running crews. Built with FastMCP, it communicates with the CrewAI Enterprise backend using environment variables for authentication and server URL configuration. This implementation is particularly valuable for workflows that benefit from CrewAI's agent collaboration capabilities without leaving the Claude Desktop interface, allowing seamless delegation of complex tasks to specialized agent teams."
crisschan,mcp-allure,2,,"MCP-Allure-Server provides a bridge between AI assistants and Allure test reports, enabling access to test execution data through a structured API. The server exposes a tool for parsing Allure report directories and extracting comprehensive test suite information including test cases, steps, statuses, and execution timestamps. Built with FastMCP, it transforms complex Allure JSON data into a well-organized hierarchical structure that preserves the relationships between test suites, test cases, and their execution details. This implementation is particularly valuable for development teams who need to analyze test results, track test execution metrics, or generate custom reports without leaving their AI assistant interface."
crisschan,mcp-repo2llm,3,,"mcp-repo2llm is a MCP server that transforms code repositories into LLM-friendly formats. A powerful tool that transforms code repositories into LLM-friendly formats, bridging the gap between traditional code bases and modern AI language models. This repo is based on RepoToTextForLLMs, which provides core functionality for converting repositories into LLM-readable formats.

"
cristip73,mcp-server-asana,0,1331,"MCP Server for Asana provides a bridge to the Asana API, enabling AI assistants to manage tasks, projects, workspaces, and comments directly within conversation interfaces. Built by cristip73, it offers over 30 tools for operations like searching tasks, creating projects, managing dependencies, and generating project summaries. The server handles authentication through personal access tokens, supports custom fields with various data types, and includes features for batch operations and project hierarchy visualization. Particularly valuable for project management workflows, it allows users to track progress, organize tasks, and collaborate on Asana projects without leaving their AI assistant interface."
cromwellian,hippycampus,10,,"Hippycampus is a LangChain-based MCP server that dynamically loads OpenAPI specifications to expose external APIs as tools for AI agents. Developed by Ray Cromwell, it bridges the gap between LangChain's structured agent capabilities and the MCP protocol, enabling seamless integration with Langflow for visual workflow creation. The server supports both CLI and SSE transport modes, automatically converts OpenAPI endpoints into structured tools, and handles authentication tokens for secure API access. Particularly useful for developers who want to quickly enable AI assistants to interact with existing REST APIs without writing custom tool implementations."
crunchloop,mcp-teamtailor,1,,"MCP Teamtailor provides a server implementation that enables AI assistants to interact with the Teamtailor recruitment platform API. Built with TypeScript and the Model Context Protocol SDK, it exposes tools for listing candidates with filtering options and retrieving detailed candidate information. The server requires API key authentication through environment variables and supports deployment via npm, making it valuable for teams that want to integrate AI assistants with their recruitment workflows for candidate discovery and evaluation."
cryppadotta,scryfall-mcp,2,,"This MCP server, developed by cryppadotta, provides a standardized interface for interacting with the Scryfall Magic: The Gathering API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for card searches, retrieving card details, rulings, and pricing information. The implementation focuses on exposing Scryfall's comprehensive database through a consistent MCP interface, enabling AI models to perform complex card queries and game-related operations. By connecting AI assistants with Scryfall's extensive MTG data, this server facilitates sophisticated scenarios like deck building assistance, card market analysis, and rules clarification. It's particularly valuable for applications and AI systems aimed at enhancing Magic: The Gathering gameplay, collection management, and strategic analysis."
cryptoleek-team,awesome-solana-mcp,6,,"Solana Agent Kit MCP Server provides a standardized interface for Claude AI to interact with the Solana blockchain through custom actions. Built by cryptoleek, it extends the Solana Agent Kit with specialized tools for retrieving validator information, estimating priority fees, fetching transaction histories, and extracting security contact information from Solana programs. The implementation integrates with Helius API for blockchain data access and includes core Solana functionality for asset management, token operations, and network information, making it particularly valuable for users who need to perform blockchain operations within AI conversations."
cryptoleek-team,goat-mcp,0,,"GOAT-MCP is a Solana blockchain integration that enables AI assistants to interact with on-chain data and execute transactions through a Model Context Protocol server. It implements two key plugins: RugCheck for token security analysis (detecting potential scams and generating token reports) and TransactionHelper for retrieving transaction history using the Helius API. The implementation uses a standardized configuration approach with environment variables for wallet private keys and RPC provider URLs, making it particularly valuable for AI agents that need to perform secure Solana blockchain operations or analyze token safety."
crystaldba,postgres-mcp,146,6934,"PostgreSQL MCP is a database tuning and analysis tool that provides real-time insights into PostgreSQL performance. It offers tools for analyzing query execution plans, identifying slow queries, monitoring database health metrics, and recommending index optimizations. The server implements features like hypothetical index testing, transaction health monitoring, and buffer cache analysis, making it valuable for database administrators and developers who need to optimize query performance, troubleshoot bottlenecks, or maintain healthy PostgreSQL databases. Built with Python 3.12 and packaged as a Docker container, it supports both PostgreSQL 15 and 16 with a focus on read-only safety through restricted access modes."
cso1z,feishu-mcp,30,2833,"Feishu-MCP provides a bridge between AI assistants and Feishu (also known as Lark), ByteDance's workplace collaboration platform. Built by cso1z, this TypeScript implementation enables models to interact with Feishu's API, allowing for document retrieval, messaging, and other collaborative features directly within AI conversations. The server can be run either as a CLI application or HTTP server, with configuration handled through environment variables. It's particularly valuable for teams already using Feishu who want to integrate AI assistants into their existing workflow without switching contexts."
cswkim,discogs-mcp-server,9,207,"Discogs MCP Server provides a bridge to the Discogs API, enabling AI assistants to interact with music database features including artist information, release details, user collections, and marketplace listings. Built with TypeScript and Zod for robust type validation, it exposes tools for searching the database, managing user wantlists, exporting inventory, and fetching media. The server supports both stdio and SSE transport methods, requires a Discogs personal access token for authentication, and implements comprehensive error handling for API responses. It's particularly valuable for music enthusiasts who want to manage their Discogs collections, discover new releases, or analyze marketplace data through AI assistants."
ctkadvisors,graphql-mcp,4,,"GraphQL MCP Server provides a bridge between Claude and any GraphQL API by dynamically generating MCP tools from a GraphQL schema. Built by CTK Advisors, it features automatic schema introspection, query execution with parameter validation, and optional mutation support with security controls. The server can be configured with environment variables to specify API endpoints, authentication tokens, and query whitelisting, making it ideal for accessing structured data from GraphQL APIs directly within Claude conversations without requiring manual query construction."
ctoouli,mcp-stock-market,1,,"MCP Stock Market provides real-time access to stock market data through the Alpha Vantage API. This TypeScript-based server exposes a single tool that retrieves daily stock prices, volume, and other metrics for any stock symbol. The implementation handles API authentication, request formatting, and response parsing with proper error handling, making it particularly valuable for financial analysis, investment research, and market monitoring without leaving the conversation interface. The server includes rate-limiting awareness for the Alpha Vantage free tier (25 calls/day, 5 calls/minute) and formats responses with human-readable currency formatting."
ctvidic,strava-mcp-server,2,,"This MCP server implementation provides integration with the Strava API, enabling access to fitness tracking data and activity information. Developed by Christopher Vidic, it utilizes FastAPI and the Model Context Protocol SDK to offer a bridge between AI assistants and Strava's extensive fitness ecosystem. The server is designed for use cases such as analyzing workout patterns, tracking athletic performance, and integrating fitness data into AI-powered health and wellness applications."
ctvidic,whoop-mcp-server,4,,"This MCP server implementation integrates with the Whoop API, providing a bridge for accessing Whoop fitness data. Built using FastAPI and uvicorn, it offers a streamlined way to retrieve and process Whoop metrics. The server is designed for developers looking to incorporate Whoop data into their applications, enabling use cases such as fitness tracking, performance analysis, and health monitoring."
libs,mcp-server,5228,7527,"This server enables LLMs to run Computer-Use Agent (CUA) workflows on Apple Silicon macOS. It provides asynchronous access to a virtual macOS sandbox environment using Apple’s Virtualization.framework, and supports clients like Cursor, Claude Desktop, and other MCP-compatible tools."
cuongdev,mcp-codepipeline-server,4,,"AWS CodePipeline MCP Server provides a standardized interface for interacting with AWS CodePipeline services, enabling AI assistants to manage and monitor CI/CD pipelines through natural language commands. Built by Cuong T Nguyen, the server exposes tools for listing pipelines, triggering executions, approving actions, and retrieving pipeline metrics, making complex DevOps workflows more accessible through conversational AI interactions."
cuongtl1992,mcp-dbs,17,501,"A TypeScript-based database server that provides a unified interface for connecting to multiple database systems (SQLite, PostgreSQL, SQL Server, and MongoDB). Built by cuongtl1992, this implementation offers flexible database interactions through a consistent API, supporting both server-sent events and standard I/O communication modes. Useful for AI assistants and applications that need to query, update, and explore database schemas across different database technologies."
currents-dev,currents-mcp,2,405,"Currents MCP Server provides a bridge between AI assistants and the Currents test results platform, enabling access to test execution data from CI/CD pipelines. Built with TypeScript and the Model Context Protocol SDK, it exposes tools for retrieving run information, spec file attempts, and errors through a simple API interface. The server requires a Currents API key for authentication and supports deployment via npm, making it valuable for developers who want their AI assistants to analyze failing tests, optimize test suites, or troubleshoot CI issues without leaving their conversation context."
michael-trullion,mcp-servers,0,,"A collection of MCP servers for Cursor IDE that provides AI assistants with access to various external services including Jira, GitHub, and PostgreSQL databases. Each server is implemented as a standalone TypeScript module that can be run independently, exposing domain-specific tools through the Model Context Protocol. The implementation includes a template-based architecture for creating new servers, comprehensive error handling, and environment-based configuration. These servers enable Cursor IDE users to interact with their development tools and data sources directly through AI conversations, making it valuable for developers who need to query issues, repositories, or database information without context switching."
ericlistin,sound-mcp,19,,"A lightweight MCP server that plays a sound effect after Cursor AI completes code generation. Uses the play-sound library to trigger a macOS system sound, providing audio feedback for developers during AI-assisted coding. Designed to enhance the coding experience by adding an auditory cue when code generation is complete."
cwahlfeldt,blender-mcp,7,,"This MCP server implementation provides a bridge between Claude and Blender, enabling AI-driven 3D modeling and animation. Developed using Python, it leverages the Blender Python API (bpy) to allow Claude to interact with Blender through natural language commands. The server is designed for use cases requiring AI assistance in 3D content creation, such as automated scene generation, model manipulation, or animation scripting within Blender."
cyanheads,atlas-mcp-server,132,,"ATLAS, developed by cyanheads, is a Model Context Protocol server that provides hierarchical task management capabilities to Large Language Models. It enables AI assistants to break down complex projects into manageable tasks, track progress, and maintain dependencies within an organized structure. The server implements rich content support, including markdown documentation, code snippets, and structured reasoning documentation. ATLAS stands out by offering a comprehensive task management system tailored for AI-driven project planning and execution. It is particularly useful for applications requiring sophisticated task organization, collaborative AI workflows, or any scenario where an AI system needs to manage and reason about complex, multi-step processes."
cyanheads,filesystem-mcp-server,2,345,"Filesystem MCP Server provides a secure interface for AI agents to interact with local filesystems through standardized tools. Developed by Casey Hand (@cyanheads), this TypeScript implementation offers essential file operations including reading, writing, updating, and managing directories with robust path resolution, error handling, and logging. The server maintains session state for relative path resolution and implements comprehensive security measures like path sanitization and validation. It's particularly useful for AI workflows requiring file manipulation, code generation, or document analysis while maintaining a clean separation between AI agents and the underlying filesystem."
cyanheads,git-mcp-server,50,,"This Git MCP server provides AI assistants with capabilities to interact with Git repositories. Developed as an open-source project, it integrates with the simple-git library to enable core Git operations like cloning, committing, and managing branches. The server exposes a standardized interface for Git interactions, abstracting the complexities of version control operations. By leveraging TypeScript and following modern JavaScript practices, it offers a robust and type-safe implementation. This server is particularly useful for developers and DevOps teams looking to incorporate AI-driven Git operations into their workflows, such as automated code reviews, commit analysis, or intelligent branching strategies."
cyanheads,github-mcp-server,4,,"GitHub MCP Server provides a robust interface for AI assistants to interact with GitHub repositories through the GitHub API. It enables operations like repository management, branch creation/deletion, issue tracking, pull request handling, file modifications, and release management - all with standardized error handling and rate limiting protection. Built with TypeScript and following a feature-oriented architecture, this server is ideal for automating GitHub workflows, code management tasks, and collaborative development processes without requiring direct API access."
cyanheads,mentor-mcp-server,27,,"This MCP server, developed by cyanheads, provides AI-powered mentorship capabilities through the Deepseek API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for code review, design critique, writing feedback, and idea brainstorming. The implementation focuses on delivering expert second opinions and actionable insights to enhance LLM agent performance. It's particularly useful for developers, designers, and content creators seeking AI-assisted feedback and improvement suggestions, enabling use cases such as code quality enhancement, UI/UX refinement, documentation improvement, and feature ideation without directly interacting with the Deepseek API."
cyanheads,ntfy-mcp-server,6,,"Ntfy-mcp-server provides a bridge between Claude and the ntfy.sh notification service, enabling AI assistants to send push notifications directly from conversations. Built by Casey Hand (@cyanheads), this TypeScript implementation offers a complete MCP server with a send_ntfy tool that supports all ntfy features including message priorities, tags, attachments, and action buttons. The server includes robust error handling, rate limiting, and security features like input sanitization, making it particularly valuable for workflows that require notification capabilities without leaving the conversation interface."
cyanheads,obsidian-mcp-server,66,4656,"This Obsidian MCP server, developed by cyanheads, enables AI models to interact with Obsidian vaults through a standardized interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for file operations, content search, and metadata management within Obsidian. The implementation features atomic operations, efficient query processing, and automatic timestamp handling. It's particularly useful for AI assistants and applications needing to manage knowledge bases in Obsidian, enabling use cases like note-taking, content organization, and information retrieval without dealing directly with Obsidian's API complexities."
cyanheads,toolkit-mcp-server,6,662,"This toolkit MCP server, developed by cyanheads, provides system utilities and tools for LLM agents. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers IP geolocation, network diagnostics, system monitoring, cryptographic operations, and QR code generation. The implementation focuses on providing a standardized interface for common system and network tasks, with features like intelligent caching and rate limiting. It's particularly useful for AI assistants and applications needing low-level system access, enabling use cases such as network troubleshooting, resource monitoring, and security operations without dealing directly with underlying system APIs."
cyberagiinc,devdocs,1399,,"🎯 Perfect For
🏢 Enterprise Software Developers
Skip weeks of reading documentation and dealing with technical debt. Implement ANY technology faster by letting DevDocs handle the heavy lifting of documentation understanding.

🕸️ Web Scrapers
Pull entire contents of websites with Smart Discovery of Child URLs up to level 5. Perfect for both internal and external website documentation with intelligent crawling.

👥 Development Teams
Leverage internal documentation with built-in MCP servers and Claude integration for intelligent data querying. Transform your team's knowledge base into an actionable resource.

🚀 Indie Hackers
DevDocs + VSCode(cline) + Your Idea = Ship products fast with ANY technology. No more getting stuck in documentation hell when building your next big thing."
cyberchitta,scrapling-fetch-mcp,21,6731,"Scrapling Fetch MCP enables AI assistants to access text content from websites protected by bot detection mechanisms, bridging the gap between what humans can view in browsers and what AIs can access. Built by cyberchitta, it provides two main tools: s-fetch-page for retrieving complete web pages with pagination support, and s-fetch-pattern for extracting specific content using regex patterns with surrounding context. The server offers three protection levels (basic, stealth, and max-stealth) to handle various degrees of bot detection, making it particularly valuable for retrieving documentation and reference materials from protected sites without requiring users to manually copy and paste content."
cybersecurityup,offensive-mcp-ai,7,,"Offensive-MCP-AI is a cybersecurity toolkit that provides AI assistants with access to penetration testing and security analysis capabilities. The implementation consists of four specialized servers: a payload generator for creating various attack payloads using tools like msfvenom and Sliver, a reconnaissance server for domain enumeration and DNS analysis, a shellcode builder for compiling and extracting code from binaries, and a Wazuh integration for security monitoring and response. Each server exposes its functionality through the MCP protocol, enabling AI systems to execute security testing commands, analyze alerts, and generate offensive security artifacts in a structured manner, making it particularly useful for red team operations, vulnerability assessment, and security education."
cyproxio,mcp-for-security,34,,"MCP for Security is a collection of server implementations that bridge popular security tools (Nmap, Masscan, SQLMap, and FFUF) with AI assistants through the MCP protocol. Developed by Cyprox, these TypeScript-based servers enable AI systems to execute network scanning, port discovery, SQL injection testing, and web fuzzing operations by spawning the respective security tools and capturing their output. Each implementation follows a consistent pattern of accepting tool-specific parameters, executing the underlying binary with appropriate arguments, and returning results in a standardized format, making them particularly valuable for security professionals who want to leverage AI assistants for penetration testing, vulnerability assessment, and security auditing tasks."
cyreslab-ai,exploitdb-mcp-server,4,,"A Model Context Protocol server developed by Cyreslab.ai that provides AI assistants with access to ExploitDB functionality for cybersecurity research. The server enables searching for security exploits by keywords, CVE IDs, or platforms, retrieving detailed information about specific exploits including their code, and tracking newly added vulnerabilities. It maintains a local SQLite database that can be automatically updated from the official ExploitDB repository, making it valuable for threat intelligence, vulnerability research, and security analysis without leaving the AI assistant conversation."
cyreslab-ai,shodan-mcp-server,1,,"The Shodan MCP server, developed by Cyreslab.ai, provides AI assistants with secure access to Shodan's extensive database of internet-connected devices and services through three primary tools: host information lookup, search functionality, and vulnerability information retrieval. The implementation features intelligent response sampling to reduce token usage, field selection for targeted data retrieval, and result summarization capabilities that distill large datasets into actionable intelligence. This server enhances cybersecurity research and threat intelligence workflows by enabling AI assistants to query detailed information about IP addresses, search for specific devices or services using various filters, and retrieve vulnerability details - all while maintaining efficient token usage through automatic response optimization."
d42me,mochi-flashcards-mcp-server,0,,"Mochi-Flashcards-MCP-Server provides a bridge between AI assistants and the Mochi Cards flashcard application, enabling flashcard management through natural language. Created by d42me, this server implementation exposes tools for listing decks, creating cards with markdown content and tags, retrieving card details, updating existing cards, and deleting cards via the Mochi API. The server handles authentication through API keys stored in environment variables and manages asynchronous HTTP requests with proper error handling, making it valuable for students and learners who want to create and manage their flashcards directly through AI assistants without switching contexts."
d6e,cratedocs-mcp,24,,"CrateDocs MCP is a Rust documentation server that enables AI assistants to look up, search, and retrieve documentation for Rust crates dynamically. Built by the d6e team, it provides tools for fetching crate details from docs.rs and crates.io, converting documentation to markdown, and supporting version-specific lookups. Useful for AI developers needing quick, programmatic access to Rust library information during code generation or technical assistance tasks."
da1y,mcp-server-elasticsearch,2,,"This Elasticsearch MCP server enables AI models to interact with Elasticsearch clusters, providing tools for managing indices and executing queries. Developed as an open-source project, it integrates with the @elastic/elasticsearch library to offer functionalities like searching, creating indices, listing indices, and indexing documents. The server is built with TypeScript and leverages the @modelcontextprotocol/sdk for MCP implementation. By abstracting Elasticsearch operations, it allows AI systems to easily incorporate powerful search and analytics capabilities into their workflows. This implementation is particularly useful for developers and data scientists working with large datasets, enabling use cases like intelligent data retrieval, automated index management, and AI-driven data analysis in Elasticsearch environments."
dablclub,polygon-mcp,3,201,"Polygon MCP Server provides onchain tools for Claude AI to interact with the Polygon PoS blockchain. It enables calling contract functions, checking ERC20 token balances, transferring tokens, and retrieving gas prices through a secure wallet connection using the user's seed phrase. Built with TypeScript and the viem library, it establishes a connection to the Polygon network and handles transaction signing, making it ideal for workflows requiring cryptocurrency management, smart contract interaction, or blockchain data retrieval without leaving the conversation interface."
daevmithran,credo-mcp-server,0,,"Credo MCP Server provides a bridge between Claude and the Credo decentralized identity framework, enabling AI assistants to resolve and interact with decentralized identifiers (DIDs) on the cheqd network. The implementation initializes a Credo agent with modules for DID resolution, AnonCreds verification, and cheqd network integration, exposing a 'resolve-did' tool that retrieves DID documents and their metadata. Built using TypeScript and the Model Context Protocol SDK, this server runs on stdio transport for seamless integration with Claude Desktop, making it particularly valuable for workflows involving decentralized identity verification and credential management without leaving the conversation interface."
dailydaniel,logseq-mcp,17,3491,"This MCP server, developed by Daniel Zholkovsky, provides integration with the LogSeq API for knowledge management and note-taking. Built with Python and leveraging libraries like Pydantic and Requests, it offers tools for interacting with LogSeq data and functionality. The implementation focuses on providing a standardized interface for AI agents to access and manipulate LogSeq content programmatically. It's particularly useful for developers and knowledge workers looking to automate LogSeq workflows, enabling use cases such as AI-assisted note-taking, automated knowledge graph analysis, and integration of LogSeq data with other tools and systems."
dailydaniel,pocket-mcp,2,,"Pocket MCP Manager provides a flexible client-server architecture for managing multiple Model Context Protocol servers through a unified interface. The system allows users to add, launch, and control MCP servers via a central management UI, generate API keys linked to running servers, and connect to them through a single proxy server in AI tools like Claude or Cursor. Built with a TypeScript server component that routes requests to appropriate backend servers and a Python client with Streamlit UI, it eliminates the need to reconfigure multiple connection settings when changing which MCP servers to use. The implementation includes an example LLM client demonstrating integration with OpenAI's API while leveraging connected MCP servers' capabilities."
dainfernalcoder,perplexity-mcp,177,,"This MCP server, developed by DaInfernalCoder, leverages the Perplexity Sonar Pro API to provide AI-powered research assistance within the Cline development environment. Built with TypeScript and utilizing the Model Context Protocol SDK, it offers tools for general search queries, documentation retrieval, API discovery, and deprecated code analysis. The implementation focuses on enhancing developer productivity by integrating up-to-date information and code insights directly into the workflow. It's particularly useful for developers seeking real-time assistance with documentation, API integration, and code modernization, enabling use cases such as efficient library adoption, API evaluation, and codebase maintenance without leaving their development environment."
dakrin,mcp-gemini-server,4,,"Gemini MCP Server enables Claude Desktop to interact with Google's Gemini 2.5 Pro Experimental AI model through a TypeScript implementation of the Model Context Protocol. The server provides two main tools: generateWithGemini for content generation with customizable parameters like temperature and token limits, and getModelInfo for retrieving model capabilities. It features Google Search integration for grounding responses in factual information, secure API key handling through environment variables, detailed token usage reporting, and comprehensive error handling with response caching to local files for verification. Ideal for users wanting to leverage Gemini's capabilities within Claude's interface."
daltonnyx,userful-mcps,2,,"The Useful MCPs repository provides two specialized MCP servers for document processing and YouTube content extraction. The docx_replace_mcp server enables template-based document generation with tools for replacing placeholders, managing conditional blocks, and converting DOCX files to PDF. The ytdlp_mcp server leverages yt-dlp to extract chapters and subtitles from YouTube videos, with advanced filtering capabilities for specific time ranges. Both implementations are designed for seamless integration with AI assistants, making them valuable for workflows requiring document automation or YouTube content analysis without manual intervention."
damonxue,mcp-ossinsight,13,,"An MCP server based on OSSInsight.io, providing data analysis for GitHub individuals, organizations, and repositories, as well as in-depth insights into the open source ecosystem."
damus-io,nostrdb-mcp,5,1506,"This MCP server, developed by William Casarin, provides a bridge between Language Models and the nostrdb command-line tool, enabling local Nostr queries. Built with JavaScript and leveraging the Model Context Protocol SDK, it offers tools for retrieving statistics and querying the NDB (Nostr Database). The implementation focuses on integrating with Notedeck, a note-taking application, and uses its default database directory. By connecting AI models with Nostr data, this server allows for sophisticated querying scenarios, enhancing the ability to search and analyze Nostr notes. It's particularly useful for applications and AI assistants that require access to local Nostr data through a standardized interface."
richardhan,mssql_mcp_server,81,,"This MCP server implementation, developed by Dana K. Williams, provides secure interaction with Microsoft SQL Server databases. Built with Python and leveraging libraries like mcp and pymssql, it offers a bridge between AI assistants and SQL Server data. The implementation focuses on security, with detailed guidance on creating restricted SQL logins, implementing row-level security, and following best practices for monitoring and auditing. It's particularly useful for organizations needing to integrate SQL Server data into AI workflows while maintaining strict security controls, enabling tasks like data analysis, reporting, and database management through AI interfaces while ensuring data protection and compliance."
dandeliongold,mcp-decent-sampler-drums,1,,"This MCP server, developed by dandeliongold, provides tools for generating DecentSampler drum kit configurations. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers functionality for analyzing WAV samples and generating XML-based drum group configurations. The implementation focuses on creating flexible velocity layers, handling sample path mapping, and configuring muting groups. By connecting AI models with DecentSampler's preset creation process, this server enables sophisticated drum kit design scenarios, enhancing the ability to create custom virtual instruments. It's particularly useful for music producers, sound designers, and AI assistants involved in virtual instrument development and sample library management."
danedens,omnispindle,3,,"This FastMCP-based Todo Server, developed for the Swarmonomicon project, receives todo requests via FastMCP and stores them in MongoDB. It integrates with the Swarmonomicon todo worker, providing a Python-based implementation for task management and distribution. The server offers features like adding todos with priorities and target agents, querying todos with filters and projections, and supports real-time updates via MQTT, making it suitable for AI-driven task automation and collaborative workflows."
danhilse,notion_mcp,171,,"This MCP server, developed by Dan Hilse, enables AI assistants like Claude to interact with a personal Notion todo list. Built in Python, it provides a minimalist interface for managing tasks with just three properties: task name, scheduling (today/later), and completion status. The implementation integrates with the Notion API to add, view, and update todos in a specific database structure. By connecting AI capabilities with a streamlined task management system, this server enables AI assistants to help organize daily activities and track personal productivity. It is particularly useful for individuals seeking a simple, AI-augmented todo list without complex features, prioritizing ease of use and quick task entry over advanced project management functionality."
danhilse,youtube_research_mcp,3,,"This YouTube research MCP server, developed by an unnamed author, integrates with the YouTube API to perform aggregated video searches. Built with TypeScript and leveraging the Model Context Protocol SDK, it uses sampling to generate search queries from user topics, fetches both short and long videos, and compiles results with metadata. The server implements sequential thinking, logging each step as separate 'thoughts' for operational visibility. By abstracting YouTube search complexities, it enables AI assistants to efficiently gather video content on specified topics. This implementation is particularly useful for content curation, trend analysis, and research tasks, facilitating use cases such as creating themed playlists, analyzing video popularity across topics, or gathering educational resources."
danhussey,transportnsw-mcp,0,,"Transport NSW MCP Server provides a structured interface to access New South Wales public transportation data through the official Transport NSW API. It offers tools for finding transport stops around specific locations and retrieving service alerts and disruptions across different transport modes (trains, buses, ferries, etc.). Built with Python and leveraging Swagger-generated client code, the implementation handles API authentication, request formatting, and response parsing, making it ideal for applications requiring real-time public transport information, trip planning, or monitoring service disruptions in the NSW transport network."
danielbushman,quickbase-mcp-connector,0,,"MCP-Quickbase provides a standardized interface for interacting with Quickbase's JSON RESTful API through Claude and other MCP clients. This server implementation supports a wide range of operations including querying records, managing table relationships, handling file attachments, and user management. Built with both Python and Node.js components, it authenticates with Quickbase using environment variables and exposes tools for common database operations like creating, updating, and deleting records. The server is particularly valuable for users who need to access and manipulate Quickbase data directly within their AI assistant conversations without switching contexts."
daniel-lxs,mcp-perplexity,50,33107,"This MCP server, developed by Daniel Riccio, provides integration with the Perplexity API for advanced language understanding and generation. Built with Python and leveraging the MCP framework, it offers two main tools: ask_perplexity for expert programming assistance and chat_perplexity for ongoing conversations. The implementation focuses on maintaining chat history, supporting different Perplexity models, and providing streaming responses with progress reporting. It's particularly useful for developers and teams who want to incorporate Perplexity's language capabilities into their workflows, enabling use cases such as code debugging, technical explanations, and persistent AI-assisted conversations without directly managing API calls to Perplexity."
danielmackay,dotnet-mcp-hero,3,,"HeroMCP is a .NET-based server implementation that provides a superhero team management API through the Model Context Protocol. Built by Daniel Mackay, it leverages a clean architecture pattern with domain-driven design principles to offer tools for creating and managing heroes with various superpowers, forming teams, and executing missions. The server includes features for tracking power levels, mission status, and team composition, while the client implementation uses Microsoft's Kiota SDK to generate type-safe API clients. This implementation demonstrates how to build a robust MCP server with modern .NET 9 practices including minimal APIs, error handling with the Results pattern, and integration testing."
danielma-tic,fillout-mcp-server,0,,"This MCP server integrates with the Fillout.com API, providing a bridge to leverage Fillout's form-building and data collection capabilities. Built with TypeScript and Node.js, it offers a robust foundation for creating, managing, and analyzing online forms and surveys. The server's architecture ensures type safety and efficient error handling, making it ideal for developers looking to incorporate advanced form functionality into their applications. Use cases include customer feedback collection, market research, lead generation, and data-driven decision making across various industries."
danielpodrazka,editor-mcp,3,,"MCP Text Editor Server provides a Python-based interface for AI assistants to manipulate text files through a structured editing workflow. Built with FastMCP, it implements a two-step edit process with content verification using SHA-256 hashing to prevent conflicts during concurrent edits. The server offers tools for file management, content access, text search, and syntax validation for Python and JavaScript files. It enforces safety through line limits and automatic syntax checking before applying changes, making it ideal for collaborative code editing where multiple agents need controlled access to modify source files."
isdaniel,mcp_weather_server,0,,"MCP Weather Server provides real-time weather information through the Open-Meteo API, allowing AI assistants to retrieve current weather conditions for any city. Developed by danielshih, this Python-based server exposes a single tool (get_weather) that accepts a city name parameter and returns formatted weather data. The implementation is designed for easy integration with MCP clients through either manual configuration in cline_mcp_settings.json or via pip installation, making it ideal for applications that need to incorporate up-to-date weather information into conversations without requiring API keys or complex setup."
nighttrek,software-planning-mcp,189,,"Software Planning MCP is a tool that helps developers break down software goals into actionable implementation plans through a structured, question-based approach. Developed by Daniel Steigman, it guides users through a sequential thinking process to understand requirements, analyze technical considerations, and develop detailed task lists with complexity scores and code examples. The server stores goals and implementation plans locally, provides tools for managing todos, and uses a sophisticated parsing system to convert natural language plans into structured task items. Particularly valuable for developers who want to systematically approach complex software projects without losing track of implementation details."
danilat,mcp-dndzgz,5,,"DNDzgz MCP Server provides real-time information about the Zaragoza tram system through the Model Context Protocol. It offers two main tools: one for retrieving current tram arrival estimations at specific stations and another for listing all available tram stations in the city. The server connects to the DNDzgz API and returns the data in JSON format, making it useful for AI assistants to help users plan their public transportation in Zaragoza, Spain."
danilop,mcp2lambda,97,,"MCP2Lambda enables Large Language Models to interact with AWS Lambda functions as tools without code changes. It acts as a bridge between MCP clients and Lambda functions, allowing models to access private resources, interact with AWS services, and leverage Lambda's capabilities for data processing and external API access. The implementation includes autodiscovery of Lambda functions and secure invocation, making it useful for extending AI capabilities in enterprise environments with existing AWS infrastructure."
danimal141,arxiv-search-mcp,3,,"The arXiv Search MCP server provides tools for searching and retrieving academic papers from arXiv.org directly within Claude. Built with Deno and the FastMCP library, it enables users to search for papers by category and retrieve the latest submissions sorted by date. The implementation handles XML parsing from the arXiv API and formats results with titles, authors, summaries, and links. This tool is particularly useful for researchers and academics who want to stay updated on recent publications in specific fields without leaving their conversation with Claude."
danishjsheikh,swagger-mcp,26,,"Swagger-MCP is a Go-based server that transforms Swagger/OpenAPI specifications into dynamic MCP tools, enabling AI assistants to interact with any REST API without custom integration work. It features automatic endpoint discovery, parameter validation, request formatting, and security handling (Basic, Bearer, API Key), while supporting both Swagger 2.0 and OpenAPI 3.0 formats. The implementation includes path/method filtering capabilities and can operate in both stdio and Server-Sent Events (SSE) modes, making it valuable for developers who need to quickly expose existing API documentation as interactive tools for AI assistants."
danmas0n,multi-agent-with-mcp,23,,"This project implements a small team of coding agents using LangGraph and MCP. The agents use MCP servers to provide tools and capabilities through a unified gateway. The overall objective of this agent team is to take requirements and code context and create multiple implementations of proposed features; human operators can then choose their preferred approach and proceed, discarding the others."
dannyhw,storybook-mcp,7,,"This MCP server implementation provides a bridge to Storybook, enabling AI assistants to interact with and retrieve stories from Storybook configurations. Developed by Danny Williams, it offers a tool for getting stories from a specified Storybook config directory. The server is built using TypeScript and integrates with the Model Context Protocol SDK, making it useful for developers working on React Native projects who want to incorporate AI-assisted story management and retrieval."
dannylee1020,toy-mcp,0,,"This MCP implementation, developed by Danny Lee, provides a simple server-client architecture for fetching data from the HackerNews API. Built with Python and leveraging the MCP and Anthropic libraries, it offers tools for retrieving top stories, user information, and story details. The implementation focuses on demonstrating basic MCP functionality while providing a practical interface to a popular news aggregator. By connecting AI models with HackerNews data, this server enables use cases such as content analysis, trend identification, and user behavior studies. It's particularly useful for developers looking to understand MCP architecture or build applications that require programmatic access to HackerNews content through a standardized interface."
dannymac180,mcp-think-tool,64,3736,"The MCP Think Tool Server implements Anthropic's 'think' tool for Claude and other LLMs, providing a dedicated space for structured reasoning during complex problem-solving tasks. It maintains a timestamped log of thoughts that can be reviewed, cleared, or analyzed for statistics, enabling models to break down problems systematically, ensure policy adherence, and process complex tool outputs. Built using FastMCP, the server exposes four tools: think for recording thoughts, get_thoughts for retrieving the thinking history, clear_thoughts for resetting, and get_thought_stats for analyzing thinking patterns - making it particularly valuable for improving performance in tasks requiring long chains of reasoning."
danvega,dv-courses-mcp,4,,"A lightweight Spring Boot MCP server for exposing course information from Dan Vega's YouTube tutorials. The server provides two primary tools for retrieving course details: listing all available courses and searching for a specific course by title. Designed as a simple, extensible example of creating a data-driven MCP server using Spring AI's tooling framework."
da-okazaki,mcp-neo4j-server,38,2441,"This Neo4j MCP server, developed by Daichi Okazaki, enables AI assistants to interact with Neo4j graph databases through natural language. Built with TypeScript using the @modelcontextprotocol/sdk and neo4j-driver, it provides tools for executing Cypher queries, creating nodes and relationships, and performing complex graph operations. The implementation abstracts the intricacies of Neo4j's query language and data structures, allowing AI systems to seamlessly work with graph data. By connecting AI capabilities with powerful graph database functionality, this server facilitates use cases such as knowledge graph exploration, social network analysis, recommendation systems, and complex data relationship modeling."
dappierai,dappier-mcp,10,,"Dappier MCP Server connects AI assistants to real-time, rights-cleared data from trusted sources through the Model Context Protocol. Developed by Amaan Mohammed at AI20Labs, it provides two main tools: real-time data search for retrieving web search results, financial information, and news; and AI recommendations for personalized content discovery with structured JSON responses. The server integrates with Claude Desktop through a simple configuration process and supports customizable parameters like similarity filtering and search algorithms, making it ideal for workflows requiring up-to-date information from premium publishers without leaving the conversation interface."
darknoah,feishu-mcp,3,,"An MCP server implementation for integrating with Feishu (Lark) messaging platform, allowing AI assistants to interact with Feishu users and access Feishu data."
darpai,darp_engine,5,,"DARPEngine is a search engine for MCP servers that provides smart search capabilities and routing tools. Developed by DARPAI, it stores metadata for MCP servers and offers both CLI and API access to search functionality. The implementation includes a registry service for server management and a specialized MCP server that can route user requests to the most appropriate tools found during search. It features the ability to analyze user queries, identify relevant servers based on their capabilities, and execute tools across multiple servers to provide comprehensive responses. Particularly useful for discovering and utilizing distributed MCP tools without requiring users to know which specific servers to connect to."
its-dart,dart-mcp-server,48,7561,"Dart MCP Server provides AI assistants with direct access to Dart's project management platform, enabling task and document management through a comprehensive set of tools. Built by the Dart team, it allows for creating, retrieving, updating, and deleting tasks and documents, with support for filtering by various attributes like assignees, status, and priority. The server exposes both structured tools and resource templates that make it easy for AI assistants to interact with Dart's API, and includes prompts for common actions like creating tasks or summarizing work items. It's particularly valuable for teams using Dart who want to manage their projects directly through AI assistants like Claude without switching contexts."
dasein108,mcp-cw-graph,1,,"CW-Graph MCP Server provides a TypeScript implementation for interacting with a CosmWasm-based social graph smart contract on a blockchain. It enables AI assistants to create, update, query, and delete cyberlinks (graph relationships) through a set of well-defined tools that communicate with the blockchain via CosmJS. The server handles wallet management, transaction signing, and result formatting, making it particularly useful for applications that need to store structured data like conversation threads, social connections, or content relationships in a decentralized manner."
dasheck0,face-generator,4,1244,"This face generator MCP server, developed by Stefan Neidig, provides a tool for generating human face images using thispersondoesnotexist.com. Built with TypeScript and leveraging the Sharp image processing library, it offers customizable image generation with options for shape (square, circle, rounded rectangle), dimensions, and batch processing. The server implements transparent backgrounds for non-square shapes and supports configurable output directories. By abstracting face image generation into a standardized MCP interface, it enables AI systems to easily create diverse sets of realistic human faces. This implementation is particularly useful for applications involving user interface prototyping, avatar creation, and dataset generation for machine learning tasks related to facial recognition or analysis."
da-snap,mcp-server-developer-tool,0,,"MCP Server Developer Tool provides a set of utilities for AI assistants to interact with the local file system and execute shell commands. Built by Daniel, it implements four core tools: executing shell commands with timeout control, displaying file contents with line range options, searching files using regular expressions, and writing content to files with append or overwrite modes. The server uses Go's reflection capabilities to dynamically handle tool execution and communicates via stdio transport, making it suitable for integration with any MCP-compatible client. This implementation is particularly valuable for development workflows requiring file manipulation, code inspection, and command execution without leaving the conversation interface."
georgi-terziyski,database_mcp_server,1,,"Database MCP Server provides a unified interface for connecting to and interacting with multiple database systems (SQLite, PostgreSQL, MySQL/MariaDB, and SQL Server) through a consistent set of tools. It features connection management, query execution, schema manipulation, and transaction support across all supported database types. The implementation uses a modular architecture with database-specific connectors that abstract away differences between database systems, making it ideal for applications that need to work with multiple database types or for AI assistants that require database access capabilities without dealing with database-specific syntax and connection details."
justtryai,databricks-mcp-server,17,,"Databricks MCP Server provides a bridge between AI assistants and Databricks services through a standardized interface. It enables interaction with Databricks clusters, jobs, notebooks, DBFS, and SQL workspaces via tools that wrap the Databricks REST API. The server follows the stdio transport protocol, making it compatible with Claude Desktop integration, and includes comprehensive error handling and logging. Particularly valuable for data scientists and engineers who need to manage Databricks resources, execute queries, or automate workflows without leaving their conversation interface."
morphik-org,morphik-mcp,5,,"This MCP server implementation provides a bridge to DataBridge, enabling AI assistants to ingest and retrieve information from a local database. Developed as part of the databridge-mcp project, it offers two main tools: one for ingesting user observations with metadata, and another for retrieving relevant information based on user queries. The server uses FastMCP for efficient request handling and is designed to work with Python 3.11+. It's particularly useful for AI applications requiring persistent storage and retrieval of contextual information, supporting use cases like maintaining conversation history or building knowledge bases from user interactions. The implementation focuses on simplicity and ease of integration, making it suitable for both development and production environments."
databutton,databutton-mcp,15,15660,"Databutton MCP Server enables AI assistants to plan and create initial scaffolding for business applications built with React frontends and Python backends. Developed by Databutton, it specifically focuses on the planning phase of app development, helping users generate a structured approach before implementation begins. The server integrates with Claude Desktop through stdio communication and can be installed either manually or via Smithery. It leverages the Model Context Protocol SDK to facilitate the creation of beautiful business applications with complex functionality, making it particularly valuable for developers looking to quickly establish a solid foundation for their Databutton-powered projects."
databutton,databutton-app-mcp,1,18472,"A proxy server that enables using Databutton app API endpoints as tools through any MCP-compatible client. It establishes secure websocket connections to Databutton apps using API keys, handles authentication, and bridges stdin/stdout to enable seamless integration. Built for developers who want to expose their Databutton app functionality to AI assistants without additional configuration."
datalayer,earthdata-mcp-server,10,,"Earthdata MCP Server provides a bridge between AI assistants and NASA's Earthdata platform, enabling search and retrieval of Earth science datasets and data granules. Built with FastMCP, it exposes two main tools: search_earth_datasets for discovering datasets based on keywords, temporal ranges, and geographic boundaries, and search_earth_datagranules for retrieving specific data granules by dataset short name. This implementation is particularly valuable for researchers, scientists, and analysts who need to access NASA Earth observation data directly through conversational AI interfaces without switching to specialized data portals."
datalayer,jupyter-mcp-server,245,,"This Jupyter MCP server implementation, developed by Datalayer, provides a bridge between the Model Context Protocol (MCP) and Jupyter environments. It leverages Jupyter's kernel and notebook model clients to enable AI assistants to interact with Jupyter notebooks, execute code, and manipulate notebook content. The server is designed to run in a Docker container, making it easily deployable and scalable. It's particularly useful for data scientists and researchers who want to integrate AI-powered tools into their Jupyter workflows, enabling automated analysis, code generation, and interactive data exploration within notebook environments."
datalayer,jupyter-earth-mcp-server,2,,"Jupyter Earth MCP Server provides a bridge between AI assistants and Jupyter notebooks for Earth science data analysis. Developed by Datalayer, this Python-based server enables downloading NASA Earth Data granules directly into Jupyter notebooks through a simple interface. The implementation leverages jupyter-kernel-client and jupyter-nbmodel-client to programmatically create and execute code cells in notebooks, allowing for parameterized data retrieval with options for temporal ranges and geographic bounding boxes. It's particularly useful for Earth scientists and researchers who need to automate the acquisition of satellite data and integrate it seamlessly into their Jupyter-based analysis workflows."
bitrsky,jupyter_mcp_server,0,,"The Jupyter MCP Server provides a bridge between AI assistants and Jupyter notebooks, enabling models to programmatically create and execute code cells, add markdown content, and interact with Earth data through specialized tools. Built using the MCP protocol with both stdio and SSE transport options, it leverages the jupyter_kernel_client and jupyter_nbmodel_client libraries to manipulate notebook content and execute code in a running kernel. This implementation is particularly valuable for data science workflows where AI assistants need to generate executable code, document analysis with markdown, or facilitate Earth data retrieval and processing within Jupyter environments."
datastax,astra-db-mcp,18,2635,"This MCP server implementation provides integration with Astra DB, a cloud-native database service. Developed by DataStax, it offers tools for managing collections and records within Astra DB, including creating, updating, deleting, and querying data. The server is designed to enable AI agents to interact directly with Astra DB, making it useful for applications that require scalable, cloud-based data storage and retrieval capabilities."
datawhisker,x-mcp-server,16,,"This X (Twitter) MCP server, developed by an unnamed author, provides integration with the Twitter API for AI assistants. Built using TypeScript and the MCP SDK, it offers a streamlined interface for interacting with Twitter's platform, enabling tasks like posting tweets, retrieving user information, and analyzing trends. The server leverages the twitter-api-v2 library to handle API communication and implements TypeScript's strict mode for enhanced code reliability. By abstracting the complexities of Twitter's API, it allows AI systems to easily incorporate social media interactions into their workflows. This implementation is particularly useful for social media management, brand monitoring, and automated content distribution on Twitter, enabling use cases such as scheduled posting, sentiment analysis, and engagement tracking."
datawiz168,mcp-snowflake-service,29,,"This MCP server, developed by datawiz168, provides seamless integration with Snowflake databases. It implements a Python-based interface for executing SQL queries, retrieving results, and managing database connections through the Snowflake connector. The server exposes tools for running queries, fetching data, and interacting with Snowflake objects like tables and views. By leveraging Snowflake's powerful cloud data platform, this implementation enables AI assistants to easily incorporate large-scale data analysis and business intelligence capabilities. It is particularly useful for scenarios requiring real-time access to enterprise data warehouses, such as generating reports, performing ad-hoc analysis, or integrating Snowflake data into AI-powered applications."
dave-wind,mysql-mcp-server,6,100,"MySQL MCP Server provides read-only access to MySQL databases for LLMs, enabling them to inspect database schemas and execute SELECT queries. Built by dave-wind, it implements strict security measures including SQL validation and READ ONLY transactions to ensure data safety. The server automatically discovers and exposes table structures as JSON schemas, making it ideal for AI assistants that need to analyze database content without modification permissions. It's particularly valuable for data analysis, reporting, and exploration use cases where protecting the underlying data while allowing meaningful queries is essential."
davidamom,snowflake-mcp,2,,"Snowflake MCP Server provides secure access to Snowflake databases for any MCP-compatible client, enabling SQL query execution with robust connection management. Built by David Amom, it handles database connection lifecycle (connect, reconnect on timeout, close), supports both password and key pair authentication methods, and processes query results safely. The implementation is particularly valuable for AI assistants that need to interact with Snowflake data warehouses without requiring users to switch contexts or manually execute queries, making it ideal for data analysis, reporting, and exploration workflows."
dfkai,xtquantai,60,,"A lightweight MCP server for quantitative trading using the XTQuant API, enabling AI-driven financial analysis and trading strategies. Developed by davidfnck, this tool provides a Python-based integration for programmatic stock market interactions, with a focus on leveraging AI capabilities for quantitative investment approaches."
davidkingzyb,scast,18,,"SCAST is a tool designed to assist users in analyzing and summarizing code through visualization. 
By simply providing the folder path where the code is located, 
SCAST can perform static analysis on the code, helping users understand the code structure, explain its functionality.
generate various visual charts such as UML diagrams, AST tree diagrams and Mermaid flowcharts."
davidlin2k,onos-mcp-server,2,,"An MCP server for ONOS (Open Network Operating System) that provides programmatic access to network management, device control, and analytics through a rich set of resources and tools. Developed by David Lin, this server enables interaction with ONOS's REST API, offering capabilities like network topology exploration, flow management, application control, and system diagnostics, making it valuable for SDN research, network prototyping, and educational environments."
davidlin2k,pox-mcp-server,1,,"POX MCP Server provides a bridge to the POX SDN controller, enabling AI assistants to manage and configure OpenFlow-based networks. Developed by David Lin, this implementation exposes network topology information and controller configurations through resources, while offering specialized prompts for network management, hub implementation, and learning switch configuration. The server includes tools for datapath management, flow statistics retrieval, and table configuration, making it particularly valuable for educational environments, network prototyping, and SDN research where AI assistants need to interact with network infrastructure."
davidorex,git-file-forensics,0,,"This MCP server, developed by davidorex.ai, provides deep git file-level forensics capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for tracking file versions, analyzing diffs, examining commit contexts, and evaluating semantic changes. The implementation focuses on individual file analysis rather than repository-wide operations, enabling detailed insights into file histories and change patterns. It's particularly useful for developers and code reviewers who need to investigate specific file changes, track complex refactorings, or assess code evolution over time, without requiring extensive git expertise."
davidorex,git-forensics-mcp,1,,"This MCP server, developed by davidorex.ai, provides deep git repository analysis and investigation capabilities. Built with TypeScript using the Model Context Protocol SDK, it offers tools for branch overview, time period analysis, file change tracking, and merge recommendations. The implementation focuses on forensic examination of git histories, enabling detailed insights into development patterns and repository structures. It's particularly useful for development teams and code auditors who need to understand complex git workflows, assess merge risks, and optimize branching strategies without manually parsing git logs. The server can be integrated with any MCP-compatible client, making it versatile for various git analysis workflows."
davidorex,project-handoffs,7,,"This MCP server implementation, developed for managing AI session handoffs and next steps, provides a TypeScript-based interface leveraging the Model Context Protocol SDK. It offers tools for coordinating AI workflows across multiple sessions or models. The implementation focuses on maintaining context and continuity between AI interactions, enabling seamless handoffs and structured progression of tasks. It's particularly useful for complex, multi-stage AI processes that require coordination between different models or handling extended user interactions over time. The server allows for efficient management of AI conversation flows, task delegation, and context preservation without requiring deep knowledge of underlying AI model architectures."
davidshtian,mcp-on-aws-bedrock,43,,"This AWS Bedrock MCP implementation, developed by Anthropic, provides a seamless integration between Anthropic's Model Context Protocol and Amazon's Bedrock service. Built with Python using boto3 and the MCP SDK, it offers a client that can interact with MCP-enabled tools through Bedrock's runtime service, specifically using the Nova Pro model. The implementation features tool format conversion for Bedrock compatibility, asynchronous communication handling, and structured logging. By bridging MCP and Bedrock, it enables AI systems to leverage both protocols' strengths, making it particularly useful for developers looking to combine Anthropic's MCP capabilities with AWS's scalable infrastructure for applications in natural language processing, task automation, and AI-assisted decision making."
davidteren,claude-server,7,,"This TypeScript-based MCP server implementation, developed using the Model Context Protocol SDK, provides a foundation for building AI-driven applications. It leverages modern JavaScript features and TypeScript's type safety to create a robust and scalable server structure. The implementation is designed to be easily extensible, allowing developers to integrate various AI models or services. It's particularly well-suited for projects requiring a lightweight, customizable MCP endpoint, such as chatbots, content generation tools, or data analysis applications. The server's modular architecture and use of up-to-date dependencies make it adaptable to a wide range of AI-powered use cases, from simple text processing to more complex multi-modal interactions."
davidvc,code-mcp,11,,"This Code Analysis MCP plugin, developed by an unspecified author, enables AI assistants to perform sophisticated code analysis using a Neo4j graph database. Built with Java and leveraging libraries like JavaParser and Neo4j, it offers tools for analyzing code structure, calculating quality metrics, extracting documentation, and answering high-level questions about codebases. The plugin implements advanced metrics calculation and natural language query processing, abstracting the complexities of code parsing and graph database operations. By providing a comprehensive view of code structure and quality, it allows AI systems to generate insights, identify potential issues, and assist in code review processes. This implementation is particularly valuable for software development teams, code reviewers, and architects, facilitating use cases such as architectural analysis, code quality assessment, and automated documentation generation."
davidvc,code-knowledge-mcptool,9,,A knowledge management tool for code repositories using vector embeddings. This tool helps maintain and query knowledge about your codebase using advanced embedding techniques.
apvlv,davinci-resolve-mcp,12,,"DaVinci Resolve MCP Server enables AI assistants like Claude to directly interact with and control DaVinci Resolve through its Python API. Built by apvlv, the server provides tools for project management, timeline manipulation, media organization, and Fusion integration, allowing users to programmatically create, modify, and inspect video editing projects through natural language commands."
davlgd,mcp-clever-demo,1,2125,"This MCP server, developed by David Legrand, provides a JavaScript-based interface for AI assistants to interact with Clever Cloud's tools and services. Built using the mcp-js-server SDK, it offers a streamlined way to access Clever Cloud's platform capabilities. The implementation focuses on simplicity and ease of use, requiring minimal setup to get started. It's particularly useful for developers and AI models looking to leverage Clever Cloud's infrastructure and services, enabling tasks like application deployment, environment management, or resource monitoring without requiring deep knowledge of Clever Cloud's API intricacies."
dazeb,mcp-github-mapper,16,,"This GitHub Mapper MCP server, developed by an unnamed author, provides AI assistants with capabilities to analyze and map GitHub repositories. Built using TypeScript and leveraging the Octokit REST API client, it offers functionalities for authenticating with GitHub, retrieving repository metadata, and generating detailed file structure maps. The server abstracts the complexities of GitHub API interactions, enabling AI systems to easily access and process repository information. It's particularly valuable for developers and researchers working on code analysis, project management, and software development workflows, facilitating use cases such as automated code reviews, dependency analysis, and repository structure visualization."
dazeb,markdown-downloader,22,,"This Markdown Downloader MCP server, developed by an unknown author, provides AI assistants with capabilities to download and process Markdown content. Built with TypeScript and leveraging libraries like axios and fs-extra, it offers a streamlined interface for retrieving Markdown files from URLs, parsing their content, and saving them locally. The server implements error handling and file system operations to manage downloaded content effectively. By abstracting the complexities of web requests and file manipulation, it enables AI systems to easily incorporate Markdown processing into their workflows. This implementation is particularly useful for content aggregation, documentation management, and text analysis tasks, facilitating use cases such as automated content curation, knowledge base creation, and structured data extraction from Markdown sources."
dbillionaer,polygon-mcp,2,,"The Polygon MCP Server provides a comprehensive interface for interacting with the Polygon blockchain network, enabling AI assistants to perform wallet operations, smart contract deployments, L2 bridging, DeFi interactions, and transaction simulations. Built using ethers.js v6 and the Model Context Protocol SDK, it supports both Polygon Mainnet and Mumbai Testnet networks, handles the POL token (formerly MATIC) with backward compatibility, and includes tools for token transfers, balance checking, gas price retrieval, and integration with protocols like QuickSwap and Aave. This implementation is particularly valuable for blockchain developers, DeFi users, and applications requiring secure, programmatic access to Polygon network functionality through AI assistants."
dbsmith7491,aws-amplify-data-mcp,1,,"AWS Amplify Data MCP Server provides a bridge between AI assistants and AWS Amplify Data APIs, enabling interaction with GraphQL-based data models through a standardized interface. This implementation authenticates with Amazon Cognito, introspects data models from Amplify outputs, and offers tools for listing models, querying relationships, and executing custom GraphQL operations. It handles authentication token refresh automatically and provides detailed model information, making it particularly useful for AI agents that need to access or manipulate data in Amplify-powered applications without requiring users to write complex GraphQL queries."
dbt-labs,dbt-mcp,148,,"dbt-MCP server provides a bridge between AI assistants and dbt (data build tool) resources, enabling interaction with data models, metrics, and transformations. Built by dbt Labs, it offers tools for executing dbt CLI commands, discovering metadata about models, and querying the dbt Semantic Layer. The server supports local dbt project operations, metadata retrieval from dbt Cloud, and metric querying capabilities, making it valuable for data analysts and engineers who want to explore, analyze, and manage their data transformations through natural language interfaces without manually navigating dbt's command line or web interface."
dcolley,swagger-mcp,55,,"Swagger MCP Server ingests Swagger/OpenAPI specifications and exposes them as MCP tools, enabling AI assistants to interact with any API documented in the OpenAPI format. It supports multiple authentication methods (Basic Auth, Bearer Token, API Key, OAuth2), automatically generates tools from API endpoints, and provides real-time communication through Server-Sent Events. The implementation is designed for personal use to create a bridge between AI assistants and existing web APIs, making it particularly valuable for developers who want to give their AI assistants access to specific services without writing custom integrations for each API."
dcspark,mcp-cryptowallet-evm,2,629,"MCP Crypto Wallet EVM provides Claude with access to Ethereum and EVM-compatible blockchain operations through ethers.js v5. Developed by dcSpark, this server enables wallet creation, balance checking, transaction sending, and smart contract interactions on EVM blockchains. It exposes over 40 tools organized into categories including wallet management, blockchain queries, transaction handling, and network operations, making it valuable for users who need to perform cryptocurrency operations directly through Claude without switching to specialized wallet applications."
dcspark,mcp-server-helius,10,,"This MCP server implementation provides Claude with access to Solana blockchain data via the Helius API. Developed by dcSpark, it offers tools for checking wallet balances and retrieving the current block height on Solana. The server is designed for use cases requiring real-time Solana blockchain data integration, such as monitoring account balances or tracking network status."
dcspark,mcp-server-jupiter,0,,"This MCP server provides Claude with access to Jupiter's swap API on the Solana blockchain. Developed by dcSpark, it enables operations like getting quotes, building swap transactions, and sending swap transactions. The server is designed for use cases requiring programmatic access to decentralized exchange functionality on Solana, such as automated trading strategies or integrating Jupiter swaps into other applications."
ddaltn,raindrop-mcp-python,2,,"A Python-based MCP server for Raindrop.io that enables Claude Desktop to interact with bookmarking collections and tags through natural language. Developed by ddaltn, it provides tools for creating, updating, and deleting collections and raindrops, as well as managing tags within the Raindrop.io service. The implementation uses the Python MCP SDK and httpx for API communication, requiring only a Raindrop.io API token to function. This server can be paired with other MCP implementations like Firecrawl to enable streamlined automation and organization of bookmarking workflows."
containerelic,github-enterprise-mcp,13,,"GitHub Enterprise MCP Server provides a bridge between AI assistants and GitHub Enterprise API, enabling repository management, issue tracking, and code access through natural language. The implementation supports both GitHub Enterprise Server and GitHub.com, with special features for enterprise environments like license information and admin statistics. Built with TypeScript and the Model Context Protocol SDK, it offers tools for managing repositories, branches, pull requests, issues, and GitHub Actions workflows through either stdio or HTTP transport. Particularly valuable for developers who need to interact with GitHub repositories without leaving their AI assistant interface."
voitta-ai,mcp-voitta-gateway,0,,"This MCP gateway bridges AI assistants to RFK Jr campaign endpoints, enabling access to various campaign-related tools and data. It dynamically registers tools based on OpenAPI schemas from configured endpoints, supports both STDIO and SSE transports, and includes features for endpoint discovery and information retrieval. The implementation is designed for flexibility and easy integration with existing campaign infrastructure."
deco-sites,mcp,0,,"This Deco MCP server implementation enables AI assistants to interact with Deco site loaders through a standardized interface. Built with the Model Context Protocol SDK and Hono, it dynamically registers site loaders as MCP tools by extracting their schemas from the Deco metadata, allowing AI assistants to discover and invoke these tools via Server-Sent Events (SSE). The server handles tool discovery and execution requests, transforming loader results into MCP-compatible responses, making it ideal for integrating AI capabilities with Deco-powered websites and applications."
dedeveloper23,codebase-mcp,18,,"This MCP server implementation provides a bridge for retrieving codebases using RepoMix. Developed by Anthropic, it integrates with the Model Context Protocol SDK and offers tools for codebase retrieval and analysis. The server is designed for use cases requiring access to source code repositories, such as code review, dependency analysis, or automated documentation generation."
deepfates,mcp-replicate,54,,"This Replicate MCP server implementation provides a bridge between the Model Context Protocol and Replicate's AI model hosting platform. Developed as an open-source project, it enables seamless interaction with Replicate's diverse collection of machine learning models through a standardized MCP interface. The server supports key operations such as listing available models, creating and managing predictions, and accessing model metadata. Built with TypeScript and leveraging the official Replicate API, it offers robust error handling, caching mechanisms, and webhook support. This implementation is particularly useful for developers and researchers looking to integrate Replicate's hosted AI models into their MCP-compatible applications, enabling easy access to a wide range of pre-trained models for tasks like image generation, text processing, and more."
ameeralns,deepresearchmcp,5,,"DeepResearch MCP Server provides AI assistants with a structured approach to conducting multi-step web research. It leverages Firecrawl for web searches and OpenAI's GPT-4 for analyzing findings and generating comprehensive reports. The server implements a stateful research process that iteratively explores topics at configurable depths, with each step analyzing previous findings to determine the next search query. Built with TypeScript and the Model Context Protocol, it features robust error handling, token optimization for large research sessions, and both step-by-step and one-shot research workflows. This implementation is particularly valuable for users who need thorough, citation-rich research reports on complex topics without manually managing the search and synthesis process."
deepseekmine,mcp-pdf-reader,6,,"MCP PDF Reader provides a server for extracting and processing content from PDF documents. Built using FastMCP and PyMuPDF (fitz), it offers three main tools: reading normal text from PDFs page by page, extracting text using OCR with language and resolution options, and retrieving images from specific pages in base64 format. The server maintains a directory for PDF resources and implements caching to improve performance. It's particularly valuable for AI assistants that need to analyze, search, or extract information from PDF documents without handling the complexities of PDF parsing directly."
ygboy1986,aiclaude,0,,"DeepSeek-Claude integrates DeepSeek's R1 reasoning engine with Claude, enabling sophisticated reasoning capabilities through a simple API interface. The server exposes a single tool that processes queries by sending them to the DeepSeek API and formatting the reasoning output within <ant_thinking> tags for seamless integration with Claude's thought process framework. This implementation allows Claude to leverage DeepSeek's advanced reasoning capabilities that evolved from large-scale reinforcement learning, making it particularly valuable for complex problem-solving tasks that benefit from multiple reasoning approaches."
deep070203,docling-mcp,9,,"This MCP server, developed by Deep Shah, leverages IBM's Docling software to parse and convert documents to Markdown format. Built with Python and integrating the MCP and Docling libraries, it provides a streamlined interface for document processing tasks. The implementation focuses on Markdown conversion, offering a specialized tool for transforming various document formats into a universal, easily readable text format. It's particularly useful for content management systems, documentation projects, and AI-assisted text analysis workflows that benefit from standardized Markdown input, enabling efficient document parsing and conversion without complex setup or multiple tool integrations."
deepspringai,search_mcp_server,2,,"Search MCP Server provides web search and information extraction capabilities for AI assistants. It offers two main tools: one for performing web searches and scraping results, and another for extracting relevant information from previous searches using semantic similarity. The implementation uses SearchAPI.io for web queries, Firecrawl for content scraping, and embedding models for similarity matching. Built by DeepSpringAI, this server is particularly useful for applications requiring real-time web information retrieval and analysis, including multilingual search capabilities."
deepsrt,deepsrt-mcp,34,,"This MCP server provides YouTube video summarization functionality through integration with DeepSRT's API. It offers tools to generate summaries in narrative or bullet-point formats, with multi-language support. The server leverages content caching and CDN edge delivery for efficient summary retrieval, making it suitable for applications requiring quick access to video content summaries."
deepsuthar496,alpha-ventage-mcp,2,,"An MCP server that provides a comprehensive interface to the Alpha Vantage financial data API, enabling programmatic retrieval of stock prices, company overviews, time series data, forex rates, cryptocurrency prices, and technical indicators. Designed for developers and financial analysts who need structured access to real-time and historical market data through a standardized protocol."
deepsuthar496,figma-mcp-server,0,,"Figma MCP Server provides integration with Figma's API, enabling AI assistants to interact with Figma design files and team resources directly within conversations. The implementation offers tools for file operations (retrieving file information, version history, components), comment management, project and team features, and webhook administration - all authenticated through a Figma access token. Built as a Node.js application using the MCP SDK and Axios for API communication, it's particularly valuable for design workflows that require reviewing, commenting on, or analyzing Figma files without leaving the conversation interface."
ai-1st,deepview-mcp,16,4512,"DeepView MCP enables AI-powered code analysis by loading entire codebases into Gemini's large context window, allowing developers to query and understand complex repositories through natural language interactions. Built by Dmitry Degtyarev, it integrates seamlessly with IDEs like Cursor and Windsurf, providing a flexible tool for developers seeking AI-assisted code comprehension using tools like repomix to prepare codebases files."
defibax,mcp_servers,4,,"This MCP server implementation provides voice recording and transcription capabilities using OpenAI's Whisper model. Developed by DefiBax, it integrates with the Goose AI agent as a custom extension and offers tools for recording audio, transcribing speech, and managing transcriptions. The server supports various Whisper model sizes and includes prompts for common recording scenarios, making it suitable for applications requiring speech-to-text functionality such as meeting note-taking, content summarization, and voice-controlled AI interactions."
delano,postman-mcp-server,79,,"This Postman MCP server, developed by Delano, provides AI assistants with programmatic access to Postman's API management platform. It integrates with the Postman API to enable functionalities like managing collections, environments, and APIs. The server is built with TypeScript and leverages the @modelcontextprotocol/sdk for MCP implementation. By abstracting Postman interactions, it allows AI systems to automate API testing, documentation, and workflow management. This implementation is particularly useful for developers, QA engineers, and API designers who want to leverage AI capabilities for API lifecycle management, automated testing, and collaborative API development workflows."
delorenj,mcp-qdrant-memory,10,3154,"This MCP server, developed by Jarad DeLorenzo, provides a knowledge graph implementation with semantic search capabilities powered by Qdrant vector database. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing entities, relations, and observations in a graph structure. The implementation focuses on efficient storage and retrieval, using both file-based persistence and Qdrant for vector search. It's particularly useful for applications requiring structured knowledge representation with semantic querying, enabling use cases such as intelligent information retrieval, relationship analysis, and context-aware AI interactions without directly dealing with complex graph database operations."
delorenj,super-win-cli-mcp-server,4,,"This Windows CLI MCP server, developed by Simon Benedict, provides a robust interface for AI assistants to interact with Windows command-line environments. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for executing commands across PowerShell, CMD, and Git Bash shells with configurable security measures. The implementation focuses on providing unrestricted system access through SYSTEM-level service installation, enabling full filesystem access and unrestricted command execution. It's particularly useful for remote Windows administration, automation of complex system tasks, or integration of Windows capabilities into AI-driven workflows, allowing assistants to leverage the full power of Windows environments without requiring deep knowledge of command-line intricacies."
delorenj,mcp-server-ticketmaster,12,16384,"This MCP server for Ticketmaster, developed by Jarad DeLorenzo, provides a robust interface for AI assistants to interact with the Ticketmaster Discovery API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for searching events, venues, and attractions with flexible filtering options. The implementation focuses on comprehensive data retrieval and formatting, making it easy for AI models to access detailed information about entertainment events. It's particularly useful for tasks like event planning, ticket purchasing assistance, or integrating live entertainment data into AI-driven systems, allowing assistants to query Ticketmaster's extensive database without requiring deep knowledge of the underlying API complexities."
demcp,demcp-debank-mcp,5,,"DeBanK MCP Server provides a bridge between AI assistants and the DeBanK API, enabling access to blockchain and DeFi data through a set of specialized tools. Built with Deno and TypeScript, it offers functionality for retrieving information about chains, protocols, tokens, pools, user assets, activities, authorizations, NFT collections, and wallet operations. The server features robust error handling, request logging, and pagination support for large result sets, making it particularly valuable for financial analysts, crypto researchers, and applications that need to access on-chain data across multiple blockchains through natural language interfaces."
demcp,demcp-meson-mcp,2,,"Meson Cross-Chain Transaction MCP Server enables seamless asset transfers between different blockchains using the Meson Protocol. Built with Deno and TypeScript, it provides tools for preparing transactions, signing with private keys, and monitoring transfer status across both mainnet and testnet environments. The server handles the complexities of cross-chain communication while maintaining security by processing private keys locally, making it ideal for users who need conversational interfaces to manage cryptocurrency transfers across Ethereum, Arbitrum, Avalanche, and other supported chains."
dennisgl,mcp-playwright-scraper,1,1051,"A web scraping MCP server that uses Playwright for browser automation, BeautifulSoup for HTML parsing, and Pypandoc for converting web content to high-quality Markdown. Designed to handle modern, JavaScript-heavy websites and provide a simple tool for extracting and converting web page content, enabling easy content retrieval across complex web platforms."
dennismartis,mcp-todo,1,,"This MCP server implementation provides tools and resources for managing a coding project's todo list. Developed by Dennis Martis, it offers functionality to view, add, update, and delete todo items, with features like priority setting, tagging, and project assignment. The server uses FastMCP and Pydantic for efficient data handling and includes prompts for summarizing todos and suggesting which tasks to tackle next. It's designed for use cases requiring AI-assisted project management and task prioritization in software development contexts."
dennismartis,sql_mcp_server,0,,"SQL MCP Server provides a bridge between AI assistants and Microsoft SQL Server databases, enabling natural language interaction for querying and manipulating data. Built with FastMCP and pyodbc, it exposes tools for executing SQL queries, listing tables, describing schemas, and managing database operations through an asynchronous architecture that prevents blocking. The implementation features comprehensive error handling, Windows authentication security, and is particularly valuable for database administrators and analysts who need to interact with SQL Server through conversational AI."
dennj,weather-mcp,0,,"This MCP server implementation provides a weather service by integrating with the Open-Meteo API. It offers tools for fetching current weather data for a given city, including temperature, wind speed, and weather conditions. The server uses asynchronous HTTP requests and includes error handling for invalid city names or unavailable weather data. It's containerized using Docker for easy deployment and designed for use cases requiring up-to-date weather information."
deploya-labs,mcp-browser-use,1,,"MCP Server Browser Use enables AI assistants to interact with web browsers through a FastAPI server, providing capabilities for web browsing, content extraction, and automation. Built by Igor Tarasenko and Martin Jakobsson, it leverages the browser-use library to perform tasks like navigating websites, extracting information, and taking screenshots. The server can be configured to use various LLM providers including OpenAI, OpenRouter, and Ollama, and can run in either headless or visible browser mode. It's particularly useful for workflows requiring web research, data collection, or automated interactions with web applications."
deploya-labs,mcp-resend,0,,"The Resend MCP server enables AI assistants to send emails through the Resend API service. Built by Deploya-labs, it provides a 'send-email' tool that accepts parameters like recipient address, subject, content, and optional scheduling. The implementation supports configuration of sender email addresses and reply-to fields either through command-line arguments or environment variables. It runs as a Node.js application that can be deployed via Docker, making it ideal for workflows requiring email communication capabilities without leaving the conversation interface. The server requires a Resend API key for authentication and handles both successful delivery confirmations and error reporting."
deploya-labs,mcp-supabase,9,,"Supabase MCP server enables AI assistants to interact with Supabase databases, allowing SQL query execution, database management, and user authentication operations. Built by Alexander Zuev, it supports both read-only (default) and read-write modes with safety features, integrates with Supabase Management API, and includes region-specific configuration options. The implementation is containerized for easy deployment via Smithery.ai and requires minimal configuration with just a project reference and database password. It's particularly valuable for developers who need to manage their Supabase projects directly through AI assistant conversations without switching contexts."
derbenoo,fiberflow-mcp-gateway,0,299,"Fiberflow MCP Gateway serves as a bridge between Claude Desktop and Fiberflow's MCP server, enabling seamless integration through Server-Sent Events (SSE). Built by derbenoo, this TypeScript implementation runs as a command-line tool that connects to a Fiberflow SSE endpoint using a secret key and communicates with Claude Desktop via stdio. The gateway is designed for users who want to leverage Fiberflow's capabilities directly within Claude conversations without additional configuration steps beyond providing their Fiberflow MCP server secret in the Claude Desktop configuration."
descope-sample-apps,descope-mcp-server-stdio,3,,"This Descope MCP server, developed by Descope Sample Apps, integrates the Model Context Protocol with Descope's authentication and authorization platform. Built with TypeScript and leveraging the MCP SDK, it enables AI agents to interact with Descope's APIs for user management, authentication flows, and access control. The implementation focuses on providing a secure bridge between natural language commands and Descope's functionality, allowing operations like user creation, authentication, and permission management. It's particularly useful for developers and organizations looking to enhance their applications with AI-driven identity and access management capabilities, enabling use cases such as automated user onboarding, intelligent access control, and AI-assisted security policy enforcement without directly dealing with the complexities of Descope's APIs."
deshartman,twilio-agent-payments-mcp-server,2,,"Twilio Agent Payments MCP Server enables secure, PCI-compliant payment processing during voice calls by providing a bridge between AI assistants and Twilio's payment API. The server manages the complete payment capture workflow—collecting card numbers, security codes, and expiration dates—while maintaining state through asynchronous callbacks and guiding the AI with contextual prompts at each step. It uses Twilio API Keys for enhanced security and tokenizes payment information, making it particularly valuable for customer service applications where agents need to collect payments without handling sensitive card data directly."
deshartman,twilio-messaging-mcp-server,2,,"Twilio Messaging MCP Server enables AI assistants to send SMS messages through the Twilio API. It provides a simple 'send-sms' tool that accepts destination phone numbers and message content, handling all the authentication and API interaction behind the scenes. The server requires Twilio credentials (Account SID, API Key, API Secret) and a sender phone number, which are passed as command-line arguments rather than environment variables for enhanced security. Designed for integration with Claude Desktop, it can be run either through npx for convenience or installed globally, making it ideal for workflows where AI assistants need to send text messages without leaving the conversation interface."
designcomputer,mysql_mcp_server,422,400127,"This MySQL MCP server, developed by designcomputer, provides a secure interface for language models to interact with MySQL databases. It enables AI agents to list tables, read data, and execute SQL queries through a controlled interface. The server integrates with Claude Desktop and can be run standalone, offering flexibility in deployment. By focusing on read-only access and using environment variables for configuration, it maintains data security while allowing AI systems to explore and analyze relational data. This implementation is particularly useful for AI assistants designed to perform database schema exploration, generate SQL queries, or provide data-driven insights using MySQL as the backend."
yajihum,design-system-mcp,4,,"A design system MCP server that provides tools for retrieving component properties and design tokens from a React-based UI library. The server uses ts-morph to analyze TypeScript component files and extract prop information, while also accessing JSON token files that define colors, typography, spacing, and border radius values. This implementation enables AI assistants to understand the structure of UI components and available design tokens, facilitating more accurate code generation and design recommendations when working with this component library."
zhixiaoqiang,desktop-image-manager-mcp,1,,"Desktop Image Manager MCP provides tools for managing and manipulating images on the local desktop, with capabilities for counting image files, retrieving filenames, and compressing images. Built with TypeScript and leveraging the Sharp library for image processing, it enables AI assistants to directly interact with image files in the user's desktop directory through a standardized interface."
deus-h,claudeus-plane-mcp,1,,"Claudeus Plane MCP is a server implementation that provides AI assistants with direct access to Plane project management capabilities. It exposes tools for managing projects and issues through a standardized interface, allowing operations like listing, creating, updating, and deleting projects and issues. Built with TypeScript and the Model Context Protocol, it features secure API client handling, robust error management, and support for multiple Plane instances configured via JSON. This implementation is particularly valuable for teams who want to manage their Plane projects directly through conversational AI without switching contexts."
devabdultech,hn-mcp,7,,"This MCP server provides access to Hacker News data through a set of capabilities including searching stories and comments, retrieving various types of stories, fetching individual stories with comments, and accessing user profiles and submissions. Developed by devabdultech, it integrates with the Hacker News API and is built using TypeScript and Node.js. The server is designed for use cases requiring real-time access to Hacker News content, such as news aggregation, trend analysis, or building custom Hacker News clients."
devakone,mysql-query-mcp-server,1,,"MySQL Query MCP Server provides a secure bridge between AI assistants and MySQL databases, enabling read-only query execution across multiple environments (local, development, staging, production). Built with TypeScript and Node.js, it offers three main tools: query for executing SELECT statements with timeout controls, info for retrieving database metadata, and environments for listing available database connections. The server implements strict validation to ensure only read-only operations are permitted, supports SSL connections for secure database access, and includes comprehensive error handling and debugging capabilities. It's particularly valuable for developers and data analysts who need to safely access MySQL data through conversational interfaces without exposing write permissions."
devalexandre,mcp-servers,0,,"MCP Servers with Pyppeteer enables AI assistants to control headless browsers for web automation tasks through the Multi-Context Protocol framework. Developed by Alexandre E Souza, it provides capabilities for automated navigation, screenshot capture, element interaction using CSS selectors or XPath, and access to dynamic page information. The implementation runs as a Python package that can be installed via pip or directly from GitHub, and includes Docker support for containerized deployment. It's particularly valuable for workflows requiring web scraping, UI testing, or any scenario where programmatic browser control enhances AI assistant capabilities."
deventerprisesoftware,scrapi-mcp,3,552,"ScrAPI MCP Server is a specialized web scraping solution that enables AI assistants to extract content from websites that employ bot detection, captchas, or geolocation restrictions. Developed by DevEnterprise Software, this TypeScript implementation provides two core tools: one for retrieving content as HTML for advanced parsing needs, and another for Markdown output when text content is the priority. The server leverages residential proxies and automated captcha solving capabilities through the ScrAPI service, making it particularly valuable for AI systems that need to access otherwise restricted web content for research, data collection, or information retrieval tasks."
devhub,devhub-cms-mcp,2,3566,"Allows seamless interaction with DevHub's API platform, enabling automated content management and providing additional context to DevHub's users of LLMs. This MCP will benefit users looking to integrate AI capabilities with their DevHub workflows."
devlimelabs,meilisearch-ts-mcp,7,,"This MCP server implementation provides a bridge to Meilisearch, a powerful open-source search engine. It enables AI assistants to perform advanced search operations, manage indexes and documents, and configure search settings through a standardized interface. The server integrates closely with Meilisearch's API, offering features like faceted search, custom ranking, and asynchronous task management, making it ideal for applications requiring fast, relevant, and customizable search functionality."
stephanj,mcpjavafilesystem,11,,"Provides a filesystem and web access MCP server that enables AI agents to interact with local files and web resources through a set of standardized tools. Built for the Devoxx ecosystem, this server supports operations like reading, writing, searching, and editing files, as well as fetching web page content, with robust error handling and detailed JSON responses. Particularly useful for AI assistants that need to perform file system and web research tasks without direct user intervention."
devyhan,xcode-mcp,2,801,"A TypeScript implementation of the Model Context Protocol (MCP) for Xcode integration, allowing developers to connect Xcode with AI models that support MCP."
dfinke,mcp-powershell-exec,31,,"MCP PowerShell Exec Server enables AI assistants to execute PowerShell scripts and receive the output in real-time. Developed by Doug Finke, this lightweight Python server uses FastMCP to create a bridge between AI tools like GitHub Copilot and PowerShell functionality. The implementation securely processes PowerShell code strings through subprocess calls, making it particularly valuable for AI agents that need to analyze data, automate Windows tasks, or interact with PowerShell modules without leaving their interface. It integrates seamlessly with VSCode Insiders in agent mode, allowing for powerful PowerShell capabilities within AI-assisted workflows."
dhakalnirajan,blender-open-mcp,19,,"Blender Open MCP is a server implementation that integrates Blender with local AI models via Ollama using the Model Context Protocol. Developed by Nirajan Dhakal, it enables controlling Blender through natural language prompts, allowing users to perform 3D modeling tasks like creating primitives, modifying objects, applying materials, and rendering images. The server includes optional PolyHaven integration for downloading and using assets directly within Blender, and features a Blender add-on that provides a user interface for seamless communication between the AI model and the 3D software."
dhartunian,cockroachdb-mcp-server,3,,"This MCP server connects to a CockroachDB instance, exposing database and table schemas as resources and enabling SQL query execution as tools. It provides prompts for query analysis and allows access to cluster metadata. The server is designed to integrate CockroachDB functionality into AI-assisted workflows, making it useful for database exploration, query optimization, and cluster management tasks."
dhkts1,sequentialstory,11,3613,"A Model Context Protocol server that provides two complementary tools for structured problem-solving: Sequential Story and Sequential Thinking. Sequential Story structures problems as narrative sequences with characters, settings, and plot points to make complex concepts more memorable, while Sequential Thinking offers a pure Python implementation for organizing problems as thought sequences. Both approaches support branching, revision, and visual formatting of elements, making them effective mnemonic techniques for enhancing memory retention and problem understanding. The server is configurable to enable either or both tools based on environment variables, and integrates seamlessly with AI systems through the MCP protocol."
jxnl,apple-mcp,6,,"Apple MCP tools provides native macOS integration for AI assistants, enabling access to Apple applications like Contacts, Notes, Messages, Mail, Reminders, Calendar, and Maps. Developed by Dhravya Shah, this TypeScript implementation uses JXA (JavaScript for Automation) and AppleScript to interact with macOS applications, allowing AI assistants to perform tasks such as sending messages, creating notes, managing reminders, searching emails, and getting directions. The server features both eager and lazy loading modes for reliability, making it particularly valuable for users who want their AI assistant to interact with their personal data and Apple ecosystem without leaving the conversation context."
dhravya,apple-mcp,1467,22461,"This MCP server implementation provides a bridge to Apple's native applications, enabling AI assistants to interact with Contacts, Notes, and Messages. Developed by Dhravya Shah, it offers tools for searching and retrieving contacts, managing notes, and sending messages. The server is built using TypeScript and Bun, integrating with the Model Context Protocol SDK. It focuses on secure handling of personal data and robust error management, making it suitable for AI applications that need to automate tasks within Apple's ecosystem. The implementation is designed for easy setup within the Claude Desktop environment and is particularly useful for personal productivity and communication workflows."
dhrishp,mcp-post-linkedin,0,,"LinkedIn Posting Service MCP Server enables AI assistants to publish content directly to LinkedIn profiles. Built with TypeScript, it provides a tool for creating posts with customizable visibility settings, support for text content, media attachments, and link sharing with thumbnails. The implementation authenticates using LinkedIn's API via access tokens and user IDs, making it ideal for social media management, content marketing, and professional networking tasks where automated LinkedIn posting is required."
dhso,remote-mcp,1,,"Remote-MCP provides a lightweight API bridge for accessing MCP functionality over HTTP, built with Python 3.10 and Starlette. Developed by dhso, this implementation containerizes MCP services in a minimal Alpine-based Docker image, making it easy to deploy and scale in distributed environments. The server exposes MCP capabilities through a web interface, allowing clients to interact with MCP tools remotely without requiring direct library integration in their applications."
shimapon,mcp-server-diceroll,1,213,"A simple dice rolling MCP server that provides a tool for generating random dice rolls. The server implements a single tool called 'roll_dice' that accepts parameters for the number of faces on the dice and how many times to roll, returning both individual roll results and their sum. It uses the Model Context Protocol's stdio transport for communication and is built with TypeScript, leveraging the Zod library for input validation and schema generation."
atuinturtle,dice-thrower-mcp-server,0,,"A simple dice rolling server that enables AI assistants to simulate rolling any number of dice with any number of sides. Built with TypeScript and the MCP SDK, it provides a single tool for generating random dice rolls and calculating their sum, making it useful for tabletop gaming applications, random number generation, or probability demonstrations. The implementation focuses on a clean, minimal approach with input validation to ensure reasonable dice parameters."
dicklesworthstone,ultimate_mcp_server,23,,"A unified gateway server for managing interactions with multiple LLM providers (OpenAI, Anthropic, DeepSeek, Gemini) with built-in cost optimization, caching, and monitoring. Features include automatic model selection based on task requirements, semantic caching to reduce redundant API calls, detailed usage analytics, and a CLI for direct interaction. The implementation focuses on reliability with comprehensive error handling, request retries, and rate limiting, making it particularly valuable for production deployments that need to balance performance and costs across multiple LLM providers."
cybersiddhu,dcr-mcp,0,,"A lightweight MCP server for generating git commit message summaries using OpenAI. Built with the mcp-go framework, this tool enables developers to analyze repository commit histories by filtering commits by date range and author, then generating human-readable markdown summaries that highlight key changes and their business impact. The implementation focuses on providing a streamlined, developer-friendly approach to understanding project evolution through commit message analysis."
didlawowo,mcp-collection,7,,"This Pulumi MCP implementation, developed by didlawowo, provides a streamlined interface for infrastructure-as-code operations. Built with Pulumi's cloud development platform, it offers a foundation for managing cloud resources programmatically. The implementation focuses on simplicity, with a basic project structure and Sonar integration for code quality analysis. It's particularly useful for tasks like automating cloud infrastructure deployment, managing multi-cloud environments, or integrating infrastructure management into CI/CD pipelines, enabling efficient cloud resource orchestration without requiring deep knowledge of individual cloud provider APIs."
diegofornalha,mcp-shell-server,0,,"MCP Shell Server provides a secure way to execute shell commands through the MCP protocol, with robust validation and safety features. The implementation includes command whitelisting through environment variables, directory validation to prevent unauthorized access, support for input/output redirection and command pipelines, and timeout handling for long-running processes. Built with Python using asyncio for non-blocking execution, it offers a clean API for executing commands with proper error handling and resource cleanup, making it ideal for workflows requiring controlled shell access within AI assistant conversations."
diegofornalha,mcp-server-serper,0,,"The Serper MCP Server provides AI assistants with web search capabilities through integration with the Serper API. Built by Diego Fornalha, it supports various search types including web, news, images, shopping, and YouTube searches, with both TypeScript and Python implementations available. The server can be deployed via Docker or run locally, offering both stdio and Server-Sent Events (SSE) communication protocols. This implementation is particularly useful for workflows requiring real-time web information retrieval, content research, and data gathering directly within AI assistant conversations."
junjiem,dify-plugin-mcp_compat_dify_tools,17,,"MCP Compatible Dify Tools is a bridge plugin that enables Dify's tool ecosystem to work with MCP-compatible AI assistants. It provides two key endpoints: an SSE endpoint for establishing streaming connections and a messages endpoint that handles tool discovery and execution. The plugin converts Dify tool definitions into MCP-compatible formats, allowing AI assistants to discover available tools and invoke them through a standardized interface. This implementation is particularly useful for organizations already using Dify who want to extend their existing tools to work with any MCP-compatible AI assistant without duplicating tool configurations."
digitalocean-labs,mcp-digitalocean,1,,"DigitalOcean MCP Server provides a Go-based implementation that enables AI assistants to interact with DigitalOcean's cloud infrastructure. Built using the mcp-go library and DigitalOcean's godo client, it exposes resources for accessing account information, droplets, domains, firewalls, and other cloud services, along with tools for managing these resources. The server authenticates via an API token and handles both resource retrieval and modification operations, making it valuable for cloud infrastructure management, monitoring, and automation tasks without requiring direct access to the DigitalOcean control panel."
dillip285,mcp-dev-server,1,,"This MCP development server, created for Claude to manage software projects, provides comprehensive project context awareness and code execution through Docker environments. It integrates with Git for version control and offers file system operations, template-based project creation, and build/test capabilities. The server is built using Python 3.12+ and leverages libraries like FastAPI, aiohttp, and GitPython to deliver its functionality. It's designed for AI-assisted software development workflows, enabling use cases such as automated code analysis, intelligent refactoring suggestions, and seamless project management across multiple languages and frameworks."
dillip285,mcp-terminal,5,,"This MCP terminal server, developed by dillip285, provides a secure environment for executing commands within allowed paths. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a controlled interface for running system commands, ensuring safety and limiting access to specified directories. The implementation stands out by combining the flexibility of a command-line interface with the security constraints necessary for AI-assisted operations. It's particularly useful for AI assistants or applications needing to perform system-level tasks, enabling secure file management, script execution, or system monitoring while maintaining strict control over the accessible filesystem areas."
HEAD,kubernetes-listpods,0,,"Kubernetes ListPods MCP server enables Claude to interact with Kubernetes clusters by providing a tool to list pods in specified namespaces. Built with Go using the official Kubernetes client libraries and the mcp-go framework, it reads from the user's kubeconfig file to establish cluster connections. The implementation handles dynamic client creation, resource mapping, and pod retrieval through a simple interface that requires only a namespace parameter. This tool is particularly useful for DevOps workflows, cluster monitoring, and troubleshooting Kubernetes deployments directly within Claude conversations."
dion-hagan,mcp-server-spinnaker,0,793,"This MCP server implementation for Spinnaker, developed by Dion Hagan, enables AI models to interact with Spinnaker deployments, pipelines, and applications through a standardized interface. It provides tools for retrieving application and pipeline data, as well as triggering pipeline executions. The server maintains context about Spinnaker deployments and refreshes it periodically. Built with TypeScript and leveraging Express.js, it offers a RESTful API and WebSocket support for real-time updates. This implementation is particularly useful for DevOps teams and SREs looking to incorporate AI-driven decision making into their CI/CD processes, enabling use cases like automated deployment management, intelligent pipeline orchestration, and AI-assisted incident response."
direkt,mcp-test,0,,"This SQLite MCP server implementation enables AI assistants to analyze log files by creating and querying a structured database from compressed log data. It processes gzipped log files into an SQLite database with tables for logs, stack traces, and parsing errors, while providing tools to extract error data to Parquet format for further analysis. The server supports querying by log level, timestamp, and module, making it valuable for troubleshooting application issues, identifying error patterns, and generating insights from large volumes of log data."
disdjj,mcp-coco,4,261,"MCP-Coco provides a pair programming master tool that helps AI assistants ask critical questions about code and technical solutions. Built by DJJ, this TypeScript implementation uses the FastMCP framework to create a specialized prompt that guides AI models to challenge assumptions, explore alternatives, and focus on code quality aspects like performance, security, and maintainability. The tool transforms any code snippet or design idea into a structured framework for deep technical inquiry, making it particularly valuable for developers seeking thoughtful code reviews and architectural feedback without direct solutions."
disdjj,mcp-cook,7,1052,"MCP-Cook is a service that provides dish information and recipes to AI agents. Created by DJJ, this implementation offers access to a large collection of over 200 dishes stored as markdown files, including both food recipes and cocktail recipes. The service is built with TypeScript and uses the Model Context Protocol SDK to make this culinary knowledge accessible through a standardized interface. It's particularly useful for applications that need to retrieve cooking instructions, ingredient lists, or suggest dishes based on available ingredients."
dishant27,twitter-mcp,1,,"Twitter-MCP is a server implementation that provides AI assistants with access to Twitter's API capabilities through the Model Context Protocol. Developed by Dishant27, it enables posting tweets, searching for content, managing user profiles, and handling follower relationships. The server is built with TypeScript and includes Python sample code for common Twitter operations. It features robust error handling for rate limits and authentication issues, making it suitable for applications that need to integrate Twitter functionality into AI workflows without direct API access."
disler,aider-mcp-server,157,,"Aider MCP Server enables Claude Code to offload AI coding tasks to Aider, reducing costs and enhancing development efficiency. The server exposes two main tools: aider_ai_code for implementing code changes based on natural language prompts, and list_models for discovering available AI models. By delegating specific coding tasks to Aider while maintaining Claude Code for orchestration and review, developers gain more control over their AI coding workflow and can leverage different models for different aspects of development."
disler,just-prompt,176,,"Just Prompt is a lightweight MCP server that provides a unified interface to multiple LLM providers including OpenAI, Anthropic, Google Gemini, Groq, DeepSeek, and Ollama. It offers tools for sending prompts to multiple models in parallel, automatic model name correction, and saving responses to files. The implementation supports provider shorthand notation, thinking tokens for Claude models, and includes comprehensive test coverage for all providers. Ideal for developers who need to interact with multiple LLM APIs through a single, consistent interface."
distrihub,mcp-google-workspace,1,,"This MCP server implementation provides a bridge between Google Workspace services (specifically Google Drive and Google Sheets) and MCP-compatible clients like AI assistants. It offers capabilities for file management in Drive and data manipulation in Sheets, enabling tasks such as listing files, reading/writing spreadsheet data, and creating new documents. Built in Rust for performance, it's designed to integrate smoothly into larger agent workflows and compositions, making it valuable for automating document-centric tasks and data analysis within the Google ecosystem."
divslingerx,mcp-server,0,,"This MCP server, developed for web search capabilities, provides a Puppeteer-based interface for AI assistants to perform Google searches and extract structured results. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a containerized solution using Docker for easy deployment and scalability. The implementation focuses on headless browser automation, allowing for dynamic content retrieval and parsing. It's particularly useful for enhancing AI models with real-time web data, enabling tasks like information gathering, fact-checking, or content generation with current search results, while operating within a controlled environment that can handle modern web technologies and JavaScript-rendered content."
divyamagg24,spotifymcp,0,,"Spotify MCP Server provides a bridge between Claude and the Spotify API, enabling retrieval of artist information through a standardized tool. Built with TypeScript and the Model Context Protocol SDK, it currently supports fetching artist details and is designed to be extensible for future music-related queries like retrieving top tracks or creating playlists. The implementation simplifies interaction with Spotify's API by abstracting complex authentication and request handling."
divyanshkushwaha,github-mcp-server-claude,0,,"GitHub MCP Server provides a bridge to the GitHub API, enabling AI assistants to interact with GitHub data through three key functions: retrieving user information, accessing repository details, and fetching authenticated user data. Built with Python using the FastMCP framework, it handles authentication through GitHub tokens stored as environment variables and includes comprehensive error handling for HTTP status errors and timeouts. This implementation is particularly valuable for workflows requiring GitHub data retrieval directly within Claude conversations, making it ideal for code collaboration, repository exploration, and user profile analysis."
divyanshu-vashu,mcp_server,0,,"UITemplateServer provides a resource-based interface for AI assistants to access and utilize UI components from the AppointySaastak library. Built with the Model Context Protocol SDK, it serves login interface templates (both basic and modern variants) with their associated HTML, CSS, and JavaScript files. The server implements robust error handling and metadata enrichment, making it ideal for AI-powered code generation workflows where the LLM needs to combine UI templates with backend code. This implementation enables seamless integration between AI assistants and pre-built UI components, streamlining the development of login interfaces without requiring manual code retrieval."
djalal,quran-mcp-server,23,,"Quran MCP Server provides a bridge to the Quran.com API v4, enabling AI assistants to access Islamic scripture and related resources. Built with TypeScript and the Model Context Protocol SDK, it offers tools for retrieving chapters, verses, translations, tafsirs (commentaries), and audio recitations from the Quran. The implementation features robust error handling, request validation using Zod schemas, and intelligent caching to improve performance while reducing API load. This server is particularly valuable for researchers, students, and anyone seeking to incorporate Quranic references into their AI interactions without switching to external resources."
djkz,bruno-api-mcp,0,,"Bruno API MCP Server provides a bridge between AI assistants and Bruno API collections, enabling execution of HTTP requests defined in Bruno's .bru format through the Model Context Protocol. The server automatically loads API collections, parses environment variables, and exposes each request as a callable tool with appropriate schemas, making it valuable for testing APIs, automating workflows, and integrating external services directly from AI conversations without manual request configuration."
djvosper,mcp-pptx,2,,"PowerPoint Manager MCP server enables Claude to create and manipulate PowerPoint presentations directly within conversations. Built with FastMCP and python-pptx, it provides tools for creating professional presentations with customizable slides, applying formatting themes, and generating slide previews. The implementation handles structured content like bullet points, text formatting, and slide layouts while saving presentations to an accessible user directory, making it ideal for quickly generating business presentations, educational materials, or visual content without leaving the Claude interface."
d-kimuson,esa-mcp-server,23,1074,"This esa MCP server, developed by d-kimuson, provides integration with the esa.io API for team collaboration and knowledge management. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for searching and retrieving esa posts. The implementation focuses on simplifying access to esa.io functionality through a standardized MCP interface, with features like mock data generation for testing. It's particularly useful for AI assistants and applications needing to incorporate team knowledge and documentation, enabling use cases such as information retrieval, content summarization, and collaborative writing without directly dealing with the complexities of the esa.io API."
d-klotz,perplexity-mcp-ts,0,,"Perplexity AI MCP server provides AI assistants with direct access to Perplexity's web search capabilities through a standardized interface. The implementation exposes a web_search tool that leverages Perplexity's API to perform internet searches and return AI-generated answers with source citations. Built with TypeScript and the MCP protocol, it handles authentication via API keys, supports multiple Perplexity models (sonar, sonar-pro, sonar-reasoning-pro), and manages error states appropriately. This server is particularly valuable for users who need to incorporate up-to-date web information into their AI assistant conversations without switching contexts."
dkmaker,mcp-function-app-tester,4,,"This MCP server, developed by Christian Pedersen, enables testing of Azure Function Apps through Cline. Built with TypeScript, it provides a command-line interface for interacting with Function App endpoints using various HTTP methods. The implementation supports custom headers, request body handling, and multiple authentication methods including Basic, Bearer Token, and API Key. It's designed for developers working with Azure Function Apps who need a streamlined way to test and debug their endpoints, offering a bridge between natural language interactions and Azure serverless functions. The tool is particularly useful for scenarios involving rapid prototyping, automated testing, or AI-assisted Azure Function App development."
dkpoulsen,flutter-tools,4,,"This MCP server, developed by dkpoulsen, provides tools for interacting with the Flutter SDK. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers functionalities for analyzing and fixing Dart/Flutter files. The implementation focuses on two main tools: 'get_diagnostics' for retrieving Flutter/Dart diagnostics, and 'apply_fixes' for applying Dart fix suggestions to files. By connecting AI models with Flutter development tools, this server enables scenarios such as automated code analysis, error detection, and code improvement suggestions. It's particularly useful for AI-assisted Flutter development, enabling seamless integration of AI capabilities into the Flutter development workflow."
dkruyt,mcp-hetzner,7,,"A Model Context Protocol server for Hetzner Cloud API, developed by Dennis Kruyt, that enables language models to manage cloud infrastructure resources through structured functions. The implementation provides tools for creating and managing servers, volumes, firewalls, and SSH keys on the Hetzner Cloud platform, with comprehensive error handling and detailed response formatting. It supports both stdio and SSE transport modes, making it compatible with Claude Code and other MCP clients, and is particularly useful for AI-assisted cloud infrastructure management, automated provisioning, and infrastructure-as-code scenarios."
dkvdm,onepassword-mcp-server,4,,"OnePassword MCP Server provides a secure bridge between AI assistants and 1Password credentials through the Model Context Protocol. This Python-based implementation enables Claude and other AI assistants to retrieve stored credentials from 1Password vaults using service account tokens, eliminating the need to expose sensitive information directly in prompts. The server exposes a single tool for retrieving username/password pairs by item name, making it particularly valuable for workflows where AI assistants need authenticated access to web services while maintaining proper credential security practices."
dlwjdtn535,mcp-bybit-server,3,,"MCP Bybit Server provides a bridge to the Bybit cryptocurrency exchange API, enabling AI assistants to perform market data retrieval, account management, and order execution operations. Developed by Dana K. Williams, this Python implementation offers a comprehensive set of tools for interacting with Bybit's Unified Trading API v5, including functions for retrieving orderbooks, candlestick data, wallet balances, and placing/managing orders across spot and futures markets. The server requires Bybit API credentials and can be deployed as a Docker container, making it particularly useful for algorithmic trading, market analysis, and portfolio management applications."
dlwjdtn535,mcp-chrome-integration,2,,"MCP Chrome Integration provides a bridge between AI models and the Chrome browser, enabling web automation tasks through a WebSocket-based protocol. The server component, built with Python and FastAPI, offers a rich set of capabilities including page navigation, element interaction, form filling, JavaScript execution, and content extraction. The implementation includes robust error handling and security considerations for Chrome's restrictions, making it particularly valuable for AI assistants that need to perform complex web-based operations like data scraping, form automation, or interactive browsing sessions."
HEAD,mcp-server,721,,"This MCP server, developed by dmayboroda, enables AI assistants like Claude to perform RAG (Retrieval-Augmented Generation) on local files. Built in Python and leveraging the uv package manager, it integrates seamlessly with MCP clients through a simple configuration file. The server allows the client to search and retrieve context from the user's local documents, enhancing its ability to provide relevant and personalized responses. By granting access to private or offline information sources, this implementation extends the client's knowledge base beyond its training data, making it particularly useful for tasks involving confidential documents, personal notes, or frequently updated local resources."
dmontgomery40,mcp-3d-printer-server,43,1380,"This MCP server implementation provides a bridge between AI assistants and various 3D printer management systems, including OctoPrint, Klipper, Duet, Repetier, and Bambu Labs printers. Developed by David Montgomery, it offers tools for printer control, file management, and advanced STL file manipulation. The server is designed for use cases requiring 3D printing integration, such as remote printer monitoring, automated print job management, and custom model modifications."
dmontgomery40,mcp-local-server,3,,"This BirdNet-Pi MCP server, developed by DMontgomery40, integrates BirdNet-Pi's bird detection capabilities with a FastAPI-based JSON-RPC interface. It provides functions for retrieving bird detections, detection statistics, audio recordings, and daily activity data. The server abstracts BirdNet-Pi's functionality, offering a standardized way for AI assistants to access and analyze bird detection data. By connecting AI systems with BirdNet-Pi's acoustic monitoring capabilities, this implementation enables applications such as automated bird species identification, habitat monitoring, and ecological research. It is particularly useful for ornithologists, conservationists, and citizen scientists who want to leverage AI for analyzing bird populations and behaviors."
dmontgomery40,mcp-server-birdstats,1,399,"This MCP server for BirdNET-Pi and eBird analysis, developed by David Montgomery, enables AI assistants to cross-reference bird detection data from BirdNET-Pi/BirdWeather stations with eBird's extensive observation database. It integrates the BirdWeather and eBird APIs to provide tools for querying detections, species information, and observation data using natural language. Built with TypeScript and the Model Context Protocol SDK, it implements data integrity principles and offers data-driven visualizations through React artifacts. The server is designed for ornithologists, bird enthusiasts, and ecological researchers, enabling use cases like rare bird identification, migration pattern analysis, and local biodiversity assessment."
dmontgomery40,mcp-canvas-lms,8,,"This MCP server, developed by DMontgomery40, provides integration between AI assistants and the Canvas learning management system API. It offers tools for managing courses, assignments, enrollments, and grades within Canvas. The server leverages TypeScript for type safety and modular architecture to enhance maintainability. Key features include course creation/updating, assignment management, grade submission, and user enrollment. By bridging AI capabilities with Canvas's educational platform, this implementation enables AI-assisted course administration and student management. It is particularly useful for scenarios requiring automated course setup, bulk assignment creation, or AI-guided grading assistance in educational institutions using Canvas LMS."
dmontgomery40,deepseek-mcp-server,217,7715,"This DeepSeek MCP server, developed by David Montgomery, enables seamless integration of DeepSeek's advanced language models with MCP-compatible applications like Claude Desktop. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a chat completion tool with customizable parameters such as model selection, temperature control, and token limits. The implementation focuses on simplifying access to DeepSeek's powerful AI capabilities through a standardized interface. It's particularly useful for developers and researchers looking to incorporate state-of-the-art language models into their applications without dealing directly with DeepSeek's API intricacies, enabling use cases like AI-assisted writing, code generation, and complex reasoning tasks."
dmontgomery40,meta-mcp-server,12,1264,"This Meta MCP Server, developed by David Montgomery, enables AI assistants to dynamically create customized MCP servers. It utilizes the Model Context Protocol SDK to manage tools and resources, automating the creation of directories and files for new servers. The implementation focuses on flexibility, allowing users to specify the structure and content of generated servers. By abstracting the complexities of server setup, this tool streamlines the process of creating specialized MCP servers for various AI applications. It is particularly useful for developers and researchers who need to rapidly prototype or deploy custom MCP servers tailored to specific AI tasks or integrations."
dnakov,frida-mcp,41,2829,"Frida MCP provides a bridge between AI systems and mobile/desktop applications through Frida's dynamic instrumentation toolkit. This implementation enables AI assistants to interact with running processes across devices, offering capabilities like process management, device enumeration, JavaScript execution, and script injection. Built with the official MCP Python SDK, it features an interactive JavaScript REPL with real-time execution, comprehensive error handling, and progress tracking for long-running operations. The server is designed for seamless integration with Claude Desktop and supports all MCP transport methods, making it valuable for application analysis, debugging, and security testing workflows."
radareorg,radare2-mcp,45,,"Radare2 MCP Server provides a direct bridge between AI assistants like Claude and the radare2 binary analysis framework. This implementation enables AI tools to perform sophisticated binary analysis tasks including opening files, running commands, analyzing code, and disassembling instructions through a simple stdin/stdout communication model. The server exposes radare2's capabilities as MCP resources and tools, making it particularly valuable for reverse engineering workflows, malware analysis, and debugging applications without leaving the AI assistant conversation interface."
dncampo,fiware-mcp-server,2,,"FIWARE MCP Server provides a bridge between AI assistants and FIWARE Context Brokers, enabling interaction with IoT data through natural language. This implementation offers tools for checking broker versions, querying entities, and publishing or updating data in the Context Broker using NGSI-LD format. Built with FastMCP, the server includes robust error handling and timeout management, making it valuable for users who need to monitor and control IoT devices or access contextual data without leaving their AI assistant interface."
dnullp,bilibili-mcp-server,2,,"Bilibili-mcp-server is a Go-based MCP server that provides a bridge to the Bilibili API, enabling AI assistants to interact with the popular Chinese video-sharing platform. Developed by DnullP, this implementation offers tools for retrieving user profile information, listing followed accounts, and finding videos through both v1 (tools) and v2 (resource) interfaces. The server requires user authentication via cookies stored in a configuration file and leverages the CuteReimu/bilibili Go library for API interactions. It can be compiled for both Windows and Linux environments, making it useful for applications that need to access Bilibili account data or content discovery without direct API integration."
dongprojectteam,mcp-docent-server,2,,"A Docent Server implementation that enables AI assistants to generate descriptions of images through the MCP framework. Built with TypeScript and Node.js, this server leverages the FastMCP library and OpenAI's API to provide image description capabilities. The implementation registers a specialized docent tool that processes image inputs and returns detailed descriptions, making it particularly useful for accessibility applications, content analysis, and enhancing AI interactions with visual media."
docherty,contextmgr-mcp,2,,"ContextMgr MCP server provides a structured workflow management system for software development projects, enabling AI assistants to maintain context across development sessions. Built with Node.js and TypeScript, it implements a state management architecture that tracks projects through triage, planning, development, and QA phases while maintaining checkpoints for seamless resumption. The server offers tools for creating and managing projects, work packages, and tasks with comprehensive tracking of file changes, dependencies, and progress. This implementation excels at maintaining development context during interruptions, making it particularly valuable for complex projects requiring consistent workflow management and quality control."
graphfied,mcp-claude-desktop-connect,1,,"This MCP server implementation provides a documentation search tool that allows Claude to retrieve the latest documentation for popular Python libraries including LangChain, LlamaIndex, and OpenAI. It uses the Serper API to perform targeted Google searches within specific documentation domains, then fetches and extracts the content from the search results. The implementation is lightweight, requiring only a few dependencies (BeautifulSoup, httpx, and MCP), making it easy to integrate into existing workflows for developers who need quick access to up-to-date library documentation without leaving their conversation with Claude."
packages,mcp-server,10,1612,"A Model Context Protocol (MCP) server implementation for Dodo Payments, enabling secure payment processing capabilities for AI applications."
dodopayments,dodopayments-node,10,,"DodoPayments MCP Server provides a bridge between AI assistants and the Dodo Payments API, enabling programmatic access to payment processing capabilities. Built with TypeScript and the Model Context Protocol SDK, it exposes over 40 tools for managing customers, products, subscriptions, payments, refunds, disputes, and license keys. The server requires authentication via API token and supports both Node.js and web environments, making it valuable for businesses that need their AI assistants to process payments, manage subscriptions, or handle licensing without leaving their conversation context."
doggybee,mcp-server-ccxt,13,857,"A Model Context Protocol (MCP) server implementation for CCXT, a cryptocurrency trading library with support for many exchanges. This server allows AI assistants to access real-time cryptocurrency market data, including prices, order books, and trading information across multiple exchanges."
doggybee,mcp-server-leetcode,6,,"This LeetCode MCP server provides AI assistants with structured access to LeetCode's problem database, user profiles, and contest information through GraphQL queries. Built with TypeScript and the Model Context Protocol SDK, it offers tools for retrieving daily challenges, searching problems by difficulty and tags, accessing user submissions, and fetching contest rankings. The implementation features comprehensive error handling and a modular architecture with clearly defined resources using custom URI schemes. It's particularly useful for developers and coding interview candidates who want to explore LeetCode problems, track their progress, or analyze contest performance through natural language interactions."
dogukanakkaya,pulumi-mcp-server,2,,"Pulumi MCP Server provides a bridge to the Pulumi Cloud API, enabling AI assistants to manage infrastructure as code through Pulumi stacks. The server exposes capabilities to create new stacks and list existing ones across organizations and projects, with validation using Zod to ensure proper input parameters. Built with TypeScript and the Model Context Protocol SDK, it uses environment variables for authentication and implements both high-level and low-level server interfaces. This implementation is particularly valuable for DevOps workflows where infrastructure management needs to be integrated directly into AI assistant conversations."
dojoengine,sensei-mcp,6,,"Sensei MCP server provides specialized guidance for Dojo development on the Starknet ecosystem, offering expert assistance with Cairo programming and the Entity Component System (ECS) framework. Built with TypeScript and the Model Context Protocol SDK, it loads specialized prompts and resources for different aspects of Dojo development including models, systems, testing, and token standards. The server registers these as tools that Claude can access during conversations, making it particularly valuable for developers building onchain games and applications who need contextual, framework-specific guidance without leaving their development workflow."
domdomegg,airtable-mcp-server,127,14982,"This MCP server, developed by domdomegg, enables AI assistants like Claude to interact with Airtable databases. Built in TypeScript, it provides capabilities for querying and modifying Airtable bases, tables, fields, and records through a standardized interface. The implementation stands out by offering full read/write access to Airtable's rich data model and metadata. By connecting AI capabilities with structured data in Airtable, this server allows AI systems to analyze, manipulate, and act on user-defined datasets. It is particularly useful for automating data entry workflows, building AI-powered data analysis tools, or creating natural language interfaces to Airtable-based applications."
domoteek,mcp-server-airbnb,0,,"MCP server for interacting with Airbnb's search and listing details functionality. Built by Domoteek, it provides tools for searching vacation rentals with filters like location, dates, and guests, as well as retrieving detailed property information including amenities, policies, and pricing. The implementation handles robots.txt compliance, parses Airbnb's HTML structure, and formats responses in a clean, consistent way - making it valuable for travel planning assistants and vacation rental analysis tools."
donghao1393,mcp-dbutils,62,67219,"MCP Database Utilities is a unified database access service that supports multiple database types (PostgreSQL, SQLite, and MySQL). Through its abstraction layer design, it provides a simple and unified database operation interface for MCP servers."
donmorr,alphavantagemcpserver,0,,"This Alphavantage MCP server, developed by Cesar Alvernaz and subsequently improved, provides a bridge to the Alphavantage stock market data API. Built with Python and leveraging the MCP framework, it offers tools for retrieving real-time and historical financial data. The implementation focuses on simplifying access to stock market information, with features like API key management and error handling. It's particularly useful for AI assistants and applications needing up-to-date financial data, enabling use cases such as portfolio analysis, market trend identification, and automated trading strategy development without directly dealing with the complexities of the Alphavantage API."
doobidoo,mcp-memory-dashboard,2,,"This MCP memory dashboard, developed using React and Vite, provides a user interface for managing and visualizing memory usage in MCP implementations. It leverages modern web technologies like Tailwind CSS for styling and Shadcn UI for component design. The dashboard offers real-time memory monitoring, allowing users to track and analyze memory consumption across different MCP processes. By providing an intuitive interface for memory management, it helps developers optimize performance and identify potential memory leaks in their MCP applications. This tool is particularly useful for MCP developers working on resource-intensive applications, system administrators monitoring MCP deployments, or anyone needing to maintain efficient memory usage in MCP-based systems."
doobidoo,mcp-memory-service,224,,"This MCP implementation, built with Python, provides a versatile framework for integrating with ChromaDB, a vector database for AI applications. It utilizes sentence transformers for efficient text embedding and tokenization, enabling advanced natural language processing capabilities. The implementation supports websocket connections, allowing for real-time data exchange and updates. By combining these technologies, it offers a robust solution for building AI-powered applications that require semantic search, document similarity comparisons, and content recommendation systems. This implementation is particularly well-suited for use cases such as intelligent document retrieval, content categorization, and personalized information delivery across various domains."
doomdagadiggiedahdah,iacr-mcp-server,2,,"This MCP server, developed for the IACR Cryptology ePrint Archive, provides a bridge between AI models and cryptographic research papers. Built with TypeScript and leveraging libraries like axios, cheerio, and xml2js, it offers tools for parsing and retrieving information from the ePrint Archive. The implementation focuses on efficient data extraction and processing, making it accessible for AI assistants or applications needing to analyze or query cryptographic research. It's particularly useful for tasks like literature reviews, trend analysis in cryptography, or staying updated with the latest cryptographic developments, enabling programmatic access to a vast repository of cryptographic knowledge without requiring deep understanding of web scraping or XML parsing."
doronaviguy,mpc-0x,0,,"MCP-0x provides real-time Ethereum address information across multiple blockchain networks. Built with Node.js using the FastMCP framework, it offers tools to fetch contract and address details while supporting Server-Sent Events (SSE) for live updates when blockchain data changes. The implementation includes a web demo interface, comprehensive testing scripts, and flexible deployment options through both HTTP and command-line interfaces. This server is particularly valuable for applications requiring continuous monitoring of on-chain activity without polling, making it ideal for DeFi dashboards, wallet applications, and blockchain analytics tools."
dortegau,mcp-proxy-sidecar,1,322,"A fork of the JetBrains MCP Server that adds WebSocket monitoring capabilities, allowing real-time observation of all MCP tool calls between clients (like Claude Desktop) and JetBrains IDEs. Created by Daniel Ortega, this proxy sidecar maintains full compatibility with the original implementation while broadcasting detailed information about each endpoint call and its arguments through WebSocket on port 27042. It's particularly useful for developers who need visibility into MCP interactions for debugging, monitoring, or extending IDE integration functionality."
