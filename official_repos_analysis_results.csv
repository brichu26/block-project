owner,repo,popularity_score,security_score,doc_quality_score,doc_quality_adjustment,total_risk_factor,risk_category,description
modelcontextprotocol,aws-kb-retrieval-server,4.2,0.2,7.1,-2.13,[],MINIMAL,"This AWS Knowledge Base Retrieval MCP server, developed by the Model Context Protocol team, enables AI assistants to access information from AWS Knowledge Bases using the Bedrock Agent Runtime. It provides a tool for performing retrieval-augmented generation (RAG) operations, allowing queries against specified knowledge bases and retrieval of multiple results. The server integrates seamlessly with AWS services, requiring proper AWS credentials configuration. By connecting AI capabilities with AWS knowledge repositories, this implementation empowers AI systems to leverage curated information sources. It is particularly useful for building AI assistants that need access to company-specific knowledge, technical documentation, or any scenario where an AI system benefits from retrieving contextual information from AWS-managed knowledge bases."
modelcontextprotocol,brave-search,4.8,0.2,7.2,-2.16,[],MINIMAL,"This Brave Search MCP server, developed by ModelContextProtocol, integrates the Brave Search API to provide web and local search capabilities for AI assistants. It offers flexible querying options including pagination, result filtering, and content freshness controls. The implementation handles API authentication and exposes Brave's search functionality through a standardized MCP interface. By bridging AI models and Brave's privacy-focused search engine, this server enables AI systems to retrieve relevant web pages, news articles, and local business information. It is particularly useful for AI assistants needing to gather up-to-date information from the web, conduct research, or provide location-based recommendations while respecting user privacy."
modelcontextprotocol,everart,4.2,0.2,6.4,-1.92,[],MINIMAL,"This EverArt MCP server, developed by Anthropic, provides AI assistants with image generation capabilities using the EverArt API. Built with TypeScript and leveraging the EverArt SDK, it offers a streamlined interface for creating images from text prompts using multiple AI models. The server implements robust error handling, automatic browser opening for generated images, and supports various image styles including photorealistic and vector art. By abstracting the complexities of API communication and image generation, it allows AI systems to easily incorporate visual content creation into their workflows. This implementation is particularly valuable for creative applications, content generation, and visual design tasks, enabling use cases such as automated illustration, concept visualization, and rapid prototyping of visual ideas."
modelcontextprotocol,everything,4.4,0.2,7.6,-2.2800000000000002,[],MINIMAL,"This MCP server, developed by Anthropic, serves as a comprehensive demo suite for MCP client implementations. It exercises the full range of MCP protocol features including prompts, tools, resources, and sampling. Built in TypeScript, the server implements various tools like echo, math operations, and LLM sampling, as well as 100 test resources in both plaintext and binary formats. By providing a standardized testing ground, this server enables MCP client developers to validate their implementations against a wide array of protocol functionalities. It is particularly useful for ensuring compatibility, debugging edge cases, and demonstrating the capabilities of the MCP protocol in a controlled environment."
modelcontextprotocol,fetch,4.8,0.2,7.4,-2.2199999999999998,[],MINIMAL,"This fetch MCP server, developed by Anthropic, provides AI assistants with web content retrieval capabilities. It integrates with web servers to fetch and process HTML content, converting it to markdown for easier consumption by language models. Built in Python, the implementation handles URL fetching, content extraction, and HTML-to-markdown conversion. By bridging AI models and web content, this server allows AI systems to access and analyze online information in a structured format. It supports chunked reading of long web pages and offers customization options for user agents and robots.txt handling. The fetch server is particularly useful for AI assistants needing to retrieve and process web-based information, conduct research, or provide summaries of online content."
modelcontextprotocol,filesystem,4.8,0.2,7.3,-2.19,[],MINIMAL,"This filesystem MCP server, developed by Anthropic, provides a secure interface for language models to interact with local filesystems. It enables AI agents to read, write, search, and manipulate files and directories through a controlled API. By restricting operations to specified directories and providing advanced editing capabilities, it maintains data security while allowing AI systems to work with file-based data and content. This implementation is particularly useful for AI assistants designed to manage documents, analyze local datasets, or automate file organization tasks using the local filesystem as a backend."
modelcontextprotocol,git,4.8,0.2,7.8,-2.34,[],MINIMAL,"This server, developed by Anthropic, provides AI assistants with Git repository interaction capabilities. It enables operations like viewing working tree status, staging changes, committing, and managing branches through a standardized interface. Built in Python, the implementation handles Git operations and exposes functionality via MCP. By bridging AI models and Git version control, this server allows AI systems to analyze codebases, track changes, and assist with source code management tasks. It is particularly useful for AI assistants supporting software development workflows, code review processes, and collaborative programming projects using Git repositories."
modelcontextprotocol,github,4.8,0.2,7.5,-2.25,[],MINIMAL,"This GitHub MCP server, developed by Anthropic, provides AI assistants with comprehensive access to GitHub's API functionality. It enables operations like file management, repository creation, issue tracking, and advanced code search across GitHub. Built in TypeScript, the implementation handles authentication, request formatting, and exposes GitHub's features through a standardized MCP interface. By bridging AI models and GitHub's development platform, this server allows AI systems to interact with code repositories, manage projects, and analyze development workflows. It is particularly useful for AI assistants supporting software development teams in tasks like code review, project management, and collaborative coding on GitHub."
modelcontextprotocol,gitlab,4.3,0.2,7.2,-2.16,[],MINIMAL,"This GitLab MCP server, developed by Anthropic, provides AI assistants with comprehensive access to GitLab's API functionality. It enables operations like file management, repository creation, issue tracking, and merge request handling across GitLab projects. Built in TypeScript, the implementation handles authentication, request formatting, and exposes GitLab's features through a standardized MCP interface. By bridging AI models and GitLab's development platform, this server allows AI systems to interact with code repositories, manage projects, and analyze development workflows. It is particularly useful for AI assistants supporting software development teams in tasks like code review, project management, and collaborative coding on GitLab."
modelcontextprotocol,gdrive,4.3,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This Google Drive MCP server, developed by ModelContextProtocol, provides a secure interface for language models to interact with Google Drive files and folders. It enables AI agents to search, read, and access Google Drive content through a controlled API. The server handles OAuth authentication, automatically exports Google Workspace files to standard formats, and integrates with the desktop app via NPM. By focusing on read-only access and using OAuth for authorization, it maintains data security while allowing AI systems to work with cloud-stored documents and files. This implementation is particularly useful for AI assistants designed to analyze documents, search through cloud storage, or provide insights from Google Drive content."
modelcontextprotocol,google-maps,4.4,0.2,6.9,-2.0700000000000003,[],MINIMAL,"This Google Maps MCP server, developed by Anthropic, provides a comprehensive interface for language models to interact with Google Maps data and services. It enables AI agents to perform geocoding, reverse geocoding, place searches, and retrieve detailed location information through a controlled API. The server handles API key authentication. By exposing core Google Maps functionality, it allows AI systems to work with location data, calculate distances and routes, and access place details. This implementation is particularly useful for AI assistants designed to provide location-based recommendations, plan trips, analyze geographic data, or offer insights about places and businesses using Google Maps as a backend."
modelcontextprotocol,memory,4.8,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This knowledge graph memory server, developed by Anthropic, provides a persistent memory system for language models using a local graph database. It enables AI agents to create, query, and update entities, relations, and observations through a controlled API. By storing information as a semantic network, it allows AI systems to build and maintain complex knowledge structures over time. The server integrates with Claude Desktop via NPM and focuses on personalization use cases. This implementation is particularly useful for AI assistants designed to remember user preferences, track relationships between people and organizations, or accumulate domain knowledge across conversations."
modelcontextprotocol,postgres,4.8,0.2,6.5,-1.9500000000000002,[],MINIMAL,"This PostgreSQL MCP server, developed by Anthropic, provides a read-only interface for language models to interact with PostgreSQL databases. It enables AI agents to inspect database schemas and execute SQL queries through a controlled interface. The server integrates with Claude Desktop and can be run as a standalone application, offering deployment flexibility. By focusing on read-only access and using environment variables for configuration, it maintains data security while allowing AI systems to explore and analyze relational data. This implementation is particularly useful for AI assistants designed to perform database schema exploration, generate SQL queries, or provide data-driven insights using PostgreSQL as the backend."
modelcontextprotocol,puppeteer,4.8,0.2,7.7,-2.31,[],MINIMAL,"This Puppeteer-based MCP implementation provides a powerful interface for language models to interact with web browsers. Developed by Anthropic, it enables AI agents to perform a wide range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution in real browser environments. The implementation distinguishes itself by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Puppeteer's Chrome/Chromium automation, it ensures high-fidelity web interactions. This tool is particularly powerful for AI-driven web testing, data scraping, and automated web interactions, enabling more sophisticated AI assistants that can directly manipulate web applications. Its integration with Claude Desktop and npm-based installation process make it easily accessible for developers and researchers working on advanced AI projects involving web automation."
modelcontextprotocol,redis,4.2,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This MCP server implementation, developed by Anthropic, provides a collection of specialized servers for various data sources and services. It includes integrations for Google Drive, PostgreSQL databases, Slack, Brave Search, filesystem access, and more. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized way for AI models to interact with diverse external systems and data. The implementation focuses on modularity, allowing users to selectively deploy servers based on their specific needs. It enables use cases like document retrieval, database querying, web search, and inter-application communication, making it particularly useful for enhancing AI assistants with real-world data access and action capabilities."
modelcontextprotocol,sentry,4.3,0.2,7.4,-2.2199999999999998,[],MINIMAL,"This Sentry MCP server, developed by Anthropic, enables AI assistants to retrieve and analyze error reports from Sentry.io. It integrates with the Sentry API to provide detailed issue information including stacktraces, timestamps, and event counts. Built in Python, the implementation handles API authentication and request formatting, exposing Sentry's error tracking capabilities via a standardized MCP interface. By bridging AI models and application monitoring data, this server allows AI systems to inspect and analyze software errors, providing insights into bug patterns and potential fixes. It is particularly useful for AI assistants supporting software development teams in triaging issues, understanding error contexts, and prioritizing debugging efforts based on real-time application performance data. "
modelcontextprotocol,sequentialthinking,4.8,0.2,6.8,-2.04,[],MINIMAL,"This Sequential Thinking MCP server, developed by Anthropic, provides AI assistants with a structured approach to problem-solving and analysis. Built with TypeScript and leveraging the MCP SDK, it offers capabilities for breaking down complex problems into manageable steps, revising thoughts as understanding deepens, and branching into alternative reasoning paths. The server implements a dynamic thinking process that can adjust the total number of thoughts and generate solution hypotheses. By facilitating a detailed, step-by-step approach, it allows AI systems to maintain context over multiple steps and filter out irrelevant information. This implementation is particularly valuable for tasks requiring in-depth analysis, planning, or design, enabling use cases such as complex problem decomposition, iterative solution refinement, and multi-path reasoning exploration."
modelcontextprotocol,slack,4.6,0.2,7.4,-2.2199999999999998,[],MINIMAL,"This Slack MCP Server, developed by the Anthropic team, provides a robust interface for language models to interact with Slack workspaces. It enables AI agents to perform a wide range of Slack-specific tasks including listing channels, posting messages, replying to threads, adding reactions, retrieving channel history, and accessing user information. The implementation distinguishes itself by offering comprehensive Slack API integration, making it ideal for AI-driven workplace communication and automation. By leveraging Slack's Bot User OAuth Tokens, it ensures secure and authorized access to workspace data. This tool is particularly powerful for AI assistants designed to enhance team collaboration, automate routine communication tasks, and provide intelligent insights from Slack conversations."
modelcontextprotocol,sqlite,4.6,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This SQLite MCP server, developed by Anthropic, provides a versatile interface for language models to interact with SQLite databases. It enables AI agents to execute SQL queries, analyze business data, and generate insights through a controlled interface. The server features dynamic resources for aggregating discovered insights, and includes tools for database operations and schema inspection. This implementation is particularly useful for AI assistants designed to perform ad-hoc data analysis, generate business reports, or provide data-driven recommendations using SQLite as the lightweight, serverless backend."
modelcontextprotocol,time,4.8,0.2,7.4,-2.2199999999999998,[],MINIMAL,"This MCP server, developed by the Model Context Protocol team, provides time and timezone conversion capabilities for AI assistants. It offers tools to get the current time in any timezone and convert times between timezones using IANA timezone names. The server automatically detects the system timezone and supports customization. By connecting AI capabilities with accurate time information, this implementation enables AI systems to handle time-sensitive queries and perform timezone calculations. It is particularly useful for applications like scheduling across timezones, travel planning, or any scenario where an AI assistant needs to work with localized time data."
mendableai,firecrawl-mcp-server,3.3,0.4,7.8,-2.34,[],LOW,"This MCP server, developed by vrknetha, integrates with FireCrawl to provide advanced web scraping capabilities. It implements tools for extracting content from JavaScript-heavy websites, supporting mobile and desktop views, handling rate limits, and outputting multiple formats including HTML, Markdown, screenshots, and raw text. The server exposes functions for single URL scraping, batch processing, and job status checking. By leveraging FireCrawl's infrastructure, this implementation enables AI assistants to easily incorporate web data into their responses. It is particularly useful for scenarios requiring structured data extraction from complex web pages, such as market research, content aggregation, or generating reports from online sources."
awslabs,bedrock-kb-retrieval-mcp-server,2.85,0.5,7.4,-2.2199999999999998,[],LOW,"An MCP server implementation that enables retrieval from Amazon Bedrock Knowledge Bases, allowing AI applications to access information stored in knowledge bases through the Model Context Protocol."
awslabs,cdk-mcp-server,2.85,0.5,6.6,-1.9799999999999998,[],LOW,"An MCP server implementation for AWS services, allowing AI applications to access AWS services like Bedrock, S3, and DynamoDB through the Model Context Protocol."
awslabs,cost-analysis-mcp-server,2.85,0.5,7.4,-2.2199999999999998,[],LOW,An MCP server that analyzes the cost of LLM API calls by tracking tokens used and calculating costs based on model pricing. It provides detailed cost breakdowns and usage statistics for better budget management and optimization of AI applications.
awslabs,aws-documentation-mcp-server,2.95,0.5,6.6,-1.9799999999999998,[],LOW,An MCP server that provides access to AWS documentation. This server allows Claude to search and retrieve information from AWS documentation to help answer questions about AWS services and features.
awslabs,nova-canvas-mcp-server,2.85,0.5,7.5,-2.25,[],LOW,"An MCP server implementation for AWS Nova Canvas, a service that enables developers to build AI applications with Claude. This server allows Claude to access and manipulate data in Nova Canvas workspaces."
lingodotdev,lingo.dev,2.3,0.2,7.0,-2.0999999999999996,[],MINIMAL,"Lingo.dev MCP server enables AI assistants to translate content across multiple languages through the Model Context Protocol. Built by the Lingo.dev team, it provides a 'translate' tool that leverages advanced language models to handle app localization, website content, and other text data. The implementation can be run via npx command with an API key from the Lingo.dev platform, making it accessible from various AI tools including Cursor, Claude desktop, and Cline for VS Code. This integration is particularly valuable for developers and content creators who need to translate materials without leaving their AI assistant workflow."
21st-dev,magic-mcp,2.7,0.2,7.8,-2.34,[],MINIMAL,"This MCP server implementation provides a bridge to the 21st.dev/magic API, enabling AI assistants to interact with frontend development tasks. Developed by sergeibynas, it offers tools for working with frontend code directly from IDEs like Cursor, WindSurf, and VSCode with Cline. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on secure API key management and is designed to streamline frontend development workflows. The implementation is particularly useful for AI applications that need to automate or assist with frontend coding tasks, offering a unique approach to AI-assisted web development."
makenotion,notion-mcp-server,2.9,0.2,6.5,-1.9500000000000002,[],MINIMAL,"Notion MCP Server provides a bridge to the Notion API, enabling AI assistants to interact with Notion workspaces through the Model Context Protocol. This TypeScript implementation converts the Notion OpenAPI specification into MCP-compatible tools, handling authentication, request formatting, and file uploads. The server exposes Notion's capabilities including searching content, querying databases, and managing pages and comments, while maintaining proper error handling and response formatting. It's particularly useful for AI agents that need to retrieve, create, or modify Notion content without requiring users to write complex API interaction code."
cloudflare,ai-gateway,2.7,0.5,6.4,-1.92,[],LOW,"The Cloudflare MCP server implementation appears to be experiencing issues with repository access or configuration. This error indicates that the Git clone operation for the 'cloudflare/mcp-server-cloudflare' repository failed, suggesting either the repository doesn't exist publicly, has restricted access permissions, or there might be connectivity problems with the source control system. Without access to the implementation details, it's not possible to provide an accurate description of its purpose or functionality."
cloudflare,auditlogs,2.7,0.5,5.5,-1.6500000000000001,[],LOW,"Cloudflare Audit Logs MCP server provides secure access to Cloudflare account activity logs through a standardized interface. Built on Cloudflare Workers, it authenticates users via OAuth, retrieves detailed audit information about account changes, and presents the data in a structured format optimized for AI assistants. The server leverages Durable Objects for state management and implements comprehensive filtering options for querying logs by time period, actor, action type, and resource scope. It's particularly valuable for security monitoring, compliance tracking, and investigating configuration changes across Cloudflare accounts."
cloudflare,autorag,2.7,0.5,5.9,-1.7700000000000002,[],LOW,"The Cloudflare MCP server implementation appears to be experiencing issues with repository access or configuration. This error indicates that the Git clone operation for the 'cloudflare/mcp-server-cloudflare' repository failed, suggesting either the repository doesn't exist publicly, has restricted access permissions, or there might be connectivity problems with the source control system. Without access to the implementation details, it's not possible to provide an accurate description of its purpose or functionality."
cloudflare,browser-rendering,2.7,0.5,5.3,-1.59,[],LOW,"The Cloudflare MCP server implementation appears to be experiencing issues with repository access or configuration. This error indicates that the Git clone operation for the 'cloudflare/mcp-server-cloudflare' repository failed, suggesting either the repository doesn't exist publicly, has restricted access permissions, or there might be connectivity problems with the source control system. Without access to the implementation details, it's not possible to provide an accurate description of its purpose or functionality."
cloudflare,sandbox-container,2.7,0.5,5.9,-1.7700000000000002,[],LOW,"Cloudflare Container Sandbox MCP Server provides a secure, sandboxed environment for running arbitrary code through a standardized interface. Built on Cloudflare Workers with Durable Objects, it enables AI assistants to execute Python, Node.js, and shell commands in ephemeral containers while managing files through dedicated tools. The server implements Cloudflare OAuth for authentication and includes container lifecycle management to ensure resources are properly allocated and cleaned up. Particularly valuable for developers who need to test code, run visualizations, explore GitHub repositories, or analyze data directly from AI assistants without compromising security."
cloudflare,dex-analysis,2.7,0.5,6.8,-2.04,[],LOW,"The Cloudflare MCP server implementation appears to be experiencing issues with repository access or configuration. This error indicates that the Git clone operation for the 'cloudflare/mcp-server-cloudflare' repository failed, suggesting either the repository doesn't exist, has been moved, requires authentication, or there are network/permission issues preventing access. Without access to the repository contents, it's not possible to provide a detailed description of this MCP server's functionality or purpose."
cloudflare,dns-analytics,2.7,0.5,5.7,-1.7100000000000002,[],LOW,"The Cloudflare MCP server implementation appears to be experiencing issues with repository access or configuration. This error indicates that the Git clone operation for the 'cloudflare/mcp-server-cloudflare' repository failed, suggesting either the repository doesn't exist publicly, has restricted access permissions, or there might be connectivity problems with the source control system. Without access to the implementation details, it's not possible to provide an accurate description of its purpose or functionality."
cloudflare,docs-vectorize,2.7,0.5,2.6,-0.78,[],LOW,"The Cloudflare Documentation MCP server connects AI assistants to Cloudflare's documentation through Vectorize, enabling semantic search and retrieval of relevant documentation content. Built as a Cloudflare Worker with Durable Objects, it implements the Model Context Protocol to provide AI systems with contextual information about Cloudflare products and services. The server uses a vectorized database of Cloudflare documentation for efficient retrieval and supports remote MCP connections, making it ideal for developers and users who need accurate, up-to-date information about Cloudflare's platform directly within their AI assistant workflows."
cloudflare,logpush,2.7,0.5,6.0,-1.7999999999999998,[],LOW,"The Cloudflare Logpush MCP server enables AI assistants to interact with Cloudflare's Logpush service, allowing users to retrieve and manage their Logpush jobs across different Cloudflare accounts. Built on Cloudflare Workers, it implements OAuth authentication with Cloudflare's API, provides account management capabilities, and offers tools to fetch detailed information about Logpush configurations. The server handles user authentication state persistence through Durable Objects and includes environment-specific configurations for development, staging, and production deployments. It's particularly useful for Cloudflare customers who need to monitor or troubleshoot their log delivery pipelines through conversational interfaces."
cloudflare,mcp-server-cloudflare,2.9,0.5,6.4,-1.92,[],LOW,"This Cloudflare MCP Server, developed by Cloudflare, provides a powerful interface for language models to interact with Cloudflare's API. It enables AI agents to perform a wide range of Cloudflare-specific tasks including managing KV stores, R2 storage, D1 databases, and Workers. The implementation distinguishes itself by offering deep integration with Cloudflare's unique services and infrastructure. By leveraging Cloudflare's global network, it ensures high-performance and low-latency operations. This tool is particularly powerful for AI-driven cloud management, serverless computing, and edge network optimization, enabling more sophisticated AI assistants that can directly manipulate Cloudflare resources."
cloudflare,cloudflare-one-casb,2.7,0.5,4.2,-1.2600000000000002,[],LOW,"The Cloudflare MCP server implementation appears to be experiencing issues with repository access or configuration. This error indicates that the Git clone operation for the 'cloudflare/mcp-server-cloudflare' repository failed, suggesting either the repository doesn't exist publicly, has restricted access permissions, or there might be connectivity problems with the source control system. Without access to the implementation details, it's not possible to provide an accurate description of its purpose or functionality."
cloudflare,radar,2.7,0.5,6.4,-1.92,[],LOW,"The Cloudflare MCP server implementation appears to be experiencing issues with repository access or configuration. This error indicates that the Git clone operation for the 'cloudflare/mcp-server-cloudflare' repository failed, suggesting either the repository doesn't exist publicly, has restricted access permissions, or there might be connectivity problems with the source control system. Without access to the implementation details, it's not possible to provide an accurate description of its purpose or functionality."
cloudflare,workers-bindings,2.7,0.5,6.5,-1.9500000000000002,[],LOW,"The Cloudflare MCP server implementation appears to be experiencing issues with repository access or configuration. This error indicates that the Git clone operation for the 'cloudflare/mcp-server-cloudflare' repository failed, suggesting either the repository doesn't exist publicly, has restricted access permissions, or there might be connectivity problems with the source control system. Without access to the implementation details, it's not possible to provide an accurate description of its purpose or functionality."
cloudflare,workers-observability,2.7,0.5,6.4,-1.92,[],LOW,"Cloudflare Workers Observability MCP server provides tools for analyzing logs and metrics from Cloudflare Workers deployments. Built by Cloudflare, it enables users to query the Workers Observability API to examine structured JSON logs, calculate performance metrics, and troubleshoot issues across their serverless functions. The server authenticates through Cloudflare OAuth, supports both development and production environments, and offers specialized tools for retrieving log keys, values, and running complex queries against worker telemetry data."
exa-labs,exa-mcp-server,2.7,0.4,6.9,-2.0700000000000003,[],LOW,"This Exa MCP server, developed by exa-labs, provides an interface for AI assistants like Claude to perform web searches using Exa's search API. It enables AI agents to query Exa and retrieve structured search results including titles, URLs, and content snippets through a controlled MCP server. Built in TypeScript, the implementation handles API authentication, rate limiting, and error cases. By leveraging Exa's powerful search capabilities, this server allows AI systems to access real-time web information in a safe and controlled manner. It is particularly useful for AI assistants needing to conduct research, answer questions based on current information, or provide relevant search results to users while maintaining a clear separation between the AI model and external data sources."
browserbase,mcp-server-browserbase,2.7,0.4,5.1,-1.53,[],LOW,"This MCP server, developed by Browserbase, provides cloud browser automation capabilities for AI assistants like Claude. It leverages Browserbase's infrastructure along with Puppeteer and Stagehand (upcoming) to enable web interactions, data extraction, and JavaScript execution in a cloud environment. The server exposes a standardized interface for tasks such as navigating web pages, capturing screenshots, and monitoring console logs. By bridging AI capabilities with web automation, this implementation facilitates use cases like web scraping, automated testing, and dynamic content analysis. It is particularly useful for developers and researchers who need programmatic control over web browsers through natural language commands, enabling complex web-based workflows and data collection tasks."
ppl-ai,modelcontextprotocol,2.7,0.4,7.6,-2.2800000000000002,[],LOW,"An MCP server implementation that integrates the Sonar API to provide Claude with unparalleled real-time, web-wide research."
googleapis,genai-toolbox,2.7,0.0,7.2,-2.16,[],MINIMAL,"Toolbox is an MCP server implementation that enables AI assistants to interact with various database systems including PostgreSQL, MySQL, SQL Server, Neo4j, Dgraph, and Spanner. Developed by Google's SenseAI team, it provides a configurable interface for executing pre-defined queries against databases through a YAML-based configuration system. The implementation features telemetry integration, authentication services, and support for both HTTP and SSE transport protocols. Toolbox is particularly useful for AI applications that need to retrieve or manipulate data from multiple database types without exposing direct database access, making it ideal for creating secure, controlled database interfaces for generative AI applications."
stripe,agent-toolkit,3.3,0.5,7.4,-2.2199999999999998,[],LOW,"This MCP server implementation provides a bridge to Stripe's API, enabling AI agents to perform various payment and financial operations. Developed by Stripe, it offers tools for managing customers, products, prices, payment links, invoices, and refunds. The server is built using both Python and TypeScript, integrating with popular agent frameworks like LangChain, CrewAI, and Vercel's AI SDK. It focuses on secure API key management and supports connected accounts. The implementation is particularly useful for AI applications that need to automate e-commerce tasks, handle billing operations, or integrate payment processing into their workflows."
grafana,mcp-grafana,2.7,0.4,7.6,-2.2800000000000002,[],LOW,"Grafana MCP server provides access to Grafana instances and their surrounding ecosystem through the Model Context Protocol. Developed by Grafana Labs' Machine Learning team, it enables searching dashboards, fetching datasource information, querying Prometheus metrics, and managing incidents in Grafana Incident. The server supports both stdio and Server-Sent Events (SSE) transport modes, can be run locally or deployed as a Docker container, and authenticates using Grafana service account tokens. This implementation is particularly valuable for workflows requiring monitoring data analysis, metric exploration, or incident management directly within AI assistant conversations."
qdrant,mcp-server-qdrant,2.7,0.4,7.8,-2.34,[],LOW,"This MCP server, developed by Qdrant, provides a semantic memory layer on top of the Qdrant vector database. Built for use with Claude Desktop, it offers tools for storing and retrieving memories using Qdrant's vector search capabilities. The server leverages FastEmbed models for encoding memories, with the default being 'sentence-transformers/all-MiniLM-L6-v2'. Key features include automatic collection creation, configurable embedding models, and support for both command-line and environment variable configuration. By integrating AI capabilities with Qdrant's efficient vector search, this implementation enhances semantic memory retrieval for AI assistants. It is particularly useful for scenarios requiring persistent memory storage, semantic similarity search, and scalable vector operations in AI applications."
tavily-ai,tavily-mcp,2.9,0.4,7.8,-2.34,[],LOW,"This MCP server, developed by Tavily, provides advanced web search capabilities through the Tavily API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers real-time search and data extraction functionalities. The implementation focuses on delivering high-quality, AI-enhanced search results and web content extraction. It's particularly useful for AI assistants and applications requiring up-to-date web information, enabling use cases such as research automation, content aggregation, and fact-checking without directly interacting with the Tavily API complexities."
neo4j-contrib,mcp-neo4j,2.55,0.2,4.5,-1.35,[],MINIMAL,"This Neo4j MCP server, developed by neo4j-contrib, enables AI assistants to interact with Neo4j graph databases using natural language. It provides tools for converting natural language to Cypher queries, storing knowledge graph memories in Neo4j, and offering a file-based alternative for memory storage. Built for use with Claude Desktop and other MCP clients, it leverages Neo4j's graph capabilities to enhance AI interactions with structured data. The server allows AI systems to query, analyze, and manipulate graph data through a standardized MCP interface. It is particularly useful for scenarios requiring graph-based knowledge representation, complex relationship analysis, and persistent memory storage in AI applications working with Neo4j databases."
hyperbrowserai,mcp,2.3,1.0,6.4,-1.92,"['Found pattern: send.*data', 'Found pattern: eval\\s*\\(', 'Potential data exfiltration: send.*data', 'Found pattern: collect.*data', 'Potential data exfiltration: POST\\s+https?://', 'Potential data exfiltration: upload.*data', 'Obfuscated code: eval\\s*\\(.*\\)', 'Found pattern: tracking']",HIGH,"Hyperbrowser MCP Server provides web browsing capabilities for AI assistants through the Model Context Protocol, enabling scraping, structured data extraction, and web crawling. Built by hyperbrowserai, it offers tools to extract content in various formats (markdown, HTML, links, screenshots), follow links with customizable crawling parameters, and execute browser-based tasks. The server requires an API key for authentication and can be run in standard mode or with Server-Sent Events (SSE) for real-time communication, making it ideal for AI workflows requiring web content analysis, data collection, or automated browsing."
e2b-dev,js,2.2,0.4,5.2,-1.56,[],LOW,"This MCP server, developed by e2b-dev, enables AI assistants like Claude to execute code using E2B's cloud infrastructure. It provides a bridge between natural language interactions and actual code execution, allowing AI models to run and test code snippets in real-time. The server leverages E2B's secure sandboxed environments to execute code in various languages, with current support for JavaScript and Python. By integrating AI capabilities with E2B's code execution platform, this implementation enhances the ability of AI assistants to debug, prototype, and demonstrate code concepts. It is particularly useful for scenarios requiring interactive coding sessions, automated testing, or hands-on programming tutorials guided by AI."
e2b-dev,python,2.2,0.4,4.8,-1.44,[],LOW,"This MCP server, developed by E2B, enables AI assistants like Claude to execute code securely in E2B's cloud infrastructure. It bridges natural language interactions with real-time code execution in sandboxed environments, currently supporting JavaScript and Python. The server integrates with Claude Desktop and can run standalone, providing flexibility for different use cases. By combining AI capabilities with E2B's code execution platform, this implementation enhances AI assistants' ability to debug, prototype, and demonstrate coding concepts interactively. It is particularly valuable for scenarios requiring hands-on programming tutorials, automated testing, or interactive coding sessions guided by AI, allowing for more dynamic and practical coding assistance."
graphlit,graphlit-mcp-server,1.8,0.2,7.3,-2.19,[],MINIMAL,"This MCP server implementation provides a bridge to the Graphlit platform, enabling integration between MCP clients and Graphlit services. Developed by Unstruk Data Inc., it utilizes the Graphlit client library and Model Context Protocol SDK to facilitate communication. The server is designed for use cases requiring access to Graphlit's API capabilities, such as natural language processing tasks or data retrieval from the Graphlit ecosystem."
financial-datasets,mcp-server,2.45,0.4,6.4,-1.92,[],LOW,"Financial Datasets MCP Server provides AI assistants with direct access to stock market data through a set of specialized financial tools. Built by Financial Datasets, it enables Claude and other AI assistants to retrieve income statements, balance sheets, cash flow statements, current and historical stock prices, and market news via the Financial Datasets API. The server is designed to run locally using the uv package manager and can be easily integrated with Claude Desktop, making it valuable for financial analysis, investment research, and market monitoring workflows without leaving the conversation interface."
apify,actors-mcp-server,2.4,0.4,7.8,-2.34,[],LOW,"This MCP implementation, developed using TypeScript, provides a robust foundation for building and deploying web scraping and automation projects. It leverages the Apify platform and Crawlee library, offering a structured environment for creating scalable web crawlers and data extraction tasks. The implementation includes configuration files for ESLint, TypeScript, and Docker, ensuring code quality and consistency across different development environments. By abstracting common web scraping challenges and providing integration with Apify's cloud infrastructure, this tool enables developers to focus on building complex data acquisition workflows. It is particularly useful for projects requiring large-scale web data extraction, automated testing of web applications, or building AI training datasets from web sources."
jamsocket,mcp-server,2.3,0.2,4.7,-1.4100000000000001,[],MINIMAL,"foreverVM provides an API for running arbitrary, stateful Python code securely.

The core concepts in foreverVM are machines and instructions.

Machines represent a stateful Python process. You interact with a machine by running instructions (Python statements and expressions) on it, and receiving the results. A machine processes one instruction at a time."
elastic,mcp-server-elasticsearch,2.4,0.4,7.7,-2.31,[],LOW,"Elasticsearch MCP server enables AI assistants to interact with Elasticsearch clusters through natural language conversations. Built with TypeScript and the official Elasticsearch client library, it provides tools for listing indices, inspecting field mappings, and executing full Query DSL searches with automatic highlighting of text fields. The implementation handles authentication via API keys, supports configurable security permissions, and is particularly valuable for users who need to explore and analyze their Elasticsearch data through conversational interfaces."
semgrep,mcp,2.4,0.2,7.0,-2.0999999999999996,[],MINIMAL,"Semgrep MCP Server provides a comprehensive interface to Semgrep's static analysis capabilities through the Model Context Protocol, enabling AI assistants to scan code for security vulnerabilities and coding issues. Built by Semgrep, Inc., it offers tools for scanning individual code snippets or entire directories, creating custom rules, analyzing results by severity, and filtering findings. The server is containerized with Docker for easy deployment and can be integrated with Cursor as a plugin, making it valuable for developers who want to leverage Semgrep's security analysis capabilities directly within their AI assistant workflows without leaving their coding environment."
motherduckdb,mcp-server-motherduck,2.4,0.2,7.8,-2.34,[],MINIMAL,"This MCP server, developed by tdoehmen at MotherDuck, provides seamless integration with MotherDuck and local DuckDB databases. Built with Python, it offers tools for initializing database connections, retrieving schema information, and executing queries. The implementation stands out by supporting both cloud-based MotherDuck and local DuckDB instances, allowing flexible deployment options. It's particularly useful for data analysts, researchers, and developers who need to incorporate on-demand access to DuckDB-powered databases into their AI-assisted workflows, enabling dynamic querying and analysis of structured data within MCP-compatible environments like Claude Desktop."
fatwang2,search1api-mcp,2.2,0.4,7.6,-2.2800000000000002,[],LOW,"This Search1API MCP server, developed by fatwang2, provides an interface for AI assistants to perform web searches, news searches, content extraction, and sitemap retrieval using the Search1API service. It enables AI agents to query Search1API and retrieve structured results through a controlled MCP server. Built in JavaScript, the implementation handles API authentication and request formatting for multiple Search1API endpoints. By leveraging Search1API's capabilities, this server allows AI systems to access real-time web information, news articles, and site structures in a safe manner. It is particularly useful for AI assistants needing to conduct web research, analyze current events, or extract content from websites while maintaining a clear separation between the AI model and external data sources."
chroma-core,chroma-mcp,2.4,0.4,7.1,-2.13,[],LOW,"Chroma MCP Server provides vector database integration for LLM applications, enabling AI models to create and manage collections of data with vector search capabilities. Built by Chroma Core, it supports multiple client types (ephemeral, persistent, HTTP, and cloud), offers comprehensive collection management tools, and enables document operations including adding, querying, and retrieving with advanced filtering options. The implementation integrates seamlessly with Claude Desktop through simple configuration options and supports environment variables for flexible deployment, making it ideal for workflows requiring memory capabilities such as knowledge bases and context-aware conversations."
zilliztech,mcp-server-milvus,2.3,0.2,7.8,-2.34,[],MINIMAL,"Milvus MCP Server provides a bridge between AI assistants and Milvus vector database, enabling vector search, full-text search, and hybrid queries through a comprehensive API. Built by Zilliz, it offers tools for managing collections, performing similarity searches, and executing complex queries with filtering capabilities. The implementation handles connection management, data insertion, and index creation while abstracting away the complexities of the Milvus client SDK. This server is particularly valuable for AI workflows requiring semantic search, knowledge retrieval, and structured data exploration from vector databases."
integromat,make-mcp-server,2.3,0.4,5.9,-1.7700000000000002,[],LOW,"Make MCP Server enables AI assistants to trigger and interact with Make automation workflows through the Model Context Protocol. Developed by Make, it connects to your Make account to identify on-demand scenarios, parse input parameters, allow AI assistants to invoke scenarios with appropriate parameters, and return structured JSON output. The server runs as a Node.js application that can be installed via npm or run in a Docker container, requiring a Make API key with scenarios:read and scenarios:run scopes. This implementation is particularly valuable for maintaining complex automation logic in Make while exposing functionality to AI systems, creating bidirectional communication between assistants and existing workflows."
meilisearch,meilisearch-mcp,2.0,0.4,6.7,-2.0100000000000002,[],LOW,"This MCP server for Meilisearch, developed by the Meilisearch team, provides a standardized interface for interacting with Meilisearch's powerful search capabilities. Built with Python and leveraging the official Meilisearch Python client, it offers tools for indexing, searching, and managing documents within Meilisearch instances. The server implements the Model Context Protocol, enabling AI systems to easily perform search operations and retrieve results. By abstracting Meilisearch's API complexities, it allows for seamless integration of advanced search functionality into AI-powered applications. This implementation is particularly valuable for use cases requiring fast, typo-tolerant, and customizable search experiences, such as e-commerce platforms, content management systems, or data exploration tools."
kagisearch,kagimcp,2.2,0.4,6.9,-2.0700000000000003,[],LOW,"This Kagi MCP server, developed by Rehan Ali Rana at Kagi Search, integrates the Kagi API into AI-assisted workflows. Built with Python and leveraging libraries like httpx and pydantic, it provides a standardized interface for accessing Kagi's search capabilities through Claude Desktop and compatible MCP clients. The implementation supports Kagi's advanced search features and is designed for easy setup and use. It's particularly useful for researchers, developers, and professionals looking to incorporate high-quality, privacy-focused search results into their AI-assisted applications, enabling more informed decision-making and analysis based on up-to-date web information."
comet-ml,opik-mcp,2.2,1.0,7.6,-2.2800000000000002,['Obfuscated code: atob\\s*\\('],HIGH,"Opik MCP Server is an open-source implementation of the Model Context Protocol for the Opik platform. It provides a unified interface for interacting with Opik's capabilities, supporting multiple transport mechanisms for flexible integration into various environments."
langfuse,mcp-server-langfuse,2.0,0.2,7.4,-2.2199999999999998,[],MINIMAL,"This MCP server implementation provides access to Langfuse's prompt management capabilities, allowing users to list and retrieve prompts through the Model Context Protocol. Developed by marcklingen, it transforms Langfuse prompts into MCP-compatible formats, supports pagination for prompt listing, and includes a prompt compilation feature. The server also offers tool-based operations for increased compatibility with MCP clients. It's particularly useful for AI applications requiring dynamic prompt management, version control, and integration with existing Langfuse workflows. The implementation focuses on production-labeled prompts and is designed to work seamlessly with Claude Desktop and Cursor environments."
agentrpc,agentrpc,2.1,0.4,6.4,-1.92,[],LOW,"AgentRPC allows you to connect to any function, in any language, across network boundaries. It's ideal when you have services deployed in:

Private VPCs
Kubernetes clusters
Multiple cloud environments
AgentRPC wraps your functions in a universal RPC interface, connecting them to a hosted RPC server accessible through open standards:

Model Context Protocol (MCP)
OpenAI-compatible tool definitions (OpenAI, Anthropic, LiteLLM, OpenRouter, etc.)"
pydantic,logfire-mcp,2.2,0.2,7.7,-2.31,[],MINIMAL,"Logfire MCP Server provides AI assistants with access to OpenTelemetry traces and metrics through Logfire's API. Built by the Pydantic team, it enables LLMs to query application telemetry data, analyze distributed traces, and perform custom SQL queries on observability data with automatic token-based authentication. The server exposes tools for finding exceptions, analyzing errors in specific files, running arbitrary queries against trace data, and retrieving schema information - making it particularly valuable for debugging applications, investigating performance issues, and gaining insights from operational data without leaving the AI assistant conversation."
tinybirdco,mcp-tinybird,2.3,0.2,7.8,-2.34,[],MINIMAL,"This MCP server, developed by Tinybird, enables AI assistants to interact with Tinybird workspaces for data exploration and analysis. Built in Python, it provides tools for querying data sources, executing API endpoints, and pushing data files. The server leverages Tinybird's real-time analytics capabilities, allowing AI models to access and analyze large datasets efficiently. Key features include SQL query execution, data source exploration, and integration with Tinybird's documentation. By bridging AI assistants with powerful analytics infrastructure, this implementation is particularly useful for tasks involving data-driven insights, business intelligence, and real-time data exploration across various domains."
tinyfish-io,agentql-mcp,2.4,0.4,7.1,-2.13,[],LOW,"AgentQL MCP server integrates with the AgentQL data extraction API to provide AI assistants with structured data extraction capabilities from web pages. The server exposes a single tool that accepts a URL and natural language prompt, then uses the AgentQL API to extract relevant data in JSON format based on the description. This implementation is particularly useful for scenarios requiring structured data from websites without needing to write custom scrapers, enabling AI assistants to gather specific information from web content on demand."
vectorize-io,vectorize-mcp-server,2.2,0.2,6.5,-1.9500000000000002,[],MINIMAL,"Vectorize MCP Server provides a bridge between Claude and Vectorize.io's vector database services, enabling advanced retrieval, text extraction, and deep research capabilities. Built with TypeScript, it exposes three primary tools: vector search for retrieving relevant documents from pipelines, text extraction for converting various document formats to Markdown, and deep research for generating comprehensive analyses from document collections. The implementation handles authentication through organization IDs and API tokens, making it particularly valuable for knowledge management, document analysis, and research workflows that require sophisticated vector search capabilities without leaving the conversation interface."
its-dart,dart-mcp-server,2.3,0.2,6.7,-2.0100000000000002,[],MINIMAL,"Dart MCP Server provides AI assistants with direct access to Dart's project management platform, enabling task and document management through a comprehensive set of tools. Built by the Dart team, it allows for creating, retrieving, updating, and deleting tasks and documents, with support for filtering by various attributes like assignees, status, and priority. The server exposes both structured tools and resource templates that make it easy for AI assistants to interact with Dart's API, and includes prompts for common actions like creating tasks or summarizing work items. It's particularly valuable for teams using Dart who want to manage their projects directly through AI assistants like Claude without switching contexts."
translated,lara-mcp,2.3,0.2,7.6,-2.2800000000000002,[],MINIMAL,"Lara MCP Server provides a bridge to the Lara Translation API, enabling AI assistants to translate text between languages with support for language detection and context-aware translations. Developed by Translated, this TypeScript implementation uses the Model Context Protocol SDK to expose a single translation tool that leverages the official Lara client library. The server authenticates with Lara API credentials through environment variables and is packaged for both npm distribution and Docker deployment. Ideal for multilingual applications where AI assistants need to perform accurate translations without switching context."
axiomhq,mcp-server-axiom,1.8,0.2,6.7,-2.0100000000000002,[],MINIMAL,"This MCP server, developed by Axiom, enables AI agents to query data using Axiom Processing Language (APL). It integrates with the Axiom data platform to provide tools for executing APL queries against datasets and listing available datasets. By leveraging Axiom's powerful data processing capabilities, this implementation allows AI assistants to easily incorporate real-time data analysis into their responses. It is particularly useful for scenarios requiring rapid insights from large datasets, such as log analysis, application monitoring, or business intelligence through natural language queries to an AI assistant. The server is designed for seamless integration with the Claude desktop app and focuses on core querying functionality."
needle-ai,needle-mcp,2.3,0.4,7.3,-2.19,[],LOW,"This Needle MCP integration, developed by Jan Heimes, provides a bridge between the Needle AI platform and MCP (Machine Comprehension Protocol) servers. Built using Python, it leverages the needle-python and mcp libraries to enable seamless communication between Needle's AI capabilities and standardized MCP endpoints. The integration supports environment variable configuration via python-dotenv for flexible deployment. By abstracting the complexities of API interactions, it allows developers to easily incorporate Needle's AI functionalities into MCP-compatible systems. This implementation is particularly useful for projects requiring advanced natural language processing, machine learning, or AI-driven decision making within an MCP framework, enabling use cases such as intelligent chatbots, automated content generation, or AI-assisted data analysis."
metoro-io,metoro-mcp-server,2.4,0.2,6.7,-2.0100000000000002,[],MINIMAL,"This MCP server, developed by Metoro, enables AI assistants like Claude to interact with Kubernetes clusters through Metoro's observability platform. Built in Go, it exposes Metoro's APIs to allow querying and analyzing telemetry data collected from microservices using eBPF instrumentation. The implementation stands out by providing deep visibility into Kubernetes environments without requiring code changes. By connecting AI capabilities with Metoro's comprehensive cluster insights, this server enables AI systems to troubleshoot issues, optimize performance, and understand complex microservice interactions. It is particularly useful for DevOps teams seeking to leverage AI for Kubernetes observability, automated incident response, and performance optimization in cloud-native environments."
rember,rember-mcp,2.2,0.4,7.3,-2.19,[],LOW,"Allow Claude to create flashcards for you with the official Model Context Protocol (MCP) for Rember. Rember helps you study and remember anything you care about by scheduling spaced repetition reviews.

Features and examples:

Create flashcards from your chats ""... I like your answer, help me remember it""
Create flashcards from your PDFs ""Create flashcards from chapter 2 of this PDF"""
heroku,heroku-mcp-server,2.4,0.4,6.6,-1.9799999999999998,[],LOW,"A server implementation of the Model Context Protocol (MCP) for Heroku, allowing integration between MCP clients and Heroku services."
bankless,onchain-mcp,2.1,0.4,7.8,-2.34,[],LOW,"Bankless Onchain MCP Server provides a middleware between AI models and blockchain data, enabling LLMs to interact with smart contracts, fetch events, and access transaction information across multiple networks. Developed by Bankless Engineering, it implements tools for reading contract state, retrieving proxy implementations, fetching ABIs and source code, filtering event logs, and accessing transaction history. The server requires a Bankless API token for authentication and is particularly valuable for blockchain analysis, smart contract interaction, and on-chain data exploration workflows without requiring users to leave their conversation interface."
redis,mcp-redis,2.4,0.2,7.8,-2.34,[],MINIMAL,"The Redis MCP Server is a natural language interface designed for agentic applications to efficiently manage and search data in Redis. It integrates seamlessly with MCP (Model Content Protocol) clients, enabling AI-driven workflows to interact with structured and unstructured data in Redis. Using this MCP Server, you can ask questions like:

""Store the entire conversation in a stream""
""Cache this item in a string""
""Store the session with an expiration time""
""Search this vector"""
oschina,mcp-gitee,2.4,0.0,7.3,-2.19,[],MINIMAL,"MCP-Gitee provides a bridge between Claude and Gitee's API, enabling AI assistants to interact with repositories, issues, pull requests, and user data on the Gitee platform. Built by OSChina, this Go-based implementation exposes a comprehensive set of tools for repository management (creating repos, releases, fetching file content), issue tracking (creating, updating, commenting), pull request workflows (creating, merging, commenting), and user notifications. The server supports both stdio and SSE transport protocols, making it compatible with Claude Desktop integration, and includes robust error handling for API interactions. Particularly valuable for developers who need AI assistance with code collaboration workflows on Gitee without leaving their conversation interface."
bitrise-io,bitrise-mcp,2.4,0.2,7.2,-2.16,[],MINIMAL,"Bitrise MCP Server provides a bridge to the Bitrise CI/CD platform API, enabling AI assistants to manage mobile app development workflows. Developed by Bitrise, this Python implementation offers tools for app management, build operations, artifact handling, and release management across iOS and Android platforms. The server organizes functionality into logical API groups that can be selectively enabled, and integrates with Claude Desktop through a simple configuration process. It's particularly valuable for developers who need to monitor builds, trigger workflows, manage testing groups, or handle app distribution without leaving their AI assistant interface."
gotohuman,gotohuman-mcp-server,2.3,0.2,6.8,-2.04,[],MINIMAL,"gotoHuman MCP Server enables AI agents to request human reviews through the gotoHuman platform, creating an asynchronous workflow for content approval and critical action validation. The server provides three main tools: listing available review forms, fetching form schemas, and submitting review requests that appear in the user's gotoHuman inbox. Built with TypeScript using the Model Context Protocol SDK, it integrates with the gotoHuman API to facilitate human-in-the-loop processes for autonomous agents and AI automations, with webhook-based responses that allow workflows to continue after human approval."
oxylabs,oxylabs-mcp,2.4,0.4,7.5,-2.25,[],LOW,"Oxylabs MCP server provides a bridge to Oxylabs web scraping services, enabling AI assistants to extract and process web content. Built with Python 3.12+, it handles authentication through Oxylabs credentials and transforms raw web data into clean, structured formats using lxml and markdownify. The implementation supports containerized deployment via Docker and includes comprehensive error handling. This server is particularly valuable for workflows requiring real-time web data extraction, content analysis, or monitoring of web resources without requiring users to manually collect information."
datastax,astra-db-mcp,2.2,0.2,5.7,-1.7100000000000002,[],MINIMAL,"This MCP server implementation provides integration with Astra DB, a cloud-native database service. Developed by DataStax, it offers tools for managing collections and records within Astra DB, including creating, updating, deleting, and querying data. The server is designed to enable AI agents to interact directly with Astra DB, making it useful for applications that require scalable, cloud-based data storage and retrieval capabilities."
screenshotone,mcp,2.2,0.4,6.5,-1.9500000000000002,[],LOW,"This MCP server implementation provides a bridge to ScreenshotOne's API, enabling the rendering of website screenshots through the Model Context Protocol. Developed by Dmytro Krasun, it offers a simple tool for capturing visual representations of web pages as images. The server is designed to work with Node.js environments and utilizes the @modelcontextprotocol/sdk for MCP compatibility. It's particularly useful for AI assistants, web developers, and content creators who need to programmatically generate website screenshots for tasks such as visual testing, content monitoring, or creating visual references of web pages without manual intervention."
aliyun,alibabacloud-hologres-mcp-server,2.3,0.2,4.9,-1.4700000000000002,[],MINIMAL,"Hologres MCP Server provides a universal interface between AI Agents and Alibaba Cloud's Hologres databases, enabling seamless communication for metadata retrieval and SQL execution. Developed by TimothyDing, it supports executing SQL (including DDL, DML, and queries), collecting statistics with ANALYZE commands, and retrieving database metadata such as schemas, tables, and table statistics. The server requires Python 3.13+ and can be installed via pip or run directly from the repository, making it easy to integrate with MCP clients through simple configuration. This implementation is particularly valuable for data analysis workflows that need to interact with Hologres databases without switching contexts."
box-community,mcp-server-box,2.4,0.0,7.6,-2.2800000000000002,[],MINIMAL,"MCP Server Box integrates with the Box API to enable AI assistants to perform operations on Box files and folders, including search, text extraction, AI-based querying, and structured data extraction. Built by the Box community, it leverages Box's Claude AI capabilities to analyze documents, extract specific information from files, and answer questions about content. The server exposes tools for authenticating with Box, searching for files by name or content, reading file contents, asking AI about documents, locating folders, extracting structured data, and listing folder contents - making it particularly valuable for workflows that require document analysis, information extraction, or content management within Box."
zenml-io,mcp-zenml,2.2,0.2,6.8,-2.04,[],MINIMAL,"This ZenML MCP server enables AI assistants to interact with ZenML, an open-source ML pipeline management platform. Built with Python using FastMCP, it provides tools to access core ZenML functionality including users, stacks, pipelines, runs, services, components, artifacts, and logs. The implementation allows querying pipeline metadata, triggering new pipeline runs, and analyzing run history through standardized MCP tools. It handles authentication via API keys and includes robust error handling, making it ideal for ML engineers who want to monitor and manage their machine learning workflows through conversational AI interfaces."
fireproof-storage,mcp-database-server,1.8,0.2,5.1,-1.53,[],MINIMAL,"This MCP server, developed by the Fireproof Storage team, integrates a Fireproof database to provide a JSON document store with CRUD operations and querying capabilities. It offers a simple interface for AI assistants to store, retrieve, update, and delete JSON documents, as well as perform queries sorted by any field. The implementation stands out by leveraging Fireproof's local-first database technology, enabling offline-capable and real-time collaborative features. By connecting AI capabilities with a flexible document store, this server empowers AI systems to manage structured data efficiently. It is particularly useful for applications requiring persistent storage of AI-generated content, collaborative note-taking systems, or any scenario where an AI assistant needs to work with dynamic, structured data."
redis,mcp-redis-cloud,2.3,0.4,7.1,-2.13,[],LOW,"A Model Context Protocol (MCP) server implementation for Redis Cloud, enabling AI applications to retrieve and use data from Redis Cloud databases as context for LLM interactions."
nota,gyazo-mcp-server,2.3,0.0,6.1,-1.83,[],MINIMAL,"This MCP server, developed by an unknown author, provides integration with the Gyazo image hosting service. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for accessing and interacting with Gyazo images. The implementation focuses on image retrieval and metadata extraction, with features like OCR data access and fetching the latest uploaded image. It's particularly useful for AI assistants and applications that need to work with visual content, enabling use cases such as image analysis, content moderation, or automated reporting based on screenshots without directly dealing with the Gyazo API complexities."
apache,iotdb-mcp-server,2.3,0.2,6.0,-1.7999999999999998,[],MINIMAL,"The IoTDB MCP Server provides a secure interface for AI assistants to interact with Apache IoTDB time-series databases. Developed by the Apache Software Foundation, this Python-based implementation enables three core database operations: executing SELECT queries, listing available tables, and describing table schemas. The server connects to IoTDB instances using a session pool for efficient connection management and returns query results in a structured text format. It's particularly valuable for data analysts and IoT applications that need AI-assisted exploration and analysis of time-series data stored in IoTDB without requiring direct database access."
integration-app,mcp-server,2.3,0.2,5.9,-1.7700000000000002,[],MINIMAL,"This Integration App MCP server, developed by an unnamed author, provides a bridge between AI assistants and Integration App's workflow automation capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it exposes Integration App actions as tools for AI models. The implementation focuses on simplifying interactions with Integration App's API, making it accessible for AI models to trigger and manage automated workflows. It's particularly useful for tasks like data synchronization, process automation, or integrating various SaaS applications, enabling AI assistants to orchestrate complex business processes without requiring deep knowledge of individual API complexities."
mailgun,mailgun-mcp-server,2.1,1.0,7.0,-2.0999999999999996,"['Found pattern: tracking', 'Suspicious domain: datatracker.ietf.org']",HIGH,"Mailgun MCP Server provides a bridge between Claude Desktop and the Mailgun email service API, enabling AI assistants to send emails and retrieve email statistics through a standardized interface. The implementation transforms Mailgun's OpenAPI specification into MCP tools, handling authentication, parameter validation, and request formatting automatically. It supports over 30 Mailgun API endpoints including sending messages, retrieving domain information, and analyzing email delivery statistics. Built with Node.js and the MCP SDK, this server requires a Mailgun API key and is ideal for workflows that need email delivery capabilities integrated with AI assistants."
pinecone-io,assistant-mcp,2.3,0.2,6.6,-1.9799999999999998,[],MINIMAL,Pinecone Assistant is a service that allow you to build production-grade chat and agent-based applications quickly. Use the Pinecone Assistant MCP to ground your agents with contextual knowledge sourced from your proprietary data.
esignaturescom,mcp-server-esignatures,2.2,0.4,6.3,-1.8900000000000001,[],LOW,"This MCP server for eSignatures, developed by eSignatures, provides integration with the eSignatures.com API for contract and document management. Built with Python, it offers tools for creating, querying, and managing contracts and templates. The implementation focuses on simplifying access to eSignatures functionality through a standardized MCP interface, with features like draft creation, contract withdrawal, and template management. It's particularly useful for AI assistants and applications needing to handle digital contracts and signatures, enabling use cases such as automated contract generation, document workflow management, and legal compliance tracking without directly dealing with the complexities of the eSignatures.com API."
pinecone-io,pinecone-mcp,2.3,0.4,7.4,-2.2199999999999998,[],LOW,"Pinecone Developer MCP Server enables AI assistants to interact with Pinecone vector database services through a TypeScript implementation. It provides tools for searching Pinecone documentation, managing indexes, and performing vector search operations including creating indexes with integrated inference, upserting records, searching across multiple indexes, and reranking results. The server supports both stdio and SSE transport methods, requires a Pinecone API key for database operations, and includes robust error handling with detailed validation messages. Particularly valuable for developers working with vector databases who need to embed, search, and manage semantic data within their AI applications."
atlanhq,modelcontextprotocol,2.4,0.4,6.4,-1.92,[],LOW,"Atlan MCP Server provides a bridge between AI agents and Atlan data catalog services through a Python implementation using the pyatlan SDK. The server exposes tools for searching assets with flexible conditions, retrieving assets using DSL queries, traversing lineage relationships, and updating asset attributes like descriptions and certificate status. Built with a robust error handling system and comprehensive logging, it enables AI assistants to interact with enterprise data catalogs for use cases such as data discovery, lineage analysis, and metadata management. The implementation uses environment variables for configuration and supports deployment through Claude Desktop or the MCP Inspector for testing."
thirdweb-dev,thirdweb-mcp,2.3,1.0,7.1,-2.13,"['Found pattern: send.*data', 'Potential data exfiltration: send.*data']",HIGH,"Read/write to over 2,000 EVM blockchains, enabling data querying, smart contract analysis/deployment, and transaction execution, powered by Thirdweb. Users can swap, bridge, send, deploy contracts, build apps, and more. 

Thirdweb is an all-in-one dev stack for web3 apps and infra; the MCP gives you access to all Thirdweb features directly from LLM."
inkeep,mcp-server-python,2.3,0.4,5.5,-1.6500000000000001,[],LOW,"Inkeep MCP Server enables Claude to search and retrieve relevant documentation through Inkeep's RAG API. The server exposes a single 'rag-search' tool that queries Inkeep's API using the OpenAI client library, returning structured citation data compatible with Claude's citation format. It requires an Inkeep account and API key, and is configured through environment variables. This implementation is particularly valuable for workflows where users need to reference documentation without leaving their conversation with Claude, making it ideal for technical support, developer assistance, and knowledge-based interactions."
aliyun,alibabacloud-adb-mysql-mcp-server,2.2,0.2,5.5,-1.6500000000000001,[],MINIMAL,"Adb MySQL MCP Server provides a universal interface between AI Agents and Alibaba Cloud's Adb MySQL databases, enabling seamless metadata retrieval and SQL operations. Developed by Alibaba Cloud, this Python-based implementation offers tools for executing SQL queries, analyzing query plans, and retrieving execution statistics, along with resource templates for accessing database schemas, table definitions, and configuration values. The server requires minimal configuration through environment variables and supports both local development and pip installation, making it ideal for data analysts and developers who need AI-assisted database interactions with Adb MySQL clusters."
chargebee,modelcontextprotocol,2.2,0.2,7.4,-2.2199999999999998,[],MINIMAL,"Chargebee empowers businesses of all sizes to scale revenue with a complete suite of solutions, including subscription management, recurring billing, pricing and payment optimization, revenue recognition, collections, and customer retention.

This MCP Server connects AI agents to Chargebee platform."
riza-io,riza-mcp,1.8,0.4,4.2,-1.2600000000000002,[],LOW,"The Riza MCP Server provides a secure bridge between LLMs and Riza's isolated code interpreter API, enabling AI assistants to write, save, edit, and execute code safely. Built as a wrapper around the Riza API, it exposes functionality through discrete tools that allow LLMs to create reusable code tools, manage a library of saved tools, and execute arbitrary code in a sandboxed environment. This implementation is particularly valuable for workflows requiring secure code execution from LLM-generated content, offering both the flexibility of running arbitrary code and the convenience of maintaining persistent tools across conversations."
ahnlabio,bicscan-mcp,2.2,0.4,5.7,-1.7100000000000002,[],LOW,"BICScan MCP Server provides a bridge to the BICScan API for assessing risk and analyzing assets across blockchain addresses, domains, and decentralized applications. Built with Python and FastMCP, it exposes tools for retrieving risk scores (0-100 scale) and detailed asset holdings information, with robust error handling and logging capabilities. This implementation is particularly valuable for blockchain security analysts and compliance teams who need to evaluate cryptocurrency addresses and monitor digital assets through natural language interaction."
devhub,devhub-cms-mcp,2.2,0.2,6.7,-2.0100000000000002,[],MINIMAL,"Allows seamless interaction with DevHub's API platform, enabling automated content management and providing additional context to DevHub's users of LLMs. This MCP will benefit users looking to integrate AI capabilities with their DevHub workflows."
prisma,prisma,4.2,0.7,7.6,-2.2800000000000002,[],MEDIUM,"Prisma's MCP server enables LLMs to manage Prisma Postgres databases through natural language commands. Available via the Prisma CLI command 'prisma platform mcp --early-access', it allows AI assistants to perform operations like creating database instances, running schema migrations, and managing database tables. The server integrates with popular AI tools including Cursor, Windsurf, Claude Code, Claude Desktop, and the OpenAI Agents SDK, making it accessible across multiple development environments for database management tasks."
mindsdb,mindsdb,4.2,0.8,6.7,-2.0100000000000002,"['Potential data exfiltration: POST\\s+https?://', 'Found pattern: collect.*data', 'Found pattern: tracking']",HIGH,"MindsDB is an MCP server that enables your MCP applications to answer questions over large-scale federated data—spanning databases, data warehouses, and SaaS applications.

​
Key Features
Unified Data Gateway
MindsDB acts as a unified data gateway that handles complex data operations, freeing AI apps and agents from the need to manage individual data sources or write complex logic. MindsDB enables “one-step” querying across multiple sources with full auditability.

Superior User Experience
MindsDB delivers a polished, secure, and user-friendly experience on top of MCP integrations. Our turnkey solution includes robust security controls, monitoring, governance, and native integrations to ensure compatibility with non-MCP solutions and applications.

Advanced AI Workflows
MindsDB orchestrates complex AI workflows, such as joining data from multiple sources and coordinating across various models and data systems in a single query. These composite workflows are challenging to implement using MCP alone."
yamadashy,repomix,3.05,0.2,7.8,-2.34,[],MINIMAL,"Repomix is a powerful tool that packs your entire repository into a single, AI-friendly file.
It is perfect for when you need to feed your codebase to Large Language Models (LLMs) or other AI tools like Claude, ChatGPT, DeepSeek, Perplexity, Gemini, Gemma, Llama, Grok, and more."
activepieces,activepieces,3.5,0.8,7.3,-2.19,"['Found pattern: fetch\\s*\\(', 'Obfuscated code: atob\\s*\\(', 'Found pattern: tracking']",HIGH,Connect to your hosted MCP Server using any MCP client to communicate with tools
mediar-ai,screenpipe-mcp,3.9,0.2,0,-0.0,[],MINIMAL,"This screenpipe MCP server, developed by Mediar AI, provides a standardized interface for searching and retrieving screen recordings and associated data. Built with Python and leveraging libraries like httpx and nest-asyncio, it offers tools to query recordings based on content type, time range, and application context. The server integrates with a local screenpipe API, abstracting the complexities of data retrieval and formatting into a consistent MCP interface. By enabling AI systems to access and analyze screen capture data, this implementation facilitates use cases such as productivity tracking, user behavior analysis, and automated documentation of digital workflows."
skyvern-ai,mcp,3.2,0.8,6.1,-1.83,"['Found pattern: send.*data', 'Found pattern: tracking']",HIGH,An MCP implementation for Skyvern AI that enables browser automation and web interaction capabilities through the Model Context Protocol.
github,github-mcp-server,3.75,0.2,7.3,-2.19,[],MINIMAL,"A Model Context Protocol (MCP) server for GitHub that enables AI assistants to access GitHub repositories, issues, pull requests, and other GitHub data."
mastra-ai,mcp-docs-server,3.75,0.8,5.9,-1.7700000000000002,"['Suspicious domain: www.google-analytics.com', 'Obfuscated code: atob\\s*\\(', 'Found pattern: send.*data', 'Potential data exfiltration: send.*data']",HIGH,"A Model Context Protocol (MCP) server that provides AI assistants with direct access to Mastra.ai's complete knowledge base. This includes comprehensive documentation with MDX support, a collection of production-ready code examples, technical blog posts, and detailed package changelogs. The server integrates with popular AI development environments like Cursor and Windsurf, as well as Mastra agents, making it easy to build documentation-aware AI assistants that can provide accurate, up-to-date information about Mastra.ai's ecosystem."
ahujasid,blender-mcp,3.8,0.4,7.8,-2.34,[],LOW,"BlenderMCP enables Claude to control Blender through the Model Context Protocol, allowing for natural language manipulation of 3D scenes. The implementation consists of a Blender addon that creates a socket server and an MCP server that communicates with it, exposing resources and tools for scene inspection, object creation/manipulation, material application, and rendering. Users can create and modify 3D content through conversational prompts without needing to know Blender's interface or Python API, making it ideal for rapid prototyping, educational purposes, or assisting users unfamiliar with 3D modeling software."
pipedreamhq,modelcontextprotocol,3.2,0.8,7.8,-2.34,"['Suspicious network connection to datatracker.ietf.org', 'Potential data exfiltration: send.*data', 'Found pattern: send.*data', 'Found pattern: tracking']",HIGH,"Pipedream's MCP server lets you:
- Run the servers locally with npx @pipedream/mcp
- Host the servers yourself to use them within your app or company

Some of the key features include the ability to:
- Run your own MCP server for over 2,500 apps
- Manage servers for your users, in your own app.
- Connect accounts, configure params, and make API requests, all via tools
- Fully-managed OAuth and credential storage "
supermemoryai,supermemory,3.5,0.2,5.7,-1.7100000000000002,[],MINIMAL,"Supermemory is an open-source AI knowledge platform that helps users collect, organize, and recall information from various sources. It integrates with popular tools like Notion, Twitter, Obsidian, and more, allowing users to save content, build a personal knowledge base, and use AI to chat with and search through their collected information while maintaining privacy through end-to-end encryption and optional self-hosting."
microsoft,playwright-mcp,2.75,0.2,7.5,-2.25,[],MINIMAL,"Playwright MCP is a server implementation that enables AI assistants to control web browsers through the Model Context Protocol. It provides tools for navigating websites, capturing page snapshots, interacting with elements, and taking screenshots - all accessible via standardized MCP interfaces. The server offers two modes: a snapshot-based approach that uses accessibility trees for better semantic understanding of web pages, and a vision-based mode that works with screenshots for visual interactions. Built by Microsoft, this implementation leverages Playwright's automation capabilities to allow AI assistants to perform complex web tasks like form filling, clicking elements, and extracting information from websites."
pydantic,mcp-run-python,3.6,0.8,5.0,-1.5,"['Potential data exfiltration: send.*data', 'Found pattern: send.*data', 'Found pattern: tracking']",HIGH,"MCP-Run-Python provides a sandboxed environment for executing Python code through a standardized interface. Built with TypeScript and Pyodide, it allows AI assistants to run Python snippets safely in a browser-compatible environment, supporting package installation through PEP 723 script metadata. The server offers both SSE and stdio transport options, handles dependency management automatically, and returns execution results in a structured XML format containing stdout, stderr, and return values. This implementation is particularly valuable for interactive code examples, educational tools, and AI assistants that need to demonstrate or test Python code without requiring a full backend Python environment."
glips,figma-context-mcp,3.2,0.4,4.3,-1.29,[],LOW,"This MCP server, developed by GLips, provides a standardized interface for AI models to interact with Figma's design platform API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for accessing and manipulating Figma design files, components, and styles. The implementation focuses on exposing Figma's collaborative design features through a consistent MCP interface, enabling AI assistants to perform complex design operations, asset management, and team collaboration tasks. By connecting AI models with Figma's powerful design capabilities, this server facilitates sophisticated scenarios like automated design analysis, style guide enforcement, and design system management. It's particularly valuable for design teams and organizations looking to integrate AI-powered design assistance and automation into their Figma workflows."
upstash,context7,2.45,0.2,7.6,-2.2800000000000002,[],MINIMAL,"Context7-MCP is a server implementation that provides AI assistants with access to up-to-date documentation and code examples for various libraries and frameworks. Developed by Upstash, this TypeScript-based server connects to Context7.com's documentation database, offering two main tools: one for resolving library names into compatible IDs, and another for retrieving relevant documentation with customizable token limits and topic filtering. The implementation includes intelligent project ranking algorithms to help find the most relevant documentation based on user queries, making it particularly valuable for developers seeking current technical information beyond an AI's knowledge cutoff date."
trycua,mcp-server,3.15,0.7,7.2,-2.16,[],MEDIUM,"This server enables LLMs to run Computer-Use Agent (CUA) workflows on Apple Silicon macOS. It provides asynchronous access to a virtual macOS sandbox environment using Apple’s Virtualization.framework, and supports clients like Cursor, Claude Desktop, and other MCP-compatible tools."
benjamine,diff-mcp,3.1,0.2,5.8,-1.7399999999999998,[],MINIMAL,"jsondiffpatch is a JavaScript library that compares and patches JSON objects, providing a compact delta format that captures additions, modifications, deletions, and array moves. Created by Benjamin Eidelman, it features smart array diffing using LCS algorithm, multiple output formatters (HTML, console, JSON Patch RFC 6902), and text diffing for long strings. The library includes an MCP server implementation that enables AI assistants to compare text or structured data in various formats (JSON, YAML, TOML, XML) and get readable diffs. Ideal for version control systems, data synchronization, and change visualization in web applications."
lauriewired,ghidramcp,3.05,0.2,6.8,-2.04,[],MINIMAL,"GhidraMCP is a Model Context Protocol (MCP) server implementation that integrates with the Ghidra reverse engineering framework. It allows AI assistants to analyze binary files, decompiled code, and other reverse engineering artifacts directly from Ghidra, enabling more effective collaboration between AI systems and reverse engineers."
lharries,whatsapp-mcp,3.1,0.2,7.8,-2.34,[],MINIMAL,"WhatsApp MCP Server provides a secure bridge to your personal WhatsApp account, enabling AI assistants to search messages, manage contacts, and send messages through standardized tools. The implementation uses a two-component architecture with a Go-based WhatsApp bridge that connects to the WhatsApp web API via the whatsmeow library, storing all messages locally in SQLite, and a Python MCP server that exposes functionality through nine specialized tools. Designed for privacy, it keeps your message history on your device while allowing controlled AI access to your conversations for tasks like finding past information or sending new messages."
sonnylazuardi,cursor-talk-to-figma-mcp,2.3,0.5,7.5,-2.25,[],LOW,"Cursor Talk to Figma MCP enables AI assistants to interact with Figma designs through a bidirectional communication system. Created by Sonny Lazuardi, it consists of a Figma plugin, a WebSocket server, and an MCP server that together allow Cursor AI to read and modify Figma designs programmatically. The implementation provides tools for creating and manipulating design elements (rectangles, frames, text), styling (colors, strokes, corner radius), and organization (moving, resizing, deleting nodes), making it particularly valuable for AI-assisted design workflows where users need to generate or modify visual elements without leaving their AI conversation."
executeautomation,mcp-playwright,2.9,0.2,6.2,-1.8599999999999999,[],MINIMAL,"This Playwright-based MCP implementation, created by Execute Automation, provides a bridge between language models and web browsers. It enables AI agents to perform a wide range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution. The implementation stands out by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Playwright's cross-browser support, it ensures compatibility across Chrome, Firefox, and Safari. This tool is particularly useful for AI-driven web testing, data scraping, and automated web interactions, opening up possibilities for more sophisticated AI assistants that can directly interact with web applications."
wonderwhy-er,desktopcommandermcp,3.0,0.0,7.8,-2.34,[],MINIMAL,"This MCP server implementation, developed by Eduard Ruzga, provides a terminal interface for executing commands and managing processes on the local system. Built with TypeScript and leveraging the Model Context Protocol SDK, it extends the MCP Filesystem Server to enable full system command execution, process management, and advanced file operations. The implementation stands out by combining terminal access with filesystem capabilities, allowing for seamless integration of command-line tools and file manipulation in AI workflows. It's particularly useful for developers and system administrators who need to perform complex system operations, run scripts, or manage files through AI-assisted interfaces, enabling tasks like automated system maintenance, code deployment, or data processing pipelines."
topoteretes,cognee-mcp,2.85,0.8,5.7,-1.7100000000000002,"['Potential data exfiltration: POST\\s+https?://', 'Found pattern: collect.*data']",HIGH,"This MCP server, developed by topoteretes, provides a boilerplate framework for building AI assistants with integrated database and API capabilities. It leverages uv for dependency management and offers configurable connections to graph databases like Neo4j, vector databases like LanceDB, and relational databases. The server stands out by combining multiple database paradigms and offering easy integration with Claude AI. By connecting AI capabilities with diverse data sources, this implementation enables the creation of knowledge-aware AI systems that can reason over structured and unstructured data. It is particularly useful for building complex AI assistants that require access to heterogeneous data stores, such as enterprise knowledge bases, research tools, or data analysis platforms."
idosal,git-mcp,2.85,0.8,7.8,-2.34,"['Potential data exfiltration: send.*data', 'Found pattern: collect.*data', 'Found pattern: send.*data', 'Found pattern: tracking']",HIGH,"Transforms any GitHub project (repositories or GitHub pages) into a documentation hub. It allows AI tools like Cursor to access up-to-date documentation and code, ending hallucinations seamlessly."
justinpbarnett,unity-mcp,2.75,0.2,7.2,-2.16,[],MINIMAL,"A Unity package that enables seamless communication between Unity and Large Language Models (LLMs) like Claude Desktop via the Model Context Protocol (MCP). This server acts as a bridge, allowing Unity to send commands to and receive responses from MCP-compliant tools, empowering developers to automate workflows, manipulate assets, and control the Unity Editor programmatically."
firebase,mcp,2.85,0.8,7.5,-2.25,"['Obfuscated code: eval\\s*\\(.*\\)', 'Found pattern: exec\\s*\\(', 'Obfuscated code: exec\\s*\\(', 'Found pattern: eval\\s*\\(', 'Found pattern: tracking']",HIGH,"This Genkit MCP plugin, developed by Firebase, provides seamless integration between Genkit and the Model Context Protocol (MCP). It enables Genkit developers to both consume MCP tools, prompts, and resources as a client and expose Genkit functionality as an MCP server. The client automatically discovers and registers available MCP actions with Genkit, while the server exposes Genkit tools and prompts via MCP. Built with TypeScript, it offers flexible configuration options for connecting to MCP servers, including local process spawning and remote connections. The implementation handles parsing and coercion of MCP responses for compatibility with Genkit's structured approach. It is particularly useful for developers looking to extend Genkit's capabilities with external MCP-compatible services or expose their Genkit-based AI assistants as MCP servers."
mrexodia,ida-pro-mcp,2.0,0.2,7.8,-2.34,[],MINIMAL,"A Python-based MCP implementation for IDA Pro, a disassembler and reverse engineering tool"
ahujasid,ableton-mcp,2.5,0.2,7.3,-2.19,[],MINIMAL,"Ableton MCP enables AI assistants to control Ableton Live music production software through a bidirectional communication system. It consists of a Remote Script that runs within Ableton Live and exposes a socket server, paired with a Python MCP server that translates commands into actions. The implementation supports a wide range of music production operations including creating tracks and clips, adding MIDI notes, controlling playback, loading instruments, and browsing the Ableton library. Developed by Siddharth Ahuja, this integration is particularly valuable for AI-assisted music composition, production workflows, and automated sound design without leaving the conversation interface."
zcaceres,markdownify-mcp,2.2,0.2,5.6,-1.6799999999999997,[],MINIMAL,"This Markdownify MCP server, developed by Zach Caceres, provides a versatile solution for converting various file types and web content to Markdown format. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for transforming PDFs, images, audio files, web pages, and more into easily readable and shareable Markdown text. The implementation stands out by supporting a wide range of input formats and including specialized converters for sources like YouTube transcripts and Bing search results. It's particularly useful for content creators, researchers, and developers who need to streamline document conversion workflows, create accessible content from diverse sources, or integrate Markdown generation capabilities into AI-assisted applications."
dhravya,apple-mcp,2.5,0.2,6.2,-1.8599999999999999,[],MINIMAL,"This MCP server implementation provides a bridge to Apple's native applications, enabling AI assistants to interact with Contacts, Notes, and Messages. Developed by Dhravya Shah, it offers tools for searching and retrieving contacts, managing notes, and sending messages. The server is built using TypeScript and Bun, integrating with the Model Context Protocol SDK. It focuses on secure handling of personal data and robust error management, making it suitable for AI applications that need to automate tasks within Apple's ecosystem. The implementation is designed for easy setup within the Claude Desktop environment and is particularly useful for personal productivity and communication workflows."
sendaifun,solana-agent-kit,3.0,0.2,7.8,-2.34,[],MINIMAL,"Solana Agent Kit MCP server connects AI agents to Solana blockchain protocols, enabling onchain interactions through a comprehensive set of tools. Developed by SendAI, it provides capabilities for token deployment, NFT collection creation, DeFi operations, and cross-chain transfers via Wormhole. The implementation supports both chat and autonomous modes, with a flexible architecture that allows developers to add custom tools. The server can be configured with various API keys and wallet credentials, making it ideal for AI workflows requiring direct blockchain interaction without leaving the conversation interface."
cyberagiinc,devdocs,2.7,0.4,7.8,-2.34,[],LOW,"🎯 Perfect For
🏢 Enterprise Software Developers
Skip weeks of reading documentation and dealing with technical debt. Implement ANY technology faster by letting DevDocs handle the heavy lifting of documentation understanding.

🕸️ Web Scrapers
Pull entire contents of websites with Smart Discovery of Child URLs up to level 5. Perfect for both internal and external website documentation with intelligent crawling.

👥 Development Teams
Leverage internal documentation with built-in MCP servers and Claude integration for intelligent data querying. Transform your team's knowledge base into an actionable resource.

🚀 Indie Hackers
DevDocs + VSCode(cline) + Your Idea = Ship products fast with ANY technology. No more getting stuck in documentation hell when building your next big thing."
clerk,agent-toolkit,2.15,0.8,7.6,-2.2800000000000002,['Obfuscated code: atob\\s*\\('],HIGH,"Clerk is a JavaScript SDK for authentication and user management that provides a comprehensive set of tools for implementing secure authentication flows in web applications. This repository contains the core Clerk packages and various framework integrations (React, Next.js, Remix, Express, Fastify) along with playground examples demonstrating implementation across different environments. The SDK supports features like user sign-in/sign-up, organization management, session handling, and authorization based on features and plans, making it particularly useful for applications requiring robust identity management with minimal setup."
supabase-community,supabase-mcp,2.7,0.2,7.8,-2.34,[],MINIMAL,"Supabase MCP Server connects AI assistants directly to Supabase projects, enabling database operations, project management, and configuration through natural language. The implementation provides tools for managing tables, executing SQL queries, applying migrations, and handling project configurations like API keys and TypeScript type generation. It also includes experimental features for database branching that allow creating development environments, merging changes, and managing migrations across branches. Built with TypeScript using the Model Context Protocol SDK, the server authenticates with Supabase's Management API using personal access tokens and is designed for developers who want to integrate database operations into their AI assistant workflows."
supabase-community,mcp-server-postgrest,2.7,0.2,6.6,-1.9799999999999998,[],MINIMAL,"This MCP server collection, developed by Supabase, provides tools for connecting Large Language Models to Supabase databases and services. Built with TypeScript and leveraging the Model Context Protocol SDK, it currently offers a PostgREST server for querying Supabase projects via natural language, with plans to add a Management API for schema and DDL operations. The implementation stands out by enabling direct LLM interaction with Supabase's PostgreSQL databases through a standardized protocol. It's particularly useful for developers looking to integrate AI-powered database querying and management into their applications, allowing for natural language data exploration and manipulation in Supabase projects."
sooperset,mcp-atlassian,2.0,0.4,7.8,-2.34,[],LOW,"This MCP server, developed by sooperset, enables AI assistants to interact with Atlassian Cloud products, specifically Confluence and Jira. It provides tools for searching and reading Confluence spaces/pages, retrieving page comments, searching Jira issues, and accessing project metadata. Built in Python, the implementation exposes Atlassian's collaborative features via a standardized MCP interface, allowing AI models to analyze and manipulate content within Atlassian workspaces. By bridging AI capabilities with Atlassian's project management and documentation platforms, this server enhances an AI assistant's ability to support software development workflows, project tracking, and knowledge management. It is particularly useful for teams already using Atlassian tools who want to leverage AI for task automation, content analysis, and workflow optimization."
anaisbetts,mcp-installer,2.0,0.2,4.0,-1.2000000000000002,[],MINIMAL,"This MCP server, developed by anaisbetts, serves as a meta-installer for other MCP servers. It enables AI assistants to dynamically install and configure additional MCP servers from npm or PyPi packages on demand. Built in JavaScript and leveraging npx and uv, this implementation extends Claude's capabilities by allowing it to adapt its toolset in real-time based on user needs. The server interprets natural language installation requests, handles package management, and sets up environment variables, abstracting away the technical complexities of server deployment. It is particularly useful for developers and power users who want to rapidly expand Claude's functionality without manual configuration, enabling on-the-fly access to a wide range of specialized tools and APIs through the MCP interface."
blazickjp,arxiv-mcp-server,2.6,0.4,6.4,-1.92,[],LOW,"This ArXiv MCP server, developed by blazickjp, provides an interface for AI assistants to search and analyze academic papers from the arXiv repository. It enables precise querying with filters like date ranges and categories, as well as full-text access to papers. Built with an asynchronous architecture in Python, the implementation handles paper downloads, local caching, and exposes a standardized MCP interface. By bridging AI models and academic literature, this server allows AI systems to engage deeply with scientific research in fields like computer science and physics. It is particularly useful for AI assistants needing to conduct literature reviews, answer technical questions, or provide summaries of recent developments in specific research areas."
chatmcp,mcp-server-chatsum,2.0,0.0,5.9,-1.7700000000000002,[],MINIMAL,"This MCP server, developed by idoubi, enables AI assistants to query and summarize chat messages stored in a local database. Built in TypeScript, it integrates with Claude Desktop and provides a standardized interface for retrieving conversation history. The implementation stands out by offering flexible querying options and the ability to generate summaries based on custom prompts. By bridging AI models with chat logs, this server allows AI systems to analyze conversation patterns, extract insights, and provide context-aware responses. It is particularly useful for personal knowledge management, conversation analysis, and building more contextually-aware AI assistants that can reference and learn from past interactions."
damms005,devdb-vscode,2.45,0.5,7.6,-2.2800000000000002,"['Found pattern: exec\\s*\\(', 'Obfuscated code: exec\\s*\\(']",LOW,"DevDB MCP server provides database schema and table information to AI assistants through a standardized interface. Built by Damilola Emmanuel Olowookere, it exposes database tables and their schemas via HTTP endpoints and MCP resources, allowing AI tools to query database structure without direct database access. The server includes tools for listing tables and retrieving detailed schema information, making it useful for developers who want AI assistants to understand their database architecture or generate database-aware code without compromising security."
smithery-ai,mcp-obsidian,2.6,0.2,6.1,-1.83,[],MINIMAL,"This Obsidian MCP connector, developed by calclavia, enables AI assistants to read and search Markdown notes in Obsidian vaults through Claude Desktop. It provides seamless integration between Claude and personal knowledge bases stored in Obsidian. Built in TypeScript and leveraging npx for easy installation, the connector allows Claude to list files, retrieve content, and perform searches across Obsidian documents. By bridging AI models with Obsidian's note-taking system, this implementation enhances Claude's ability to analyze personal knowledge, assist with note organization, and augment information retrieval from Obsidian vaults. It is particularly useful for users seeking AI-powered knowledge management, research assistance, and collaborative note-taking within their Obsidian environments."
markuspfundstein,mcp-obsidian,2.6,0.4,7.1,-2.13,[],LOW,"This Obsidian MCP server, developed by MarkusPfundstein, enables AI assistants to interact with Obsidian vaults through the Local REST API plugin. It provides tools for listing files, retrieving content, searching across documents, and modifying notes. Built in Python, the implementation handles API authentication and exposes Obsidian's functionality via a standardized MCP interface. By bridging AI models and Obsidian's note-taking system, this server allows AI systems to analyze personal knowledge bases, assist with note organization, and augment information retrieval. It is particularly useful for AI assistants supporting knowledge management, research workflows, and collaborative note-taking within Obsidian vaults."
dmayboroda,mcp-server,2.7,0.6,2.0,-0.6000000000000001,['Obfuscated code: atob\\s*\\('],MEDIUM,"This MCP server, developed by dmayboroda, enables AI assistants like Claude to perform RAG (Retrieval-Augmented Generation) on local files. Built in Python and leveraging the uv package manager, it integrates seamlessly with MCP clients through a simple configuration file. The server allows the client to search and retrieve context from the user's local documents, enhancing its ability to provide relevant and personalized responses. By granting access to private or offline information sources, this implementation extends the client's knowledge base beyond its training data, making it particularly useful for tasks involving confidential documents, personal notes, or frequently updated local resources."
alexander-zuev,supabase-mcp-server,2.6,0.8,7.8,-2.34,"['Potential data exfiltration: log.*queries', 'Found pattern: collect.*data', 'Found pattern: tracking']",HIGH,"This MCP server implementation provides a bridge between Supabase and AI assistants, enabling database schema exploration and management through natural language interactions. It leverages the Supabase client to execute read-only SQL queries, retrieve schema information, and list tables and columns. The server offers tools for listing schemas, exploring table structures, and executing custom SQL queries, making it particularly useful for developers and data analysts who want to integrate Supabase database operations into their AI workflows. By abstracting database interactions into MCP tools, it simplifies the process of querying and analyzing Supabase data within AI-powered applications."
suekou,mcp-notion-server,2.6,0.4,7.2,-2.16,[],LOW,"This Notion MCP server, developed by suekou, enables AI assistants to interact with Notion workspaces through the Notion API. It provides tools for manipulating blocks, pages, and databases, including creating, retrieving, updating, and deleting content. Built in JavaScript, the implementation exposes Notion's powerful organizational features via a standardized MCP interface. By bridging AI models with Notion's collaborative workspace, this server enhances Claude's ability to manage information, assist with project organization, and augment knowledge management within Notion. It is particularly useful for users seeking AI-powered productivity enhancements, content creation, and data analysis within their existing Notion workspaces."
jae-jae,fetcher-mcp,2.6,0.2,7.5,-2.25,[],MINIMAL,"Fetcher MCP is a server that enables AI assistants to retrieve web page content using Playwright's headless browser capabilities. It excels at handling dynamic JavaScript-heavy websites by executing client-side code, and includes intelligent content extraction through Mozilla's Readability algorithm to remove ads and non-essential elements. The implementation offers both single URL and batch fetching tools, supports HTML or Markdown output formats, and automatically blocks unnecessary resources like images and stylesheets to improve performance. This tool is particularly valuable for research workflows, content analysis, and information gathering that requires processing of modern web applications."
operative-sh,web-eval-agent,2.0,0.4,5.9,-1.7700000000000002,[],LOW,"Web-QA-Agent is an MCP server implementation that enables AI assistants to evaluate web application user experiences through automated browser interactions. Built by Operative-Sh, it leverages Playwright for browser automation and integrates with Claude AI models to perform UX/UI analysis tasks. The server provides a specialized tool for assessing web interfaces, capturing console logs and network requests during evaluation, and generating detailed reports on usability issues and recommendations. This implementation is particularly valuable for UX researchers, web developers, and product teams who need AI-powered analysis of web application interfaces without manual testing."
syedazharmbnr1,claude-chatgpt-mcp,2.3,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This MCP server implementation provides a bridge between Claude and the ChatGPT desktop app on macOS. Developed by Syed Azhar, it utilizes AppleScript to interact with the ChatGPT interface, allowing Claude to send prompts, retrieve responses, and manage conversations. The tool is designed for use cases where integration between different AI assistants is needed, such as comparing outputs or leveraging ChatGPT's capabilities within Claude's workflow."
elevenlabs,elevenlabs-mcp,2.7,0.4,7.4,-2.2199999999999998,[],LOW,"An ElevenLabs MCP server implementation that provides AI assistants with access to ElevenLabs' text-to-speech, voice cloning, and conversation AI capabilities. Developed by the ElevenLabs team, this server enables voice synthesis with customizable parameters, audio file handling with similarity detection, and creation of conversational agents with specific voice profiles. The implementation includes utilities for environment configuration, output path management, and Claude Desktop integration, making it particularly useful for applications requiring high-quality voice generation, audio processing, and interactive voice-based AI experiences."
basicmachines-co,basic-memory,2.6,0.5,7.8,-2.34,['Found pattern: tracking'],LOW,"How It Works
Interact naturally with AIs to build and access your knowledge base.

1
Build on Past Knowledge
AI references previous notes in future conversations.

""Let's continue our conversation about coffee brewing.""
AI retrieves relevant notes rather than loading everything.

2
Chat Naturally
Have normal conversations with AI assistants like Claude.

""Find information about pour over coffee methods.""
AI searches your knowledge base and summarizes findings.

3
Save Knowledge
Ask Claude to create a note about your conversation.

""Create a note about coffee brewing methods.""
AI creates a structured note with observations and relations."
janwilmake,openapi-mcp-server,2.6,0.2,7.8,-2.34,[],MINIMAL,"This MCP server, developed by snaggle-ai, enables AI assistants like Claude to interact with any API that has an OpenAPI v3.1 specification. It automatically converts API endpoints into Claude tools, allowing the AI to discover available endpoints, understand required parameters, make API calls, and handle responses. The server integrates seamlessly with Claude Desktop, facilitating natural language interactions with both local and remote APIs. By bridging AI capabilities with existing API infrastructures, this implementation empowers more dynamic and context-aware conversations. It is particularly useful for scenarios like API testing, prototyping integrations, or exploring API capabilities through natural language in AI-assisted development, documentation, and API interaction tasks."
flux159,mcp-server-kubernetes,2.7,0.2,7.6,-2.2800000000000002,[],MINIMAL,"This MCP server, developed by Flux159, enables AI assistants like Claude to interact with Kubernetes clusters. It provides tools for listing pods, services, deployments, and namespaces, as well as creating and deleting pods. The server integrates with kubectl and automatically connects to the current context, allowing seamless management of Kubernetes resources through natural language commands. By bridging AI capabilities with Kubernetes operations, this implementation facilitates easier cluster management and troubleshooting. It is particularly useful for DevOps teams looking to streamline their Kubernetes workflows, developers needing quick access to cluster information, or system administrators performing routine cluster maintenance tasks through AI-assisted interactions."
cloudflare,workers-mcp,2.5,0.2,6.8,-2.04,[],MINIMAL,"This MCP transport for Cloudflare Workers, developed by Cloudflare, enables seamless integration of MCP capabilities into serverless edge computing environments. Built with TypeScript and leveraging Cloudflare's Workers platform, it provides a standardized interface for deploying MCP-compatible services at the network edge. The implementation supports rapid development and deployment of AI-assisted applications, taking advantage of Cloudflare's global network for low-latency, scalable MCP services. It's particularly useful for developers looking to build AI-powered applications that require edge computing capabilities, such as real-time content processing, personalized user experiences, or distributed AI inference."
saik0s,mcp-browser-use,2.6,0.4,7.6,-2.2800000000000002,[],LOW,"This MCP server for browser-use, developed by an unnamed author, provides a robust interface for AI assistants to interact with web browsers and perform automated web tasks. Built with Python and leveraging libraries like browser-use, FastAPI, and LangChain, it offers tools for web scraping, form filling, and general web automation. The implementation focuses on abstracting away browser complexities, making it accessible for AI models to navigate websites, extract data, and interact with web applications. It's particularly useful for tasks like data collection, web testing, or integrating web-based workflows into AI systems, allowing assistants to interact with the web without requiring deep knowledge of browser automation techniques."
snagasuri,deebo-prototype,2.55,0.4,7.4,-2.2199999999999998,[],LOW,"Deebo transforms debugging from a linear process into an autonomous investigation system where a coordinator agent analyzes errors, generates diverse hypotheses, and deploys specialized agents to test each potential cause in isolated environments simultaneously. The system maintains a persistent memory bank that evolves with each debugging session, allowing it to recognize patterns across bugs, avoid redundant approaches, and become increasingly effective with your specific codebase over time. When a solution emerges with high confidence, Deebo delivers not only the fix but comprehensive documentation of the investigation process, enabling developers to understand both the remedy and underlying causes."
tuananh,hyper-mcp,2.55,0.2,7.3,-2.19,[],MINIMAL,extensible MCP server that you can enhance with plugins written in any WebAssembly-compatible programming language. Think of it as a modular toolkit where each plugin adds new functionality without the overhead of running multiple MCP servers
jjsantos01,qgis_mcp,2.4,0.2,7.2,-2.16,[],MINIMAL,"QGIS MCP provides a bridge between AI assistants and QGIS (Quantum GIS) through a socket-based server-client architecture. The implementation consists of a QGIS plugin that runs a server inside the GIS application, exposing geospatial capabilities like adding layers, executing processing algorithms, and rendering maps, while an MCP server component translates these capabilities into tools that can be called by AI assistants. This enables AI systems to perform complex GIS operations such as loading projects, manipulating vector and raster data, and generating map visualizations without requiring direct QGIS knowledge."
codergamester,mcp-unity,2.7,0.8,6.0,-1.7999999999999998,['Found pattern: tracking'],HIGH,"MCP Unity currently provides the following tools:

execute_menu_item: Executes Unity menu items (functions tagged with the MenuItem attribute)
select_object: Selects game objects in the Unity hierarchy
package_manager: Installs, removes, and updates packages in the Unity Package Manager
run_tests: Runs tests using the Unity Test Runner
notify_message: Displays messages in the Unity Editor
MCP Unity currently provides the following resources:

get_menu_items: Retrieves a list of all available menu items in the Unity Editor to facilitate execute_menu_item tool
get_hierarchy: Retrieves a list of all game objects in the Unity hierarchy
get_console_logs: Retrieves a list of all logs from the Unity console
get_packages: Retrieves information about installed and available packages from the Unity Package Manager
get_assets: Retrieves information about assets in the Unity Asset Database"
rusiaaman,mcp_server,2.0,0.4,1.2,-0.36,[],LOW,"This MCP implementation, developed by rusiaaman, exposes the wcgw library's functionality via MCP. wcgw enables access the local shell and file system for task automation and code execution. It integrates with Docker to provide full control over a Linux environment, including mouse and keyboard input. It allows the AI to interact directly with the user's system, execute commands, manipulate files, and even control a virtualized desktop. The implementation is particularly useful for developers and power users who want to leverage LLM intelligence for system automation, code development, and complex multi-step tasks that require direct interaction with the operating system and applications."
loopwork-ai,imcp,2.45,0.2,6.8,-2.04,[],MINIMAL,"iMCP is a macOS menu bar application that enables AI assistants to access system services including Calendar, Contacts, Messages, Reminders, Location, and Weather. Developed by Loopwork, it creates a secure bridge between Claude Desktop and macOS native APIs through a Bonjour-advertised TCP server that requires explicit user permission for each connection. The app features a simple toggle interface for enabling specific services and includes integration with Claude Desktop for easy configuration. It's particularly useful for AI assistants that need to perform tasks like checking schedules, finding contacts, sending reminders, or getting weather information without requiring users to manually copy information."
designcomputer,mysql_mcp_server,2.6,0.4,7.6,-2.2800000000000002,[],LOW,"This MySQL MCP server, developed by designcomputer, provides a secure interface for language models to interact with MySQL databases. It enables AI agents to list tables, read data, and execute SQL queries through a controlled interface. The server integrates with Claude Desktop and can be run standalone, offering flexibility in deployment. By focusing on read-only access and using environment variables for configuration, it maintains data security while allowing AI systems to explore and analyze relational data. This implementation is particularly useful for AI assistants designed to perform database schema exploration, generate SQL queries, or provide data-driven insights using MySQL as the backend."
arodoid,unitymcp,2.4,0.2,7.0,-2.0999999999999996,[],MINIMAL,"UnityMCP, developed by an unnamed author, is a Unity Editor plugin and server implementation that enables AI assistants to interact with Unity projects in real-time. Built with C# and TypeScript, it offers tools for retrieving editor state, executing C# commands, and accessing logs. The implementation focuses on providing a standardized interface for AI models to manipulate Unity scenes, objects, and project settings. It's particularly useful for tasks like automated level design, asset management, or debugging assistance, allowing AI to directly influence Unity projects without requiring deep knowledge of the Unity API or editor interface."
mobile-next,mobile-mcp,2.0,0.2,7.0,-2.0999999999999996,[],MINIMAL,"Mobile MCP Server provides tools for controlling and interacting with mobile devices through the Model Context Protocol. Built with TypeScript, it offers functionality for both Android and iOS platforms, enabling AI assistants to take screenshots, list installed apps, launch applications, click on screen elements, type text, and navigate through device interfaces. The server implements various device-specific commands through native toolchains (adb for Android and xcrun for iOS simulators), making it particularly valuable for automated mobile app testing, UI navigation, and demonstration scenarios where direct device control is needed."
mxiris-reverse-engineering,ida-mcp-server,2.5,0.0,7.0,-2.0999999999999996,[],MINIMAL,"A Model Context Protocol server for programmatically reading and searching IDA databases via Large Language Models. Developed by Mx-Iris, this early-stage project aims to provide tools for reverse engineering and binary analysis automation, with a focus on enabling LLM interaction with IDA Pro's database. The server is currently under active development and will eventually support a more streamlined workflow for analyzing binary files."
co-browser,browser-use-mcp-server,2.6,0.2,7.1,-2.13,[],MINIMAL,"Browser Use MCP Server provides an async browser automation server using OpenAI's GPT-4o model. It enables remote browser tasks through a flexible MCP interface, allowing AI agents to navigate websites, perform actions, and extract content with configurable browser contexts and detailed task tracking."
rohitg00,kubectl-mcp-server,2.7,0.2,7.8,-2.34,[],MINIMAL,"kubectl-mcp-tool is an MCP server that enables natural language interaction with Kubernetes clusters, allowing AI assistants like Cursor, Claude, and WindSurf to perform kubectl operations through conversational commands. Developed by Rohit Ghumare under the MIT license, it features a minimal wrapper approach for better compatibility across different MCP SDK versions, supports multiple transport protocols (stdio and SSE), and includes specialized implementations for various AI assistants. The tool translates natural language queries into kubectl commands, handles resource management operations, and provides diagnostic capabilities, making it particularly valuable for developers who want to manage their Kubernetes resources through AI assistants without memorizing complex kubectl syntax."
nottelabs,notte-mcp,2.7,0.7,6.0,-1.7999999999999998,[],MEDIUM,"Notte MCP Server provides a bridge between AI assistants and Notte's cloud browser technology, enabling web automation and scraping capabilities. It offers tools for managing browser sessions, taking screenshots, observing page elements, scraping data, and executing actions on web pages. The server also includes an agent/operator feature that can autonomously complete specified tasks on websites. Built on FastMCP with tight integration to the Notte SDK, it's particularly valuable for applications requiring web interaction capabilities without managing browser automation directly."
bytebase,dbhub,2.7,0.2,7.3,-2.19,[],MINIMAL,"DBHub is a universal database gateway implementing the MCP server interface, allowing AI assistants to connect to and explore different databases like PostgreSQL, MySQL, SQLite, and DuckDB. Developed by Bytebase, it provides capabilities for browsing tables, viewing schema information, running read-only SQL queries, and includes safety checks to prevent dangerous operations. The implementation is containerized with Docker for easy deployment and supports both stdio transport for direct integration with tools like Claude Desktop and SSE transport for browser and network clients, making it particularly valuable for AI assistants that need to access and analyze data stored in various database systems."
ckreiling,mcp-server-docker,2.6,0.2,6.7,-2.0100000000000002,[],MINIMAL,"This MCP server, developed by ckreiling, provides seamless integration with Docker containers. It implements a Python-based interface for managing containers, images, networks, and volumes through the Docker SDK. The server exposes tools for common Docker operations like creating, running, and removing containers, as well as fetching logs and stats. By leveraging natural language processing, it enables AI assistants to easily compose and manage Docker deployments through conversational interactions. The implementation is particularly useful for scenarios requiring dynamic container orchestration, such as deploying microservices, setting up development environments, or managing containerized applications through natural language commands to an AI assistant. The server focuses on core Docker functionality while prioritizing safety by restricting access to sensitive options."
automation-ai-labs,mcp-link,2.35,0.8,6.3,-1.8900000000000001,['Potential data exfiltration: upload.*data'],HIGH,"MCP-Link is a server implementation that converts OpenAPI specifications into MCP-compatible endpoints, enabling AI assistants to interact with any API described in OpenAPI format. Written in Go, it features a simple HTTP server that parses OpenAPI YAML/JSON files, transforms API endpoints into MCP tools, and handles authentication through header forwarding. The implementation supports path filtering, parameter mapping, and various authentication methods, making it ideal for developers who want to quickly expose existing APIs to AI assistants without writing custom MCP adapters for each service."
langchain-ai,mcpdoc,2.5,0.2,7.1,-2.13,[],MINIMAL,"MCPDoc is a server that provides documentation access from llms.txt files through the Model Control Protocol. It allows AI assistants to query documentation sources like LangGraph by fetching and parsing llms.txt files from specified URLs. The implementation supports multiple configuration methods including YAML, JSON, or direct URL specification, and offers features like HTTP redirect following and customizable timeouts. Built for integration with Claude Code and other MCP-compatible assistants, MCPDoc enables seamless documentation lookup during coding sessions without requiring users to leave their conversation interface."
coding-solo,godot-mcp,2.35,0.2,7.4,-2.2199999999999998,[],MINIMAL,"A Model Context Protocol (MCP) implementation for the Godot game engine, allowing game developers to integrate AI capabilities into their Godot projects."
minimax-ai,minimax-mcp,2.55,0.4,5.6,-1.6799999999999997,[],LOW,"MiniMax MCP is a server implementation that provides AI assistants with access to MiniMax's text-to-speech, voice cloning, and video generation capabilities. Developed by Roy Wu at MiniMax, this Python-based server handles authentication with the MiniMax API, manages file operations, and provides tools for audio playback and file conversion. The implementation includes robust error handling, fuzzy filename matching, and environment variable configuration, making it particularly useful for applications requiring high-quality voice synthesis and media generation from AI interactions."
benborla,mcp-server-mysql,2.7,0.2,6.6,-1.9799999999999998,[],MINIMAL,"This MCP server, developed by Ben Borla, provides read-only access to MySQL databases for large language models. Built in TypeScript, it integrates with Claude Desktop and enables AI assistants to inspect database schemas and execute read-only SQL queries. The implementation stands out by focusing on security through read-only transactions and offering flexible database connection options. By bridging AI models with relational databases, this server allows AI systems to analyze data patterns, extract insights, and provide data-driven responses. It is particularly useful for scenarios like data exploration, report generation, and building AI assistants that can leverage structured data from MySQL databases while maintaining data integrity."
markuspfundstein,mcp-gsuite,2.6,0.6,7.8,-2.34,['Potential data exfiltration: upload.*data'],MEDIUM,"This Google Workspace (G Suite) MCP implementation, developed by MarkusPfundstein, provides an interface for AI agents to interact with Gmail and Google Calendar. It enables a wide range of operations including email management, calendar event handling, and multi-account support. This tool is helpful for AI-driven email and calendar management tasks, enabling sophisticated AI assistants that can directly manipulate and analyze Google Workspace data."
resend,mcp-send-email,2.6,0.4,7.0,-2.0999999999999996,[],LOW,"This MCP server implementation provides email sending functionality using the Resend API. It exposes a 'send-email' tool that allows for sending plain text emails with options for scheduling delivery and configuring reply-to addresses. The server accepts command-line arguments or environment variables for API keys and sender information, making it flexible for different deployment scenarios. Ideal for applications that need to integrate email notifications or communications within AI-assisted workflows."
minhalvp,android-mcp-server,2.45,0.2,6.6,-1.9799999999999998,[],MINIMAL,"This MCP server implementation provides a bridge to control and interact with Android devices using ADB (Android Debug Bridge). It offers tools for retrieving installed packages, executing ADB commands, capturing screenshots, and analyzing UI layouts. Developed as an open-source project, it integrates with the MCP CLI and uses libraries like adb-shell and Pillow for device communication and image processing. The server is designed for use cases requiring automated Android device testing, app analysis, or remote device management."
jlcases,paelladoc,2.7,0.7,7.2,-2.16,['Found pattern: tracking'],MEDIUM,"PAELLADOC is a documentation-focused MCP server implementation that enables AI assistants to generate structured documentation for software projects. Built with a hexagonal architecture in Python, it provides tools for code analysis, template management, and documentation generation through commands like PAELLA (project initialization), CONTINUE (resume work), and GENERATE_DOC (create documentation from code). The system maintains project memory in SQLite, supports various programming styles and Git workflows, and includes a comprehensive template library organized by MECE principles. Particularly valuable for teams seeking consistent documentation practices across different project types, from frontend React applications to Chrome extensions."
zcaceres,fetch-mcp,2.05,0.2,6.6,-1.9799999999999998,[],MINIMAL,"This fetch MCP server, developed by Zach Caceres, provides AI assistants with a standardized interface for retrieving web content in various formats. Built using TypeScript and the Model Context Protocol SDK, it offers tools for fetching HTML, JSON, plain text, and Markdown from URLs. The server handles custom headers, HTML parsing, and Markdown conversion, abstracting away the complexities of web scraping and content transformation. It's particularly valuable for AI systems that need to gather and process online information, enabling use cases such as content aggregation, web research, data extraction, and automated summarization of web pages."
reading-plus-ai,mcp-server-data-exploration,2.2,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This MCP server, developed by ReadingPlus.AI LLC, provides AI assistants with powerful data exploration capabilities for CSV datasets. Built for use with Claude Desktop, it offers tools for loading CSV files, executing Python scripts, and generating insightful visualizations. The server leverages pandas and matplotlib to perform data analysis and create informative charts. By bridging AI models with data science libraries, this implementation enables AI systems to conduct exploratory data analysis, uncover patterns, and derive actionable insights from large datasets. It is particularly useful for scenarios requiring in-depth analysis of tabular data, trend identification, and data-driven decision making across various domains like real estate, weather patterns, or any field with structured CSV data."
anaisbetts,mcp-youtube,2.1,0.2,2.3,-0.69,[],MINIMAL,"This YouTube MCP server, developed by Anais Betts, enables AI assistants to interact with YouTube video content through subtitles. It leverages yt-dlp to download video subtitles and exposes them via a standardized MCP interface, allowing AI models to analyze and summarize video content without needing to process audio or video directly. By bridging AI systems and YouTube's vast repository of video information, this server facilitates tasks like content summarization, information extraction, and topic analysis from video transcripts. It is particularly useful for AI assistants supporting research, content curation, or educational applications that involve YouTube videos as information sources."
jasonjmcghee,claude-debugs-for-you,2.3,0.2,6.4,-1.92,[],MINIMAL,"This MCP server and VS Code extension, created by Jason McGhee during a 2-hour hackathon, enables AI models like Claude to interactively debug code and evaluate expressions. Built as a language-agnostic tool, it integrates with VS Code's debugging capabilities and launch configurations. The implementation allows AI assistants to set breakpoints, step through code, and inspect variables in real-time, providing a unique approach to AI-assisted debugging. It's particularly useful for developers seeking AI guidance in troubleshooting complex code issues, understanding program flow, or learning debugging techniques, without requiring the AI to have direct access to the development environment."
centralmind,gateway,2.4,0.2,7.4,-2.2199999999999998,[],MINIMAL,"Gateway is a database connectivity server that enables AI assistants to interact with multiple database systems through a unified interface. It supports various database engines including PostgreSQL, MySQL, SQLite, MongoDB, Snowflake, and others, while providing advanced features like API key authentication, OAuth integration, PII data protection, and OpenTelemetry monitoring. The server can operate in multiple modes (REST API, MCP SSE, or MCP stdio) and includes plugins for caching, row-level security, and data anonymization, making it particularly useful for creating secure data access layers for AI applications without exposing raw database credentials."
kleneway,awesome-cursor-mpc-server,2.05,0.4,7.0,-2.0999999999999996,[],LOW,"This MCP server, developed by kleneway, provides three Cursor Tools: Screenshot, Architect, and Code Review. Built with TypeScript and leveraging the Model Context Protocol SDK, OpenAI, and Puppeteer, it enables AI assistants to capture screenshots, analyze web page structures, and review code. The implementation focuses on automating visual and code-related tasks, making it easier to incorporate these capabilities into AI workflows. It's particularly useful for developers and QA teams who want to streamline web testing, UI analysis, and code review processes, enabling use cases such as automated UI testing, web scraping, and AI-assisted code quality checks without manual intervention."
ferrislucas,iterm-mcp,2.4,0.2,7.2,-2.16,[],MINIMAL,"iterm-mcp, created by Ferris Lucas, is a Model Context Protocol server that provides direct access to the currently active tab in iTerm. It enables seamless execution of shell commands within the active iTerm session, bridging the gap between AI assistants and terminal operations. This implementation stands out by focusing specifically on iTerm integration, making it particularly useful for developers and system administrators who frequently work in terminal environments. It simplifies workflow automation, remote system management, and interactive scripting tasks by allowing AI systems to directly interact with the user's terminal session. The server is built with TypeScript, ensuring type safety and easy integration with other JavaScript-based tools and environments."
joshuayoes,ios-simulator-mcp,2.3,0.2,6.9,-2.0700000000000003,[],MINIMAL,"iOS Simulator MCP Tool provides a bridge between Claude and iOS simulators, enabling interaction with virtual iOS devices through a set of specialized tools. Built by Joshua Yoes, it leverages Facebook's IDB tool to allow users to get information about simulators, control UI interactions (tapping, swiping, typing), and inspect UI elements on screen. The implementation is packaged as an NPM module that can be easily integrated with Cursor via MCP configuration, making it valuable for developers who need to test, debug, or demonstrate iOS applications without manually operating the simulator."
jerhadf,linear-mcp-server,2.55,0.4,7.2,-2.16,[],LOW,"This MCP server, developed by jerhadf, provides seamless integration with Linear's issue tracking system for AI assistants. It offers tools for creating, updating, searching, and commenting on Linear issues through natural language interactions. The server leverages Linear's GraphQL API, enabling AI models to perform operations like creating high-priority bugs, finding in-progress tasks, and analyzing team workloads. Key features include flexible issue filtering, user-specific views, and support for markdown in descriptions and comments. By bridging AI capabilities with Linear's project management features, this implementation enhances issue tracking, task prioritization, and team collaboration through natural language. It is particularly useful for scenarios requiring dynamic project management, AI-assisted bug reporting, and automated task organization in software development workflows."
stevenstavrakis,obsidian-mcp,1.9,0.2,7.1,-2.13,[],MINIMAL,"This Obsidian MCP server, developed by Steven Stavrakis, enables AI assistants to interact with Obsidian vaults, providing tools for reading, creating, editing, and managing notes and tags. It integrates with the Model Context Protocol SDK and uses TypeScript for type safety and modularity. The implementation includes features like note creation, content searching, and tag management, making it suitable for users who want to incorporate AI assistance into their knowledge management workflow. It's particularly useful for automating note-taking tasks, organizing information, and enhancing productivity within Obsidian vaults."
gojue,moling,2.3,0.2,6.6,-1.9799999999999998,[],MINIMAL,"MoLing is an MCP server implementation that enables AI assistants to interact with local system resources through a secure, configurable interface. Developed by CFC4N, it provides services for browser automation (using ChromeDP), file system operations (with strict path validation), and command execution (with allowlist filtering), making it particularly valuable for AI assistants like Claude that need controlled access to local resources. The server supports both stdio and SSE transport methods, includes client configuration tools for popular MCP clients (Claude Desktop, VSCode extensions), and implements robust security measures to prevent unauthorized access to system resources."
freestylefly,mcp-server-weread,2.3,0.2,4.3,-1.29,[],MINIMAL,"mcp-server-weread is a TypeScript implementation that provides seamless integration between Claude Desktop and WeRead, a popular e-book platform. The server enables AI assistants to access book content, user highlights, and annotations through WeRead's API, with features for efficient cache management to improve performance. This implementation is particularly useful for research workflows, literature analysis, and knowledge management tasks where users need to reference or discuss book content with AI assistance."
varunneal,spotify-mcp,2.55,0.0,7.3,-2.19,[],MINIMAL,"This MCP server, developed by varunneal, provides integration between MCP clients and Spotify. Built on top of the Spotify API, it enables natural language control of Spotify playback, including starting, pausing, and skipping tracks. The server offers tools for searching and retrieving information about tracks, albums, artists, and playlists, as well as managing the Spotify queue. By bridging AI capabilities with Spotify's extensive music library and playback features, this implementation enhances music discovery and control through conversational interfaces. It is particularly useful for hands-free music management, AI-assisted playlist curation, and integrating music playback into broader AI-powered applications and workflows."
microsoft,mcp-server-bing-search,2.55,0.2,4.6,-1.38,[],MINIMAL,
microsoft,mcp-server-giphy,2.55,0.2,6.2,-1.8599999999999999,[],MINIMAL,"Search and Retrieve: Uses the GIPHY API to search for images based on a provided search term.
(Future) Sampling: Employs the MCP ""sampling"" feature to request the assistant to choose the most appropriate image for the context.
Integration: The selected GIPHY image and its metadata are returned to the original assistant tool call, enabling it to be included in assistant responses to users."
microsoft,mcp-server-open-deep-research,2.55,0.2,5.9,-1.7700000000000002,[],MINIMAL,"This is a Model Context Protocol (MCP) server that wraps the HuggingFace Open Deep Research project, built on their smolagents library, making the project available for use with MCP clients, such as AI assistants.

This is an early work-in-progress, has limited testing, and requires access to API's that will be replaced in the near future. For now, the following API keys are required to be set in the environment or in a .env file (see .env.example):

OpenAI API Key: https://platform.openai.com/
HuggingFace API Key: https://huggingface.co/
SERP API Key: https://serpapi.com/"
microsoft,mcp-server-vscode,2.55,0.2,6.6,-1.9799999999999998,[],MINIMAL,"The VSCode MCP Server is a VSCode extension that acts as a Model Context Protocol (MCP) server integrated directly within VSCode. Its primary purpose is to expose a coding diagnostic tool—namely, the code_checker—which aggregates diagnostic messages (similar to those displayed in VSCode’s Problems panel) and makes them accessible to an external AI assistant via Server-Sent Events (SSE). This allows your assistant to invoke MCP methods and retrieve timely diagnostic information from your workspace."
microsoft,mcp-server-word,2.55,0.2,0,-0.0,[],MINIMAL,"MCP Server for Interaction with Office Apps
This is a Model Context Protocol (MCP) server project.

Warning: Be VERY careful with open Word or PowerPoint apps. Your content may be unexpectedly modified or deleted.

"
strowk,mcp-k8s-go,2.4,0.2,7.3,-2.19,[],MINIMAL,"This Kubernetes MCP implementation, developed by strowk, provides a versatile interface for language models to interact with Kubernetes clusters. It enables AI agents to perform essential Kubernetes operations such as listing contexts, pods, and events, as well as retrieving pod logs across different namespaces and contexts. The implementation distinguishes itself by offering a dual-purpose design - functioning both as an MCP server and a library for building custom Kubernetes resource servers. By leveraging kubeconfig configurations, it ensures seamless integration with existing Kubernetes setups. This tool is particularly powerful for AI-driven Kubernetes management, debugging, and monitoring tasks, enabling more sophisticated AI assistants that can directly interact with and analyze Kubernetes environments. Its integration with Claude Desktop and straightforward installation process make it easily accessible for developers and DevOps professionals working on advanced AI projects involving Kubernetes automation and management."
quantgeekdev,docker-mcp,1.8,0.2,7.6,-2.2800000000000002,[],MINIMAL,"This Docker MCP server, developed by Alex Andru and Ali Sadykov, enables AI assistants to manage Docker containers and compose stacks through natural language. Built with Python, it provides tools for creating containers, deploying compose stacks, retrieving logs, and monitoring container status. The server leverages Docker's containerization capabilities, allowing AI models to orchestrate complex multi-container applications. Key features include seamless integration with Claude Desktop and a debugging interface for development. By bridging natural language processing with Docker operations, this implementation extends AI capabilities for tasks like application deployment, container management, and log analysis. It is particularly useful for scenarios requiring dynamic container orchestration, microservices management, and automated DevOps workflows in response to natural language instructions."
regenrek,deepwiki-mcp,2.4,0.2,7.4,-2.2199999999999998,[],MINIMAL,"DeepWiki MCP Server provides a specialized tool for converting DeepWiki repositories into Markdown format. Built by Kevin Kern, it crawls DeepWiki.com repositories, sanitizes the HTML content by removing headers, footers, navigation elements, and ads, then converts the cleaned content into well-formatted Markdown. The server supports both aggregate mode (single document) and pages mode (structured content), maintains functional links between pages, and implements domain safety restrictions to prevent phishing attempts. It's particularly valuable for developers and researchers who need to extract and reference DeepWiki documentation in Markdown-compatible environments."
tevonsb,homeassistant-mcp,1.9,0.5,7.8,-2.34,[],LOW,"This MCP server, developed by tevonsb, enables AI assistants like Claude to interact with Home Assistant smart home systems. Built in TypeScript, it provides capabilities for querying device states, controlling smart home devices, and accessing floor plans and area information. The implementation stands out by offering a standardized interface to Home Assistant's rich ecosystem of integrations and automations. By connecting AI capabilities with smart home functionality, this server allows AI systems to understand and control various aspects of a user's living space. It is particularly useful for voice-controlled smart home assistants, automated home management scenarios, and building context-aware AI applications that can respond to and influence the physical environment."
datalayer,jupyter-mcp-server,2.45,0.2,6.9,-2.0700000000000003,[],MINIMAL,"This Jupyter MCP server implementation, developed by Datalayer, provides a bridge between the Model Context Protocol (MCP) and Jupyter environments. It leverages Jupyter's kernel and notebook model clients to enable AI assistants to interact with Jupyter notebooks, execute code, and manipulate notebook content. The server is designed to run in a Docker container, making it easily deployable and scalable. It's particularly useful for data scientists and researchers who want to integrate AI-powered tools into their Jupyter workflows, enabling automated analysis, code generation, and interactive data exploration within notebook environments."
nwiizo,tfmcp,2.3,0.2,7.8,-2.34,[],MINIMAL,"tfmcp is a Rust-based MCP server for Terraform infrastructure management, providing AI-assisted tools for analyzing, initializing, planning, and applying Terraform configurations. Built by nwiizo, it enables seamless integration with Claude Desktop through a JSON-RPC 2.0 protocol, supporting operations like resource listing, configuration validation, and state management across different project environments."
alioshr,memory-bank-mcp,2.4,0.2,7.6,-2.2800000000000002,[],MINIMAL,"This Memory Bank MCP server implementation transforms traditional file-based memory banks into a centralized, remotely accessible service. Developed by Aliosh Pimenta, it enables multi-project memory bank management with consistent file structure and validation. The server provides full MCP protocol implementation for read/write operations, project listing, and file management. It ensures proper isolation between project memory banks and includes security features like path traversal prevention. The implementation is particularly useful for AI assistants and development teams requiring structured, remotely accessible project documentation and context management across multiple projects."
rafalwilinski,aws-mcp,2.1,0.0,6.4,-1.92,[],MINIMAL,"This AWS MCP server, developed by an unknown author, provides a bridge between AI assistants and AWS services using the AWS SDK v2. It implements credential management, profile selection, and region configuration to enable secure access to AWS resources. The server exposes tools for executing AWS-related code, listing available credentials, and selecting profiles. By abstracting AWS SDK interactions into a standardized MCP interface, it allows AI systems to perform a wide range of AWS operations, from basic resource management to complex data analysis. This implementation is particularly useful for scenarios requiring programmatic AWS access, cloud infrastructure management, or data processing using AWS services, facilitating use cases such as automated deployments, resource monitoring, and large-scale data analytics in the AWS ecosystem."
mzxrai,mcp-webresearch,1.95,0.2,7.2,-2.16,[],MINIMAL,"This MCP server, developed by mzxrai, enables AI assistants like Claude to perform real-time web research. It integrates Google search, webpage content extraction, and screenshot capture capabilities. The server maintains a research session tracking visited pages, search queries, and extracted content. It is designed for seamless integration with the Claude Desktop app on macOS and Windows. By bridging AI capabilities with live web data, this implementation empowers more informed and up-to-date conversations. It is particularly useful for scenarios requiring fact-checking, gathering current information on topics, or conducting multi-source research in AI-assisted writing, analysis, and decision-making tasks."
gongrzhe,gmail-mcp-server,2.55,0.0,7.8,-2.34,[],MINIMAL,"This Gmail AutoAuth MCP server, developed by gongrzhe, provides a standardized interface for AI assistants to interact with Gmail through natural language. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for sending emails, reading messages, searching emails, managing labels, and more. The server implements OAuth2 authentication with auto browser launch, supporting both desktop and web application credentials. By abstracting Gmail API operations and handling authentication complexities, it enables AI systems to easily manage email communications. This implementation is particularly valuable for applications requiring programmatic email access, facilitating use cases such as automated email management, intelligent email filtering, and AI-driven communication assistance."
doobidoo,mcp-memory-service,2.55,0.5,7.8,-2.34,['Found pattern: collect.*data'],LOW,"This MCP implementation, built with Python, provides a versatile framework for integrating with ChromaDB, a vector database for AI applications. It utilizes sentence transformers for efficient text embedding and tokenization, enabling advanced natural language processing capabilities. The implementation supports websocket connections, allowing for real-time data exchange and updates. By combining these technologies, it offers a robust solution for building AI-powered applications that require semantic search, document similarity comparisons, and content recommendation systems. This implementation is particularly well-suited for use cases such as intelligent document retrieval, content categorization, and personalized information delivery across various domains."
evalstate,mcp-hfspace,2.55,0.4,7.6,-2.2800000000000002,[],LOW,"This MCP server, developed by evalstate, enables AI assistants to seamlessly interact with Hugging Face Spaces. It provides a streamlined setup process where users simply specify desired spaces as arguments, with the server automatically configuring appropriate endpoints. Built for integration with Claude Desktop, it offers capabilities like image generation, vision tasks, text-to-speech, and more through various pre-configured spaces. The implementation handles authentication, file management, and API interactions, abstracting away complexities of working with Hugging Face. It is particularly useful for developers and researchers who want to leverage diverse AI models and tools from Hugging Face Spaces without manual configuration, enabling rapid prototyping and experimentation across a wide range of AI tasks."
mark3labs,mcp-filesystem-server,2.4,0.2,6.1,-1.83,[],MINIMAL,"This filesystem MCP server, developed by mark3labs, provides a secure interface for language models to interact with local filesystems. It enables AI agents to read, write, search, and manipulate files and directories through a controlled API. By restricting operations to specified directories, it maintains data security while allowing AI systems to work with file-based data and content. The server integrates with Claude Desktop and can be run standalone, offering deployment flexibility. This implementation is particularly useful for AI assistants designed to manage documents, analyze local datasets, or automate file organization tasks using the local filesystem as a backend."
loopwork-ai,emcee,2.2,0.4,7.8,-2.34,[],LOW,"Emcee is a CLI tool that creates Model Context Protocol servers from OpenAPI specifications, enabling AI assistants to interact with REST APIs through JSON-RPC. Developed by Loopwork AI, it processes an OpenAPI spec (from a file, URL, or stdin) and automatically generates tools that map to API endpoints, handling authentication, parameter validation, and response formatting. The tool supports various authentication methods including Bearer tokens and Basic auth, with secure 1Password integration for credential management. Emcee is particularly useful for quickly exposing existing APIs to Claude Desktop and other MCP-compatible assistants without writing custom integration code."
hyperdrive-eng,mcp-nodejs-debugger,2.2,0.5,6.5,-1.9500000000000002,[],LOW,"MCP NodeJS Debugger connects Claude Code to Node.js's built-in Inspector Protocol, enabling real-time debugging capabilities directly within AI conversations. Developed by Hyperdrive, this tool allows users to set breakpoints, inspect variables, evaluate expressions, and step through code execution while a Node.js application is running in debug mode. The implementation includes continuous connection retry logic and comprehensive runtime state analysis features, making it particularly valuable for troubleshooting issues, understanding application behavior, and testing potential fixes without leaving the Claude interface."
dmontgomery40,deepseek-mcp-server,1.9,0.4,7.6,-2.2800000000000002,[],LOW,"This DeepSeek MCP server, developed by David Montgomery, enables seamless integration of DeepSeek's advanced language models with MCP-compatible applications like Claude Desktop. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a chat completion tool with customizable parameters such as model selection, temperature control, and token limits. The implementation focuses on simplifying access to DeepSeek's powerful AI capabilities through a standardized interface. It's particularly useful for developers and researchers looking to incorporate state-of-the-art language models into their applications without dealing directly with DeepSeek's API intricacies, enabling use cases like AI-assisted writing, code generation, and complex reasoning tasks."
mcpdotdirect,evm-mcp-server,2.35,0.2,7.8,-2.34,[],MINIMAL,"EVM-MCP-Server provides a bridge between AI assistants and Ethereum Virtual Machine (EVM) compatible blockchains through the Model Context Protocol. Built by mcpdotdirect, it enables interaction with multiple networks including Ethereum, Optimism, Arbitrum, and Base, offering tools for querying blockchain data, transferring tokens (ETH, ERC20, ERC721, ERC1155), reading smart contracts, and resolving ENS names. The server can run in both stdio mode for direct integration and HTTP mode with SSE support, making it flexible for various deployment scenarios while maintaining secure handling of private keys for transaction signing."
leonardsellem,n8n-mcp-server,2.35,0.2,7.5,-2.25,[],MINIMAL,"n8n MCP Server provides a bridge between AI assistants and n8n workflow automation through the Model Context Protocol. It offers tools for managing workflows (listing, creating, updating, activating) and executions, along with resources for accessing workflow data. Built with TypeScript and using the MCP SDK, it authenticates with n8n via API keys and follows a layered architecture that separates API client, tools, and resources. This implementation is particularly valuable for users who want to automate tasks, monitor workflow executions, or integrate n8n capabilities directly within AI assistant conversations."
base,base-mcp,2.45,0.4,7.8,-2.34,[],LOW,"This MCP server provides onchain tools for Claude AI to interact with the Base blockchain and Coinbase API. Developed by Dan Schlabach and Tina He, it enables operations like retrieving wallet addresses, getting testnet ETH, listing balances, transferring funds, and deploying smart contracts. The implementation uses TypeScript and leverages the Coinbase SDK to facilitate blockchain interactions, making it valuable for users who want to perform cryptocurrency operations or smart contract deployments directly through Claude."
yanxingliu,dify-mcp-server,2.3,0.4,6.3,-1.8900000000000001,[],LOW,"This Dify MCP server, developed by an unnamed creator, integrates with the Dify API to enable AI-driven workflow execution through the Model Context Protocol. Built with Python and leveraging libraries like httpx and mcp, it provides tools for interacting with Dify workflows and applications. The server implements environment-based configuration for flexible API key management. By abstracting Dify API interactions into a standardized MCP interface, it enables AI systems to easily trigger and manage Dify workflows and applications. This implementation is valuable for applications requiring programmatic access to Dify capabilities, facilitating use cases such as automated task execution, multi-step data processing, and AI-driven decision making across various domains."
r-huijts,xcode-mcp-server,2.3,0.2,7.8,-2.34,[],MINIMAL,"This Xcode MCP server, developed by R. Huijts, provides a streamlined interface for AI assistants to interact with Xcode projects and iOS development workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing Xcode projects, automating build processes, and facilitating code generation. The implementation focuses on simplifying complex Xcode operations, making it accessible for AI models to assist in iOS app development tasks. It's particularly useful for automating repetitive development tasks, generating boilerplate code, or providing intelligent suggestions during iOS app creation, enabling AI assistants to contribute to Xcode projects without requiring deep knowledge of the IDE's intricacies."
cyberchitta,llm-context.py,2.4,0.2,7.5,-2.25,[],MINIMAL,"This LLM Context MCP server, developed by restlessronin, streamlines the process of sharing code context with Large Language Models. Built with Python using the Model Context Protocol SDK, it offers features like profile-based customization, code outlining, and integration with both MCP and clipboard for easy switching between tasks such as code review and documentation. The server implements smart file selection using .gitignore patterns and supports multiple programming languages. By abstracting the complexities of context generation, it enables AI systems to easily analyze and work with codebases. This implementation is particularly valuable for developers and teams requiring efficient code-related interactions with LLMs, facilitating use cases such as code reviews, documentation generation, and codebase analysis across various programming languages and project structures."
nspady,google-calendar-mcp,2.45,0.0,7.6,-2.2800000000000002,[],MINIMAL,"This Google Calendar MCP server enables AI assistants to interact with users' Google Calendar data. Developed as an open-source project, it provides a TypeScript-based interface for querying events, creating appointments, and managing calendars through natural language. The implementation leverages the Google Calendar API and OAuth 2.0 for secure authentication. It's designed for scenarios requiring AI-assisted calendar management, such as scheduling meetings, analyzing time usage, or integrating calendar functionality into conversational AI applications. The server is particularly useful for productivity-focused AI assistants or developers building tools to streamline calendar operations through natural language interfaces."
shopify,dev-mcp,2.4,0.2,6.2,-1.8599999999999999,[],MINIMAL,"A Shopify MCP server implementation that provides access to Shopify's developer resources, including API documentation, tutorials, and guides."
adhikasp,mcp-git-ingest,1.9,0.2,6.8,-2.04,[],MINIMAL,"This MCP server, developed by adhikasp, enables AI assistants like Claude to fetch and analyze GitHub repository structures and contents. Built in Python, it provides capabilities for cloning repositories, generating directory trees, and reading specified files. The implementation stands out by offering deterministic temporary directory creation, Unicode tree representation, and flexible file reading with robust error handling. By connecting AI capabilities with GitHub's vast ecosystem of code repositories, this server allows AI systems to explore codebases, analyze project structures, and access important files programmatically. It is particularly useful for building AI-powered code analysis tools, automated documentation generators, and intelligent assistants for software development workflows that need to interact with GitHub repositories."
enescinr,twitter-mcp,1.7,0.2,7.2,-2.16,[],MINIMAL,"This MCP server, developed by Enes Çınar, enables AI assistants to interact with Twitter through the Twitter API. Built with TypeScript and Node.js, it allows posting tweets and searching for tweets via simple function calls. The implementation integrates seamlessly with Claude Desktop, providing a straightforward interface for Twitter interactions. By connecting AI capabilities with Twitter's social media platform, this server enables AI systems to analyze social trends, engage with users, and disseminate information. It is particularly useful for scenarios like social media monitoring, automated customer engagement, and building AI assistants that can understand and contribute to real-time public discourse on Twitter."
nighttrek,software-planning-mcp,2.1,0.2,7.1,-2.13,[],MINIMAL,"Software Planning MCP is a tool that helps developers break down software goals into actionable implementation plans through a structured, question-based approach. Developed by Daniel Steigman, it guides users through a sequential thinking process to understand requirements, analyze technical considerations, and develop detailed task lists with complexity scores and code examples. The server stores goals and implementation plans locally, provides tools for managing todos, and uses a sophisticated parsing system to convert natural language plans into structured task items. Particularly valuable for developers who want to systematically approach complex software projects without losing track of implementation details."
mordavid,bloodhound-mcp-ai,2.3,0.2,7.0,-2.0999999999999996,[],MINIMAL,"BloodHound-MCP is a Python-based server that integrates with the BloodHound security tool to enable AI assistants to analyze Active Directory and Azure environments for security vulnerabilities. It connects to Neo4j databases containing BloodHound data and provides over 60 specialized tools for identifying attack paths, privilege escalation opportunities, certificate vulnerabilities, and security misconfigurations. The implementation supports both on-premises Active Directory and Azure/Entra ID environments, making it particularly valuable for security professionals conducting threat hunting, penetration testing, or security assessments who need AI assistance in analyzing complex network relationships and identifying potential security weaknesses."
coleam00,mcp-mem0,2.45,0.4,6.8,-2.04,[],LOW,"MCP-Mem0 is a server implementation that integrates Mem0's long-term memory capabilities with AI agents through the Model Context Protocol. Developed by Cole Medin, it provides three essential memory management tools: storing information with semantic indexing, retrieving all stored memories, and finding relevant memories using semantic search. The server supports multiple LLM providers (OpenAI, OpenRouter, Ollama) and uses PostgreSQL for vector storage, making it particularly valuable for applications requiring persistent memory across conversations, such as personal assistants, knowledge management systems, or any AI agent that needs to recall past interactions and information."
armorwallet,armor-crypto-mcp,2.4,0.5,7.0,-2.0999999999999996,['Found pattern: tracking'],LOW,"Armor Crypto MCP provides AI assistants with direct access to blockchain operations, crypto trading, and wallet management through the Armor Wallet API. This server exposes a comprehensive suite of tools for creating and managing wallets, checking token balances, executing swaps, setting up DCA (Dollar Cost Averaging) orders, and transferring tokens across different blockchains. Built with FastMCP, it authenticates via JWT tokens and includes detailed logging for all operations, making it particularly valuable for users who want their AI assistants to monitor crypto portfolios, execute trading strategies, or manage multiple wallets without leaving the conversation interface."
rafalwilinski,mcp-apple-notes,1.8,0.2,6.7,-2.0100000000000002,[],MINIMAL,"This MCP server, developed by RafalWilinski, enables AI assistants like Claude to search and reference Apple Notes during conversations. Built in TypeScript, it provides semantic search capabilities using on-device embeddings and vector storage with LanceDB. The implementation stands out by offering native Apple Notes integration via JXA and fully local execution without API keys. By connecting AI capabilities with personal note content, this server allows AI systems to retrieve relevant information from a user's Apple Notes. It is particularly useful for building AI-powered tools that require context from personal notes, such as task planning, information retrieval, and knowledge management applications."
gyoridavid,short-video-maker,1.85,0.4,7.8,-2.34,[],LOW,"Short Video Maker is an automated video creation tool that generates short-form content for platforms like TikTok, Instagram Reels, and YouTube Shorts. Built by David Gyori, it combines text-to-speech (Kokoro), automatic caption generation (Whisper), background video selection (Pexels API), and music to create professional-looking videos from simple text inputs. The implementation exposes both REST API and Model Context Protocol endpoints, allowing AI assistants to generate videos by providing scenes with text and search terms. It features Docker support with CPU and CUDA variants, making it accessible for users with different hardware capabilities while maintaining memory efficiency."
kiliczsh,mcp-mongo-server,2.4,0.2,7.6,-2.2800000000000002,[],MINIMAL,"This MCP server, developed by kiliczsh, provides AI assistants like Claude with read-only access to MongoDB databases. It offers tools for querying collections, retrieving schema information, and executing aggregations. The server integrates seamlessly with Claude Desktop on both macOS and Windows, enabling AI-powered data analysis and insights. By bridging AI capabilities with MongoDB's flexible document model, this implementation facilitates natural language interactions with complex datasets. It is particularly useful for scenarios requiring data exploration, schema analysis, or generating insights from MongoDB-stored data in AI-assisted research, reporting, and decision-making applications."
vivekvells,mcp-pandoc,1.8,0.2,7.8,-2.34,[],MINIMAL,"This MCP server, developed by Vivek Vells, provides document format conversion using Pandoc. It exposes tools to transform content between formats like plain text, Markdown, and HTML while preserving structure and formatting. By leveraging the Pandoc Python package, this implementation enables AI assistants to seamlessly convert documents without requiring complex setup. It is particularly useful for scenarios involving document processing, content migration, or generating formatted outputs from raw text inputs. The server is designed for easy integration into AI workflows and is actively being expanded to support additional formats like PDF."
jacck,mcp-reasoner,1.8,0.8,5.1,-1.53,['Found pattern: tracking'],HIGH,"This MCP reasoner, developed by Jacck, provides a systematic approach to problem-solving using beam search and thought evaluation. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers capabilities for exploring multiple solution paths, scoring thoughts, and managing tree-based reasoning states. The reasoner implements a configurable beam width, depth-limited search, and statistical analysis of the reasoning process. It's designed for tackling complex problems that require step-by-step analysis, such as mathematical puzzles, logical deductions, and multi-stage planning tasks. This implementation is particularly valuable for enhancing AI assistants' problem-solving abilities in scenarios requiring structured thinking and exploration of multiple solution strategies."
runekaagaard,mcp-alchemy,2.4,0.2,7.8,-2.34,[],MINIMAL,"MCP Alchemy, developed by Rune Kaagaard, provides a seamless interface between Claude Desktop and SQL databases. Built with Python and SQLAlchemy, it enables AI systems to directly query and analyze data from PostgreSQL, MySQL, MariaDB, SQLite, and other SQLAlchemy-compatible databases. The implementation offers tools for database exploration, query assistance, and data analysis, with features like smart result truncation and integration with claude-local-files for handling large datasets. By abstracting database interactions into an MCP interface, it allows AI assistants to act as database experts, facilitating use cases such as data exploration, SQL query writing, relationship mapping, and comprehensive data analysis across various database engines."
disler,just-prompt,2.45,0.4,7.6,-2.2800000000000002,[],LOW,"Just Prompt is a lightweight MCP server that provides a unified interface to multiple LLM providers including OpenAI, Anthropic, Google Gemini, Groq, DeepSeek, and Ollama. It offers tools for sending prompts to multiple models in parallel, automatic model name correction, and saving responses to files. The implementation supports provider shorthand notation, thinking tokens for Claude models, and includes comprehensive test coverage for all providers. Ideal for developers who need to interact with multiple LLM APIs through a single, consistent interface."
anton10xr,gibber-mcp,2.0,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This MCP server implementation provides cryptographic tools for secure communication, including key pair generation, shared secret derivation, and message encryption/decryption using SJCL P-256 and AES-CCM. Built with Express.js and TypeScript, it offers real-time communication via server-sent events (SSE). The server is designed for applications requiring end-to-end encryption and secure data exchange between AI models and external tools."
rectalogic,langchain-mcp,2.2,0.4,5.0,-1.5,[],LOW,"This LangChain integration, developed by rectalogic, enables AI assistants (powered by LangChain) to leverage Model Context Protocol (MCP) tools within the LangChain framework. It provides an MCPToolkit class that wraps an MCP ClientSession, allowing seamless incorporation of MCP capabilities into LangChain workflows. Built in Python, the implementation abstracts away the complexities of MCP communication, presenting tools as standard LangChain BaseTools. By bridging LangChain's flexible architecture with MCP's extensible toolset, this integration enhances AI models' ability to interact with external services and data sources. It is particularly useful for developers already using LangChain who want to expand their AI applications' capabilities with MCP-compatible tools without significant changes to their existing codebase."
abhiz123,todoist-mcp-server,2.3,0.4,7.0,-2.0999999999999996,[],LOW,"This MCP server, developed by abhiz123, enables natural language task management in Todoist through AI assistants like Claude. It provides tools for creating, retrieving, updating, completing, and deleting tasks using conversational language. The server leverages Todoist's API to translate natural language commands into precise Todoist operations, supporting features like smart task search, flexible filtering, and rich task details. By bridging AI capabilities with Todoist's task management system, this implementation enhances productivity workflows, allowing users to manage their tasks more intuitively. It is particularly useful for scenarios requiring hands-free task management, quick capture of ideas, or AI-assisted organization of complex projects within Todoist."
chemiguel23,memorymesh,1.9,0.2,7.6,-2.2800000000000002,[],MINIMAL,"MemoryMesh, developed by CheMiguel23, is a local knowledge graph server that enables AI assistants like Claude to store, update, and recall structured information. It features dynamic schema-based tools, relationship modeling, and AI-aware interfaces for maintaining consistent data. Built on the Knowledge Graph Memory Server from MCP, MemoryMesh adds custom schemas, metadata expansion, and event tracking. It integrates seamlessly with Claude Desktop on macOS and Windows, facilitating natural language interactions for world-building and storytelling. While originally designed for text-based RPG scenarios, MemoryMesh is adaptable for social networks, organizational planning, or other structured data use cases requiring persistent information management and retrieval in AI-assisted creative and analytical tasks."
dainfernalcoder,perplexity-mcp,2.2,0.4,6.7,-2.0100000000000002,[],LOW,"This MCP server, developed by DaInfernalCoder, leverages the Perplexity Sonar Pro API to provide AI-powered research assistance within the Cline development environment. Built with TypeScript and utilizing the Model Context Protocol SDK, it offers tools for general search queries, documentation retrieval, API discovery, and deprecated code analysis. The implementation focuses on enhancing developer productivity by integrating up-to-date information and code insights directly into the workflow. It's particularly useful for developers seeking real-time assistance with documentation, API integration, and code modernization, enabling use cases such as efficient library adoption, API evaluation, and codebase maintenance without leaving their development environment."
inditextech,mcp-teams-server,2.3,0.2,7.2,-2.16,[],MINIMAL,"MCP Teams Server provides integration with Microsoft Teams, enabling AI assistants to interact with Teams channels through a standardized protocol. Developed by InditexTech, this Python implementation allows reading messages, creating threads, replying to messages, and mentioning team members. The server connects to Teams using Azure bot credentials and exposes functionality through a Docker container or local installation. It's particularly valuable for collaborative workflows where AI assistants need to monitor team communications, post updates to channels, or participate in threaded discussions without requiring users to switch contexts."
makafeli,n8n-workflow-builder,2.15,0.2,7.6,-2.2800000000000002,[],MINIMAL,"This n8n Workflow Builder MCP server, developed by an unnamed author, provides a programmatic interface for creating and managing n8n workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for defining nodes, connections, and workflow specifications. The implementation focuses on simplifying the creation of complex automation workflows, making it accessible for AI assistants or applications needing to generate n8n configurations. It's particularly useful for tasks like automated workflow generation, template creation, or integrating n8n capabilities into AI-driven systems, enabling programmatic workflow management without requiring deep knowledge of n8n's internal structures."
kimtaeyoon83,mcp-server-youtube-transcript,2.1,0.2,7.5,-2.25,[],MINIMAL,"This YouTube transcript extraction MCP server, developed by kimtaeyoon83, provides a streamlined interface for retrieving captions and subtitles from YouTube videos. It supports multiple video URL formats and offers language-specific transcript retrieval, making it versatile for various content analysis tasks. The server features error handling, including validation of input parameters, graceful handling of YouTube API errors, and implementation of timeouts. It's particularly useful for AI-driven content analysis, automated video summarization, and accessibility enhancement projects. Its ability to provide detailed metadata along with transcripts enhances its utility for comprehensive video content analysis."
automata-labs-team,mcp-server-playwright,1.9,0.2,6.4,-1.92,[],MINIMAL,"This Playwright-based MCP implementation, developed by Automata Labs, provides a robust interface between language models and web browsers. It enables AI agents to perform a comprehensive range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution in real browser environments. The implementation distinguishes itself by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Playwright's cross-browser support, it ensures compatibility across major browsers. This tool is particularly powerful for AI-driven web testing, data scraping, and automated web interactions, enabling more sophisticated AI assistants that can directly manipulate web applications. Its integration with Claude Desktop and npm-based installation process make it easily accessible for developers and researchers working on advanced AI projects."
danhilse,notion_mcp,1.95,0.4,7.5,-2.25,[],LOW,"This MCP server, developed by Dan Hilse, enables AI assistants like Claude to interact with a personal Notion todo list. Built in Python, it provides a minimalist interface for managing tasks with just three properties: task name, scheduling (today/later), and completion status. The implementation integrates with the Notion API to add, view, and update todos in a specific database structure. By connecting AI capabilities with a streamlined task management system, this server enables AI assistants to help organize daily activities and track personal productivity. It is particularly useful for individuals seeking a simple, AI-augmented todo list without complex features, prioritizing ease of use and quick task entry over advanced project management functionality."
shaneholloman,mcp-knowledge-graph,2.45,0.2,6.7,-2.0100000000000002,[],MINIMAL,"This knowledge graph MCP server, developed by Anthropic, enables persistent memory for AI assistants through a local graph database. It provides tools for creating, querying, and manipulating entities and relationships, allowing assistants to build and maintain structured knowledge about users and contexts across conversations. The implementation uses TypeScript and file-based storage, with a customizable memory path for flexibility. It's designed for enhancing AI personalization and context retention in applications like chatbots, virtual assistants, or any scenario requiring long-term information persistence and retrieval in natural language interactions."
dbt-labs,dbt-mcp,2.4,0.0,6.9,-2.0700000000000003,[],MINIMAL,"dbt-MCP server provides a bridge between AI assistants and dbt (data build tool) resources, enabling interaction with data models, metrics, and transformations. Built by dbt Labs, it offers tools for executing dbt CLI commands, discovering metadata about models, and querying the dbt Semantic Layer. The server supports local dbt project operations, metadata retrieval from dbt Cloud, and metric querying capabilities, making it valuable for data analysts and engineers who want to explore, analyze, and manage their data transformations through natural language interfaces without manually navigating dbt's command line or web interface."
disler,aider-mcp-server,2.35,0.2,7.8,-2.34,[],MINIMAL,"Aider MCP Server enables Claude Code to offload AI coding tasks to Aider, reducing costs and enhancing development efficiency. The server exposes two main tools: aider_ai_code for implementing code changes based on natural language prompts, and list_models for discovering available AI models. By delegating specific coding tasks to Aider while maintaining Claude Code for orchestration and review, developers gain more control over their AI coding workflow and can leverage different models for different aspects of development."
sshtunnelvision,mcp-logo-gen,2.1,0.4,7.1,-2.13,[],LOW,"This MCP server implementation provides image generation capabilities using the FAL AI service. It offers a tool for generating images from text prompts, leveraging models like 'fal-ai/recraft-v3'. The server is built using FastAPI and includes features such as Server-Sent Events (SSE) for real-time communication. It's designed for use cases requiring AI-powered image creation, such as content generation or visual design assistance."
razorpay,razorpay-mcp-server,2.4,0.2,7.6,-2.2800000000000002,[],MINIMAL,"Razorpay MCP Server provides a bridge between AI assistants and Razorpay's payment processing APIs, enabling seamless integration for payment operations. Built with Go, it exposes tools for managing payments, payment links, and orders through a clean abstraction layer over the Model Context Protocol. The server supports multiple transport mechanisms, features comprehensive logging, and includes a read-only mode for enhanced security. It's containerized for easy deployment in various environments including Claude Desktop and VS Code, making it particularly valuable for developers building AI-powered applications that need to interact with Razorpay's payment ecosystem without writing complex integration code."
crystaldba,postgres-mcp,2.4,0.2,7.8,-2.34,[],MINIMAL,"PostgreSQL MCP is a database tuning and analysis tool that provides real-time insights into PostgreSQL performance. It offers tools for analyzing query execution plans, identifying slow queries, monitoring database health metrics, and recommending index optimizations. The server implements features like hypothetical index testing, transaction health monitoring, and buffer cache analysis, making it valuable for database administrators and developers who need to optimize query performance, troubleshoot bottlenecks, or maintain healthy PostgreSQL databases. Built with Python 3.12 and packaged as a Docker container, it supports both PostgreSQL 15 and 16 with a focus on read-only safety through restricted access modes."
hannesrudolph,mcp-ragdocs,1.8,0.4,6.2,-1.8599999999999999,[],LOW,"This MCP server, developed by Hannes Rudolph, enables AI assistants to augment their responses with relevant documentation context through vector-based search and retrieval. Built as a fork of qpd-v's original implementation, it integrates with OpenAI for embeddings generation and Qdrant for vector storage. The server provides tools for adding documentation from URLs, performing semantic searches, extracting links, and managing a processing queue. By connecting AI capabilities with efficient vector search of documentation, this implementation allows AI systems to enhance their knowledge with domain-specific information in real-time. It is particularly useful for building documentation-aware AI assistants, implementing semantic documentation search, and creating context-aware developer tools that require access to up-to-date technical information."
ericzakariasson,uber-eats-mcp-server,2.0,0.2,5.1,-1.53,[],MINIMAL,"This MCP server implementation provides a bridge to Uber Eats, enabling AI assistants to search for restaurants, find menu options, and place food orders. Built using Python and the FastMCP framework, it leverages browser automation to interact with the Uber Eats website. The server offers asynchronous operations for searching and ordering, making it suitable for use cases requiring food delivery integration within AI-assisted applications."
simonb97,win-cli-mcp-server,2.0,0.2,6.8,-2.04,[],MINIMAL,"This Windows CLI MCP server, developed by SimonB97, enables secure command-line interactions on Windows systems for AI assistants like Claude Desktop. Built with TypeScript, it provides controlled access to PowerShell, CMD, and Git Bash shells, as well as remote systems via SSH. The server implements robust security controls including command blocking, working directory validation, and injection protection. Its configuration system allows fine-tuning of allowed operations, paths, and SSH connections. By extending AI capabilities to local and remote command-line environments, this implementation is particularly useful for tasks involving system administration, development workflows, and secure remote management while maintaining strict control over permitted actions."
joshrutkowski,applescript-mcp,2.3,0.2,7.8,-2.34,[],MINIMAL,"This AppleScript MCP framework, developed by Josh Rutkowski, enables seamless integration of AppleScript capabilities with the Model Context Protocol. It leverages TypeScript and the MCP SDK to provide a robust interface for interacting with macOS applications and system functions through natural language. The implementation is designed for developers looking to incorporate AI-driven automation and control of macOS environments, making it particularly useful for creating intelligent assistants, workflow automation tools, or AI-enhanced macOS applications. Its focus on AppleScript integration sets it apart by offering unique access to macOS-specific functionality within the MCP ecosystem."
negokaz,excel-mcp-server,1.7,0.2,5.4,-1.62,[],MINIMAL,"This Excel MCP server, developed by Kazuki Negoro, provides a bridge between Model Context Protocol and Microsoft Excel files. It enables reading and writing of spreadsheet data, specifically focusing on text values in xlsx format files. The implementation is designed for Node.js environments and leverages libraries like exceljs for Excel file manipulation. It's particularly useful for scenarios where AI assistants or other MCP-compatible clients need to interact with structured data stored in Excel spreadsheets, such as data analysis, report generation, or automated spreadsheet updates based on AI-driven insights."
adhikasp,mcp-twikit,2.1,0.2,6.4,-1.92,[],MINIMAL,"This MCP server, developed by adhikasp, integrates with Twitter's API to enable AI assistants to interact with the social media platform. It provides tools for searching tweets, retrieving timelines, and analyzing sentiment across multiple accounts. The server stands out by offering a simplified interface for complex Twitter operations, making it easier for AI systems to process and respond to social media data. By connecting AI capabilities with Twitter's vast user-generated content, this implementation empowers AI assistants to handle tasks like social media monitoring, trend analysis, and customer sentiment tracking. It is particularly useful for applications in brand management, market research, or any scenario where an AI system needs to work with real-time social media data."
automata-labs-team,code-sandbox-mcp,2.2,0.2,7.7,-2.31,[],MINIMAL,"This MCP implementation, developed by Automata Labs, provides a sandboxed code execution environment for AI agents. Built with Go and leveraging Docker, it offers secure code running capabilities across multiple languages. The implementation focuses on safety and isolation, with features like resource limits and network restrictions. It integrates seamlessly with Claude Desktop and other AI applications through a standardized interface. Particularly useful for developers and researchers working on AI-assisted coding tasks, it enables use cases such as code generation, debugging, and automated testing without exposing the underlying system to potential security risks."
freepeak,db-mcp-server,2.3,0.2,7.6,-2.2800000000000002,[],MINIMAL,"DB-MCP-Server provides a database connectivity layer for AI assistants through the Model Context Protocol, enabling direct interaction with MySQL and PostgreSQL databases. Built in Go, it supports both local stdio and production SSE transport modes, with configurable database connections through environment variables. The server can be deployed using Docker for easy integration into existing workflows, making it ideal for AI applications that need to query, analyze, or manipulate structured data stored in relational databases without requiring separate database access tools."
open-strategy-partners,osp_marketing_tools,2.3,0.2,7.8,-2.34,[],MINIMAL,"## Editing Codes 
A standardized system of codes for editing text.

## Writing Guide
OSP's guidelines and protocols for effective writing.

## Meta Information Guide 
A system to generate web-friendly titles and URLs.

## Value Map Positioning Guide
A framework for creating compelling product communications and positioning."
inditextech,mcp-server-simulator-ios-idb,2.3,0.2,7.8,-2.34,[],MINIMAL,"A Model Context Protocol server for iOS simulator automation via Facebook's IDB tool, enabling AI assistants to control iOS simulators using natural language commands. Developed by Inditex Tech, this TypeScript implementation provides a comprehensive command system for managing simulator sessions, launching apps, capturing screenshots, and performing UI interactions. The architecture includes a natural language parser that converts instructions into structured commands, an orchestrator that manages command execution, and an IDB manager that interfaces with the iOS simulator. This server is particularly useful for automated testing of iOS applications, UI validation, and creating interactive demos without requiring direct access to physical devices."
manusa,kubernetes-mcp-server,2.4,0.2,7.8,-2.34,[],MINIMAL,"Powerful and flexible Kubernetes MCP server implementation.
Provides features to perform both, low-level and high-level operations on Kubernetes and OpenShift.
Lower level features include performing CRUD operations on any Kubernetes or OpenShift resource.
Higher level features include abstractions to run and deploy container images and exposing them. This is helpful for smaller models which don't have enough context to generate complete and valid Kubernetes resources."
samuelgursky,davinci-resolve-mcp,2.2,0.2,7.6,-2.2800000000000002,[],MINIMAL,"A Python-based MCP server for DaVinci Resolve that provides programmatic access to video editing, color grading, and media management functions. Created by Samuel Gursky, this implementation enables developers and editors to automate complex workflows in DaVinci Resolve through a flexible scripting interface, supporting operations like timeline manipulation, clip analysis, color correction, and media pool management."
stevenyu113228,bloodhound-mcp,2.2,0.2,6.0,-1.7999999999999998,[],MINIMAL,"BloodHound MCP enables Large Language Models to interact with Active Directory and Azure Active Directory environments through natural language queries. By connecting to a Neo4j database containing BloodHound data, this implementation allows users to perform complex security analysis without writing Cypher queries manually. The server leverages the MCP protocol to translate conversational commands into database operations, making it particularly valuable for security professionals who need to quickly identify attack paths, permission issues, or vulnerabilities in their directory services through intuitive language-based interactions."
elsejj,mcp-cn-a-stock,2.3,0.2,2.3,-0.69,[],MINIMAL,"A specialized MCP server for Chinese stock market data analysis, providing tools to retrieve detailed stock information across different levels of depth (brief, medium, full). Built to integrate with a custom data feed system, it enables AI assistants to fetch comprehensive stock data including basic metrics, trading information, financial details, and technical analysis through a standardized interface."
vast-ai-research,tripo-mcp,2.3,0.4,4.7,-1.4100000000000001,[],LOW,"Tripo MCP provides a bridge between AI assistants and the Tripo 3D generation API, enabling the creation and manipulation of 3D models directly within conversation interfaces. Developed by VAST-AI-Research, this server implementation allows users to generate 3D assets from text descriptions, import models into Blender, and perform various operations on 3D objects through the Blender addon integration. The server exposes tools for creating models from text prompts, checking task status, importing GLB files, and manipulating scene objects - making it particularly valuable for 3D content creation workflows where users need to quickly prototype and visualize concepts without switching between applications."
matthewdailey,figma-mcp,1.7,0.4,7.0,-2.0999999999999996,[],LOW,"This MCP server, developed by Matthew Dailey, enables AI assistants to interact with Figma design files through the Figma REST API. Built in TypeScript, it allows adding Figma files to conversations, viewing nodes, reading and posting comments. The implementation integrates seamlessly with Claude Desktop and stands out by providing a direct bridge between AI models and Figma's collaborative design platform. By connecting AI capabilities with Figma's extensive design ecosystem, this server enables AI systems to analyze designs, provide feedback, and assist in the design process. It is particularly useful for scenarios like design reviews, generating design suggestions, and building AI assistants that can understand and contribute to visual design workflows."
recursechat,mcp-server-apple-shortcuts,1.8,0.2,5.9,-1.7700000000000002,[],MINIMAL,"This MCP server, developed by recursechat, enables AI assistants like Claude to control Apple Shortcuts automations on macOS. Built with Node.js, it allows listing available shortcuts and running them by name with optional input parameters. The implementation provides a simple interface for automation control, integrating seamlessly with Claude Desktop. By connecting AI capabilities with Apple's powerful Shortcuts app, this server enables AI systems to trigger complex automations and perform tasks on macOS. It is particularly useful for scenarios like hands-free device control, automated workflow execution, and building AI assistants that can interact with and control macOS applications and system functions."
mem0ai,mem0-mcp,2.2,0.4,6.8,-2.04,[],LOW,"Mem0-MCP provides a structured approach for managing coding preferences through an MCP server that integrates with mem0.ai. Built with Python using the FastMCP framework, it offers three main tools: adding coding preferences with comprehensive context, retrieving all stored preferences, and semantically searching through preferences to find relevant code implementations, solutions, and documentation. The server runs as a persistent process that agents can connect to via SSE, making it ideal for cloud-native environments where server and clients operate as decoupled processes. This implementation is particularly valuable for developers using Cursor who need efficient storage and retrieval of code snippets and programming knowledge."
egoist,fetch-mcp,2.2,0.2,4.3,-1.29,[],MINIMAL,"Fetch-MCP provides a server for retrieving web content and YouTube video transcripts through two specialized tools. The implementation fetches URLs and converts HTML to Markdown by default, with options to return raw HTML or limit content length. It also extracts YouTube video transcripts with timestamps, making it useful for AI assistants that need to reference web content or video information. Built with TypeScript using the Model Context Protocol SDK, it supports both stdio and SSE server modes for flexible integration options."
mamertofabian,mcp-everything-search,1.8,0.2,7.4,-2.2199999999999998,[],MINIMAL,"This MCP server, developed by Mamerto Fabian, enables AI assistants to perform fast file searches using the Everything SDK on Windows systems. It provides a tool for executing complex file queries with support for wildcards, boolean operators, and various search criteria like file size, dates, and attributes. The server abstracts the Everything SDK's functionality, offering a simplified interface for AI systems to locate files and retrieve metadata. By connecting AI capabilities with Everything's ultra-fast file indexing, this implementation empowers AI assistants to quickly find and analyze files across entire drives. It is particularly useful for applications requiring rapid file discovery, system analysis, or any scenario where an AI system needs to efficiently locate and reason about files on a Windows machine."
nickclyde,duckduckgo-mcp-server,2.1,0.2,7.2,-2.16,[],MINIMAL,"This MCP server implementation provides web search capabilities through DuckDuckGo, with additional features for content fetching and parsing. Developed by Nick Clyde, it offers tools for performing web searches and retrieving webpage content, with built-in rate limiting and error handling. The server is designed to format results specifically for large language model consumption, making it particularly useful for AI applications that require up-to-date web information. It includes features like intelligent text extraction, comprehensive error logging, and LLM-friendly output formatting. The implementation is built using Python and integrates with the Model Context Protocol, focusing on ease of use within the Claude Desktop environment."
jsonallen,perplexity-mcp,2.2,0.4,6.7,-2.0100000000000002,[],LOW,"This Perplexity MCP server, developed by Jason Allen, provides AI assistants with web search capabilities using the Perplexity AI API. Built with Python using libraries like aiohttp and pydantic, it offers a streamlined interface for performing web searches and retrieving results. The server implements environment-based configuration for API key management and uses the Model Context Protocol to standardize interactions. By abstracting the complexities of API communication, it enables AI systems to easily incorporate up-to-date web information into their workflows. This implementation is particularly valuable for applications requiring real-time access to web data, facilitating use cases such as fact-checking, research assistance, and information retrieval across various domains."
formulahendry,mcp-server-code-runner,2.4,0.2,6.0,-1.7999999999999998,[],MINIMAL,"Code Runner MCP Server enables AI assistants to execute code snippets in multiple programming languages directly within conversations. Built by Jun Han, it supports over 30 languages including JavaScript, Python, Ruby, Go, and more by creating temporary files and executing them with the appropriate interpreter. The server is designed for easy integration with VS Code and Claude Desktop through simple configuration, making it ideal for demonstrating code examples, testing algorithms, or exploring system information without leaving the conversation interface."
furey,mongodb-lens,2.3,0.2,7.8,-2.34,[],MINIMAL,"MongoDB Lens is an MCP server that provides AI assistants with direct access to MongoDB databases for exploration and analysis. Built with Node.js and the Model Context Protocol SDK, it enables browsing databases and collections, executing queries with filters and projections, running aggregation pipelines, analyzing schemas, managing indexes, and optimizing query performance. The implementation includes specialized tools for inferring collection schemas, explaining query execution plans, and generating recommendations for database optimization, making it valuable for database exploration, performance tuning, and schema design assistance within AI workflows."
g0t4,mcp-server-commands,2.4,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This MCP server, developed by g0t4, enables AI assistants to execute system commands and run scripts on the host machine. It provides tools for running individual shell commands and executing multi-line scripts in various languages like bash, fish, and Python. Built in JavaScript, the implementation exposes local system functionality via a standardized MCP interface, allowing Claude to interact directly with the host operating system. By bridging AI models with the local command line, this server enhances Claude's ability to perform system administration tasks, automate workflows, and execute code snippets. It is particularly useful for developers and power users seeking AI-powered assistance with command-line operations, scripting, and system automation tasks. The implementation emphasizes security, recommending careful review of commands before execution."
mshojaei77,reactmcp,2.1,0.4,7.8,-2.34,[],LOW,"ReActMCP Web Search integrates Exa API's web search capabilities into AI assistant frameworks through the Model Context Protocol. It provides both basic and advanced search tools with filtering options for domains, text requirements, and date ranges, returning markdown-formatted results with titles, URLs, publication dates, and content summaries. Built with Python using the FastMCP framework, this implementation is particularly valuable for workflows requiring real-time internet information within AI conversations, allowing users to access current data without leaving their conversation interface."
apify,mcp-server-rag-web-browser,2.1,0.2,7.3,-2.19,[],MINIMAL,"This MCP server, developed by Apify, provides a web browsing interface for large language models and RAG pipelines. Built in JavaScript, it integrates with the RAG Web Browser Actor on the Apify platform to enable AI assistants to perform web searches, scrape content from top results, and fetch individual URLs. The implementation stands out by returning cleaned web content as Markdown and offering flexible search result limits. By connecting AI models with real-time web data, this server allows AI systems to access up-to-date information, analyze online content, and provide web-informed responses. It is particularly useful for scenarios like research tasks, content summarization, and building AI assistants that can leverage current web information to enhance their knowledge and capabilities."
cyanheads,atlas-mcp-server,2.3,0.6,7.6,-2.2800000000000002,"['Found pattern: collect.*data', 'Found pattern: tracking']",MEDIUM,"ATLAS, developed by cyanheads, is a Model Context Protocol server that provides hierarchical task management capabilities to Large Language Models. It enables AI assistants to break down complex projects into manageable tasks, track progress, and maintain dependencies within an organized structure. The server implements rich content support, including markdown documentation, code snippets, and structured reasoning documentation. ATLAS stands out by offering a comprehensive task management system tailored for AI-driven project planning and execution. It is particularly useful for applications requiring sophisticated task organization, collaborative AI workflows, or any scenario where an AI system needs to manage and reason about complex, multi-step processes."
quantgeekdev,mongo-mcp,2.1,0.2,7.4,-2.2199999999999998,[],MINIMAL,"This MongoDB MCP server, developed by QuantGeekDev, enables AI assistants to interact directly with MongoDB databases through natural language. Built with TypeScript, it provides tools for querying collections, inspecting schemas, managing indexes, and performing document operations. The server leverages MongoDB's flexible document model and powerful query capabilities, allowing AI models to explore and manipulate complex data structures. By bridging natural language processing with MongoDB's features, this implementation extends AI capabilities for tasks like data analysis, content management, and database administration. It is particularly useful for scenarios requiring dynamic data exploration, schema inference, and performing database operations in response to natural language queries."
sdglbl,mcp-claude-code,2.4,0.2,6.4,-1.92,[],MINIMAL,"MCP Claude Code enables Claude to directly execute code-related tasks through the Model Context Protocol, providing functionality similar to Claude Code. Developed by SDGLBL, it implements tools for code understanding, modification, command execution, and file operations with proper security controls. The server integrates seamlessly with Claude Desktop, allowing users to analyze codebases, make targeted edits, run commands in various shells, and execute scripts in multiple programming languages. This implementation is particularly valuable for developers seeking AI assistance with code modifications and project management without leaving their conversation interface."
domdomegg,airtable-mcp-server,2.55,0.4,6.8,-2.04,[],LOW,"This MCP server, developed by domdomegg, enables AI assistants like Claude to interact with Airtable databases. Built in TypeScript, it provides capabilities for querying and modifying Airtable bases, tables, fields, and records through a standardized interface. The implementation stands out by offering full read/write access to Airtable's rich data model and metadata. By connecting AI capabilities with structured data in Airtable, this server allows AI systems to analyze, manipulate, and act on user-defined datasets. It is particularly useful for automating data entry workflows, building AI-powered data analysis tools, or creating natural language interfaces to Airtable-based applications."
fengin,image-gen-server,2.3,0.2,6.6,-1.9799999999999998,[],MINIMAL,"This MCP server, developed by an unknown author, provides a lightweight implementation for handling MCP requests. Built with Python and leveraging the aiohttp and aiofiles libraries, it offers asynchronous capabilities for efficient request processing. The server focuses on basic functionality, utilizing the fastmcp and mcp libraries for core MCP operations. It's designed for developers who need a simple, customizable MCP server solution, enabling use cases such as prototyping MCP-based applications, testing MCP integrations, or serving as a foundation for more complex MCP implementations."
hyperb1iss,droidmind,2.2,0.2,7.7,-2.31,[],MINIMAL,"DroidMind enables AI assistants to control and interact with Android devices through a secure, standardized interface. Built with Python and the Model Context Protocol, it provides tools for device management, app installation, UI automation, file operations, and system diagnostics. The implementation features a robust security layer that prevents dangerous operations, supports both stdio and SSE transport modes, and includes comprehensive test coverage. DroidMind is particularly valuable for developers, testers, and power users who need to debug, analyze, or control Android devices directly through conversational AI without switching to dedicated ADB tools."
fradser,mcp-server-mas-sequential-thinking,2.3,0.4,7.6,-2.2800000000000002,[],LOW,"Sequential Thinking Multi-Agent System (MAS) implements a coordinated team of specialized AI agents to break down complex problems through structured thinking steps. Built by Frad LEE using the Agno framework and DeepSeek models, this server orchestrates a Team Coordinator, Strategic Planner, Researcher (with Exa search capabilities), Core Analyzer, Quality Controller, and Integration Specialist working in parallel to process thoughts with greater depth than single-agent approaches. The implementation supports revision steps, branching analysis paths, and provides detailed guidance throughout the thinking process, making it particularly valuable for multi-disciplinary problem solving requiring diverse expertise and comprehensive analysis."
cr7258,elasticsearch-mcp-server,2.3,0.4,6.5,-1.9500000000000002,[],LOW,"This Elasticsearch MCP server implementation provides a standardized interface for interacting with Elasticsearch clusters through natural language. Developed to bridge the gap between large language models and Elasticsearch, it offers tools for index operations, document searching, and cluster management. The server leverages Docker for easy deployment of a 3-node Elasticsearch cluster with Kibana, and integrates seamlessly with Claude Desktop via a simple configuration. It's particularly useful for developers and data analysts who want to explore and manipulate Elasticsearch data using conversational AI, enabling natural language queries for complex search operations and cluster insights without requiring in-depth Elasticsearch expertise."
bigcodegen,mcp-neovim-server,2.2,0.2,6.3,-1.8900000000000001,[],MINIMAL,"This Neovim MCP server, developed by Derek White (bigcodegen), integrates Claude Desktop with Neovim using the Model Context Protocol and the official neovim/node-client library. It leverages Vim's native text editing commands to create a lightweight code assistance layer, allowing AI to interact directly with Neovim sessions. The server connects to a running Nvim instance, providing tools to view and edit buffers, execute Vim commands, and retrieve editor status. By abstracting Neovim's complexities, it enables AI assistants to seamlessly work within the familiar Vim environment. This implementation is particularly useful for developers seeking AI-enhanced coding assistance within their preferred text editor, facilitating tasks such as code review, refactoring, and context-aware suggestions without leaving the Neovim ecosystem."
blurrah,mcp-graphql,2.3,0.2,6.6,-1.9799999999999998,[],MINIMAL,"This MCP server, developed by an unnamed author, provides a GraphQL interface for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for querying GraphQL servers. The implementation currently uses a mock schema response for development purposes, but is designed to connect to actual GraphQL endpoints. It abstracts the complexities of GraphQL communication, allowing AI systems to easily interact with GraphQL APIs. This server is particularly useful for applications requiring flexible data querying and manipulation, enabling AI assistants to access and analyze structured data from various GraphQL sources. Its generic design allows it to work with any GraphQL schema, making it versatile for different data-driven use cases."
jacksteamdev,obsidian-mcp-tools,2.2,0.4,7.8,-2.34,[],LOW,"This Obsidian MCP tools collection, developed by 2XR, provides a set of Model Context Protocol utilities tailored for integration with the Obsidian note-taking application. Built using TypeScript and leveraging modern JavaScript features, it offers a modular structure with workspaces for different tools. The implementation focuses on enhancing Obsidian's capabilities through AI-powered functionalities, potentially including features like intelligent note linking, content generation, or knowledge graph analysis. By bridging Obsidian's powerful note organization system with MCP's standardized AI communication, this toolkit enables users to augment their personal knowledge management workflows with advanced AI assistance. It is particularly suited for researchers, writers, and knowledge workers looking to leverage AI within their existing Obsidian setups for tasks such as information synthesis, idea generation, and content organization."
taazkareem,clickup-mcp-server,2.45,1.0,7.5,-2.25,['Found pattern: tracking'],HIGH,"This ClickUp MCP server, developed by Talib Kareem, integrates ClickUp task management with AI systems through the Model Context Protocol. Built with TypeScript and leveraging the MCP SDK, it provides a standardized interface for AI models to interact with ClickUp tasks, enabling automated task creation, updates, and retrieval. The implementation focuses on simplifying project management workflows and enhancing productivity by allowing AI assistants to manage tasks programmatically. It's particularly useful for teams looking to automate routine task management, generate task summaries, or incorporate AI-driven insights into their project workflows, bridging the gap between task management and AI capabilities."
aliargun,mcp-server-gemini,1.8,0.4,7.0,-2.0999999999999996,[],LOW,"This Gemini MCP server, developed by Ali Argun, enables Claude Desktop to interact with Google's Gemini AI models. It provides a full implementation of the Model Context Protocol, supporting real-time response streaming and secure API key handling. The server integrates with the @google/generative-ai library to offer a streamlined interface for leveraging Gemini's capabilities within Claude Desktop. By abstracting the complexities of the Gemini API, this implementation allows for easy configuration of model parameters and seamless integration with existing Claude Desktop workflows. It is particularly useful for users who want to access Gemini's advanced language models through a familiar interface, enabling applications like chatbots, content generation, and AI-assisted analysis within the Claude Desktop environment."
angiejones,mcp-selenium,2.3,0.2,7.1,-2.13,[],MINIMAL,"Navigate to URLs
Find elements using various locator strategies
Click, type, and interact with elements
Perform mouse actions (hover, drag and drop)
Handle keyboard input
Take screenshots
Upload files"
hellokaton,unsplash-mcp-server,2.3,0.2,6.6,-1.9799999999999998,[],MINIMAL,"Unsplash MCP Server provides AI assistants with access to the Unsplash photo library through a simple search interface. Built with Python using the FastMCP framework, it enables searching for high-quality images by keyword with additional filtering options for color, orientation, and sorting preferences. The implementation authenticates with the Unsplash API using environment variables and returns structured photo data including image URLs, dimensions, and descriptions. This server is particularly useful for workflows requiring visual content integration, allowing AI assistants to find and reference relevant imagery directly within conversations."
dvcrn,mcp-server-siri-shortcuts,2.0,0.2,5.8,-1.7399999999999998,[],MINIMAL,"This MCP server provides access to Siri shortcuts functionality on macOS, allowing AI assistants to list, open, and run shortcuts from the Shortcuts app. It dynamically generates tools for each available shortcut, exposing all shortcuts to the LLM for flexible automation. The server uses the macOS 'shortcuts' CLI command under the hood and supports both direct text input and file-based input for shortcut execution."
timholden,figma-mcp-server,2.1,0.0,7.8,-2.34,[],MINIMAL,"This Figma MCP server, developed by TimHolden, provides a robust interface to the Figma API for managing design system elements. Built with TypeScript, it offers comprehensive variable management, file operations, component handling, and collaboration features. The server implements variable validation, batch operations, and support for variable modes and scopes. By abstracting Figma API interactions into a standardized MCP interface, it enables AI systems to easily manipulate and analyze design assets. This implementation is particularly valuable for design teams and developers working with Figma, facilitating use cases such as design system management, automated style updates, and collaborative design workflows across various project scales."
burningion,video-editing-mcp,2.4,0.4,7.7,-2.31,[],LOW,"This MCP server, developed by Kirk Kaiser, enables AI-assisted video editing and searching using the Video Jungle API. It provides tools for adding videos, searching video content using embeddings, and generating edits from single or multiple video files. The implementation is built in Python 3.11+ and integrates with libraries like einops, timm, and transformers for advanced video processing capabilities. It's designed for content creators and video editors who want to leverage AI to streamline their workflow, allowing for natural language queries to find relevant video clips and automate editing tasks. The server also includes an optional feature to search local video files on macOS, making it versatile for both cloud-based and local video management."
ee0pdt,godot-mcp,2.1,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This MCP server implementation provides integration between Godot and the Model Context Protocol, allowing access to the currently open script in the Godot editor. Developed as a TypeScript server with a Godot editor plugin, it enables AI assistants like Claude to interact with Godot scripts, supporting features such as reading current scripts, listing project scripts, and updating script information. The implementation is designed for game developers and AI researchers looking to enhance their Godot development workflow with AI assistance."
neka-nat,freecad-mcp,2.4,0.2,5.2,-1.56,[],MINIMAL,"FreeCAD MCP enables AI-driven CAD modeling by providing a remote procedure call (RPC) server that allows Claude Desktop to control FreeCAD programmatically. Developed by neka-nat, this implementation supports operations like creating documents, inserting parts from libraries, editing objects, and executing arbitrary Python code, making it powerful for generative design and automated 3D modeling workflows."
openbnb-org,mcp-server-airbnb,2.3,0.2,5.8,-1.7399999999999998,[],MINIMAL,"This MCP server provides AI assistants with access to Airbnb's search and listing details functionality without requiring API keys. Built with TypeScript using the Model Context Protocol SDK, it offers two main tools: airbnb_search for finding vacation rentals with various filters, and airbnb_listing_details for retrieving comprehensive information about specific properties. The implementation respects robots.txt rules by default (with an option to bypass), uses cheerio for HTML parsing, and processes the data to reduce context load by flattening arrays and cleaning objects. Developed by OpenBnB, it's ideal for travel planning use cases where users need to explore accommodation options and compare listing details."
gannonh,firebase-mcp,2.3,0.0,7.6,-2.2800000000000002,[],MINIMAL,"Firebase MCP server provides a standardized interface for AI assistants to interact with Firebase services including Authentication, Firestore, and Storage. Built by Gannon Hall, this TypeScript implementation enables LLM clients to perform user management, document database operations, and file storage tasks through a consistent set of MCP tools. Particularly useful for developers building AI-powered applications that require seamless integration with Firebase's backend services."
jingcheng-chen,rhinomcp,2.4,0.4,7.6,-2.2800000000000002,[],LOW,"RhinoMCP is a plugin for Rhino 8 that implements the Model Context Protocol, enabling AI assistants to interact with Rhino's 3D modeling environment. The plugin creates a server that exposes Rhino's functionality through MCP, allowing for programmatic control of modeling operations. Built on the C# SDK for MCP, it features start and stop commands to manage the server connection, making it useful for automating design workflows and enabling conversational interfaces to control Rhino."
quarkiverse,filesystem,2.3,0.0,5.5,-1.6500000000000001,[],MINIMAL,"This Quarkus-based MCP server implementation provides a filesystem interface for AI models. Developed by the Quarkus team, it leverages Quarkus' fast startup and low memory footprint to offer efficient file system operations. The server includes dependencies for Jackson JSON processing, Qute templating, and Arc dependency injection. It supports both JVM and native compilation modes, with a Maven wrapper for easy building and running. This implementation is ideal for scenarios requiring AI models to interact with local file systems, such as automated file management, content organization, or data processing tasks, while benefiting from Quarkus' performance optimizations."
quarkiverse,jdbc,2.3,0.0,7.5,-2.25,[],MINIMAL,"This Model Context Protocol server, developed by the Quarkus team, enables AI models to interact with databases through JDBC connections. Built using Quarkus and JBang, it provides tools for querying, modifying, and exploring database content with just a JDBC URL. The implementation focuses on simplicity and flexibility, supporting various database types including in-memory, downloadable, and live databases. It's particularly useful for AI-assisted database management tasks, allowing models to perform operations like data analysis, schema exploration, and content manipulation across different database systems without needing direct access to the underlying infrastructure. The server's design makes it adaptable for various use cases where AI needs to interact with structured data, such as automated reporting, data migration, or dynamic query generation."
sirmews,mcp-pinecone,1.9,0.4,6.9,-2.0700000000000003,[],LOW,"This MCP server, developed by sirmews, enables AI assistants like Claude to interact with Pinecone vector databases for retrieval-augmented generation (RAG) applications. Built with Python, it provides tools for semantic search, document retrieval, and document upsert operations on Pinecone indexes. The implementation stands out by leveraging Pinecone's inference API for embedding generation, simplifying the architecture. By connecting AI capabilities with Pinecone's efficient vector search, this server allows AI systems to augment their knowledge with relevant information from large document collections. It is particularly useful for building AI applications that require real-time access to up-to-date information, such as question-answering systems, chatbots with domain-specific knowledge, or AI-powered research assistants."
opendatamcp,opendatamcp,1.8,0.2,7.6,-2.2800000000000002,[],MINIMAL,"OpenDataMCP, developed by the OpenDataMCP organization, connects open datasets to large language models through the Model Context Protocol. It provides a CLI tool for easy setup of MCP servers that expose public data sources, starting with integration for Claude AI. The implementation focuses on simplicity and standardization, using Python with minimal dependencies. OpenDataMCP aims to make millions of open government, NGO, and company datasets accessible to AI applications. It enables use cases like querying transportation data, analyzing public records, or incorporating open statistics into AI-assisted research and analysis tasks. The project is community-driven, allowing contributors to easily add new data sources using provided templates and guidelines."
taida957789,ida-mcp-server-plugin,2.2,0.2,7.2,-2.16,[],MINIMAL,"IDA Pro MCP Server enables AI assistants to interact directly with IDA Pro for binary analysis tasks. This plugin provides a comprehensive set of tools for remote querying and control, allowing AI systems to examine byte data, retrieve disassembly code, access decompiled pseudocode, query function information, and perform various binary analysis operations. Running locally on port 3000, it creates a bridge between AI assistants like Claude and IDA Pro's powerful reverse engineering capabilities, making it particularly valuable for automated malware analysis, vulnerability research, and collaborative reverse engineering projects."
tiberriver256,mcp-server-azure-devops,2.4,0.2,7.4,-2.2199999999999998,[],MINIMAL,"This MCP server implementation provides a bridge between AI assistants and Azure DevOps, enabling interaction with projects, work items, repositories, pull requests, branches, and pipelines. Developed by Tiberriver256, it offers tools for managing Azure DevOps resources and automating development workflows. The server is designed for DevOps teams looking to enhance their Azure-based processes with AI-driven assistance, supporting use cases like automated code reviews, work item management, and CI/CD pipeline optimization."
spences10,mcp-sequentialthinking-tools,2.4,0.2,6.4,-1.92,[],MINIMAL,"This MCP server for Sequential Thinking Tools, developed by Scott Spence, provides a structured approach to problem-solving and decision-making processes. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for step-by-step analysis, branching thoughts, and adaptive thinking strategies. The implementation focuses on guiding AI models through complex reasoning tasks, with features for tool recommendation and confidence assessment. It's particularly useful for AI assistants and applications needing to break down problems, plan solutions, and conduct reflective analysis, enabling use cases such as strategic planning, troubleshooting, and multi-step decision making without relying on predefined problem-solving frameworks."
xgenerationlab,xiyan_mcp_server,2.3,0.4,7.0,-2.0999999999999996,[],LOW,"XiYan MCP Server enables AI assistants to interact with MySQL databases through natural language queries using XiYanSQL. Developed by Zhiling Luo, this server provides capabilities to list tables, read data, and execute SQL queries in a controlled, secure environment. It integrates with LLM APIs for natural language processing and requires minimal configuration through environment variables, making it particularly valuable for database exploration and analysis workflows where direct SQL access might be risky or impractical."
burtthecoder,mcp-maigret,2.0,0.2,7.7,-2.31,[],MINIMAL,"This MCP server, developed by BurtTheCoder, enables AI assistants like Claude to leverage the OSINT capabilities of Maigret. Built in JavaScript/TypeScript, it provides functionality for searching usernames across social networks and analyzing URLs. The implementation stands out by offering Docker-based execution, multiple output formats, and site filtering options. By connecting AI capabilities with Maigret's extensive data collection, this server allows AI systems to gather and process publicly available user information programmatically. It is particularly useful for building AI-powered tools for social media research, identity verification, and open-source intelligence gathering that require ethical and responsible use of public data sources."
huccihuang,bilibili-mcp-server,2.3,0.2,3.1,-0.9299999999999999,[],MINIMAL,"Bilibili MCP Server provides a simple interface to the Bilibili API, enabling search functionality across the popular Chinese video platform. Built with FastMCP, it exposes a single tool that allows querying the Bilibili search API with optional authentication via session data cookies. The implementation is lightweight, requiring only Python 3.12 and minimal dependencies (mcp[cli] and requests), making it ideal for workflows that need to retrieve video content, user information, or other searchable data from Bilibili without leaving the conversation interface."
getsentry,sentry-mcp,2.4,0.8,7.5,-2.25,"['Potential data exfiltration: send.*data', 'Found pattern: send.*data', 'Found pattern: fetch\\s*\\(']",HIGH,"A server implementation of the Model Context Protocol (MCP) for Sentry, allowing AI applications to retrieve error and performance data from Sentry to provide context about application issues."
jae-jae,g-search-mcp,2.3,0.2,7.3,-2.19,[],MINIMAL,"G-Search MCP is a powerful server for performing parallel Google searches with multiple keywords simultaneously, using Playwright to automate browser interactions. Developed by jae-jae, it features intelligent CAPTCHA detection with automatic switching to visible browser mode when verification is needed, browser state persistence to reduce detection likelihood, and user behavior simulation to mimic real browsing patterns. The implementation includes robust error handling, configurable search parameters (result limits, timeouts, locales), and returns structured JSON results, making it ideal for applications requiring efficient batch searching or when AI assistants need direct access to search engine results without triggering anti-bot measures."
tonypan2,minesweeper-mcp-server,2.1,0.2,4.3,-1.29,[],MINIMAL,"Minesweeper MCP Server provides a bridge between Claude and a Minesweeper game server, allowing AI assistants to play the classic puzzle game through a set of tools. Built by tonypan2, it communicates with a locally running game server via HTTP requests, translating game actions (start, click, flag, unflag) into API calls and returning the game state as images. The server is designed for integration with Claude Desktop through its configuration system, making it ideal for demonstrating AI problem-solving capabilities in a visual game environment without requiring the assistant to leave the conversation interface."
1panel-dev,mcp-1panel,2.3,0.2,6.6,-1.9799999999999998,[],MINIMAL,"MCP-1Panel is a server implementation that provides AI assistants with direct access to 1Panel server management capabilities. It exposes tools for managing websites, databases, SSL certificates, and applications through a standardized interface. Built with Go, it supports both stdio and SSE transport modes, authenticates with 1Panel via access tokens, and handles API requests through a client that manages error states appropriately. This implementation is particularly valuable for server administrators who want to monitor system information, deploy applications like MySQL and OpenResty, or manage web infrastructure directly through conversational AI without switching contexts."
ktanaka101,mcp-server-duckdb,2.1,0.2,7.0,-2.0999999999999996,[],MINIMAL,"This DuckDB MCP server, developed by ktanaka101, provides a flexible interface for language models to interact with DuckDB databases. It enables AI agents to execute SQL queries, create tables, and inspect schemas through a controlled interface. The server can be run in read-only mode for enhanced security and integrates with Claude Desktop. By leveraging DuckDB's column-oriented architecture, it allows AI systems to efficiently analyze large datasets locally. This implementation is particularly useful for AI assistants designed to perform ad-hoc data analysis, generate insights from local files, or provide data-driven recommendations using DuckDB as a high-performance analytical database backend."
pyroprompts,any-chat-completions-mcp,2.4,0.2,6.5,-1.9500000000000002,[],MINIMAL,"This MCP server, developed by pyroprompts, enables AI assistants to interact with any OpenAI SDK-compatible chat completion API, including OpenAI, Perplexity, Groq, xAI, and PyroPrompts. It provides a single 'chat' tool that relays questions to the configured AI provider and returns responses. Built in TypeScript, the implementation offers a flexible way to integrate various AI models into Claude Desktop through a standardized MCP interface. By abstracting away provider-specific details, this server allows easy switching between different AI services without changing the core integration. It is particularly useful for users who want to leverage multiple AI providers within Claude, experiment with different models, or avoid vendor lock-in while maintaining a consistent interaction pattern."
maquina-app,rails-mcp-server,2.4,0.2,7.8,-2.34,[],MINIMAL,"Rails MCP Server provides a Ruby implementation that allows LLMs to interact with Rails projects through a standardized protocol. It enables AI models to browse project files, view routes, inspect models, and retrieve database schema information across multiple Rails applications. The server follows the XDG Base Directory Specification for configuration, includes tools for project navigation and codebase exploration, and integrates seamlessly with Claude Desktop through either an automated setup script or manual configuration. Particularly valuable for developers seeking AI assistance with Rails application analysis, understanding, and exploration without leaving their conversation interface."
rishikavikondala,mcp-server-aws,2.2,0.2,6.7,-2.0100000000000002,[],MINIMAL,"This MCP server, developed by Rishika Vikondala, enables AI assistants like Claude to interact with AWS resources, specifically S3 and DynamoDB services. It provides tools for common operations such as creating/deleting S3 buckets, uploading/downloading objects, and performing CRUD operations on DynamoDB tables and items. The server integrates with the AWS SDK and automatically logs all operations, making them accessible through an audit endpoint. By bridging AI capabilities with AWS infrastructure management, this implementation facilitates easier cloud resource manipulation and monitoring. It is particularly useful for DevOps teams automating AWS workflows, developers needing quick access to cloud resources, or system administrators performing routine maintenance tasks through AI-assisted interactions."
jkf87,hwp-mcp,2.2,0.2,6.6,-1.9799999999999998,[],MINIMAL,"HWP MCP Server provides a bridge between AI assistants and Hangul Word Processor (HWP) documents, enabling document manipulation through a standardized interface. The implementation supports both Python (Flask-based) and Node.js versions, utilizing the HWP COM interface via pywin32 or winax respectively to control document operations. This server allows AI assistants to create, edit, and format Korean documents in the proprietary HWP format, making it particularly valuable for workflows involving Korean language document processing that require direct interaction with the Hangul Office suite."
newideas99,deepseek-thinking-claude-3.5-sonnet-cline-mcp,1.9,0.4,6.9,-2.0700000000000003,[],LOW,"This RAT (Retrieval Augmented Thinking) MCP server, developed by Skirano, implements a two-stage reasoning process combining DeepSeek's analysis capabilities with various response models. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers flexible model selection, persistent conversation context, and customizable reasoning visibility. The implementation focuses on enhancing AI responses through structured reasoning, with features like context management and multi-model support. It's particularly useful for developers and researchers working on improving AI conversation quality, enabling use cases such as more thoughtful chatbots, enhanced question-answering systems, and AI-assisted analysis tasks without directly dealing with individual API complexities."
weaviate,mcp-server-weaviate,2.1,0.4,5.6,-1.6799999999999997,[],LOW,"Bring intuitive AI-native applications to life with less hallucination, data leakage, and vendor lock-in with the open source vector database developers love."
0xkoda,wiremcp,2.2,0.2,7.4,-2.2199999999999998,[],MINIMAL,"WireMCP is a network analysis server that empowers LLMs with real-time traffic monitoring capabilities by leveraging Wireshark's tshark utility. Developed by 0xKoda, it provides five specialized tools for capturing and analyzing network data: raw packet capture, protocol statistics, conversation tracking, and threat detection through URLhaus blacklist integration. The implementation automatically locates tshark across different operating systems, handles large packet captures by intelligently trimming output, and presents results in structured formats optimized for LLM comprehension. Ideal for security analysts using AI assistants for threat hunting, network diagnostics, and anomaly detection without requiring direct access to network monitoring tools."
ccq1,awsome_kali_mcpservers,2.3,0.2,6.7,-2.0100000000000002,[],MINIMAL,"Awesome Kali MCP Servers provides a secure interface for AI assistants to execute Kali Linux security tools through a sandboxed environment. The implementation wraps common security utilities including nmap for network scanning, objdump and nm for binary analysis, strings for file examination, and wireshark/tshark for packet analysis. Built with Python using Docker containers for isolation, it enforces configurable resource limits and network access controls to prevent abuse while maintaining tool functionality. This server enables AI systems to perform security analysis tasks like vulnerability scanning, binary reverse engineering, and network traffic inspection without direct system access, making it valuable for security professionals who want to leverage AI assistants for technical security operations."
ccabanillas,notion-mcp,2.3,0.4,7.5,-2.25,[],LOW,"This Notion MCP server, developed by Chase Cabanillas, integrates Notion's API with the Model Context Protocol, enabling AI-assisted workflows to interact with Notion databases and pages. Built with Python and leveraging libraries like httpx and pydantic, it exposes Notion operations as MCP resources and tools, including database listing, querying, page creation/updating, and search functionality. The implementation focuses on asynchronous operations, proper error handling, and adherence to MCP specifications. It's particularly useful for developers and teams looking to incorporate Notion's organizational capabilities into AI-driven applications, allowing for dynamic content management and retrieval within Notion workspaces."
scorzeth,anki-mcp-server,1.8,0.2,5.1,-1.53,[],MINIMAL,"This Anki MCP server, developed as an open-source project, provides AI assistants with a bridge to interact with locally running Anki instances. It leverages the Anki-Connect add-on to offer tools for reviewing and creating flashcards, as well as retrieving cards from various decks. Built with TypeScript and the @modelcontextprotocol/sdk, it implements resource management for card retrieval, tools for card manipulation, and prompts for high-quality card creation based on Andy Matuschak's principles. The server abstracts Anki's complexities, allowing AI systems to seamlessly incorporate spaced repetition and flashcard management into their workflows. It's particularly useful for students, educators, and lifelong learners looking to enhance their study routines with AI-driven flashcard creation and review processes."
thrashr888,terraform-mcp-server,2.4,0.2,7.4,-2.2199999999999998,[],MINIMAL,"This MCP server implementation provides tools for interacting with the Terraform Registry API, enabling AI agents to query provider information, resource details, module metadata, and generate example configurations. Developed by Paul Thrasher, it offers functionalities such as provider lookup, resource usage examples, module recommendations, data source lookup, and schema details retrieval. Built with TypeScript and leveraging the Model Context Protocol SDK, the server is particularly useful for AI applications that need to automate Terraform-related tasks, assist in infrastructure-as-code development, or provide intelligent suggestions for Terraform configurations."
merill,mcp,2.3,0.0,5.2,-1.56,[],MINIMAL,"Lokka is an MCP server that provides a bridge between AI assistants and Microsoft Graph API, enabling natural language interaction with Microsoft 365 tenants. Developed by Merill Fernando, it allows users to query and manage their Microsoft environment through simple conversational prompts rather than complex API calls. The server authenticates with Microsoft Entra using client credentials, translates natural language requests into appropriate Graph API calls, and returns formatted results. Particularly valuable for administrators who need to perform tasks like creating security groups, reviewing conditional access policies, or managing Intune configurations without leaving their AI assistant interface."
chigwell,telegram-mcp,2.55,0.0,7.6,-2.2800000000000002,[],MINIMAL,"Telegram MCP Server provides a bridge between Claude and Telegram messaging, enabling direct interaction with Telegram chats without leaving the conversation interface. Built using Python, Telethon, and the MCP Python SDK, it exposes three core tools: retrieving chat lists, fetching messages from specific chats, and sending messages to contacts. The implementation authenticates with the Telegram API using credentials stored in environment variables and integrates seamlessly with Claude Desktop through a simple configuration. Particularly valuable for users who want to monitor or participate in Telegram conversations while working with Claude."
danilop,mcp2lambda,2.2,0.2,7.6,-2.2800000000000002,[],MINIMAL,"MCP2Lambda enables Large Language Models to interact with AWS Lambda functions as tools without code changes. It acts as a bridge between MCP clients and Lambda functions, allowing models to access private resources, interact with AWS services, and leverage Lambda's capabilities for data processing and external API access. The implementation includes autodiscovery of Lambda functions and secure invocation, making it useful for extending AI capabilities in enterprise environments with existing AWS infrastructure."
