owner,repo,github_stars,download_count,experimental_ai_generated_description
021-factory,laravel-debugbar-mcp,1,,"Laravel DebugBar MCP Server provides a bridge between AI assistants and the Laravel DebugBar debugging tool, enabling access to detailed request logs and diagnostic information from Laravel applications. The server exposes tools for retrieving request logs with filtering capabilities and accessing specific debug data like queries, routes, views, and models through a standardized interface. Built with TypeScript and the MCP protocol, it features data formatting to simplify verbose debug output, retry logic for API requests, and relative time calculations for improved readability. This implementation is particularly valuable for developers who need to analyze Laravel application performance and behavior directly through conversational AI."
0xbeedao,mcp-taskwarrior,0,1092,"mcp-taskwarrior is a server implementation by Bruce Kroeze that facilitates task management through Taskwarrior. It provides four essential tools for managing tasks: adding, updating, deleting, and listing tasks, with support for organizing by project and priority levels. Built with TypeScript and using the fastmcp and taskwarrior-lib dependencies, it can be used either through npx or by local installation, making it ideal for users who want to integrate task management capabilities into their AI assistant workflows."
0xbruno,mcpexec,0,,"This MCP server implementation provides a tool for executing local CLI commands asynchronously. Developed by 0xBruno, it uses FastMCP and asyncio to run shell commands securely, handling command arguments with spaces and quotes properly. The server is designed for use cases requiring remote execution of system commands, with built-in error handling for failed commands."
0xdwong,sui-mcp,1,,"Sui MCP server enables AI assistants to interact with the Sui blockchain network through a standardized interface. Built with TypeScript, it provides tools for requesting test tokens from the Sui devnet faucet and integrates with the official Sui SDK. This implementation is particularly valuable for blockchain developers and users who need to test Sui smart contracts or manage wallets through conversational AI."
0xgval,evm-mcp-tools,4,,"EVM MCP Tools provides Ethereum blockchain analysis capabilities directly within Claude AI conversations. It offers a suite of tools for smart contract auditing, wallet analysis, token balance checking, and profitability tracking across Ethereum and compatible chains. The implementation leverages Web3.js, Moralis, and Etherscan APIs to fetch on-chain data, analyze contract security, detect token standards, and calculate wallet profit/loss metrics. Designed for integration with Claude for Desktop, it enables users to perform blockchain analysis tasks without leaving their conversation context, making it particularly valuable for developers, traders, and researchers who need quick access to Ethereum data."
0xhijo,mcp_twitter,5,482,"MCP Twitter provides direct interaction with Twitter/X through a standardized set of tools, enabling AI models to perform actions like creating posts, replying to tweets, following users, and retrieving profile data. Built by 0xhijo, it supports two authentication methods (API credentials or direct Twitter login) and exposes 11 distinct Twitter functionalities through a Node.js server. The implementation is designed for seamless integration with Claude through the claude_mcp_config.json file, making it particularly valuable for automated social media management, content creation, and Twitter data analysis without leaving the conversation interface."
0xkoda,eth-mcp,4,,"This Ethereum RPC MCP server provides a bridge to interact with the Ethereum blockchain through standard JSON-RPC calls. Developed by Koda, it exposes three essential tools: eth_getCode for retrieving contract bytecode, eth_gasPrice for checking current gas prices, and eth_getBalance for querying account balances. The implementation uses axios for making HTTP requests to a public Ethereum RPC endpoint (llamarpc) and includes error handling with human-readable responses. Ideal for AI assistants that need to perform basic Ethereum blockchain queries without requiring complex wallet integration."
0xkoda,mcp-rust-docs,24,,"This MCP server fetches and returns documentation for Rust crates from docs.rs, providing essential context for LLMs working with Rust code. It implements a single tool, 'lookup_crate_docs', which retrieves HTML documentation, converts it to plain text, and truncates it if necessary. The server is designed for easy integration with AI assistants like Claude Desktop and can be tested using the MCP Inspector."
0xrag,mcp,0,,"A lightweight MCP server built with TypeScript and Coinbase's AgentKit, designed to provide a flexible wallet interaction framework using Viem on the Base Sepolia testnet. The implementation sets up a standard MCP server with tool listing and execution capabilities, generating a random wallet client and exposing blockchain-related actions through a stdio transport mechanism."
0xshellming,mcp-summarizer,63,,"MCP Server for AI Summarization, Support for multiple content types:
  - Plain text
  - Web pages
  - PDF documents
  - EPUB books
  - HTML content"
0xzap,worldminiapp_mcp,2,,"WorldMiniApps MCP Server provides AI assistants with access to World ID and MiniApps documentation through vector search capabilities. The implementation uses FastMCP to expose query tools that retrieve relevant documentation chunks from locally stored vector databases built with OpenAI embeddings and SKLearnVectorStore. It supports both World ID authentication documentation and the World MiniApps JavaScript SDK, making it particularly valuable for developers building applications on the World ecosystem who want to access technical documentation without leaving their Cursor editor environment."
13rac1,videocapture-mcp,6,,"VideoCapture MCP provides AI assistants with access to webcams and video sources through OpenCV, enabling image capture and camera control capabilities. The server exposes tools for capturing still images, managing camera connections, adjusting video properties like brightness and resolution, and performing basic image transformations such as horizontal flipping. Developed by 13rac1, this implementation focuses on still image capture only (no video streaming) and is designed to integrate seamlessly with Claude Desktop, making it ideal for AI applications that need to analyze real-world objects or environments through webcam imagery."
1595901624,qrcode-mcp,4,,"This client implementation allows users to retrieve the latest proxy nodes and generate QR codes for them. It utilizes the Model Context Protocol SDK and the QRCode library to fetch proxy information and create visual representations. The tool is designed to simplify access to up-to-date proxy data, making it useful for applications that require quick and easy proxy configuration."
1broseidon,mcp-jira-server,7,,"This Jira MCP server, developed using TypeScript and the Model Context Protocol SDK, provides AI assistants with a standardized interface to interact with Jira's REST API. It offers tools for managing issues, including creation, listing, updating, and deletion, as well as adding comments. The server abstracts the complexities of Jira's API, handling authentication and request formatting. It's particularly valuable for AI systems focused on project management and issue tracking, enabling use cases such as automated task creation, status updates, and project overview generation. The implementation includes error handling for common Jira-specific scenarios and formats issue information for easy consumption by AI assistants."
1mcp-app,agent,5,424,"1MCP (One MCP) is a unified server implementation that aggregates multiple MCP servers into a single interface, reducing system resource usage and simplifying configuration management across different AI assistants. Developed by William Xu, it supports both stdio and SSE transport methods, handles dynamic configuration reloading without server restart, and enables filtering of servers by tags. The implementation allows AI tools like Claude Desktop, Cursor, Cherry Studio, and Roo Code to share access to the same underlying MCP servers, making it particularly valuable for users working with multiple AI assistants that need access to the same tools and resources."
1panel-dev,mcp-1panel,84,,"MCP-1Panel is a server implementation that provides AI assistants with direct access to 1Panel server management capabilities. It exposes tools for managing websites, databases, SSL certificates, and applications through a standardized interface. Built with Go, it supports both stdio and SSE transport modes, authenticates with 1Panel via access tokens, and handles API requests through a client that manages error states appropriately. This implementation is particularly valuable for server administrators who want to monitor system information, deploy applications like MySQL and OpenResty, or manage web infrastructure directly through conversational AI without switching contexts."
1rb,mongo-mcp,7,,"This MongoDB MCP server implementation enables interaction with MongoDB databases through the Model Context Protocol. It utilizes TypeScript and the MongoDB driver to provide a bridge between MCP clients and MongoDB operations. The server is designed to run in various environments, including Windows (Git Bash and WSL) and Unix-like systems, making it versatile for different development setups. It's particularly useful for projects that require seamless integration of MongoDB capabilities into MCP-based workflows."
1yhy,oss-mcp,1,,"OSS-MCP is a server implementation that provides a bridge between AI assistants and Object Storage Services (OSS), specifically Ali OSS. Developed by 1yhy, this TypeScript-based server enables file operations through a RESTful API, allowing assistants to upload, download, list, and manage files in cloud storage. The implementation leverages the ali-oss SDK and Express framework to handle requests efficiently, with environment-based configuration for secure credential management. It's particularly valuable for use cases requiring document management, media file handling, or backup operations without leaving the assistant interface."
1yhy,figma-context-mcp,8,,"Figma-Context-MCP is a server implementation that bridges AI assistants with the Figma design platform, enabling direct access to Figma file data through the MCP protocol. It transforms complex Figma API responses into simplified, structured design information that includes layout properties, styling, and text content, making it easier for AI assistants to understand and reason about design files. The server provides tools for retrieving complete Figma files or specific nodes, downloading images, and processing design hierarchies - making it particularly valuable for design review workflows, code generation from designs, and collaborative design discussions."
21st-dev,magic-mcp,1229,,"This MCP server implementation provides a bridge to the 21st.dev/magic API, enabling AI assistants to interact with frontend development tasks. Developed by sergeibynas, it offers tools for working with frontend code directly from IDEs like Cursor, WindSurf, and VSCode with Cline. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on secure API key management and is designed to streamline frontend development workflows. The implementation is particularly useful for AI applications that need to automate or assist with frontend coding tasks, offering a unique approach to AI-assisted web development."
oyasimi1209,magic-mcp,1,,"Magic MCP Server provides a bridge to 21st.dev's Magic API, enabling AI assistants to generate UI components and search for logos. Developed by serafim@21st.dev, this TypeScript implementation offers three specialized tools: creating UI components from descriptions, fetching existing components for inspiration, and searching for company logos in various formats (SVG, JSX, TSX). The server authenticates with the 21st.dev API using an API key and is designed to be easily integrated with AI clients like Cline and Windsurf through Smithery. Ideal for developers who want to quickly generate or find UI components and brand assets without leaving their AI assistant workflow."
29decibel,record-to-markdown,0,,"This Record to Markdown MCP implementation, developed by 29decibel, provides a Python-based interface for AI assistants to save conversation content to markdown files or Apple Notes. Built using libraries like httpx, markdown2, and mcp, it offers tools for converting markdown to HTML and creating notes with AppleScript integration. The implementation focuses on efficient content preservation and formatting, making it easier for AI models to store and organize conversation outputs. It's particularly useful for users of Claude desktop who want to automatically save their AI interactions, enabling easy reference, sharing, or further analysis of conversation content without manual copying and pasting."
2b3pro,markdown2pdf-mcp,2,,"This Markdown to PDF conversion MCP server, developed by 2b3pro, provides a robust solution for generating PDF documents from Markdown content. Built with TypeScript and leveraging Puppeteer for modern PDF generation, it offers features like syntax highlighting, custom CSS styling, and optional watermarking. The server implements file naming conflict resolution, configurable paper formats, and uses Chrome v131.0.6778.204 for consistent rendering across installations. By abstracting the complexities of PDF creation, it enables AI systems to easily produce formatted documents from Markdown input. This implementation is particularly valuable for applications requiring programmatic document generation, facilitating use cases such as report creation, documentation publishing, and content distribution in PDF format."
2b3pro,roam-research-mcp,32,,"This Roam Research MCP server, developed by Ian Shen / 2B3 PRODUCTIONS LLC, provides AI assistants with a standardized interface to interact with Roam Research graphs. Built using TypeScript and leveraging the Roam Research API SDK, it offers capabilities for searching blocks, creating and manipulating pages and blocks, and performing batch operations. The server implements recursive block reference resolution and markdown conversion for content retrieval. It's designed for flexibility, supporting various Roam Research operations through a set of eleven core tools. This implementation is particularly valuable for researchers, writers, and knowledge workers, enabling use cases such as automated note-taking, content organization, and intelligent information retrieval within Roam Research graphs."
304techmaven,plaid-mcp-server,3,,"Plaid MCP Server provides a robust bridge to the Plaid financial API, enabling AI assistants to securely access and interact with bank account data, transactions, and authentication flows. Built with TypeScript and supporting both stdio and SSE transports, it offers tools for creating link tokens, exchanging public tokens, syncing transactions, and handling Plaid webhooks. The implementation is particularly valuable for financial analysis, automated transaction tracking, and building AI-powered personal finance assistants."
3rzy,make-mcp-integration-issue,0,,"This MCP server implementation provides integration with Make (formerly Integromat) for automating workflows. It allows users to connect Make scenarios with MCP-enabled AI assistants, enabling automated task execution and data processing. The server is designed for developers looking to enhance their AI workflows with Make's extensive library of app integrations and automation capabilities."
54rt1n,container-mcp,4,,"Container-MCP provides a secure, sandboxed environment for executing code, running commands, accessing files, and performing web operations on behalf of large language models. Built by 54rt1n, it implements multiple layers of security including container isolation, AppArmor profiles, Firejail sandboxing, and strict resource limits to ensure safe execution of potentially risky operations. The architecture uses domain-specific managers for different operation types (Bash, Python, file operations, web browsing) and runs inside an Ubuntu container with carefully controlled permissions and access restrictions. This implementation is particularly valuable for AI workflows requiring secure tool execution without exposing the host system to potential risks."
5ajaki,veri5ight,1,,"This MCP server for local Ethereum node operations, developed by 5pence, provides a simplified interface for interacting with ENS DAO functions. Built with TypeScript and leveraging the ethers.js library, it offers a streamlined approach to Ethereum network interactions. The server implements environment variable configuration for node URL management and error handling. By abstracting the complexities of direct Ethereum node communication, it enables AI systems to easily perform ENS DAO operations. This implementation is particularly valuable for applications requiring programmatic access to ENS DAO functions, facilitating use cases such as automated domain management, governance participation, and decentralized identity operations within the Ethereum ecosystem."
5ajaki,mcp-etherscan-server,1,,"This MCP Etherscan server, developed by 5pence, provides Ethereum blockchain data tools via Etherscan's API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers features like balance checking, transaction history viewing, token transfer tracking, contract ABI fetching, gas price monitoring, and ENS name resolution. The implementation focuses on simplifying access to Ethereum blockchain data through a standardized MCP interface. It's particularly useful for developers and analysts looking to incorporate Ethereum data into their applications without dealing directly with Etherscan's API complexities, enabling use cases like wallet monitoring, transaction analysis, and smart contract interactions."
5ajaki,safe-mcp-server,0,,"This Safe MCP server, developed by 5pence, enables interaction with Safe (formerly Gnosis Safe) smart contract wallets through the Model Context Protocol. Built with TypeScript and leveraging the MCP SDK, it provides tools for querying Safe transactions, retrieving multisig transaction details, and decoding transaction data. The implementation focuses on simplifying access to Safe's functionality through a standardized interface, with default integration to the Safe Transaction API mainnet endpoint. It's particularly useful for developers and AI models needing to interact with Safe wallets, enabling use cases like transaction monitoring, multisig management, and smart contract interaction analysis without dealing directly with blockchain complexities."
611711dark,mcp_calculate_server,2,,"MCP Calculate Server provides mathematical computation capabilities through a Python-based server that leverages the SymPy library for symbolic mathematics. Developed by 611711Dark, this implementation enables AI assistants to perform complex calculations, equation solving, and symbolic manipulation without needing direct access to mathematical libraries. The server requires Python 3.11 or higher and depends on both the MCP framework and SymPy, making it ideal for use cases requiring advanced mathematical operations within AI assistant conversations."
7gugu,zip-mcp,9,,"A Model Context Protocol server that provides ZIP compression capabilities using fastMCP and zip.js. This implementation allows AI assistants to compress and decompress files directly through MCP, enabling efficient file handling without leaving the conversation interface. The server exposes compression utilities as tools that can be called programmatically, making it valuable for workflows involving file management, data transfer, and storage optimization."
8bitgentleman,activitywatch-mcp-server,6,,"This MCP server connects to ActivityWatch, enabling LLMs like Claude to interact with time tracking data. It provides tools for listing buckets, executing AQL queries, and retrieving raw events from any bucket. Developed by Matt Vogel, it's designed to enhance productivity analysis and time management capabilities for AI assistants working with personal activity data."
8bitsats,grok-mcp,2,,"GrokArt is an MCP server that connects to the xAI/Grok image generation API, allowing AI assistants to generate images based on text prompts. The implementation supports multiple image generation (up to 10 images per request), different response formats (URL or base64 JSON), and includes proper error handling with lazy API key initialization. Built with Docker and Kubernetes deployment support, GrokArt is designed for seamless integration with Claude Desktop and other MCP clients, making it particularly valuable for creative workflows that require image generation capabilities without leaving the conversation interface."
8bitsats,grok_mcp,0,,"Grok AI MCP Server integrates with xAI's Grok API to provide AI-driven analysis tools for the Solana blockchain. Built by 8bitsats, it exposes four main tools through a standard I/O transport: analyzing transactions with detailed insights about program interactions and token transfers, investigating Solana addresses, interpreting images using Grok's vision capabilities, and answering general queries with optional context and image support. The server leverages both text-only and vision models from Grok, making it particularly valuable for blockchain developers and analysts who need detailed explanations of on-chain activities without leaving their workflow."
9ninety,mcpnotes,21,864,"This MCP notes server, developed by an unnamed author, provides a simple yet powerful tool for recording and managing notes with AI models. Built using TypeScript and leveraging the Model Context Protocol SDK, it offers both an MCP server and a web server interface for flexible note-taking capabilities. The implementation uses DynamoDB for data storage and includes features for creating, retrieving, and managing notes. By abstracting the complexities of note management and AI integration, it enables seamless interaction between AI assistants and user-generated content. This server is particularly useful for applications requiring persistent memory and context management, facilitating use cases such as personal assistants, knowledge management systems, and collaborative AI-enhanced note-taking platforms."
9olidity,mcp-server-pentest,12,,"MCP Server Pentest is a browser automation tool that enables AI assistants to perform security testing for web applications, specifically focusing on XSS and SQL injection vulnerability detection. Built on Playwright and Firefox, it provides tools for automatically testing URL parameters against common attack vectors, capturing screenshots of vulnerable pages, and manipulating web elements through various interaction methods. The server includes comprehensive error handling with fallback mechanisms for strict mode violations, making it particularly valuable for security professionals who need to conduct preliminary vulnerability assessments without leaving their AI assistant interface."
a01110946,rhinomcp,6,,"RhinoMCP connects Rhino3D to Claude AI through a WebSocket-based bridge, enabling AI-assisted 3D modeling capabilities. The implementation consists of three main components: a socket server running inside Rhino's Python environment, a Python client that communicates with the Rhino plugin, and an MCP server that exposes Rhino functionality as tools. It allows Claude to create and manipulate 3D geometry, run Python scripts in Rhino's context, and interact with the modeling environment, making it particularly valuable for architectural design, product development, and other 3D modeling workflows that benefit from AI assistance."
a0dotrun,expose,4,,"Expose is a proxy server implementation that enables communication between clients and MCP-compatible services through JSON-RPC. Built by a0dotrun, it provides a Go-based middleware that handles standard MCP methods like 'initialize', 'tools/list', and 'tools/call' by forwarding requests to a configured backend URL while maintaining proper error handling and response formatting. The server can operate over standard I/O streams with graceful shutdown capabilities, making it suitable for integrating existing services with MCP clients or creating lightweight proxies between different MCP implementations."
a21071,mcp-postgres,0,,"A PostgreSQL database integration server that provides type-safe CRUD operations for user data through MCP tools. Built with TypeScript and Prisma, it enables easy database interactions with a standardized interface, supporting operations like retrieving, adding, updating, and deleting user records with robust input validation."
a2xdeveloper,tagesschau-mcp-server,0,,"Provides a bridge to the Tagesschau news API, enabling AI assistants to fetch and analyze German news articles from categories like domestic, foreign, economic and sports coverage. Built with Go and the MCP protocol, it exposes tools for retrieving latest headlines and detailed article content through a clean interface. This implementation is particularly valuable for users who want to access and analyze German news content programmatically through natural language interaction."
a37ai,ansible-tower-mcp,1,,"Ansible Tower MCP Server provides a bridge between LLMs and Ansible Tower/AWX instances, enabling AI assistants to manage infrastructure automation tasks through a comprehensive API interface. The implementation supports inventory, host, group, job template, project, credential, and organization management with secure authentication options via username/password or token. Built with Python using the FastMCP framework, it handles pagination, error management, and various response formats while maintaining secure connections to Ansible Tower instances. This server is particularly valuable for DevOps workflows where infrastructure management and deployment automation need to be integrated directly into AI assistant conversations."
aallsbury,qb-time-mcp-server,4,,"This QuickBooks Time MCP server, developed by an AI assistant, provides a unified interface to QuickBooks Time API functionality. Built with Python and leveraging libraries like requests and pydantic, it offers a comprehensive set of endpoints for managing jobcodes, timesheets, users, projects, and generating reports. The server implements robust error handling, pagination support, and date parameter formatting. By consolidating multiple QuickBooks Time services into a single, efficient interface, it simplifies integration and data access for developers. This implementation is particularly valuable for businesses using QuickBooks Time, enabling use cases such as automated time tracking, payroll processing, project management, and custom reporting workflows."
aantti,mcp-netbird,28,,"A Netbird API integration server that enables AI assistants to manage virtual private networks through natural language. Built by aantti and derived from Grafana's MCP implementation, it provides tools for listing and managing peers, groups, and access policies in a Netbird network. Particularly valuable for network administrators who want to monitor and configure their Netbird VPN infrastructure through conversational AI."
aaomidi,mcp-bazel,4,,"A Bazel integration server for the MCP protocol that enables AI assistants to interact with Bazel build systems. It provides tools for building targets, running tests, finding dependencies and reverse dependencies, and identifying source files within a Bazel workspace. The implementation wraps Bazel command-line operations in a structured API, making it easier for AI systems to analyze and manipulate Bazel projects without needing to understand the underlying command syntax."
aapanel,mcp-server,5,,"aaPanel MCP Server provides a bridge between AI assistants and aaPanel web hosting control panel, enabling management of websites, databases, Docker containers, and system resources through a standardized interface. Built with Go, this implementation authenticates with the aaPanel API using environment variables for base URL and API token, then translates MCP tool calls into appropriate aaPanel API requests. The server exposes functionality for retrieving system information, managing PHP websites, querying MySQL databases, handling Docker containers and images, and configuring email accounts, making it ideal for automating web hosting administration tasks through AI-powered workflows."
aaronsb,confluence-cloud-mcp,13,,"This Confluence Cloud MCP server, developed using TypeScript and the Model Context Protocol SDK, provides a standardized interface for AI assistants to interact with Atlassian Confluence Cloud. It offers tools for space management, page operations, content searching, and label handling, enabling seamless integration of Confluence functionality into AI workflows. The implementation stands out by abstracting Confluence's API complexities, allowing AI models to perform tasks like creating pages, managing content, and retrieving information without direct API knowledge. It's particularly valuable for teams looking to automate documentation processes, enhance knowledge management, or build AI-powered tools that leverage Confluence data and capabilities."
aaronsb,google-workspace-mcp,32,,"This Google Workspace MCP server, developed by Aaron Bockelie, enables AI agents to interact with Gmail and Google Calendar through a simplified interface. Built with TypeScript and leveraging the Google APIs, it provides functionality for email operations, calendar management, and multi-account support. The implementation focuses on robust OAuth handling, detailed error messaging, and a modular design for easy expansion to additional Google services. It's particularly useful for AI assistants and applications needing seamless integration with Google Workspace, enabling use cases such as email triage, meeting scheduling, and productivity automation without dealing directly with the complexities of individual Google APIs."
aaronsb,jira-insights-mcp,0,,"Jira Insights MCP provides tools for managing Jira Insights (JSM) asset schemas through the Model Context Protocol. Built by aaronsb, it enables CRUD operations on object schemas, object types, and objects in Jira Insights, with support for AQL (Atlassian Query Language) queries. The implementation is containerized with Docker for easy deployment and requires Jira API credentials for authentication. This server is particularly valuable for teams that need to programmatically manage their Jira Insights assets without leaving the conversation interface, streamlining workflows for IT asset management and configuration tracking."
aaronsb,apptio-target-process-mcp,0,,"This MCP server implementation provides a bridge between AI assistants and Targetprocess, a project management and agile planning platform. It enables AI assistants to search, retrieve, create, and update Targetprocess entities such as user stories, bugs, tasks, and features. The server handles authentication, API interactions, and data validation, allowing for complex queries and entity management. It's designed to enhance project tracking and agile workflows by integrating AI capabilities with Targetprocess functionality."
aarushkx,covid-mcp-server,2,,"COVID-19 MCP Server provides real-time COVID-19 statistics for any country by connecting to the disease.sh API. The server exposes a single tool called getCovidStatsByCountry that fetches comprehensive data including cases, deaths, recoveries, and testing information when given a country name. Built with TypeScript and the MCP SDK, it runs on stdio transport for seamless integration with Claude Desktop, making it useful for researchers, journalists, or anyone needing quick access to pandemic data without leaving their conversation interface."
aashari,mcp-server-atlassian-bitbucket,8,5744,"Bitbucket MCP server that provides tools for managing repositories, pull requests, and workspaces through Atlassian's REST APIs. Built with TypeScript and featuring robust error handling, pagination support, and detailed logging, it enables AI assistants to list workspaces, browse repositories, and interact with pull requests. The implementation uses a controller-service architecture with standardized formatters for consistent markdown output, making it particularly valuable for developers who want to monitor and manage Bitbucket resources directly through conversational AI."
abdelstark,bitcoin-mcp,30,1749,"This MCP server provides integration with Bitcoin, enabling interactions with the Bitcoin network and blockchain data. Developed using TypeScript and the Model Context Protocol SDK, it offers functionality for querying transaction data, wallet information, and network statistics. The implementation focuses on providing a standardized interface for Bitcoin operations, supporting use cases such as transaction monitoring, wallet management, and blockchain analysis. By leveraging the Blockstream API, it allows AI models to access real-time Bitcoin data, making it valuable for financial applications, cryptocurrency tracking, and blockchain-based decision-making systems."
abdelstark,lightning-mcp,3,1413,"This Nostr MCP server, developed by an unspecified author, enables AI agents to interact with the Nostr decentralized social network protocol. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for posting notes and interacting with Nostr relays. The implementation focuses on simplifying Nostr interactions, offering functionality to publish content to the network. It integrates with LNbits for Lightning Network payments, allowing for potential monetization of posts. This server is particularly useful for applications requiring programmatic Nostr engagement, enabling use cases such as automated content publishing, social media management, and decentralized communication without directly dealing with Nostr protocol complexities."
abdelstark,nostr-mcp,25,,"This Nostr MCP server enables AI agents to interact with the decentralized Nostr social network protocol. Built with TypeScript using the Model Context Protocol SDK, it provides a streamlined interface for posting notes and connecting to Nostr relays. The implementation focuses on simplifying Nostr interactions for AI systems, offering core functionality to publish content to the network. It supports both stdio and SSE server modes for flexibility in different environments. This server is particularly useful for applications requiring programmatic Nostr engagement, enabling use cases such as automated content publishing, social media management, and decentralized communication without directly handling Nostr protocol complexities."
abhi5h3k,mcp-email-verify,1,,"MCP-Email-Verify provides a tool for validating email addresses using the Abstract API service. The server exposes a single function that checks email validity, deliverability, and quality through comprehensive validation including format checking, SMTP verification, and identification of disposable or role-based addresses. This implementation is particularly useful for applications requiring email validation to reduce bounces, prevent fake signups, and ensure data quality in forms or user registration flows."
abhi5h3k,mcp-url2snap,1,,"URL2SNAP is an MCP server that captures screenshots of websites through the Abstract API. It provides a simple tool that takes a URL as input and returns a local URL to access the captured screenshot. The implementation handles API requests, image processing, and local file storage, making it useful for applications that need to visualize web content without requiring users to visit the actual websites. The server runs on port 8011 and saves screenshots to a local directory for easy access."
abhijeetka,mcp-k8s-server,5,,"The MCP Kubernetes Server provides a bridge between Large Language Models and Kubernetes clusters through a set of specialized tools. Built with Python using the FastMCP framework, it wraps kubectl commands to enable operations like retrieving pod information, managing deployments, switching contexts, and troubleshooting cluster issues. The server requires a configured kubectl environment and can be integrated with Claude Desktop for seamless natural language interactions with Kubernetes resources. It's particularly valuable for DevOps workflows that benefit from conversational interfaces to Kubernetes, allowing users to create, scale, and monitor resources without remembering exact kubectl syntax."
abhinav-mangla,think-tool-mcp,0,358,"Think Tool server provides a structured way for AI assistants to maintain an explicit thought process through a session. It exposes tools for recording thoughts, retrieving the thought history, and clearing the thought log when needed. Built with TypeScript and the MCP protocol, it helps AIs break down complex reasoning tasks, verify policy compliance, and analyze tool outputs by maintaining a persistent memory of their thinking process."
abhinav7895,system-mcp,0,,"A Model Context Protocol server for real-time system monitoring, providing CPU, memory, disk, network, battery, and internet speed metrics via the systeminformation library. Developed by Abhinav, this implementation exposes both a resource endpoint for comprehensive system snapshots and individual tools for targeted metrics retrieval. The server uses multi-source speed tests from various providers to deliver reliable internet performance measurements, making it particularly useful for diagnosing performance issues, monitoring resource utilization, and tracking network connectivity without leaving the AI assistant conversation."
abhirockzz,mcp_cosmosdb_go,2,,"This MCP server implementation provides tools for interacting with Azure Cosmos DB databases using Go. Built with the Azure SDK for Go, it enables AI assistants to perform common Cosmos DB operations including listing databases and containers, executing SQL queries, reading container metadata, creating containers, and managing items. The implementation supports both key-based authentication and Azure managed identities, making it flexible for different deployment scenarios. It's particularly useful for applications that need to integrate AI capabilities with document database operations, allowing natural language interaction with Cosmos DB resources without requiring users to write complex database code."
abhirockzz,mcp_kusto,1,,"An MCP server for Azure Data Explorer (Kusto) that enables AI assistants to interact with Kusto clusters through the Azure SDK for Go. It provides tools for listing databases, tables, retrieving table schemas, and executing KQL queries against Azure Data Explorer databases. The implementation uses DefaultAzureCredential for authentication, making it secure and simple to use with local developer credentials or service principals. Ideal for data analysts and engineers who want to leverage AI assistants for exploring and analyzing data in Azure Data Explorer clusters."
abhishekbhakat,airflow-mcp-server,11,4576,"Airflow MCP Server provides a bridge between Claude and Apache Airflow, enabling direct interaction with Airflow workflows through the API. Built by Abhishek Bhakat, it supports both read-only (safe) and full-access (unsafe) operation modes, allowing users to list DAGs, check statuses, trigger runs, and manage Airflow resources without leaving their conversation interface. The implementation parses the Airflow OpenAPI specification to dynamically generate tools, supports both token and cookie-based authentication, and handles parameter validation - making it particularly valuable for DevOps teams who need to monitor and control workflow orchestration through natural language."
abhishekbhakat,mcp_server_code_assist,1,4987,"This MCP server implementation, developed for code modification and generation tasks, provides a set of tools for AI assistants to create, modify, delete, and rewrite code files. Built with Python and leveraging libraries like aiofiles, gitpython, and xmlschema, it offers a standardized XML-based interface for instructing code changes. The implementation focuses on file operations, search-and-replace modifications, and version control integration, making it accessible for AI models to perform complex code editing tasks. It's particularly useful for automated code refactoring, codebase maintenance, or integrating AI-driven code generation into existing projects, allowing assistants to manipulate code without requiring deep knowledge of file system operations or version control complexities."
abhishekjairath,sonic-pi-mcp,3,548,"A Model Context Protocol server that allows AI assistants to interact with Sonic Pi through OSC messages, enabling programmatic music creation and sound manipulation. The server provides tools for playing individual notes with customizable synth parameters and executing arbitrary Sonic Pi code, making it valuable for AI-assisted music composition, sound design, and educational scenarios. Developed by Abhishek Jairath, it works with any MCP-compatible client like Claude Desktop or Cursor, and requires Sonic Pi to be running with a specific OSC handler code to receive and execute the commands."
abhiz123,todoist-mcp-server,144,7215,"This MCP server, developed by abhiz123, enables natural language task management in Todoist through AI assistants like Claude. It provides tools for creating, retrieving, updating, completing, and deleting tasks using conversational language. The server leverages Todoist's API to translate natural language commands into precise Todoist operations, supporting features like smart task search, flexible filtering, and rich task details. By bridging AI capabilities with Todoist's task management system, this implementation enhances productivity workflows, allowing users to manage their tasks more intuitively. It is particularly useful for scenarios requiring hands-free task management, quick capture of ideas, or AI-assisted organization of complex projects within Todoist."
aborroy,alfresco-mcp-poc,3,,"This Alfresco MCP Proof of Concept, developed by aborroy, demonstrates integration of Alfresco's content management capabilities with AI applications using the Model Context Protocol. Built using Java and Node.js, it combines a standard Alfresco deployment with custom MCP client and server components. The implementation leverages Spring AI and the TypeScript SDK to connect Alfresco's document management features to AI workflows. It's particularly useful for organizations looking to enhance their Alfresco-based content repositories with AI capabilities, enabling use cases like intelligent document processing, automated metadata extraction, and content-aware chatbots without extensive custom development."
abutbul,gatherings-mcp,0,,"Gatherings MCP Server provides a tool for managing shared expenses in social events, helping users track costs, calculate reimbursements, and settle balances between friends. Built with a TypeScript wrapper around a Python backend using SQLAlchemy for data persistence, it offers features like creating gatherings, adding expenses, recording payments, and calculating who owes what to whom. The server uses a non-standard architecture where the Node.js component translates MCP requests to command-line calls to the Python implementation, making it suitable for personal expense tracking in group settings while acknowledging areas for architectural improvement."
abutbul,gatherings-mcp-python,0,,"This MCP server implementation provides a robust expense-sharing solution for social gatherings. Built with Python and SQLAlchemy, it offers tools for creating gatherings, managing members, tracking expenses, calculating reimbursements, and generating detailed payment summaries. The server employs a structured database model and includes features like member renaming and gathering closure. It's designed for use cases such as splitting costs for group trips, dinners, or any event where expenses need to be fairly divided among participants."
ac3xx,mcp-servers-kagi,29,,"Developed by ac3xx, this server provides an interface for language models to perform web searches using Kagi's search engine. It enables AI agents to query Kagi's API and retrieve search results through a controlled MCP server. Built in TypeScript, the implementation currently focuses on basic web search functionality, with plans to expand to other Kagi features like text summarization and enriched news results. The server handles API authentication and request formatting. By leveraging Kagi's privacy-focused search capabilities, this implementation is particularly useful for AI assistants needing to access current web information, conduct research, or provide search results while respecting user privacy preferences."
acashmoney,bio-mcp,8,,"BioMCP is a Model Context Protocol (MCP) server designed to enhance large language models with protein structure analysis capabilities. It provides tools for analyzing protein active sites and searching for disease-related proteins by interfacing with established protein databases.

Future work will be centered around enabling agents to utilize the BioMCP."
acryldata,mcp-server-datahub,14,,"This MCP server implementation provides a bridge to DataHub, a metadata platform for data ecosystems. Developed by Acryl Data, it integrates with the DataHub API to offer tools for entity retrieval and search functionality across various data assets. The server is designed for use cases requiring metadata management and discovery in complex data environments, such as data cataloging, lineage tracking, and governance."
acxelerator,mcp-tenki,0,,"This MCP server, developed by acxelerator, provides weather information for Japan. It integrates with an external weather API to retrieve current conditions and forecasts. The implementation is built using Python and leverages libraries like httpx for API requests and pydantic for data validation. It offers a straightforward interface for querying weather data by location within Japan. This server is particularly useful for applications or AI assistants that need up-to-date weather information for Japanese cities, enabling use cases such as travel planning, event scheduling, or local news and information services."
adamikhq,adamik-mcp-server,0,,"This MCP server implementation provides a bridge to the Adamik API, enabling AI assistants and other MCP-compatible clients to interact with Adamik's services. Developed by AdamikHQ, it supports integration with Starknet for blockchain operations. The server is designed to work seamlessly with Claude Desktop and other MCP environments, offering a straightforward setup process. It's particularly useful for AI applications requiring access to Adamik's specialized services, such as blockchain interactions or custom AI functionalities provided by the Adamik platform. The implementation focuses on secure API key management and efficient request handling, making it suitable for both development and production environments."
adam-paterson,mcp-crew-ai,6,,"A lightweight Python server for running CrewAI multi-agent workflows through the Model Context Protocol. Designed to automatically load agent and task configurations from YAML files, enabling flexible AI task orchestration with minimal custom code. Supports dynamic agent and task creation, variable templating, and seamless integration with tools like Claude Desktop or Cursor IDE."
adampippert,multi-service-mcp-server,3,,"This modular MCP server implementation provides a standardized way for AI models to interact with external tools and services through a unified gateway. It includes five specialized tools: GitHub for repository management, GitLab for project interactions, Google Maps for location services, Memory for persistent data storage, and Puppeteer for web automation. Built with Flask and designed for deployment on Red Hat environments, it features containerized deployment options using Podman or Docker, comprehensive error handling, and seamless integration with OpenAI and Anthropic LLMs through standardized request/response formats."
adamrtalbot,mcp-nextflow,0,,"Nextflow Developer Tools MCP provides a suite of tools for Nextflow development and testing, built with FastMCP. It enables AI assistants to interact with a local Nextflow repository to perform tasks like building from source, running tests (integration, specific, and plugin tests), executing the development version, and managing the development directory. The implementation includes comprehensive logging, error handling, and environment variable configuration, making it particularly valuable for developers working on Nextflow pipelines who want to streamline their workflow without leaving their AI assistant interface."
adamsilverstein,lighthouse-mcp-server,0,,"A Lighthouse MCP server that provides AI assistants with access to Google PageSpeed Insights API data. It enables running performance audits on web pages, retrieving detailed metrics like First Contentful Paint and Largest Contentful Paint, and identifying optimization opportunities. The server exposes a single tool that accepts URL parameters, strategy selection (mobile/desktop), and category filtering, making it valuable for web developers looking to analyze and improve site performance without leaving their AI assistant conversation."
adamwattis,resource-hub-server,2,,"This Resource Hub MCP server, developed by Adam Wattis, acts as a proxy between local MCP environments and a centralized Resource Hub. It enables access to shared tools, configurations, and resources across different environments, streamlining MCP server management. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers features like centralized configuration, environment variable-based authentication, and compatibility with Claude Desktop. The server includes debugging tools through the MCP Inspector and supports easy deployment via npx. By centralizing resource management, it facilitates consistent tool access and configuration sharing, making it particularly valuable for teams and organizations requiring standardized MCP setups across multiple environments or projects."
adamwattis,mcp-proxy-server,73,,"This MCP proxy server, developed by Adam Wattis, aggregates multiple MCP resource servers into a unified interface. It connects to and manages multiple backend servers, exposes their combined capabilities, handles request routing, and aggregates responses. The implementation features resource management across servers, tool aggregation and routing, and multi-server prompt handling. By centralizing access to distributed MCP resources, this proxy enables more flexible and scalable AI assistant deployments. It is particularly useful for organizations managing multiple specialized MCP servers or those looking to modularize their AI infrastructure while maintaining a single point of access for clients."
adarshp14,google-form-mcp-server,4,,"Google Forms MCP Server enables AI assistants to create and manage Google Forms through natural language requests. Built with Python and Flask, it features a two-tier architecture with an MCP server handling Google Forms API operations and a CamelAIOrg agent layer that processes natural language into structured form creation commands. The implementation includes real-time visualization of the request flow, comprehensive error handling, and support for various question types. It's particularly useful for automating form creation workflows, enabling quick generation of surveys, feedback forms, and event registrations without requiring direct interaction with the Google Forms interface."
adenot,mcp-google-search,13,2227,"This MCP server, developed by Allan Denot, provides web search capabilities using the Google Custom Search API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined interface for AI agents to perform web searches. The implementation focuses on simplifying the integration of Google's search functionality into AI workflows, requiring only an API key and search engine ID for setup. It's particularly useful for applications needing up-to-date web information, enabling use cases such as fact-checking, research assistance, and content generation without directly interacting with Google's API complexities."
adeosec,mcp-shodan,6,,"Shodan MCP Server provides cybersecurity analysts with direct access to Shodan's network intelligence capabilities through the Model Context Protocol. Developed by ADEO Cybersecurity Services, it exposes a comprehensive set of tools for host information lookup, DNS operations, vulnerability analysis, network scanning, and security alerts management. The implementation includes specialized prompt templates for common cybersecurity workflows like asset discovery, vulnerability assessment, and ICS analysis, making it particularly valuable for security reconnaissance, threat hunting, and infrastructure monitoring without leaving the AI assistant conversation."
adepanges,teamretro-mcp-server,0,837,"TeamRetro MCP Server provides a bridge between AI assistants and TeamRetro's team management platform, enabling operations like team creation, user management, and member administration through natural language. Built by Ade Pangestu, it implements authentication via API keys, basic auth, or bearer tokens, and formats responses as either simple tables or raw JSON. The server exposes tools for listing, creating, updating, and deleting teams and users, with planned support for retrospectives, action tracking, health checks, and analytics. This unofficial integration is particularly valuable for team leaders who need to manage TeamRetro resources without switching context from their AI assistant conversation."
adexltd,mcp-google-suite,1,,"MCP server that provides AI assistants with direct access to Google Workspace (Drive, Docs, and Sheets) operations. Built with Python and the MCP protocol, it features OAuth authentication, configurable logging, and support for multiple transport modes (stdio, SSE, WebSocket). The server exposes tools for searching and creating files, managing documents and spreadsheets, and organizing content, making it valuable for users who need to interact with Google Workspace through AI assistants without manual API configuration."
adfin-engineering,mcp-server-adfin,4,,"The Adfin MCP server enables Claude to interact with Adfin's financial management platform through its public APIs, allowing users to perform tasks like checking credit control status, creating invoices, and uploading invoice documents. Built with FastMCP, it dynamically generates API tools by importing Adfin's API documentation and registering each endpoint as a separate function, while also providing specialized file system tools for managing invoice uploads from the user's desktop. The implementation includes automatic token refresh handling and is designed to be easily configured in Claude Desktop through environment variables, making it particularly valuable for financial professionals who need to perform Adfin operations without leaving their conversation interface."
adhikasp,mcp-linkedin,61,,"This MCP server, developed by Adhika Setya Pramudita, provides tools to interact with LinkedIn's Feeds and Job API using an unofficial LinkedIn API. It enables users to retrieve feed posts, search for jobs, and analyze job matches against resumes. The implementation uses Python 3.7+ and integrates with libraries like linkedin-api and fastmcp. It's designed for easy configuration through environment variables and can be run using uvicorn. This server is particularly useful for developers building LinkedIn-integrated applications, job search tools, or AI assistants that need to access LinkedIn data and functionality."
adhikasp,mcp-git-ingest,131,,"This MCP server, developed by adhikasp, enables AI assistants like Claude to fetch and analyze GitHub repository structures and contents. Built in Python, it provides capabilities for cloning repositories, generating directory trees, and reading specified files. The implementation stands out by offering deterministic temporary directory creation, Unicode tree representation, and flexible file reading with robust error handling. By connecting AI capabilities with GitHub's vast ecosystem of code repositories, this server allows AI systems to explore codebases, analyze project structures, and access important files programmatically. It is particularly useful for building AI-powered code analysis tools, automated documentation generators, and intelligent assistants for software development workflows that need to interact with GitHub repositories."
adhikasp,mcp-twikit,141,,"This MCP server, developed by adhikasp, integrates with Twitter's API to enable AI assistants to interact with the social media platform. It provides tools for searching tweets, retrieving timelines, and analyzing sentiment across multiple accounts. The server stands out by offering a simplified interface for complex Twitter operations, making it easier for AI systems to process and respond to social media data. By connecting AI capabilities with Twitter's vast user-generated content, this implementation empowers AI assistants to handle tasks like social media monitoring, trend analysis, and customer sentiment tracking. It is particularly useful for applications in brand management, market research, or any scenario where an AI system needs to work with real-time social media data."
adhikasp,mcp-reddit,51,,"This Reddit MCP server, developed by adhikasp, provides AI assistants with a standardized interface to interact with Reddit content. Built using Python and leveraging libraries like PRAW and RedditWarp, it offers capabilities for fetching hot threads, detailed post content, and comments from any subreddit. The server supports different post types including text, links, and galleries. It's designed for flexibility, allowing easy installation and usage through the MCP client CLI. This implementation is particularly valuable for AI assistants focused on social media analysis, content curation, and trend monitoring, enabling use cases such as summarizing popular discussions, tracking emerging topics, and analyzing user engagement across Reddit communities."
zo-valentine,mcp-twikit,0,,"MCP-Twikit provides Twitter search and interaction capabilities for AI assistants through the FastMCP framework. Built by Adhika Setya Pramudita, it leverages the Twikit library to enable both read operations (searching tweets, viewing timelines, retrieving user tweets) and write operations (posting tweets, sending direct messages) with built-in rate limiting. The implementation authenticates using Twitter credentials stored as environment variables, manages cookies for persistent sessions, and formats tweet data in markdown for easy readability, making it ideal for workflows requiring Twitter monitoring, social media analysis, or automated Twitter interactions."
adhikasp,mcp-youtube,12,,"This MCP server, developed by adhikasp, enables AI assistants like Claude to fetch and analyze YouTube video transcripts. Built in Python, it provides capabilities for downloading subtitles from YouTube videos using either video IDs or full URLs, and includes timestamp information. The implementation stands out by offering a standardized interface to YouTube's transcript data, allowing AI systems to easily access and process video content. By connecting AI capabilities with YouTube's vast repository of video transcripts, this server enables automated content analysis, subtitle generation, and video summarization. It is particularly useful for building AI-powered tools for video research, content moderation, and educational applications that leverage YouTube's extensive library."
adiletd,feature-request-collection-mcp,0,,"The Supabase MCP Server connects AI assistants to a Supabase database, allowing them to query feature suggestions stored in the database. Built with TypeScript using the Model Context Protocol SDK, it provides a single tool called 'query_feature_suggestions' that retrieves records from the feature_suggestions table with optional limit parameters. The server includes robust error handling and logging capabilities, making it ideal for workflows where AI assistants need to access, analyze, or present feature request data directly within conversations without requiring manual database queries."
adityak74,mcp-scholarly,82,,"This mcp-scholarly server, developed by Aditya Karnam, provides a standardized interface for searching academic articles through the arXiv database. Built with Python and leveraging the arxiv library, it offers a tool to query arXiv based on keywords. The server integrates seamlessly with Claude Desktop, abstracting the complexities of academic search into a consistent MCP interface. By enabling AI systems to access and analyze scholarly literature, this implementation facilitates use cases such as literature reviews, research assistance, and staying up-to-date with the latest publications in specific fields. The server is designed for easy deployment and debugging, making it valuable for researchers and developers building AI-powered tools that interact with academic content."
adrian-dotco,harvest-mcp-server,0,244,"This MCP server implementation provides natural language time tracking integration with Harvest, enabling AI assistants to interact with Harvest's time tracking and project management features. Developed by Adrian, it offers tools for managing projects, tracking time entries, and handling leave requests. Built with TypeScript and leveraging the Model Context Protocol SDK, the server focuses on secure credential management through environment variables and supports easy configuration within AI assistant environments. It is particularly useful for automating time tracking workflows, streamlining project management tasks, and integrating Harvest operations into AI-assisted work processes. The implementation includes features like natural language parsing for time entries and customizable work day hours and leave types."
adspower,local-api-mcp-typescript,10,,"AdsPower Local API MCP Server provides a TypeScript interface for controlling AdsPower browser profiles through the Model Context Protocol. This implementation enables AI assistants to manage browser profiles by offering tools for creating, updating, opening, and deleting browsers with customizable fingerprints and proxy configurations. It also includes functionality for managing browser groups and retrieving application information. Built with a modular architecture using axios for API requests, the server communicates with AdsPower's local API endpoint, making it ideal for automated browser profile management in web scraping, testing, or multi-account workflows."
ad-veritas,mcp-server-truerag,2,,"This Model Context Protocol server, developed for integrating with a GraphQL API for policy queries, provides AI assistants with access to state-specific policy information. Built using Python with FastMCP, GQL, and AIOHTTPTransport, it offers tools for connecting to the GraphQL endpoint, generating queries based on user descriptions, and executing those queries. The server implements environment-based configuration for API key management and includes features like schema fetching and query generation assistance. By abstracting the complexities of GraphQL interactions into a standardized MCP interface, it enables AI systems to easily access and analyze policy data across different states. This implementation is particularly valuable for applications requiring up-to-date policy information, facilitating use cases such as legal compliance checks, policy analysis, and state-specific regulatory guidance."
pab1it0,adx-mcp-server,24,,"The Azure Data Explorer MCP Server provides AI assistants with direct access to Azure Data Explorer (ADX) clusters and databases through standardized MCP interfaces. Built with Python using FastMCP, it enables executing KQL queries, discovering database resources, exploring table schemas, and sampling data from tables. The implementation supports authentication via client credentials or default Azure credentials and includes tools for listing tables, retrieving schemas, and executing custom queries. Ideal for AI workflows that need to analyze data stored in ADX, generate insights from logs and metrics, or help users explore their ADX resources."
aeon-seraph,searxng-mcp,1,,"This MCP server enables language models to perform web searches through SearXNG, a privacy-focused metasearch engine. Built with TypeScript and the Model Context Protocol SDK, it provides a clean interface for sending search queries with customizable parameters like categories, time ranges, and pagination. The server includes caching functionality to improve performance and can be configured via environment variables for connection settings. It's designed to run either directly via Node.js or as a Docker container, making it flexible for various deployment scenarios."
afrise,academic-search-mcp-server,25,,"This MCP server provides academic paper search and retrieval functionality across multiple sources like Semantic Scholar and Crossref. Built with Python using the FastMCP framework, it offers tools for searching papers, fetching detailed metadata, and filtering by topic and date range. The implementation focuses on delivering structured academic information through a standardized interface, making it particularly useful for AI assistants and applications that require access to scientific literature. By connecting to established academic APIs, this server enables use cases such as literature reviews, research trend analysis, and citation management, enhancing the capabilities of AI models in academic and research contexts."
afshawnlotfi,mcp-configurable-puppeteer,1,,"This Configurable Puppeteer MCP server enables AI assistants to automate browser interactions through a set of tools for navigation, screenshots, clicking, form filling, and JavaScript execution. Developed by Afshawn Lotfi as a modified version of Anthropic's original implementation, it uniquely allows customization of Puppeteer launch options through environment variables, supporting both Chrome and Firefox browsers with configurable viewport sizes and other browser parameters. The server captures console logs and screenshots as resources, making it ideal for web testing, data extraction, form automation, and interactive web demonstrations without requiring code modifications to adapt to different browser environments."
weotzi,browser-tools-mcp,0,,"Browser Tools MCP provides a bridge between AI assistants and web browsers, enabling real-time access to console logs, network requests, screenshots, and DOM elements through a Chrome extension and server architecture. The implementation includes Lighthouse-powered audit capabilities for accessibility, performance, SEO, and best practices, with AI-optimized reporting that prioritizes critical issues. Built by AgentDesk AI, it uses WebSocket communication for live updates and includes a Puppeteer service for cross-platform browser automation, making it valuable for debugging web applications, analyzing performance issues, and improving site accessibility without leaving the AI conversation interface."
HEAD,mcp-server,10,672,"DevTools MCP server provides specialized tools for software development workflows through a data-driven configuration system. Built with TypeScript and the MCP SDK, it loads tool configurations from YAML files in preset categories like thinking, coding, and GitHub integration, while supporting custom tool definitions through .workflows directories. The implementation features typed parameters, sequential/situational tool modes, and flexible prompt templating - making it particularly valuable for developers who want to integrate AI assistance directly into their development process without leaving their workflow."
packages,mcp,35,828,"✨ Features
Connect to Ethereum, Optimism, Arbitrum & Polygon
Play with DeFi (Aave, DEXs, etc.)
Look up ENS domains, transfer tokens, check security
Get crypto news and market data
🧰 Tools
Tokens (ERC20, WETH)
DeFi (trading, lending)
Block explorers
Governance tools
Security checks
Basic web tools
All Agentek tools based on keys you provide.
"
agentience,practices_mcp_server,2,,"Practices MCP server extracts and standardizes development practices from the Tribal project into a reusable server implementation. Built with Python, it provides tools for managing Git workflows including branch validation, version management, and PR preparation, while integrating with GitHub and Jira MCP servers to automate common development tasks. The server is particularly valuable for teams looking to enforce consistent development practices and reduce manual workflow steps through configurable automation."
agentience,tribal_mcp_server,2,2282,"Tribal is an MCP server implementation for error knowledge tracking and retrieval, providing both REST API and native MCP interfaces for integration with tools like Claude Code and Cline. Developed by Troy Molander at Agentience.ai, it uses ChromaDB for vector similarity search to help AI assistants remember and learn from programming errors, storing error contexts with solutions and finding similar errors via semantic search. The server features JWT authentication, local and cloud storage options, and Docker deployment capabilities, making it ideal for development teams wanting to build a shared knowledge base of programming errors and solutions."
agentrpc,agentrpc,57,2182,"AgentRPC allows you to connect to any function, in any language, across network boundaries. It's ideal when you have services deployed in:

Private VPCs
Kubernetes clusters
Multiple cloud environments
AgentRPC wraps your functions in a universal RPC interface, connecting them to a hosted RPC server accessible through open standards:

Model Context Protocol (MCP)
OpenAI-compatible tool definitions (OpenAI, Anthropic, LiteLLM, OpenRouter, etc.)"
agree-able,room-mcp,4,,"This MCP server implementation enables Claude to create and interact with virtual rooms in a peer-to-peer space using the Room protocol. It provides tools for joining rooms with invite codes, sending messages, and exiting rooms. The server integrates with @agree-able/room and @agree-able/invite packages to handle room creation and invitation management. It's designed to facilitate multi-agent collaboration and communication in decentralized environments."
ahmad2x4,mcp-server-seq,3,,"This MCP server implementation provides a bridge to Seq's API, enabling comprehensive access to logging and monitoring features. Developed to enhance interaction with Seq's powerful event management system, it offers tools for retrieving signals, events, and alert states with extensive filtering options. The server is designed for seamless integration with Claude Desktop, allowing users to leverage Seq's capabilities within AI-assisted workflows. It is particularly useful for DevOps teams and system administrators who need real-time insights into their application logs and system performance metrics."
ahnlabio,bicscan-mcp,1,,"BICScan MCP Server provides a bridge to the BICScan API for assessing risk and analyzing assets across blockchain addresses, domains, and decentralized applications. Built with Python and FastMCP, it exposes tools for retrieving risk scores (0-100 scale) and detailed asset holdings information, with robust error handling and logging capabilities. This implementation is particularly valuable for blockchain security analysts and compliance teams who need to evaluate cryptocurrency addresses and monitor digital assets through natural language interaction."
ahodroj,mcp-iceberg-service,3,,"MCP Iceberg Catalog provides a SQL interface for querying and managing Apache Iceberg tables through Claude desktop. The server connects to Iceberg REST catalogs and S3-compatible storage, supporting operations like listing tables, describing schemas, executing SELECT queries, and inserting data. Built with PyIceberg and PyArrow for efficient data handling, it translates SQL commands to Iceberg operations and manages catalog connections transparently. This implementation is particularly valuable for data analysts and engineers who need to interact with data lakes directly through conversational AI without switching contexts."
ahonn,mcp-server-gsc,17,1045,"This MCP server, developed by ahonn, provides AI assistants like Claude with access to Google Search Console data. It offers tools for retrieving search analytics information with customizable parameters such as date ranges, dimensions, and search types. The server leverages Google Cloud authentication for secure API access. By integrating AI capabilities with Google Search Console insights, this implementation enables data-driven SEO analysis and website performance optimization. It is particularly useful for scenarios requiring trend analysis, keyword research, or automated reporting of search traffic metrics in AI-assisted digital marketing and web analytics applications."
ahujasid,ableton-mcp,1337,16571,"Ableton MCP enables AI assistants to control Ableton Live music production software through a bidirectional communication system. It consists of a Remote Script that runs within Ableton Live and exposes a socket server, paired with a Python MCP server that translates commands into actions. The implementation supports a wide range of music production operations including creating tracks and clips, adding MIDI notes, controlling playback, loading instruments, and browsing the Ableton library. Developed by Siddharth Ahuja, this integration is particularly valuable for AI-assisted music composition, production workflows, and automated sound design without leaving the conversation interface."
ahujasid,blender-mcp,9998,403413,"BlenderMCP enables Claude to control Blender through the Model Context Protocol, allowing for natural language manipulation of 3D scenes. The implementation consists of a Blender addon that creates a socket server and an MCP server that communicates with it, exposing resources and tools for scene inspection, object creation/manipulation, material application, and rendering. Users can create and modify 3D content through conversational prompts without needing to know Blender's interface or Python API, making it ideal for rapid prototyping, educational purposes, or assisting users unfamiliar with 3D modeling software."
ai-agent-hub,ai-agent-marketplace-index-mcp,7,,"AI Agent Marketplace Index MCP Server provides tools for searching and listing AI agents by keywords or categories, allowing AI assistants to discover available agents for specific tasks like coding, HR, finance, or healthcare. Developed by DeepNLP, it features a search API that returns detailed agent information including descriptions, websites, and performance metrics such as Google/Bing rankings and GitHub stars. The server is designed for easy integration with Claude Desktop and other MCP-compatible clients, making it valuable for users seeking specialized AI agents for particular use cases."
ai-fe,dify-mcp-server,33,,"This Dify MCP server, developed for integrating Dify's AI capabilities with the Model Context Protocol, provides a bridge between Dify's API and MCP-compatible clients. Built with TypeScript and leveraging the MCP SDK, it enables AI assistants to interact with Dify's features, including text generation and potentially other AI services. The implementation focuses on efficient API communication, handling streaming responses, and managing authentication. It's particularly useful for developers looking to incorporate Dify's AI capabilities into MCP-based systems, allowing for seamless integration of Dify's functionalities without deep knowledge of its API intricacies."
aindreyway,mcp-codex-keeper,59,4204,"The MCP Codex Keeper, developed by aindreyway, serves as an intelligent guardian of development knowledge for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides curated access to the latest documentation and best practices. The server integrates with external resources to maintain up-to-date information, offering a standardized interface for AI systems to query and retrieve relevant development knowledge. It's designed for flexibility, supporting various programming languages and frameworks through its modular architecture. This implementation is particularly valuable for enhancing AI-assisted software development, enabling use cases such as code generation, bug fixing, and providing context-aware programming advice."
aindreyway,mcp-neurolora,14,4407,"This MCP server, developed by aindreyway, streamlines the process of collecting and documenting code from directories. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a command-line interface for efficient code extraction and documentation generation. The server is designed for flexibility, supporting various file types and directory structures through customizable configuration options. It's particularly valuable for developers and teams working on large-scale projects, enabling use cases such as automated code documentation, project structure analysis, and codebase overview generation. The implementation's focus on TypeScript and modern JavaScript features ensures compatibility with current development practices while providing robust type checking and improved maintainability."
aindreyway,mcp-server-neurolora-p,4,,"This MCP server for code collection and documentation, developed by Aindrey, streamlines the process of gathering code from files and directories into a single markdown document. Built with Python and leveraging the Model Context Protocol SDK, it offers features like customizable ignore patterns, syntax highlighting, and table of contents generation. The server implements robust file system synchronization and comprehensive error handling, providing a standardized interface for code documentation tasks. By abstracting the complexities of file traversal and markdown generation, it enables AI systems to easily create comprehensive code overviews. This implementation is particularly valuable for applications requiring programmatic code documentation, facilitating use cases such as project audits, codebase analysis, and automated documentation generation."
aipotheosis-labs,aipolabs-mcp,27,3192,"ACI.dev is an agent-computer interface (ACI) platform created by Aipolabs that helps developers connect AI agents to applications like Zendesk, Slack, Gmail, or their own internal tools, manage AI agent actions, and discover workflows.

The latest platform feature is a Unified MCP Server that elegantly solves this with a ""discover and execute"" pattern:
1. It exposes just TWO meta tools to your MCP Client:
 - ACI_SEARCH
 - ACI_EXECUTE
2. The Client uses the ACI_SEARCH to dynamically discover relevant tools based on user intent
3. The Client then executes the suitable tools with the ACI_EXECUTE tool

Benefits That Make a Difference ✨ 

⌚ Maximum Context Efficiency: Only two tool definitions in your MCP client’s LLM context window, no matter how many tools are available

🔐 Unified Authentication: One authentication scheme to rule them all – no more juggling credentials across multiple MCP server providers

💣 Zero Name Collisions: Eliminate tool naming conflicts when combining tools from different MCP Servers

🔎 Intelligent Tool Discovery: The server automatically finds the perfect tools for each specific task

♾️ Unlimited Tool Access: Your LLM can use ANY tools from the ACI.dev platform."
airjlee,stock-llm,0,,"Stock-LLM is an MCP server that enhances LLM interactions with real-time stock market data through Yahoo Finance. It provides tools for retrieving current stock prices, financial statements, company information, earnings reports, and news about specific stocks. The implementation uses FastMCP to create a server that processes stock-related queries, while the client component employs vector search and LLM-based ticker extraction to identify relevant companies in user queries. This enables AI assistants to provide informed responses about stocks, including price information, company fundamentals, and recent news, making it valuable for financial analysis and investment research conversations."
wizd,airylark-mcp-server,6,,Airylark MCP Server provides translation capabilities for AI applications through a Node.js implementation. It integrates with external translation APIs to enable seamless language conversion within the Model Context Protocol framework. The server is containerized with Docker for easy deployment and configured through environment variables to support different translation models and API endpoints. Ideal for multilingual AI applications that need to process text in various languages.
minio,mcp-server-aistor,19,,"An MCP server implementation for AIStore, a distributed object storage system designed for AI workloads."
aiven-open,mcp-aiven,5,,"The Aiven MCP Server provides AI assistants with direct access to Aiven's cloud database and messaging services through the Aiven API. It exposes tools for listing projects, services, and retrieving detailed service information for PostgreSQL, Kafka, ClickHouse, Valkey, and OpenSearch running in the Aiven ecosystem. Built with FastMCP and requiring minimal configuration through environment variables, this server enables LLMs to interact with and manage cloud data infrastructure, making it valuable for building full-stack solutions that require database operations without leaving the AI assistant interface."
ai-yliu,filesystem-mcp-server,1,,"This MCP server implementation provides filesystem operations for AI assistants. Developed by ai-yliu, it offers tools for reading, writing, and manipulating files and directories, with built-in security measures to restrict access to specified directories. The server is designed for use cases requiring AI-assisted file management, content analysis, or automated file system interactions within allowed directories."
aiyogg,tinypng-mcp-server,2,,"TinyPNG MCP server provides image optimization capabilities through the TinyPNG API, enabling compression and resizing of both local and remote images. The implementation offers three main tools: compressing local images, compressing remote images via URL, and resizing images with various methods (scale, fit, cover, thumb). Built by Chuck, this server requires a TinyPNG API key and returns detailed compression statistics including original size, compressed size, and compression ratio, making it ideal for workflows that need efficient image optimization without quality loss."
ai-zerolab,mcp-email-server,20,15618,MCP email server implementation that provides IMAP and SMTP functionality. Integrates with existing email providers to allow AI assistants to send and receive emails on behalf of users. Includes a configuration UI and supports deployment via Docker. Useful for automating email-based workflows and enabling AI agents to manage email communications.
ai-zerolab,mcp-toolbox,11,23749,"This MCP server implementation provides a comprehensive toolbox for enhancing Large Language Models (LLMs) through various API integrations and utilities. Developed by ai-zerolab, it offers tools for executing command line instructions, interacting with Figma files, and performing file operations. The server is designed with an extensible architecture, allowing easy addition of new API integrations. It supports Claude Desktop and other MCP-enabled LLMs, making it suitable for a wide range of use cases including UI/UX design workflows, automated file management, and enhanced LLM interactions with external services."
ai-zerolab,yourware-mcp,1,4812,"Yourware MCP is a server that enables AI assistants to upload projects directly to yourware.so, a web hosting platform. Developed by Wh1isper, it provides tools for authenticating with the Yourware API, checking credentials, and uploading single files or entire directories with automatic compression. The implementation supports multiple transport methods (stdio and SSE) and integrates with AI assistants like Claude through configurations for Cursor, Cline, and other MCP-compatible clients. This server is particularly useful for developers who want to quickly showcase their web projects online without leaving their development environment."
ajbr0wn,gmail-mcp-server,7,,"This Gmail MCP server, developed by AJ Brown, integrates Gmail functionality into AI assistants using the Model Context Protocol. It provides secure access to Gmail inbox contents and search capabilities through OAuth2 authentication with the Gmail API. The server offers tools for viewing recent emails and performing advanced searches using Gmail's query syntax. By connecting AI capabilities with email management, this implementation enables assistants to analyze inbox contents, find specific messages, or automate email-related tasks. It is particularly useful for applications requiring email content analysis, personal information management, or any scenario where an AI system needs to interact with and reason about email data while maintaining user privacy and security."
akash-network,mcp,4,,"Akash MCP Server is a TypeScript implementation that bridges AI agents with the Akash Network, enabling deployment and management of decentralized applications through typed tools. Developed by Overclock Labs, it provides essential functionality for interacting with Akash's blockchain-based cloud computing marketplace, including wallet authentication, certificate management, deployment creation, bid management, and lease operations. The server leverages the Model Context Protocol to standardize communication between AI models and Akash services, making it particularly valuable for AI assistants that need to programmatically deploy applications, manage cloud resources, or interact with decentralized infrastructure without requiring deep technical knowledge of the Akash ecosystem."
akazwz,mcp-figma,10,,"This MCP server implementation integrates with the Figma API, enabling AI assistants to interact with Figma design files and projects. Developed by akazwz, it leverages TypeScript and the @modelcontextprotocol/sdk to provide a bridge between AI models and Figma's design capabilities. The implementation is useful for automating design tasks, analyzing Figma projects, or enabling AI-assisted design workflows within the Figma ecosystem."
akc2267,solana-mcp-server,0,,"This Solana MCP server, developed by Alex Cheng, provides integration with the Solana blockchain. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with Solana's Web3.js library for blockchain operations. The implementation focuses on providing a standardized interface for Solana transactions and data retrieval, making it easier to incorporate blockchain functionality into AI workflows. It's particularly useful for developers and teams working with Solana who want to automate blockchain interactions, enabling use cases such as automated token transfers, smart contract deployments, and AI-assisted blockchain analytics without deep Solana expertise."
akhidastech,github-agentic-chat-mcp,0,,"GitHub Agentic Chat MCP Server enables natural language interaction with GitHub repositories through a Go-based implementation that integrates with the GitHub API and provides vector search capabilities. It offers tools for searching repositories, creating issues, and performing semantic searches across stored documents using PostgreSQL with pgvector extension. The server connects to Claude Desktop through the Model Context Protocol, making it particularly valuable for developers who want to interact with GitHub and related documentation through conversational AI without leaving their chat interface."
akira-papa,akirapapa-mcp-notion-server,4,,"This MCP server, developed by suekou, enables seamless integration between Notion workspaces and AI systems like Claude Desktop. Built using the Model Context Protocol, it provides a comprehensive set of tools for interacting with Notion's API, including block manipulation, page and database operations, and querying capabilities. The implementation focuses on exposing Notion's features through a standardized interface, offering functionality to create, retrieve, update, and delete various Notion elements. It's particularly useful for organizations looking to incorporate Notion's collaborative workspace features into their AI workflows, enabling use cases such as automated note-taking, knowledge base management, and AI-assisted content creation without directly interacting with Notion's API."
akki91,ankr-mcp,1,254,"Ankr MCP Server provides blockchain data access through the Ankr API, enabling AI assistants to retrieve on-chain information such as token balances across multiple networks. Developed by Akshay Khare, this TypeScript implementation authenticates via an API token and exposes a specialized tool for querying wallet balances that returns detailed asset information including token metadata, amounts, and dollar values. The server handles various error conditions gracefully with custom error classes and is containerized for easy deployment, making it ideal for blockchain analysis, portfolio tracking, and financial applications where LLMs need direct access to distributed ledger data."
akr4,applemusic-mcp-server,1,,"Apple Music MCP Server provides tools for interacting with the Apple Music API, enabling AI assistants to search for songs and generate playback links. Built in Rust using the RMCP library, it authenticates with the Apple Music API using developer credentials and offers a simple command-line interface. The server requires an Apple Developer account with Apple Music API access and supports customizable storefronts, making it particularly useful for music discovery and playback integration in conversational AI applications."
akramsaouri,mcp-translate,2,,"Provides a translation service using the DeepL API, enabling text translation between multiple languages through a simple MCP tool. Designed to be easily integrated into AI workflows, it supports dynamic language selection and returns translated text as a response. Useful for multilingual communication and localization tasks."
akramsheriff5,mcp-server,1,,"This MCP server provides financial market analysis capabilities through the AlphaVantage API, enabling AI assistants to fetch intraday stock data and perform technical analysis. The implementation offers tools for calculating moving averages, RSI (Relative Strength Index), and generating comprehensive trade recommendations based on technical indicators. The server includes specialized prompts for analyzing individual stocks, comparing multiple tickers, and building intraday trading strategies, making it valuable for financial advisors, traders, and investment analysis use cases."
akseyh,bear-mcp-server,22,,"This Bear MCP server, developed by akseyh, provides an interface for AI assistants to interact with Bear notes on macOS. Built with TypeScript and leveraging the Model Context Protocol SDK and SQLite, it offers tools for reading notes, searching by text, and listing tags. The implementation focuses on direct database access to Bear's SQLite storage, making it efficient for AI models to retrieve and analyze note content. It's particularly useful for knowledge management, research assistance, or content generation tasks that benefit from accessing a user's personal notes, enabling AI to work with Bear data without requiring deep knowledge of the app's internal structure."
akshay23,spurs-blog-mcp-server,2,,"This MCP server provides access to San Antonio Spurs basketball news and information by scraping and parsing content from the Pounding The Rock blog. Built with Python 3.13 and the FastMCP framework, it offers tools to retrieve latest articles, search for specific content, extract game results, and get player information with recent mentions. The implementation features efficient caching to reduce redundant requests and includes structured data models for articles, game results, and player information. It enables AI assistants to deliver up-to-date Spurs content without direct web access, making it valuable for sports fans seeking team news, game analyses, and player updates."
alaturqua,mcp-trino-python,13,651,"MCP Trino Server provides seamless integration between AI assistants and Trino/Iceberg databases through a standardized interface. Developed by alaturqua, this Python implementation exposes Trino's querying capabilities and Iceberg's table maintenance operations as MCP resources and tools, enabling data exploration, SQL execution, and table optimization. The server handles connection management, query formatting, and catalog navigation while supporting environment-based configuration, making it particularly valuable for interactive data analysis, automated table maintenance, and building AI-powered tools that interact with Trino databases."
albeorla,mcp,0,,"Aerith Admin MCP server implements a Manus-inspired 5-step development workflow for building RBAC dashboard applications. Built with FastAPI and browser-use integration, it provides tools for breaking down tasks, gathering information, analyzing requirements, executing changes, and generating reports. The implementation features resilient server modes (HTTP/STDIO), Git integration, comprehensive testing, and browser automation capabilities - making it particularly valuable for teams building complex admin interfaces who want structured, repeatable development processes."
albiemark,dbx-mcp-server,0,,"Dropbox MCP Server provides a secure integration with Dropbox's API, enabling AI assistants to perform file operations including uploading, downloading, listing, searching, and safely deleting files with recycle bin support. Built with TypeScript and the Model Context Protocol SDK, it implements OAuth 2.0 with PKCE for authentication, encrypts tokens for security, and offers resource handling capabilities that allow AI tools to work with files as attachments or inline content. The server includes specialized prompt handlers for file reviews and comparisons, making it particularly useful for document management, collaborative workflows, and scenarios requiring secure access to cloud storage directly within AI conversations."
getalby,lightning-tools-mcp-server,1,563,"The Lightning Tools MCP Server provides AI assistants with access to Bitcoin Lightning Network functionality through a set of specialized tools. Developed by Alby contributors, it leverages the @getalby/lightning-tools package to enable operations like interacting with lightning addresses and performing common lightning-related tasks. This implementation works well alongside the NWC MCP Server and can be easily integrated with Claude Desktop, Cline, or run from source. It's particularly valuable for workflows requiring cryptocurrency payment capabilities within AI assistant conversations."
getalby,nwc-mcp-server,7,323,"NWC MCP Server enables AI assistants to interact with Bitcoin Lightning wallets through Nostr Wallet Connect (NWC). Developed by Alby contributors, it provides tools for checking wallet balances, creating and paying invoices, and retrieving wallet information. The server uses the official MCP TypeScript SDK and can be easily integrated with Claude Desktop or Cline. It's particularly valuable for AI-assisted Bitcoin payments and wallet management without requiring users to implement complex Lightning Network interactions themselves."
alcova-ai,perplexity-mcp,5,,"Perplexity MCP Server provides a bridge between AI assistants and the Perplexity API, enabling Claude and other MCP-compatible tools to access real-time web search and specialized reasoning capabilities. Built by Alcova AI, this Go implementation exposes two primary tools: perplexity_ask for retrieving up-to-date information using Perplexity's Sonar Pro model, and perplexity_reason for complex problem-solving tasks using Sonar Reasoning Pro. The server supports seamless integration with Claude Code, Claude Desktop, and Cursor through the stdio protocol, allowing AI assistants to access current information and perform reasoning tasks without leaving their interface, making it particularly valuable for workflows requiring real-time data or specialized reasoning capabilities."
aldrin-labs,metal-mcp-server,2,,"This MCP server, developed for Metal Framework enthusiasts, provides specialized tools for searching Metal documentation and generating code snippets. Built with TypeScript and leveraging libraries like @xenova/transformers and hnswlib-node, it offers natural language querying of Metal docs and code generation for common Metal tasks in Objective-C, Swift, or Metal shading language. The server integrates seamlessly with the Model Context Protocol, allowing easy incorporation into existing MCP setups. It's particularly useful for developers working on graphics-intensive applications or games who need quick access to Metal-specific information and code examples without leaving their development environment."
aldrin-labs,metaplex-mcp-server,1,,"This Metaplex MCP server, developed by the Metaplex Foundation, provides a bridge between AI assistants and Metaplex documentation and repository information. Built with TypeScript and Node.js, it enables searching Metaplex documentation, retrieving repository details, and searching code across Metaplex repositories. The server leverages libraries like Axios for HTTP requests and Cheerio for HTML parsing to extract relevant information. By abstracting Metaplex-specific operations into a standardized MCP interface, it allows AI systems to easily access and utilize Metaplex resources without directly handling web scraping or API complexities. This implementation is particularly useful for developers working with Solana NFTs, facilitating use cases such as automated documentation lookup, code analysis, and integration of Metaplex functionalities into AI-assisted development workflows."
aldrin-labs,solana-mcp-server,18,,"This Solana MCP server provides direct access to Solana blockchain data through natural language queries. Developed as an open-source project, it implements 21 essential Solana RPC methods across categories like account operations, block information, token management, and system status. Built in Rust, it integrates with the Solana client library and MCP SDK to offer a bridge between AI assistants and the Solana network. The server is designed for developers, analysts, and blockchain enthusiasts who want to explore Solana data or integrate blockchain queries into AI-powered applications. It's particularly useful for tasks like balance checking, transaction analysis, and monitoring network health through conversational interfaces."
aldrin-labs,solana-docs-mcp-server,3,,"This Solana documentation server, developed for the Model Context Protocol, provides AI assistants with access to Solana blockchain documentation. Built with TypeScript and Node.js, it uses Axios and Cheerio to fetch and parse Solana's online documentation, making it available through MCP-compatible endpoints. The server enables AI systems to query and retrieve up-to-date Solana development information, facilitating accurate responses to blockchain-related queries. It's particularly useful for developers seeking real-time Solana documentation assistance, AI-powered Solana development tools, or educational platforms focused on blockchain technology."
alec2435,python_mcp,50,3311,"This MCP server, developed by Alex Velikanov, provides an interactive Python REPL environment for executing Python code within AI conversations. Built with Python and leveraging the MCP library, it offers persistent session management and captures stdout/stderr output. The implementation stands out by maintaining separate state for each session and supporting both expressions and statements. It's particularly useful for developers and data scientists who need to run Python code snippets, test algorithms, or perform data analysis tasks through AI-assisted workflows, allowing for seamless integration of Python programming into conversational AI interfaces."
alefcastelo,archai-static-analyzer-mcp,0,,"The Archai Static Analyzer MCP server provides AI assistants with code analysis capabilities focused on enforcing hexagonal architecture principles in Java applications. Built with TypeScript using the Model Context Protocol SDK, it implements various architectural rules such as limiting class dependencies, enforcing domain package isolation from infrastructure, validating use case naming conventions, and detecting improper email handling in models. The server exposes a single tool that accepts filename and content parameters, analyzes the code against these predefined rules, and returns violations as formatted text. This implementation is particularly valuable for development teams wanting to maintain architectural integrity through automated code reviews within AI assistant conversations."
alejandroballesterosc,document-edit-mcp,11,,"Document MCP server that enables Claude Desktop to perform operations on Microsoft Word, Excel, and PDF files. Built with FastMCP and Python, it provides tools for creating and editing documents, converting between formats, and handling spreadsheet data. Particularly valuable for users who need to automate document workflows or manipulate files through natural language requests without switching between applications."
alekspetrov,mcp-docs-service,17,10094,"MCP Documentation Service is a custom implementation that enables AI assistants to interact with markdown documentation files. Developed by Aleks Petrov, this service provides document management capabilities including creating, reading, updating, and deleting documentation files, working with YAML frontmatter metadata, searching through documentation, and analyzing documentation health. The implementation supports both Node.js and Deno environments, offers command-line options for specifying custom documentation directories, and integrates seamlessly with Cursor IDE and Claude Desktop through a SQL-like query format for executing commands."
alessandrorumampuk,mcpserver,0,,"MCP Server implementation that integrates with Ollama's Llama3 model to provide a terminal-based chat interface with persistent context management. Built with Node.js and Socket.IO, it features a PWA-ready web interface with offline support, YouTube video search/sharing capabilities, and a full xterm.js terminal emulator. The implementation focuses on maintaining conversation history and context across sessions while providing a familiar terminal experience for technical users."
alexandertsai,mcp-telegram,4,,"Telegram MCP Server enables Claude to access and interact with Telegram accounts, allowing for reading and sending messages through a simple interface. Developed by Alexander Tsai, it provides tools for retrieving chat lists, reading messages, marking messages as read, and sending replies while maintaining the user's conversational style. The implementation uses Telethon for Telegram API access and includes a conversation context analyzer that reads from a customizable style guide to help Claude generate responses that match the user's texting patterns. Perfect for users who want to monitor and respond to Telegram messages through Claude without switching applications."
alexandervtr,cursor-mcp-file-organizer,2,,"Cursor MCP File Organizer provides a server implementation for automatically organizing files in the Downloads folder based on file types. Built with TypeScript and Express, it offers a configurable rule-based system that sorts files into appropriate directories (like Documents, Images, Archives) while supporting options such as date-based organization and handling duplicate files. The server exposes RESTful endpoints for file operations and uses Server-Sent Events (SSE) for real-time communication with the Cursor IDE. This implementation is particularly useful for developers who want to maintain an organized file system without manual intervention, especially when working with multiple file types across different projects."
alexander-zuev,supabase-mcp-server,642,,"This MCP server implementation provides a bridge between Supabase and AI assistants, enabling database schema exploration and management through natural language interactions. It leverages the Supabase client to execute read-only SQL queries, retrieve schema information, and list tables and columns. The server offers tools for listing schemas, exploring table structures, and executing custom SQL queries, making it particularly useful for developers and data analysts who want to integrate Supabase database operations into their AI workflows. By abstracting database interactions into MCP tools, it simplifies the process of querying and analyzing Supabase data within AI-powered applications."
alexandrebagio,swapi-mcp,3,,"SWAPI MCP Server provides a simple interface to the Star Wars API (SWAPI), allowing AI assistants to retrieve information about planets from the Star Wars universe. Built with TypeScript and the Model Context Protocol SDK, it implements a single tool that enables searching for planets by name and paginating through results. The server returns planet names as text content along with metadata about the total number of results and current page, making it useful for Star Wars-related queries and demonstrations of basic API integration patterns."
alexandreroman,mcp-chess,5,,"This MCP server implementation provides a bridge to play chess games using AI. Developed by Alexandre Roman, it integrates with Spring AI and utilizes external chess libraries for game logic and board visualization. The server offers tools for move validation, game state management, and potentially AI-powered chess analysis. It's designed for use cases requiring interactive chess gameplay or automated chess analysis within AI-assisted applications."
alexandreroman,mcp-location,1,,"This MCP server implementation provides location-based functionality using the Spring AI framework. It integrates with external APIs to retrieve geolocation data, offering capabilities such as determining a user's location based on their IP address. The server is designed to enhance AI-assisted applications with contextual location awareness, making it useful for personalized recommendations, localized content delivery, or geographic data analysis in various domains."
alexandreroman,mcp-time,0,,"This MCP server implementation provides a time-related service using Spring Boot and Spring AI. Developed by Alexandre Roman, it integrates with the Spring AI MCP server starter, allowing for easy deployment and scalability. The server is designed to handle time-based operations and queries, making it suitable for applications that require precise time management or scheduling functionalities. It leverages Java 21 and the latest Spring Boot version, showcasing modern Java development practices."
alexanimal,tradovate-mcp-server,1,,"Tradovate MCP Server provides a bridge to the Tradovate trading platform API, enabling AI assistants to manage futures contracts, positions, and orders. Built by alexanimal, it offers tools for retrieving contract details, listing positions, placing and modifying orders, and accessing account information with real-time market data. The implementation includes robust authentication handling, data caching for offline operation, and fallback to simulated data when the API is unavailable. This server is particularly valuable for trading workflows that require monitoring positions, analyzing contract details, or executing trades directly within AI assistant conversations."
limklister,mcp-google-custom-search-server,13,,"This Google Custom Search MCP server, developed by Alexander Lindquister, integrates the Google Custom Search API to enable AI assistants to perform web searches. It exposes functions for querying the API and retrieving search results, including web pages, images, and videos. The server handles authentication, request formatting, and response parsing to simplify interactions with Google's search capabilities. By connecting AI systems to Google's vast index of web content, this implementation empowers assistants to find relevant information, answer queries, and gather data from across the internet. It is particularly useful for applications requiring up-to-date web information, content research, or any scenario where an AI needs to search and analyze online resources."
alexbakers,mcp-ipfs,2,765,"MCP-IPFS is a server implementation that provides AI assistants with access to the IPFS Storacha Network through the w3cli interface. Developed by Alex Baker, this TypeScript server enables file uploads, space management, delegation handling, and various IPFS operations via a set of well-defined tools. The implementation requires email authentication with the w3 service and handles command execution, parsing responses, and formatting results for AI consumption. Particularly useful for decentralized storage workflows, content addressing, and managing persistent data on IPFS without requiring direct CLI interaction."
alexei-led,aws-mcp-server,69,,"AWS MCP Server provides a lightweight bridge between AI assistants and the AWS CLI, enabling execution of AWS commands through a standardized interface. Built by alexei-led, it features two main tools: describe_command for retrieving AWS CLI documentation and execute_command for running AWS CLI operations with Unix pipe support. The server leverages existing AWS credentials on the host machine, includes pre-defined prompt templates for common AWS tasks following best practices, and supports multi-architecture deployment via Docker. This implementation is particularly valuable for cloud management workflows where users need to interact with AWS resources without leaving their AI assistant conversation."
alexeydubinin,hh-jira-mcp-server,2,3726,"This Jira MCP server, developed by Alexey Dubinin at HeadHunter, integrates with the Jira API to enable AI assistants to interact with Jira issues and projects. It exposes functions for querying, creating, and modifying Jira tickets, handling authentication and API interactions. The server simplifies Jira management tasks by abstracting away the complexities of the Jira API. By connecting AI capabilities with project management functionality, this implementation allows assistants to track tasks, update issue statuses, and manage workflows programmatically. It is particularly useful for applications requiring automated project tracking, issue management, or any scenario where an AI system needs to interact with Jira data."
alexgoller,mcp-server-agenda,1,,"This MCP server for Agenda, developed by alexgoller, provides AI assistants with a standardized interface to interact with the Agenda note-taking app on macOS. Built using Python and leveraging x-callback-urls, it offers capabilities for creating notes, managing projects, and opening existing notes in Agenda. The server abstracts the complexities of Agenda's x-callback-url scheme, handling URL encoding and execution through macOS system calls. It's particularly valuable for AI systems focused on note management and personal productivity, enabling use cases such as automated note creation, project organization, and seamless integration of AI-generated content into the user's Agenda workflow."
alexgoller,illumio-mcp-server,1,,"This Illumio MCP server, developed by alexgoller, provides an interface for AI assistants to interact with Illumio's Policy Compute Engine (PCE). It integrates with the Illumio API to enable programmatic management of workloads, labels, and traffic flows within a zero trust security environment. The server exposes tools for creating, updating, and deleting workloads and labels, as well as analyzing traffic patterns and security policies. By abstracting PCE interactions, it allows AI systems to easily perform tasks like workload management, label operations, and traffic analysis. This implementation is particularly useful for security teams, network administrators, and DevOps professionals who want to leverage AI capabilities for automating Illumio PCE operations, enhancing security posture, and gaining insights from network traffic data."
alexifeng,mcp_chat_logger,4,,"MCP Chat Logger is a simple tool that allows AI assistants to save chat conversations as formatted Markdown files. Developed by Alexi.F, this implementation provides a single function that takes chat messages and an optional conversation ID, then saves them with timestamps in a structured format. The saved files include role information, timestamps, and the full content of each message, making it useful for record-keeping, analysis, or creating permanent archives of important conversations."
alexkissijr,unrealmcp,2,,"UnrealMCP enables AI assistants to interact with Unreal Engine through a TCP server that exposes scene manipulation, material creation, and blueprint generation capabilities. The implementation includes both C++ components that integrate directly with the Unreal Editor and Python modules that implement the Model Context Protocol, allowing tools like Claude Desktop and Cursor to send commands to Unreal Engine. It features a modular command system that can be extended with custom handlers, making it particularly valuable for AI-assisted game development and virtual production workflows."
adiom-data,lance-mcp,46,,"This LanceDB MCP server, developed by Alex Komyagin, enables AI assistants to interact with LanceDB vector databases through natural language. It leverages the LanceDB Node.js client and Model Context Protocol to provide operations like querying, inserting, and managing vector data. Built with TypeScript and modern dependencies, it offers a bridge between large language models and efficient vector storage. The implementation is designed for developers and data scientists working on AI applications that require fast similarity search, recommendation systems, or semantic analysis on large datasets. It simplifies vector database operations for AI assistants, allowing them to perform complex queries and data manipulations using conversational language."
aithelab,mcp-terminal-use,0,,"This MCP terminal server, developed by Alex Man, enables AI assistants to interact with specified directories on a user's system through a command-line interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for executing shell commands, creating directories, and navigating the file system within allowed boundaries. The implementation focuses on security by restricting access to predefined directories and whitelisting permitted commands. It's particularly useful for tasks like file management, system automation, or providing AI assistants with controlled access to local resources, enabling safe interaction with the user's file system without requiring deep knowledge of system-level operations or security considerations."
al-how,supernotes-to-obsidian,0,,"This MCP implementation, developed by Alex Howard, provides a tool for importing Supernotes exports into Obsidian daily notes. Built with Python, it leverages the Model Context Protocol to streamline the process of transferring and formatting notes between these two popular note-taking applications. The script creates daily notes from templates, cleans up formatting, adds wikilinks for proper nouns, and handles OCR errors. By automating these tasks, it significantly reduces the manual effort required when migrating from Supernotes to Obsidian. This implementation is particularly useful for knowledge workers, researchers, and students who are transitioning between note-taking systems or looking to maintain a consistent daily journaling practice within Obsidian while importing content from Supernotes."
mastercode-io,scaflog-zoho-mcp-server,1,,"This Zoho Creator MCP server, developed by Alex Sherin, integrates with the Zoho Creator API to enable AI assistants to interact with custom business applications. It provides a simple note storage system with a custom URI scheme, allowing for creation and retrieval of notes. The server implements a summarization prompt and a tool for adding new notes, abstracting away the complexities of the Zoho Creator API. By connecting AI capabilities with custom business logic and data storage, this implementation enables assistants to manage and analyze application-specific information. It is particularly useful for scenarios where AI systems need to interact with tailored business processes or maintain context across conversations within custom Zoho Creator applications."
alexsmirnov,mcp-server-continue,0,,"FastMCP Server for continue.dev provides a development automation server that exposes prompts, resources, and tools to LLM clients. Built by Alexander Smirnov, it implements the Model Context Protocol to offer features like URL content fetching, library documentation access, project structure analysis, and web search capabilities through both internet and Perplexity APIs. The server is designed with a modular architecture that separates configuration, resources, tools, and prompts into distinct components, making it particularly valuable for developers who want to enhance their coding workflow with AI assistance without leaving their development environment."
alexwohletz,language-server-mcp,17,,"This language server MCP implementation, developed by Alex Wohletz, provides language support for code editing by integrating with the Model Context Protocol. It offers features like hover information, code completion, and diagnostics for TypeScript and potentially Python. The server exposes these capabilities as MCP tools, allowing AI assistants to analyze and manipulate code. By connecting AI capabilities with language-specific tooling, this implementation enables assistants to provide contextual coding help, suggest improvements, and catch potential errors. It is particularly useful for applications requiring code understanding, automated refactoring, or any scenario where an AI system needs to reason about and interact with source code."
alfredatnycu,grasshopper-mcp,8,1418,"Grasshopper MCP Bridge connects Grasshopper (a visual programming environment for Rhino) with Claude Desktop through a bidirectional communication system. Developed by alfredatnycu, it consists of a Grasshopper plugin component (GH_MCP.gha) that provides a TCP server and a Python bridge server that implements the Model Context Protocol. The system includes a component knowledge base with information about common Grasshopper components, their parameters, and connection rules, enabling Claude to create and manipulate parametric designs through natural language commands. This implementation is particularly valuable for architects, designers, and engineers who want to leverage AI assistance for parametric modeling workflows without leaving their conversation interface."
algonacci,mcp-gnews,1,,"This MCP server implementation provides integration with the GNews API, enabling news search and retrieval capabilities. It offers tools for searching news articles, fetching top headlines, and retrieving topic-specific news across multiple languages and countries. The server includes resource handlers for convenient news access and prompt generators to facilitate natural language interactions. Developed by Eric Julianto, it's useful for applications requiring up-to-date news data from diverse global sources."
algonacci,mcp-tavily-extract,0,,"This MCP server implementation provides a simple interface for extracting web page content using the Tavily API. It utilizes the FastMCP framework and exposes a single tool, 'extract_url', which takes a URL as input and returns the extracted content. The server requires a Tavily API key to be set as an environment variable and is designed for easy integration into projects that need web scraping capabilities."
algonacci,mcp-tools,0,,"This MCP server implementation integrates the Tavily search API to provide advanced web search capabilities. Developed by Eric Julianto, it offers tools for performing customizable searches with options for depth, result count, time range, and AI-generated answers. The server is built using the FastMCP framework and includes features like progress reporting and resource handling. It's designed for use cases requiring up-to-date web information, such as research, content creation, or data aggregation tasks."
algonacci,mcp-tavily-search,0,,"This MCP server implementation provides a web search capability using the Tavily API. It offers a search tool with customizable parameters, a resource for direct context insertion, and a prompt generator for search queries. The server is designed to enhance AI-assisted workflows by enabling internet searches, making it particularly useful for tasks requiring up-to-date information or fact-checking."
algonacci,mcp-unlock-pdf,0,,"This MCP server implementation provides functionality to read and extract content from both protected and unprotected PDF files. It offers tools for reading PDFs, handling password-protected documents, and formatting the extracted content as resources. The server is designed to be integrated into workflows that require PDF parsing and text extraction, making it useful for document analysis, content indexing, or data extraction from PDF sources."
algonacci,mcp-wikipedia,2,,"This MCP server provides AI assistants with access to Wikipedia content through a simple interface built with FastMCP. It exposes five tools that allow clients to search Wikipedia, retrieve article summaries, access full page content, get random articles, and change the language setting. Created by Eric Julianto, this implementation serves as a bridge between AI systems and the vast knowledge base of Wikipedia, making it useful for research tasks, fact-checking, and educational applications where quick access to encyclopedic information is needed."
aliargun,mcp-server-gemini,103,,"This Gemini MCP server, developed by Ali Argun, enables Claude Desktop to interact with Google's Gemini AI models. It provides a full implementation of the Model Context Protocol, supporting real-time response streaming and secure API key handling. The server integrates with the @google/generative-ai library to offer a streamlined interface for leveraging Gemini's capabilities within Claude Desktop. By abstracting the complexities of the Gemini API, this implementation allows for easy configuration of model parameters and seamless integration with existing Claude Desktop workflows. It is particularly useful for users who want to access Gemini's advanced language models through a familiar interface, enabling applications like chatbots, content generation, and AI-assisted analysis within the Claude Desktop environment."
aliyun,alibabacloud-adb-mysql-mcp-server,7,781,"Adb MySQL MCP Server provides a universal interface between AI Agents and Alibaba Cloud's Adb MySQL databases, enabling seamless metadata retrieval and SQL operations. Developed by Alibaba Cloud, this Python-based implementation offers tools for executing SQL queries, analyzing query plans, and retrieving execution statistics, along with resource templates for accessing database schemas, table definitions, and configuration values. The server requires minimal configuration through environment variables and supports both local development and pip installation, making it ideal for data analysts and developers who need AI-assisted database interactions with Adb MySQL clusters."
aliyun,alibabacloud-dataworks-mcp-server,11,7264,"DataWorks MCP Server exports the Alibaba Cloud DataWorks Open API to the Model Context Protocol, allowing AI agents to interact with DataWorks project management and data workflow tools through a standardized, type-safe interface. Built with TypeScript and Zod for robust schema validation, the server dynamically generates MCP tools from the DataWorks API, enabling programmatic project listing and management operations."
alihkhawaher,everything-search-server,4,,"This Everything Search MCP server provides AI assistants with powerful file search capabilities through integration with the Everything Search Engine. Developed to enhance file discovery and management tasks, it leverages the Everything Search HTTP server to offer advanced search options including case sensitivity, whole word matching, regular expressions, and path-specific searches. The server supports customizable result sorting and formatting, making it ideal for use cases such as document retrieval, file organization, and content analysis across large file systems. Its implementation in TypeScript, using the Model Context Protocol SDK, ensures efficient and standardized communication between AI systems and local file search functionalities."
alinagy,godspeed-mcp,1,1391,"Godspeed MCP provides a connector for AI assistants to interact with the Godspeed Task Management API through the Model Context Protocol. It enables task management operations including listing, creating, updating, and deleting tasks, as well as managing task lists. Built with TypeScript and using the MCP SDK, this implementation authenticates via API token and exposes a set of tools that allow AI assistants to help users organize their productivity workflow directly from within their development environment. The server is designed to work with Cursor and other MCP-compatible clients, making it useful for developers who want to manage their tasks without context switching."
alinaqi,mcp-linkedin-server,16,,"This MCP server implementation provides a bridge to LinkedIn's platform, enabling AI assistants to perform various LinkedIn operations such as logging in, browsing feeds, searching profiles, viewing specific profiles, and interacting with posts. Developed by alinaqi, it uses Playwright for browser automation and implements secure session management with encrypted cookie storage. The server offers tools for both manual and automated LinkedIn interactions, making it particularly useful for AI applications requiring social media engagement, professional networking, or talent acquisition tasks. It focuses on rate limiting, error handling, and maintaining compliance with LinkedIn's terms of service, ensuring robust and responsible automation of LinkedIn activities."
alioshr,memory-bank-mcp,160,,"This Memory Bank MCP server implementation transforms traditional file-based memory banks into a centralized, remotely accessible service. Developed by Aliosh Pimenta, it enables multi-project memory bank management with consistent file structure and validation. The server provides full MCP protocol implementation for read/write operations, project listing, and file management. It ensures proper isolation between project memory banks and includes security features like path traversal prevention. The implementation is particularly useful for AI assistants and development teams requiring structured, remotely accessible project documentation and context management across multiple projects."
alistairwalsh,mcp_pandas,2,,"This MCP server for pandas analysis, developed by an unnamed author, provides AI assistants with powerful data manipulation and analysis capabilities. Built with Python and leveraging libraries like pandas, numpy, and matplotlib, it offers a standardized interface for data processing, statistical analysis, and visualization tasks. The server abstracts the complexities of pandas operations, allowing AI systems to easily incorporate data analysis into their workflows. It's containerized using Docker for easy deployment and scalability. This implementation is particularly valuable for data scientists, analysts, and AI researchers working on data-driven projects, enabling use cases such as exploratory data analysis, time series forecasting, and automated report generation across various domains."
aliyun,mcp-server-esa,2,,"MCP Server ESA provides a bridge to Alibaba Cloud's Edge Security Acceleration (ESA) service, enabling AI assistants to manage edge routines, deployments, routes, and sites. Developed by Aliyun, this TypeScript implementation exposes over 20 specialized tools for operations including creating and deploying edge routines, managing code versions, configuring routes, and handling site records through the ESA API. The server authenticates with Alibaba Cloud using access keys and handles complex operations like code uploads to OSS, making it particularly valuable for developers who need to automate edge computing deployments or manage ESA resources through AI assistants."
aliyun,alibabacloud-hologres-mcp-server,16,6248,"Hologres MCP Server provides a universal interface between AI Agents and Alibaba Cloud's Hologres databases, enabling seamless communication for metadata retrieval and SQL execution. Developed by TimothyDing, it supports executing SQL (including DDL, DML, and queries), collecting statistics with ANALYZE commands, and retrieving database metadata such as schemas, tables, and table statistics. The server requires Python 3.13+ and can be installed via pip or run directly from the repository, making it easy to integrate with MCP clients through simple configuration. This implementation is particularly valuable for data analysis workflows that need to interact with Hologres databases without switching contexts."
alizdavoodi,mcpdocsearch,4,,"MCPDocSearch is a tool for crawling websites, generating Markdown documentation, and making it searchable via an MCP server. It consists of two main components: a crawler CLI that extracts content from documentation sites and converts it to Markdown, and an MCP server that loads these documents, chunks them into searchable sections, and generates vector embeddings using sentence-transformers. The server exposes tools for listing documents, retrieving document structures, and performing semantic searches over the content, making it particularly useful for AI agents that need to access up-to-date documentation beyond their training cutoff."
HEAD,openai-server,67,,"This MCP server, developed by AllAboutAI-YT, implements a simple notes system to demonstrate core MCP concepts. It provides resources for text notes with URIs and metadata, tools for creating new notes, and prompts for generating summaries. The server uses TypeScript and offers a straightforward interface for AI assistants to manage and analyze textual information. By connecting AI capabilities with a basic note-taking system, this implementation serves as an educational example and starting point for developers looking to understand MCP principles. It is particularly useful for applications requiring simple text storage and retrieval, note summarization, or as a foundation for building more complex document management systems with AI integration."
allenbijo,mcp-sysinfo,0,,"MCP-SysInfo is a lightweight server that provides real-time system information through a simple API. Developed by Allen Bijo, it retrieves detailed hardware and system metrics including CPU, memory, disk, and GPU statistics using libraries like psutil and GPUtil. The server exposes a single endpoint that returns comprehensive system data in a structured format, making it particularly useful for monitoring and diagnostic purposes where users need quick access to their system's performance metrics without leaving their AI assistant interface."
allenday,solr-mcp,2,,"Solr MCP provides a bridge between AI assistants and Apache Solr search indexes, enabling powerful hybrid search capabilities that combine keyword precision with vector semantic understanding. Built by Allen Day, this Python implementation uses FastMCP to expose Solr's search functionality through a standardized protocol, with features including vector embeddings generation via Ollama (using nomic-embed-text), unified collections for storing both document content and embeddings, and Docker integration for easy deployment. The server is particularly valuable for workflows requiring advanced document retrieval from existing Solr indexes, allowing AI assistants to perform contextual searches against structured data repositories without direct database access."
allenporter,mcp-server-home-assistant,42,3653,"This MCP server, developed by allenporter, enables AI assistants to interact with Home Assistant through a standardized interface. It provides tools for querying and controlling smart home devices, sensors, and automations via the Home Assistant API. The server integrates directly with Home Assistant instances, abstracting away complexities to offer a simplified workflow for AI systems. By connecting AI capabilities with Home Assistant's comprehensive smart home platform, this implementation empowers AI assistants to manage and analyze home automation tasks. It is particularly useful for applications requiring smart home control, energy management, or any scenario where an AI system needs to interact with and reason about the state of a connected home."
allglenn,mcp-name-origin-server,0,,"This MCP server predicts the origin of names using the Nationalize.io API, offering both single-name prediction and batch processing capabilities. It exposes two tools: 'predict_origin' for individual names and 'batch_predict' for multiple names, returning country predictions with probability scores. The implementation uses FastMCP with stdio transport for seamless integration with AI assistants, making it valuable for applications requiring demographic analysis, character development, or cultural research."
allthatjazzleo,mantrachain-mcp,2,523,"A Model Context Protocol (MCP) server for interacting with MantraChain (Cosmos SDK) blockchain. This server provides tools for sending tokens, delegating to validators, querying balances, and more using the MCP protocol."
mcp-100,stock-market-server,3,,"Stock Market MCP server that provides real-time financial data retrieval tools using the Alpha Vantage API. Enables querying current stock prices, market reports, financial statements, and company overviews through a standardized interface. Useful for financial analysis, investment research, and building trading-related AI assistants."
alsonwangkhem,github-mcp-2,0,,"GitHub MCP server provides a bridge between Claude and the GitHub API, enabling AI assistants to interact with GitHub repositories. Built with TypeScript and Octokit, it offers tools for searching repositories, retrieving repository information, listing issues, and creating new issues. The server also includes prompt handlers that generate formatted content for issue descriptions, pull request descriptions, and search queries. This implementation is particularly useful for developers who want to manage their GitHub projects directly through AI conversations, streamlining workflows for issue tracking and repository exploration."
always-tinkering,rhinomcpserver,27,,"RhinoMCP Server provides a bridge between AI systems and Rhino 3D's Python scripting capabilities through the Model Context Protocol. This implementation enables AI agents to generate and manipulate 3D models in Rhino by exposing scene context information and geometry creation tools (currently supporting spheres), with all operations requiring explicit user consent via dialog prompts. The server is designed to run within Rhino's Python environment and follows MCP security guidelines, making it particularly valuable for AI-assisted 3D modeling workflows that require direct interaction with Rhino documents."
alx99,db-mcp,0,,"This MCP server, developed by ALX99, provides a standardized interface for AI models to interact with multiple database systems including PostgreSQL, MySQL, and SQLite. Built using Go, it offers tools for connecting to databases, executing queries, and retrieving results in CSV format. The implementation focuses on simplifying database access through a consistent MCP interface, enabling AI assistants to perform complex data operations across different database flavors. By connecting AI models with robust database functionality, this server facilitates sophisticated data analysis, reporting, and management scenarios. It's particularly valuable for applications and AI systems that need to work with diverse data sources or require flexible database interactions without being tied to a specific database management system."
alxspiker,ai-meta-mcp-server,5,,"AI Meta MCP Server enables AI agents to dynamically create and execute custom tools through a meta-function architecture. Built with TypeScript and the Model Context Protocol SDK, it provides a secure sandbox for running JavaScript, Python, or shell code defined at runtime. The server includes persistent storage for tools, allowing AI to build up a library of functions that can be listed, updated, or deleted. With configurable security controls for different execution environments, it's ideal for AI agents that need to extend their capabilities programmatically without requiring developer intervention for each new tool."
alxspiker,mcp-server-ftp,3,,"The MCP Server for FTP Access enables Claude.app to interact with FTP servers through natural language commands. Built with TypeScript and the basic-ftp library, it provides tools for listing directories, downloading and uploading files, creating directories, and deleting files or directories on remote FTP servers. The server is configured through environment variables for connection details and supports both standard FTP and secure FTPS connections. This implementation is particularly useful for users who need to manage remote file systems directly from their AI assistant interface without switching to dedicated FTP clients."
alxspiker,windows-command-line-mcp-server,3,,"The Windows Command Line MCP Server provides a robust, secure bridge between AI models and Windows system operations. It allows controlled execution of commands, project creation, and system information retrieval while maintaining strict security protocols."
am2rican5,mcp-google-calendar,0,1067,"Google Calendar MCP Server provides a TypeScript-based integration with Google Calendar API, enabling AI assistants to manage calendar events through a set of standardized tools. Developed by am2rican5, it features persistent token storage for seamless authentication, supports operations like listing calendars, creating/editing/deleting events, and offers both stdio and SSE transport options. The implementation handles OAuth 2.0 authorization flow automatically, making it ideal for AI agents that need to schedule meetings, retrieve calendar information, or manage events without requiring repeated user authentication."
amanasmuei,mcp-server-nodemcu,1,,"NodeMCU MCP provides a bridge between AI assistants and ESP8266-based IoT devices, enabling remote management and monitoring through the Model Context Protocol. The server exposes tools for listing connected devices, retrieving device information, sending commands, and updating device configurations, while handling both WebSocket connections for real-time device communication and REST API endpoints for traditional client access. Built with a modular architecture using Express.js and the official MCP SDK, it's particularly valuable for smart home automation, environmental monitoring, and IoT device fleet management without leaving the AI assistant interface."
amansingh0311,mcp-qdrant-openai,2,,"MCP Qdrant Server with OpenAI Embeddings provides vector search capabilities by connecting AI assistants to Qdrant vector databases. The server exposes three main tools: semantic search in collections using OpenAI embeddings, listing available collections, and viewing collection information. It handles the generation of embeddings from natural language queries and performs vector similarity search against Qdrant collections, making it valuable for applications requiring semantic document retrieval, knowledge base search, or any use case where finding contextually similar content is important."
zxkane,mcp-server-amazon-bedrock,20,,"This Amazon Bedrock MCP server, developed by an unnamed author, provides a standardized interface for leveraging Amazon's Nova Canvas model for AI image generation. Built with TypeScript and utilizing the AWS SDK, it offers tools for creating images from text descriptions with features like negative prompts, configurable dimensions, and seed control. The server implements comprehensive input validation, error handling, and AWS credential management. By abstracting the complexities of the Bedrock API, it enables AI systems to easily generate images based on textual input. This implementation is particularly valuable for applications requiring programmatic image creation, facilitating use cases such as content illustration, visual concept exploration, and dynamic image generation for various platforms."
amekala,adspirer-mcp-server,3,,"The Amazon Advertising MCP Server provides Claude Desktop users with access to Amazon Advertising data through a simple command-line interface. Built using the Model Context Protocol SDK, it connects to a Supabase backend database to retrieve advertiser information, account listings, and validate API keys. The implementation includes tools for basic operations like listing advertiser accounts and retrieving account details, along with utility functions for testing connectivity. It requires only an Amazon Advertising API key for authentication, making it accessible for marketers and advertisers who want to analyze their Amazon advertising data directly through Claude without needing to understand the underlying database infrastructure."
amgadabdelhafez,dbx-mcp-server,3,,"This MCP server integrates with Dropbox, exposing a set of Dropbox operations as MCP tools. Developed by Amgad, it allows MCP-compatible clients to interact with Dropbox for file management tasks such as listing, uploading, downloading, and sharing files. The server supports authentication via environment variables or runtime updates, and includes comprehensive error handling and testing capabilities. It's particularly useful for AI-assisted workflows requiring cloud storage integration and file manipulation."
amidabuddha,unichat-mcp-server,31,9572,"This Unichat MCP server, developed by amidabuddha, provides a unified interface for interacting with multiple AI language models including OpenAI, MistralAI, Anthropic, xAI, and Google AI. It exposes a single 'unichat' tool that takes messages as input and returns AI-generated responses, abstracting away the differences between various AI providers. Built in Python, the implementation offers predefined prompts for common tasks like code review, documentation generation, and code explanation. By bridging multiple AI services through a standardized MCP interface, this server enables flexible AI model selection and consistent interaction patterns across providers. It is particularly useful for developers and applications requiring AI-powered code assistance, natural language processing, or multi-model AI capabilities without vendor lock-in."
amidabuddha,unichat-ts-mcp-server,9,1580,"This TypeScript MCP server, developed by Stefan, integrates the Unichat library to enable AI assistants to interact with multiple language models including OpenAI, MistralAI, Anthropic, xAI, and Google AI. It provides a unified interface for sending requests to these models via a single 'unichat' tool, abstracting away the complexities of individual APIs. The server supports both STDIO and SSE transport mechanisms and includes predefined prompts for common tasks like code review, documentation, and explanation. By offering a consistent way to leverage multiple AI models, this implementation is particularly useful for developers building flexible chatbots, multi-model AI assistants, or applications that require seamless switching between different language models."
aminalali8,bns-mcp-server,0,,"Bunnyshell MCP Server provides a bridge between Claude Desktop and the Bunnyshell platform, enabling AI assistants to manage cloud environments directly through conversation. Developed by Amin Al Ali Al Darwish, this TypeScript implementation leverages the Model Context Protocol SDK to expose Bunnyshell CLI capabilities including environment creation, component deployment, and remote development workflows. The server runs either locally or in a Docker container, authenticates via API tokens, and offers both resource templates and guided prompts that make it particularly valuable for DevOps teams looking to streamline environment management through natural language interactions."
aminforou,mcp-gsc,46,,"The MCP-GSC server provides Google Search Console integration for AI assistants, enabling access to website search performance data, indexing status, and sitemap management. Created by SEO consultant Amin Foroutan, it offers tools for retrieving search analytics, inspecting URLs, comparing time periods, and managing sitemaps through the Google Search Console API. The implementation includes authentication via service account credentials and features detailed reporting capabilities for SEO analysis. This server is particularly valuable for digital marketers and SEO professionals who need to analyze website search performance, troubleshoot indexing issues, and manage Google Search Console operations through conversational interfaces."
amir-bengherbi,shopify-mcp-server,6,1954,"This Shopify MCP server, developed by Amir Bengherbi, enables AI agents to interact with Shopify stores through GraphQL API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for managing products, customers, orders, discounts, and more. The implementation focuses on comprehensive store management capabilities, with features like advanced order querying, webhook management, and draft order creation. It's particularly useful for e-commerce businesses and developers looking to automate Shopify operations, enabling use cases such as inventory management, customer segmentation, and sales analysis without dealing directly with Shopify's API complexities."
aarora79,aws-cost-explorer-mcp-server,81,,"AWS Cost Explorer MCP Server provides a specialized interface for retrieving AWS cloud spending data and Amazon Bedrock usage statistics through CloudWatch logs. Developed by Amit Arora, this Python-based server exposes Cost Explorer API functionality and Bedrock model invocation logs as MCP tools, allowing detailed analysis of EC2 spending, service costs breakdowns, and Bedrock usage patterns by region, user, and model. The implementation supports both local deployment via Claude Desktop and remote operation on Amazon EC2, making it particularly valuable for AWS customers who need to monitor and analyze their cloud spending and AI model usage directly within Claude conversations."
amitdeshmukh,stdout-mcp-server,2,477,"A lightweight MCP server that captures and manages stdout logs from multiple processes through a named pipe system. The server creates a cross-platform pipe at a standard location, monitors incoming logs, maintains a history of the last 100 entries, and provides tools for querying and filtering these logs, making it particularly useful for debugging and real-time log monitoring across different applications."
amitsh06,mcp-server,0,,"MCP Gemini Server provides a Flask-based implementation that enables AI assistants to interact with Google's Gemini API through a standardized protocol. It supports three key operations: text generation, text analysis (with sentiment, summary, and keyword extraction capabilities), and chat conversations. The server handles client-server communication through a RESTful API, processes requests with appropriate error handling, and securely manages API keys through environment variables. Particularly useful for developers looking to extend AI assistant capabilities with Google's generative models without direct API integration."
amoldericksoans,ffmpeg-mcp,7,,"FFmpeg-MCP provides a server implementation that enables AI models to perform multimedia processing operations using FFmpeg. Built by Amol Soans, it offers tools for video trimming, format conversion, audio extraction, watermarking, quality adjustment, and batch processing of media files. The implementation includes robust security measures like path validation and working directory isolation, comprehensive error handling, and thorough unit tests. It's particularly valuable for workflows requiring media manipulation without leaving the conversation interface, allowing models to process audio and video files directly."
amornpan,py-mcp-gcalendar,0,,"The Google Calendar MCP server enables AI assistants to manage calendar events through a set of specialized tools for listing, creating, and deleting events. Built with the Model Context Protocol, it authenticates with Google Calendar API using OAuth credentials, provides timezone-aware event handling with fallback options, and implements robust error handling and logging. The server exposes four main tools: listing calendar events, creating new events with flexible time formats, deleting specific events by time and title, and removing duplicate events on a given date. This implementation is particularly valuable for productivity workflows where calendar management needs to happen directly within conversation interfaces without context switching."
amornpan,py-mcp-mysql,0,,"MySQL MCP server that provides a standardized interface for interacting with MySQL databases. It enables listing database tables as resources, reading table contents, and executing arbitrary SQL queries through a flexible tool interface. Designed to abstract database interactions and provide a consistent way for AI systems to explore and manipulate MySQL data sources."
amotivv,cloudflare-browser-rendering,3,,"This MCP server implementation provides a bridge to Cloudflare's Browser Rendering API, enabling web scraping and screenshot capture capabilities. It utilizes Puppeteer for browser automation and offers endpoints for content extraction and screenshot generation. The server is designed for use cases requiring dynamic web content processing, such as data extraction from JavaScript-heavy websites or automated visual testing of web applications."
amotivv,memory-box-mcp,4,,"This MCP server provides interactive memory capabilities for AI assistants through integration with Memory Box, a semantic memory storage and retrieval system. Developed by Amotivv, it offers tools for saving, searching, and formatting memories using vector embeddings and semantic search. The server is designed for use cases requiring persistent, context-aware AI interactions, such as personalized assistants or knowledge management systems."
amotivv,protonmail-mcp,6,,"Protonmail MCP Server enables Claude Desktop and Cline VSCode extension to send emails through Protonmail's SMTP service. Developed by amotivv, inc. (creators of Memory Box), this TypeScript implementation provides a single tool for sending emails with support for multiple recipients, CC/BCC functionality, and both plain text and HTML content. The server requires Protonmail SMTP credentials configured as environment variables and includes comprehensive error handling and logging capabilities, making it particularly valuable for workflows where AI assistants need to communicate via email without leaving the conversation interface."
zueai,cloudflare-api-mcp,16,,"This MCP server implementation provides a bridge to Cloudflare's API, enabling AI assistants to manage and interact with Cloudflare services. Developed by amxv, it offers a wide range of tools for DNS management, SSL/TLS configuration, firewall rules, load balancing, and more. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on secure API key management and supports various Cloudflare products. It is particularly useful for applications requiring automated cloud infrastructure management, such as configuring CDN settings, managing DNS records, or adjusting security policies across multiple domains."
amysatterlee,nps_mcp,1,,"This MCP implementation, developed by A. Satterlee, integrates with the National Park Service API to provide access to park information and services. Built with TypeScript and utilizing the Model Context Protocol SDK, it offers a command-line interface for interacting with NPS data. The implementation focuses on delivering structured park information, potentially including details on locations, amenities, and activities. It's particularly useful for applications requiring up-to-date national park data, enabling use cases such as trip planning, park exploration, and environmental research without complex API integrations."
yumia-pretty,cursor-mcp-installer,2,,"A cursor-mcp-installer is a utility server that enables the installation of other MCP servers for the Cursor editor. It provides two main tools: one for installing MCP servers from npm or Python packages via npx/uvx, and another for installing servers from local code repositories. The server handles the configuration by updating Cursor's mcp.json file with the appropriate command, arguments, and environment variables. Written by Ani Betts, it serves as a bridge to simplify the process of adding new MCP capabilities to Cursor without requiring users to manually edit configuration files."
zncou,mcp-installer,1,,"MCP-Installer is a specialized server that simplifies the installation of other MCP servers. Developed by Ani Betts, it allows Claude to install MCP servers hosted in npm or PyPi packages through natural language commands. The implementation supports both remote package installations via npx/uvx and local repository setups, handling environment variable configuration and command-line arguments. It automatically updates the Claude Desktop configuration file, making it particularly valuable for users who want to quickly expand their AI assistant's capabilities without manually editing configuration files or remembering complex installation commands."
anaisbetts,mcp-installer,957,97520,"This MCP server, developed by anaisbetts, serves as a meta-installer for other MCP servers. It enables AI assistants to dynamically install and configure additional MCP servers from npm or PyPi packages on demand. Built in JavaScript and leveraging npx and uv, this implementation extends Claude's capabilities by allowing it to adapt its toolset in real-time based on user needs. The server interprets natural language installation requests, handles package management, and sets up environment variables, abstracting away the technical complexities of server deployment. It is particularly useful for developers and power users who want to rapidly expand Claude's functionality without manual configuration, enabling on-the-fly access to a wide range of specialized tools and APIs through the MCP interface."
anaisbetts,mcp-youtube,296,26615,"This YouTube MCP server, developed by Anais Betts, enables AI assistants to interact with YouTube video content through subtitles. It leverages yt-dlp to download video subtitles and exposes them via a standardized MCP interface, allowing AI models to analyze and summarize video content without needing to process audio or video directly. By bridging AI systems and YouTube's vast repository of video information, this server facilitates tasks like content summarization, information extraction, and topic analysis from video transcripts. It is particularly useful for AI assistants supporting research, content curation, or educational applications that involve YouTube videos as information sources."
anarcher,raindrop-io-mcp-server,0,,"This MCP server implementation provides a bridge to the Raindrop.io API, enabling AI assistants to interact with bookmarks. Developed by anarcher, it offers tools for creating and searching bookmarks, including features like tagging and collection management. The server is built in Go and uses environment variables for secure token management, making it suitable for integrating Raindrop.io functionality into AI-assisted applications or automating bookmark management tasks."
andre-jesus,claude-mcp,1,,"Claude Terminal Monitor, developed by Andre Jesus, is a powerful terminal monitoring plugin for Claude AI that provides real-time terminal output monitoring through the Model Context Protocol (MCP). It integrates seamlessly with Claude Desktop to enable live terminal monitoring capabilities in conversations. Key features include support for multiple terminals, configurable output history, TypeScript support, and robust error handling. The implementation stands out with its automatic integration process, which configures Claude Desktop to use it as an MCP server and sets up necessary logging directories. This tool is particularly useful for developers and system administrators who need to monitor and analyze terminal outputs in real-time within their AI-assisted workflows, enabling use cases such as debugging, log analysis, and system monitoring."
andrelandgraf,mcp-vs-function-calling,4,,"Demonstrates the difference between OpenAI function calling and the Model Context Protocol by implementing two approaches to controlling Home Assistant lights. The function calling implementation uses OpenAI's direct function invocation method, while the MCP server provides a standardized protocol for light control that can be used by any MCP-compatible AI assistant. Serves as an educational comparison of different AI interaction paradigms in home automation."
andresthor,cmd-line-mcp,0,,"This MCP server allows AI assistants to execute common Unix/macOS terminal commands through a controlled and secure interface. It supports the top ~40 most used terminal commands with appropriate security measures.

Features
- Safe execution of common Unix/macOS commands
- Security validation based on command type
- Command categorization (read, write, system)
- Interactive permission management
- Session-based approval system
- Configuration via environment variables or JSON file
- Comprehensive command filtering and pattern matching
- Support for command chaining via pipes (|), semicolons (;), and ampersands (&)
- Claude Desktop compatibility mode with auto-approval
- Detailed command metadata and help for AI assistants

Read Commands
ls, pwd, cat, less, head, tail, grep, find, which, du, df, file, sort, etc.

Write Commands
cp, mv, rm, mkdir, rmdir, touch, chmod, chown, etc.

System Commands
ps, top, htop, who, netstat, ifconfig, ping, etc."
andrew-beniash,mcp-command-server,0,,"This MCP command server, developed by an unnamed creator, implements a robust security layer for handling and processing commands. Built with Python and utilizing the Model Context Protocol SDK, it provides tools for input validation, sanitization, and auditing. The implementation focuses on enhancing command security through a multi-step verification process, including confirmation mechanisms. It's particularly useful for systems requiring high-security command processing, enabling use cases such as critical infrastructure management, sensitive data handling, or secure automation without compromising on safety or auditability."
andybrandt,mcp-simple-arxiv,67,75978,"This MCP server, developed by Andy Brandt, provides AI assistants like Claude with access to arXiv's scientific paper repository. It offers tools for searching papers by title and abstract, retrieving metadata and abstracts, and accessing links to available formats. The server implements proper rate limiting according to arXiv's API guidelines. By bridging AI capabilities with arXiv's vast collection of research papers, this implementation enables AI-assisted literature reviews and scientific research. It integrates seamlessly with Claude Desktop on both macOS and Windows, facilitating natural language interactions for exploring and analyzing scientific publications. The server is particularly useful for scenarios requiring up-to-date information on scientific topics, conducting comprehensive literature searches, or generating insights from academic papers in AI-assisted research and writing tasks."
andybrandt,mcp-simple-openai-assistant,24,8672,"This MCP server, developed by Andy Brandt, enables AI assistants like Claude to interact with OpenAI's GPT models through a simple interface. It provides tools for creating and managing OpenAI assistants, starting conversation threads, and exchanging messages. The server integrates seamlessly with Claude Desktop on both macOS and Windows, bridging the capabilities of different AI platforms. By allowing Claude to leverage OpenAI's specialized GPT models, this implementation expands the knowledge and skills available to the AI assistant. It is particularly useful for scenarios requiring access to OpenAI's latest models, collaborative AI interactions, or specialized task delegation in AI-powered applications."
andybrandt,mcp-simple-pubmed,63,12774,"This MCP server, developed by Andy Brandt, provides a bridge between large language models and the PubMed medical research database via the Entrez API. Built in Python, it enables AI assistants to search PubMed, access article abstracts, and potentially retrieve full-text content for open access papers. The implementation focuses on simplicity and ease of integration with Claude Desktop, offering a straightforward interface for querying biomedical literature. By connecting AI models with PubMed's vast repository of scientific articles, this server allows AI systems to access up-to-date medical research, analyze trends in healthcare, and provide evidence-based insights. It is particularly useful for scenarios like literature reviews, staying current on medical advancements, and building AI assistants that can leverage peer-reviewed scientific knowledge in the biomedical domain."
andybrandt,mcp-simple-timeserver,9,9376,"This MCP server, developed by Andy Brandt, provides AI assistants like Claude with the ability to access current time information. It offers two key tools: get_time for retrieving local time and timezone data from the user's machine, and get_utc for obtaining UTC time from an NTP server. By bridging AI capabilities with accurate timekeeping, this implementation enables time-aware interactions and calculations. The server is designed for easy integration with the Claude desktop app on both macOS and Windows. It addresses the limitation of AI models lacking inherent time awareness, making it useful for scenarios requiring temporal context, scheduling assistance, or time-based computations in AI-powered conversations and tasks."
andydukes,mcp-flowise,0,,"MCP-Flowise provides a bridge between Claude Desktop and Flowise API, enabling AI assistants to interact with Flowise chatflows and assistants. Developed by Matthew Hand, it offers two operation modes: LowLevel Mode dynamically registers tools for each chatflow retrieved from the Flowise API, while FastMCP Mode provides simpler static tools for listing chatflows and creating predictions. The implementation supports filtering chatflows via whitelists and blacklists, integrates seamlessly with Claude Desktop through Smithery, and is particularly valuable for users who want to leverage their existing Flowise workflows directly within AI assistant conversations."
andylee20014,mcp-replicate-flux,7,,"MCP Replicate Flux provides a bridge to Replicate's AI image generation models, enabling Claude to create images from text prompts. The implementation uses Node.js to handle the communication between Claude and Replicate's API, and automatically uploads generated images to cloud storage (Cloudflare R2) for easy access. Built with the Model Context Protocol SDK, it exposes a single tool for image generation that accepts a prompt and filename parameter, returning both a confirmation message and the URL to the stored image. This server is particularly useful for creative workflows where visual content generation enhances the conversation experience."
andypost,mcp-server-ts-trello,0,,"This Trello MCP server, developed by the GTT Team, integrates the Model Context Protocol with the Trello API. Built with TypeScript and leveraging the MCP SDK, it enables AI agents to interact with Trello boards, lists, and cards through natural language. The implementation provides tools for retrieving boards, lists, cards, and card details, with a focus on asynchronous operations and comprehensive error handling. It's particularly useful for project management and task tracking applications, enabling use cases such as automated task creation, progress monitoring, and workflow optimization without directly dealing with the complexities of the Trello API."
angheljf,nyt,9,,"This New York Times article search MCP server, developed by angheljf, provides an interface for language models to retrieve recent news articles based on keywords. It integrates with the NYTimes API to search articles from the last 30 days, returning key details like title, abstract, URL, date, and author. Built in TypeScript, it demonstrates core MCP concepts while focusing on a specific use case. The server handles API authentication and request formatting. This implementation is particularly useful for AI assistants needing to access current news and trending topics, conduct research on recent events, or provide summaries of latest developments in specific areas."
angiejones,mcp-selenium,99,6010,"Navigate to URLs
Find elements using various locator strategies
Click, type, and interact with elements
Perform mouse actions (hover, drag and drop)
Handle keyboard input
Take screenshots
Upload files"
angrysky56,mcp-logic,20,,"This MCP-Logic server, developed by an AI researcher, provides automated reasoning capabilities using Prover9/Mace4 for AI systems. Built with Python 3.12+ and leveraging the MCP library, it offers tools for theorem proving, model verification, and syntax validation of logical statements. The implementation focuses on bridging formal logic with AI, enabling knowledge validation and complex reasoning. It's particularly useful for AI assistants or applications needing to perform logical proofs, verify knowledge representations, or analyze logical implications. The server supports nested quantifiers and multiple premises, making it suitable for tasks like validating AI knowledge models, reasoning about system behaviors, or formal verification of logical arguments."
angrysky56,mcp-windows-website-downloader,3,,"This Windows-compatible website downloader tool for the Model Context Protocol (MCP) enables AI assistants to efficiently retrieve and store web content. Developed to address the need for a robust, Windows-friendly solution, it leverages asynchronous processing and concurrent downloads to quickly capture websites and their assets. The implementation, built with Python using libraries like aiohttp and BeautifulSoup4, offers configurable crawl depth and media file handling. It's particularly useful for tasks like web scraping, content archiving, or offline browsing, allowing AI models to interact with web content without requiring direct internet access or complex setup procedures."
aniket310101,mcp-server-couchbase,5,,"Your project is a sophisticated Model Context Protocol (MCP) server implementation that acts as a bridge between Large Language Models (specifically Claude) and Couchbase databases. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a comprehensive set of tools for database operations including document CRUD operations, scope and collection management, index handling, and N1QL query execution. The server is designed to work seamlessly with Claude Desktop, allowing natural language interactions with Couchbase databases.
The architecture is well-structured with clear separation of concerns, organized into distinct modules for different database operations. The core functionality is divided into five main tool categories: query tools for executing N1QL queries, document tools for CRUD operations, collection tools for managing collections, scope tools for scope management, and index tools for handling database indexes. Each tool is implemented with proper error handling and uses Zod for runtime type validation, making the server both robust and type-safe. The project also includes environment-based configuration and follows modern TypeScript practices with proper typing and error handling throughout the codebase."
anjor,coinmarket-mcp-server,30,,"This Coinmarket MCP server, developed by anjor, provides access to cryptocurrency market data via the CoinMarketCap API. It offers tools for retrieving latest currency listings and fetching quotes for specific tokens using symbols or slugs. Built in Python, the implementation exposes CoinMarketCap data through a standardized MCP interface, allowing Claude to analyze and interact with real-time crypto market information. By bridging AI models with CoinMarketCap's extensive cryptocurrency database, this server enhances Claude's ability to process market trends, assist with crypto portfolio analysis, and provide up-to-date information on digital assets. It is particularly useful for users seeking AI-powered insights into cryptocurrency markets, price tracking, and market cap analysis."
anpigon,mcp-server-obsidian-omnisearch,13,6729,"This MCP server, developed by anpigon, enables AI assistants to search Obsidian vaults using the Omnisearch plugin. It provides a REST API interface to query notes and retrieve absolute paths to matching results. The server uses FastMCP to expose the search functionality as a tool, allowing seamless integration with other services. By connecting AI capabilities with personal knowledge management, this implementation empowers assistants to leverage users' existing note collections. It is particularly useful for applications requiring context from personal notes, research assistance, or any scenario where an AI system needs to access and reason about information stored in Obsidian vaults."
anshuldalua,illustrator-mcp,1,,"Illustrator MCP Server enables AI assistants to execute JavaScript/ExtendScript code directly in Adobe Illustrator and view the results. Developed by Anshul Dalua, this MacOS-only implementation uses AppleScript to bridge between the MCP protocol and Illustrator's scripting capabilities, allowing bots to programmatically generate and manipulate vector graphics. The server provides two main tools: one for running arbitrary code in the current Illustrator document and another for capturing screenshots of the Illustrator window to visualize results, making it particularly useful for automated design tasks and graphic generation workflows."
anshumax,world_bank_mcp_server,16,,"This World Bank MCP server, developed by Anshuman Saxena, enables AI assistants to interact with the World Bank's open data API. Built in Python using the MCP framework, it provides tools for listing countries and indicators, as well as analyzing various socioeconomic metrics. The implementation stands out by offering a controlled interface for data exploration and analysis, making it safer and more structured for AI systems to access World Bank data. By connecting AI capabilities with a comprehensive global development database, this server allows for in-depth analysis of international economic trends, poverty statistics, and other key indicators. It is particularly useful for researchers, policymakers, and AI assistants working on global development projects, economic analysis, or cross-country comparisons."
torshepherd,compiler-explorer-mcp,3,3088,"Compiler Explorer MCP is a server that connects LLMs to the Compiler Explorer API, enabling them to compile code, explore compiler features, and analyze optimizations across different compilers and languages. The implementation provides three main tools: listing supported programming languages, retrieving available compilers for a specific language, and compiling source code with customizable options and filters. Built with FastMCP and asynchronous HTTP requests, it handles error cases gracefully and supports various compilation parameters, making it particularly valuable for developers and educators who want to compare compiler behaviors, investigate optimization differences, or explore language feature support without leaving their AI assistant conversation."
src,everart,36543,10029,"This EverArt MCP server, developed by Anthropic, provides AI assistants with image generation capabilities using the EverArt API. Built with TypeScript and leveraging the EverArt SDK, it offers a streamlined interface for creating images from text prompts using multiple AI models. The server implements robust error handling, automatic browser opening for generated images, and supports various image styles including photorealistic and vector art. By abstracting the complexities of API communication and image generation, it allows AI systems to easily incorporate visual content creation into their workflows. This implementation is particularly valuable for creative applications, content generation, and visual design tasks, enabling use cases such as automated illustration, concept visualization, and rapid prototyping of visual ideas."
upstreetai,ia-mcp,2,,"GitHub MCP server that provides a comprehensive bridge to GitHub's API, enabling AI agents to perform a wide range of repository operations like creating repositories, managing issues and pull requests, searching code, and interacting with files. Built by Anthropic, this implementation focuses on providing a clean, type-safe interface to GitHub's functionality using TypeScript and Zod for robust validation, making it particularly useful for developers who want to automate GitHub workflows through conversational AI."
longyi1207,glean-mcp-server,6,,"This MCP server implementation, developed by Anthropic, integrates the Glean API to provide Search and Chat functionalities. It uses TypeScript and the @modelcontextprotocol/sdk to create a server that can be easily deployed using Docker. The implementation offers two main tools: a search function that queries Glean's search API, and a chat function that interacts with Glean's chatbot. It's designed for organizations already using Glean who want to incorporate these capabilities into AI-assisted workflows, enabling natural language interactions with their knowledge base and chatbot through the MCP protocol."
jwaldor,mcp-scrape-copilot,1,,"This Puppeteer-based MCP server, developed by Anthropic, enables browser automation and web interaction capabilities for AI models. It provides tools for navigating web pages, taking screenshots, clicking elements, filling forms, and executing JavaScript in a real browser environment. The server uses Puppeteer to control either a headless Chromium instance (in Docker) or a visible browser window (when run locally). It integrates with TensorFlow.js for text embedding generation. This implementation is particularly useful for web scraping, automated testing, and scenarios where AI models need to interact with web content in a realistic browser context."
src,sequentialthinking,36543,364831,"This Sequential Thinking MCP server, developed by Anthropic, provides AI assistants with a structured approach to problem-solving and analysis. Built with TypeScript and leveraging the MCP SDK, it offers capabilities for breaking down complex problems into manageable steps, revising thoughts as understanding deepens, and branching into alternative reasoning paths. The server implements a dynamic thinking process that can adjust the total number of thoughts and generate solution hypotheses. By facilitating a detailed, step-by-step approach, it allows AI systems to maintain context over multiple steps and filter out irrelevant information. This implementation is particularly valuable for tasks requiring in-depth analysis, planning, or design, enabling use cases such as complex problem decomposition, iterative solution refinement, and multi-path reasoning exploration."
anton10xr,gibber-mcp,172,,"This MCP server implementation provides cryptographic tools for secure communication, including key pair generation, shared secret derivation, and message encryption/decryption using SJCL P-256 and AES-CCM. Built with Express.js and TypeScript, it offers real-time communication via server-sent events (SSE). The server is designed for applications requiring end-to-end encryption and secure data exchange between AI models and external tools."
antoncoding,mcp-brianknows,0,,"This MCP server implementation provides a bridge to the BrianKnows knowledge base API, enabling AI assistants to perform searches and interact with an agent for information retrieval. Developed by antoncoding, it offers tools for querying the BrianKnows database and leveraging its AI agent capabilities. The server is designed for use cases requiring access to specialized knowledge, such as answering domain-specific questions or providing expert-level information on topics covered by the BrianKnows database."
antonorlov,mcp-postgres-server,2,624,"A PostgreSQL database server that enables AI models to execute SQL queries, manage tables, and inspect database schemas through a standardized interface. Built with TypeScript and the MCP SDK, it features prepared statement support, automatic connection management, and support for both PostgreSQL and MySQL-style parameter placeholders. The implementation is particularly valuable for developers who want to give AI assistants secure, controlled access to PostgreSQL databases for querying and analysis tasks."
anurag-dhamala,news-mcp-server,3,1567,This MCP server fetches latest news and sources based on country and language using newsdata.io. You need to provide your own API key.
anuragrai017,database-updater-mcp-server,0,,"This database-updater MCP server, developed by an unnamed author, provides a streamlined interface for updating databases from CSV and Excel files. Built with TypeScript and leveraging libraries like csv-parser and xlsx, it offers tools for connecting to various database types including PostgreSQL, MySQL, MongoDB, and SQLite. The implementation focuses on configurable connection settings and table mapping, making it accessible for AI assistants or applications needing to perform bulk data updates. It's particularly useful for tasks like data migration, automated reporting, or synchronizing databases with external data sources, enabling efficient database management without requiring deep knowledge of individual database APIs or file parsing complexities."
anuragrai017,python-docs-server-mcp-server,0,,"This Python documentation MCP server, developed by an unnamed author, provides a tool for fetching Python documentation using the Brave Search API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined interface for querying Python-related information. The implementation focuses on simplicity, offering a single 'get_python_docs' function that takes a search query and returns relevant documentation links. It's particularly useful for AI assistants or applications needing quick access to Python documentation, enabling tasks like code explanation, function lookup, or general Python language queries without requiring direct web scraping or complex API integrations."
anycontext-ai,thingsboard-mcp-server,4,,"ThingsBoard MCP Server provides a bridge between AI assistants and ThingsBoard IoT platforms, enabling access to device telemetry and attributes through a standardized interface. The server exposes tools for retrieving tenant devices, accessing historic and latest device telemetry data, and fetching device attributes. Built with Python using FastMCP and asynchronous HTTP requests, it handles authentication with JWT tokens and automatically refreshes expired credentials. This implementation is particularly valuable for IoT administrators and analysts who need to monitor device data, analyze telemetry history, or access device attributes directly through conversational AI."
aourpallynikhil,nuke-mcp-2,1,,"Provides a bridge between AI assistants and Nuke, the professional compositing software, enabling automation of common tasks through a Python interface. The server exposes tools for creating and configuring nodes, setting knob values, retrieving node information, and executing render operations. Built with Node.js and a Python bridge script, it handles communication between the MCP protocol and Nuke's Python API, making it valuable for visual effects artists and compositors who want to automate their Nuke workflows through natural language interaction."
aourpallynikhil,photoroom-mcp,0,,"Provides a bridge to the Photoroom API for removing backgrounds from images, with support for different output formats, types, and scaling options. The server exposes a single tool for background removal that accepts image URLs and returns processed results as data URLs. Useful for automated image editing workflows that require background removal capabilities."
apache,iotdb-mcp-server,9,,"The IoTDB MCP Server provides a secure interface for AI assistants to interact with Apache IoTDB time-series databases. Developed by the Apache Software Foundation, this Python-based implementation enables three core database operations: executing SELECT queries, listing available tables, and describing table schemas. The server connects to IoTDB instances using a session pool for efficient connection management and returns query results in a structured text format. It's particularly valuable for data analysts and IoT applications that need AI-assisted exploration and analysis of time-series data stored in IoTDB without requiring direct database access."
apappascs,tavily-search-mcp-server,1,,"This Tavily Search MCP server, developed by Alexandros Pappas, integrates the Tavily Search API into the Model Context Protocol framework. Built with TypeScript and leveraging Express.js, it provides a streamlined interface for AI models to perform web searches using Tavily's advanced search capabilities. The implementation supports both stdio and Server-Sent Events (SSE) communication methods, making it versatile for different deployment scenarios. It's particularly useful for enhancing AI-driven applications with real-time, high-quality web search results, enabling use cases like fact-checking, research assistance, or content generation that requires up-to-date information from the internet."
apecloud,kb-cloud-mcp-server,2,,"KB Cloud MCP Server provides AI assistants with access to KubeBlocks Cloud resources through a standardized tool interface. Developed by ApeCloud, this Go implementation enables querying organizations, environments, instances, and backups via the KB Cloud API. The server authenticates using API keys, supports internationalization, and includes comprehensive logging capabilities. It's particularly valuable for automating database management tasks, retrieving cloud environment information, and building AI-powered tools that interact with the KubeBlocks ecosystem."
aperture147,exa-mcp-worker,0,,"An MCP server that provides AI assistants with access to Exa.ai's search capabilities, enabling them to perform web searches with customizable parameters like result count and live crawling options. The server handles authentication with Exa's API, processes search queries, and returns structured results as JSON, making it valuable for AI assistants that need to retrieve up-to-date information from the web without leaving the conversation context."
apeyroux,mcp-xmind,18,864,"This MCP server, developed by apeyroux, enables AI assistants like Claude to analyze and query XMind mind maps. Built in TypeScript, it provides powerful capabilities for searching, extracting, and analyzing content across multiple XMind files. The implementation stands out by offering smart fuzzy search, hierarchical navigation, and multi-file analysis. By connecting AI capabilities with structured mind map data, this server enables AI systems to gain insights from personal or organizational knowledge bases. It is particularly useful for task management, information retrieval, and knowledge graph analysis scenarios where mind maps serve as a primary data source."
api7,apisix-mcp,16,1077,"A plugin for Apache APISIX that implements the Model Context Protocol (MCP) server, allowing APISIX to serve as an MCP server for AI applications."
apicolet,brevo-mcp,0,,"This MCP server, developed by Antoine Picolet, provides integration with Brevo's Multi-Channel Platform API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing email campaigns, contacts, and other communication channels. The implementation focuses on providing a standardized interface for AI models to interact with Brevo's features, enabling use cases such as automated email marketing, contact list management, and multi-channel communication orchestration. By connecting AI assistants with Brevo's platform, this server allows for sophisticated scenarios like personalized content generation, audience segmentation, and campaign performance analysis. It's particularly useful for businesses and marketers looking to enhance their customer communication strategies with AI-powered automation and insights."
apify,actors-mcp-server,155,,"This MCP implementation, developed using TypeScript, provides a robust foundation for building and deploying web scraping and automation projects. It leverages the Apify platform and Crawlee library, offering a structured environment for creating scalable web crawlers and data extraction tasks. The implementation includes configuration files for ESLint, TypeScript, and Docker, ensuring code quality and consistency across different development environments. By abstracting common web scraping challenges and providing integration with Apify's cloud infrastructure, this tool enables developers to focus on building complex data acquisition workflows. It is particularly useful for projects requiring large-scale web data extraction, automated testing of web applications, or building AI training datasets from web sources."
apify,mcp-server-rag-web-browser,116,,"This MCP server, developed by Apify, provides a web browsing interface for large language models and RAG pipelines. Built in JavaScript, it integrates with the RAG Web Browser Actor on the Apify platform to enable AI assistants to perform web searches, scrape content from top results, and fetch individual URLs. The implementation stands out by returning cleaned web content as Markdown and offering flexible search result limits. By connecting AI models with real-time web data, this server allows AI systems to access up-to-date information, analyze online content, and provide web-informed responses. It is particularly useful for scenarios like research tasks, content summarization, and building AI assistants that can leverage current web information to enhance their knowledge and capabilities."
apinetwork,piapi-mcp-server,36,,"This PiAPI MCP server, developed by an unnamed creator, integrates with the PiAPI image generation service to provide AI-driven image creation capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized interface for generating images based on text prompts. The server implements environment variable management for API key security and uses strict TypeScript configuration for robust type checking. By abstracting the complexities of the PiAPI service, it enables AI systems to easily create images from textual descriptions. This implementation is particularly valuable for applications requiring programmatic image generation, facilitating use cases such as content creation, visual design assistance, and automated illustration generation."
apoorvv,mcp-claude-enhancements,6,,"MCP-Claude-Enhancements is a collection of utility servers that extend Claude's capabilities through simple, focused tools. Created by Apoorv Vishnoi, it includes modules for greeting users, counting desktop files, saving conversations to text files, and a smart context handler. Each server is built with FastMCP and designed to be easily configured through the provided JSON configuration file. The implementation demonstrates practical ways to enhance Claude's functionality with everyday tasks while maintaining a lightweight, modular approach that allows users to selectively enable the tools they need."
shadowfax92,apple-calendar-mcp,1,126,"A TypeScript-based MCP server for interacting with Apple Calendars on macOS, providing a standardized interface for AI models to read, create, update, and delete calendar events. Built to work with a companion Swift-based Calendar API Bridge, the implementation supports flexible date parsing and handles calendar permissions through a local HTTP server running on port 8080. Particularly useful for AI assistants that need to manage scheduling or retrieve calendar information directly from a user's macOS system."
appleinmusic,baidu-search-mcp,4,,"A Baidu Search integration for AI assistants that enables direct access to China's largest search engine through the MCP. This TypeScript implementation allows agents to perform web searches on Baidu, retrieve search results, and extract relevant information without requiring users to leave their conversation interface. It leverages the @modelcontextprotocol/sdk and axios for making API requests, making it particularly valuable for use cases involving Chinese language queries, accessing China-specific content, or gathering information from behind the Great Firewall."
ayushsinghvi92,app-seo-ai,0,,"App SEO AI provides a bridge between AI assistants and Google Ads Keyword Planner API, enabling SEO automation and optimization through keyword research, SERP analysis, and competitor insights. The server exposes RESTful endpoints for generating keyword ideas, analyzing search results, and evaluating competitor domains, making it valuable for digital marketers who need to optimize content, understand search trends, and identify competitive opportunities without leaving their AI assistant conversation."
apridachin,kagi-search-mcp,2,,"This Kagi MCP server, developed by Aleksey Pridachin, integrates the Kagi search API into the Model Context Protocol ecosystem. Built with Python using libraries like httpx and mcp, it provides tools for web search, news retrieval, and fast GPT-powered question answering. The server implements environment-based configuration for API key management and offers a streamlined interface to Kagi's advanced search capabilities. By abstracting Kagi API operations into a standardized MCP format, it enables AI systems to easily access high-quality web search results and enriched content. This implementation is particularly valuable for applications requiring up-to-date information retrieval, facilitating use cases such as research assistance, fact-checking, and content enrichment across various domains."
aptro,superset-mcp,20,,"The Superset MCP Integration provides AI assistants with programmatic access to Apache Superset's data visualization and analytics capabilities through a comprehensive set of tools. Built with Python using FastMCP, it enables operations like dashboard management, chart creation, SQL query execution, and database administration via authenticated API calls. The implementation handles token management, automatic refreshing, and proper error handling to maintain secure connections with Superset instances. It's particularly valuable for users who want to leverage AI assistants to explore data, create visualizations, and manage analytics workflows without leaving their conversational interface."
aptro,zerodha-mcp,8,,"Zerodha-MCP provides a secure interface for AI models to interact with the Zerodha trading platform through a FastMCP server implementation. Built by Aptro, it enables models to authenticate with Zerodha, manage portfolios, place stock and mutual fund orders, retrieve market data, and set up SIPs. The implementation handles authentication flows securely, stores access tokens locally, and provides comprehensive error handling across all trading operations. This server is particularly valuable for users who want to automate trading workflows or analyze their investment portfolio directly within AI assistant conversations."
apw124,logseq-mcp,5,1373,"Logseq MCP Tools provides a set of tools that enable AI agents to interact with local Logseq knowledge graphs through the Model Context Protocol. Developed by apw124, this implementation offers comprehensive functionality for managing pages and blocks in Logseq, including creating, updating, and searching content. The server communicates with Logseq's API to perform operations like retrieving journal entries, managing hierarchical block structures, and executing complex searches. It's particularly useful for AI assistants that need to capture notes, organize information, or retrieve knowledge from a user's personal Logseq database without requiring direct access to the application."
arabold,docs-mcp-server,23,2443,"Docs MCP Server provides a specialized documentation scraping and retrieval system that enables AI assistants to access library documentation from various sources including GitHub, NPM, PyPI, and web pages. Built with TypeScript, it implements a pipeline architecture that handles document scraping, processing, splitting, and storage with features like semantic markdown splitting, greedy chunk optimization, and version-aware retrieval. The server exposes tools for searching documentation, finding specific versions, listing available libraries, and managing scraping jobs through a well-defined API. Particularly valuable for developers who need AI assistants to reference accurate, up-to-date documentation without leaving their workflow."
arathald,mcp-editor,6,,"This MCP server, developed primarily by Claude Sonnet 3.5 with oversight from arathald, is a TypeScript port of Anthropic's filesystem editing tools. It provides a standardized interface for AI agents to perform file operations like reading, writing, and editing on the host system. Built using the Model Context Protocol SDK, it focuses on replicating the functionality of Anthropic's original Python implementation in a TypeScript environment. The server is designed for users familiar with Anthropic's tools who want similar capabilities in a TypeScript-based MCP setup. It's particularly useful for AI-assisted file manipulation tasks, but comes with strong warnings about potential security risks due to its lack of access controls."
arben-adm,brave-mcp-search,7,,"This Brave Search MCP server, developed by Arben Ademi, integrates the Model Context Protocol with the Brave Search API. Built with Python and leveraging libraries like FastMCP and HTTPX, it enables AI agents to perform web searches and local business lookups through natural language queries. The implementation focuses on providing a streamlined interface to Brave's privacy-respecting search capabilities, offering tools for general web searches and geographically-targeted local searches. It's particularly useful for AI assistants and applications needing up-to-date web information or location-based data, enabling use cases such as research assistance, fact-checking, and local recommendations without directly interacting with the Brave Search API."
arben-adm,mcp-sequential-thinking,72,,"Sequential Thinking is an MCP server developed by Arben Ademi for advanced problem solving. It implements a structured approach to break down complex problems into sequential steps, enabling more thorough and methodical analysis. The server integrates with the MCP CLI and leverages the Rich library for enhanced text formatting. Its key differentiator is the focus on step-by-step reasoning, making it particularly effective for tasks requiring detailed planning, logical deduction, or systematic troubleshooting. This implementation is well-suited for developers, researchers, and analysts working on intricate problems that benefit from a structured thinking process."
arben-adm,tavily-mcp-search,1,,"This MCP server integrates with the Tavily search API, providing AI assistants with advanced web search capabilities. Developed by Arben Ademi, it leverages the MCP framework and Tavily's AI-powered search engine to deliver highly relevant and contextual search results. The implementation is built in Python 3.11+ and uses dependencies like httpx and python-dotenv for efficient HTTP requests and environment variable management. It's designed for developers and AI applications that require enhanced web search functionality, enabling natural language queries to retrieve up-to-date information from across the internet."
arborist-ai,claudehopper,1,,"ClaudeHopper is an AI-powered construction document assistant that integrates with Claude Desktop to help users analyze and search through architectural drawings and specifications. Developed by Tom Finlayson, it uses LanceDB for vector storage and Ollama for local AI processing, enabling features like image extraction from PDF drawings and semantic search across construction documents. The implementation includes tools for processing both textual specifications and visual elements from CAD drawings, making it particularly valuable for architects, engineers, and construction professionals who need to quickly access and interpret complex project documentation."
arbuthnot-eth,paypal-mcp-defunct,0,,"PayPal MCP Server provides integration with PayPal's payment processing APIs through a standardized interface. Built by Brandon Arbuthnot, it enables AI assistants to create and capture payments, manage subscriptions, handle business operations like invoicing and payouts, and access user information. The server implements robust authentication with automatic token refresh, comprehensive input validation using Zod schemas, and detailed error handling. It's particularly valuable for e-commerce applications, financial services, and any workflow requiring secure payment processing capabilities without leaving the conversation interface."
archimedescrypto,excel-reader-mcp,15,,"This MCP server, developed by ArchimdesCrypto, provides a standardized interface for reading Excel files with automatic chunking and pagination support. Built with TypeScript and leveraging the Model Context Protocol SDK and SheetJS library, it offers tools for efficient handling of large Excel datasets. The implementation focuses on breaking down Excel files into manageable chunks, enabling AI models to process extensive spreadsheet data without memory constraints. By connecting AI assistants with Excel file content, this server allows for sophisticated data analysis, reporting, and manipulation tasks. It's particularly useful for applications dealing with large-scale data processing, financial analysis, or any scenario requiring programmatic access to Excel file contents through a standardized MCP interface."
archimedescrypto,figma-mcp-chunked,1,,"Figma MCP Server with Chunking provides a memory-efficient interface to the Figma API, designed to handle large Figma files by breaking operations into manageable chunks with pagination support. It features configurable memory limits, node type filtering, progress tracking, and resume capabilities for interrupted operations. The implementation includes tools for retrieving file data, listing files, accessing version history, comments, components, styles, and specific nodes, making it particularly valuable for designers and developers who need to programmatically access and analyze complex Figma designs without memory constraints."
dragonjump,mcp-arcknowledge,0,,"ArcKnowledge is a FastMCP server that bridges AI assistants to custom knowledge base API webhooks, enabling retrieval-augmented generation (RAG) capabilities. Built with Python using the FastMCP framework, it manages multiple knowledge sources through a configurable JSON structure, supports both text and image queries, and handles API authentication. The implementation provides tools for querying knowledge bases, managing document sources, and processing images, making it particularly useful for applications requiring access to specialized knowledge repositories, custom RAG implementations, or multi-source information retrieval with visual context support."
arcreactor9,bsc_mcp_services,0,,"BSC MCP Server provides direct access to the Binance Smart Chain blockchain for LLMs, enabling real-time data retrieval and interaction with the network. Built with Node.js and TypeScript using ethers.js, it offers tools for checking block information, transaction details, wallet balances, and creating custom Four.meme tokens. The server supports both STDIO for direct LLM integration and HTTP/SSE for web applications, making it ideal for blockchain data analysis, wallet monitoring, and token creation workflows without requiring deep blockchain development knowledge."
argia-andreas,linear-mcp-server,0,,"A TypeScript MCP server that bridges Linear's project management platform with AI assistants, enabling retrieval of a user's todo tickets by user ID or email. Built with the Model Context Protocol SDK, it provides a standardized way to fetch and expose Linear task data, making it easy to integrate project management context directly into AI workflows."
ariunbolor,nsaf-mcp-server,0,,"NSAF MCP Server provides AI assistants with access to the Neuro-Symbolic Autonomy Framework, focusing on Self-Constructing Meta-Agents (SCMA) that can evolve and optimize their neural network architectures through generations. The server exposes tools for running evolutionary processes with customizable parameters and comparing different agent architectures, enabling AI assistants to leverage advanced neural architecture search capabilities without requiring deep expertise in evolutionary algorithms. Built with TensorFlow and designed to work seamlessly with Claude Desktop and Cline, this implementation is particularly valuable for researchers and developers exploring autonomous AI systems that can self-design and adapt to different problem domains."
packages,phoenix-mcp,5387,353,"Phoenix MCP Server provides a unified interface to Arize Phoenix's capabilities through the Model Context Protocol. Developed by Arize AI, this TypeScript implementation enables AI assistants to manage prompts, explore datasets, and run experiments against the Phoenix platform. The server exposes tools for creating and iterating on prompts across different LLM providers (OpenAI, Anthropic, Google), working with evaluation datasets, and visualizing experiment results, making it particularly valuable for teams building and evaluating LLM applications who want to leverage Phoenix's observability features through AI assistants."
arjshiv,localutils-mcp-server,2,,"The Local Utilities MCP Server provides access to various system utilities through a standardized interface, enabling AI assistants to retrieve local system information. Built with TypeScript and the Model Context Protocol SDK, it offers tools for getting current time and date, hostname, public IP address, directory listings, Node.js version information, and checking processes running on specific ports. The server can be used globally or via npx without installation, integrates seamlessly with Cursor through simple configuration, and includes a pre-commit hook that automatically builds the server before each commit to ensure build files are always up-to-date in the repository."
arjunbhuptani,sparkmango,1,5153,"SparkMango is a Python-based server that converts Solidity smart contracts into functional RESTful API implementations following the MCP specification. Developed by Arjun Bhuptani, it analyzes contract ABIs, generates method implementations using OpenAI's GPT-4, and creates a complete server structure with state management, event handling, and comprehensive documentation. The server provides a bridge between blockchain contracts and Python applications, making it easier for AI agents to interact with smart contracts through standardized API endpoints without requiring deep blockchain knowledge."
arjunkmrm,mcp-minecraft,66,3638,"This MCP implementation provides a Minecraft integration, allowing AI models to interact with and control Minecraft game environments. Built using TypeScript and Node.js, it leverages the minecraft-protocol and mineflayer libraries to establish connections and manipulate in-game entities. The implementation supports various Minecraft versions and includes features like pathfinding and automated actions. It's designed for researchers, educators, and developers interested in using Minecraft as a sandbox for AI experimentation, educational simulations, or creating advanced in-game automation tools."
arjunkmrm,perplexity-deep-research,2,,"Perplexity Deep Research MCP enables AI assistants to perform web searches using Perplexity's sonar-deep-research model through the chat completions API. It provides a single tool called 'deep_research' that accepts search queries and optional recency filters, returning comprehensive search results with proper citations. Built for integration with Claude Desktop via Smithery, this implementation requires a Perplexity API key and is particularly valuable for workflows requiring up-to-date information retrieval and research capabilities directly within AI assistant conversations."
arjunkmrm,perplexity-search,4,,"Perplexity Search MCP enables AI assistants to perform web searches using Perplexity's API with sonar or sonar-pro models. Built by arjunkmrm, it provides a single 'search' tool that accepts a query parameter and optional recency filtering, returning detailed search results with citations. The implementation runs on Node.js, can be deployed via Docker, and requires a Perplexity API key for authentication, making it ideal for workflows requiring up-to-date information from the web without leaving the conversation interface."
arjunkmrm,mcp-sg-lta,0,,"This MCP server, developed by Arjun Kumar, provides a standardized interface for interacting with Singapore's Land Transport Authority (LTA) DataMall API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers real-time access to transportation information including bus arrivals, traffic conditions, and train service updates. The implementation focuses on exposing LTA's data through a consistent MCP interface, enabling AI models to perform complex transportation-related queries and analysis. By connecting AI assistants with LTA's extensive dataset, this server facilitates sophisticated urban mobility scenarios like route optimization, congestion prediction, and public transport planning. It's particularly valuable for applications and AI systems aimed at improving urban transportation efficiency and user experience in Singapore."
armorwallet,armor-crypto-mcp,166,,"Armor Crypto MCP provides AI assistants with direct access to blockchain operations, crypto trading, and wallet management through the Armor Wallet API. This server exposes a comprehensive suite of tools for creating and managing wallets, checking token balances, executing swaps, setting up DCA (Dollar Cost Averaging) orders, and transferring tokens across different blockchains. Built with FastMCP, it authenticates via JWT tokens and includes detailed logging for all operations, making it particularly valuable for users who want their AI assistants to monitor crypto portfolios, execute trading strategies, or manage multiple wallets without leaving the conversation interface."
arnavsurve,gateway-mcp,0,,"Gateway MCP serves as a bridge between AI assistants and various MCP services, enabling discovery and interaction with remote tools through a unified interface. Built with Python using FastMCP, it provides tools to discover available services from a registry, establish connections to both SSE-based MCP servers and HTTP APIs, and proxy tool calls to connected services. The implementation handles connection management, request routing, and response formatting, making it particularly valuable for workflows requiring access to multiple specialized services without leaving the conversation context."
arnavsurve,scdl-mcp,1,,"The SoundCloud Downloader MCP server enables Claude to download tracks, playlists, and user content from SoundCloud directly through conversation. Built by arnavsurve, this implementation wraps the popular scdl command-line tool in a FastMCP interface, providing granular control over download options including output location, download modes (all tracks, uploads, favorites, reposts, or playlists), track limits, and metadata handling. The server requires ffmpeg and the scdl package as dependencies, making it particularly valuable for users who want to archive or collect SoundCloud content without manually using command-line tools."
arodoid,unitymcp,416,,"UnityMCP, developed by an unnamed author, is a Unity Editor plugin and server implementation that enables AI assistants to interact with Unity projects in real-time. Built with C# and TypeScript, it offers tools for retrieving editor state, executing C# commands, and accessing logs. The implementation focuses on providing a standardized interface for AI models to manipulate Unity scenes, objects, and project settings. It's particularly useful for tasks like automated level design, asset management, or debugging assistance, allowing AI to directly influence Unity projects without requiring deep knowledge of the Unity API or editor interface."
aroglahcim,magick-mcp,1,209,"This MCP server, developed by aroglahcim, provides a bridge to ImageMagick's command-line interface. Built with Node.js and leveraging the Model Context Protocol SDK, it enables AI assistants to execute ImageMagick commands for image processing and manipulation. The implementation focuses on providing a simple, standardized interface for running ImageMagick operations through MCP. It's particularly useful for developers and content creators who want to integrate ImageMagick's powerful image editing capabilities into AI workflows, enabling use cases such as automated image resizing, format conversion, and applying filters or effects without directly managing command-line interactions."
arpitbatra123,mcp-googletasks,4,,"Google Tasks MCP Server provides a bridge between Claude and Google Tasks, allowing users to manage task lists and tasks directly through Claude. Built with TypeScript and the Google Tasks API, it offers a comprehensive set of tools for creating, updating, and organizing tasks, including features like marking tasks as completed, reordering tasks, and clearing completed tasks. The implementation requires Google Cloud authentication and is designed for personal use, making it ideal for users who want to integrate their task management workflow with Claude's conversational interface."
arre-ankit,notion-mcp-server,0,,"This Notion MCP server, developed as an open-source project, enables AI assistants to interact with Notion workspaces and databases. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for creating, reading, updating, and deleting Notion pages and databases. The server abstracts the complexities of the Notion API, allowing AI systems to seamlessly incorporate Notion's organizational and collaborative features into their workflows. It's particularly useful for productivity assistants, project management tools, and AI developers looking to integrate Notion capabilities, enabling use cases like automated note-taking, task management, and knowledge base maintenance within Notion workspaces."
artemis-xyz,artemis-mcp,1,4873,"Artemis MCP Server connects Claude Desktop with the Artemis API to create and manage ART formulas for cryptocurrency data analysis. Developed by Son Do at Artemis.xyz, it provides tools for validating API keys, retrieving crypto token metrics, and generating formulas for accessing price data, fees, revenue, and other time-series information. The implementation requires Python 3.10+, uv package manager, and an Artemis API key, making it valuable for users who need to analyze cryptocurrency data directly within Claude conversations without switching contexts."
arthurcolle,openai-mcp,19,,"This OpenAI-compatible MCP server implementation provides a bridge between AI assistants and large language models, supporting both OpenAI and Anthropic models. It features a robust architecture with prompt templating, streaming responses, efficient caching, and comprehensive error handling. The server exposes endpoints for health checks, context generation, and prompt management, while also offering advanced features like token usage tracking and Prometheus metrics integration. Ideal for applications requiring reliable, high-performance access to LLMs with the flexibility to customize prompts and manage response caching."
artillect,mtg-mcp-servers,2,,"The MTG Deck Manager MCP servers provide Magic: The Gathering enthusiasts with two specialized tools for card management and information retrieval. Built with Python using the FastMCP framework, the implementation consists of an MTG deck manager server that handles deck uploads, card drawing, hand management, mulligans, and sideboarding, alongside a Scryfall API integration server that enables card searches, random card retrieval, and detailed card information lookups. The servers can be configured in the Claude Desktop client, allowing users to seamlessly interact with their MTG decks and access comprehensive card data without leaving their conversation interface - perfect for deck testing, card research, and game simulation."
aryankeluskar,canvas-mcp,6,,"Canvas MCP is a tool that enables AI agents to interact with Canvas LMS, allowing them to find relevant educational resources based on natural language queries. Built by Aryan Keluskar, it leverages the Canvas API to retrieve course information, modules, and module items, while using Google's Gemini AI to analyze queries and determine the most relevant resources. The implementation includes caching mechanisms for improved performance and supports both text-based queries and image analysis to help students find learning materials without leaving their AI assistant conversation. It's particularly valuable for educational workflows where students need quick access to course materials based on specific learning objectives or questions."
ashdevfr,discourse-mcp-server,3,88,"Discourse MCP Server implements the Model Context Protocol for searching posts on Discourse forums. Built by Sylvain CAU, it provides a single tool 'search_posts' that allows AI assistants to query Discourse content using the discourse2 npm package. The server can be deployed via Docker or run directly with npx, requiring configuration of the Discourse API URL, key, and username as environment variables. This implementation is particularly useful for workflows where AI assistants need to reference or analyze content from Discourse forums without leaving the conversation interface."
ashdevfr,duckduckgo-mcp-server,2,8376,"The DuckDuckGo MCP Server provides web search capabilities through the DuckDuckGo search engine, enabling Claude to retrieve real-time information from the internet. Developed by Sylvain CAU, this Python-based implementation offers a simple yet effective search tool that returns structured results from DuckDuckGo queries. The server can be deployed either through UVX or Docker, making it easily accessible for Claude Desktop users who need to augment their AI assistant with current web information for research, fact-checking, or staying updated on recent events."
ashiknesin,pushover-mcp,8,1193,"This MCP server implementation provides integration with Pushover.net for sending notifications. Developed by Ashik Nesin, it leverages the @modelcontextprotocol/sdk to enable seamless communication between MCP clients and the Pushover service. The server offers a straightforward way to send push notifications to various devices, making it useful for applications that require real-time alerts or updates within the MCP ecosystem."
ashley-ha,mcp-manus,3,,"The MCP Browser Agent enables Claude to interact with web browsers through the Model Context Protocol, built during the AGI House MCP Hackathon by Jaeyun and Ashley Ha. It leverages the browser-use library to provide a seamless integration that allows Claude to automate browser interactions, detect interactive elements, and execute planned actions. The implementation includes two main tools: one for retrieving the current browser state and planning context, and another for executing actions in the browser. This server runs on macOS with Python 3.12 and Google Chrome, making it ideal for users who want to give Claude the ability to navigate websites, fill forms, and interact with web content directly from conversations."
ashwanth1109,mcp-spotify,2,,"This Spotify MCP server implementation, developed by ashwanth1109, provides a comprehensive interface to control and interact with Spotify's music streaming service. It leverages the Spotipy library to offer a wide range of functionalities including playlist management, playback control, track searching, and user data retrieval. The server is designed to work seamlessly with Cursor Composer, enabling AI assistants to control Spotify playback, manage playlists, and access user listening data. It's particularly useful for creating voice-controlled music experiences, generating personalized playlists, and integrating Spotify functionality into AI-driven applications. The implementation focuses on ease of use and flexibility, supporting various Spotify API endpoints and offering detailed error handling for robust operation."
asimihsan,mcp-multilspy,3,,"MCP-MultilspyLSP provides Language Server Protocol (LSP) capabilities to language models through the multilspy library, enabling code intelligence features like finding definitions, references, completions, and documentation across multiple programming languages including Python, Java, TypeScript, and more. Built by Asim Ihsan, this server exposes a consistent API for language intelligence that works with any MCP-compatible client like Claude Desktop, making it valuable for developers who need to analyze and understand code without switching contexts or installing language-specific tooling."
askjohngeorge,mcp-doc-scraper,5,,"This Doc Scraper MCP server converts web documentation into markdown format using Jina.ai's API. It provides a single tool, 'scrape_docs', which takes a URL and output path as input, fetches the web page, converts it to clean markdown, and saves the result. Built with Python and leveraging libraries like aiohttp and pydantic, it offers a straightforward solution for automating documentation conversion. The implementation focuses on simplicity and ease of use, making it ideal for developers, technical writers, or content managers who need to quickly transform online documentation into a more portable markdown format for various purposes such as content migration, offline reading, or integration with markdown-based systems."
asmagin,mcp-server-flutter,2,,"This MCP server implementation provides a bridge to the Model Context Protocol SDK for Flutter applications. Developed by asmagin, it offers a TypeScript-based server that can be easily integrated into Flutter projects. The server utilizes the @modelcontextprotocol/sdk package and Zod for data validation. It's designed to facilitate communication between Flutter clients and MCP-compatible AI models, enabling developers to incorporate advanced AI capabilities into their mobile applications. The implementation focuses on type safety, modularity, and ease of use, making it suitable for both development and production environments. It's particularly useful for Flutter developers looking to leverage MCP's capabilities in their mobile apps, supporting use cases like natural language processing, image recognition, or other AI-driven features."
assafelovic,gptr-mcp,84,,"GPT Researcher MCP Server provides a bridge between AI assistants and web research capabilities, enabling real-time information gathering and report generation. Developed by Assaf Elovic, this implementation leverages the GPT Researcher library to offer tools for conducting deep research, performing quick searches, generating reports, and retrieving source information. The server exposes its functionality through well-defined tools and a resource endpoint that allows direct access to research context without explicit function calls. Built with FastMCP and Python, it includes features like research caching, custom report generation, and comprehensive source tracking, making it ideal for AI assistants that need to access current web information for tasks like answering time-sensitive questions, creating research reports, or providing evidence-based responses."
ast-grep,ast-grep-mcp,12,,"ast-grep MCP provides a bridge to the ast-grep code search tool, enabling AI assistants to find code patterns in projects using abstract syntax tree matching. The implementation exposes a single tool that accepts a pattern, project folder, and optional language parameter, then executes the ast-grep CLI command and returns the results as structured JSON. This server is particularly valuable for developers who want to leverage AI assistants for code analysis, pattern matching, and refactoring tasks without leaving their development environment."
astromined,pygithub-mcp-server,0,,"PyGithub MCP Server provides a bridge between AI assistants and the GitHub API through PyGithub, enabling operations like managing issues, repositories, and pull requests. The implementation follows a modular architecture with domain-specific schemas, converters, and operations that handle authentication, rate limiting, and error recovery automatically. Built with a focus on reliability and maintainability, it includes comprehensive test coverage with both unit and integration tests, making it particularly valuable for AI-assisted software development workflows that require GitHub integration."
asusevski,opendota-mcp-server,4,,"This MCP server implementation provides a bridge to the OpenDota API, enabling AI assistants to access real-time Dota 2 statistics, match data, and player information. Developed by Anthony Susevski, it offers a wide range of tools for retrieving player profiles, match details, hero statistics, and professional player data. The server is designed for use cases requiring in-depth Dota 2 analytics, such as game analysis, player performance tracking, or esports research applications."
asyncfuncai,github-chat-mcp,24,1108,"GitHub Chat MCP server enables AI assistants to analyze and query GitHub repositories through a simple interface. Developed by AsyncFuncAI, it provides tools for indexing repositories and asking detailed questions about codebases, leveraging the GitHub Chat API to retrieve contextual information and source references. The implementation is built with Python using the FastMCP framework, supports both direct installation and containerized deployment, and is particularly valuable for developers seeking to understand unfamiliar repositories, analyze code architecture, or explore technical implementations without manually navigating through files."
athapong,aio-mcp,8,,"This MCP server implementation, developed by athapong, integrates multiple services including GitLab, Jira, Confluence, YouTube, and Google AI. It provides AI-powered search capabilities and various utility tools for development workflows. The server offers a wide range of functionalities, from managing GitLab projects and issues to searching web content and executing command-line scripts, making it suitable for complex software development and project management tasks."
athapong,argus,1,,"This MCP server implementation, named Argus, provides tools for analyzing GitLab repositories and performing security assessments. Developed by Athapong Kaewsalapoom, it offers capabilities such as retrieving repository structures, reading important files, and listing branches. Built with Python and leveraging libraries like GitPython and FastMCP, Argus focuses on secure GitLab integration and easy deployment via Docker. It is particularly useful for DevOps and security teams needing to automate repository analysis, conduct code reviews, or integrate GitLab operations into AI-assisted workflows. The implementation's modular design allows for easy extension of its functionality to cover additional GitLab-related tasks."
atharva-gundawar,macos_gui,3,,"The macOS GUI Tools server provides AI assistants with the ability to interact with native macOS applications through a set of specialized tools. Built with Python using the FastMCP framework, it enables operations like capturing screenshots of applications, identifying UI elements (buttons and text areas), moving the mouse cursor to specific coordinates, clicking, and typing text. The implementation supports various Apple applications including Notes, Safari, Mail, and others by leveraging the macOS accessibility framework to extract UI element information. This server is particularly valuable for workflows requiring desktop automation within AI assistant conversations, allowing users to control their Mac applications without manual intervention."
atharvagupta2003,mcp-stripe,27,,"This MCP implementation, developed for Stripe integration, provides a streamlined interface for interacting with Stripe's payment processing API. Built using Python and leveraging the MCP SDK, it enables AI assistants to perform various payment-related operations such as transaction processing, customer management, and subscription handling. The implementation focuses on simplifying complex payment workflows, making it easier to incorporate Stripe's functionality into AI-driven financial applications. It's particularly useful for businesses and developers who want to automate payment processes, integrate Stripe services into their AI systems, or build intelligent financial management tools without directly managing API calls to Stripe."
aashari,mcp-server-atlassian-confluence,3,8156,"A TypeScript-based MCP server for Atlassian Confluence integration that provides AI assistants with direct access to Confluence spaces, pages, and content. It offers tools for listing spaces, retrieving page details, and performing advanced searches using Confluence Query Language (CQL), all while converting content to Markdown format for optimal readability. The implementation includes robust error handling, pagination support, and a CLI interface for direct interaction, making it particularly valuable for teams that need to connect Claude or other AI systems to their Confluence knowledge bases without leaving the conversation interface."
atom2ueki,mcp-server-ios-simulator,17,,"A TypeScript-based MCP server for interacting with iOS simulators, built using the Appium iOS Simulator library. Provides a robust session management approach for creating, booting, and controlling iOS simulators programmatically, with flexible device and OS version selection. Useful for AI assistants and testing scenarios that require dynamic iOS simulator interactions."
atomicchonk,roadrecon_mcp_server,30,,"ROADrecon MCP Server provides access to Azure AD security data collected by ROADrecon through a standardized protocol, enabling AI assistants to analyze tenant security posture. The server exposes comprehensive Azure AD data including users, groups, applications, and service principals, while offering specialized security analysis tools for identifying privileged users, analyzing MFA status, detecting stale accounts, and evaluating PIM implementation. Built with Python using FastMCP, it integrates with a ROADrecon API instance to facilitate security assessments and vulnerability identification in Azure AD environments."
atotti,mozisu-mcp-server,4,,"Mozisu MCP Server is a Go-based implementation that provides character counting functionality for text, with special handling for multi-byte characters like Japanese text and emojis. The server processes both total character count and non-whitespace character count, returning structured results through a clean API. Built with performance in mind, it uses Go's unicode package for accurate character classification and offers configurable server settings through JSON configuration. This implementation is particularly useful for applications requiring accurate text metrics across different languages and character sets."
attarmau,fastmcp_recsys,1,,"FastMCP_RecSys is a clothing recommendation system that uses CLIP (Contrastive Language-Image Pretraining) to analyze and classify fashion images. Built with a FastAPI backend and React frontend, it extracts clothing attributes like style, color, and fabric from uploaded images, then generates personalized recommendations based on detected tags and user behavior. The system stores clothing items and their metadata in MongoDB, making it particularly useful for e-commerce platforms seeking to enhance user experience through AI-powered fashion recommendations."
atuinturtle,heart-mcp-server,0,,"Heart MCP server provides a basic foundation for building MCP-enabled applications using Bun and TypeScript. Built with the @modelcontextprotocol/sdk, it establishes a stdio transport connection and exposes a minimal server configuration that can be extended with custom resources and tools. Useful as a starting point for developers looking to create their own MCP server implementations."
audienseco,mcp-audiense-insights,7,,"This MCP client, developed by an unspecified author, enables integration with Audiense's audience insights platform. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for accessing Audiense's API to retrieve audience data and insights. The implementation focuses on simplifying authentication and data retrieval from Audiense, offering functionality to query audience information. It includes optional integration with the Twitter API for enhanced capabilities. This client is particularly useful for applications requiring programmatic access to audience analytics, enabling use cases such as targeted marketing campaigns, social media strategy development, and demographic analysis without directly handling API authentication complexities."
audienseco,mcp-tweetbinder,3,,"TweetBinder MCP Server provides Claude with access to Twitter/X analytics data through the TweetBinder by Audiense API. Developed by AudienseCo, it enables creating and analyzing Twitter reports with capabilities for searching tweets, tracking hashtags, measuring engagement metrics, and performing sentiment analysis. The server exposes seven tools that handle report creation, status checking, statistics retrieval, and content extraction, making it valuable for social media analysis, campaign tracking, and audience research without leaving the Claude conversation interface."
ichigo3766,audio-transcriber-mcp,4,178,"Audio transcription server that provides speech-to-text capabilities using OpenAI's Whisper API. Built with TypeScript and the MCP SDK, it exposes a tool for transcribing audio files with configurable language settings and optional file saving. Particularly valuable for users who need to convert spoken content to text through AI assistants while maintaining control over the transcription process and output format."
austinkelsay,nostr-mcp-server,24,,"Nostr MCP Server provides a bridge between AI assistants and the Nostr decentralized social network, enabling interaction with user profiles, posts, and Lightning Network payments. Developed by Austin Kelsay, this TypeScript implementation offers seven specialized tools for retrieving profiles, text notes, long-form content, and analyzing zap payments (Bitcoin tips) with detailed transaction information. The server features native support for npub format identifiers, NIP-57 compliant zap receipt validation, and advanced bolt11 invoice parsing, making it ideal for users who want to analyze Nostr social data, track Lightning Network payments, or search through Nostr Implementation Possibilities (NIPs) documentation without leaving their AI assistant interface."
honeycombio,honeycomb-mcp,16,331,"This Honeycomb MCP server, developed by Austin Parker, enables AI assistants to directly analyze and query Honeycomb observability data. Built with TypeScript and leveraging the MCP SDK, it provides tools for listing columns, running analytics queries, and analyzing data patterns within Honeycomb datasets. The server abstracts the complexities of interacting with the Honeycomb API, allowing AI systems to easily access and interpret observability data. By bridging AI capabilities with Honeycomb's powerful analytics, this implementation facilitates use cases such as automated performance analysis, anomaly detection, and data-driven troubleshooting in complex distributed systems."
automata-labs-team,code-sandbox-mcp,112,,"This MCP implementation, developed by Automata Labs, provides a sandboxed code execution environment for AI agents. Built with Go and leveraging Docker, it offers secure code running capabilities across multiple languages. The implementation focuses on safety and isolation, with features like resource limits and network restrictions. It integrates seamlessly with Claude Desktop and other AI applications through a standardized interface. Particularly useful for developers and researchers working on AI-assisted coding tasks, it enables use cases such as code generation, debugging, and automated testing without exposing the underlying system to potential security risks."
automata-labs-team,mcp-server-playwright,145,11808,"This Playwright-based MCP implementation, developed by Automata Labs, provides a robust interface between language models and web browsers. It enables AI agents to perform a comprehensive range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution in real browser environments. The implementation distinguishes itself by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Playwright's cross-browser support, it ensures compatibility across major browsers. This tool is particularly powerful for AI-driven web testing, data scraping, and automated web interactions, enabling more sophisticated AI assistants that can directly manipulate web applications. Its integration with Claude Desktop and npm-based installation process make it easily accessible for developers and researchers working on advanced AI projects."
automation-ai-labs,mcp-link,228,,"MCP-Link is a server implementation that converts OpenAPI specifications into MCP-compatible endpoints, enabling AI assistants to interact with any API described in OpenAPI format. Written in Go, it features a simple HTTP server that parses OpenAPI YAML/JSON files, transforms API endpoints into MCP tools, and handles authentication through header forwarding. The implementation supports path filtering, parameter mapping, and various authentication methods, making it ideal for developers who want to quickly expose existing APIs to AI assistants without writing custom MCP adapters for each service."
automation-ai-labs,mcp-wait,1,324,"MCP-Wait provides a simple waiting functionality that allows pausing execution until other tasks finish. The server offers a single 'wait' tool that accepts a duration in seconds (0-300) and reports progress in 10% increments during the wait period. Built with TypeScript using FastMCP, it supports both stdio transport for CLI usage and SSE for HTTP server integration, making it easy to incorporate into Claude Desktop, Cursor, or Chatwise applications. This utility is particularly useful in workflows where synchronization between different processes is needed."
avimbu,plausible-mcp-server,0,,"Plausible MCP Server provides a bridge between Claude and Plausible Analytics, enabling AI assistants to query website analytics data directly. Developed by AVIMBU, this TypeScript implementation connects to the Plausible API v2 and offers a single tool for retrieving metrics like visitors, pageviews, bounce rates, and conversion data across customizable date ranges. The server handles authentication through API keys configured via environment variables or the Smithery configuration system, making it ideal for generating analytics reports, monitoring website performance trends, and extracting insights from Plausible data without leaving the conversation interface."
avimbu,slack-mcp-server,9,,"Slack MCP Server provides a bridge to the Slack API, enabling AI assistants to interact with Slack workspaces through two primary tools: posting messages to channels and retrieving user lists. Built by AVIMBU FlexCo in Austria, this TypeScript implementation uses the Model Context Protocol SDK to abstract Slack API interactions, making it easy to programmatically send messages or fetch workspace user information."
avioflagos,mcp-coding-assistant,11,,"This Coding Assistant MCP server, developed by an unnamed creator, enhances AI coding capabilities by providing context-aware code suggestions and documentation integration. Built with TypeScript and leveraging the LangChain library, it offers tools for code analysis, technology detection, and automatic documentation retrieval. The server implements vectorized documentation search and integrates with OpenAI's API for intelligent code completion. By abstracting the complexities of code understanding and documentation lookup, it enables AI systems to provide more accurate and contextually relevant coding assistance. This implementation is particularly valuable for applications requiring enhanced code comprehension and generation, facilitating use cases such as automated code review, context-aware refactoring suggestions, and intelligent API usage recommendations."
awesimon,elasticsearch-mcp,7,1306,"Elasticsearch MCP Server provides a bridge between AI assistants and Elasticsearch databases, enabling natural language interaction with search functionality and index management. Built with TypeScript and leveraging the official Elasticsearch client, it offers tools for creating indices, defining mappings, performing searches, bulk importing data, and retrieving cluster health information. The implementation uses the Model Context Protocol SDK for standardized communication, making it particularly valuable for users who need to query and manage Elasticsearch data without remembering complex query syntax or API endpoints."
awkoy,notion-mcp-server,89,2758,"Notion MCP Server provides a bridge to the Notion API, enabling AI assistants to create, update, and manage Notion pages and blocks. Built by Yaroslav Boiko, it offers tools for page operations (creation, archiving, restoration, searching) and block manipulation (appending, retrieving, updating, deleting) with support for batch operations to improve efficiency. The implementation requires Notion API credentials (token and page ID) and is packaged as a Node.js application with Docker support, making it ideal for workflows that need to maintain documentation, notes, or knowledge bases in Notion without switching contexts."
awkoy,replicate-flux-mcp,18,2224,"Replicate Flux MCP provides a bridge to the Replicate API for accessing the Flux image generation model. Built by Yaroslav Boiko, this TypeScript implementation enables AI assistants to generate images through the Model Context Protocol without requiring users to manage separate API integrations. It handles configuration through a simple API token setup and is packaged as both an npm module and a Docker container, making it ideal for applications that need to incorporate AI image generation capabilities within conversation interfaces."
src,bedrock-kb-retrieval-mcp-server,2138,,"An MCP server implementation that enables retrieval from Amazon Bedrock Knowledge Bases, allowing AI applications to access information stored in knowledge bases through the Model Context Protocol."
src,aws-kb-retrieval-server,36543,,"This AWS Knowledge Base Retrieval MCP server, developed by the Model Context Protocol team, enables AI assistants to access information from AWS Knowledge Bases using the Bedrock Agent Runtime. It provides a tool for performing retrieval-augmented generation (RAG) operations, allowing queries against specified knowledge bases and retrieval of multiple results. The server integrates seamlessly with AWS services, requiring proper AWS credentials configuration. By connecting AI capabilities with AWS knowledge repositories, this implementation empowers AI systems to leverage curated information sources. It is particularly useful for building AI assistants that need access to company-specific knowledge, technical documentation, or any scenario where an AI system benefits from retrieving contextual information from AWS-managed knowledge bases."
src,cdk-mcp-server,2138,,"An MCP server implementation for AWS services, allowing AI applications to access AWS services like Bedrock, S3, and DynamoDB through the Model Context Protocol."
src,cost-analysis-mcp-server,2138,,An MCP server that analyzes the cost of LLM API calls by tracking tokens used and calculating costs based on model pricing. It provides detailed cost breakdowns and usage statistics for better budget management and optimization of AI applications.
src,aws-documentation-mcp-server,2138,,An MCP server that provides access to AWS documentation. This server allows Claude to search and retrieve information from AWS documentation to help answer questions about AWS services and features.
sammcj,mcp-aws-kb,0,,"The AWS Knowledge Base Retrieval MCP Server enables AI assistants to access information from AWS Knowledge Bases using the Bedrock Agent Runtime. Built with TypeScript, it provides a retrieve_from_aws_kb tool that performs RAG (Retrieval-Augmented Generation) operations, returning both raw context and structured metadata about the sources. The server supports multiple authentication methods including IAM Access Keys and AWS SSO, can be configured with default Knowledge Base IDs, and returns results in a format optimized for AI consumption with separate content items for context and source metadata. This implementation is particularly valuable for organizations that maintain AWS Knowledge Bases and want to incorporate that information into their AI assistant workflows."
awslabs,log-analyzer-with-mcp,2,,"Log Analyzer with MCP is an AWS Labs-developed server that provides AI assistants with structured access to CloudWatch Logs data. Built in Python using boto3, it exposes a comprehensive set of tools for searching, analyzing, and correlating logs across multiple AWS services. The implementation includes specialized capabilities for error pattern detection, log activity summarization, and cross-service correlation using common identifiers like request IDs. It's particularly valuable for DevOps teams and system administrators who need AI assistance with log analysis for troubleshooting, monitoring, and identifying patterns in their AWS infrastructure logs."
src,nova-canvas-mcp-server,2138,,"An MCP server implementation for AWS Nova Canvas, a service that enables developers to build AI applications with Claude. This server allows Claude to access and manipulate data in Nova Canvas workspaces."
awwaiid,mcp-server-taskwarrior,9,601,"This MCP server implementation provides a bridge to TaskWarrior, enabling AI assistants to interact with task management operations. Developed by Brock Wilcox, it offers tools for viewing pending tasks, adding new tasks with various attributes, and marking tasks as complete. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on executing TaskWarrior commands through a simple interface. It is particularly useful for AI applications that need to automate task management, such as personal productivity assistants or project management systems. The implementation leverages the local TaskWarrior installation, allowing seamless integration with existing task databases and workflows."
zed-extensions,mcp-server-axiom,3,,"Axiom MCP Server is a Zed extension that integrates with Axiom's log management platform, enabling AI assistants to query and analyze log data directly within conversations. The implementation downloads and manages the axiom-mcp binary from GitHub releases, configures it with user-provided API tokens and optional organization settings, and handles platform-specific compatibility across macOS, Linux, and Windows. This server is particularly valuable for developers who need to investigate application logs, troubleshoot issues, or extract insights from their observability data without leaving their Zed environment."
axiomhq,zed-axiom-context-server,0,,"This Axiom Context Server, developed for use with the Zed AI assistant, provides a Model Context Server for Axiom. Built using Rust and the zed_extension_api, it offers a customizable command interface for integration with Axiom's model context protocol (MCP). The implementation allows users to specify custom commands and arguments in their Zed settings, enhancing flexibility in deployment. It's designed to seamlessly connect Axiom's capabilities with Zed's AI assistant, making it particularly useful for developers and teams looking to leverage Axiom's context-aware AI features within their Zed-based workflows. The server's ability to use a local executable or a custom-specified command path adds versatility for different setup requirements."
axiomhq,mcp-server-axiom,32,,"This MCP server, developed by Axiom, enables AI agents to query data using Axiom Processing Language (APL). It integrates with the Axiom data platform to provide tools for executing APL queries against datasets and listing available datasets. By leveraging Axiom's powerful data processing capabilities, this implementation allows AI assistants to easily incorporate real-time data analysis into their responses. It is particularly useful for scenarios requiring rapid insights from large datasets, such as log analysis, application monitoring, or business intelligence through natural language queries to an AI assistant. The server is designed for seamless integration with the Claude desktop app and focuses on core querying functionality."
axliupore,mcp-code-runner,3,,"MCP Code Runner is a TypeScript server that enables AI assistants to execute code snippets in isolated Docker containers. Developed by axliupore, it supports multiple programming languages including Python, JavaScript, TypeScript, Go, Java, C, and C++. The implementation uses Dockerode to manage container lifecycle, enforces resource limits (memory, CPU) and network isolation for security, and returns execution results with stdout/stderr output. It's particularly useful for code testing, debugging, and educational scenarios where safe execution of untrusted code is required."
aydinfer,spline-mcp-server,2,,"Spline MCP Server provides a bridge to the Spline 3D design tool API, enabling AI assistants to interact with Spline's features through a structured interface. It supports core operations like exporting scenes to various formats (GLB, GLTF, FBX, OBJ), importing 3D models, and managing scene details, while offering robust animation capabilities including creating keyframe animations, triggering existing animations, and setting up event-based interactions. The server uses axios for API communication and implements comprehensive error handling, making it valuable for designers and developers who want to programmatically control Spline's 3D environment without leaving their AI assistant conversation."
ayeletstudioindia,unreal-analyzer-mcp,71,,"This Unreal Engine code analyzer MCP server, developed by Ayelet Technology Private Limited, provides powerful source code analysis capabilities for Unreal Engine codebases. Built with TypeScript and leveraging tree-sitter for robust C++ parsing, it enables AI assistants to deeply understand and analyze Unreal Engine source code. The server offers features like class analysis, hierarchy mapping, code search, reference finding, and subsystem analysis. It also includes a knowledge base of game genres and implementation patterns. By abstracting complex code analysis into standardized MCP endpoints, it allows AI systems to gain deep insights into Unreal Engine projects. This implementation is particularly useful for game developers, engine contributors, and AI assistants working on Unreal Engine-based projects, facilitating tasks like code comprehension, refactoring, and architectural analysis."
azdeltaqq,mcp-reasoning-server,7,,"MCP Reasoning Server provides advanced reasoning capabilities for Claude in Cursor AI through simulated reasoning algorithms including Monte Carlo Tree Search, Beam Search, R1 Transformer, and Hybrid Reasoning. Built by AzDeltaQQ (inspired by Jacck's mcp-reasoner), it implements auto-iterative reasoning that completes all steps in a single tool call, returning structured JSON responses with reasoning traces. The server is designed for complex problem-solving tasks in software development contexts like algorithm optimization, architecture design, and code refactoring."
azure-samples,remote-mcp-apim-functions-python,26,,"This Azure-based MCP server implementation secures remote MCP servers using API Management as an AI Gateway. It implements the latest MCP Authorization specification with a complete OAuth2 flow, allowing clients to authenticate securely through Microsoft Entra ID. The architecture uses Azure Functions for the backend, with Python tools for snippet management, while API Management handles client registration, authorization, and token exchange. The implementation includes infrastructure as code (Bicep templates) for easy deployment with Azure Developer CLI (azd), making it particularly useful for organizations that need to provide secure, enterprise-grade access to MCP tools while leveraging existing Azure identity services."
munishm,azure-devops-mcp-server,0,,"Azure DevOps Work Items MCP Server provides a programmatic interface for interacting with Azure DevOps work items, enabling AI assistants to retrieve, create, update, and analyze work items through a standardized set of resources and tools. Built using the FastMCP framework, it supports operations like fetching recent work items, creating tasks, updating work item details, and generating analysis prompts, making it valuable for project management and workflow automation."
chand45,mcp-server-azure-impact-reporting,2,,"The Azure Impact Reporting MCP server enables large language models to report infrastructure issues to Azure on behalf of customers. Built by Chand45, this Python implementation authenticates with Azure using DefaultAzureCredential and creates workload impact reports via the Azure Management API. The server exposes a tool that accepts subscription details, resource information, and impact categories (connectivity, performance, availability), then submits standardized reports through Azure's workload impacts endpoint. It's particularly useful for AI assistants that need to help users report Azure resource problems without requiring them to navigate complex Azure reporting processes manually."
b12io,website-generator-mcp-server,3,,"B12's website generator MCP server enables AI assistants to create business websites through a simple interface. Developed by b12io, this TypeScript implementation provides a single tool that accepts a business name and description, then generates a customized website accessible via a signup link. The server uses the Model Context Protocol to handle tool registration and execution, communicating through stdio transport for seamless integration with Claude Desktop. It's particularly useful for quickly generating professional website designs during conversations about business needs without requiring technical expertise."
babelcloud,gbox,10,,"Gru-sandbox (gbox) is an open-source, self-hostable sandbox for MCP integration that provides secure local command execution for AI agents. Built by BabelCloud, it creates isolated Docker containers (boxes) for running Python, TypeScript, and Bash code, with a clean API for creating, managing, and executing commands in these sandboxes. The system supports both Docker and Kubernetes environments, features automatic resource reclamation, and includes a command-line interface for easy management, making it ideal for developers integrating AI tools with local execution capabilities while maintaining security boundaries."
bacoco,ai-expert-workflow-mcp,3,405,"AI Expert Workflow MCP is a server implementation that facilitates structured collaboration with AI experts in product development. Developed by bacoco, it provides access to three specialized AI roles: Product Manager, UX Designer, and Software Architect, each generating comprehensive documentation based on user requirements. The server uses OpenRouter API for flexible model selection and includes Task Master integration for converting product requirements into actionable development tasks. This implementation is particularly valuable for teams seeking to streamline the planning-to-implementation pipeline through expert consultation and document generation."
badhansen,notion-mcp,6,,"This MCP server, developed by Badhan Sen, integrates with Notion's API to manage personal todo lists. Built with Python and leveraging libraries like httpx and python-dotenv, it provides a simple interface for interacting with Notion pages and databases. The implementation focuses on todo list management within a specified Notion page, offering functionality to add, retrieve, and potentially update tasks. It's particularly useful for individuals or teams looking to automate task management in Notion, enabling use cases such as programmatic todo creation, task syncing with external systems, or building custom productivity workflows on top of Notion's infrastructure."
baidu-maps,mcp,215,12593,"Baidu Map MCP Server provides a standardized interface for accessing Baidu Maps API services, available in both Node.js and Python implementations. The server enables location-based operations through the Model Context Protocol, allowing applications to interact with Baidu's mapping services without directly managing API credentials or implementation details. Useful for applications requiring geocoding, route planning, location search, and other geospatial functionalities within the Baidu Maps ecosystem."
bajoski34,mcp-flutterwave,0,,"MCP-Flutterwave enables AI assistants to interact with Flutterwave's payment processing API, providing tools for creating and managing payment checkout links, verifying transactions, and resending failed webhooks. Built with TypeScript using the Model Context Protocol SDK, it authenticates with Flutterwave using secret keys and exposes four main tools: creating payment links, disabling checkout links, retrieving transaction details, and resending failed webhooks. This implementation is particularly valuable for workflows requiring payment processing capabilities within AI assistant conversations, such as e-commerce support, transaction verification, or payment link generation."
bankless,onchain-mcp,26,1215,"Bankless Onchain MCP Server provides a middleware between AI models and blockchain data, enabling LLMs to interact with smart contracts, fetch events, and access transaction information across multiple networks. Developed by Bankless Engineering, it implements tools for reading contract state, retrieving proxy implementations, fetching ABIs and source code, filtering event logs, and accessing transaction history. The server requires a Bankless API token for authentication and is particularly valuable for blockchain analysis, smart contract interaction, and on-chain data exploration workflows without requiring users to leave their conversation interface."
baranwang,mcp-trends-hub,47,2514,"MCP Trends Hub provides AI assistants with access to trending topics and content from popular Chinese platforms including Weibo, Zhihu, Douyin, Bilibili, Douban, Toutiao, and 36kr. The implementation exposes each platform as a separate tool that fetches current trending data, with results cached temporarily to improve performance. Built with TypeScript and using the Model Context Protocol SDK, it features robust error handling and standardized response formatting. This server is particularly valuable for use cases requiring real-time insights into Chinese social media trends, content discovery, and cultural monitoring without leaving the conversation interface."
baranwang,mcp-tung-shing,26,,"This MCP implementation, developed by Baran, provides a TypeScript-based interface for working with dates, times, and calendars. Built using the dayjs library and its lunar calendar plugin, it offers tools for parsing, formatting, and manipulating dates in both Gregorian and lunar calendars. The implementation focuses on cross-calendar functionality and internationalization support, making it easier for AI models to handle date-related tasks across different cultural contexts. It's particularly useful for applications requiring date calculations, event scheduling, or cultural date conversions, enabling AI to perform complex calendar operations without needing deep knowledge of various calendar systems."
baronfel,mcp-msbuild-host,1,,"MSBuild MCP Demo is a Model Context Protocol server that exposes tools and prompts for analyzing MSBuild projects to any MCP client. The implementation allows AI assistants to interact with MSBuild project files, providing specialized capabilities for .NET development workflows. Built as a demonstration of the MCP protocol's extensibility, it can be configured to work with Claude or Visual Studio Code, enabling developers to leverage AI assistance for MSBuild-related tasks through a standardized interface."
barryyip0625,mcp-discord,6,,"A Discord integration server that enables AI assistants to interact with Discord's platform features through a standardized interface. Built with TypeScript and discord.js, it provides tools for managing channels, forums, messages, and reactions while handling authentication and permissions appropriately. The implementation focuses on common Discord operations like sending messages, managing forum posts, and adding reactions, making it valuable for users who want to automate Discord community management or enable AI assistants to participate in Discord conversations."
bart6114,my-bear-mcp-server,3,,"Bear MCP Server provides read-only access to the Bear note-taking app's SQLite database, allowing AI assistants like Claude to search and retrieve notes and tags. Built by Bart Smeets, it connects directly to Bear's database in a secure read-only mode and offers tools for opening notes by ID or title, searching notes by terms or tags, listing all tags, and viewing notes with specific tags. The server runs locally using Node.js and the Model Context Protocol, making it ideal for users who want to reference their Bear notes during AI conversations without leaving the interface."
bartekke8it56w2,new-mcp,15,,"This MCP server integrates with Google's Gemini API to provide analytical thinking capabilities without code generation. Developed by Anthropic, it features sequential thought processing, branching analysis paths, session persistence, and advanced semantic filtering of codebases. The server is designed for complex problem-solving tasks, codebase analysis, and architectural decision-making in software development contexts."
bmorphism,manifold-mcp-server,4,497,"This MCP server, developed by Barton Rhodes, enables seamless interaction with Manifold Markets prediction markets. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a comprehensive suite of tools for market search, analysis, betting, and portfolio management. The implementation stands out by providing precise probability specifications for limit orders and advanced filtering capabilities. It's particularly useful for AI systems and developers looking to integrate collective intelligence and decision-making through prediction markets, allowing for sophisticated market analysis, automated trading strategies, and data-driven forecasting in various domains."
bartwisch,mcprules,17,,"MCPRules, developed by Hugo Bartwisch, is a TypeScript-based server for managing and serving programming guidelines and rules. It integrates with development tools to enforce consistent coding standards across projects. The server supports both local and GitHub-hosted rules, offers flexible storage options, and organizes rules into categories like Core Programming Principles and Language-Specific Guidelines. MCPRules stands out by providing a structured rule format with categories and key-value pairs, making it easy to filter and access rules via MCP tools. This implementation is particularly useful for development teams looking to maintain code quality, streamline their coding practices, and ensure consistency across multiple projects."
baryhuang,mcp-server-any-openapi,24,,"This MCP server implementation, developed by Bary Huang, provides integration with any OpenAPI-compliant service. Built with Python and leveraging libraries like FastAPI, FAISS, and sentence-transformers, it offers a flexible approach to connecting AI models with diverse APIs. The implementation focuses on dynamic tool generation based on OpenAPI specifications, enabling seamless interaction with a wide range of services without requiring custom code for each integration. It supports vector-based semantic search for efficient API operation discovery, making it particularly useful for applications that need to work with multiple or frequently changing APIs. By abstracting the complexities of API integration, this server allows for rapid development of AI-powered applications that can leverage external services and data sources through a standardized interface."
baryhuang,mcp-headless-gmail,16,,"MCP Headless Gmail Server provides a way to access Gmail functionality without requiring local credential setup or browser access. Built by baryhuang, it enables any client to complete the OAuth flow independently and then pass credentials as context to the server, creating a complete separation between credential storage and implementation. The server supports getting recent emails, sending messages, and handling token refresh operations through a clean API that works in containerized environments. This implementation is particularly valuable for headless or remote applications where traditional Gmail access methods requiring local file access or browser interaction are not feasible."
baryhuang,mcp-remote-macos-use,55,,"MCP Remote macOS Server provides secure remote control of macOS machines through VNC protocol, enabling AI assistants to capture screenshots and interact with the remote desktop through mouse and keyboard inputs. The implementation supports Apple Authentication (protocol 30) for secure connections, handles screen scaling for consistent display, and includes comprehensive error handling for connection issues. Built with a focus on security and reliability, this server is ideal for remote administration, automated testing, or AI-powered interaction with macOS systems."
basebandit,kai,15,,"Kai is a Model Context Protocol server that provides a bridge between large language models and Kubernetes clusters, enabling users to manage their Kubernetes resources through natural language. Built in Go using the mcp-go library, it offers tools for pod management (listing, retrieving details, streaming logs, deletion), with a cluster manager that handles connections to multiple Kubernetes contexts. The server exposes a comprehensive API that Claude can use to interact with Kubernetes resources, making it particularly valuable for DevOps workflows where users need to monitor or manipulate container environments without remembering complex kubectl commands."
base,base-mcp,185,4769,"This MCP server provides onchain tools for Claude AI to interact with the Base blockchain and Coinbase API. Developed by Dan Schlabach and Tina He, it enables operations like retrieving wallet addresses, getting testnet ETH, listing balances, transferring funds, and deploying smart contracts. The implementation uses TypeScript and leverages the Coinbase SDK to facilitate blockchain interactions, making it valuable for users who want to perform cryptocurrency operations or smart contract deployments directly through Claude."
harshj23,deepseek-claude-mcp-server,39,,"This MCP server, developed by Based_H-10, integrates the DeepSeek API's reasoning capabilities with Claude. Built with Python and leveraging the FastMCP framework, it provides a tool for enhancing Claude's responses with DeepSeek's R1 reasoning engine. The implementation focuses on seamlessly combining DeepSeek's advanced reasoning, which evolved from large-scale reinforcement learning, with Claude's existing capabilities. It's particularly useful for applications requiring more sophisticated reasoning and analysis, enabling use cases such as complex problem-solving, in-depth research assistance, and nuanced decision support without directly exposing users to the intricacies of the DeepSeek API."
bashirk,inbound-mcp,4,,"The Lead Generation Server is a production-grade system built on the MCP Python SDK that enables AI assistants to discover and enrich business leads through multiple data sources. It implements a complete lead lifecycle with UUID-based tracking, leveraging Google CSE for discovery, Hunter.io and Clearbit for data enrichment, and LinkedIn scraping via Playwright for deeper insights. The server features smart caching with Redis, asynchronous processing for high concurrency, and comprehensive monitoring via Prometheus. Particularly valuable for sales teams and marketers who need to generate qualified leads without switching between multiple tools, it provides a unified API for lead generation, enrichment, and maintenance operations."
basicmachines-co,basic-memory,511,41653,"How It Works
Interact naturally with AIs to build and access your knowledge base.

1
Build on Past Knowledge
AI references previous notes in future conversations.

""Let's continue our conversation about coffee brewing.""
AI retrieves relevant notes rather than loading everything.

2
Chat Naturally
Have normal conversations with AI assistants like Claude.

""Find information about pour over coffee methods.""
AI searches your knowledge base and summarizes findings.

3
Save Knowledge
Ask Claude to create a note about your conversation.

""Create a note about coffee brewing methods.""
AI creates a structured note with observations and relations."
batteryshark,agent_construct,11,,"A lightweight, dynamically extensible MCP server built by BatteryShark that enables hot-reloading of tools with built-in rate limiting and configuration management. The server supports JavaScript-rendered web scraping, Gemini web search, and provides a flexible framework for adding new tools with minimal configuration overhead, making it ideal for rapid prototyping of AI agent capabilities."
bazinga012,mcp_code_executor,47,,"This MCP Code Executor, developed by bazinga012, enables AI assistants to execute Python code within specified Conda environments. Built using TypeScript and the Model Context Protocol SDK, it provides a secure and configurable way to run code with access to predefined libraries and dependencies. The implementation focuses on isolating code execution, allowing for flexible environment management and code storage. It's particularly useful for AI workflows that require dynamic code generation and execution, such as data analysis, algorithm testing, or automated scripting tasks, without compromising system security or managing complex runtime setups."
bcharleson,sound-mcp,0,,"Cursor Sound MCP is a server that plays audio feedback when AI completes code generation in the Cursor editor. Built with TypeScript and the Model Context Protocol SDK, it uses the play-sound library to trigger customizable sound effects through a simple tool interface. The implementation features error handling, proper logging to stderr, and a stable JSON response format. Originally inspired by @EricListin on X.com, this MCP enhances the coding experience by providing auditory notifications that alert users when Cursor AI has finished generating code, eliminating the need to constantly monitor the screen for completions."
bcharleson,instantly-mcp,1,,"Instantly MCP Server provides a bridge to the Instantly API v2, enabling AI assistants to manage email campaigns and leads through a set of 17 tools. Developed by bcharleson, it implements endpoints for creating and managing leads, listing campaigns, analyzing email warmup performance, testing account health, and handling email account administration. The server is built with TypeScript using the Model Context Protocol SDK, can be run via Docker or NPX, and requires an Instantly API key for authentication. It's particularly valuable for users who need to automate email outreach, monitor campaign performance, or manage email account health directly within AI assistant conversations."
beamlit,mcp-gateway,0,266,"This MCP gateway, developed by Beamlit Inc., enables seamless integration between Beamlit's AI platform and MCP-compatible systems like Claude Desktop. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a standardized interface for accessing Beamlit's AI capabilities, including function listing and execution. The implementation focuses on exposing Beamlit's features through MCP, offering functionality to interact with AI models and tools. It's particularly useful for organizations looking to incorporate Beamlit's AI capabilities into their workflows, enabling use cases such as natural language processing, data analysis, and AI-assisted task automation without directly interacting with Beamlit's proprietary API."
bearnetwork-brnkc,sketchup-mcp,7,,"SketchUp MCP Server enables AI assistants to control and manipulate 3D models in SketchUp through a WebSocket-based communication system. It provides tools for creating, transforming, and modifying components, applying materials, performing boolean operations, and executing arbitrary Ruby code directly in the SketchUp environment. The implementation includes both a Python server component that implements the Model Context Protocol and a Ruby extension for SketchUp, making it particularly valuable for AI-assisted 3D modeling, architectural design, and woodworking projects."
beat4ocean,mcp-mysql,1,,"MCP-Doris provides a server implementation that connects AI assistants to Apache Doris databases using the MySQL protocol. It offers tools for listing databases, exploring table schemas, and executing SELECT queries with built-in security constraints and timeout protection. The implementation handles connection management, query execution in separate threads, and proper error handling while exposing a clean API through FastMCP. Particularly valuable for data analysis workflows that need to query and explore data in Doris databases directly from conversation interfaces."
behole,cooper-hewitt-mcp,3,,"This Cooper Hewitt MCP server, developed by behole, provides an interface for AI assistants to interact with the Cooper Hewitt Museum's collection API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for searching objects and retrieving detailed information about specific museum artifacts. The implementation focuses on efficient data retrieval and formatting, making it easy for AI models to explore and analyze the museum's vast collection. It's particularly useful for tasks like art research, cultural analysis, or integrating museum data into AI-driven applications, allowing assistants to access Cooper Hewitt's extensive design archive without requiring deep knowledge of the underlying API complexities."
ben4mn,amadeus-mcp,6,,"This Amadeus MCP server, developed for integration with Claude Desktop, provides flight search capabilities using the Amadeus API. Built with Python and leveraging the FastMCP library, it offers a tool for searching flights based on origin, destination, and date. The implementation focuses on simplifying access to Amadeus flight data through a standardized MCP interface, with features like error handling and logging. It's particularly useful for AI assistants and applications needing to incorporate real-time flight information, enabling use cases such as travel planning, itinerary creation, and price comparison without directly dealing with the complexities of the Amadeus API."
benborla,mcp-server-mysql,232,30565,"This MCP server, developed by Ben Borla, provides read-only access to MySQL databases for large language models. Built in TypeScript, it integrates with Claude Desktop and enables AI assistants to inspect database schemas and execute read-only SQL queries. The implementation stands out by focusing on security through read-only transactions and offering flexible database connection options. By bridging AI models with relational databases, this server allows AI systems to analyze data patterns, extract insights, and provide data-driven responses. It is particularly useful for scenarios like data exploration, report generation, and building AI assistants that can leverage structured data from MySQL databases while maintaining data integrity."
hkk101,mcp-server-mysql,0,,"MCP Server for MySQL provides read-only access to MySQL databases, enabling AI assistants to inspect database schemas and execute safe queries. Built by Ben Borla, this Node.js implementation establishes connections to MySQL servers using environment variables for configuration, enforces read-only transactions for security, and exposes both database schema information as resources and a mysql_query tool for executing SQL statements. The server is containerized with Docker for easy deployment and is particularly valuable for workflows requiring database exploration and data analysis without modifying database contents."
zhaoxin34,mcp-server-mysql,1,,"MCP Server for MySQL provides read-only access to MySQL databases, enabling AI models to inspect database schemas and execute SQL queries. Built by Ben Borla, it connects to MySQL servers using configurable connection parameters, enforces read-only transactions for security, and supports comprehensive schema information retrieval. The implementation is written in TypeScript using Node.js and the mysql2 library, with Docker support for easy deployment. It's particularly valuable for data analysis workflows where AI assistants need to explore database structures and extract information without modifying the underlying data."
bendusy,pollinations-mcp,4,,"Pollinations MCP is a TypeScript-based server implementation that provides text-to-audio API capabilities. Built with the Model Context Protocol SDK, it enables programmatic audio generation through a streamlined interface, supporting developers who need to integrate dynamic audio creation into their applications."
benhaotang,mcp-mma-docs,5,,"This Mathematica Documentation MCP server, developed using FastMCP, provides a bridge between AI assistants and Wolfram Mathematica's extensive documentation. It offers tools for retrieving function documentation, including support for packages and add-ons, as well as listing symbols within packages. Built with Python and integrating with Wolfram's wolframscript, it enables AI models to access and interpret Mathematica's rich function library without direct interaction with the software. The implementation is particularly useful for tasks involving mathematical modeling, symbolic computation, or data analysis, allowing AI assistants to leverage Mathematica's capabilities in problem-solving and scientific computing workflows."
benhaotang,mcp-serverman,8,7193,"The mcp-serverman companion server is a powerful tool designed to allow Claude/LLMs to manage MCP server configurations across different clients. It provides a comprehensive set of tools for listing, enabling, disabling, profiling, and version-controlling MCP servers, while also supporting operations across multiple clients like Claude Desktop, Cline, and MCP-Bridge. Through its JSON-based interface, it allows AI assistants to perform sophisticated server management tasks, such as saving server states, managing configuration profiles, and bulk operations on multiple servers.

Install this server by
```
pip install mcp-serverman
mcp-serverman client init
mcp-serverman companion
```"
benhaotang,mcp-semantic-scholar-server,11,,"This Semantic Scholar API MCP server, built with FastMCP, provides a streamlined interface for AI assistants to access academic literature through the Semantic Scholar database. Developed to bridge the gap between AI systems and scholarly research, it offers tools for querying papers, authors, and citations. The implementation stands out by leveraging FastMCP's efficient request handling and Semantic Scholar's comprehensive academic database. By exposing Semantic Scholar's capabilities through standardized MCP endpoints, it allows AI systems to easily incorporate up-to-date research findings and bibliometric data. This server is particularly useful for enhancing AI assistants with academic research capabilities, supporting literature reviews, trend analysis in scientific fields, or building applications that require access to scholarly information."
packages,diff-mcp,4973,639,"jsondiffpatch is a JavaScript library that compares and patches JSON objects, providing a compact delta format that captures additions, modifications, deletions, and array moves. Created by Benjamin Eidelman, it features smart array diffing using LCS algorithm, multiple output formatters (HTML, console, JSON Patch RFC 6902), and text diffing for long strings. The library includes an MCP server implementation that enables AI assistants to compare text or structured data in various formats (JSON, YAML, TOML, XML) and get readable diffs. Ideal for version control systems, data synchronization, and change visualization in web applications."
benniu,emqx-mcp-server,12,,"This MCP server implementation provides EMQX MQTT broker interaction, enabling AI assistants to manage MQTT clients and publish messages. Developed by Benniu Ji, it offers tools for listing and disconnecting clients, retrieving client information, and publishing messages with configurable QoS and retention settings. The server is designed for use cases requiring real-time communication in IoT scenarios, such as monitoring connected devices or sending commands to MQTT-enabled systems."
benyue1978,run-command-mcp,0,,"The Run Command MCP server enables AI assistants to execute shell commands directly from Cursor chat. Based on the Model Context Protocol (MCP) framework, this TypeScript implementation allows users to run system commands through natural language prompts, such as finding services using specific ports. The server leverages Node.js and the MCP SDK to create a bridge between the AI assistant and the local system shell, making it particularly useful for developers who need to perform quick system operations without leaving their coding environment."
berlinbra,alpha-vantage-mcp,30,,"This Alpha Vantage MCP server provides AI assistants with real-time access to financial market data through a standardized interface. Developed using Python, it integrates with the free Alpha Vantage API to offer tools for retrieving stock quotes, company information, cryptocurrency exchange rates, and historical price data. The server abstracts the complexities of API authentication, rate limiting, and error handling, enabling AI systems to seamlessly incorporate financial data into their workflows. It's particularly valuable for AI assistants focused on financial analysis, investment research, and market trend identification, facilitating use cases such as portfolio management, algorithmic trading strategy development, and automated financial reporting."
berlinbra,binary-reader-mcp,0,,"This MCP server, developed by an unspecified author, provides tools for binary file analysis, focusing on Unreal Engine asset files (.uasset) and generic binary metadata extraction. Built with Python and leveraging the Model Context Protocol, it offers functionality to read and analyze binary file structures, with a specific emphasis on Unreal Engine assets. The implementation includes tools for parsing .uasset files and extracting metadata from various binary formats. It's particularly useful for game developers, modders, and digital forensics professionals working with Unreal Engine assets or analyzing binary file structures, enabling use cases such as asset inspection, file format analysis, and automated binary data extraction without directly dealing with low-level binary parsing complexities."
berlinbra,bluesky-mcp,8,,"This BlueSky MCP server, developed by berlinbra, provides access to BlueSky social network data through its official API. Built with Python and leveraging the Model Context Protocol, it offers tools for retrieving user profiles and social graph information. The implementation features built-in authentication handling, session management, and comprehensive error handling. It's particularly useful for AI assistants and applications needing to incorporate BlueSky social data, enabling use cases such as user analysis, network visualization, and content discovery without directly dealing with the complexities of the BlueSky API."
berlinbra,polymarket-mcp,13,,"This PolyMarket MCP server, developed by berlinbra, provides a robust interface for interacting with the PolyMarket API, enabling AI assistants to access and analyze prediction market data. Built with Python and leveraging libraries like httpx and python-dotenv, it offers tools for fetching market information, prices, and historical data. The implementation focuses on clean data formatting, comprehensive error handling, and rate limit management, making it accessible for AI models to perform tasks like market analysis, trend identification, and price tracking. It's particularly useful for financial analysis, decision-making support, or integrating prediction market insights into AI-driven systems, allowing assistants to interact with PolyMarket without requiring deep knowledge of the underlying API complexities."
berrykuipers,mcp_services_radarr_sonarr,4,,"This MCP server provides AI assistants with access to Radarr (movies) and Sonarr (TV series) data. Built with FastMCP, it implements a standardized protocol for querying movie and TV show collections, offering rich filtering options by year, watched status, actors, and more. The server is designed for seamless integration with Claude Desktop and other MCP-compatible clients, enabling natural language interactions with media libraries."
berry-street,berrystreet-metabase-mcp,1,,"The Metabase MCP server enables AI assistants to interact with Metabase analytics platforms, providing access to dashboards, questions/cards, and databases through a structured interface. Developed by Berry Street, it implements tools for listing and executing Metabase queries, viewing dashboard cards, and running SQL queries against Metabase databases. The server authenticates with Metabase using credentials provided as environment variables and exposes resources via metabase:// URIs with JSON content types for structured data access. This implementation is particularly valuable for data analysis workflows where users need to retrieve and analyze information from their Metabase instances directly within AI assistant conversations."
beverm2391,chain-of-thought-mcp-server,5,,"A Chain of Thought MCP server that exposes raw reasoning tokens from large language models through Groq's API. The server captures and streams the model's thinking process by intercepting content within <think> tags, allowing AI assistants to reveal their step-by-step reasoning before providing final answers. Built with FastMCP and supporting models like Qwen and DeepSeek, it enables more transparent AI interactions where users can see how the model arrives at conclusions rather than just receiving the final output."
beyond-network-ai,beyond-mcp-server,11,,"Beyond MCP Server provides standardized access to social platform data, currently supporting Farcaster (via Neynar API) with placeholders for Twitter and Telegram integration. It implements a flexible architecture with both stdio and HTTP/SSE transports, making it compatible with Claude Desktop. The server exposes resources and tools for searching content, retrieving user profiles, analyzing threads, and exploring trending topics across platforms. Built with extensibility in mind, it allows easy addition of new platform providers and is particularly valuable for AI assistants that need to incorporate social media context into conversations."
hedera-dev,mirrornode-mcp-server,0,,"Hedera MCP Server provides a bridge to the Hedera Testnet Mirror Node API, dynamically converting Zodios API endpoints into MCP tools using Server-Sent Events (SSE) transport. Built by bguiz, this implementation enables programmatic interaction with Hedera blockchain data by automatically generating tools for querying accounts, transactions, tokens, and other network information with robust Zod-based validation."
bharathvaj-ganesan,whois-mcp,7,,A Model Context Protocol (MCP) server implementation for WHOIS domain lookup service.
gnosis23,apple-mcp-server,1,,"Apple MCP Server provides a lightweight server for controlling macOS applications via AppleScript, with built-in tools for managing Spotify playback and opening iTerm. Developed by bhwang, this implementation enables programmatic interaction with specific macOS apps through simple, predefined commands like playing music or launching terminal windows. The server uses the Model Context Protocol SDK to expose these system control capabilities as callable tools."
kryzo,mcp-bibliotheque_nationale_de_france,3,,"Bibliothèque Nationale de France MCP server provides access to the Gallica digital library through a structured API client. It enables searching for books, periodicals, manuscripts, images, and other documents using natural language queries or specific metadata fields like title, author, and subject. The implementation includes a sequential reporting tool that helps generate comprehensive research reports with proper citations, automatically searching for relevant sources and organizing them into structured sections. Particularly valuable for academic research, historical analysis, and educational content creation that requires access to France's national library collections."
biegehydra,bifrostmcp,67,,This MCP server implementation provides C# language features via the Model Context Protocol. It integrates with the C# extension for Visual Studio Code and exposes capabilities like finding symbol references across a codebase. The server runs on port 8003 and is designed to enhance AI-assisted coding workflows for C# projects.
bigcodegen,mcp-neovim-server,113,2264,"This Neovim MCP server, developed by Derek White (bigcodegen), integrates Claude Desktop with Neovim using the Model Context Protocol and the official neovim/node-client library. It leverages Vim's native text editing commands to create a lightweight code assistance layer, allowing AI to interact directly with Neovim sessions. The server connects to a running Nvim instance, providing tools to view and edit buffers, execute Vim commands, and retrieve editor status. By abstracting Neovim's complexities, it enables AI assistants to seamlessly work within the familiar Vim environment. This implementation is particularly useful for developers seeking AI-enhanced coding assistance within their preferred text editor, facilitating tasks such as code review, refactoring, and context-aware suggestions without leaving the Neovim ecosystem."
bigcoder84,mcp-excel-server,3,,"MCP Excel Server provides a bridge between AI assistants and Excel files, enabling reading from and writing to spreadsheets through a Spring Boot application. Developed by bigcoder84, this server exposes Excel operations as MCP tools that handle structured data exchange with standardized request/response patterns. The implementation includes services for both reading data from Excel files (returning content as a list of key-value maps) and writing data to Excel files, making it particularly useful for data analysis, reporting, and automated document generation workflows."
bigsweetpotatostudio,hyper-mcp-browser,2,3376,"Hyper MCP Browser provides a browser automation interface for AI assistants, enabling web browsing capabilities through Puppeteer and Chrome. Built with TypeScript and the Model Context Protocol SDK, it allows AI systems to programmatically navigate websites, extract content, and interact with web pages. The implementation uses a stdio server transport for communication and includes evaluation modules for handling different content types, making it particularly useful for web scraping, content analysis, and automated testing workflows."
bigsy,clj-kondo-mcp,1,,"The clj-kondo MCP server provides linting capabilities for Clojure, ClojureScript, and EDN files through a standardized interface. It exposes a single tool that runs the popular clj-kondo static analyzer on specified files, supporting custom configuration directories and returning detailed linting results including warnings about unused namespaces, private variables, and other code quality issues. Built with TypeScript using the Model Context Protocol SDK, this implementation enables AI assistants to perform code quality checks on Clojure codebases, making it particularly valuable for Claude code and desktop environments where built-in linting capabilities are not available."
bigsy,clojars-mcp-server,4,,"This Clojars MCP server, developed by Bigsy, enables AI assistants like Claude to retrieve the latest version information for Clojars dependencies. Built in TypeScript, it provides a focused tool for querying the Clojars API to get up-to-date version data for any Maven artifact in the Clojars repository. The implementation stands out by offering a simple, targeted interface specifically for Clojars version lookups. By connecting AI capabilities with Clojars dependency information, this server allows AI systems to programmatically check and suggest library versions for Clojure projects. It is particularly useful for building AI-powered tools that assist with Clojure dependency management, automated project updates, and compatibility checks across Clojure libraries."
bigsy,maven-mcp-server,5,,"This Maven Dependencies MCP server, developed by Bill Hedworth, provides tools for verifying and retrieving Maven dependency versions from the Maven Central Repository. It offers functions to check the latest version of a dependency and verify if specific versions exist. The server uses the Maven Central REST API to fetch real-time dependency information, ensuring up-to-date results. By connecting AI capabilities with Maven dependency management, this implementation enables assistants to validate and update project dependencies, ensuring compatibility and security. It is particularly useful for applications requiring automated dependency checks, version upgrades, or any scenario where an AI system needs to reason about and manage Maven dependencies in software projects."
billduke13,code-explainer-mcp,2,,"This MCP server implementation provides a code explanation service for Cloudflare Workers. It analyzes source code to generate architecture diagrams, identify core functionality, and break down components across multiple programming languages. The server uses bearer token authentication for security and is designed for use cases requiring automated code analysis, documentation generation, or AI-assisted code comprehension. It leverages Cloudflare's edge computing platform for efficient processing and deployment."
billster45,mcp-chatgpt-responses,4,,"ChatGPT MCP Server provides a bridge between Claude Desktop and OpenAI's ChatGPT API through the OpenAI Responses API for simplified conversation management. It offers two main tools: standard ChatGPT interactions and web search-enabled queries, both supporting conversation continuity through response IDs. The server handles various response structures, extracts text content appropriately, and includes comprehensive error handling. Particularly valuable for users who want to leverage ChatGPT's capabilities directly within Claude Desktop conversations, especially when needing to compare responses between different AI systems or utilize ChatGPT's web search functionality."
bimgeek,speckle-mcp,9,,"This Speckle MCP server enables AI assistants to interact with Speckle, a version control platform for 3D design and AEC data. Built with FastMCP and the SpecklePy client library, it provides tools for listing projects, retrieving project details, searching projects by name or description, and accessing model versions. The implementation requires a Speckle token for authentication and connects to the Speckle server (defaulting to app.speckle.systems), making it valuable for architects, engineers, and construction professionals who want to query and analyze their Speckle project data through natural language."
bingal,fastdomaincheck-mcp-server,4,,"FastDomainCheck MCP Server provides a bulk domain registration status checking service that enables AI tools like Claude to verify domain availability through WHOIS and DNS queries. Developed by Bingal, it supports checking up to 50 domains simultaneously with dual verification methods for reliability, handling internationalized domain names (IDN), and providing concise registration status results. The implementation is optimized for performance with reasonable timeouts and fallback mechanisms, making it ideal for domain research, brand protection monitoring, and availability checking workflows without leaving the conversation interface."
mcp-servers,mcp-server-bing-search,248,,
zizzfizzix,mcp-server-bwt,1,,"MCP server for Bing Webmaster Tools that provides AI assistants like Claude and Cursor with access to the complete Bing Webmaster API functionality. Developed by Kuba Serafinowski, this Python implementation creates a bridge between AI assistants and Bing's site management, URL submission, traffic analysis, crawling, keyword analysis, and content management capabilities. The server dynamically wraps all API methods from the underlying bing-webmaster-tools library as MCP tools while preserving their signatures and documentation, making it particularly useful for SEO professionals who want to manage their Bing Webmaster accounts through natural language interactions."
birdsmith,gauntlet-incept-mcp,1,,"Gauntlet-Incept is an MCP server implementation for generating high-quality educational content tailored to students' knowledge levels and interests. It integrates with a QTI service for question and test item handling, an LLM service for content generation, and a PostgreSQL database for data storage. The system is designed to streamline the creation of personalized learning materials, making it particularly useful for educators, e-learning platforms, and educational content creators."
bitrefill,bitrefill-mcp-server,3,512,"Bitrefill MCP Server enables AI assistants to search for and retrieve information about gift cards, mobile refills, eSIMs, and digital services available on Bitrefill's platform. Built by Bitrefill, this TypeScript implementation provides tools for searching products by query, country, or category, fetching detailed product information, and browsing available product categories. The server communicates via stdio transport, making it compatible with Claude Desktop integration, and includes comprehensive error handling for API requests. It's particularly valuable for users who want to explore Bitrefill's cryptocurrency-based digital services without leaving their conversation interface."
bitscorp-mcp,mcp-adjust,1,,"The Adjust MCP server provides a bridge to the Adjust API, allowing AI assistants to query marketing analytics data from Adjust campaigns. Developed by Alexandr Korsak at Bitscorp, this TypeScript implementation enables users to access reports, metrics, and performance data through natural language queries. The server requires an Adjust API key for authentication and can be installed via Smithery or run locally. It's particularly useful for marketing teams who need quick access to campaign performance data, such as checking install numbers for specific campaigns without leaving their AI assistant interface."
bitscorp-mcp,mcp-ffmpeg,8,,"MCP FFmpeg Video Processor enables AI assistants to manipulate video files through FFmpeg, offering capabilities to resize videos to different resolutions (360p, 480p, 720p, 1080p) and extract audio in various formats (MP3, AAC, WAV, OGG). Developed by Bitscorp, this Node.js implementation can be installed via Smithery for Claude Desktop or configured manually for other clients. The server processes uploaded videos temporarily and stores outputs in a dedicated directory, making it ideal for workflows requiring video manipulation without leaving the conversation interface."
bitteprotocol,mcp,4,,"Bitte-mcp-proxy serves as a bridge between AI assistants and the Bitte AI ecosystem, enabling access to AI agents and tools from the Bitte registry. Built with the MCP-SDK server framework, it provides four key tools: retrieving agent listings, fetching specific agent details, accessing available tools, and executing agents with user inputs. The implementation uses Server-Sent Events for real-time communication and authenticates with the Bitte API using an API key, making it ideal for workflows that require leveraging specialized AI agents from the Bitte marketplace without leaving the conversation interface."
blacktop,mcp-say,4,,"MCP-Say is a server implementation that provides text-to-speech capabilities through both native system voices and ElevenLabs integration. Developed by blacktop, it exposes two main tools: 'say' for using local system voices and 'elevenlabs' for cloud-based high-quality voice synthesis. The server handles JSON-RPC requests following the MCP protocol, with safeguards against command injection attacks as evidenced by the test files. Built with Go and leveraging the beep audio library, it's particularly valuable for AI assistants that need to vocalize responses or generate audio content without requiring users to leave their conversation interface."
blackwhite084,playwright-plus-python-mcp,86,,"This Playwright-powered MCP server, developed by YUNYING, enables AI assistants to interact with web browsers through the Model Context Protocol. Built in Python, it provides a bridge between MCP clients and Playwright's browser automation capabilities, allowing operations like navigation, screenshots, clicks, and JavaScript execution. The implementation leverages libraries such as MCP for protocol handling and Playwright for browser control. By abstracting browser interactions into MCP-compatible tools, it allows AI systems to easily perform web automation tasks without directly handling browser complexities. This server is particularly useful for scenarios requiring AI-driven web scraping, testing, or content generation, facilitating use cases such as automated data collection, UI testing, and dynamic web content creation."
blake365,macrostrat-mcp,0,,"This Macrostrat MCP server, developed by Blake Morgan, integrates the Macrostrat API with the Model Context Protocol, enabling AI assistants to access and analyze geological data. Built with TypeScript and leveraging the MCP SDK, it provides a standardized interface for querying stratigraphic information, geological maps, and related datasets. The implementation focuses on efficient data retrieval and processing, making it particularly valuable for applications in earth sciences, resource exploration, and environmental studies. By bridging the gap between geological databases and AI systems, this server facilitates use cases such as automated stratigraphic analysis, geological risk assessment, and integration of geological data into broader analytical workflows."
blake365,usgs-quakes-mcp,1,,"This USGS Earthquakes MCP server, developed by Blake Morgan, provides real-time access to earthquake data from the United States Geological Survey. Built with TypeScript and Node.js, it leverages the Model Context Protocol SDK to offer a standardized interface for querying and analyzing seismic events. The server implements robust error handling and data validation using Zod, ensuring reliable information retrieval. By abstracting USGS API interactions, it enables AI systems to easily process and interpret earthquake data. This implementation is particularly valuable for applications in disaster response, geological research, and risk assessment, facilitating use cases such as early warning systems, seismic trend analysis, and automated reporting of significant events."
blankcut,kubernetes-mcp-server,6,,"Kubernetes Claude MCP Server integrates Claude's AI capabilities with Kubernetes, ArgoCD, and GitLab to provide AI-powered analysis and troubleshooting for GitOps workflows. Built with Go, it collects comprehensive information about Kubernetes resources, correlates data across systems, and presents structured context to Claude for intelligent analysis. The server features a RESTful API for querying resources, analyzing deployments, and troubleshooting issues, making it particularly valuable for DevOps teams seeking to understand complex Kubernetes environments, identify root causes of failures, and receive actionable recommendations for GitOps pipeline improvements."
blazickjp,arxiv-mcp-server,866,98043,"This ArXiv MCP server, developed by blazickjp, provides an interface for AI assistants to search and analyze academic papers from the arXiv repository. It enables precise querying with filters like date ranges and categories, as well as full-text access to papers. Built with an asynchronous architecture in Python, the implementation handles paper downloads, local caching, and exposes a standardized MCP interface. By bridging AI models and academic literature, this server allows AI systems to engage deeply with scientific research in fields like computer science and physics. It is particularly useful for AI assistants needing to conduct literature reviews, answer technical questions, or provide summaries of recent developments in specific research areas."
blazickjp,shell-mcp-server,9,4236,"This Shell MCP server, developed by Joe Blazick, enables AI assistants to interact with the local shell environment. It leverages the MCP library to provide a standardized interface for executing shell commands, managing files and directories, and retrieving system information. The server abstracts the complexities of shell interactions, offering a set of high-level operations that simplify task automation and system management. By connecting AI systems with the shell, this implementation facilitates tasks such as file manipulation, process management, and system configuration. It is particularly useful for AI applications requiring direct interaction with the operating system, such as automated system administration, DevOps tools, or any AI that needs to perform local system operations."
blazickjp,web-browser-mcp-server,25,9471,"This web browser MCP server, developed as an open-source project, enhances AI applications with advanced web browsing capabilities. It integrates with popular Python libraries like BeautifulSoup and requests to provide a robust interface for web scraping, content extraction, and navigation. The server abstracts the complexities of HTTP requests and HTML parsing, offering AI assistants streamlined operations for fetching web pages, extracting specific elements, and following links. By connecting AI systems with real-time web data, this implementation enables dynamic information retrieval, content analysis, and web-based task automation. It is particularly useful for applications requiring up-to-date online information, such as research assistants, content aggregators, or any AI system that needs to interact with web content programmatically."
HEAD,CG-MCP,2,,"CoinGecko API Server provides a Node.js Express server that interfaces with the CoinGecko cryptocurrency data API through JSON-RPC 2.0. It implements essential cryptocurrency data retrieval methods including price lookups, market data, trending coins, and global statistics. The server automatically detects API key presence to switch between free and Pro API endpoints, making it particularly valuable for AI assistants that need real-time cryptocurrency market information without requiring users to implement complex API interactions themselves."
block,vscode-mcp,43,4341,"The VS Code MCP Server enables AI assistants to interact directly with VS Code through a bidirectional communication channel. It provides tools for file diffing with user approval, opening files and projects, executing shell commands in VS Code's terminal, and retrieving information about active editor tabs. The implementation consists of two main components: a server that handles MCP protocol communication and a VS Code extension that provides native integration features. This allows AI agents to perform code modifications, navigate projects, and execute commands without leaving the conversation interface, making it particularly valuable for collaborative coding sessions and AI-assisted development workflows."
blue7wings,jira-mcp-server,0,,"JIRA MCP Server integrates JIRA services with MCP, allowing AI assistants to fetch JIRA issue content for use with LLMs. Built with Go and leveraging the mcp-go library, it provides a tool to retrieve issue descriptions by ID from JIRA instances. The server requires configuration of JIRA credentials (API key, email, and URL) and exposes an SSE endpoint at localhost:8080/sse that MCP clients can connect to. Currently focused on retrieving custom field data (specifically customfield_10330), this early implementation serves as a foundation for more comprehensive JIRA integration capabilities."
lallen30,mcp-remote-server,0,,"This MCP remote server implementation provides access to BluestoneApps coding standards and code examples over HTTP. It uses FastAPI to expose a JSON-RPC 2.0 endpoint and Server-Sent Events (SSE) for streaming responses, with support for HTTP Basic Authentication. The server offers tools for retrieving React Native development standards (project structure, API communication, component design, state management) and code examples (components, hooks, services, screens, themes). Designed for deployment via Docker, it can be accessed locally or remotely through a domain (mcp.betaplanets.com), enabling seamless integration with Windsurf/Cascade clients."
blurrah,mcp-graphql,90,,"This MCP server, developed by an unnamed author, provides a GraphQL interface for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for querying GraphQL servers. The implementation currently uses a mock schema response for development purposes, but is designed to connect to actual GraphQL endpoints. It abstracts the complexities of GraphQL communication, allowing AI systems to easily interact with GraphQL APIs. This server is particularly useful for applications requiring flexible data querying and manipulation, enabling AI assistants to access and analyze structured data from various GraphQL sources. Its generic design allows it to work with any GraphQL schema, making it versatile for different data-driven use cases."
bmorphism,anti-bullshit-mcp-server,16,,"This Anti-Bullshit MCP server, developed by Teglon Labs, provides tools for analyzing claims, validating sources, and detecting manipulation using multiple epistemological frameworks. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers empirical, responsible, harmonic, and pluralistic approaches to evaluate information. The implementation focuses on rigorous fact-checking and critical thinking, making it accessible for AI models to assess the credibility and implications of various claims. It's particularly useful for tasks like academic research validation, media literacy enhancement, or combating misinformation in digital content, enabling AI assistants to apply nuanced epistemological analysis without requiring deep expertise in each framework."
bmorphism,babashka-mcp-server,13,,"This Babashka MCP server, developed as an open-source project, enables AI assistants to interact with Babashka, a native Clojure interpreter for scripting. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides tools for executing Babashka code, caching recent command results, and accessing command history through standardized MCP endpoints. The implementation features configurable command timeouts and a roadmap for self-hosting in Babashka itself. By connecting AI capabilities with Babashka's scripting power, this server allows for dynamic code execution and interaction with Clojure ecosystems. It is particularly useful for scenarios involving Clojure-based data processing, system automation, or building AI-assisted development tools for Clojure projects."
bmorphism,krep-mcp-server,0,,"Krep MCP Server provides a high-performance string search utility that wraps the krep binary, offering significantly faster pattern matching than traditional tools like grep. It exposes search functionality through both HTTP endpoints and the Model Context Protocol, automatically selecting optimal search algorithms (KMP, Boyer-Moore-Horspool, or Rabin-Karp) based on pattern length and leveraging hardware acceleration when available. The server includes dynamic CPU core detection for optimal thread allocation, supports both file and string searching modes, and integrates with Claude Desktop and VSCode's Cline extension, making it valuable for developers needing efficient pattern matching within AI assistant workflows."
bmorphism,marginalia-mcp-server,1,,"This Marginalia MCP server, developed by Barton Rhodes, integrates Marginalia Search into MCP-compatible systems, enabling AI assistants to discover non-commercial and independent web content. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers a simple search tool that returns URLs, titles, and descriptions focused on lesser-known websites and unique content. The server is designed for easy installation in Claude Desktop, abstracting Marginalia Search API interactions into a standardized MCP interface. This implementation is particularly useful for researchers, writers, and curious individuals seeking to explore the independent web, facilitating use cases such as content discovery, trend analysis, and alternative perspective gathering."
bmorphism,say-mcp-server,12,,"This MCP server, developed by Barton Rhodes, provides text-to-speech functionality using macOS's built-in 'say' command. It offers extensive customization options for voice, rate, volume, and emphasis, allowing for dynamic speech modulation. The server integrates seamlessly with other MCP tools, enabling scenarios like reading search results or YouTube transcripts aloud. It differentiates itself through its focus on macOS-specific capabilities and its support for background speech processing. This implementation is particularly useful for creating audio content, enhancing accessibility, or adding voice output to various applications and workflows on macOS systems."
bmorphism,slowtime-mcp-server,2,,"This MCP server, developed for managing slow time intervals, integrates with drand for randomness and tlock-js for time-locked encryption. Built with TypeScript and leveraging DuckDB for efficient data handling, it offers tools for creating and managing time-based events with cryptographic guarantees. The server stands out by combining distributed randomness with time-locked encryption, enabling secure scheduling and reveal of information at predetermined future times. This implementation is particularly useful for applications requiring trusted delays, such as sealed-bid auctions, scheduled announcements, or time-capsule services, where information must remain confidential until a specific future time."
bmorphism,vibespace-mcp-go-ternary,0,,"Vibespace MCP Go Ternary provides real-time streaming of world moments and vibes through NATS, enabling multiplayer experiences with balanced ternary data representation. The implementation features robust access control with configurable sharing settings, rate limiting to prevent abuse, and comprehensive test coverage for reliability. It exposes JSON-RPC methods for resource reading and tool calling, with specialized streaming tools for starting/stopping streams, checking status, and updating configurations. This server is particularly valuable for collaborative virtual environments where users need to share contextual information with varying levels of privacy control."
bneil,mcp-memory-pouchdb,1,,"MCP Memory PouchDB provides a knowledge graph-based memory system for AI assistants to store and retrieve information about entities, their relationships, and observations. Built by bneil, it uses PouchDB with a memory adapter for primary storage and maintains a JSON file backup, offering tools for creating, reading, updating, and deleting graph elements through a comprehensive API. The implementation includes robust error handling with retry mechanisms, supports both in-memory and file-based persistence, and is particularly valuable for maintaining conversational context across interactions, enabling assistants to remember user preferences, relationships, and historical information."
bochaai,bocha-search-mcp,1,,"Bocha Search MCP provides integration with Bocha, a Chinese search engine for AI, enabling AI assistants to perform web searches and retrieve enhanced search details from billions of documents. Developed by kunkun, this Python-based server implementation offers two primary tools: bocha_web_search for retrieving standard search results including titles, URLs, summaries, and publication dates; and bocha_ai_search for semantic search with additional structured modal cards from vertical domains like weather, news, wikis, healthcare, and more. The server requires a Bocha API key and handles authentication, request formatting, and error handling, making it particularly useful for applications needing multilingual search capabilities with rich structured data."
boorich,mcp-human-loop,9,,"This Human Loop MCP Server, developed using TypeScript and the Model Context Protocol SDK, facilitates coordination between AI agents and human operators. It provides a standardized interface for managing human-in-the-loop processes, enabling seamless integration of human judgment into AI workflows. The server's modular structure and use of modern JavaScript features make it adaptable for various AI-assisted tasks. It is particularly suited for applications requiring human oversight or intervention in AI decision-making processes, such as content moderation, complex problem-solving, or ethical AI implementations where human values need to be incorporated into AI systems."
boristopalov,spotify-mcp,0,1886,"Spotify-MCP connects Claude with Spotify's API, allowing users to control music playback, search for tracks/albums/artists/playlists, get detailed information about music content, and manage the Spotify queue directly within conversations. Built by Boris Topalov on top of the spotipy-dev API, this implementation requires Spotify Premium and API credentials from the Spotify Developer Dashboard. The server can be run locally using stdio or deployed as a Docker container, making it ideal for seamless music control and discovery without leaving the Claude interface."
bornpresident,volatility-mcp-server,13,,This project bridges the powerful memory forensics capabilities of the Volatility 3 Framework with Large Language Models (LLMs) through the Model Context Protocol (MCP). It allows you to perform memory forensics analysis using natural language by exposing Volatility plugins as MCP tools that can be invoked directly by Claude or other MCP-compatible LLMs.
box-community,mcp-server-box,12,,"MCP Server Box integrates with the Box API to enable AI assistants to perform operations on Box files and folders, including search, text extraction, AI-based querying, and structured data extraction. Built by the Box community, it leverages Box's Claude AI capabilities to analyze documents, extract specific information from files, and answer questions about content. The server exposes tools for authenticating with Box, searching for files by name or content, reading file contents, asking AI about documents, locating folders, extracting structured data, and listing folder contents - making it particularly valuable for workflows that require document analysis, information extraction, or content management within Box."
bracketbotcapstone,bracketbot-mcp,0,,"The Multi-Robot Control MCP server enables AI agents to simultaneously control multiple robots through existing FastAPI robot control servers. Built with Python using FastMCP, it provides a unified interface for controlling robot movement (forward, backward, left, right), playing sounds through speakers, accessing camera images, and retrieving robot status information. The implementation includes port specification to target specific robots, precise velocity control, and comprehensive error handling. This server is particularly valuable for robotics applications requiring coordinated control of multiple robots through a conversational AI interface, allowing seamless integration with the Claude desktop client which automatically runs the MCP server."
bob-lance,grok-mcp,1,77,"Grok MCP provides a direct integration with Grok AI's powerful language and vision capabilities, exposing three primary tools: chat completion, image understanding, and function calling. Built by Braden Olmstead, this TypeScript-based server enables developers to interact with Grok's latest models through a standardized MCP interface, with a focus on seamless AI interaction across different use cases like text generation, image analysis, and intelligent function invocation."
bob-lance,instagram-engagement-mcp,2,137,"Instagram Engagement MCP provides tools for analyzing Instagram interactions, extracting demographic insights, and identifying potential leads through a private Instagram API integration. Built by Braden Olmstead, the server enables detailed engagement analysis including sentiment tracking, account comparisons, and lead generation by processing comments, user profiles, and post metrics. Particularly useful for marketing professionals and social media strategists seeking data-driven insights from Instagram interactions."
bradfair,mcp-cline-personas,21,,"This MCP server, developed by Brad Fair, implements a persona management system for Cline using shared components and templates. Built with TypeScript, it provides tools for creating, updating, and activating personas defined in `.clinerules` files. The implementation features component reusability, mustache-style variable substitution in templates, dependency validation, and version tracking for both components and personas. By abstracting persona management into standardized MCP endpoints, it allows AI systems to dynamically adjust their behavior and responses. This server is particularly useful for scenarios requiring flexible AI personality management, such as customer support chatbots, interactive storytelling applications, or personalized AI assistants that need to adapt to different user preferences or contexts."
braffolk,mcp-summarization-functions,28,1363,"This MCP implementation, developed by Remi Sebastian Kits, provides summarized output from various actions to avoid token consumption and crashes. It integrates with the Anthropic AI SDK and uses environment variables for configuration. Built with TypeScript and designed for Node.js 22+, it leverages modern JavaScript features and practices. The implementation is well-suited for developers working on AI projects that require efficient token usage, particularly when interfacing with large language models or processing extensive datasets. Its focus on summarization makes it valuable for applications needing to condense large amounts of information quickly and effectively."
ssdeanx,branch-thinking-mcp,1,,"Branch Thinking is an MCP server that enables AI assistants to manage multiple lines of thought simultaneously through a branch-based navigation system. Built on the sequential-thinking concept, it extends functionality by supporting branch creation, cross-references between related thoughts, automatic insight generation, and priority tracking based on confidence and connections. The implementation provides commands for listing branches, focusing on specific thought paths, and viewing branch history, making it particularly valuable for complex reasoning tasks like adversarial thinking, scientific method application, design pattern exploration, and trade-off analysis."
brandon-butterwick,mrp_calculation,0,,"The MRP Calculator MCP server enables AI assistants to perform Material Requirements Planning calculations based on inventory data, forecasts, and delivery schedules. It exposes a single tool, calculate_order_need, which takes inputs including SKU location, current balance, open orders, delivery schedule, and forecast periods to determine optimal order quantities. The implementation features comprehensive input validation, batch size optimization, and detailed calculation steps with projected inventory balances. Built with TypeScript and the Model Context Protocol SDK, it handles data processing through a standardized interface, making it particularly valuable for supply chain managers and inventory planners who need to make data-driven ordering decisions without switching to specialized MRP software."
13bm,ghidramcp,30,,"GhidraMCP enables AI assistants to interact with Ghidra's binary analysis capabilities through a WebSocket server interface. The implementation provides tools for retrieving decompiled code, analyzing functions, exploring imports/exports, and performing security analysis of binaries, with a focus on natural language queries about program behavior. Built with Java and integrated directly into Ghidra's plugin architecture, it features automatic server startup, concurrent client handling, and contextual binary analysis - making it particularly valuable for reverse engineers who want to leverage AI assistance while working with complex binaries."
anath2,research-llama,0,,"Research-Llama provides a Brave Search integration through MCP, enabling AI assistants to perform both web and local business searches. The server implements rate limiting to respect Brave API constraints and offers two primary tools: web search for general information queries and local search for finding businesses, restaurants, and other physical locations with detailed information including ratings, hours, and descriptions. Built with FastMCP, it's particularly useful for information retrieval tasks that require up-to-date web content or location-based data."
brendancopley,mcp-chain-of-draft-prompt-tool,6,,"MCP Chain of Draft Prompt Tool is a server implementation that enables structured, multi-step prompt workflows through a chain execution system. Built by Brendan Copley, it organizes prompts into categories like research, analysis, and development, with each prompt stored as a markdown file containing system messages and user templates. The server supports both individual prompts and complex chains where outputs from one step become inputs for subsequent steps, making it particularly valuable for workflows requiring progressive refinement such as deep research, code review, and documentation generation."
brevdev,brev-mcp,3,,"This Brev MCP server implementation, developed by tmonty12, provides a bridge between the Model Context Protocol and Brev's cloud development platform. It enables AI assistants to interact with Brev resources and operations through natural language commands. Built with Python 3.10+ and leveraging the Brev CLI's authentication, it offers functionality for managing Brev workspaces, deployments, and other cloud resources. The implementation stands out by focusing specifically on Brev's ecosystem and tooling. It is particularly useful for developers and DevOps teams looking to streamline their Brev workflows, automate cloud resource management, or integrate AI-assisted operations into their existing Brev-based projects."
briancusack,mcpsharepoint,10,,"The SharePoint MCP server provides AI assistants with direct access to organizational SharePoint content through Microsoft Graph API integration. Developed by Brian Cusack, this TypeScript implementation exposes SharePoint documents, folders, and sites as resources while offering tools for document searching, content retrieval, and folder exploration. The server authenticates with Microsoft Entra using client credentials and translates requests into appropriate Graph API calls, returning formatted results. It includes specialized prompts for common tasks like document summarization and relevant content discovery, making it particularly valuable for users who need to access, search, and analyze corporate knowledge stored in SharePoint without leaving their AI assistant interface."
briandconnelly,mcp-server-ipinfo,15,,"This MCP server, developed by Brian Connelly, provides IP geolocation services using the ipinfo.io API. Built with Python and leveraging the Model Context Protocol, it offers detailed location and network information for any IP address. The implementation focuses on delivering clean, formatted output for AI agents like Claude, including data such as city, region, country, coordinates, timezone, and organization. It requires an ipinfo.io API token for authentication. The server is particularly useful for applications requiring location-based insights, enabling use cases such as user location verification, content localization, and network analysis without complex API integrations."
brianellin,bsky-mcp-server,9,,"Bluesky MCP Server provides a bridge between Claude and the Bluesky social network, enabling direct interaction with Bluesky's features through conversational AI. Built by Brian Ellin, this implementation authenticates with Bluesky using environment variables and offers tools for browsing timelines, creating posts, searching content, managing follows, and interacting with custom feeds and lists. The server formats Bluesky's complex post structures into readable text, handling various content types including quotes, reposts, images, and external links, making it particularly valuable for users who want to monitor or engage with their Bluesky network without leaving their AI assistant conversation."
brian-knows,mcp-server-brian,1,,"A specialized MCP server that uses the Brian AI SDK to retrieve transaction data from blockchain addresses via natural language prompts. Built with TypeScript and Bun, it provides a simple tool for extracting blockchain transaction information by translating user prompts into structured data retrieval, with flexible support for specifying chain ID and address."
brian-mwangi-developer,africastalking-mcp,1,,"Africastalking MCP Server enables Claude Desktop to send SMS messages through Africa's Talking SMS API. Built with TypeScript, it provides a simple tool for sending text messages to recipients across African mobile networks, supporting features like dynamic message customization and sender ID configuration. The implementation requires configuration of API credentials in the claude_desktop_config.json file, making it particularly useful for applications needing to send notifications, alerts, or engage users via SMS directly from Claude Desktop."
brianshin22,youtube-translate-mcp,0,,"YouTube Translate MCP server enables AI assistants to access YouTube video transcripts, translations, and summaries through a simple API interface. Built by Brian Shin, it provides tools to retrieve transcripts, translate content to different languages, generate subtitles in SRT or VTT format, create video summaries, and search for specific content within videos. The implementation requires a YouTube Translate API key for authentication and can be run locally using stdio transport or deployed as a Docker container with SSE transport, making it ideal for research, content analysis, and multilingual video accessibility workflows."
bright8192,esxi-mcp-server,10,,"The ESXi MCP Server provides a RESTful API interface for managing VMware ESXi/vCenter environments through the Model Control Protocol. Built with Python using pyVmomi, it offers complete virtual machine lifecycle management including creation, cloning, deletion, and power operations, along with real-time performance monitoring of CPU, memory, storage, and network usage. The server implements API key authentication, SSL/TLS secure connections, and flexible configuration options via YAML, JSON, or environment variables, making it particularly valuable for automating VMware infrastructure management tasks through AI assistants or integration with other management tools."
luminati-io,brightdata-mcp,9,,"Bright Data MCP is an official server implementation that enables AI assistants to access public web data through various specialized tools. It integrates with Bright Data's web scraping infrastructure to provide capabilities like search engine scraping, webpage content extraction in markdown or HTML formats, and structured data retrieval from popular websites including Amazon, LinkedIn, and more. The implementation also offers optional browser control tools for interactive web navigation, allowing AI assistants to click elements, fill forms, and capture screenshots. This server is particularly valuable for use cases requiring real-time web data access, such as market research, product information retrieval, and answering questions based on current online information."
bro3886,mcp-memory-custom,2,,"This MCP server implementation provides a knowledge graph-based memory system for AI assistants. Developed by BRO3886, it offers tools for creating, managing, and querying a graph structure of entities, relations, and observations. The server supports features like custom memory file paths, timestamping, and advanced search capabilities. It's designed for use cases requiring persistent, structured memory for AI interactions, such as maintaining context in long-term conversations or building knowledge bases from user interactions."
brockreece,whimsical-mcp-server,7,,"This MCP server enables the creation of Whimsical diagrams programmatically through integration with Whimsical's API. It allows AI assistants to generate diagrams from Mermaid markup, returning both the Whimsical diagram URL and a base64 encoded image for iterative refinement. The server is particularly useful for creating complex system architecture diagrams, as demonstrated by the included example of the MCP architecture itself."
djyde,browser-mcp,70,247,"Browser MCP is a browser extension and server implementation that allows AI assistants to interact with the browser environment. It provides tools for retrieving page content as markdown, appending CSS styles to pages, searching browser history, and more. The implementation uses a WebSocket connection between the extension and server to enable real-time communication, with the server exposing these capabilities through the Model Context Protocol. This enables AI assistants to perform tasks like summarizing web pages, modifying page appearance, or retrieving browsing history data directly from the user's browser."
janspoerer,mcp_browser_use,3,,"Selenium-powered browser automation MCP server that enables AI agents to perform web interactions like navigation, clicking, form filling, and scrolling with minimal human supervision. Built to support complex web tasks through a flexible, robust set of tools that handle various edge cases in web element interaction, making it particularly useful for web scraping, testing, and automated browsing scenarios."
browserbase,mcp-server-browserbase,839,,"This MCP server, developed by Browserbase, provides cloud browser automation capabilities for AI assistants like Claude. It leverages Browserbase's infrastructure along with Puppeteer and Stagehand (upcoming) to enable web interactions, data extraction, and JavaScript execution in a cloud environment. The server exposes a standardized interface for tasks such as navigating web pages, capturing screenshots, and monitoring console logs. By bridging AI capabilities with web automation, this implementation facilitates use cases like web scraping, automated testing, and dynamic content analysis. It is particularly useful for developers and researchers who need programmatic control over web browsers through natural language commands, enabling complex web-based workflows and data collection tasks."
browsercat,browsercat-mcp-server,1,1119,"BrowserCat MCP Server provides cloud-based browser automation capabilities through the Model Context Protocol, enabling LLMs to interact with web pages without local browser installation. Developed by BrowserCat, it offers tools for navigation, screenshot capture, element interaction (clicking, hovering, form filling), and JavaScript execution in a real browser environment. The server connects to BrowserCat's cloud browser service via WebSocket, authenticates with an API key, and exposes both console logs and screenshots as resources. This implementation is particularly valuable for AI assistants that need to perform web-based tasks like data extraction, form submission, or visual analysis of websites."
bryangsmith,mailchimpmcp,0,,"The MailchimpMCP server provides a bridge between AI assistants and Mailchimp's marketing platform API, enabling automated email campaign management. Built with Python using the FastMCP framework, it exposes tools for listing campaigns, creating new campaigns, sending campaigns, managing automation workflows, and starting automations. The implementation includes proper authentication handling with API keys stored in environment variables, comprehensive error handling for API responses, and a clean separation between the client and server components. This server is particularly useful for marketing workflows requiring campaign monitoring, automated email sending, or integration of AI-generated content into email marketing campaigns."
brysontang,deltatask,5,,"DeltaTask is a locally-hosted task management system with Obsidian integration. It provides a SQLite-backed database for storing tasks with properties like urgency, effort, and tags, while offering intelligent prioritization and task decomposition. The MCP server exposes a full API for creating, updating, and querying tasks, as well as syncing with Obsidian markdown files. Ideal for users wanting a powerful, customizable todo system with local data storage and markdown integration."
misterboe,strapi-mcp-server,20,1979,"This Strapi MCP server, developed by bschauer, enables seamless integration of Strapi CMS content into AI-assisted workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for accessing and manipulating Strapi data through compatible MCP clients. The implementation supports content type retrieval, CRUD operations, and media handling, offering tools for dynamic content management and querying. It's particularly useful for developers and content managers looking to incorporate on-demand access to CMS data into their AI-assisted applications, allowing for dynamic content creation, updating, and analysis within Strapi-powered websites and applications."
bsmi021,mcp-chain-of-draft-server,13,347,"MCP Chain of Draft Server provides a tool for enhancing reasoning through iterative critique and revision cycles. Developed by bsmi021, this TypeScript implementation exposes a Chain of Draft tool that structures thinking into drafts with explicit reasoning chains, allowing for focused critiques and targeted revisions. The server maintains session state to track thought history and branching paths, making it particularly valuable for complex problem-solving tasks where initial reasoning may contain errors or gaps. It integrates with the Model Context Protocol SDK to enable AI assistants to improve their reasoning quality through systematic refinement rather than single-pass thinking."
bsmi021,mcp-file-context-server,8,,"This file context server, developed for enhanced Model Context Protocol (MCP) interactions, provides AI assistants with advanced file system access and code analysis capabilities. It implements real-time file watching, smart caching with LRU strategy, and detailed code metrics calculation including cyclomatic complexity and dependency extraction. The server exposes tools for file operations, code analysis, and advanced searching with regex support and context-aware results. By offering a comprehensive file system interface through MCP, it enables AI systems to efficiently read, search, and analyze code files. This implementation is particularly suited for scenarios involving large codebases, continuous integration environments, or AI-assisted code review processes, facilitating use cases such as automated code quality assessment, intelligent code navigation, and context-aware programming assistance."
bsmi021,mcp-file-operations-server,9,31,"This file operations MCP server, developed by Brian W. Smith, provides enhanced capabilities for file and directory management with streaming, patching, and change tracking support. Built with TypeScript and leveraging libraries like diff and glob, it offers tools for basic file operations, directory handling, file watching, and change tracking. The implementation stands out by incorporating streaming for large file handling, robust error handling, and rate limiting for protection against excessive requests. It's particularly useful for developers and applications requiring advanced file manipulation, real-time file system monitoring, or integration of file operations into AI-assisted workflows, enabling tasks like automated file management, backup systems, or content processing pipelines."
bsmi021,mcp-filesystem-server,2,,"This filesystem MCP server, developed by Brian W. Smith, provides AI assistants with standardized access to file system operations, analysis, and manipulation capabilities. Built with TypeScript and the Model Context Protocol SDK, it offers a comprehensive set of tools for directory and file operations, text analysis, file hashing, duplicate detection, and archive handling. The server is organized into distinct layers for protocol handling, tool registry, and core operations, with a focus on safe file system access. It's particularly valuable for AI systems that need to interact with local file systems, enabling use cases such as automated file management, content analysis, and data organization across various file types and structures."
bsmi021,mcp-mistral-codestral,2,,"This Mistral Codestral MCP server, developed by the Mistral AI team, provides a TypeScript-based interface for AI assistants to interact with Mistral's code-related APIs. Built using the Model Context Protocol SDK, it offers tools for code completion, bug fixing, and test generation across multiple programming languages. The implementation focuses on efficient code processing and includes features like Fill-in-the-Middle completion, rate limiting, and comprehensive error handling. It's particularly useful for enhancing AI-driven software development workflows, enabling tasks like automated code review, bug detection, and test suite generation without requiring deep knowledge of Mistral's API intricacies."
bsmi021,mcp-node-omnibus-server,3,,"This Node.js-based MCP server, developed as a comprehensive development tool, integrates with the Model Context Protocol SDK to facilitate AI-assisted Node.js and TypeScript development. It leverages TypeScript for type safety and includes Axios for HTTP requests. The server is designed to be extensible, allowing developers to add custom functionality for various Node.js development tasks. It's particularly suited for scenarios requiring AI assistance in code generation, debugging, and project management within Node.js environments. The implementation's focus on Node.js specifics differentiates it from more general-purpose MCP servers, making it valuable for teams working extensively with Node.js and TypeScript."
bsmi021,mcp-conversation-server,0,,"MCP Conversation Server provides a standardized interface for managing conversations with OpenRouter's language models. It enables applications to create and manage multiple conversations, send messages with streaming support, and persist conversation state to the filesystem. Built with TypeScript and the OpenAI SDK, it features automatic token counting, context window management, and support for various models including Claude 3 Opus, Claude 3 Sonnet, and Llama 2 70B. The server loads configuration from YAML files, handles error states appropriately, and is particularly valuable for developers who need a unified conversation management system across different AI models without managing provider-specific implementations."
bsmi021,mcp-server-webscan,5,,"This MCP server for web content scanning and analysis, developed using TypeScript, provides tools for extracting and processing web page content. It leverages libraries like Cheerio for HTML parsing and Turndown for HTML-to-Markdown conversion, offering capabilities to fetch, analyze, and transform web content. The implementation is designed to integrate seamlessly with AI-assisted workflows, enabling tasks such as web scraping, content summarization, and data extraction. It's particularly useful for researchers, content creators, and developers who need to automate web content analysis, generate structured data from websites, or incorporate web-based information into their AI applications."
b-step62,mcp-server-mlflow,1,,"MLflow Prompt Registry MCP Server provides a bridge between Claude Desktop and MLflow's Prompt Registry, enabling users to discover and use prompt templates managed in MLflow directly within Claude. Developed by B-Step62, this TypeScript implementation exposes two main tools: 'list-prompts' for browsing available templates and 'get-prompt' for retrieving and compiling specific prompts with variable substitution. The server connects to MLflow's API to fetch prompt metadata and content, then formats it according to the MCP specification. This integration is particularly valuable for teams already using MLflow for prompt management who want to streamline their prompt engineering workflow by accessing their templates directly in Claude Desktop."
btwiuse,npm-search-mcp-server,9,1476,"This npm search MCP server, developed by Anthropic, enables AI assistants to search for npm packages using the npm CLI. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it exposes a 'search_npm_packages' tool that executes the 'npm search' command and returns the results. The server runs on stdio, making it compatible with various MCP clients. By providing a standardized interface for npm package searches, it allows AI systems to easily access and analyze the npm registry. This implementation is particularly useful for scenarios involving JavaScript/Node.js development, package discovery, or dependency management, facilitating use cases such as finding suitable libraries, comparing package versions, or assessing package popularity within the npm ecosystem."
packages,cli,10,9648,"With [Bucket](https://bucket.co/)'s MCP you can flag features directly from the chat window in your code editor. Whether that’s VS Code, Cursor, Windsurf, Claude Code—any IDE that has MCP support.

For example, if you’ve built a “Download CSV” feature and want to flag it, you no longer have to go to bucket.co or use the CLI to create a feature key. Instead, ask the MCP to do it for you: “flag the download button with bucket.”

You can also use the MCP to grant company segments and individual companies or users access to the feature—straight from the chat window. To give “Acme” access, for example, you’d ask something like: “give Acme access to the download csv feature” and Bucket will look up the company name and enable the Download CSV feature for it.

To get started, [add the Bucket MCP in your IDE](https://docs.bucket.co/api/mcp)."
buga-luga,cursor-mcp,36,,"This MCP implementation, developed by Buga-luga, provides seamless integration between Claude AI and desktop applications through Cursor IDE. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables real-time AI assistance in development workflows, offering context-aware code suggestions and completions. The implementation focuses on enhancing productivity by bridging Claude's capabilities with desktop software, making it particularly useful for developers seeking AI-powered coding support within their existing IDE environment. It stands out by offering a TypeScript-based approach for improved type safety and developer experience."
buhe,mcp_rss,4,747,"MCP RSS is a server that enables AI assistants to interact with RSS feeds, providing tools to parse OPML files, fetch articles, and manage content from subscribed sources. Built with TypeScript and MySQL, it offers features for importing feed subscriptions, automatically updating articles, and filtering content by source or favorite status. The implementation uses TypeORM for database management and exposes three main API methods: retrieving articles with customizable filters, listing available sources, and marking articles as favorites. Ideal for users who want their AI assistants to access and manage their RSS content without switching context."
bunasq,fs,2,5648,"FS MCP is a file system server that enables AI assistants to read files from the local system. Built by Sergey Bunas, it provides a simple interface for accessing file content through the Model Context Protocol, with optional API key authentication for security. The implementation is written in TypeScript, runs on Node.js, and can be easily installed and executed using npx. This tool is particularly valuable for workflows where AI assistants need to analyze, reference, or work with local file content without requiring manual file uploads or content copying."
buoooou,mcp-ui-gen,3,264,"SupaUI MCP Server enables AI agents to generate, fetch, and manage React UI components through natural language interactions with the buouui.com platform. Built with TypeScript and leveraging the Model Context Protocol, it provides tools for creating, searching, and listing UI components with a focus on developer productivity and seamless AI-driven design workflows."
burakdirin,clickhouse-mcp-server,0,1361,"Clickhouse MCP Server provides a direct integration with ClickHouse databases, enabling AI assistants to execute SQL queries and connect to specific databases through a simple interface. Built by Burak Dirin, this Python-based implementation offers two main tools: 'connect_database' for establishing database connections and 'execute_query' for running SQL queries with results returned in JSON format. The server supports configuration through environment variables for connection settings and includes a read-only mode option for enhanced security. It's particularly valuable for workflows requiring data analysis, reporting, or exploration of information stored in ClickHouse databases without leaving the conversation interface."
burakdirin,mysqldb-mcp-server,2,3330,"MySQL Database MCP Server provides a bridge between Claude and MySQL databases, enabling direct SQL query execution and database connections through a simple interface. Developed by Burak Dirin, it offers two main tools: 'connect_database' for establishing connections to specific databases and 'execute_query' for running SQL queries with results returned in JSON format. The implementation includes configurable read-only mode for security, supports Python 3.11+, and can be deployed via Docker or installed directly using pip, making it ideal for workflows requiring database access without leaving the conversation interface."
burningion,geoapify-mcp,0,,"This map generation MCP server, developed by an unnamed author, provides tools for creating map images from geographic coordinates. Built with Python 3.13 and leveraging libraries like Folium and Selenium, it offers functions for geocoding addresses and generating static map images from GeoJSON data. The implementation focuses on simplicity, with just two main tools: one for fetching GPS coordinates and another for creating map visualizations. It's particularly useful for tasks like location-based data visualization, address validation, or generating custom map images for reports or presentations, enabling AI assistants or applications to work with geographic data without directly handling mapping APIs or browser interactions."
burningion,video-editing-mcp,104,16727,"This MCP server, developed by Kirk Kaiser, enables AI-assisted video editing and searching using the Video Jungle API. It provides tools for adding videos, searching video content using embeddings, and generating edits from single or multiple video files. The implementation is built in Python 3.11+ and integrates with libraries like einops, timm, and transformers for advanced video processing capabilities. It's designed for content creators and video editors who want to leverage AI to streamline their workflow, allowing for natural language queries to find relevant video clips and automate editing tasks. The server also includes an optional feature to search local video files on macOS, making it versatile for both cloud-based and local video management."
burtthecoder,mcp-maigret,101,2680,"This MCP server, developed by BurtTheCoder, enables AI assistants like Claude to leverage the OSINT capabilities of Maigret. Built in JavaScript/TypeScript, it provides functionality for searching usernames across social networks and analyzing URLs. The implementation stands out by offering Docker-based execution, multiple output formats, and site filtering options. By connecting AI capabilities with Maigret's extensive data collection, this server allows AI systems to gather and process publicly available user information programmatically. It is particularly useful for building AI-powered tools for social media research, identity verification, and open-source intelligence gathering that require ethical and responsible use of public data sources."
burtthecoder,mcp-dnstwist,17,1402,"This MCP server for dnstwist, developed by burtmacklin, provides AI assistants with DNS fuzzing capabilities to detect typosquatting, phishing, and corporate espionage. Built using TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized interface for domain security analysis. The server integrates with the dnstwist tool, enabling automated generation and analysis of domain name variations. It's particularly valuable for cybersecurity professionals and organizations looking to proactively identify potential threats to their online presence, facilitating use cases such as brand protection, phishing prevention, and domain security audits."
burtthecoder,mcp-shodan,25,15906,"This MCP server, developed by BurtTheCoder, enables AI assistants like Claude to interact with the Shodan API and CVEDB. Built in JavaScript, it provides capabilities for IP lookups, device searches, DNS resolution, vulnerability queries, and CPE lookups. The implementation stands out by offering a standardized interface to Shodan's extensive IoT device data and vulnerability information. By connecting AI capabilities with Shodan's global device intelligence, this server allows AI systems to gather detailed information about internet-connected devices, analyze potential security vulnerabilities, and understand the global threat landscape. It is particularly useful for cybersecurity analysis, threat intelligence gathering, and building AI-powered network monitoring and risk assessment tools."
burtthecoder,mcp-virustotal,36,2399,"This VirusTotal MCP server, developed by BurtTheCoder, enables AI assistants like Claude to leverage VirusTotal's threat intelligence capabilities. Built in JavaScript/TypeScript, it provides functionality for scanning URLs, analyzing file hashes, and retrieving IP address reports. The implementation stands out by offering relationship analysis tools and pagination support for large result sets. By connecting AI capabilities with VirusTotal's extensive threat data, this server allows AI systems to perform security analysis and threat detection programmatically. It is particularly useful for building AI-powered tools for malware research, phishing detection, and network security monitoring that require access to up-to-date threat intelligence."
baryhuang,mcp-server-aws-resources-python,6,,"This AWS Resources MCP server, developed by peakmojo, provides a Python-based interface for AI models to interact with AWS services using boto3. Built to address limitations in existing solutions, it offers a containerized approach that simplifies deployment and enhances stability. The server exposes a dynamic resource for executing AWS queries, supporting operations across various AWS services like S3 and CodePipeline. It features a sandboxed environment for code execution, ensuring security while allowing flexibility in query construction. This implementation is particularly useful for DevOps tasks, cloud resource management, and integrating AWS functionality into AI-powered workflows, offering a more accessible and customizable alternative to AWS Chatbot with Developer Access."
peakmojo,mcp-hubspot,45,,"This HubSpot MCP server, developed by peakmojo, provides a streamlined interface for AI models to interact with HubSpot CRM data and operations. Built using Python and the HubSpot API client, it offers tools for managing contacts and companies, including creation and retrieval functionalities. The server implements auto-updating resources and a demonstration prompt to guide users through HubSpot operations. By abstracting HubSpot API interactions into a standardized MCP format, it enables AI systems to easily access and manipulate CRM data. This implementation is particularly valuable for sales and marketing applications, facilitating use cases such as lead management, customer data analysis, and automated CRM updates."
baryhuang,mcp-twitter-noauth,0,,"MCP Server - Twitter NoAuth provides Twitter API access without requiring local credential setup, enabling headless operation in remote environments. Built by buryhuang, it implements a decoupled architecture where clients complete OAuth flows independently and pass credentials as context to the server. The implementation supports core Twitter operations including searching tweets, retrieving user tweets, posting new content, and replying to existing tweets. It handles automatic token refreshing and is designed for containerization with Docker, making it particularly valuable for AI assistants that need to interact with Twitter while maintaining separation between credential storage and server implementation."
baryhuang,mcp-unipile,7,,"This MCP server, developed by Bary Huang, integrates with Unipile to provide a unified interface for accessing messages across multiple messaging platforms including LinkedIn, WhatsApp, Instagram, Messenger, and Telegram. It offers tools for retrieving chat messages with pagination support, making it particularly useful for AI models to interact with diverse communication channels through a standardized protocol. The implementation is containerized for easy deployment across various Linux architectures and includes detailed setup instructions for both Docker and local environments. It's designed for users who need to manage communications across multiple platforms efficiently, especially beneficial for professionals leveraging AI capabilities to enhance their networking and communication strategies."
bytebase,dbhub,238,13671,"DBHub is a universal database gateway implementing the MCP server interface, allowing AI assistants to connect to and explore different databases like PostgreSQL, MySQL, SQLite, and DuckDB. Developed by Bytebase, it provides capabilities for browsing tables, viewing schema information, running read-only SQL queries, and includes safety checks to prevent dangerous operations. The implementation is containerized with Docker for easy deployment and supports both stdio transport for direct integration with tools like Claude Desktop and SSE transport for browser and network clients, making it particularly valuable for AI assistants that need to access and analyze data stored in various database systems."
bytefer,mcp-flux-schnell,4,,"MCP server for generating images using the Flux Schnell model via a Cloudflare worker API. Built by bytefer, this implementation provides a single 'generate_image' tool that allows users to create images by sending text prompts, with robust error handling and environment variable configuration. Useful for developers needing a streamlined text-to-image generation service with clean TypeScript implementation."
kbsooo,mcp_atom_of_thoughts,16,0,"Atom of Thoughts is a TypeScript-based MCP implementation that enables AI assistants to break down complex problems into smaller, manageable components. Developed by Byungsoo Kang, this server leverages the Model Context Protocol SDK to facilitate structured thinking processes through atomic thought units. The implementation runs on Node.js and uses stdio for communication, making it lightweight and easily deployable in various environments. It's particularly useful for reasoning tasks that benefit from decomposition, allowing AI systems to tackle problems step-by-step rather than attempting to solve them all at once."
c0h1b4,mssql-mcp-server,7,,"This MSSQL MCP server enables AI agents to interact with Microsoft SQL Server databases through a standardized interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for executing SQL queries, managing database connections, and retrieving schema information. The implementation focuses on security and performance, offering features like connection pooling, query parameterization, and TLS encryption support. It's particularly useful for applications requiring AI-driven database operations, enabling use cases such as automated data analysis, dynamic reporting, and intelligent database management without direct exposure to SQL Server complexities."
c4pt0r,mcp-server-s3,2,,"MCP-Server-S3 provides a bridge to Amazon S3 storage services, enabling AI assistants to perform common S3 operations through a standardized interface. The implementation offers seven specialized tools for listing buckets, browsing objects, retrieving file contents, uploading and downloading files, and deleting objects. Built with Python 3.13 using the boto3 library, it authenticates with AWS credentials through environment variables and runs as a FastMCP server. This tool is particularly valuable for developers and data engineers who need to interact with cloud storage directly through AI assistants without switching to separate AWS management interfaces."
cablate,mcp-doc-forge,7,1195,"This MCP server implementation provides document processing and manipulation capabilities, integrating various libraries for handling different file formats including PDF, DOCX, HTML, CSV, and EPUB. It offers functionalities such as text extraction, conversion between formats, image processing, and markdown generation. The implementation is designed to be used within the Model Context Protocol ecosystem, enabling AI assistants to perform complex document operations. It's particularly useful for tasks like content analysis, data extraction from documents, and automated report generation across multiple file types."
cablate,mcp-google-gmail,1,,"This MCP server implementation provides Google Gmail capabilities, enabling integration with Gmail's API for email-related operations. Developed by CabLate, it offers functionalities for interacting with Gmail accounts, likely including sending, receiving, and managing emails. The implementation is built using TypeScript and utilizes the googleapis library for API interactions. It's designed to be used within the Model Context Protocol ecosystem, making it suitable for AI assistants or applications that require email automation, content analysis, or integration of email functionalities into larger workflows. The server is particularly useful for tasks such as automated email responses, email content processing, and managing email-based workflows within AI-driven systems."
cablate,mcp-google-calendar,1,989,"This MCP server implementation provides Google Calendar capabilities, enabling AI assistants to interact with and manage calendar events. Developed by CabLate, it integrates with the Google Calendar API to offer functionalities such as creating, updating, and retrieving calendar events. The implementation is built using TypeScript and leverages the @google-cloud/local-auth library for authentication. It is designed to be easily integrated into existing MCP ecosystems, allowing for seamless calendar management within AI-powered applications. This server is particularly useful for scheduling assistants, productivity tools, and any application requiring calendar integration."
cablate,mcp-google-map,8,686,"MCP Google Map provides a bridge to the Google Maps API, enabling location-based operations like place searching and geocoding. Developed by CabLate, this TypeScript implementation uses the @googlemaps/google-maps-services-js library to interact with Google's services. The server exposes tools for querying location data, finding nearby places, and retrieving geographical information - making it particularly valuable for applications that need to incorporate location intelligence without leaving the conversation interface."
cabra-lat,tuyactl,1,10828,"This MCP server, developed by @cabra.lat, provides integration with Tuya smart home devices. Built with Python and leveraging the tinytuya library, it offers tools for controlling and monitoring Tuya-compatible devices. The implementation focuses on enabling AI assistants to interact with smart home ecosystems, including features like device discovery, state management, and command execution. It requires Python 3.13+ and uses libraries like numpy and scipy for data processing. The server is particularly useful for home automation scenarios, enabling use cases such as voice-controlled smart devices, energy usage optimization, and automated routines without direct user interaction with individual device apps or hubs."
cactusinhand,mcp_server_notify,11,,"MCP Server Notify provides a system notification service that integrates with desktop environments to display alerts and play sounds when triggered by API requests. The implementation uses Pydantic for request validation, supports cross-platform notifications through the Plyer library, and includes sound playback capabilities (with platform-specific implementations). Built with a simple HTTP server architecture, it enables applications to send customizable notifications with configurable timeouts, making it particularly useful for alerting users about completed tasks, important events, or status changes without requiring constant monitoring of the application interface."
caesaryangs,prometheus_mcp_server,24,,"This MCP server, developed by CaesarYangs, enables AI assistants to interact with Prometheus metrics through a standardized interface. It provides tools for querying and analyzing time-series data from Prometheus instances via the Prometheus API. The server abstracts away complexities of metric retrieval and offers a simplified workflow for AI systems to access and reason about system and application performance data. By connecting AI capabilities with Prometheus' powerful monitoring and alerting toolkit, this implementation empowers AI assistants to perform tasks like anomaly detection, capacity planning, or troubleshooting. It is particularly useful for applications requiring real-time metrics analysis, infrastructure monitoring, or any scenario where an AI system needs to understand and act on the operational state of complex distributed systems."
caicongyang,mcp-demo,1,,"MySQL server implementation for the Model Context Protocol (MCP), providing a standardized interface for database interactions. Built with SQLAlchemy and PyMySQL, it enables secure and configurable MySQL database access through a FastAPI-powered server, supporting connection pooling, environment-based configuration, and optional query restrictions."
smithery-ai,mcp-obsidian,686,94877,"This Obsidian MCP connector, developed by calclavia, enables AI assistants to read and search Markdown notes in Obsidian vaults through Claude Desktop. It provides seamless integration between Claude and personal knowledge bases stored in Obsidian. Built in TypeScript and leveraging npx for easy installation, the connector allows Claude to list files, retrieve content, and perform searches across Obsidian documents. By bridging AI models with Obsidian's note-taking system, this implementation enhances Claude's ability to analyze personal knowledge, assist with note organization, and augment information retrieval from Obsidian vaults. It is particularly useful for users seeking AI-powered knowledge management, research assistance, and collaborative note-taking within their Obsidian environments."
mumunha,cal_dot_com_mcpserver,0,,"A Cal.com Calendar MCP server that integrates with the Cal.com Calendar API to provide appointment scheduling capabilities for AI assistants. It offers tools for adding, updating, deleting, and listing calendar appointments with features like rate limiting and error handling. The implementation uses the MCP SDK to expose these calendar operations as tools that can be called programmatically, making it valuable for workflows where scheduling and calendar management are needed without leaving the conversation interface."
calebl,ynab-mcp-server,1,,"YNAB MCP server provides a bridge between AI assistants and the You Need A Budget (YNAB) personal finance API. Built by Caleb LeNoir, it exposes tools for listing budgets, retrieving detailed budget information including accounts and categories, and creating transactions. This implementation is particularly valuable for users who want to manage their YNAB budgets and track finances directly through conversational AI without switching contexts."
calvernaz,alphavantage,30,,"This MCP server, developed by calvernaz, provides integration with the Alphavantage stock market data API. It exposes tools for querying financial data like stock prices, company fundamentals, and economic indicators. By leveraging Alphavantage's comprehensive financial datasets, this implementation enables AI assistants to easily incorporate up-to-date market information into their analyses and recommendations. It is particularly useful for scenarios requiring real-time financial data, such as portfolio tracking, investment research, or generating market reports through natural language queries to an AI assistant. The server is designed for seamless integration with the Claude desktop app and focuses on core stock market data retrieval functionality."
cam10001110101,mcp-server-obsidian-jsoncanvas,3,,"This MCP server implementation provides tools for working with JSON Canvas files according to the official specification. It enables creating, modifying, and validating infinite canvas data structures, supporting all node types and edge connections. The server offers a RESTful API for canvas operations, includes example resources, and can export canvases to different formats. It's designed for applications requiring AI assistants to interact with and manipulate canvas-based data visualizations."
cam10001110101,mcp-server-outlook-email,8,,"This MCP server provides email processing capabilities for Outlook, integrating with MongoDB for semantic search and SQLite for efficient storage. It features multi-mailbox support, date range filtering, and vector embedding generation using Ollama. Designed for Windows environments, it offers tools for processing emails, storing metadata, and preparing data for advanced search and analysis tasks. The server is particularly useful for applications requiring automated email processing, semantic search capabilities, and integration with local Outlook installations."
camdenclark,anki-mcp-server,35,,"This Anki MCP server, developed using TypeScript and the Model Context Protocol SDK, provides AI assistants with a standardized interface to interact with Anki flashcard decks via the AnkiConnect plugin. It offers resources for accessing Anki decks and note models, along with tools for listing, retrieving, and creating notes. The server abstracts the complexities of the AnkiConnect API, enabling AI systems to seamlessly incorporate flashcard management into their workflows. It's particularly valuable for educational assistants, language learning applications, and AI developers working on knowledge retention tools, facilitating use cases such as automated flashcard creation, personalized study sessions, and intelligent review scheduling within the Anki ecosystem."
camdenclark,jira-mcp,22,3935,"This JIRA MCP server, created by Camden Clark, enables seamless integration between Large Language Models and JIRA project management software. It provides standardized tools for executing JQL searches and retrieving detailed issue information through the Model Context Protocol. Built with Node.js and leveraging the @modelcontextprotocol/sdk, this implementation stands out by offering a streamlined interface to JIRA's powerful querying capabilities. It's particularly useful for AI assistants and chatbots that need to access or manipulate JIRA data, enabling natural language interactions for project management tasks, issue tracking, and reporting."
canadaduane,browse-together-mcp,2,,"A Playwright browser and MCP Server on your desktop. You can spin up a headful browser (for human interaction) and an accompanying MCP server that can be used to control the browser via HTTP API or MCP server.

This project provides two complementary services for browser automation and co-browsing:

    A Browser Proxy Service that controls a persistent Playwright browser instance via HTTP. Let's you log in to services you use, like you normally would.
    An MCP Server that exposes browser functionality to MCP clients (like Claude Desktop) via the FastMCP framework. Can operate inside the authenticated session you provide, giving your MCP commands more power and usefulness as an authenticated user.

Both services are built with Deno and TypeScript and work together seamlessly.
Features

- Multiple Browser Support: Run with either Chromium (default) or Firefox.
- Persistent Browser Session: A single browser instance runs for the lifetime of the service.
- Named Tabs: Control multiple pages (tabs) within the single browser session using unique IDs.
- HTTP API: Interact with the browser using simple JSON commands over HTTP.
- MCP Integration: Use the browser through Cline, Windsurf, Claude Desktop, or other MCP clients.
- Type Safety: Uses Zod for robust validation of incoming commands.
- Secure your browser proxy service (HTTP) endpoint with an API token.

Note: Currently supports Mac OS, but can be extended to other platforms with minor changes."
cantpr09ram,tku-mcp,1,,"TKU-MCP connects Blender to Claude AI through the Model Context Protocol, allowing Claude to directly interact with TronClass and TKU-ilife systems. This implementation provides authentication with TKU's student systems using environment variables for credentials, and is designed to be run with the uv package manager. The server enables AI assistants to access and manipulate data from Tamkang University's learning management and student information systems, making it useful for students who want to automate interactions with university platforms."
ranver,mcp,0,,"A Model Context Protocol server that enables AI assistants like Claude to interact with Canvas LMS through a comprehensive API integration. Built by R.Huijts, this implementation provides tools for managing courses, posting announcements, viewing rubrics, accessing student enrollment information, and handling assignment submissions and comments. The server uses TypeScript and the MCP SDK to expose Canvas functionality as structured tools, making it particularly valuable for educators who want to automate administrative tasks, analyze student performance data, and generate visualizations of rubric statistics without leaving their AI assistant conversation."
canvrno,proxmoxmcp,81,,"Proxmox MCP Server provides a Model Context Protocol interface for managing Proxmox virtualization environments, enabling AI assistants to interact with virtual machines, containers, storage, and cluster resources. Built by Kevin, it offers tools for retrieving node status, executing commands within VMs via QEMU guest agent, monitoring storage pools, and checking cluster health - all through a structured API with comprehensive error handling and logging. The implementation uses token-based authentication with Proxmox's API and includes detailed formatting for console output, making it particularly valuable for system administrators who need to monitor and manage their Proxmox infrastructure without leaving their conversation interface."
capecoma,winterm-mcp,0,,"WinTerm MCP is a server that enables AI models to interact with the Windows command line interface through standardized tools. It provides functionality to write commands, read terminal output, and send control characters, allowing for programmatic access to Windows terminal operations. This implementation is particularly useful for AI-driven automation tasks and integrations that require direct interaction with the Windows command line environment."
automateyournetwork,chatgpt_mcp,2,,"A ChatGPT integration server that enables AI assistants to access OpenAI's GPT-4o model through a simple API. Developed by John Capobianco, this implementation provides a single tool for sending text content to ChatGPT for analysis, summarization, or generation tasks. The server handles the OpenAI API communication, error management, and response formatting, making it easy to augment an assistant's capabilities with ChatGPT's perspective. It's particularly useful for scenarios requiring complex analysis beyond the primary assistant's capabilities, such as detailed security reviews of configurations or summarizing large documents."
capoom,houdini-mcp,37,,"HoudiniMCP provides a bridge between AI assistants and the Houdini 3D software through a socket-based communication protocol. The implementation consists of a Python addon that runs within Houdini to expose a TCP server, paired with an MCP server that translates AI requests into Houdini operations. It supports a wide range of 3D modeling capabilities including geometry creation, material application, lighting, camera setup, simulation, and rendering, making it valuable for AI-driven 3D content creation workflows without leaving the assistant interface."
cappahccino,sb-mcp,1,2350,"Supabase MCP Server enables Claude and other LLMs to interact with Supabase databases and Edge Functions through a standardized API. It provides tools for performing CRUD operations on Postgres tables and invoking Edge Functions with custom payloads, all secured by API key authentication. The implementation includes a complete Express server with database query builders, comprehensive error handling, and configuration management, making it particularly valuable for applications that need AI assistants to access or modify data in Supabase projects without requiring custom integration code."
captain-blue210,anki-mcp-server,0,,"An MCP server that connects Claude Desktop to Anki via the AnkiConnect API, allowing AI assistants to retrieve and analyze cards tagged as 'leech' in a user's Anki collection. The server provides tools to fetch either detailed card information or just IDs, with support for random selection of a specified number of cards. Built with TypeScript and Node.js, it handles connection management, error recovery, and batch processing to prevent overwhelming the AnkiConnect API, making it particularly valuable for users seeking AI assistance in analyzing and improving their spaced repetition study habits."
captainchaozi,search-intent-mcp,1,435,A Message Context Protocol (MCP) server implementation that detects search intent in user queries and provides relevant search results from Brave Search API.
captaincrouton89,mcp-maker,2,,"MCP Maker is a specialized server designed to help developers create new Model Context Protocol servers by providing scaffolding tools and templates. It offers utilities for generating boilerplate code, tool definitions, resource templates, and prompt templates through a set of well-defined tools accessible via Claude Desktop. Built with TypeScript and using Handlebars for templating, it streamlines the MCP development process by automating repetitive setup tasks and providing standardized patterns for common MCP components. The implementation is particularly valuable for developers new to MCP who want to quickly bootstrap projects with best practices already in place."
caretdev,mcp-server-iris,2,1506,"InterSystems IRIS MCP server provides a bridge between AI assistants and InterSystems IRIS databases, enabling SQL query execution and interoperability production management through a standardized interface. Built with Python, it exposes tools for running SQL queries, creating/starting/stopping productions, managing production items, and monitoring system logs. The implementation is particularly valuable for database administrators and developers who need to interact with IRIS databases and manage InterSystems productions directly through conversational AI."
carlmontanari,scrapli-mcp,5,,"Scrapli-MCP is a server implementation that integrates the Scrapli network automation library with MCP to enable AI assistants to execute SSH commands on network devices. Built by Carl Montanari, this implementation provides resources for retrieving host information and a tool for executing commands on Cisco IOS XE devices using AsyncScrapli. The server includes custom prompts to facilitate natural language interactions when requesting command execution, making it particularly useful for network engineers who need to automate device configuration and troubleshooting tasks through an AI interface."
carrie-l,blog_publisher_mcp_server,0,,"This Blog Publisher MCP server enables AI assistants to publish blog content to external platforms. Built with Python using httpx for HTTP requests and the MCP library with CLI support, it provides a streamlined interface for content submission. The implementation includes both standard and local execution modes with logging capabilities, making it suitable for automated content publishing workflows or integration with AI writing assistants that need to push finalized content to publishing platforms."
carsonjones,nhl-go,1,,"This MCP server, developed by Carson Jones, provides comprehensive access to NHL data and statistics. Built with Go and leveraging the Model Context Protocol, it offers a wide range of functionalities including retrieving schedules, game details, team information, player stats, and league standings. The implementation focuses on delivering up-to-date hockey information with features like live game updates and play-by-play data. It's particularly useful for sports analysts, fantasy hockey enthusiasts, and developers building NHL-related applications, enabling use cases such as real-time score tracking, in-depth player performance analysis, and automated reporting on league standings without complex API integrations."
carterlasalle,mac_messages_mcp,58,6929,"Mac Messages MCP provides a bridge for AI assistants to interact with the macOS Messages app, enabling reading recent messages and sending new ones through a set of well-defined tools. Developed by Carter Lasalle, it accesses the Messages database and AddressBook contacts directly, with features for contact lookup, fuzzy name matching, and group chat support. The implementation includes robust error handling for permission issues and runs as an MCP server that integrates with Claude Desktop, making it particularly valuable for users who want to manage their iMessage conversations without leaving their AI assistant interface."
carterlasalle,system_information_mcp,2,,"This MCP server implementation provides detailed information about the development environment to enhance context-aware assistance in the Cursor code editor. Developed by Carter Lasalle, it uses Python to gather comprehensive system data including OS details, hardware specifications, installed software, and running processes. The server exposes this information through various tools, allowing Cursor's intelligent agent to access specific environmental details as needed. It's particularly useful for scenarios requiring deep understanding of the local development setup, such as troubleshooting environment-specific issues or providing tailored coding suggestions."
catalystneuro,mcp_read_images,6,,"This MCP server, developed by CatalystNeuro, provides image analysis capabilities using OpenRouter's vision models, particularly Claude-3 variants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined interface for AI agents to analyze images through natural language queries. The implementation focuses on ease of use and flexibility, with features like automatic image optimization, configurable model selection, and detailed error handling. It's particularly useful for developers and researchers working with visual data, enabling use cases such as content moderation, data extraction from images, and automated image captioning without directly interacting with the OpenRouter API."
catherinedparnell,mcp-finnhub,0,,"This Finnhub MCP server, developed by Catherine Parnell, provides a streamlined interface to Finnhub's financial API. Built with Python using the FastMCP framework, it offers tools for retrieving market news, stock quotes, basic financials, and recommendation trends. The implementation stands out by abstracting away the complexities of API authentication and request handling, making it accessible for AI assistants or applications needing financial data. It's particularly useful for tasks like market analysis, portfolio management, or building financial chatbots, enabling quick access to real-time and historical financial information without deep API knowledge."
cat-state,nrepl-mcp,1,,"This MCP server provides a bridge between Anthropic's Model Control Protocol and Basilisp's nREPL server, allowing Claude Code to interact directly with a Basilisp REPL environment. It enables execution of Basilisp code (a Lisp dialect similar to Clojure that runs on the Python VM), retrieval of documentation, namespace exploration, and Python interoperability through a set of well-defined tools. The implementation features robust error handling, syntax highlighting for results, and comprehensive documentation to facilitate seamless interaction between AI assistants and Basilisp code execution environments."
caue397,google-calendar-mcp,0,,"Google Calendar MCP Server provides a robust bridge to the Google Calendar API, enabling AI assistants to perform calendar management tasks like listing calendars, creating/updating/deleting events, and handling Brazilian date formats. Built with TypeScript and the Model Context Protocol SDK, it features comprehensive authentication handling through OAuth2, automatic token refresh, and flexible event manipulation capabilities."
cc8887,ue-editor-mcpserver,5,,"The MCPServer plugin for Unreal Engine Editor transforms the editor into an MCP-compatible server for AI agent interaction. It leverages Python's asyncio framework with a custom event loop implementation to handle asynchronous operations within the Unreal Editor environment. The server integrates with Unreal's slate tick system to maintain responsiveness while processing requests, and requires dependencies like mcp, anyio, click, and starlette. This implementation enables AI agents to programmatically control and interact with Unreal Editor functionality, making it valuable for automating editor workflows and enabling AI-driven content creation."
ccabanillas,notion-mcp,93,,"This Notion MCP server, developed by Chase Cabanillas, integrates Notion's API with the Model Context Protocol, enabling AI-assisted workflows to interact with Notion databases and pages. Built with Python and leveraging libraries like httpx and pydantic, it exposes Notion operations as MCP resources and tools, including database listing, querying, page creation/updating, and search functionality. The implementation focuses on asynchronous operations, proper error handling, and adherence to MCP specifications. It's particularly useful for developers and teams looking to incorporate Notion's organizational capabilities into AI-driven applications, allowing for dynamic content management and retrieval within Notion workspaces."
c-cf,imf-data-mcp,1,,"IMF Data MCP Server provides access to International Monetary Fund data through a structured API interface. It offers resources for listing datasets, retrieving dataset structures, and tools for fetching time series data from various IMF databases including International Financial Statistics, Direction of Trade Statistics, and Balance of Payments. The server processes raw IMF API responses into readable formats, handling complex data structures and providing clear error messages when data is unavailable. This implementation is particularly valuable for economic analysis, research, and financial reporting workflows requiring access to authoritative international economic indicators."
ccnn2509,app-seo-ai,5,,"App SEO AI provides a bridge to Google Ads Keyword Planner API, enabling AI assistants to perform SEO research and optimization tasks. The implementation offers tools for keyword research, SERP analysis, and competitor analysis through a Node.js Express server that can be deployed via Docker or Smithery. It handles Google OAuth2 authentication for API access and formats API responses into structured data, making it valuable for content creators, marketers, and SEO professionals who need to research keywords, analyze search results, or evaluate competitor strategies without leaving their AI assistant workflow."
ccq1,awsome_kali_mcpservers,98,,"Awesome Kali MCP Servers provides a secure interface for AI assistants to execute Kali Linux security tools through a sandboxed environment. The implementation wraps common security utilities including nmap for network scanning, objdump and nm for binary analysis, strings for file examination, and wireshark/tshark for packet analysis. Built with Python using Docker containers for isolation, it enforces configurable resource limits and network access controls to prevent abuse while maintaining tool functionality. This server enables AI systems to perform security analysis tasks like vulnerability scanning, binary reverse engineering, and network traffic inspection without direct system access, making it valuable for security professionals who want to leverage AI assistants for technical security operations."
cdpath,mcp-server-chatgpt-app,2,2391,"MCP Server for ChatGPT enables AI assistants to interact with the ChatGPT macOS app through AppleScript automation. Developed by cdpath, this Python implementation provides a simple interface for sending prompts to ChatGPT via keyboard input simulation, making it compatible with tools like cursor and chatwise. The server handles permission errors gracefully with helpful troubleshooting messages and is particularly useful for users who want to leverage their existing ChatGPT app within an MCP workflow without switching interfaces."
cdugo,package-documentation-mcp,12,289,"This MCP server implementation provides a bridge to fetch package documentation from multiple language ecosystems without requiring API keys. Developed by cdugo, it integrates with various package registries and documentation sources, offering a standardized interface for AI assistants to access library documentation. The server includes caching capabilities, Docker support, and is designed for use cases requiring up-to-date package information, such as code assistance, dependency analysis, or learning about new libraries."
centralmind,gateway,246,,"Gateway is a database connectivity server that enables AI assistants to interact with multiple database systems through a unified interface. It supports various database engines including PostgreSQL, MySQL, SQLite, MongoDB, Snowflake, and others, while providing advanced features like API key authentication, OAuth integration, PII data protection, and OpenTelemetry monitoring. The server can operate in multiple modes (REST API, MCP SSE, or MCP stdio) and includes plugins for caching, row-level security, and data anonymization, making it particularly useful for creating secure data access layers for AI applications without exposing raw database credentials."
cerebrofoundation,mcp-intent,0,375,"A Bitcoin transaction signing server that enables AI assistants to generate Bitcoin addresses and sign transactions through the MCP protocol. Built by Cerebro Foundation, this implementation provides two key tools: one for generating P2WPKH addresses from private keys in WIF format, and another for signing partially signed Bitcoin transactions (PSBTs). The server uses the @scure/btc-signer library along with secp256k1 cryptography to securely handle Bitcoin operations, making it useful for cryptocurrency wallet integrations and transaction signing workflows, though the authors note it's intended as a play project rather than for production use."
ceshine,git-prompts-mcp-server,1,,"Git Prompts MCP Server provides a specialized interface for generating pull request descriptions based on Git repository changes. Developed by Ceshine Lee, this server analyzes the differences between Git commits and formats them as either plain text or JSON to create contextually relevant PR descriptions. The implementation uses GitPython to access repository data and exposes its functionality through a single command that compares the current HEAD with a specified ancestor branch or commit. This server is particularly useful for developers who want to automate the creation of detailed pull request descriptions without manually analyzing code changes."
cfdude,mac-shell-mcp,2,,"Mac Shell MCP Server enables secure execution of macOS terminal commands through ZSH shell with a built-in security system that categorizes commands as safe, requiring approval, or forbidden. It features a pre-configured whitelist of common commands, an approval workflow for potentially dangerous operations, and comprehensive command management tools. Written in TypeScript and designed to work with Roo Code and Claude Desktop, it can be installed locally or run via npx, making it ideal for AI assistants that need controlled access to the macOS terminal while maintaining security through command whitelisting and explicit approval mechanisms."
chaichungsang,mcp_supabase_self_host,0,,"This self-hosted MCP Supabase implementation provides a containerized setup for running the Model Context Protocol with a PostgreSQL database backend. The solution uses Docker Compose to orchestrate two services: a Supabase PostgreSQL database container and a Node.js container running the MCP server that connects directly to the database. The implementation allows users to maintain full control over their data by hosting the entire stack on their own infrastructure, with configurable database credentials and persistent storage through Docker volumes. It's particularly valuable for developers who need MCP functionality while keeping sensitive data within their own environment."
chaindead,telegram-mcp,27,161,"Telegram MCP server provides a bridge between AI assistants and the Telegram API, enabling access to user data, dialog management, and message handling capabilities. Developed by Bary Huang, this Go implementation supports retrieving account information, listing dialogs with unread filtering, accessing message history, sending draft messages, and marking conversations as read. The server uses the gotd/td library for Telegram API interactions and includes authentication workflows for secure access, making it particularly valuable for AI assistants that need to monitor, organize, and respond to Telegram communications."
champaya,note-mcp,1,,"Note-MCP-Server provides a bridge between AI assistants and the note.com API, enabling content discovery and retrieval through conversation. The implementation offers three main tools: searching articles by keyword, retrieving detailed article information, and listing articles by specific users. Built with TypeScript using the Model Context Protocol SDK, it handles API responses and error management while maintaining a clean interface to the note.com platform. This server is particularly valuable for users who want to access note.com content directly through AI assistants without switching contexts."
champierre,image-mcp-server,5,,"Server implementation that enables AI assistants to analyze images using GPT-4-turbo's vision capabilities. Built with TypeScript and the OpenAI API, it provides a standardized interface for image analysis tasks through the MCP protocol, making it valuable for applications that need to extract information, generate descriptions, or answer questions about visual content."
changjunpark,mcp-qdrant-server-with-qdrant-db,1,,"MCP-Qdrant Server provides a vector database integration for AI assistants, combining a Qdrant vector database with a specialized server that enables knowledge storage and retrieval. The implementation uses Docker containers to run both the Qdrant database and the MCP server, with the server utilizing the sentence-transformers embedding model to convert natural language into vector representations. It exposes two primary tools: one for storing code snippets with natural language descriptions, and another for searching the knowledge base using semantic queries. This setup is particularly useful for AI assistants that need to maintain persistent memory of code examples and technical knowledge across conversations."
chanmeng666,server-google-jobs,7,,"This MCP server for Google Jobs search, developed by Chan Meng, provides a standardized interface for querying job listings via the Serp API. Built with TypeScript and leveraging the MCP SDK, it offers a streamlined way to access Google's job search functionality programmatically. The server is designed as a command-line tool, making it easy to integrate into various workflows and applications. By abstracting the complexities of job search queries into an MCP interface, it enables AI systems and developers to efficiently retrieve and process job listing data. This implementation is particularly useful for applications involving career guidance, labor market analysis, or automated job matching systems."
chanmeng666,server-google-news,38,,"This Google News MCP server, developed by Chan Meng, provides a streamlined interface for accessing Google News search results via the SerpAPI. Built with TypeScript and leveraging the MCP SDK, it offers tools to query and retrieve up-to-date news articles, headlines, and related information. By abstracting the complexities of SerpAPI interactions into a standardized MCP interface, it enables AI systems to easily incorporate current news data into their workflows. This implementation is particularly useful for applications involving news aggregation, trend analysis, and information retrieval, facilitating use cases such as personalized news feeds, media monitoring, and real-time event tracking."
HEAD,modelcontextprotocol,6,904,"Chargebee empowers businesses of all sizes to scale revenue with a complete suite of solutions, including subscription management, recurring billing, pricing and payment optimization, revenue recognition, collections, and customer retention.

This MCP Server connects AI agents to Chargebee platform."
charles-adedotun,lilith-shell,0,,"Lilith-Shell is an MCP server that enables AI assistants to securely execute terminal commands through a standardized interface. Built by Charles Adedotun, it implements the Model Context Protocol to provide a single powerful tool for executing shell commands with configurable working directories and timeout protection. The implementation uses asyncio and the MCP server library to handle command execution requests, capturing both stdout and stderr output along with exit codes. It includes comprehensive error handling for timeouts and invalid commands, making it particularly valuable for AI assistants that need to perform system operations, file management, or run development tools without leaving the conversation interface."
chase-bullock,python-jira-mcp,0,,"This Python-based MCP server implementation integrates with the Jira API, allowing AI models to interact with Jira through standardized tools. It provides functionality for JQL searches and retrieving issue details, making it useful for AI-assisted project management and issue tracking workflows. The server uses the stdio transport mechanism for communication and supports environment-based configuration for easy setup and deployment."
chatmcp,mcp-server-router,1,19048,"MCP Server Router provides a proxy for connecting to remote MCP servers, enabling clients like Claude Desktop to access tools hosted on external servers. Developed by chatmcp, this implementation creates a bridge between local MCP clients and remote servers by routing requests through a central service at router.mcp.so. The server authenticates with a server key obtained from MCP.so and handles tool listing and execution requests, forwarding them to the appropriate remote endpoints. Built with TypeScript using the Model Context Protocol SDK, it communicates over stdio and is particularly valuable for users who want to leverage remotely hosted tools without running their own MCP server infrastructure."
chatmol,molecule-mcp,66,,"The molecule-mcp server provides a bridge between AI assistants and molecular visualization software, enabling interaction with PyMol and ChimeraX through the Model Context Protocol. It offers tools to open visualization software, execute commands directly in these applications, and save images of molecular structures. The implementation uses FastMCP to expose these capabilities as tools that can be called programmatically, making it valuable for scientific workflows where molecular visualization and manipulation are needed without leaving the conversation interface."
egoist,raindrop-mcp,10,512,"Raindrop-mcp is an MCP server for Raindrop.io bookmarking service, sponsored by ChatWise. It provides tools for searching bookmarks, creating new bookmarks, and retrieving collections through a clean API that supports multiple transport mechanisms (stdio, SSE, and HTTP). The implementation authenticates with Raindrop.io using an access token and returns responses in YAML format, making it particularly useful for AI assistants that need to help users organize, retrieve, or create web bookmarks without directly interacting with the Raindrop.io interface."
cheerlights,cheerlights-mcp,1,,"CheerLights MCP Server provides a bridge between Claude and the CheerLights IoT ecosystem, allowing AI assistants to retrieve current colors and history from the global light synchronization project. Built by Hans Scharler, this Python implementation uses FastMCP and httpx to connect with the ThingSpeak API, offering tools to fetch the current CheerLights color and view recent color change history. The server parses timestamp data into readable formats and includes proper error handling, making it ideal for IoT enthusiasts who want to integrate CheerLights data directly into their AI conversations without leaving the interface."
cheffromspace,mcpcontrol,43,,"This Windows control server leverages nut.js and the Model Context Protocol to enable remote automation of Windows systems. Developed by an unnamed author, it provides a TypeScript-based interface for programmatically controlling mouse movements, keyboard input, and screen captures on Windows machines. The implementation uses Express for the server, Jimp and Sharp for image processing, and Clipboardy for clipboard access. It's designed for scenarios requiring remote Windows automation, such as automated testing, remote administration, or building AI-assisted Windows control systems that can interact with desktop applications via natural language commands."
chemiguel23,memorymesh,154,,"MemoryMesh, developed by CheMiguel23, is a local knowledge graph server that enables AI assistants like Claude to store, update, and recall structured information. It features dynamic schema-based tools, relationship modeling, and AI-aware interfaces for maintaining consistent data. Built on the Knowledge Graph Memory Server from MCP, MemoryMesh adds custom schemas, metadata expansion, and event tracking. It integrates seamlessly with Claude Desktop on macOS and Windows, facilitating natural language interactions for world-building and storytelling. While originally designed for text-based RPG scenarios, MemoryMesh is adaptable for social networks, organizational planning, or other structured data use cases requiring persistent information management and retrieval in AI-assisted creative and analytical tasks."
chenhunghan,mcp-k8s-lens,0,,"MCP-K8s-Lens provides a bridge between Claude and the Kubernetes Lens desktop application, enabling AI assistants to interact with and analyze Kubernetes clusters through automated UI interactions. Built by Hung-Han Chen, this implementation uses Playwright to control the Lens Desktop application, offering tools for taking screenshots of the interface and capturing console logs with filtering capabilities. The server runs on stdio transport for seamless integration with Claude Desktop, making it particularly valuable for DevOps engineers who need AI assistance with Kubernetes cluster management without leaving their conversation interface."
chenxilol,perplexity-mcp-go,4,,"Perplexity Search MCP Server provides a Go-based interface to the Perplexity AI search API, enabling large language models to perform real-time web searches with customizable parameters. The implementation supports multiple Perplexity models including Sonar Pro, Deep Research, and Reasoning variants, with options to filter results by recency, limit searches to specific domains, and control response characteristics like temperature and token count. Built with the mcp-go library, this server facilitates integration between Claude and other LLMs with Perplexity's search capabilities, making it valuable for applications requiring up-to-date information retrieval with citation support."
chew-z,researchmcp,1,,"ResearchMCP provides internet research capabilities through Perplexity AI's API, enabling AI assistants to retrieve up-to-date information on a wide range of topics. The server exposes a 'research' tool that accepts natural language queries, processes them through Perplexity's Sonar models, and returns comprehensive research reports with source citations. It features robust error handling with degraded mode operation, configurable retry mechanisms for network issues, and structured logging for better debugging. Particularly valuable for applications requiring factual, current information without leaving the conversation interface."
chiaoteni,mcp-github-helper,0,,"GitHub PR Helper is an MCP server implementation that enables AI assistants to interact with GitHub repositories through the GitHub CLI. It provides tools for creating pull requests and adding line-specific comments to PRs, handling authentication through either environment variables or existing GitHub CLI credentials. The server exposes these capabilities through both a REST API and an MCP interface, making it particularly valuable for developers who want to streamline their code review workflows and PR management directly from AI conversations."
chigwell,telegram-mcp,36,,"Telegram MCP Server provides a bridge between Claude and Telegram messaging, enabling direct interaction with Telegram chats without leaving the conversation interface. Built using Python, Telethon, and the MCP Python SDK, it exposes three core tools: retrieving chat lists, fetching messages from specific chats, and sending messages to contacts. The implementation authenticates with the Telegram API using credentials stored in environment variables and integrates seamlessly with Claude Desktop through a simple configuration. Particularly valuable for users who want to monitor or participate in Telegram conversations while working with Claude."
chikingsley,browser-tools-mcp,6,174848,"Browser Tools MCP provides web browsing capabilities for AI assistants through the @agentdeskai/browser-tools-mcp package. It runs as a Node.js application in a Docker container, configurable via smithery.yaml to adjust port settings and log levels. The implementation uses a non-root user for security and supports both standard and Server-Sent Events (SSE) communication modes. This tool enables AI models to interact with web content, making it valuable for workflows requiring web scraping, content analysis, or automated browsing tasks."
chriscarrollsmith,taskqueue-mcp,7,2481,"TaskQueue MCP Server provides a structured task management system for AI assistants, enabling them to break down complex projects into manageable tasks with progress tracking and user approval checkpoints. Developed by Christopher C. Smith, this TypeScript implementation uses the Model Context Protocol to expose tools for project planning, task creation, status updates, and completion approvals through both a server interface and companion CLI utility. The server supports multiple LLM providers (OpenAI, Google, Deepseek) for generating project plans and includes features like auto-approval, task recommendations, and detailed progress visualization. Ideal for collaborative workflows where AI assistants need to maintain structured progress on multi-step tasks with human oversight."
chrishayuk,mcp-code-sandbox,4,,"MCP Code Sandbox provides secure, isolated environments for executing Python code through multiple backend options including E2B and Firecracker microVMs. Built with a modular architecture, it offers tools for sandbox creation, code execution, file operations, package installation, and data visualization through chart generation. The implementation features an abstract interpreter interface that allows seamless switching between execution backends, robust error handling, and resource cleanup mechanisms. This server is particularly valuable for AI assistants that need to run untrusted code, test programming solutions, generate data visualizations, or interact with files in a controlled environment without security risks."
chris-june,mcp-server,0,,"Role-Context MCP Server enables AI assistants to maintain distinct expert personas through role-based context management. It provides tools for creating and managing specialized roles (like Marketing Expert or Songwriter), each with its own memory, tone, and domain expertise. The implementation features a memory management system with vector search capabilities for retrieving relevant context, real-time context switching based on triggers, and integration with OpenAI's GPT-4o-mini model. Particularly valuable for applications requiring consistent AI personalities across different domains without context bleed between roles."
chris-miaskowski,custom-gitlab-mcp-server,0,,"This custom GitLab MCP server provides integration with GitLab repositories, fixing schema validation issues present in the standard implementation. Built with Node.js and the Model Context Protocol SDK, it enables AI assistants to search repositories, manage files, create issues and merge requests, fork repositories, and create branches. The implementation uses Zod for robust schema validation and includes specific fixes for the search_repositories tool. It requires a GitLab Personal Access Token for authentication and can be configured to work with both gitlab.com and self-hosted GitLab instances."
christian561,gel-mcp-server,8,,"This MCP server implementation provides a bridge between LLM agents and Gel databases, enabling automated schema discovery, query validation, and execution of EdgeQL and TypeScript queries. Developed by Christian561, it leverages the Model Context Protocol SDK and Gel query builder to offer tools for describing database schemas, validating EdgeQL syntax, and executing queries. The server is designed for use cases requiring AI-assisted database interactions, such as automated data analysis, query generation, and database management tasks."
cremich,promptz-mcp,0,310,"Provides a bridge to the promptz.dev platform, enabling AI assistants to directly access and use prompts without manual copy-pasting. Built by Christian Bonzelet, this TypeScript server implements two primary tools for listing and retrieving prompts, reducing context switching for developers and content creators by seamlessly integrating the promptz.dev prompt library into AI workflows."
christianhinge,dicom-mcp,23,,"DICOM MCP Server enables AI assistants to interact with medical imaging systems through standard DICOM networking protocols. It provides tools for querying patient information, studies, series, and instances from DICOM servers, as well as extracting text from encapsulated PDF documents stored in DICOM format. Built on pynetdicom, the server supports multiple DICOM nodes, configurable calling AE titles, and various attribute presets for different query levels, making it particularly valuable for medical professionals and researchers who need to access and analyze medical imaging metadata without leaving their AI assistant conversation."
christophenglisch,keycloak-model-context-protocol,18,1011,"This Keycloak MCP server, developed by Christoph Englisch, provides a streamlined interface for managing Keycloak users and realms. It integrates with the Keycloak Admin Client to offer essential operations like user creation, deletion, and listing, as well as realm management. The implementation is designed for simplicity and ease of use, making it ideal for developers and administrators who need to automate Keycloak tasks or integrate Keycloak management into their workflows. It's particularly useful for scenarios involving user provisioning, access control, and identity management across multiple realms."
christophersutton,instantdb-mcp,0,,"An InstantDB MCP server that provides tools for querying and managing data through the InstantDB Admin SDK. Enables developers to interact with their InstantDB applications via a standardized interface, supporting operations like executing database queries, retrieving query results, and serving code examples across different usage contexts like admin access, CLI interactions, and data modeling."
appwrite,mcp,35,,"This MCP server provides a comprehensive interface to Appwrite's database functionality. Developed by Christy Jacob, it enables AI-assisted workflows to interact with Appwrite databases, collections, attributes, documents, and indexes. The server supports operations like creating and managing databases, defining collection schemas, performing CRUD operations on documents, and creating custom indexes. It's particularly useful for applications requiring flexible database management, complex data modeling, or integration with Appwrite's backend services."
chroma-core,chroma-mcp,86,17655,"Chroma MCP Server provides vector database integration for LLM applications, enabling AI models to create and manage collections of data with vector search capabilities. Built by Chroma Core, it supports multiple client types (ephemeral, persistent, HTTP, and cloud), offers comprehensive collection management tools, and enables document operations including adding, querying, and retrieving with advanced filtering options. The implementation integrates seamlessly with Claude Desktop through simple configuration options and supports environment variables for flexible deployment, making it ideal for workflows requiring memory capabilities such as knowledge bases and context-aware conversations."
qoxogus,spring-ai-chrome-mcp-server,2,,"Spring AI Chrome MCP Server provides a bridge between AI assistants and web browsers using Selenium WebDriver. This Java implementation leverages Spring Boot and Spring AI to expose Chrome browser automation capabilities as tools that can be called by AI models. The server sets up a WebDriverManager to handle Chrome driver installation automatically and exposes browser automation functionality through the ChromeToolService. It's particularly useful for AI assistants that need to perform web scraping, automated testing, or any task requiring direct browser interaction without requiring users to write complex browser automation code."
lxe,chrome-mcp,12,,"Chrome MCP Server provides fine-grained control over a Chrome browser instance through the Chrome DevTools Protocol (CDP). It enables AI assistants to navigate web pages, interact with elements, type text, and extract page content through a set of specialized tools. The server implements SSE transport for the Model Context Protocol and includes features like automatic handling of dynamic content, mutation tracking, and prevention of new window/tab openings. Particularly valuable for workflows requiring web automation, form filling, or content extraction directly within conversation interfaces."
chromewillow,greyhack-mcp-server,1,,"Grey Hack MCP Server provides a specialized toolkit for the Grey Hack game, enabling AI assistants to search GitHub for code examples, validate scripts against the game's API, generate common script templates, and transpile GreyScript to JavaScript. The implementation offers four main tools: searching GitHub repositories for Grey Hack code, validating scripts against official API documentation, generating templates for common game tasks like port scanning and password cracking, and transpiling between GreyScript and JavaScript. Built with TypeScript using the Model Context Protocol SDK, this server is particularly valuable for Grey Hack players who want to develop, validate, and discover scripts without leaving their AI assistant interface."
chromewillow,mcp-forge,0,,"MCP Forge is a powerful server generator for creating Model Context Protocol (MCP) servers with multiple template options including basic, web search, and database configurations. It provides utility functions for generating server templates, creating Cursor IDE integration configurations, and generating deployment instructions, making it easy to quickly bootstrap and configure new MCP servers with standardized structures and best practices."
chromindscan,chromia-mcp,1,,"This Chromia MCP server, developed by an unnamed author, enables AI assistants to interact with the Chromia blockchain and wallet for sending $CHR transactions. Built with TypeScript and leveraging libraries like @chromia/ft4 and @goat-sdk/wallet-chromia, it abstracts the complexities of blockchain interactions, allowing AI systems to easily incorporate cryptocurrency operations into their workflows. The server integrates with the OpenAI API for AI capabilities and uses environment variables for configuration. It's designed to be run as a local server, with setup instructions for integrating with Claude's desktop application. This implementation is particularly useful for developers and researchers exploring AI-assisted cryptocurrency management, enabling use cases like automated transactions, wallet monitoring, and blockchain-based decision making."
chronulusai,chronulus-mcp,50,7228,"The Chronulus MCP Server enables Claude to interact with Chronulus AI's forecasting and prediction agents, allowing users to analyze time series data and generate forecasts through natural language. Developed by Chronulus AI, this implementation is built using Python and integrates with the Chronulus API to provide specialized time series forecasting capabilities. The server can be deployed using pip, Docker, or uvx, and requires a Chronulus API key for authentication. It's particularly useful for users who need to perform time series analysis, generate predictions, and visualize forecasting data directly within their Claude conversations."
chrusic,todoist-mcp-server-extended,14,,"This extended Todoist MCP server implementation enhances task management capabilities by integrating with the Todoist API. Developed by Chrusic, it offers a range of tools for project, section, task, and label management. The server provides functionalities such as creating and updating projects, managing tasks with natural language processing, and handling personal labels. It is designed for users who need advanced Todoist features within the MCP ecosystem, making it particularly useful for AI assistants or applications requiring detailed task and project organization."
chuanmingliu,mcp-webresearch,10,,"MCP-WebResearch provides AI assistants with web browsing capabilities for conducting research through Google searches and webpage content extraction. Built with TypeScript using Playwright for browser automation and Turndown for HTML-to-Markdown conversion, it offers tools to search Google, visit webpages, and capture screenshots while handling common challenges like consent dialogs and bot detection. The implementation includes an agentic research prompt that guides assistants through iterative research workflows, making it particularly valuable for deep topic exploration, fact-checking, and information gathering directly within AI conversations."
chulanpro5,evm-mcp-server,0,,"EVM MCP Server provides a bridge to Ethereum Virtual Machine (EVM) compatible blockchains, enabling AI assistants to interact with blockchain networks like Binance Smart Chain. Built by Etheral, it offers tools for querying blockchain data including balances, transactions, and smart contracts, while also supporting token transfers and swaps through PancakeSwap integration. The server exposes both HTTP and stdio interfaces, implements comprehensive resources for blockchain exploration, and includes wallet management capabilities—making it valuable for blockchain analysis, token transfers, and DeFi interactions without leaving the conversation context."
chy168,google-chat-mcp-server,5,,"A lightweight MCP server for Google Chat integration that enables programmatic access to Google Chat spaces and messages. Developed by Zz Chen, this implementation provides OAuth2-based authentication and tools for listing chat spaces and retrieving messages with flexible date filtering. Useful for developers needing automated interactions with Google Chat data."
cicatriiz,healthcare-mcp-public,0,,"Healthcare MCP Server provides AI assistants with access to medical information through five specialized tools: FDA drug information lookup, PubMed research search, Health.gov topic retrieval, clinical trials search, and ICD-10 code lookup. The implementation features efficient caching to reduce API calls, anonymous usage tracking, and supports both stdio mode for Cline integration and HTTP/SSE mode for web clients. Built with FastMCP and deployed via Docker or Railway, it's particularly valuable for healthcare professionals, researchers, and patients who need to access evidence-based medical information without leaving their AI assistant interface."
circleci-public,mcp-server-circleci,12,1407,"A specialized server implementation for the Model Context Protocol (MCP) designed to integrate with CircleCI's development workflow. This project serves as a bridge between CircleCI's infrastructure and the Model Context Protocol, enabling enhanced AI-powered development experiences."
ckreiling,mcp-server-docker,293,,"This MCP server, developed by ckreiling, provides seamless integration with Docker containers. It implements a Python-based interface for managing containers, images, networks, and volumes through the Docker SDK. The server exposes tools for common Docker operations like creating, running, and removing containers, as well as fetching logs and stats. By leveraging natural language processing, it enables AI assistants to easily compose and manage Docker deployments through conversational interactions. The implementation is particularly useful for scenarios requiring dynamic container orchestration, such as deploying microservices, setting up development environments, or managing containerized applications through natural language commands to an AI assistant. The server focuses on core Docker functionality while prioritizing safety by restricting access to sensitive options."
ckz,edu_data_mcp_server,0,,"An MCP server that provides access to the Urban Institute's Education Data API, enabling AI assistants like Claude to retrieve and analyze educational statistics. The server exposes tools for fetching detailed and aggregated education data across various levels (schools, districts, universities), sources (CCD, IPEDS, CRDC), and topics (enrollment, finance, assessment). Built with TypeScript and the MCP SDK, it simplifies complex data retrieval operations through structured parameters and filters, making it valuable for educational research, policy analysis, and data visualization without requiring specialized API knowledge."
ckz,flux-img-mcp,1,,"This MCP server provides image generation capabilities using the Flux Schnell model on Replicate. Developed by ckz, it offers a simple interface for generating images based on text prompts. The server is built with TypeScript and integrates with the Model Context Protocol SDK. It's designed for use cases requiring AI-powered image creation, such as content generation, visual brainstorming, or enhancing creative workflows."
ckz,flux-schnell-mcp,3,,"Flux-Schnell-MCP provides a bridge between Claude and Replicate's flux-schnell image generation model. This TypeScript implementation creates an MCP server that exposes a single 'generate_image' tool, which accepts text prompts and communicates with the Replicate API to generate images. The server runs on stdio transport for compatibility with Claude Desktop, includes error handling for API failures, and requires a Replicate API token for authentication. It's particularly useful for generating images directly within conversations without switching contexts."
mcherukara,claude-deep-research,0,,"Claude Deep Research is an MCP server that extends AI assistants' capabilities by providing unified access to web and academic information through DuckDuckGo and Semantic Scholar integrations. It enables Claude to search multiple sources, extract content from web pages, follow relevant links, and deliver structured research results with proper citations. The implementation features a multi-stage research workflow that guides users through initial exploration, synthesis, visualization, follow-up research, and comprehensive analysis, making it particularly valuable for users needing thorough, well-organized information on complex topics."
djbuildit,claude-think-mcp,0,,"Claude Think MCP enables explicit step-by-step reasoning in Claude's responses by wrapping prompts with special thinking tags when users type 'think [question]' in Cursor chat. Built with Node.js and requiring no external dependencies, it provides a lightweight way to see Claude's full analytical process, making it especially valuable for complex problem-solving, mathematical proofs, and algorithm analysis tasks where understanding the reasoning chain is important."
clay-inc,clay-mcp,0,,"A Model Context Protocol (MCP) server for Clay (https://clay.earth). Search your email, calendar, Twitter / X, Linkedin, iMessage, Facebook, and WhatsApp contacts. Take notes, set reminders, and more.

Examples

    ""Who in my network works at Google as a Product Manager?""
    ""Who is John Smith?""
    ""Add a new contact named Jane Doe, who is a Designer at Figma.""
    ""Save a note for John Smith: 'Follow up about the Q2 report.'""
    ""Create a group called 'Investors 2025.'"""
packages,agent-toolkit,1407,19741,"Clerk is a JavaScript SDK for authentication and user management that provides a comprehensive set of tools for implementing secure authentication flows in web applications. This repository contains the core Clerk packages and various framework integrations (React, Next.js, Remix, Express, Fastify) along with playground examples demonstrating implementation across different environments. The SDK supports features like user sign-in/sign-up, organization management, session handling, and authorization based on features and plans, making it particularly useful for applications requiring robust identity management with minimal setup."
yunqiqiliang,mcp-clickzetta-server,0,,"MCP ClickZetta Server provides a bridge between AI assistants and ClickZetta databases, enabling SQL query execution and data analysis through natural language interaction. The server exposes tools for reading data with SELECT queries, writing data (when explicitly allowed), managing tables, and maintaining a memo of discovered insights. Built with Python and the MCP protocol, it features SQL write operation detection for security, configurable logging, and optional tool exclusion. This implementation is particularly valuable for data analysts who need to query ClickZetta databases, explore schema information, and document insights without leaving their AI assistant interface."
cliffhall,puzzlebox,9,,"Puzzlebox is an MCP server implementation that hosts finite state machines (puzzles) as dynamic resources that clients can subscribe to and be updated when their state changes. It enables coordination between multiple agents working on long-horizon tasks by providing a shared state machine that can transition between discrete states through valid actions, with optional guards that can prevent transitions. The server exposes tools for adding puzzles, getting snapshots of puzzle states, performing actions on puzzles, and supports resource subscriptions so clients receive real-time updates when puzzle states change, making it particularly valuable for orchestrating multi-agent workflows where different teams need to operate within distinct project phases."
codeshark-net,climate-triage-mcp,1,,"The ClimateTriage MCP server connects AI assistants to the ClimateTriage API, enabling users to search for open source issues related to climate change and sustainability. Built with TypeScript and the FastMCP framework, this implementation provides structured access to climate project issues with filtering capabilities by category, programming language, and keywords. The server transforms API responses into well-formatted results that include detailed project information, issue descriptions, and direct links to GitHub repositories. It's particularly useful for developers looking to contribute to climate-focused open source projects, researchers tracking sustainability initiatives, or organizations wanting to engage with the climate tech ecosystem."
1595901624,crypto-mcp,3,,"This MCP server provides encryption, decryption, and hashing functionalities using the crypto-js library. Developed by Cloris, it offers a standardized interface for cryptographic operations, making it easier to integrate secure data handling into AI-assisted workflows. The server is particularly useful for applications requiring data protection, secure communication, or verification of data integrity."
turinhub,cf-mcp-server,0,,"CF-MCP-Server is a collection of Cloudflare Workers that provide AI-related API integrations through the Model Context Protocol. The implementation includes three specialized workers: mcp-image-generation for creating images using Cloudflare's AI models, mcp-jina-api for extracting content from URLs and performing web searches, and mcp-tavily-api for comprehensive web search and content extraction capabilities. Each worker is built using TypeScript and deployed on Cloudflare's edge network, making them highly performant and globally available. The implementation leverages Cloudflare's infrastructure to provide secure, scalable API access for AI assistants needing image generation and web search functionality."
cloudflare,mcp-server-cloudflare,1314,54926,"This Cloudflare MCP Server, developed by Cloudflare, provides a powerful interface for language models to interact with Cloudflare's API. It enables AI agents to perform a wide range of Cloudflare-specific tasks including managing KV stores, R2 storage, D1 databases, and Workers. The implementation distinguishes itself by offering deep integration with Cloudflare's unique services and infrastructure. By leveraging Cloudflare's global network, it ensures high-performance and low-latency operations. This tool is particularly powerful for AI-driven cloud management, serverless computing, and edge network optimization, enabling more sophisticated AI assistants that can directly manipulate Cloudflare resources."
cloudflare,workers-mcp,472,30322,"This MCP transport for Cloudflare Workers, developed by Cloudflare, enables seamless integration of MCP capabilities into serverless edge computing environments. Built with TypeScript and leveraging Cloudflare's Workers platform, it provides a standardized interface for deploying MCP-compatible services at the network edge. The implementation supports rapid development and deployment of AI-assisted applications, taking advantage of Cloudflare's global network for low-latency, scalable MCP services. It's particularly useful for developers looking to build AI-powered applications that require edge computing capabilities, such as real-time content processing, personalized user experiences, or distributed AI inference."
HEAD,butler,3,,
HEAD,hoover,3,,cf-butler has a one-to-one relationship with a Cloud Foundry foundation. cf-hoover acts as a registry and aggregator. It queries for and aggregates cf-butler instances' data. So cf-kaizen is the home for two MCP server implementations. Consumers have a choice to configure either multiple butler client configs targeting individual cf-butler instances. Or you configure a hoover client config targeting a cf-hoover instance.
cloudwerx-dev,diffugen,10,,"DiffuGen is an AI image generation MCP server that provides a flexible interface for creating images using multiple stable diffusion models like Flux, SDXL, and SD3. Developed by CloudWerx, it supports advanced configuration options including prompt engineering, model selection, and generation parameters, with robust error handling and logging. The implementation is designed to simplify AI image generation workflows by providing a standardized, configurable tool for developers and creative professionals."
burkestar,cloudzero-mcp,1,,"CloudZero MCP server enables direct interaction with cloud cost data through the CloudZero v2 API, allowing users to query billing information, dimensions, budgets, and insights directly from Claude Desktop. Developed by Dustin Burke, it implements several specialized tools for retrieving cost data within specified date ranges, analyzing billing dimensions, and accessing budget information. The server runs as a background process on the user's machine, making it ideal for financial teams needing to visualize and analyze cloud spending patterns, identify cost centers, and discover optimization opportunities without leaving their conversation interface."
cmann50,mcp-chrome-google-search,7,1722,"This MCP tool, developed by Chris Mann, enables Google search and webpage content extraction using the Chrome browser. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a bridge between AI models like Claude and web-based information sources. The implementation focuses on automating browser interactions to perform searches and extract content, making it easier for AI systems to access up-to-date web information. It's particularly useful for enhancing AI capabilities with real-time web data, enabling use cases like fact-checking, research assistance, and content generation that requires current online information."
HEAD,reddit-mcp,12,,"MCP Reddit is a server that enables AI assistants to extract content from Reddit discussions without requiring an API key. Developed by Andi Ellison, this Python implementation uses both API and HTML parsing methods to retrieve post metadata and comments from Reddit threads. The server exposes a single tool called 'reddit_extract' that accepts a Reddit URL and returns formatted discussion data including the post content, author information, and comments. It's particularly useful for research, content analysis, and staying updated on Reddit discussions while avoiding API rate limits and authentication requirements."
cnosuke,mcp-command-exec,1,,"MCP Command Executor is a secure server that enables safe remote command execution via the MCP protocol, with robust security controls like command allowlisting, direct command execution without shell invocation, and strict environment variable management. Created by cnosuke, it provides a controlled mechanism for executing predefined system commands with granular configuration options, making it useful for scenarios requiring restricted, auditable command execution across different environments."
cnosuke,mcp-meilisearch,0,,"This MCP server implementation provides a Go-based wrapper for Meilisearch, enabling large language models to access Meilisearch's search capabilities through the Model Context Protocol. Developed by cnosuke, it offers tools for index management, document operations, and search functionality, allowing AI assistants like Claude to perform powerful search operations against Meilisearch indexes. The lightweight server supports features such as health checks, creating indexes, adding documents, and executing complex searches with filtering and sorting options, making it ideal for applications requiring AI-assisted information retrieval from structured data."
cnych,seo-mcp,3,1212,"Backlinks MCP is a FastMCP service that retrieves backlink information for any domain using Ahrefs' data. Developed by cnych, it solves CAPTCHA challenges automatically using CapSolver's API to access Ahrefs' backlink checker, then caches signature tokens to minimize redundant requests. The server exposes a tool that returns detailed backlink data including anchor text, domain rating, and URL information. This implementation is particularly useful for SEO analysis, competitive research, and link building strategies where understanding a website's backlink profile is essential."
co-browser,browser-use-mcp-server,299,3232,"Browser Use MCP Server provides an async browser automation server using OpenAI's GPT-4o model. It enables remote browser tasks through a flexible MCP interface, allowing AI agents to navigate websites, perform actions, and extract content with configurable browser contexts and detailed task tracking."
sdi2200262,eclass-mcp-server,3,,"eClass MCP Server provides integration with the Open eClass platform, specifically tailored for UoA's SSO authentication system. Built with Python and the MCP protocol, it handles authentication, session management, and course access through a modular architecture that separates concerns like HTML parsing and course management. The server exposes tools for logging in, retrieving course lists, and managing authentication state, making it valuable for students and faculty who need to access eClass resources through AI assistants."
codebywaqas,mrconfluencelinker-mcp-server,0,,"MRConfluenceLinker-mcp-server provides a bridge between GitLab merge requests and Confluence documentation, enabling AI assistants to fetch, analyze, and document code changes. The server offers tools to retrieve merge request details, perform code analysis (including file type breakdowns and change statistics), and automatically generate structured documentation in Confluence pages. Built with comprehensive error handling and detailed logging, it's particularly valuable for development teams who want to maintain up-to-date documentation of their code changes without leaving their conversation interface."
fkesheh,code-context-mcp,4,,"Code Context MCP server that provides semantic code search and understanding capabilities by cloning git repositories, splitting code into semantic chunks, and generating embeddings using HuggingFace transformers. Built with TypeScript and SQLite, it features intelligent code splitting based on file types, vector similarity search, and keyword filtering. Particularly valuable for developers who want to search and understand large codebases through natural language queries without leaving their AI assistant interface."
codefriar,sf-mcp,24,333,"SF-MCP is a Node.js server that exposes Salesforce CLI functionality through the Model Context Protocol, allowing AI assistants to interact with Salesforce orgs. Developed by Kevin Poorman, it dynamically discovers and registers all available SF CLI commands as MCP tools, supports project-specific command execution through configurable roots, and includes caching mechanisms for improved performance. The implementation handles contextual command execution within Salesforce project directories, making it particularly valuable for developers and administrators who need to perform Salesforce operations like querying data, deploying code, or managing orgs through AI assistants."
yy1588133,code-merge-mcp,8,,"Code-merge-mcp is an MCP server that enables AI assistants to analyze and merge code from multiple files in a project. Built with Node.js and the official MCP SDK, it provides tools for retrieving file trees, merging content from multiple files with optional compression, and analyzing code metrics like line counts and function counts. The implementation handles file filtering through .gitignore rules and custom blacklists, while efficiently processing both individual files and entire directories. This server is particularly useful for code review workflows, project analysis, and providing AI assistants with comprehensive context about codebases without requiring them to process each file individually."
codergamester,mcp-unity,363,,"MCP Unity currently provides the following tools:

execute_menu_item: Executes Unity menu items (functions tagged with the MenuItem attribute)
select_object: Selects game objects in the Unity hierarchy
package_manager: Installs, removes, and updates packages in the Unity Package Manager
run_tests: Runs tests using the Unity Test Runner
notify_message: Displays messages in the Unity Editor
MCP Unity currently provides the following resources:

get_menu_items: Retrieves a list of all available menu items in the Unity Editor to facilitate execute_menu_item tool
get_hierarchy: Retrieves a list of all game objects in the Unity hierarchy
get_console_logs: Retrieves a list of all logs from the Unity console
get_packages: Retrieves information about installed and available packages from the Unity Package Manager
get_assets: Retrieves information about assets in the Unity Asset Database"
coderjun,shaka-packager-mcp-server,1,,"Shaka Packager MCP Server provides a bridge between AI assistants and Google's Shaka Packager media processing tool, enabling video analysis, transcoding, and packaging operations through a standardized interface. Developed by Jun Heider, this Python implementation handles file path translation between Docker and host environments, offers robust error handling with structured responses, and includes pre-configured prompts for common operations like MP4 to TS conversion, VOD/live streaming packaging, content encryption, and ad insertion. The server is particularly useful for media workflow automation, streaming content preparation, and video format conversion tasks without requiring direct command-line interaction with Shaka Packager."
code-yeongyu,perplexity-advanced-mcp,19,2534,"Perplexity Advanced MCP provides a flexible interface for AI assistants to interact with both Perplexity and OpenRouter APIs, supporting simple queries and complex file attachments. Built by YeonGyu Kim, it offers a command-line interface that accepts API keys for either service through a simple configuration schema, making it easy to switch between providers. The implementation is containerized with Docker for easy deployment and uses the uv package manager for dependency management. It's particularly valuable for workflows requiring advanced search capabilities or when working with document-based queries that need file context."
codifyag,mcp-servers,3,,"MCP Server for Harvest time tracking provides a standardized interface to the Harvest API, enabling seamless integration with MCP clients for time management operations. Developed by Codify AG, this implementation wraps Harvest's API endpoints for time entries, clients, projects, and reports into MCP-compatible tools that handle authentication, request formatting, and error handling. The server supports comprehensive time tracking workflows including creating, updating, and deleting time entries, managing clients and projects, and generating time reports - making it ideal for teams that need to integrate Harvest time tracking into their AI-assisted workflows."
coding-solo,godot-mcp,277,,"A Model Context Protocol (MCP) implementation for the Godot game engine, allowing game developers to integrate AI capabilities into their Godot projects."
codyde,mcp-file-tool,0,,"This MCP server implementation provides file system operations through a standardized interface. Built using the Model Context Protocol SDK, it offers tools for reading, creating, and listing files on the local file system. The server includes features like performance monitoring through Sentry integration and communicates via stdin/stdout using the MCP protocol, making it suitable for AI models to perform file operations in a controlled manner."
codyde,mcp-firecrawl-tool,0,,This MCP server provides tools for crawling websites and translating content into model context using the Firecrawl API. It offers two main functionalities: scraping websites in various formats and extracting structured data based on custom schemas. The implementation integrates with Sentry for error tracking and is designed to enhance AI-assisted workflows that require web data extraction and processing.
codyde,mcp-sentry-ts,9,,"This MCP server implementation provides a robust integration with the Sentry error tracking platform. Developed using TypeScript, it offers tools for managing projects, analyzing issues, retrieving event details, and listing error events and replays. The server leverages Sentry's API to enable comprehensive error monitoring and debugging capabilities. It's designed for use cases requiring detailed error analysis, project management, and user session replay within software development and operations environments."
cohnen,mcp-google-ads,41,,"This MCP server implementation provides integration with Google Ads API, enabling AI assistants to access and manipulate advertising campaign data directly within conversations. The server appears to have encountered an error during setup, indicating it may be in development or experiencing configuration issues with the repository 'cohnen/mcp-google-ads'. When functioning properly, it would likely allow for campaign management, performance analysis, and optimization of Google Ads accounts without leaving the conversation interface."
zhangzhongnan928,mcp-coinbase-commerce,0,,"MCP Coinbase Commerce server enables AI assistants to generate and manage cryptocurrency payment links through the Coinbase Commerce API. The implementation provides two main tools: create-charge for generating payment links with customizable amounts and currencies, and get-charge for retrieving details of existing payments including their status and transaction history. Built with TypeScript and the MCP SDK, it securely handles API authentication and error states while providing a standardized interface for payment processing. This server is particularly valuable for businesses and developers who want to accept cryptocurrency payments through conversational AI without manually configuring the Coinbase Commerce API."
matthewlaw1,near-intents-mcp-agentkit,3,,"This MCP server, developed by Coinbase, provides AI agent and task management capabilities using the CrewAI framework. Built with Python and leveraging the OpenAI API, it offers tools for creating agents with specific roles and goals, defining tasks, and orchestrating multi-agent workflows. The implementation focuses on flexibility and ease of use, allowing for the creation of diverse AI agent teams to tackle complex tasks. It's particularly useful for developers and researchers working on collaborative AI systems, enabling use cases such as automated research, data analysis, and problem-solving across various domains without extensive AI infrastructure setup."
coinpaprika,dexpaprika-mcp,2,552,"DexPaprika MCP Server provides access to decentralized exchange (DEX) data across multiple blockchain networks through a standardized interface. Developed by CoinPaprika, this implementation offers tools for querying network information, DEX listings, liquidity pool metrics, token details, and price analytics without requiring API keys. The server handles rate limiting gracefully and formats all responses as structured JSON, making it ideal for AI assistants that need to analyze cryptocurrency market data, compare liquidity pools, or track token performance across different blockchain ecosystems."
coleam00,mcp-mem0,90,,"MCP-Mem0 is a server implementation that integrates Mem0's long-term memory capabilities with AI agents through the Model Context Protocol. Developed by Cole Medin, it provides three essential memory management tools: storing information with semantic indexing, retrieving all stored memories, and finding relevant memories using semantic search. The server supports multiple LLM providers (OpenAI, OpenRouter, Ollama) and uses PostgreSQL for vector storage, making it particularly valuable for applications requiring persistent memory across conversations, such as personal assistants, knowledge management systems, or any AI agent that needs to recall past interactions and information."
colesmcintosh,numpy-mcp,1,,"This MCP server implementation provides NumPy-based mathematical operations and statistical analysis tools. It offers functions for matrix multiplication, eigendecomposition, polynomial fitting, and basic statistical measures. Developed using FastMCP, it's designed for AI assistants requiring advanced numerical computations, data analysis, and linear algebra operations in Python environments."
colygon,zkpmcp,6,,"zkMCP provides a Model Context Protocol server for zero-knowledge proofs using circom, enabling AI assistants to build circuits, perform trusted setup, generate proofs, and verify proofs without revealing sensitive data. Implemented in TypeScript, the server executes shell scripts that interact with circom and snarkjs, exposing four standardized tools through the MCP SDK: building circuits from Circom files, performing trusted setup, generating proofs, and verifying proofs. The repository includes a practical age verification example that demonstrates how users can prove they meet age requirements without revealing their actual birth date, showcasing the privacy benefits of zero-knowledge proofs for real-world applications."
conechoai,openai-websearch-mcp,34,28685,"The OpenAI WebSearch MCP Server provides AI assistants with access to real-time web search capabilities through OpenAI's websearch functionality. Developed by ConechoAI, this Python-based implementation allows Claude and other AI assistants to search the web during conversations, retrieving up-to-date information not available in their training data. The server supports configurable search context sizes and user location parameters, making it particularly valuable for answering questions about current events, retrieving recent information, or accessing specialized knowledge that may be outside an assistant's knowledge cutoff. It can be easily installed via pip or uv and configured for use with Claude.app or Zed editor."
conechoai,time-mcp-local,1,5658,"This MCP server provides time and timezone conversion capabilities, enabling LLMs to access current time information and perform timezone conversions using IANA timezone names. It features automatic system timezone detection and offers tools for getting current time in specific timezones and converting times between different timezones. The server is designed for integration with AI assistants and applications requiring accurate and localized time-based functionalities."
bootcamptoprod,spring-boot-ai-confluence-mcp-server,1,,"A Spring Boot AI-powered MCP server that enables seamless interaction with Confluence Cloud. This implementation provides tools for managing Confluence spaces and documents, including listing spaces, counting documents, creating new content, and extracting document metadata and history. Built with Spring AI's tool callback framework, it securely connects to Confluence using API token authentication and exposes a set of well-defined operations that AI assistants can leverage to work with organizational knowledge stored in Confluence. Ideal for enterprise use cases where AI needs to access, create, or analyze documentation in Confluence workspaces."
mgsrevolver,consolespy,7,,"ConsoleSpy is an MCP server implementation that captures browser console logs and makes them available in the Cursor IDE. It consists of a server that captures logs, an MCP server that interfaces with Cursor, and a browser extension for sending logs. The tool supports both automatic and manual logging, provides a web interface for viewing logs, and offers easy setup and configuration for seamless integration into development workflows."
f-inc,containerinc-mcp,7,746,"@container-inc/mcp enables seamless deployment of applications to Container Inc.'s platform directly from code editors. Built by Founders Inc., this TypeScript-based server implementation uses GitHub authentication to manage repository creation, Docker image publishing, and code deployment. It features a three-step workflow: authenticating with GitHub, setting up Git repositories, and initiating containerized deployments. The server stands out by abstracting away complex deployment processes through simple editor commands, making it particularly valuable for developers looking to quickly deploy Dockerized applications without leaving their development environment."
viveksingh-ctrl,mcp-contentstack,1,,"This MCP server implementation provides a bridge to Contentstack's BrandKit product, enabling AI assistants to manage knowledge vault content. It offers CRUD operations for adding, updating, deleting, and searching content in the knowledge vault through a FastMCP server with authenticated API endpoints. The implementation requires environment variables for authentication tokens and brand kit UID, making it suitable for content management workflows that need to programmatically interact with Contentstack's knowledge vault system."
context-hub,generator,62,,"Context Generator is a PHP-based tool for creating structured documentation from various sources including files, GitHub repositories, Git diffs, and URLs. It features a modular architecture with a powerful configuration system that supports imports, variables, and custom modifiers to transform content. The implementation includes an MCP server component that exposes prompts and tools for AI assistants to interact with the filesystem, retrieve project structure, and execute custom commands. Particularly useful for generating comprehensive code documentation, analyzing changes in projects, and providing context for AI-assisted development workflows."
paulotaylor,voyp-mcp,8,232,"This MCP server, developed by Control Space BV, provides integration with the VOYP API for call automation and assistance. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for interacting with VOYP's call center and conversational AI capabilities. The implementation focuses on providing a standardized interface for AI-powered call handling, enabling use cases such as automated customer service, call routing, and intelligent voice response systems. By connecting AI models with telephony systems, this server allows for sophisticated call automation scenarios, enhancing efficiency and customer experience in call center environments."
cookey-monster,ebaymcpserver,1,,"The server provides a single tool:

list_auction: Scan ebay for auctions. This tool is helpful for finding auctions on ebay.
Required ""query"" argument for the search query
Optional ""ammount"" argument for ammount of results
defaults to 0
Returns result from Ebay's REST API"
uh-joan,cortellis-mcp-server,1,1518,"MCP server for Cortellis drug database search and ontology exploration, enabling AI assistants to query pharmaceutical data through a standardized interface. Developed by Joan Saez-Pons, it provides two main tools: search_drugs for finding medications based on criteria like company, indication, phase, or technology; and explore_ontology for discovering taxonomy terms within the Cortellis database. The implementation authenticates with the Cortellis API using digest authentication and supports both stdio and HTTP transport methods, making it valuable for researchers and pharmaceutical professionals who need to access structured drug development information without leaving their AI assistant conversation."
cosmix,confluence-mcp,2,,"Confluence-MCP is a server implementation that provides AI assistants with direct access to Atlassian Confluence wikis. Built with TypeScript and Bun, it offers tools for retrieving, searching, creating, and updating Confluence pages through a clean interface. The server handles authentication via API tokens, transforms Confluence's storage format content into both plain text and markdown, and optimizes content for AI context windows. It includes robust error handling and content cleaning utilities, making it particularly valuable for teams who want to query and manage their knowledge base directly through AI assistants without switching contexts."
cosmix,jira-mcp,18,,"This JIRA MCP server, developed by Dimosthenis Kaponis, enables AI assistants to interact with JIRA data through the Model Context Protocol. Built with TypeScript and leveraging the JIRA REST API v3, it provides tools for searching issues, retrieving epic children, and getting detailed issue information. The implementation stands out by offering robust data cleaning features, including extraction of text from Atlassian Document Format and tracking of issue relationships. It's particularly useful for AI systems or applications needing to analyze JIRA data, automate project management tasks, or generate reports based on issue tracking information."
cosmix,linear-mcp,26,,"This Linear MCP server, developed by Dimosthenis Kaponis, integrates Linear's issue tracking system with MCP-compatible applications. Built with TypeScript and leveraging the Linear SDK, it provides tools for querying and searching Linear issues through a standardized interface. The implementation focuses on type-safety, error handling, and rate limit management. It's particularly useful for developers and project managers looking to incorporate Linear's issue tracking capabilities into their AI workflows, enabling use cases like automated issue analysis, task prioritization, and project status reporting without dealing directly with Linear's API complexities."
adairrr,cosmwasm-mcp,1,,"CosmWasm MCP Server provides a bridge between AI assistants and CosmWasm-based blockchains using cw-orchestrator. This Rust implementation enables programmatic interaction with smart contracts through a standardized interface, allowing for querying contract state, executing transactions, checking balances, and retrieving blockchain information. The server uses a stdio-based transport layer and supports configuration of chain connections through environment variables, making it particularly useful for AI agents that need to manage and interact with blockchain contracts without direct access to the underlying infrastructure."
cpage-pivotal,cloud-foundry-mcp,3,,"This Cloud Foundry MCP server, developed using Spring AI MCP, provides an LLM interface for interacting with Cloud Foundry foundations. It offers tools for managing applications, services, and resources within a Cloud Foundry environment through natural language commands. The implementation leverages the Cloud Foundry Java Client to execute operations, making it easier for AI models to perform complex Cloud Foundry tasks without deep knowledge of CF CLI commands or API endpoints. It's particularly useful for DevOps teams and developers who want to streamline Cloud Foundry management, enabling efficient application deployment, scaling, and monitoring through AI-assisted workflows."
cpage-pivotal,loot-mcp,0,,"This MCP server, developed by cpage-pivotal, provides a standardized interface for AI models to interact with Spring AI components. Built using Java and Spring Boot, it leverages the Spring AI BOM for dependency management. The implementation focuses on simplifying access to Spring AI functionalities, enabling AI assistants to utilize various AI-powered features within the Spring ecosystem. By connecting AI models with Spring AI capabilities, this server allows for sophisticated scenarios like natural language processing, machine learning model integration, and AI-driven data analysis. It's particularly useful for Java developers and organizations already using Spring frameworks who want to incorporate AI functionalities into their applications through a standardized MCP interface."
cpage-pivotal,app-advisor-mcp,2,,"This Cloud Foundry MCP Server, developed by @Albertoimpl, provides an LLM interface for interacting with Spring Application Advisor. Built using the Spring AI MCP project, it offers a streamlined way for AI models to access and utilize Spring Application Advisor's capabilities. The implementation focuses on simplifying the integration between LLMs and Spring's application analysis tools, making it easier for AI assistants to provide insights and recommendations for Spring-based applications. It's particularly useful for developers and DevOps teams looking to leverage AI for application optimization, troubleshooting, and best practice adherence in Cloud Foundry environments, without requiring deep knowledge of Spring Application Advisor's intricacies."
cpage-pivotal,time-mcp,3,,"This MCP server implementation provides an interface to the World Time API, enabling AI assistants to retrieve current time information. Developed by cpage-pivotal, it leverages the Spring AI MCP project to offer a streamlined way of accessing time data. The server is built using Java and Spring Boot, focusing on simplicity and ease of integration. It's particularly useful for AI applications that need to incorporate real-time clock information, such as scheduling assistants, time zone converters, or any system requiring accurate current time data from various locations globally."
cpbrad31,mcp_ga_511,0,,"This MCP server provides access to real-time traffic data from Georgia's 511 service. Developed by cpbrad31, it offers tools for retrieving information on traffic cameras, message signs, variable speed signs, traffic events, alerts, rest areas, ports of entry, and express lanes. The implementation is designed to integrate seamlessly with MCP clients like Claude Desktop, enabling easy access to Georgia's traffic information for various applications and analyses."
cploujoux,mcp-puppeteer,0,,"This MCP server provides browser automation capabilities using Puppeteer, enabling AI assistants to interact with web pages through a standardized interface. It offers tools for navigation, taking screenshots, clicking elements, filling forms, and executing JavaScript in a real browser environment. The implementation captures console logs and manages screenshots as resources, making them available to the client. Built with TypeScript and the MCP SDK, it supports both headless operation in Docker containers and visible browser windows when run directly, making it ideal for web testing, data extraction, and automated web interactions without requiring users to write browser automation code."
cpropster,linear-mcp-server,2,,"This MCP server implementation provides integration with Linear, a project management platform. It offers tools for managing teams, issues, projects, and cycles through Linear's API. The server enables operations like retrieving team information, searching issues, creating and updating tasks, and handling project data. It's particularly useful for AI-assisted project management workflows that require seamless interaction with Linear's features."
cr7258,elasticsearch-mcp-server,100,,"This Elasticsearch MCP server implementation provides a standardized interface for interacting with Elasticsearch clusters through natural language. Developed to bridge the gap between large language models and Elasticsearch, it offers tools for index operations, document searching, and cluster management. The server leverages Docker for easy deployment of a 3-node Elasticsearch cluster with Kibana, and integrates seamlessly with Claude Desktop via a simple configuration. It's particularly useful for developers and data analysts who want to explore and manipulate Elasticsearch data using conversational AI, enabling natural language queries for complex search operations and cluster insights without requiring in-depth Elasticsearch expertise."
cr7258,higress-ai-search-mcp-server,5,3590,"This MCP server implementation provides an AI search tool that enhances AI model responses with real-time search results from various engines through Higress ai-search. Developed by cr7258, it supports internet search (Google, Bing, Quark), academic search (Arxiv), and internal knowledge search. The server is configurable via environment variables and can be run using uvx or uv, making it suitable for both production deployments and local development."
crawlab-team,crawlab-mcp,2,,"This MCP server provides a bridge between AI applications and Crawlab, a web-based distributed crawler admin platform. Developed by the Crawlab team, it offers tools for spider and task management, file operations, and resource access. The server uses FastMCP and integrates with Crawlab's API, enabling AI-driven web scraping, task automation, and data extraction workflows."
crazyrabbitltc,mcp-brex-server,2,,"Brex MCP Server provides a secure bridge between AI agents and the Brex financial platform, enabling access to account information, transactions, expenses, and budget resources. Developed by Dennison Bertram, this TypeScript implementation exposes Brex API data through standardized resource handlers and tools following the MCP specification. The server implements read-only operations for sensitive financial resources, proper error handling, and rate limiting for API requests. It's particularly valuable for financial analysts using AI tools to retrieve and analyze Brex financial data without requiring direct API access, supporting use cases like expense analysis, budget monitoring, and transaction categorization."
crazyrabbitltc,mcp-expert-server,3,,This MCP server leverages the Anthropic Claude API to provide query generation and documentation assistance capabilities. It is built with TypeScript and uses the Model Context Protocol SDK for standardized interactions. The server can be run as a standalone application or integrated into other projects. It includes features for loading custom API documentation and environment variable configuration. This implementation is well-suited for developers looking to add AI-powered querying and documentation tools to their workflows or applications.
crazyrabbitltc,mcp-code-review-server,5,,"Code Review Server is an MCP implementation that enables AI assistants to perform automated code reviews using multiple LLM providers (OpenAI, Anthropic, Gemini). It integrates with Repomix to flatten repository structures for analysis, then processes the code through configurable LLM prompts focused on security, performance, quality, and maintainability. The server exposes tools for repository analysis and code review with structured output containing issues, strengths, and recommendations, making it valuable for developers seeking AI-powered code quality assessment without leaving their assistant interface."
crazyrabbitltc,mcp-coingecko-server,5,,"This CoinGecko MCP server, developed by Dennison Bertram and Claude + Anthropic, provides a standardized interface for accessing cryptocurrency data through the CoinGecko Pro API. Built with TypeScript and leveraging the MCP SDK, it offers tools for retrieving coin listings, historical price data, and OHLC candlestick information. The server implements caching and pagination to optimize API usage and performance. By abstracting CoinGecko API interactions into an MCP interface, it enables AI systems to easily incorporate up-to-date cryptocurrency data into their workflows. This implementation is particularly useful for applications involving crypto market analysis, portfolio tracking, and price monitoring, facilitating use cases such as automated trading strategies, investment research, and crypto-economic modeling."
crazyrabbitltc,mcp-etherscan-server,13,,"This MCP Etherscan server provides Ethereum blockchain data tools via Etherscan's API. Built with TypeScript and leveraging the ethers.js library, it offers features like balance checking, transaction history viewing, token transfer tracking, contract ABI fetching, gas price monitoring, and ENS name resolution. The server is designed to run on stdio, making it compatible with MCP clients like Claude Desktop. By abstracting Etherscan API interactions into standardized MCP tools, it enables AI systems to easily access and analyze Ethereum blockchain data. This implementation is particularly useful for applications requiring real-time Ethereum data, such as DeFi analytics, wallet monitoring, or smart contract development assistance."
crazyrabbitltc,mcp-ethers-server,5,,"This Ethereum wallet MCP server, implemented in TypeScript, provides a comprehensive interface for interacting with Ethereum networks and smart contracts. It leverages the ethers.js library to offer a wide range of blockchain operations, including balance queries, transaction management, gas price estimation, and ENS resolution. The server supports multiple networks and custom RPC endpoints, making it versatile for various Ethereum ecosystems. It stands out by providing a clean API that abstracts away much of the complexity of blockchain interactions, making it ideal for AI assistants, DApps, or any application requiring programmatic access to Ethereum functionality. Use cases include automated portfolio management, smart contract deployment and interaction, and blockchain data analysis."
crazyrabbitltc,mcp-morpho-server,0,463,"This MCP server, developed by crazyrabbitLTC, provides a bridge to the Morpho DeFi protocol's GraphQL API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for querying market data, vaults, positions, and historical APY information. The implementation focuses on data validation, error handling, and comprehensive pagination options. It's particularly useful for AI agents and applications needing to analyze or interact with Morpho's lending markets, enabling use cases such as portfolio management, risk assessment, and yield optimization without directly dealing with the complexities of Morpho's GraphQL API."
crazyrabbitltc,mpc-tally-api-server,4,,"This MCP Tally API server, developed using TypeScript, provides a standardized interface for accessing DAO governance data through the Tally API. Built with the Model Context Protocol SDK and leveraging GraphQL, it enables AI agents to query and analyze information about DAOs, proposals, and voting activities. The server is designed for easy deployment and configuration, with environment variable management and comprehensive error handling. By abstracting the complexities of the Tally API into an MCP interface, it facilitates use cases such as DAO analytics, governance monitoring, and automated reporting on decentralized decision-making processes. This implementation is particularly valuable for researchers, DAO participants, and developers building AI-powered tools for decentralized governance analysis."
crazyrabbitltc,mcp-twitter-server,12,759,"This Twitter MCP server, developed by Dennison Bertram, enables Large Language Models (LLMs) to interact with Twitter (X) through the Model Context Protocol. Built with TypeScript and leveraging the Twitter API v2, it provides tools for posting tweets, searching tweets, and replying to tweets. The implementation stands out by offering a straightforward setup process and integration with Claude Desktop, making it accessible for users without extensive technical knowledge. It's particularly useful for AI assistants or applications needing to automate Twitter interactions, conduct social media research, or manage Twitter accounts programmatically, enabling tasks like sentiment analysis, trend monitoring, or automated customer engagement."
crazyrabbitltc,mcp-vibecoder,4,,"Vibe-Coder MCP Server implements a structured development workflow that guides LLMs through feature creation with a systematic approach. It provides tools for feature clarification through iterative questioning, automatic generation of PRDs and implementation plans based on gathered requirements, and phase-based development tracking with task management. The server stores documents both in-memory and in the file system, offering a hybrid storage solution that makes it particularly valuable for AI-assisted software development where maintaining context and organization throughout the development lifecycle is essential."
crewaiinc,enterprise-mcp-server,29,,"CrewAI Enterprise MCP Server provides a bridge to deployed CrewAI workflows, enabling AI assistants to kickoff crews and monitor their execution status. The server exposes two main tools: kickoff_crew for starting new crew tasks with custom inputs, and get_crew_status for checking the progress of running crews. Built with FastMCP, it communicates with the CrewAI Enterprise backend using environment variables for authentication and server URL configuration. This implementation is particularly valuable for workflows that benefit from CrewAI's agent collaboration capabilities without leaving the Claude Desktop interface, allowing seamless delegation of complex tasks to specialized agent teams."
crisschan,mcp-allure,1,,"MCP-Allure-Server provides a bridge between AI assistants and Allure test reports, enabling access to test execution data through a structured API. The server exposes a tool for parsing Allure report directories and extracting comprehensive test suite information including test cases, steps, statuses, and execution timestamps. Built with FastMCP, it transforms complex Allure JSON data into a well-organized hierarchical structure that preserves the relationships between test suites, test cases, and their execution details. This implementation is particularly valuable for development teams who need to analyze test results, track test execution metrics, or generate custom reports without leaving their AI assistant interface."
crisschan,mcp-repo2llm,3,,"mcp-repo2llm is a MCP server that transforms code repositories into LLM-friendly formats. A powerful tool that transforms code repositories into LLM-friendly formats, bridging the gap between traditional code bases and modern AI language models. This repo is based on RepoToTextForLLMs, which provides core functionality for converting repositories into LLM-readable formats.

"
cristip73,mcp-server-asana,0,1231,"MCP Server for Asana provides a bridge to the Asana API, enabling AI assistants to manage tasks, projects, workspaces, and comments directly within conversation interfaces. Built by cristip73, it offers over 30 tools for operations like searching tasks, creating projects, managing dependencies, and generating project summaries. The server handles authentication through personal access tokens, supports custom fields with various data types, and includes features for batch operations and project hierarchy visualization. Particularly valuable for project management workflows, it allows users to track progress, organize tasks, and collaborate on Asana projects without leaving their AI assistant interface."
cromwellian,hippycampus,8,,"Hippycampus is a LangChain-based MCP server that dynamically loads OpenAPI specifications to expose external APIs as tools for AI agents. Developed by Ray Cromwell, it bridges the gap between LangChain's structured agent capabilities and the MCP protocol, enabling seamless integration with Langflow for visual workflow creation. The server supports both CLI and SSE transport modes, automatically converts OpenAPI endpoints into structured tools, and handles authentication tokens for secure API access. Particularly useful for developers who want to quickly enable AI assistants to interact with existing REST APIs without writing custom tool implementations."
cryppadotta,scryfall-mcp,2,,"This MCP server, developed by cryppadotta, provides a standardized interface for interacting with the Scryfall Magic: The Gathering API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for card searches, retrieving card details, rulings, and pricing information. The implementation focuses on exposing Scryfall's comprehensive database through a consistent MCP interface, enabling AI models to perform complex card queries and game-related operations. By connecting AI assistants with Scryfall's extensive MTG data, this server facilitates sophisticated scenarios like deck building assistance, card market analysis, and rules clarification. It's particularly valuable for applications and AI systems aimed at enhancing Magic: The Gathering gameplay, collection management, and strategic analysis."
cryptoleek-team,awesome-solana-mcp,6,,"Solana Agent Kit MCP Server provides a standardized interface for Claude AI to interact with the Solana blockchain through custom actions. Built by cryptoleek, it extends the Solana Agent Kit with specialized tools for retrieving validator information, estimating priority fees, fetching transaction histories, and extracting security contact information from Solana programs. The implementation integrates with Helius API for blockchain data access and includes core Solana functionality for asset management, token operations, and network information, making it particularly valuable for users who need to perform blockchain operations within AI conversations."
cryptoleek-team,goat-mcp,0,,"GOAT-MCP is a Solana blockchain integration that enables AI assistants to interact with on-chain data and execute transactions through a Model Context Protocol server. It implements two key plugins: RugCheck for token security analysis (detecting potential scams and generating token reports) and TransactionHelper for retrieving transaction history using the Helius API. The implementation uses a standardized configuration approach with environment variables for wallet private keys and RPC provider URLs, making it particularly valuable for AI agents that need to perform secure Solana blockchain operations or analyze token safety."
cso1z,feishu-mcp,20,1401,"Feishu-MCP provides a bridge between AI assistants and Feishu (also known as Lark), ByteDance's workplace collaboration platform. Built by cso1z, this TypeScript implementation enables models to interact with Feishu's API, allowing for document retrieval, messaging, and other collaborative features directly within AI conversations. The server can be run either as a CLI application or HTTP server, with configuration handled through environment variables. It's particularly valuable for teams already using Feishu who want to integrate AI assistants into their existing workflow without switching contexts."
ctkadvisors,graphql-mcp,4,,"GraphQL MCP Server provides a bridge between Claude and any GraphQL API by dynamically generating MCP tools from a GraphQL schema. Built by CTK Advisors, it features automatic schema introspection, query execution with parameter validation, and optional mutation support with security controls. The server can be configured with environment variables to specify API endpoints, authentication tokens, and query whitelisting, making it ideal for accessing structured data from GraphQL APIs directly within Claude conversations without requiring manual query construction."
ctoouli,mcp-stock-market,0,,"MCP Stock Market provides real-time access to stock market data through the Alpha Vantage API. This TypeScript-based server exposes a single tool that retrieves daily stock prices, volume, and other metrics for any stock symbol. The implementation handles API authentication, request formatting, and response parsing with proper error handling, making it particularly valuable for financial analysis, investment research, and market monitoring without leaving the conversation interface. The server includes rate-limiting awareness for the Alpha Vantage free tier (25 calls/day, 5 calls/minute) and formats responses with human-readable currency formatting."
ctvidic,strava-mcp-server,2,,"This MCP server implementation provides integration with the Strava API, enabling access to fitness tracking data and activity information. Developed by Christopher Vidic, it utilizes FastAPI and the Model Context Protocol SDK to offer a bridge between AI assistants and Strava's extensive fitness ecosystem. The server is designed for use cases such as analyzing workout patterns, tracking athletic performance, and integrating fitness data into AI-powered health and wellness applications."
ctvidic,whoop-mcp-server,3,,"This MCP server implementation integrates with the Whoop API, providing a bridge for accessing Whoop fitness data. Built using FastAPI and uvicorn, it offers a streamlined way to retrieve and process Whoop metrics. The server is designed for developers looking to incorporate Whoop data into their applications, enabling use cases such as fitness tracking, performance analysis, and health monitoring."
libs,mcp-server,4070,3797,"This server enables LLMs to run Computer-Use Agent (CUA) workflows on Apple Silicon macOS. It provides asynchronous access to a virtual macOS sandbox environment using Apple’s Virtualization.framework, and supports clients like Cursor, Claude Desktop, and other MCP-compatible tools."
cuongdev,mcp-codepipeline-server,4,,"AWS CodePipeline MCP Server provides a standardized interface for interacting with AWS CodePipeline services, enabling AI assistants to manage and monitor CI/CD pipelines through natural language commands. Built by Cuong T Nguyen, the server exposes tools for listing pipelines, triggering executions, approving actions, and retrieving pipeline metrics, making complex DevOps workflows more accessible through conversational AI interactions."
cuongtl1992,mcp-dbs,16,399,"A TypeScript-based database server that provides a unified interface for connecting to multiple database systems (SQLite, PostgreSQL, SQL Server, and MongoDB). Built by cuongtl1992, this implementation offers flexible database interactions through a consistent API, supporting both server-sent events and standard I/O communication modes. Useful for AI assistants and applications that need to query, update, and explore database schemas across different database technologies."
michael-trullion,mcp-servers,0,,"A collection of MCP servers for Cursor IDE that provides AI assistants with access to various external services including Jira, GitHub, and PostgreSQL databases. Each server is implemented as a standalone TypeScript module that can be run independently, exposing domain-specific tools through the Model Context Protocol. The implementation includes a template-based architecture for creating new servers, comprehensive error handling, and environment-based configuration. These servers enable Cursor IDE users to interact with their development tools and data sources directly through AI conversations, making it valuable for developers who need to query issues, repositories, or database information without context switching."
ericlistin,sound-mcp,19,,"A lightweight MCP server that plays a sound effect after Cursor AI completes code generation. Uses the play-sound library to trigger a macOS system sound, providing audio feedback for developers during AI-assisted coding. Designed to enhance the coding experience by adding an auditory cue when code generation is complete."
cwahlfeldt,blender-mcp,7,,"This MCP server implementation provides a bridge between Claude and Blender, enabling AI-driven 3D modeling and animation. Developed using Python, it leverages the Blender Python API (bpy) to allow Claude to interact with Blender through natural language commands. The server is designed for use cases requiring AI assistance in 3D content creation, such as automated scene generation, model manipulation, or animation scripting within Blender."
cyanheads,atlas-mcp-server,125,,"ATLAS, developed by cyanheads, is a Model Context Protocol server that provides hierarchical task management capabilities to Large Language Models. It enables AI assistants to break down complex projects into manageable tasks, track progress, and maintain dependencies within an organized structure. The server implements rich content support, including markdown documentation, code snippets, and structured reasoning documentation. ATLAS stands out by offering a comprehensive task management system tailored for AI-driven project planning and execution. It is particularly useful for applications requiring sophisticated task organization, collaborative AI workflows, or any scenario where an AI system needs to manage and reason about complex, multi-step processes."
cyanheads,filesystem-mcp-server,1,40,"Filesystem MCP Server provides a secure interface for AI agents to interact with local filesystems through standardized tools. Developed by Casey Hand (@cyanheads), this TypeScript implementation offers essential file operations including reading, writing, updating, and managing directories with robust path resolution, error handling, and logging. The server maintains session state for relative path resolution and implements comprehensive security measures like path sanitization and validation. It's particularly useful for AI workflows requiring file manipulation, code generation, or document analysis while maintaining a clean separation between AI agents and the underlying filesystem."
cyanheads,git-mcp-server,34,,"This Git MCP server provides AI assistants with capabilities to interact with Git repositories. Developed as an open-source project, it integrates with the simple-git library to enable core Git operations like cloning, committing, and managing branches. The server exposes a standardized interface for Git interactions, abstracting the complexities of version control operations. By leveraging TypeScript and following modern JavaScript practices, it offers a robust and type-safe implementation. This server is particularly useful for developers and DevOps teams looking to incorporate AI-driven Git operations into their workflows, such as automated code reviews, commit analysis, or intelligent branching strategies."
cyanheads,github-mcp-server,3,,"GitHub MCP Server provides a robust interface for AI assistants to interact with GitHub repositories through the GitHub API. It enables operations like repository management, branch creation/deletion, issue tracking, pull request handling, file modifications, and release management - all with standardized error handling and rate limiting protection. Built with TypeScript and following a feature-oriented architecture, this server is ideal for automating GitHub workflows, code management tasks, and collaborative development processes without requiring direct API access."
cyanheads,mentor-mcp-server,21,,"This MCP server, developed by cyanheads, provides AI-powered mentorship capabilities through the Deepseek API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for code review, design critique, writing feedback, and idea brainstorming. The implementation focuses on delivering expert second opinions and actionable insights to enhance LLM agent performance. It's particularly useful for developers, designers, and content creators seeking AI-assisted feedback and improvement suggestions, enabling use cases such as code quality enhancement, UI/UX refinement, documentation improvement, and feature ideation without directly interacting with the Deepseek API."
cyanheads,ntfy-mcp-server,3,,"Ntfy-mcp-server provides a bridge between Claude and the ntfy.sh notification service, enabling AI assistants to send push notifications directly from conversations. Built by Casey Hand (@cyanheads), this TypeScript implementation offers a complete MCP server with a send_ntfy tool that supports all ntfy features including message priorities, tags, attachments, and action buttons. The server includes robust error handling, rate limiting, and security features like input sanitization, making it particularly valuable for workflows that require notification capabilities without leaving the conversation interface."
cyanheads,obsidian-mcp-server,55,3763,"This Obsidian MCP server, developed by cyanheads, enables AI models to interact with Obsidian vaults through a standardized interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for file operations, content search, and metadata management within Obsidian. The implementation features atomic operations, efficient query processing, and automatic timestamp handling. It's particularly useful for AI assistants and applications needing to manage knowledge bases in Obsidian, enabling use cases like note-taking, content organization, and information retrieval without dealing directly with Obsidian's API complexities."
cyanheads,toolkit-mcp-server,4,556,"This toolkit MCP server, developed by cyanheads, provides system utilities and tools for LLM agents. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers IP geolocation, network diagnostics, system monitoring, cryptographic operations, and QR code generation. The implementation focuses on providing a standardized interface for common system and network tasks, with features like intelligent caching and rate limiting. It's particularly useful for AI assistants and applications needing low-level system access, enabling use cases such as network troubleshooting, resource monitoring, and security operations without dealing directly with underlying system APIs."
cyberagiinc,devdocs,1201,,"🎯 Perfect For
🏢 Enterprise Software Developers
Skip weeks of reading documentation and dealing with technical debt. Implement ANY technology faster by letting DevDocs handle the heavy lifting of documentation understanding.

🕸️ Web Scrapers
Pull entire contents of websites with Smart Discovery of Child URLs up to level 5. Perfect for both internal and external website documentation with intelligent crawling.

👥 Development Teams
Leverage internal documentation with built-in MCP servers and Claude integration for intelligent data querying. Transform your team's knowledge base into an actionable resource.

🚀 Indie Hackers
DevDocs + VSCode(cline) + Your Idea = Ship products fast with ANY technology. No more getting stuck in documentation hell when building your next big thing."
cyberchitta,scrapling-fetch-mcp,12,5339,"Scrapling Fetch MCP enables AI assistants to access text content from websites protected by bot detection mechanisms, bridging the gap between what humans can view in browsers and what AIs can access. Built by cyberchitta, it provides two main tools: s-fetch-page for retrieving complete web pages with pagination support, and s-fetch-pattern for extracting specific content using regex patterns with surrounding context. The server offers three protection levels (basic, stealth, and max-stealth) to handle various degrees of bot detection, making it particularly valuable for retrieving documentation and reference materials from protected sites without requiring users to manually copy and paste content."
cybersecurityup,offensive-mcp-ai,3,,"Offensive-MCP-AI is a cybersecurity toolkit that provides AI assistants with access to penetration testing and security analysis capabilities. The implementation consists of four specialized servers: a payload generator for creating various attack payloads using tools like msfvenom and Sliver, a reconnaissance server for domain enumeration and DNS analysis, a shellcode builder for compiling and extracting code from binaries, and a Wazuh integration for security monitoring and response. Each server exposes its functionality through the MCP protocol, enabling AI systems to execute security testing commands, analyze alerts, and generate offensive security artifacts in a structured manner, making it particularly useful for red team operations, vulnerability assessment, and security education."
cyproxio,mcp-for-security,15,,"MCP for Security is a collection of server implementations that bridge popular security tools (Nmap, Masscan, SQLMap, and FFUF) with AI assistants through the MCP protocol. Developed by Cyprox, these TypeScript-based servers enable AI systems to execute network scanning, port discovery, SQL injection testing, and web fuzzing operations by spawning the respective security tools and capturing their output. Each implementation follows a consistent pattern of accepting tool-specific parameters, executing the underlying binary with appropriate arguments, and returning results in a standardized format, making them particularly valuable for security professionals who want to leverage AI assistants for penetration testing, vulnerability assessment, and security auditing tasks."
cyreslab-ai,exploitdb-mcp-server,3,,"A Model Context Protocol server developed by Cyreslab.ai that provides AI assistants with access to ExploitDB functionality for cybersecurity research. The server enables searching for security exploits by keywords, CVE IDs, or platforms, retrieving detailed information about specific exploits including their code, and tracking newly added vulnerabilities. It maintains a local SQLite database that can be automatically updated from the official ExploitDB repository, making it valuable for threat intelligence, vulnerability research, and security analysis without leaving the AI assistant conversation."
cyreslab-ai,shodan-mcp-server,1,,"The Shodan MCP server, developed by Cyreslab.ai, provides AI assistants with secure access to Shodan's extensive database of internet-connected devices and services through three primary tools: host information lookup, search functionality, and vulnerability information retrieval. The implementation features intelligent response sampling to reduce token usage, field selection for targeted data retrieval, and result summarization capabilities that distill large datasets into actionable intelligence. This server enhances cybersecurity research and threat intelligence workflows by enabling AI assistants to query detailed information about IP addresses, search for specific devices or services using various filters, and retrieve vulnerability details - all while maintaining efficient token usage through automatic response optimization."
d42me,mochi-flashcards-mcp-server,0,,"Mochi-Flashcards-MCP-Server provides a bridge between AI assistants and the Mochi Cards flashcard application, enabling flashcard management through natural language. Created by d42me, this server implementation exposes tools for listing decks, creating cards with markdown content and tags, retrieving card details, updating existing cards, and deleting cards via the Mochi API. The server handles authentication through API keys stored in environment variables and manages asynchronous HTTP requests with proper error handling, making it valuable for students and learners who want to create and manage their flashcards directly through AI assistants without switching contexts."
d6e,cratedocs-mcp,19,,"CrateDocs MCP is a Rust documentation server that enables AI assistants to look up, search, and retrieve documentation for Rust crates dynamically. Built by the d6e team, it provides tools for fetching crate details from docs.rs and crates.io, converting documentation to markdown, and supporting version-specific lookups. Useful for AI developers needing quick, programmatic access to Rust library information during code generation or technical assistance tasks."
da1y,mcp-server-elasticsearch,2,,"This Elasticsearch MCP server enables AI models to interact with Elasticsearch clusters, providing tools for managing indices and executing queries. Developed as an open-source project, it integrates with the @elastic/elasticsearch library to offer functionalities like searching, creating indices, listing indices, and indexing documents. The server is built with TypeScript and leverages the @modelcontextprotocol/sdk for MCP implementation. By abstracting Elasticsearch operations, it allows AI systems to easily incorporate powerful search and analytics capabilities into their workflows. This implementation is particularly useful for developers and data scientists working with large datasets, enabling use cases like intelligent data retrieval, automated index management, and AI-driven data analysis in Elasticsearch environments."
dablclub,polygon-mcp,3,176,"Polygon MCP Server provides onchain tools for Claude AI to interact with the Polygon PoS blockchain. It enables calling contract functions, checking ERC20 token balances, transferring tokens, and retrieving gas prices through a secure wallet connection using the user's seed phrase. Built with TypeScript and the viem library, it establishes a connection to the Polygon network and handles transaction signing, making it ideal for workflows requiring cryptocurrency management, smart contract interaction, or blockchain data retrieval without leaving the conversation interface."
daevmithran,credo-mcp-server,0,,"Credo MCP Server provides a bridge between Claude and the Credo decentralized identity framework, enabling AI assistants to resolve and interact with decentralized identifiers (DIDs) on the cheqd network. The implementation initializes a Credo agent with modules for DID resolution, AnonCreds verification, and cheqd network integration, exposing a 'resolve-did' tool that retrieves DID documents and their metadata. Built using TypeScript and the Model Context Protocol SDK, this server runs on stdio transport for seamless integration with Claude Desktop, making it particularly valuable for workflows involving decentralized identity verification and credential management without leaving the conversation interface."
dailydaniel,logseq-mcp,16,3220,"This MCP server, developed by Daniel Zholkovsky, provides integration with the LogSeq API for knowledge management and note-taking. Built with Python and leveraging libraries like Pydantic and Requests, it offers tools for interacting with LogSeq data and functionality. The implementation focuses on providing a standardized interface for AI agents to access and manipulate LogSeq content programmatically. It's particularly useful for developers and knowledge workers looking to automate LogSeq workflows, enabling use cases such as AI-assisted note-taking, automated knowledge graph analysis, and integration of LogSeq data with other tools and systems."
dainfernalcoder,perplexity-mcp,167,,"This MCP server, developed by DaInfernalCoder, leverages the Perplexity Sonar Pro API to provide AI-powered research assistance within the Cline development environment. Built with TypeScript and utilizing the Model Context Protocol SDK, it offers tools for general search queries, documentation retrieval, API discovery, and deprecated code analysis. The implementation focuses on enhancing developer productivity by integrating up-to-date information and code insights directly into the workflow. It's particularly useful for developers seeking real-time assistance with documentation, API integration, and code modernization, enabling use cases such as efficient library adoption, API evaluation, and codebase maintenance without leaving their development environment."
dakrin,mcp-gemini-server,3,,"Gemini MCP Server enables Claude Desktop to interact with Google's Gemini 2.5 Pro Experimental AI model through a TypeScript implementation of the Model Context Protocol. The server provides two main tools: generateWithGemini for content generation with customizable parameters like temperature and token limits, and getModelInfo for retrieving model capabilities. It features Google Search integration for grounding responses in factual information, secure API key handling through environment variables, detailed token usage reporting, and comprehensive error handling with response caching to local files for verification. Ideal for users wanting to leverage Gemini's capabilities within Claude's interface."
daltonnyx,userful-mcps,1,,"The Useful MCPs repository provides two specialized MCP servers for document processing and YouTube content extraction. The docx_replace_mcp server enables template-based document generation with tools for replacing placeholders, managing conditional blocks, and converting DOCX files to PDF. The ytdlp_mcp server leverages yt-dlp to extract chapters and subtitles from YouTube videos, with advanced filtering capabilities for specific time ranges. Both implementations are designed for seamless integration with AI assistants, making them valuable for workflows requiring document automation or YouTube content analysis without manual intervention."
damonxue,mcp-ossinsight,13,,"An MCP server based on OSSInsight.io, providing data analysis for GitHub individuals, organizations, and repositories, as well as in-depth insights into the open source ecosystem."
damus-io,nostrdb-mcp,5,1458,"This MCP server, developed by William Casarin, provides a bridge between Language Models and the nostrdb command-line tool, enabling local Nostr queries. Built with JavaScript and leveraging the Model Context Protocol SDK, it offers tools for retrieving statistics and querying the NDB (Nostr Database). The implementation focuses on integrating with Notedeck, a note-taking application, and uses its default database directory. By connecting AI models with Nostr data, this server allows for sophisticated querying scenarios, enhancing the ability to search and analyze Nostr notes. It's particularly useful for applications and AI assistants that require access to local Nostr data through a standardized interface."
richardhan,mssql_mcp_server,58,,"This MCP server implementation, developed by Dana K. Williams, provides secure interaction with Microsoft SQL Server databases. Built with Python and leveraging libraries like mcp and pymssql, it offers a bridge between AI assistants and SQL Server data. The implementation focuses on security, with detailed guidance on creating restricted SQL logins, implementing row-level security, and following best practices for monitoring and auditing. It's particularly useful for organizations needing to integrate SQL Server data into AI workflows while maintaining strict security controls, enabling tasks like data analysis, reporting, and database management through AI interfaces while ensuring data protection and compliance."
dandeliongold,mcp-decent-sampler-drums,1,,"This MCP server, developed by dandeliongold, provides tools for generating DecentSampler drum kit configurations. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers functionality for analyzing WAV samples and generating XML-based drum group configurations. The implementation focuses on creating flexible velocity layers, handling sample path mapping, and configuring muting groups. By connecting AI models with DecentSampler's preset creation process, this server enables sophisticated drum kit design scenarios, enhancing the ability to create custom virtual instruments. It's particularly useful for music producers, sound designers, and AI assistants involved in virtual instrument development and sample library management."
danedens,omnispindle,3,,"This FastMCP-based Todo Server, developed for the Swarmonomicon project, receives todo requests via FastMCP and stores them in MongoDB. It integrates with the Swarmonomicon todo worker, providing a Python-based implementation for task management and distribution. The server offers features like adding todos with priorities and target agents, querying todos with filters and projections, and supports real-time updates via MQTT, making it suitable for AI-driven task automation and collaborative workflows."
danhilse,notion_mcp,158,,"This MCP server, developed by Dan Hilse, enables AI assistants like Claude to interact with a personal Notion todo list. Built in Python, it provides a minimalist interface for managing tasks with just three properties: task name, scheduling (today/later), and completion status. The implementation integrates with the Notion API to add, view, and update todos in a specific database structure. By connecting AI capabilities with a streamlined task management system, this server enables AI assistants to help organize daily activities and track personal productivity. It is particularly useful for individuals seeking a simple, AI-augmented todo list without complex features, prioritizing ease of use and quick task entry over advanced project management functionality."
danhilse,youtube_research_mcp,3,,"This YouTube research MCP server, developed by an unnamed author, integrates with the YouTube API to perform aggregated video searches. Built with TypeScript and leveraging the Model Context Protocol SDK, it uses sampling to generate search queries from user topics, fetches both short and long videos, and compiles results with metadata. The server implements sequential thinking, logging each step as separate 'thoughts' for operational visibility. By abstracting YouTube search complexities, it enables AI assistants to efficiently gather video content on specified topics. This implementation is particularly useful for content curation, trend analysis, and research tasks, facilitating use cases such as creating themed playlists, analyzing video popularity across topics, or gathering educational resources."
danhussey,transportnsw-mcp,0,,"Transport NSW MCP Server provides a structured interface to access New South Wales public transportation data through the official Transport NSW API. It offers tools for finding transport stops around specific locations and retrieving service alerts and disruptions across different transport modes (trains, buses, ferries, etc.). Built with Python and leveraging Swagger-generated client code, the implementation handles API authentication, request formatting, and response parsing, making it ideal for applications requiring real-time public transport information, trip planning, or monitoring service disruptions in the NSW transport network."
danielbushman,quickbase-mcp-connector,0,,"MCP-Quickbase provides a standardized interface for interacting with Quickbase's JSON RESTful API through Claude and other MCP clients. This server implementation supports a wide range of operations including querying records, managing table relationships, handling file attachments, and user management. Built with both Python and Node.js components, it authenticates with Quickbase using environment variables and exposes tools for common database operations like creating, updating, and deleting records. The server is particularly valuable for users who need to access and manipulate Quickbase data directly within their AI assistant conversations without switching contexts."
daniel-lxs,mcp-perplexity,48,30902,"This MCP server, developed by Daniel Riccio, provides integration with the Perplexity API for advanced language understanding and generation. Built with Python and leveraging the MCP framework, it offers two main tools: ask_perplexity for expert programming assistance and chat_perplexity for ongoing conversations. The implementation focuses on maintaining chat history, supporting different Perplexity models, and providing streaming responses with progress reporting. It's particularly useful for developers and teams who want to incorporate Perplexity's language capabilities into their workflows, enabling use cases such as code debugging, technical explanations, and persistent AI-assisted conversations without directly managing API calls to Perplexity."
danielma-tic,fillout-mcp-server,0,,"This MCP server integrates with the Fillout.com API, providing a bridge to leverage Fillout's form-building and data collection capabilities. Built with TypeScript and Node.js, it offers a robust foundation for creating, managing, and analyzing online forms and surveys. The server's architecture ensures type safety and efficient error handling, making it ideal for developers looking to incorporate advanced form functionality into their applications. Use cases include customer feedback collection, market research, lead generation, and data-driven decision making across various industries."
danielpodrazka,editor-mcp,3,,"MCP Text Editor Server provides a Python-based interface for AI assistants to manipulate text files through a structured editing workflow. Built with FastMCP, it implements a two-step edit process with content verification using SHA-256 hashing to prevent conflicts during concurrent edits. The server offers tools for file management, content access, text search, and syntax validation for Python and JavaScript files. It enforces safety through line limits and automatic syntax checking before applying changes, making it ideal for collaborative code editing where multiple agents need controlled access to modify source files."
isdaniel,mcp_weather_server,0,,"MCP Weather Server provides real-time weather information through the Open-Meteo API, allowing AI assistants to retrieve current weather conditions for any city. Developed by danielshih, this Python-based server exposes a single tool (get_weather) that accepts a city name parameter and returns formatted weather data. The implementation is designed for easy integration with MCP clients through either manual configuration in cline_mcp_settings.json or via pip installation, making it ideal for applications that need to incorporate up-to-date weather information into conversations without requiring API keys or complex setup."
nighttrek,software-planning-mcp,156,,"Software Planning MCP is a tool that helps developers break down software goals into actionable implementation plans through a structured, question-based approach. Developed by Daniel Steigman, it guides users through a sequential thinking process to understand requirements, analyze technical considerations, and develop detailed task lists with complexity scores and code examples. The server stores goals and implementation plans locally, provides tools for managing todos, and uses a sophisticated parsing system to convert natural language plans into structured task items. Particularly valuable for developers who want to systematically approach complex software projects without losing track of implementation details."
danilop,mcp2lambda,90,,"MCP2Lambda enables Large Language Models to interact with AWS Lambda functions as tools without code changes. It acts as a bridge between MCP clients and Lambda functions, allowing models to access private resources, interact with AWS services, and leverage Lambda's capabilities for data processing and external API access. The implementation includes autodiscovery of Lambda functions and secure invocation, making it useful for extending AI capabilities in enterprise environments with existing AWS infrastructure."
danimal141,arxiv-search-mcp,2,,"The arXiv Search MCP server provides tools for searching and retrieving academic papers from arXiv.org directly within Claude. Built with Deno and the FastMCP library, it enables users to search for papers by category and retrieve the latest submissions sorted by date. The implementation handles XML parsing from the arXiv API and formats results with titles, authors, summaries, and links. This tool is particularly useful for researchers and academics who want to stay updated on recent publications in specific fields without leaving their conversation with Claude."
danmas0n,multi-agent-with-mcp,21,,"This project implements a small team of coding agents using LangGraph and MCP. The agents use MCP servers to provide tools and capabilities through a unified gateway. The overall objective of this agent team is to take requirements and code context and create multiple implementations of proposed features; human operators can then choose their preferred approach and proceed, discarding the others."
dannyhw,storybook-mcp,6,,"This MCP server implementation provides a bridge to Storybook, enabling AI assistants to interact with and retrieve stories from Storybook configurations. Developed by Danny Williams, it offers a tool for getting stories from a specified Storybook config directory. The server is built using TypeScript and integrates with the Model Context Protocol SDK, making it useful for developers working on React Native projects who want to incorporate AI-assisted story management and retrieval."
dannylee1020,toy-mcp,0,,"This MCP implementation, developed by Danny Lee, provides a simple server-client architecture for fetching data from the HackerNews API. Built with Python and leveraging the MCP and Anthropic libraries, it offers tools for retrieving top stories, user information, and story details. The implementation focuses on demonstrating basic MCP functionality while providing a practical interface to a popular news aggregator. By connecting AI models with HackerNews data, this server enables use cases such as content analysis, trend identification, and user behavior studies. It's particularly useful for developers looking to understand MCP architecture or build applications that require programmatic access to HackerNews content through a standardized interface."
dannymac180,mcp-think-tool,56,3051,"The MCP Think Tool Server implements Anthropic's 'think' tool for Claude and other LLMs, providing a dedicated space for structured reasoning during complex problem-solving tasks. It maintains a timestamped log of thoughts that can be reviewed, cleared, or analyzed for statistics, enabling models to break down problems systematically, ensure policy adherence, and process complex tool outputs. Built using FastMCP, the server exposes four tools: think for recording thoughts, get_thoughts for retrieving the thinking history, clear_thoughts for resetting, and get_thought_stats for analyzing thinking patterns - making it particularly valuable for improving performance in tasks requiring long chains of reasoning."
danvega,dv-courses-mcp,4,,"A lightweight Spring Boot MCP server for exposing course information from Dan Vega's YouTube tutorials. The server provides two primary tools for retrieving course details: listing all available courses and searching for a specific course by title. Designed as a simple, extensible example of creating a data-driven MCP server using Spring AI's tooling framework."
da-okazaki,mcp-neo4j-server,34,2157,"This Neo4j MCP server, developed by Daichi Okazaki, enables AI assistants to interact with Neo4j graph databases through natural language. Built with TypeScript using the @modelcontextprotocol/sdk and neo4j-driver, it provides tools for executing Cypher queries, creating nodes and relationships, and performing complex graph operations. The implementation abstracts the intricacies of Neo4j's query language and data structures, allowing AI systems to seamlessly work with graph data. By connecting AI capabilities with powerful graph database functionality, this server facilitates use cases such as knowledge graph exploration, social network analysis, recommendation systems, and complex data relationship modeling."
dappierai,dappier-mcp,5,,"Dappier MCP Server connects AI assistants to real-time, rights-cleared data from trusted sources through the Model Context Protocol. Developed by Amaan Mohammed at AI20Labs, it provides two main tools: real-time data search for retrieving web search results, financial information, and news; and AI recommendations for personalized content discovery with structured JSON responses. The server integrates with Claude Desktop through a simple configuration process and supports customizable parameters like similarity filtering and search algorithms, making it ideal for workflows requiring up-to-date information from premium publishers without leaving the conversation interface."
darknoah,feishu-mcp,2,,"An MCP server implementation for integrating with Feishu (Lark) messaging platform, allowing AI assistants to interact with Feishu users and access Feishu data."
darpai,darp_engine,5,,"DARPEngine is a search engine for MCP servers that provides smart search capabilities and routing tools. Developed by DARPAI, it stores metadata for MCP servers and offers both CLI and API access to search functionality. The implementation includes a registry service for server management and a specialized MCP server that can route user requests to the most appropriate tools found during search. It features the ability to analyze user queries, identify relevant servers based on their capabilities, and execute tools across multiple servers to provide comprehensive responses. Particularly useful for discovering and utilizing distributed MCP tools without requiring users to know which specific servers to connect to."
its-dart,dart-mcp-server,40,4234,"Dart MCP Server provides AI assistants with direct access to Dart's project management platform, enabling task and document management through a comprehensive set of tools. Built by the Dart team, it allows for creating, retrieving, updating, and deleting tasks and documents, with support for filtering by various attributes like assignees, status, and priority. The server exposes both structured tools and resource templates that make it easy for AI assistants to interact with Dart's API, and includes prompts for common actions like creating tasks or summarizing work items. It's particularly valuable for teams using Dart who want to manage their projects directly through AI assistants like Claude without switching contexts."
dasein108,mcp-cw-graph,1,,"CW-Graph MCP Server provides a TypeScript implementation for interacting with a CosmWasm-based social graph smart contract on a blockchain. It enables AI assistants to create, update, query, and delete cyberlinks (graph relationships) through a set of well-defined tools that communicate with the blockchain via CosmJS. The server handles wallet management, transaction signing, and result formatting, making it particularly useful for applications that need to store structured data like conversation threads, social connections, or content relationships in a decentralized manner."
dasheck0,face-generator,2,796,"This face generator MCP server, developed by Stefan Neidig, provides a tool for generating human face images using thispersondoesnotexist.com. Built with TypeScript and leveraging the Sharp image processing library, it offers customizable image generation with options for shape (square, circle, rounded rectangle), dimensions, and batch processing. The server implements transparent backgrounds for non-square shapes and supports configurable output directories. By abstracting face image generation into a standardized MCP interface, it enables AI systems to easily create diverse sets of realistic human faces. This implementation is particularly useful for applications involving user interface prototyping, avatar creation, and dataset generation for machine learning tasks related to facial recognition or analysis."
da-snap,mcp-server-developer-tool,0,,"MCP Server Developer Tool provides a set of utilities for AI assistants to interact with the local file system and execute shell commands. Built by Daniel, it implements four core tools: executing shell commands with timeout control, displaying file contents with line range options, searching files using regular expressions, and writing content to files with append or overwrite modes. The server uses Go's reflection capabilities to dynamically handle tool execution and communicates via stdio transport, making it suitable for integration with any MCP-compatible client. This implementation is particularly valuable for development workflows requiring file manipulation, code inspection, and command execution without leaving the conversation interface."
georgi-terziyski,database_mcp_server,0,,"Database MCP Server provides a unified interface for connecting to and interacting with multiple database systems (SQLite, PostgreSQL, MySQL/MariaDB, and SQL Server) through a consistent set of tools. It features connection management, query execution, schema manipulation, and transaction support across all supported database types. The implementation uses a modular architecture with database-specific connectors that abstract away differences between database systems, making it ideal for applications that need to work with multiple database types or for AI assistants that require database access capabilities without dealing with database-specific syntax and connection details."
justtryai,databricks-mcp-server,12,,"Databricks MCP Server provides a bridge between AI assistants and Databricks services through a standardized interface. It enables interaction with Databricks clusters, jobs, notebooks, DBFS, and SQL workspaces via tools that wrap the Databricks REST API. The server follows the stdio transport protocol, making it compatible with Claude Desktop integration, and includes comprehensive error handling and logging. Particularly valuable for data scientists and engineers who need to manage Databricks resources, execute queries, or automate workflows without leaving their conversation interface."
morphik-org,morphik-mcp,3,,"This MCP server implementation provides a bridge to DataBridge, enabling AI assistants to ingest and retrieve information from a local database. Developed as part of the databridge-mcp project, it offers two main tools: one for ingesting user observations with metadata, and another for retrieving relevant information based on user queries. The server uses FastMCP for efficient request handling and is designed to work with Python 3.11+. It's particularly useful for AI applications requiring persistent storage and retrieval of contextual information, supporting use cases like maintaining conversation history or building knowledge bases from user interactions. The implementation focuses on simplicity and ease of integration, making it suitable for both development and production environments."
databutton,databutton-mcp,13,15585,"Databutton MCP Server enables AI assistants to plan and create initial scaffolding for business applications built with React frontends and Python backends. Developed by Databutton, it specifically focuses on the planning phase of app development, helping users generate a structured approach before implementation begins. The server integrates with Claude Desktop through stdio communication and can be installed either manually or via Smithery. It leverages the Model Context Protocol SDK to facilitate the creation of beautiful business applications with complex functionality, making it particularly valuable for developers looking to quickly establish a solid foundation for their Databutton-powered projects."
databutton,databutton-app-mcp,1,14638,"A proxy server that enables using Databutton app API endpoints as tools through any MCP-compatible client. It establishes secure websocket connections to Databutton apps using API keys, handles authentication, and bridges stdin/stdout to enable seamless integration. Built for developers who want to expose their Databutton app functionality to AI assistants without additional configuration."
datalayer,earthdata-mcp-server,8,,"Earthdata MCP Server provides a bridge between AI assistants and NASA's Earthdata platform, enabling search and retrieval of Earth science datasets and data granules. Built with FastMCP, it exposes two main tools: search_earth_datasets for discovering datasets based on keywords, temporal ranges, and geographic boundaries, and search_earth_datagranules for retrieving specific data granules by dataset short name. This implementation is particularly valuable for researchers, scientists, and analysts who need to access NASA Earth observation data directly through conversational AI interfaces without switching to specialized data portals."
datalayer,jupyter-mcp-server,189,,"This Jupyter MCP server implementation, developed by Datalayer, provides a bridge between the Model Context Protocol (MCP) and Jupyter environments. It leverages Jupyter's kernel and notebook model clients to enable AI assistants to interact with Jupyter notebooks, execute code, and manipulate notebook content. The server is designed to run in a Docker container, making it easily deployable and scalable. It's particularly useful for data scientists and researchers who want to integrate AI-powered tools into their Jupyter workflows, enabling automated analysis, code generation, and interactive data exploration within notebook environments."
datalayer,jupyter-earth-mcp-server,2,,"Jupyter Earth MCP Server provides a bridge between AI assistants and Jupyter notebooks for Earth science data analysis. Developed by Datalayer, this Python-based server enables downloading NASA Earth Data granules directly into Jupyter notebooks through a simple interface. The implementation leverages jupyter-kernel-client and jupyter-nbmodel-client to programmatically create and execute code cells in notebooks, allowing for parameterized data retrieval with options for temporal ranges and geographic bounding boxes. It's particularly useful for Earth scientists and researchers who need to automate the acquisition of satellite data and integrate it seamlessly into their Jupyter-based analysis workflows."
bitrsky,jupyter_mcp_server,0,,"The Jupyter MCP Server provides a bridge between AI assistants and Jupyter notebooks, enabling models to programmatically create and execute code cells, add markdown content, and interact with Earth data through specialized tools. Built using the MCP protocol with both stdio and SSE transport options, it leverages the jupyter_kernel_client and jupyter_nbmodel_client libraries to manipulate notebook content and execute code in a running kernel. This implementation is particularly valuable for data science workflows where AI assistants need to generate executable code, document analysis with markdown, or facilitate Earth data retrieval and processing within Jupyter environments."
datastax,astra-db-mcp,15,2393,"This MCP server implementation provides integration with Astra DB, a cloud-native database service. Developed by DataStax, it offers tools for managing collections and records within Astra DB, including creating, updating, deleting, and querying data. The server is designed to enable AI agents to interact directly with Astra DB, making it useful for applications that require scalable, cloud-based data storage and retrieval capabilities."
datawhisker,x-mcp-server,13,,"This X (Twitter) MCP server, developed by an unnamed author, provides integration with the Twitter API for AI assistants. Built using TypeScript and the MCP SDK, it offers a streamlined interface for interacting with Twitter's platform, enabling tasks like posting tweets, retrieving user information, and analyzing trends. The server leverages the twitter-api-v2 library to handle API communication and implements TypeScript's strict mode for enhanced code reliability. By abstracting the complexities of Twitter's API, it allows AI systems to easily incorporate social media interactions into their workflows. This implementation is particularly useful for social media management, brand monitoring, and automated content distribution on Twitter, enabling use cases such as scheduled posting, sentiment analysis, and engagement tracking."
datawiz168,mcp-snowflake-service,26,,"This MCP server, developed by datawiz168, provides seamless integration with Snowflake databases. It implements a Python-based interface for executing SQL queries, retrieving results, and managing database connections through the Snowflake connector. The server exposes tools for running queries, fetching data, and interacting with Snowflake objects like tables and views. By leveraging Snowflake's powerful cloud data platform, this implementation enables AI assistants to easily incorporate large-scale data analysis and business intelligence capabilities. It is particularly useful for scenarios requiring real-time access to enterprise data warehouses, such as generating reports, performing ad-hoc analysis, or integrating Snowflake data into AI-powered applications."
davidamom,snowflake-mcp,1,,"Snowflake MCP Server provides secure access to Snowflake databases for any MCP-compatible client, enabling SQL query execution with robust connection management. Built by David Amom, it handles database connection lifecycle (connect, reconnect on timeout, close), supports both password and key pair authentication methods, and processes query results safely. The implementation is particularly valuable for AI assistants that need to interact with Snowflake data warehouses without requiring users to switch contexts or manually execute queries, making it ideal for data analysis, reporting, and exploration workflows."
dfkai,xtquantai,53,,"A lightweight MCP server for quantitative trading using the XTQuant API, enabling AI-driven financial analysis and trading strategies. Developed by davidfnck, this tool provides a Python-based integration for programmatic stock market interactions, with a focus on leveraging AI capabilities for quantitative investment approaches."
davidkingzyb,scast,10,,"SCAST is a tool designed to assist users in analyzing and summarizing code through visualization. 
By simply providing the folder path where the code is located, 
SCAST can perform static analysis on the code, helping users understand the code structure, explain its functionality.
generate various visual charts such as UML diagrams, AST tree diagrams and Mermaid flowcharts."
davidlin2k,onos-mcp-server,2,,"An MCP server for ONOS (Open Network Operating System) that provides programmatic access to network management, device control, and analytics through a rich set of resources and tools. Developed by David Lin, this server enables interaction with ONOS's REST API, offering capabilities like network topology exploration, flow management, application control, and system diagnostics, making it valuable for SDN research, network prototyping, and educational environments."
davidlin2k,pox-mcp-server,1,,"POX MCP Server provides a bridge to the POX SDN controller, enabling AI assistants to manage and configure OpenFlow-based networks. Developed by David Lin, this implementation exposes network topology information and controller configurations through resources, while offering specialized prompts for network management, hub implementation, and learning switch configuration. The server includes tools for datapath management, flow statistics retrieval, and table configuration, making it particularly valuable for educational environments, network prototyping, and SDN research where AI assistants need to interact with network infrastructure."
davidorex,git-file-forensics,0,,"This MCP server, developed by davidorex.ai, provides deep git file-level forensics capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for tracking file versions, analyzing diffs, examining commit contexts, and evaluating semantic changes. The implementation focuses on individual file analysis rather than repository-wide operations, enabling detailed insights into file histories and change patterns. It's particularly useful for developers and code reviewers who need to investigate specific file changes, track complex refactorings, or assess code evolution over time, without requiring extensive git expertise."
davidorex,git-forensics-mcp,1,,"This MCP server, developed by davidorex.ai, provides deep git repository analysis and investigation capabilities. Built with TypeScript using the Model Context Protocol SDK, it offers tools for branch overview, time period analysis, file change tracking, and merge recommendations. The implementation focuses on forensic examination of git histories, enabling detailed insights into development patterns and repository structures. It's particularly useful for development teams and code auditors who need to understand complex git workflows, assess merge risks, and optimize branching strategies without manually parsing git logs. The server can be integrated with any MCP-compatible client, making it versatile for various git analysis workflows."
davidorex,project-handoffs,6,,"This MCP server implementation, developed for managing AI session handoffs and next steps, provides a TypeScript-based interface leveraging the Model Context Protocol SDK. It offers tools for coordinating AI workflows across multiple sessions or models. The implementation focuses on maintaining context and continuity between AI interactions, enabling seamless handoffs and structured progression of tasks. It's particularly useful for complex, multi-stage AI processes that require coordination between different models or handling extended user interactions over time. The server allows for efficient management of AI conversation flows, task delegation, and context preservation without requiring deep knowledge of underlying AI model architectures."
davidshtian,mcp-on-aws-bedrock,35,,"This AWS Bedrock MCP implementation, developed by Anthropic, provides a seamless integration between Anthropic's Model Context Protocol and Amazon's Bedrock service. Built with Python using boto3 and the MCP SDK, it offers a client that can interact with MCP-enabled tools through Bedrock's runtime service, specifically using the Nova Pro model. The implementation features tool format conversion for Bedrock compatibility, asynchronous communication handling, and structured logging. By bridging MCP and Bedrock, it enables AI systems to leverage both protocols' strengths, making it particularly useful for developers looking to combine Anthropic's MCP capabilities with AWS's scalable infrastructure for applications in natural language processing, task automation, and AI-assisted decision making."
davidteren,claude-server,6,,"This TypeScript-based MCP server implementation, developed using the Model Context Protocol SDK, provides a foundation for building AI-driven applications. It leverages modern JavaScript features and TypeScript's type safety to create a robust and scalable server structure. The implementation is designed to be easily extensible, allowing developers to integrate various AI models or services. It's particularly well-suited for projects requiring a lightweight, customizable MCP endpoint, such as chatbots, content generation tools, or data analysis applications. The server's modular architecture and use of up-to-date dependencies make it adaptable to a wide range of AI-powered use cases, from simple text processing to more complex multi-modal interactions."
davidvc,code-mcp,10,,"This Code Analysis MCP plugin, developed by an unspecified author, enables AI assistants to perform sophisticated code analysis using a Neo4j graph database. Built with Java and leveraging libraries like JavaParser and Neo4j, it offers tools for analyzing code structure, calculating quality metrics, extracting documentation, and answering high-level questions about codebases. The plugin implements advanced metrics calculation and natural language query processing, abstracting the complexities of code parsing and graph database operations. By providing a comprehensive view of code structure and quality, it allows AI systems to generate insights, identify potential issues, and assist in code review processes. This implementation is particularly valuable for software development teams, code reviewers, and architects, facilitating use cases such as architectural analysis, code quality assessment, and automated documentation generation."
davidvc,code-knowledge-mcptool,9,,A knowledge management tool for code repositories using vector embeddings. This tool helps maintain and query knowledge about your codebase using advanced embedding techniques.
apvlv,davinci-resolve-mcp,12,,"DaVinci Resolve MCP Server enables AI assistants like Claude to directly interact with and control DaVinci Resolve through its Python API. Built by apvlv, the server provides tools for project management, timeline manipulation, media organization, and Fusion integration, allowing users to programmatically create, modify, and inspect video editing projects through natural language commands."
davlgd,mcp-clever-demo,1,2038,"This MCP server, developed by David Legrand, provides a JavaScript-based interface for AI assistants to interact with Clever Cloud's tools and services. Built using the mcp-js-server SDK, it offers a streamlined way to access Clever Cloud's platform capabilities. The implementation focuses on simplicity and ease of use, requiring minimal setup to get started. It's particularly useful for developers and AI models looking to leverage Clever Cloud's infrastructure and services, enabling tasks like application deployment, environment management, or resource monitoring without requiring deep knowledge of Clever Cloud's API intricacies."
dazeb,mcp-github-mapper,15,,"This GitHub Mapper MCP server, developed by an unnamed author, provides AI assistants with capabilities to analyze and map GitHub repositories. Built using TypeScript and leveraging the Octokit REST API client, it offers functionalities for authenticating with GitHub, retrieving repository metadata, and generating detailed file structure maps. The server abstracts the complexities of GitHub API interactions, enabling AI systems to easily access and process repository information. It's particularly valuable for developers and researchers working on code analysis, project management, and software development workflows, facilitating use cases such as automated code reviews, dependency analysis, and repository structure visualization."
dazeb,markdown-downloader,18,,"This Markdown Downloader MCP server, developed by an unknown author, provides AI assistants with capabilities to download and process Markdown content. Built with TypeScript and leveraging libraries like axios and fs-extra, it offers a streamlined interface for retrieving Markdown files from URLs, parsing their content, and saving them locally. The server implements error handling and file system operations to manage downloaded content effectively. By abstracting the complexities of web requests and file manipulation, it enables AI systems to easily incorporate Markdown processing into their workflows. This implementation is particularly useful for content aggregation, documentation management, and text analysis tasks, facilitating use cases such as automated content curation, knowledge base creation, and structured data extraction from Markdown sources."
dbillionaer,polygon-mcp,2,,"The Polygon MCP Server provides a comprehensive interface for interacting with the Polygon blockchain network, enabling AI assistants to perform wallet operations, smart contract deployments, L2 bridging, DeFi interactions, and transaction simulations. Built using ethers.js v6 and the Model Context Protocol SDK, it supports both Polygon Mainnet and Mumbai Testnet networks, handles the POL token (formerly MATIC) with backward compatibility, and includes tools for token transfers, balance checking, gas price retrieval, and integration with protocols like QuickSwap and Aave. This implementation is particularly valuable for blockchain developers, DeFi users, and applications requiring secure, programmatic access to Polygon network functionality through AI assistants."
dbsmith7491,aws-amplify-data-mcp,1,,"AWS Amplify Data MCP Server provides a bridge between AI assistants and AWS Amplify Data APIs, enabling interaction with GraphQL-based data models through a standardized interface. This implementation authenticates with Amazon Cognito, introspects data models from Amplify outputs, and offers tools for listing models, querying relationships, and executing custom GraphQL operations. It handles authentication token refresh automatically and provides detailed model information, making it particularly useful for AI agents that need to access or manipulate data in Amplify-powered applications without requiring users to write complex GraphQL queries."
dcolley,swagger-mcp,40,,"Swagger MCP Server ingests Swagger/OpenAPI specifications and exposes them as MCP tools, enabling AI assistants to interact with any API documented in the OpenAPI format. It supports multiple authentication methods (Basic Auth, Bearer Token, API Key, OAuth2), automatically generates tools from API endpoints, and provides real-time communication through Server-Sent Events. The implementation is designed for personal use to create a bridge between AI assistants and existing web APIs, making it particularly valuable for developers who want to give their AI assistants access to specific services without writing custom integrations for each API."
dcspark,mcp-cryptowallet-evm,2,580,"MCP Crypto Wallet EVM provides Claude with access to Ethereum and EVM-compatible blockchain operations through ethers.js v5. Developed by dcSpark, this server enables wallet creation, balance checking, transaction sending, and smart contract interactions on EVM blockchains. It exposes over 40 tools organized into categories including wallet management, blockchain queries, transaction handling, and network operations, making it valuable for users who need to perform cryptocurrency operations directly through Claude without switching to specialized wallet applications."
dcspark,mcp-server-helius,9,,"This MCP server implementation provides Claude with access to Solana blockchain data via the Helius API. Developed by dcSpark, it offers tools for checking wallet balances and retrieving the current block height on Solana. The server is designed for use cases requiring real-time Solana blockchain data integration, such as monitoring account balances or tracking network status."
dcspark,mcp-server-jupiter,0,,"This MCP server provides Claude with access to Jupiter's swap API on the Solana blockchain. Developed by dcSpark, it enables operations like getting quotes, building swap transactions, and sending swap transactions. The server is designed for use cases requiring programmatic access to decentralized exchange functionality on Solana, such as automated trading strategies or integrating Jupiter swaps into other applications."
ddaltn,raindrop-mcp-python,2,,"A Python-based MCP server for Raindrop.io that enables Claude Desktop to interact with bookmarking collections and tags through natural language. Developed by ddaltn, it provides tools for creating, updating, and deleting collections and raindrops, as well as managing tags within the Raindrop.io service. The implementation uses the Python MCP SDK and httpx for API communication, requiring only a Raindrop.io API token to function. This server can be paired with other MCP implementations like Firecrawl to enable streamlined automation and organization of bookmarking workflows."
containerelic,github-enterprise-mcp,13,,"GitHub Enterprise MCP Server provides a bridge between AI assistants and GitHub Enterprise API, enabling repository management, issue tracking, and code access through natural language. The implementation supports both GitHub Enterprise Server and GitHub.com, with special features for enterprise environments like license information and admin statistics. Built with TypeScript and the Model Context Protocol SDK, it offers tools for managing repositories, branches, pull requests, issues, and GitHub Actions workflows through either stdio or HTTP transport. Particularly valuable for developers who need to interact with GitHub repositories without leaving their AI assistant interface."
voitta-ai,mcp-voitta-gateway,0,,"This MCP gateway bridges AI assistants to RFK Jr campaign endpoints, enabling access to various campaign-related tools and data. It dynamically registers tools based on OpenAPI schemas from configured endpoints, supports both STDIO and SSE transports, and includes features for endpoint discovery and information retrieval. The implementation is designed for flexibility and easy integration with existing campaign infrastructure."
deco-sites,mcp,0,,"This Deco MCP server implementation enables AI assistants to interact with Deco site loaders through a standardized interface. Built with the Model Context Protocol SDK and Hono, it dynamically registers site loaders as MCP tools by extracting their schemas from the Deco metadata, allowing AI assistants to discover and invoke these tools via Server-Sent Events (SSE). The server handles tool discovery and execution requests, transforming loader results into MCP-compatible responses, making it ideal for integrating AI capabilities with Deco-powered websites and applications."
dedeveloper23,codebase-mcp,14,,"This MCP server implementation provides a bridge for retrieving codebases using RepoMix. Developed by Anthropic, it integrates with the Model Context Protocol SDK and offers tools for codebase retrieval and analysis. The server is designed for use cases requiring access to source code repositories, such as code review, dependency analysis, or automated documentation generation."
deepfates,mcp-replicate,48,,"This Replicate MCP server implementation provides a bridge between the Model Context Protocol and Replicate's AI model hosting platform. Developed as an open-source project, it enables seamless interaction with Replicate's diverse collection of machine learning models through a standardized MCP interface. The server supports key operations such as listing available models, creating and managing predictions, and accessing model metadata. Built with TypeScript and leveraging the official Replicate API, it offers robust error handling, caching mechanisms, and webhook support. This implementation is particularly useful for developers and researchers looking to integrate Replicate's hosted AI models into their MCP-compatible applications, enabling easy access to a wide range of pre-trained models for tasks like image generation, text processing, and more."
ameeralns,deepresearchmcp,4,,"DeepResearch MCP Server provides AI assistants with a structured approach to conducting multi-step web research. It leverages Firecrawl for web searches and OpenAI's GPT-4 for analyzing findings and generating comprehensive reports. The server implements a stateful research process that iteratively explores topics at configurable depths, with each step analyzing previous findings to determine the next search query. Built with TypeScript and the Model Context Protocol, it features robust error handling, token optimization for large research sessions, and both step-by-step and one-shot research workflows. This implementation is particularly valuable for users who need thorough, citation-rich research reports on complex topics without manually managing the search and synthesis process."
ygboy1986,aiclaude,0,,"DeepSeek-Claude integrates DeepSeek's R1 reasoning engine with Claude, enabling sophisticated reasoning capabilities through a simple API interface. The server exposes a single tool that processes queries by sending them to the DeepSeek API and formatting the reasoning output within <ant_thinking> tags for seamless integration with Claude's thought process framework. This implementation allows Claude to leverage DeepSeek's advanced reasoning capabilities that evolved from large-scale reinforcement learning, making it particularly valuable for complex problem-solving tasks that benefit from multiple reasoning approaches."
deep070203,docling-mcp,9,,"This MCP server, developed by Deep Shah, leverages IBM's Docling software to parse and convert documents to Markdown format. Built with Python and integrating the MCP and Docling libraries, it provides a streamlined interface for document processing tasks. The implementation focuses on Markdown conversion, offering a specialized tool for transforming various document formats into a universal, easily readable text format. It's particularly useful for content management systems, documentation projects, and AI-assisted text analysis workflows that benefit from standardized Markdown input, enabling efficient document parsing and conversion without complex setup or multiple tool integrations."
deepsrt,deepsrt-mcp,33,,"This MCP server provides YouTube video summarization functionality through integration with DeepSRT's API. It offers tools to generate summaries in narrative or bullet-point formats, with multi-language support. The server leverages content caching and CDN edge delivery for efficient summary retrieval, making it suitable for applications requiring quick access to video content summaries."
deepsuthar496,alpha-ventage-mcp,2,,"An MCP server that provides a comprehensive interface to the Alpha Vantage financial data API, enabling programmatic retrieval of stock prices, company overviews, time series data, forex rates, cryptocurrency prices, and technical indicators. Designed for developers and financial analysts who need structured access to real-time and historical market data through a standardized protocol."
deepsuthar496,figma-mcp-server,0,,"Figma MCP Server provides integration with Figma's API, enabling AI assistants to interact with Figma design files and team resources directly within conversations. The implementation offers tools for file operations (retrieving file information, version history, components), comment management, project and team features, and webhook administration - all authenticated through a Figma access token. Built as a Node.js application using the MCP SDK and Axios for API communication, it's particularly valuable for design workflows that require reviewing, commenting on, or analyzing Figma files without leaving the conversation interface."
ai-1st,deepview-mcp,15,3233,"DeepView MCP enables AI-powered code analysis by loading entire codebases into Gemini's large context window, allowing developers to query and understand complex repositories through natural language interactions. Built by Dmitry Degtyarev, it integrates seamlessly with IDEs like Cursor and Windsurf, providing a flexible tool for developers seeking AI-assisted code comprehension using tools like repomix to prepare codebases files."
defibax,mcp_servers,4,,"This MCP server implementation provides voice recording and transcription capabilities using OpenAI's Whisper model. Developed by DefiBax, it integrates with the Goose AI agent as a custom extension and offers tools for recording audio, transcribing speech, and managing transcriptions. The server supports various Whisper model sizes and includes prompts for common recording scenarios, making it suitable for applications requiring speech-to-text functionality such as meeting note-taking, content summarization, and voice-controlled AI interactions."
delano,postman-mcp-server,67,,"This Postman MCP server, developed by Delano, provides AI assistants with programmatic access to Postman's API management platform. It integrates with the Postman API to enable functionalities like managing collections, environments, and APIs. The server is built with TypeScript and leverages the @modelcontextprotocol/sdk for MCP implementation. By abstracting Postman interactions, it allows AI systems to automate API testing, documentation, and workflow management. This implementation is particularly useful for developers, QA engineers, and API designers who want to leverage AI capabilities for API lifecycle management, automated testing, and collaborative API development workflows."
delorenj,mcp-qdrant-memory,8,3060,"This MCP server, developed by Jarad DeLorenzo, provides a knowledge graph implementation with semantic search capabilities powered by Qdrant vector database. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing entities, relations, and observations in a graph structure. The implementation focuses on efficient storage and retrieval, using both file-based persistence and Qdrant for vector search. It's particularly useful for applications requiring structured knowledge representation with semantic querying, enabling use cases such as intelligent information retrieval, relationship analysis, and context-aware AI interactions without directly dealing with complex graph database operations."
delorenj,super-win-cli-mcp-server,4,,"This Windows CLI MCP server, developed by Simon Benedict, provides a robust interface for AI assistants to interact with Windows command-line environments. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for executing commands across PowerShell, CMD, and Git Bash shells with configurable security measures. The implementation focuses on providing unrestricted system access through SYSTEM-level service installation, enabling full filesystem access and unrestricted command execution. It's particularly useful for remote Windows administration, automation of complex system tasks, or integration of Windows capabilities into AI-driven workflows, allowing assistants to leverage the full power of Windows environments without requiring deep knowledge of command-line intricacies."
delorenj,mcp-server-ticketmaster,10,719,"This MCP server for Ticketmaster, developed by Jarad DeLorenzo, provides a robust interface for AI assistants to interact with the Ticketmaster Discovery API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for searching events, venues, and attractions with flexible filtering options. The implementation focuses on comprehensive data retrieval and formatting, making it easy for AI models to access detailed information about entertainment events. It's particularly useful for tasks like event planning, ticket purchasing assistance, or integrating live entertainment data into AI-driven systems, allowing assistants to query Ticketmaster's extensive database without requiring deep knowledge of the underlying API complexities."
dennisgl,mcp-playwright-scraper,1,785,"A web scraping MCP server that uses Playwright for browser automation, BeautifulSoup for HTML parsing, and Pypandoc for converting web content to high-quality Markdown. Designed to handle modern, JavaScript-heavy websites and provide a simple tool for extracting and converting web page content, enabling easy content retrieval across complex web platforms."
dennismartis,mcp-todo,1,,"This MCP server implementation provides tools and resources for managing a coding project's todo list. Developed by Dennis Martis, it offers functionality to view, add, update, and delete todo items, with features like priority setting, tagging, and project assignment. The server uses FastMCP and Pydantic for efficient data handling and includes prompts for summarizing todos and suggesting which tasks to tackle next. It's designed for use cases requiring AI-assisted project management and task prioritization in software development contexts."
dennismartis,sql_mcp_server,0,,"SQL MCP Server provides a bridge between AI assistants and Microsoft SQL Server databases, enabling natural language interaction for querying and manipulating data. Built with FastMCP and pyodbc, it exposes tools for executing SQL queries, listing tables, describing schemas, and managing database operations through an asynchronous architecture that prevents blocking. The implementation features comprehensive error handling, Windows authentication security, and is particularly valuable for database administrators and analysts who need to interact with SQL Server through conversational AI."
dennj,weather-mcp,0,,"This MCP server implementation provides a weather service by integrating with the Open-Meteo API. It offers tools for fetching current weather data for a given city, including temperature, wind speed, and weather conditions. The server uses asynchronous HTTP requests and includes error handling for invalid city names or unavailable weather data. It's containerized using Docker for easy deployment and designed for use cases requiring up-to-date weather information."
deploya-labs,mcp-browser-use,1,,"MCP Server Browser Use enables AI assistants to interact with web browsers through a FastAPI server, providing capabilities for web browsing, content extraction, and automation. Built by Igor Tarasenko and Martin Jakobsson, it leverages the browser-use library to perform tasks like navigating websites, extracting information, and taking screenshots. The server can be configured to use various LLM providers including OpenAI, OpenRouter, and Ollama, and can run in either headless or visible browser mode. It's particularly useful for workflows requiring web research, data collection, or automated interactions with web applications."
deploya-labs,mcp-resend,0,,"The Resend MCP server enables AI assistants to send emails through the Resend API service. Built by Deploya-labs, it provides a 'send-email' tool that accepts parameters like recipient address, subject, content, and optional scheduling. The implementation supports configuration of sender email addresses and reply-to fields either through command-line arguments or environment variables. It runs as a Node.js application that can be deployed via Docker, making it ideal for workflows requiring email communication capabilities without leaving the conversation interface. The server requires a Resend API key for authentication and handles both successful delivery confirmations and error reporting."
deploya-labs,mcp-supabase,9,,"Supabase MCP server enables AI assistants to interact with Supabase databases, allowing SQL query execution, database management, and user authentication operations. Built by Alexander Zuev, it supports both read-only (default) and read-write modes with safety features, integrates with Supabase Management API, and includes region-specific configuration options. The implementation is containerized for easy deployment via Smithery.ai and requires minimal configuration with just a project reference and database password. It's particularly valuable for developers who need to manage their Supabase projects directly through AI assistant conversations without switching contexts."
derbenoo,fiberflow-mcp-gateway,0,226,"Fiberflow MCP Gateway serves as a bridge between Claude Desktop and Fiberflow's MCP server, enabling seamless integration through Server-Sent Events (SSE). Built by derbenoo, this TypeScript implementation runs as a command-line tool that connects to a Fiberflow SSE endpoint using a secret key and communicates with Claude Desktop via stdio. The gateway is designed for users who want to leverage Fiberflow's capabilities directly within Claude conversations without additional configuration steps beyond providing their Fiberflow MCP server secret in the Claude Desktop configuration."
descope-sample-apps,descope-mcp-server-stdio,3,,"This Descope MCP server, developed by Descope Sample Apps, integrates the Model Context Protocol with Descope's authentication and authorization platform. Built with TypeScript and leveraging the MCP SDK, it enables AI agents to interact with Descope's APIs for user management, authentication flows, and access control. The implementation focuses on providing a secure bridge between natural language commands and Descope's functionality, allowing operations like user creation, authentication, and permission management. It's particularly useful for developers and organizations looking to enhance their applications with AI-driven identity and access management capabilities, enabling use cases such as automated user onboarding, intelligent access control, and AI-assisted security policy enforcement without directly dealing with the complexities of Descope's APIs."
deshartman,twilio-agent-payments-mcp-server,2,,"Twilio Agent Payments MCP Server enables secure, PCI-compliant payment processing during voice calls by providing a bridge between AI assistants and Twilio's payment API. The server manages the complete payment capture workflow—collecting card numbers, security codes, and expiration dates—while maintaining state through asynchronous callbacks and guiding the AI with contextual prompts at each step. It uses Twilio API Keys for enhanced security and tokenizes payment information, making it particularly valuable for customer service applications where agents need to collect payments without handling sensitive card data directly."
deshartman,twilio-messaging-mcp-server,2,,"Twilio Messaging MCP Server enables AI assistants to send SMS messages through the Twilio API. It provides a simple 'send-sms' tool that accepts destination phone numbers and message content, handling all the authentication and API interaction behind the scenes. The server requires Twilio credentials (Account SID, API Key, API Secret) and a sender phone number, which are passed as command-line arguments rather than environment variables for enhanced security. Designed for integration with Claude Desktop, it can be run either through npx for convenience or installed globally, making it ideal for workflows where AI assistants need to send text messages without leaving the conversation interface."
designcomputer,mysql_mcp_server,323,186068,"This MySQL MCP server, developed by designcomputer, provides a secure interface for language models to interact with MySQL databases. It enables AI agents to list tables, read data, and execute SQL queries through a controlled interface. The server integrates with Claude Desktop and can be run standalone, offering flexibility in deployment. By focusing on read-only access and using environment variables for configuration, it maintains data security while allowing AI systems to explore and analyze relational data. This implementation is particularly useful for AI assistants designed to perform database schema exploration, generate SQL queries, or provide data-driven insights using MySQL as the backend."
yajihum,design-system-mcp,4,,"A design system MCP server that provides tools for retrieving component properties and design tokens from a React-based UI library. The server uses ts-morph to analyze TypeScript component files and extract prop information, while also accessing JSON token files that define colors, typography, spacing, and border radius values. This implementation enables AI assistants to understand the structure of UI components and available design tokens, facilitating more accurate code generation and design recommendations when working with this component library."
zhixiaoqiang,desktop-image-manager-mcp,1,,"Desktop Image Manager MCP provides tools for managing and manipulating images on the local desktop, with capabilities for counting image files, retrieving filenames, and compressing images. Built with TypeScript and leveraging the Sharp library for image processing, it enables AI assistants to directly interact with image files in the user's desktop directory through a standardized interface."
deus-h,claudeus-plane-mcp,1,,"Claudeus Plane MCP is a server implementation that provides AI assistants with direct access to Plane project management capabilities. It exposes tools for managing projects and issues through a standardized interface, allowing operations like listing, creating, updating, and deleting projects and issues. Built with TypeScript and the Model Context Protocol, it features secure API client handling, robust error management, and support for multiple Plane instances configured via JSON. This implementation is particularly valuable for teams who want to manage their Plane projects directly through conversational AI without switching contexts."
devabdultech,hn-mcp,6,,"This MCP server provides access to Hacker News data through a set of capabilities including searching stories and comments, retrieving various types of stories, fetching individual stories with comments, and accessing user profiles and submissions. Developed by devabdultech, it integrates with the Hacker News API and is built using TypeScript and Node.js. The server is designed for use cases requiring real-time access to Hacker News content, such as news aggregation, trend analysis, or building custom Hacker News clients."
devalexandre,mcp-servers,0,,"MCP Servers with Pyppeteer enables AI assistants to control headless browsers for web automation tasks through the Multi-Context Protocol framework. Developed by Alexandre E Souza, it provides capabilities for automated navigation, screenshot capture, element interaction using CSS selectors or XPath, and access to dynamic page information. The implementation runs as a Python package that can be installed via pip or directly from GitHub, and includes Docker support for containerized deployment. It's particularly valuable for workflows requiring web scraping, UI testing, or any scenario where programmatic browser control enhances AI assistant capabilities."
deventerprisesoftware,scrapi-mcp,3,436,"ScrAPI MCP Server is a specialized web scraping solution that enables AI assistants to extract content from websites that employ bot detection, captchas, or geolocation restrictions. Developed by DevEnterprise Software, this TypeScript implementation provides two core tools: one for retrieving content as HTML for advanced parsing needs, and another for Markdown output when text content is the priority. The server leverages residential proxies and automated captcha solving capabilities through the ScrAPI service, making it particularly valuable for AI systems that need to access otherwise restricted web content for research, data collection, or information retrieval tasks."
devhub,devhub-cms-mcp,1,2939,"Allows seamless interaction with DevHub's API platform, enabling automated content management and providing additional context to DevHub's users of LLMs. This MCP will benefit users looking to integrate AI capabilities with their DevHub workflows."
devlimelabs,meilisearch-ts-mcp,6,,"This MCP server implementation provides a bridge to Meilisearch, a powerful open-source search engine. It enables AI assistants to perform advanced search operations, manage indexes and documents, and configure search settings through a standardized interface. The server integrates closely with Meilisearch's API, offering features like faceted search, custom ranking, and asynchronous task management, making it ideal for applications requiring fast, relevant, and customizable search functionality."
stephanj,mcpjavafilesystem,8,,"Provides a filesystem and web access MCP server that enables AI agents to interact with local files and web resources through a set of standardized tools. Built for the Devoxx ecosystem, this server supports operations like reading, writing, searching, and editing files, as well as fetching web page content, with robust error handling and detailed JSON responses. Particularly useful for AI assistants that need to perform file system and web research tasks without direct user intervention."
devyhan,xcode-mcp,1,765,"A TypeScript implementation of the Model Context Protocol (MCP) for Xcode integration, allowing developers to connect Xcode with AI models that support MCP."
dfinke,mcp-powershell-exec,29,,"MCP PowerShell Exec Server enables AI assistants to execute PowerShell scripts and receive the output in real-time. Developed by Doug Finke, this lightweight Python server uses FastMCP to create a bridge between AI tools like GitHub Copilot and PowerShell functionality. The implementation securely processes PowerShell code strings through subprocess calls, making it particularly valuable for AI agents that need to analyze data, automate Windows tasks, or interact with PowerShell modules without leaving their interface. It integrates seamlessly with VSCode Insiders in agent mode, allowing for powerful PowerShell capabilities within AI-assisted workflows."
dhakalnirajan,blender-open-mcp,16,,"Blender Open MCP is a server implementation that integrates Blender with local AI models via Ollama using the Model Context Protocol. Developed by Nirajan Dhakal, it enables controlling Blender through natural language prompts, allowing users to perform 3D modeling tasks like creating primitives, modifying objects, applying materials, and rendering images. The server includes optional PolyHaven integration for downloading and using assets directly within Blender, and features a Blender add-on that provides a user interface for seamless communication between the AI model and the 3D software."
dhartunian,cockroachdb-mcp-server,3,,"This MCP server connects to a CockroachDB instance, exposing database and table schemas as resources and enabling SQL query execution as tools. It provides prompts for query analysis and allows access to cluster metadata. The server is designed to integrate CockroachDB functionality into AI-assisted workflows, making it useful for database exploration, query optimization, and cluster management tasks."
dhkts1,sequentialstory,9,3388,"A Model Context Protocol server that provides two complementary tools for structured problem-solving: Sequential Story and Sequential Thinking. Sequential Story structures problems as narrative sequences with characters, settings, and plot points to make complex concepts more memorable, while Sequential Thinking offers a pure Python implementation for organizing problems as thought sequences. Both approaches support branching, revision, and visual formatting of elements, making them effective mnemonic techniques for enhancing memory retention and problem understanding. The server is configurable to enable either or both tools based on environment variables, and integrates seamlessly with AI systems through the MCP protocol."
jxnl,apple-mcp,6,,"Apple MCP tools provides native macOS integration for AI assistants, enabling access to Apple applications like Contacts, Notes, Messages, Mail, Reminders, Calendar, and Maps. Developed by Dhravya Shah, this TypeScript implementation uses JXA (JavaScript for Automation) and AppleScript to interact with macOS applications, allowing AI assistants to perform tasks such as sending messages, creating notes, managing reminders, searching emails, and getting directions. The server features both eager and lazy loading modes for reliability, making it particularly valuable for users who want their AI assistant to interact with their personal data and Apple ecosystem without leaving the conversation context."
dhravya,apple-mcp,1377,19183,"This MCP server implementation provides a bridge to Apple's native applications, enabling AI assistants to interact with Contacts, Notes, and Messages. Developed by Dhravya Shah, it offers tools for searching and retrieving contacts, managing notes, and sending messages. The server is built using TypeScript and Bun, integrating with the Model Context Protocol SDK. It focuses on secure handling of personal data and robust error management, making it suitable for AI applications that need to automate tasks within Apple's ecosystem. The implementation is designed for easy setup within the Claude Desktop environment and is particularly useful for personal productivity and communication workflows."
dhrishp,mcp-post-linkedin,0,,"LinkedIn Posting Service MCP Server enables AI assistants to publish content directly to LinkedIn profiles. Built with TypeScript, it provides a tool for creating posts with customizable visibility settings, support for text content, media attachments, and link sharing with thumbnails. The implementation authenticates using LinkedIn's API via access tokens and user IDs, making it ideal for social media management, content marketing, and professional networking tasks where automated LinkedIn posting is required."
dhso,remote-mcp,1,,"Remote-MCP provides a lightweight API bridge for accessing MCP functionality over HTTP, built with Python 3.10 and Starlette. Developed by dhso, this implementation containerizes MCP services in a minimal Alpine-based Docker image, making it easy to deploy and scale in distributed environments. The server exposes MCP capabilities through a web interface, allowing clients to interact with MCP tools remotely without requiring direct library integration in their applications."
shimapon,mcp-server-diceroll,1,180,"A simple dice rolling MCP server that provides a tool for generating random dice rolls. The server implements a single tool called 'roll_dice' that accepts parameters for the number of faces on the dice and how many times to roll, returning both individual roll results and their sum. It uses the Model Context Protocol's stdio transport for communication and is built with TypeScript, leveraging the Zod library for input validation and schema generation."
atuinturtle,dice-thrower-mcp-server,0,,"A simple dice rolling server that enables AI assistants to simulate rolling any number of dice with any number of sides. Built with TypeScript and the MCP SDK, it provides a single tool for generating random dice rolls and calculating their sum, making it useful for tabletop gaming applications, random number generation, or probability demonstrations. The implementation focuses on a clean, minimal approach with input validation to ensure reasonable dice parameters."
dicklesworthstone,llm_gateway_mcp_server,17,,"A unified gateway server for managing interactions with multiple LLM providers (OpenAI, Anthropic, DeepSeek, Gemini) with built-in cost optimization, caching, and monitoring. Features include automatic model selection based on task requirements, semantic caching to reduce redundant API calls, detailed usage analytics, and a CLI for direct interaction. The implementation focuses on reliability with comprehensive error handling, request retries, and rate limiting, making it particularly valuable for production deployments that need to balance performance and costs across multiple LLM providers."
cybersiddhu,dcr-mcp,0,,"A lightweight MCP server for generating git commit message summaries using OpenAI. Built with the mcp-go framework, this tool enables developers to analyze repository commit histories by filtering commits by date range and author, then generating human-readable markdown summaries that highlight key changes and their business impact. The implementation focuses on providing a streamlined, developer-friendly approach to understanding project evolution through commit message analysis."
didlawowo,mcp-collection,7,,"This Pulumi MCP implementation, developed by didlawowo, provides a streamlined interface for infrastructure-as-code operations. Built with Pulumi's cloud development platform, it offers a foundation for managing cloud resources programmatically. The implementation focuses on simplicity, with a basic project structure and Sonar integration for code quality analysis. It's particularly useful for tasks like automating cloud infrastructure deployment, managing multi-cloud environments, or integrating infrastructure management into CI/CD pipelines, enabling efficient cloud resource orchestration without requiring deep knowledge of individual cloud provider APIs."
diegofornalha,mcp-shell-server,0,,"MCP Shell Server provides a secure way to execute shell commands through the MCP protocol, with robust validation and safety features. The implementation includes command whitelisting through environment variables, directory validation to prevent unauthorized access, support for input/output redirection and command pipelines, and timeout handling for long-running processes. Built with Python using asyncio for non-blocking execution, it offers a clean API for executing commands with proper error handling and resource cleanup, making it ideal for workflows requiring controlled shell access within AI assistant conversations."
diegofornalha,mcp-server-serper,0,,"The Serper MCP Server provides AI assistants with web search capabilities through integration with the Serper API. Built by Diego Fornalha, it supports various search types including web, news, images, shopping, and YouTube searches, with both TypeScript and Python implementations available. The server can be deployed via Docker or run locally, offering both stdio and Server-Sent Events (SSE) communication protocols. This implementation is particularly useful for workflows requiring real-time web information retrieval, content research, and data gathering directly within AI assistant conversations."
junjiem,dify-plugin-mcp_compat_dify_tools,7,,"MCP Compatible Dify Tools is a bridge plugin that enables Dify's tool ecosystem to work with MCP-compatible AI assistants. It provides two key endpoints: an SSE endpoint for establishing streaming connections and a messages endpoint that handles tool discovery and execution. The plugin converts Dify tool definitions into MCP-compatible formats, allowing AI assistants to discover available tools and invoke them through a standardized interface. This implementation is particularly useful for organizations already using Dify who want to extend their existing tools to work with any MCP-compatible AI assistant without duplicating tool configurations."
dillip285,mcp-dev-server,1,,"This MCP development server, created for Claude to manage software projects, provides comprehensive project context awareness and code execution through Docker environments. It integrates with Git for version control and offers file system operations, template-based project creation, and build/test capabilities. The server is built using Python 3.12+ and leverages libraries like FastAPI, aiohttp, and GitPython to deliver its functionality. It's designed for AI-assisted software development workflows, enabling use cases such as automated code analysis, intelligent refactoring suggestions, and seamless project management across multiple languages and frameworks."
dillip285,mcp-terminal,5,,"This MCP terminal server, developed by dillip285, provides a secure environment for executing commands within allowed paths. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a controlled interface for running system commands, ensuring safety and limiting access to specified directories. The implementation stands out by combining the flexibility of a command-line interface with the security constraints necessary for AI-assisted operations. It's particularly useful for AI assistants or applications needing to perform system-level tasks, enabling secure file management, script execution, or system monitoring while maintaining strict control over the accessible filesystem areas."
HEAD,kubernetes-listpods,0,,"Kubernetes ListPods MCP server enables Claude to interact with Kubernetes clusters by providing a tool to list pods in specified namespaces. Built with Go using the official Kubernetes client libraries and the mcp-go framework, it reads from the user's kubeconfig file to establish cluster connections. The implementation handles dynamic client creation, resource mapping, and pod retrieval through a simple interface that requires only a namespace parameter. This tool is particularly useful for DevOps workflows, cluster monitoring, and troubleshooting Kubernetes deployments directly within Claude conversations."
dion-hagan,mcp-server-spinnaker,0,764,"This MCP server implementation for Spinnaker, developed by Dion Hagan, enables AI models to interact with Spinnaker deployments, pipelines, and applications through a standardized interface. It provides tools for retrieving application and pipeline data, as well as triggering pipeline executions. The server maintains context about Spinnaker deployments and refreshes it periodically. Built with TypeScript and leveraging Express.js, it offers a RESTful API and WebSocket support for real-time updates. This implementation is particularly useful for DevOps teams and SREs looking to incorporate AI-driven decision making into their CI/CD processes, enabling use cases like automated deployment management, intelligent pipeline orchestration, and AI-assisted incident response."
direkt,mcp-test,0,,"This SQLite MCP server implementation enables AI assistants to analyze log files by creating and querying a structured database from compressed log data. It processes gzipped log files into an SQLite database with tables for logs, stack traces, and parsing errors, while providing tools to extract error data to Parquet format for further analysis. The server supports querying by log level, timestamp, and module, making it valuable for troubleshooting application issues, identifying error patterns, and generating insights from large volumes of log data."
dishant27,twitter-mcp,1,,"Twitter-MCP is a server implementation that provides AI assistants with access to Twitter's API capabilities through the Model Context Protocol. Developed by Dishant27, it enables posting tweets, searching for content, managing user profiles, and handling follower relationships. The server is built with TypeScript and includes Python sample code for common Twitter operations. It features robust error handling for rate limits and authentication issues, making it suitable for applications that need to integrate Twitter functionality into AI workflows without direct API access."
disler,aider-mcp-server,104,,"Aider MCP Server enables Claude Code to offload AI coding tasks to Aider, reducing costs and enhancing development efficiency. The server exposes two main tools: aider_ai_code for implementing code changes based on natural language prompts, and list_models for discovering available AI models. By delegating specific coding tasks to Aider while maintaining Claude Code for orchestration and review, developers gain more control over their AI coding workflow and can leverage different models for different aspects of development."
disler,just-prompt,72,,"Just Prompt is a lightweight MCP server that provides a unified interface to multiple LLM providers including OpenAI, Anthropic, Google Gemini, Groq, DeepSeek, and Ollama. It offers tools for sending prompts to multiple models in parallel, automatic model name correction, and saving responses to files. The implementation supports provider shorthand notation, thinking tokens for Claude models, and includes comprehensive test coverage for all providers. Ideal for developers who need to interact with multiple LLM APIs through a single, consistent interface."
distrihub,mcp-google-workspace,1,,"This MCP server implementation provides a bridge between Google Workspace services (specifically Google Drive and Google Sheets) and MCP-compatible clients like AI assistants. It offers capabilities for file management in Drive and data manipulation in Sheets, enabling tasks such as listing files, reading/writing spreadsheet data, and creating new documents. Built in Rust for performance, it's designed to integrate smoothly into larger agent workflows and compositions, making it valuable for automating document-centric tasks and data analysis within the Google ecosystem."
divslingerx,mcp-server,0,,"This MCP server, developed for web search capabilities, provides a Puppeteer-based interface for AI assistants to perform Google searches and extract structured results. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a containerized solution using Docker for easy deployment and scalability. The implementation focuses on headless browser automation, allowing for dynamic content retrieval and parsing. It's particularly useful for enhancing AI models with real-time web data, enabling tasks like information gathering, fact-checking, or content generation with current search results, while operating within a controlled environment that can handle modern web technologies and JavaScript-rendered content."
divyamagg24,spotifymcp,0,,"Spotify MCP Server provides a bridge between Claude and the Spotify API, enabling retrieval of artist information through a standardized tool. Built with TypeScript and the Model Context Protocol SDK, it currently supports fetching artist details and is designed to be extensible for future music-related queries like retrieving top tracks or creating playlists. The implementation simplifies interaction with Spotify's API by abstracting complex authentication and request handling."
divyanshkushwaha,github-mcp-server-claude,0,,"GitHub MCP Server provides a bridge to the GitHub API, enabling AI assistants to interact with GitHub data through three key functions: retrieving user information, accessing repository details, and fetching authenticated user data. Built with Python using the FastMCP framework, it handles authentication through GitHub tokens stored as environment variables and includes comprehensive error handling for HTTP status errors and timeouts. This implementation is particularly valuable for workflows requiring GitHub data retrieval directly within Claude conversations, making it ideal for code collaboration, repository exploration, and user profile analysis."
divyanshu-vashu,mcp_server,0,,"UITemplateServer provides a resource-based interface for AI assistants to access and utilize UI components from the AppointySaastak library. Built with the Model Context Protocol SDK, it serves login interface templates (both basic and modern variants) with their associated HTML, CSS, and JavaScript files. The server implements robust error handling and metadata enrichment, making it ideal for AI-powered code generation workflows where the LLM needs to combine UI templates with backend code. This implementation enables seamless integration between AI assistants and pre-built UI components, streamlining the development of login interfaces without requiring manual code retrieval."
djalal,quran-mcp-server,21,,"Quran MCP Server provides a bridge to the Quran.com API v4, enabling AI assistants to access Islamic scripture and related resources. Built with TypeScript and the Model Context Protocol SDK, it offers tools for retrieving chapters, verses, translations, tafsirs (commentaries), and audio recitations from the Quran. The implementation features robust error handling, request validation using Zod schemas, and intelligent caching to improve performance while reducing API load. This server is particularly valuable for researchers, students, and anyone seeking to incorporate Quranic references into their AI interactions without switching to external resources."
djkz,bruno-api-mcp,0,,"Bruno API MCP Server provides a bridge between AI assistants and Bruno API collections, enabling execution of HTTP requests defined in Bruno's .bru format through the Model Context Protocol. The server automatically loads API collections, parses environment variables, and exposes each request as a callable tool with appropriate schemas, making it valuable for testing APIs, automating workflows, and integrating external services directly from AI conversations without manual request configuration."
djvosper,mcp-pptx,2,,"PowerPoint Manager MCP server enables Claude to create and manipulate PowerPoint presentations directly within conversations. Built with FastMCP and python-pptx, it provides tools for creating professional presentations with customizable slides, applying formatting themes, and generating slide previews. The implementation handles structured content like bullet points, text formatting, and slide layouts while saving presentations to an accessible user directory, making it ideal for quickly generating business presentations, educational materials, or visual content without leaving the Claude interface."
d-kimuson,esa-mcp-server,20,880,"This esa MCP server, developed by d-kimuson, provides integration with the esa.io API for team collaboration and knowledge management. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for searching and retrieving esa posts. The implementation focuses on simplifying access to esa.io functionality through a standardized MCP interface, with features like mock data generation for testing. It's particularly useful for AI assistants and applications needing to incorporate team knowledge and documentation, enabling use cases such as information retrieval, content summarization, and collaborative writing without directly dealing with the complexities of the esa.io API."
d-klotz,perplexity-mcp-ts,0,,"Perplexity AI MCP server provides AI assistants with direct access to Perplexity's web search capabilities through a standardized interface. The implementation exposes a web_search tool that leverages Perplexity's API to perform internet searches and return AI-generated answers with source citations. Built with TypeScript and the MCP protocol, it handles authentication via API keys, supports multiple Perplexity models (sonar, sonar-pro, sonar-reasoning-pro), and manages error states appropriately. This server is particularly valuable for users who need to incorporate up-to-date web information into their AI assistant conversations without switching contexts."
dkmaker,mcp-function-app-tester,4,,"This MCP server, developed by Christian Pedersen, enables testing of Azure Function Apps through Cline. Built with TypeScript, it provides a command-line interface for interacting with Function App endpoints using various HTTP methods. The implementation supports custom headers, request body handling, and multiple authentication methods including Basic, Bearer Token, and API Key. It's designed for developers working with Azure Function Apps who need a streamlined way to test and debug their endpoints, offering a bridge between natural language interactions and Azure serverless functions. The tool is particularly useful for scenarios involving rapid prototyping, automated testing, or AI-assisted Azure Function App development."
dkpoulsen,flutter-tools,3,,"This MCP server, developed by dkpoulsen, provides tools for interacting with the Flutter SDK. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers functionalities for analyzing and fixing Dart/Flutter files. The implementation focuses on two main tools: 'get_diagnostics' for retrieving Flutter/Dart diagnostics, and 'apply_fixes' for applying Dart fix suggestions to files. By connecting AI models with Flutter development tools, this server enables scenarios such as automated code analysis, error detection, and code improvement suggestions. It's particularly useful for AI-assisted Flutter development, enabling seamless integration of AI capabilities into the Flutter development workflow."
dkruyt,mcp-hetzner,5,,"A Model Context Protocol server for Hetzner Cloud API, developed by Dennis Kruyt, that enables language models to manage cloud infrastructure resources through structured functions. The implementation provides tools for creating and managing servers, volumes, firewalls, and SSH keys on the Hetzner Cloud platform, with comprehensive error handling and detailed response formatting. It supports both stdio and SSE transport modes, making it compatible with Claude Code and other MCP clients, and is particularly useful for AI-assisted cloud infrastructure management, automated provisioning, and infrastructure-as-code scenarios."
dkvdm,onepassword-mcp-server,2,,"OnePassword MCP Server provides a secure bridge between AI assistants and 1Password credentials through the Model Context Protocol. This Python-based implementation enables Claude and other AI assistants to retrieve stored credentials from 1Password vaults using service account tokens, eliminating the need to expose sensitive information directly in prompts. The server exposes a single tool for retrieving username/password pairs by item name, making it particularly valuable for workflows where AI assistants need authenticated access to web services while maintaining proper credential security practices."
dlwjdtn535,mcp-bybit-server,2,,"MCP Bybit Server provides a bridge to the Bybit cryptocurrency exchange API, enabling AI assistants to perform market data retrieval, account management, and order execution operations. Developed by Dana K. Williams, this Python implementation offers a comprehensive set of tools for interacting with Bybit's Unified Trading API v5, including functions for retrieving orderbooks, candlestick data, wallet balances, and placing/managing orders across spot and futures markets. The server requires Bybit API credentials and can be deployed as a Docker container, making it particularly useful for algorithmic trading, market analysis, and portfolio management applications."
HEAD,mcp-server,705,,"This MCP server, developed by dmayboroda, enables AI assistants like Claude to perform RAG (Retrieval-Augmented Generation) on local files. Built in Python and leveraging the uv package manager, it integrates seamlessly with MCP clients through a simple configuration file. The server allows the client to search and retrieve context from the user's local documents, enhancing its ability to provide relevant and personalized responses. By granting access to private or offline information sources, this implementation extends the client's knowledge base beyond its training data, making it particularly useful for tasks involving confidential documents, personal notes, or frequently updated local resources."
dmontgomery40,mcp-3d-printer-server,18,827,"This MCP server implementation provides a bridge between AI assistants and various 3D printer management systems, including OctoPrint, Klipper, Duet, Repetier, and Bambu Labs printers. Developed by David Montgomery, it offers tools for printer control, file management, and advanced STL file manipulation. The server is designed for use cases requiring 3D printing integration, such as remote printer monitoring, automated print job management, and custom model modifications."
dmontgomery40,mcp-local-server,3,,"This BirdNet-Pi MCP server, developed by DMontgomery40, integrates BirdNet-Pi's bird detection capabilities with a FastAPI-based JSON-RPC interface. It provides functions for retrieving bird detections, detection statistics, audio recordings, and daily activity data. The server abstracts BirdNet-Pi's functionality, offering a standardized way for AI assistants to access and analyze bird detection data. By connecting AI systems with BirdNet-Pi's acoustic monitoring capabilities, this implementation enables applications such as automated bird species identification, habitat monitoring, and ecological research. It is particularly useful for ornithologists, conservationists, and citizen scientists who want to leverage AI for analyzing bird populations and behaviors."
dmontgomery40,mcp-server-birdstats,1,361,"This MCP server for BirdNET-Pi and eBird analysis, developed by David Montgomery, enables AI assistants to cross-reference bird detection data from BirdNET-Pi/BirdWeather stations with eBird's extensive observation database. It integrates the BirdWeather and eBird APIs to provide tools for querying detections, species information, and observation data using natural language. Built with TypeScript and the Model Context Protocol SDK, it implements data integrity principles and offers data-driven visualizations through React artifacts. The server is designed for ornithologists, bird enthusiasts, and ecological researchers, enabling use cases like rare bird identification, migration pattern analysis, and local biodiversity assessment."
dmontgomery40,mcp-canvas-lms,7,,"This MCP server, developed by DMontgomery40, provides integration between AI assistants and the Canvas learning management system API. It offers tools for managing courses, assignments, enrollments, and grades within Canvas. The server leverages TypeScript for type safety and modular architecture to enhance maintainability. Key features include course creation/updating, assignment management, grade submission, and user enrollment. By bridging AI capabilities with Canvas's educational platform, this implementation enables AI-assisted course administration and student management. It is particularly useful for scenarios requiring automated course setup, bulk assignment creation, or AI-guided grading assistance in educational institutions using Canvas LMS."
dmontgomery40,deepseek-mcp-server,197,6941,"This DeepSeek MCP server, developed by David Montgomery, enables seamless integration of DeepSeek's advanced language models with MCP-compatible applications like Claude Desktop. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a chat completion tool with customizable parameters such as model selection, temperature control, and token limits. The implementation focuses on simplifying access to DeepSeek's powerful AI capabilities through a standardized interface. It's particularly useful for developers and researchers looking to incorporate state-of-the-art language models into their applications without dealing directly with DeepSeek's API intricacies, enabling use cases like AI-assisted writing, code generation, and complex reasoning tasks."
dmontgomery40,meta-mcp-server,10,1145,"This Meta MCP Server, developed by David Montgomery, enables AI assistants to dynamically create customized MCP servers. It utilizes the Model Context Protocol SDK to manage tools and resources, automating the creation of directories and files for new servers. The implementation focuses on flexibility, allowing users to specify the structure and content of generated servers. By abstracting the complexities of server setup, this tool streamlines the process of creating specialized MCP servers for various AI applications. It is particularly useful for developers and researchers who need to rapidly prototype or deploy custom MCP servers tailored to specific AI tasks or integrations."
dnakov,frida-mcp,34,2191,"Frida MCP provides a bridge between AI systems and mobile/desktop applications through Frida's dynamic instrumentation toolkit. This implementation enables AI assistants to interact with running processes across devices, offering capabilities like process management, device enumeration, JavaScript execution, and script injection. Built with the official MCP Python SDK, it features an interactive JavaScript REPL with real-time execution, comprehensive error handling, and progress tracking for long-running operations. The server is designed for seamless integration with Claude Desktop and supports all MCP transport methods, making it valuable for application analysis, debugging, and security testing workflows."
radareorg,radare2-mcp,39,,"Radare2 MCP Server provides a direct bridge between AI assistants like Claude and the radare2 binary analysis framework. This implementation enables AI tools to perform sophisticated binary analysis tasks including opening files, running commands, analyzing code, and disassembling instructions through a simple stdin/stdout communication model. The server exposes radare2's capabilities as MCP resources and tools, making it particularly valuable for reverse engineering workflows, malware analysis, and debugging applications without leaving the AI assistant conversation interface."
dncampo,fiware-mcp-server,2,,"FIWARE MCP Server provides a bridge between AI assistants and FIWARE Context Brokers, enabling interaction with IoT data through natural language. This implementation offers tools for checking broker versions, querying entities, and publishing or updating data in the Context Broker using NGSI-LD format. Built with FastMCP, the server includes robust error handling and timeout management, making it valuable for users who need to monitor and control IoT devices or access contextual data without leaving their AI assistant interface."
dnullp,bilibili-mcp-server,1,,"Bilibili-mcp-server is a Go-based MCP server that provides a bridge to the Bilibili API, enabling AI assistants to interact with the popular Chinese video-sharing platform. Developed by DnullP, this implementation offers tools for retrieving user profile information, listing followed accounts, and finding videos through both v1 (tools) and v2 (resource) interfaces. The server requires user authentication via cookies stored in a configuration file and leverages the CuteReimu/bilibili Go library for API interactions. It can be compiled for both Windows and Linux environments, making it useful for applications that need to access Bilibili account data or content discovery without direct API integration."
dongprojectteam,mcp-docent-server,2,,"A Docent Server implementation that enables AI assistants to generate descriptions of images through the MCP framework. Built with TypeScript and Node.js, this server leverages the FastMCP library and OpenAI's API to provide image description capabilities. The implementation registers a specialized docent tool that processes image inputs and returns detailed descriptions, making it particularly useful for accessibility applications, content analysis, and enhancing AI interactions with visual media."
docherty,contextmgr-mcp,1,,"ContextMgr MCP server provides a structured workflow management system for software development projects, enabling AI assistants to maintain context across development sessions. Built with Node.js and TypeScript, it implements a state management architecture that tracks projects through triage, planning, development, and QA phases while maintaining checkpoints for seamless resumption. The server offers tools for creating and managing projects, work packages, and tasks with comprehensive tracking of file changes, dependencies, and progress. This implementation excels at maintaining development context during interruptions, making it particularly valuable for complex projects requiring consistent workflow management and quality control."
graphfied,mcp-claude-desktop-connect,1,,"This MCP server implementation provides a documentation search tool that allows Claude to retrieve the latest documentation for popular Python libraries including LangChain, LlamaIndex, and OpenAI. It uses the Serper API to perform targeted Google searches within specific documentation domains, then fetches and extracts the content from the search results. The implementation is lightweight, requiring only a few dependencies (BeautifulSoup, httpx, and MCP), making it easy to integrate into existing workflows for developers who need quick access to up-to-date library documentation without leaving their conversation with Claude."
packages,mcp-server,10,366,"A Model Context Protocol (MCP) server implementation for Dodo Payments, enabling secure payment processing capabilities for AI applications."
doggybee,mcp-server-ccxt,7,744,"A Model Context Protocol (MCP) server implementation for CCXT, a cryptocurrency trading library with support for many exchanges. This server allows AI assistants to access real-time cryptocurrency market data, including prices, order books, and trading information across multiple exchanges."
doggybee,mcp-server-leetcode,1,,"This LeetCode MCP server provides AI assistants with structured access to LeetCode's problem database, user profiles, and contest information through GraphQL queries. Built with TypeScript and the Model Context Protocol SDK, it offers tools for retrieving daily challenges, searching problems by difficulty and tags, accessing user submissions, and fetching contest rankings. The implementation features comprehensive error handling and a modular architecture with clearly defined resources using custom URI schemes. It's particularly useful for developers and coding interview candidates who want to explore LeetCode problems, track their progress, or analyze contest performance through natural language interactions."
dogukanakkaya,pulumi-mcp-server,2,,"Pulumi MCP Server provides a bridge to the Pulumi Cloud API, enabling AI assistants to manage infrastructure as code through Pulumi stacks. The server exposes capabilities to create new stacks and list existing ones across organizations and projects, with validation using Zod to ensure proper input parameters. Built with TypeScript and the Model Context Protocol SDK, it uses environment variables for authentication and implements both high-level and low-level server interfaces. This implementation is particularly valuable for DevOps workflows where infrastructure management needs to be integrated directly into AI assistant conversations."
dojoengine,sensei-mcp,5,,"Sensei MCP server provides specialized guidance for Dojo development on the Starknet ecosystem, offering expert assistance with Cairo programming and the Entity Component System (ECS) framework. Built with TypeScript and the Model Context Protocol SDK, it loads specialized prompts and resources for different aspects of Dojo development including models, systems, testing, and token standards. The server registers these as tools that Claude can access during conversations, making it particularly valuable for developers building onchain games and applications who need contextual, framework-specific guidance without leaving their development workflow."
domdomegg,airtable-mcp-server,111,11828,"This MCP server, developed by domdomegg, enables AI assistants like Claude to interact with Airtable databases. Built in TypeScript, it provides capabilities for querying and modifying Airtable bases, tables, fields, and records through a standardized interface. The implementation stands out by offering full read/write access to Airtable's rich data model and metadata. By connecting AI capabilities with structured data in Airtable, this server allows AI systems to analyze, manipulate, and act on user-defined datasets. It is particularly useful for automating data entry workflows, building AI-powered data analysis tools, or creating natural language interfaces to Airtable-based applications."
domoteek,mcp-server-airbnb,0,,"MCP server for interacting with Airbnb's search and listing details functionality. Built by Domoteek, it provides tools for searching vacation rentals with filters like location, dates, and guests, as well as retrieving detailed property information including amenities, policies, and pricing. The implementation handles robots.txt compliance, parses Airbnb's HTML structure, and formats responses in a clean, consistent way - making it valuable for travel planning assistants and vacation rental analysis tools."
donghao1393,mcp-dbutils,55,62090,"MCP Database Utilities is a unified database access service that supports multiple database types (PostgreSQL, SQLite, and MySQL). Through its abstraction layer design, it provides a simple and unified database operation interface for MCP servers."
donmorr,alphavantagemcpserver,0,,"This Alphavantage MCP server, developed by Cesar Alvernaz and subsequently improved, provides a bridge to the Alphavantage stock market data API. Built with Python and leveraging the MCP framework, it offers tools for retrieving real-time and historical financial data. The implementation focuses on simplifying access to stock market information, with features like API key management and error handling. It's particularly useful for AI assistants and applications needing up-to-date financial data, enabling use cases such as portfolio analysis, market trend identification, and automated trading strategy development without directly dealing with the complexities of the Alphavantage API."
doobidoo,mcp-memory-dashboard,1,,"This MCP memory dashboard, developed using React and Vite, provides a user interface for managing and visualizing memory usage in MCP implementations. It leverages modern web technologies like Tailwind CSS for styling and Shadcn UI for component design. The dashboard offers real-time memory monitoring, allowing users to track and analyze memory consumption across different MCP processes. By providing an intuitive interface for memory management, it helps developers optimize performance and identify potential memory leaks in their MCP applications. This tool is particularly useful for MCP developers working on resource-intensive applications, system administrators monitoring MCP deployments, or anyone needing to maintain efficient memory usage in MCP-based systems."
doobidoo,mcp-memory-service,165,,"This MCP implementation, built with Python, provides a versatile framework for integrating with ChromaDB, a vector database for AI applications. It utilizes sentence transformers for efficient text embedding and tokenization, enabling advanced natural language processing capabilities. The implementation supports websocket connections, allowing for real-time data exchange and updates. By combining these technologies, it offers a robust solution for building AI-powered applications that require semantic search, document similarity comparisons, and content recommendation systems. This implementation is particularly well-suited for use cases such as intelligent document retrieval, content categorization, and personalized information delivery across various domains."
doomdagadiggiedahdah,iacr-mcp-server,2,,"This MCP server, developed for the IACR Cryptology ePrint Archive, provides a bridge between AI models and cryptographic research papers. Built with TypeScript and leveraging libraries like axios, cheerio, and xml2js, it offers tools for parsing and retrieving information from the ePrint Archive. The implementation focuses on efficient data extraction and processing, making it accessible for AI assistants or applications needing to analyze or query cryptographic research. It's particularly useful for tasks like literature reviews, trend analysis in cryptography, or staying updated with the latest cryptographic developments, enabling programmatic access to a vast repository of cryptographic knowledge without requiring deep understanding of web scraping or XML parsing."
doronaviguy,mpc-0x,0,,"MCP-0x provides real-time Ethereum address information across multiple blockchain networks. Built with Node.js using the FastMCP framework, it offers tools to fetch contract and address details while supporting Server-Sent Events (SSE) for live updates when blockchain data changes. The implementation includes a web demo interface, comprehensive testing scripts, and flexible deployment options through both HTTP and command-line interfaces. This server is particularly valuable for applications requiring continuous monitoring of on-chain activity without polling, making it ideal for DeFi dashboards, wallet applications, and blockchain analytics tools."
dortegau,mcp-proxy-sidecar,1,257,"A fork of the JetBrains MCP Server that adds WebSocket monitoring capabilities, allowing real-time observation of all MCP tool calls between clients (like Claude Desktop) and JetBrains IDEs. Created by Daniel Ortega, this proxy sidecar maintains full compatibility with the original implementation while broadcasting detailed information about each endpoint call and its arguments through WebSocket on port 27042. It's particularly useful for developers who need visibility into MCP interactions for debugging, monitoring, or extending IDE integration functionality."
dosugamea,voicevox-mcp-server,3,,"Voicevox-MCP-Server is a TypeScript implementation that connects AI assistants to the VOICEVOX text-to-speech engine. Developed by Dosugamea, this server uses the mcp-framework to expose VOICEVOX's voice synthesis capabilities through a standardized interface. The implementation supports both default transport mechanisms and Server-Sent Events (SSE) for Windows platforms, with configurable speaker IDs and API endpoints through environment variables. It's particularly valuable for applications requiring Japanese voice synthesis directly from AI assistant conversations, with Docker support for cross-platform deployment."
flow-product,doubao-search-mcp,0,,"Doubao Search MCP provides a bridge to Search1API, enabling Claude to perform web searches, crawl websites, extract sitemaps, fetch news articles, and run reasoning tasks through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, it supports multiple search services with configurable parameters like result limits and content crawling depth. The implementation includes specialized tools for image search and a unique feature that integrates with Coze AI to generate search and browse plans, making it particularly valuable for complex research tasks requiring structured exploration of web content."
douglarek,unsplash-mcp-server,4,,"Unsplash MCP Server provides a bridge between AI assistants and the Unsplash image search API, enabling image discovery directly within AI workflows. Built with Go using the mark3labs/mcp-go library, it exposes a search_photos tool that supports filtering by keywords, pagination, sorting, color, and orientation parameters. The server requires an Unsplash API access key and is designed for integration with Cursor editor, making it particularly useful for developers and content creators who need to find and incorporate high-quality images into their projects without leaving their AI-assisted environment."
dpflucas,mysql-mcp-server,9,1567,"MySQL MCP Server provides read-only access to MySQL databases, allowing AI assistants to list databases, explore table schemas, and execute SELECT queries with built-in security safeguards. Developed by Diogo Lucas, it implements strict query validation to prevent SQL injection and data modification, enforces query timeouts and row limits to protect resources, and can be easily configured through environment variables. The server is particularly valuable for workflows requiring database exploration and data analysis without compromising database security or performance."
dragomiralin,openstack-mcp-server,4,,"OpenStack MCP Server enables AI assistants to securely execute OpenStack CLI commands through a Spring Boot application. Built by DragomirAlin, it leverages Spring AI's tool callback functionality to provide a bridge between Claude Desktop and OpenStack resources, allowing users to manage servers, projects, flavors, and images through natural language requests. The implementation handles authentication via application credentials, executes commands with proper environment variables, and includes diagnostics capabilities, making it particularly valuable for cloud administrators who want to interact with their OpenStack infrastructure directly through an AI assistant."
dragon1086,kospi-kosdaq-stock-server,22,39390,"This MCP server provides real-time access to KOSPI and KOSDAQ stock market data. Developed by Sangrok Mun, it integrates with the pykrx library to offer tools for retrieving ticker symbols, OHLCV data, market capitalization, fundamental metrics, and trading volumes. The implementation is designed for financial analysts, traders, and researchers who need up-to-date South Korean stock market information. It stands out by offering a streamlined interface to complex financial data through simple MCP tools, making it particularly useful for AI assistants and automated trading systems that require quick access to Korean market insights."
dragonkhoi,mixpanel-mcp,6,,"This MCP server implementation provides a bridge to the Mixpanel API, allowing users to query events data, retention, and funnels. Developed by Khoi Le, it uses TypeScript and Node.js to interface with Mixpanel's analytics platform. The server is designed for use cases requiring on-demand access to Mixpanel data, such as analyzing user cohorts, tracking event trends, or generating custom analytics reports."
dragonkhoi,ramp-mcp,0,,"Ramp MCP provides a bridge to the Ramp API, allowing AI assistants to access and interact with Ramp credit card and spend management data. Built by Khoi Le, this TypeScript implementation requires a Ramp API key and client ID for authentication, and can be installed via Smithery or run locally. The server enables users to query their credit card transactions and other Ramp data directly within MCP clients like Cursor or Claude Desktop, making it useful for financial tracking and spend analysis workflows."
dreamfactorysoftware,df-mcp,1,,"DreamFactory MCP Server enables AI assistants like Claude to directly query your databases through DreamFactory's auto-generated REST APIs. This Node.js server implements the Model Context Protocol (MCP), allowing natural language database interactions while maintaining enterprise-grade security. Connect multiple databases simultaneously, run complex queries using conversational language, and build AI-powered applications without writing custom integrations. Perfect for demos, prototypes, and production systems that need secure AI-to-database communication."
dreyfus92,astro-docs-mcp,1,,"The Astro Docs MCP server provides AI assistants with direct access to Astro documentation, enabling them to help users with Astro-related tasks. Built in TypeScript, it exposes documentation sections as resources with URIs, offers a search tool for finding relevant content, and includes curated prompts for common Astro questions. The server organizes documentation by categories like core concepts, configuration, and deployment, making it valuable for developers seeking assistance with Astro's component-based architecture, content management features, or deployment options without leaving their AI assistant conversation."
drfranko0,mcp,0,,"This LinkedIn Profile Scraper leverages FastMCP and the RapidAPI LinkedIn Profile Scraper API to asynchronously retrieve LinkedIn profile data. Built by DrFranko0, it provides a simple tool for fetching comprehensive profile information including skills and other optional data points like certifications, publications, and honors. The implementation uses httpx for making API requests and structures the data retrieval process through a clean interface that can be integrated with Claude Desktop for AI-powered processing. Ideal for applications requiring LinkedIn data analysis without manual scraping, such as recruitment tools, networking applications, or professional data aggregation services."
drjforrest,mcp-things3,8,,"This MCP server implementation provides integration with the Things3 task management app on macOS. It allows AI assistants to create and manage tasks and projects in Things3 through MCP tools, leveraging AppleScript for data retrieval and x-callback-url for item creation. The server includes specialized functionality for synchronizing projects between Agenda and Things3, making it particularly useful for users who work across both platforms. It enables AI assistants to perform actions like creating new projects, adding to-dos with detailed properties, and listing current tasks, enhancing productivity workflows within the Things3 ecosystem."
dsazz,mcp-jira,2,,"A JIRA integration server for the Model Context Protocol that enables AI assistants to interact with Atlassian JIRA issues directly through conversation. Built by Stanislav Stepanenko, this implementation provides tools to retrieve issue details, list assigned issues, and create tasks from JIRA tickets, all with consistent error handling and markdown formatting. The server uses a modular architecture with clear separation between API clients, formatters, and tool implementations, making it valuable for developers who need to access and manipulate JIRA data without switching context from their AI assistant."
dschuler36,reaper-mcp-server,23,,"This Reaper MCP server, developed for integration with Claude Desktop, provides a bridge between AI assistants and Reaper digital audio workstation projects. Built with Python and leveraging the MCP protocol, it offers tools for finding and parsing Reaper project files. The implementation focuses on extracting structured data from complex audio projects, making it accessible for AI models to analyze track layouts, plugin chains, automation, and other project elements. It's particularly useful for tasks like audio production assistance, project organization, or integrating music production workflows into AI-driven systems, enabling assistants to interact with Reaper projects without requiring deep knowledge of the underlying file format."
dshvadskiy,garmin_mcp,1,,"This MCP server implementation provides a bridge to the Garmin Connect API, allowing AI assistants to access and analyze personal fitness data. Developed by dshvadskiy, it offers tools for retrieving various health metrics including sleep data, steps, activities, heart rate, and more. The server is designed for use cases requiring detailed analysis of personal health and fitness information, such as tracking workout performance, monitoring sleep patterns, or analyzing long-term fitness trends."
dsp,mcp-server-steam,0,,"A Model Context Protocol (MCP) server that provides Steam gaming context to AI assistants. This service integrates with the Steam API to fetch user gaming information and exposes it through the MCP protocol, allowing AI assistants to access and understand users' gaming activities and preferences."
dubin555,clickhouse_mcp_server,6,,"ClickHouse MCP Server enables AI assistants to securely interact with ClickHouse databases through a controlled interface. Built by dubin555, it provides tools for listing tables, reading data, and executing SQL queries while implementing security checks to prevent dangerous operations like INSERT, UPDATE, or DELETE. The server connects to ClickHouse using environment variables or command-line arguments, exposes database schema as resources with detailed table and column descriptions, and returns query results in JSON format. This implementation is particularly valuable for data analysis workflows where users need to explore and query ClickHouse databases without risking data modification."
ducthinh993,mcp-server-endoflife,1,,"This EOL MCP server, developed by the EOL MCP Server team, provides end-of-life status checks for software using the endoflife.date API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized interface for querying software lifecycle information. The implementation focuses on simplicity and ease of use, with proper error handling and TypeScript type safety. It's particularly useful for developers, system administrators, and AI assistants needing to assess software obsolescence risks, enabling use cases such as dependency management, security auditing, and upgrade planning without directly interacting with the endoflife.date API."
duhlink,instagram-server-next-mcp,14,,"This Instagram server, developed for the Model Context Protocol, provides AI assistants with capabilities to interact with Instagram's features and data. It integrates with Instagram's API to enable functionalities like retrieving user profiles, posts, and engagement metrics. The server leverages Puppeteer and Playwright for web scraping capabilities, allowing it to access data not readily available through official APIs. By abstracting Instagram interactions, it enables AI systems to analyze social media trends, manage accounts, and gather insights from Instagram content. This implementation is particularly useful for social media managers, marketers, and researchers who want to leverage AI for Instagram analytics, content strategy, and audience engagement analysis."
dulbrich,familysearch-mcp,0,,"FamilySearch MCP Server provides a bridge between AI assistants and FamilySearch's family history data, enabling natural language interaction with genealogical records. Developed by David Ulbrich, this TypeScript implementation authenticates with FamilySearch credentials and exposes tools for searching person records, viewing detailed information, exploring ancestors and descendants, and searching historical records. The server securely stores user credentials locally and handles token refresh, making it valuable for genealogy researchers who want to access and analyze family history data directly through AI assistants without navigating FamilySearch's web interface."
mtwn105,mcp-server-spring-java,2,,"A Model Context Protocol server implementation built with Spring Boot and Java 21 that provides user management tools for AI assistants. The server integrates with the DummyJSON external API to offer a range of user operations including retrieval, search, creation, updating, and deletion through a standardized MCP interface. It supports both Standard I/O and Server-Sent Events transports in synchronous communication mode, making it suitable for integration with various AI clients that need to perform user management operations."
dumpling-ai,mcp-server-dumplingai,4,582,"This MCP server for Dumpling AI provides a bridge to Dumpling's data extraction and processing API, enabling AI assistants to perform web searches, scrape content, extract structured data, and process various document formats. Built with TypeScript and the MCP SDK, it offers over 20 specialized tools including Google search, YouTube transcript extraction, document conversion, and AI image generation. The implementation handles authentication through API keys and formats all responses as structured JSON, making it particularly useful for research tasks, content analysis, and accessing real-time web information without direct internet access."
ma3u,mcp-dust-server,2,,"MCP Dust Server provides a bridge between AI assistants and Dust agents, enabling real-time conversations through Server-Sent Events (SSE). Built with TypeScript and the Model Context Protocol SDK, it offers two main tools: a simple echo function for testing and a dust-query tool that connects to the Dust API for agent interactions. The server implements session management for context preservation, secure API key handling, and robust error recovery. A companion test client with a web interface allows for easy testing of the server's capabilities. Ideal for developers who want to integrate Dust AI agents into their applications or AI assistants like Claude Desktop and Windsurf IDE."
dustland,genesis-mcp,2,,"Genesis MCP Server provides a bridge between AI assistants and Genesis World simulations, enabling execution of simulation code with customizable parameters. Built with FastMCP, it exposes resources for retrieving world information, tools for running simulations, and prompts for generating simulation templates. The server is containerized with Docker for easy deployment and includes an MCP Inspector for debugging. This implementation is particularly valuable for workflows requiring agent-based simulations, virtual world creation, and analysis of emergent behaviors without leaving the conversation interface."
dvcrn,mcp-server-siri-shortcuts,105,618,"This MCP server provides access to Siri shortcuts functionality on macOS, allowing AI assistants to list, open, and run shortcuts from the Shortcuts app. It dynamically generates tools for each available shortcut, exposing all shortcuts to the LLM for flexible automation. The server uses the macOS 'shortcuts' CLI command under the hood and supports both direct text input and file-based input for shortcut execution."
dvejsada,mcp_media_generator,2,,"This MCP server, developed by georgx22, integrates Amazon Bedrock's Nova Canvas and Nova Reel models to create images and videos. Built with Python and running over SSE, it offers a streamlined interface for AI-powered media generation. The implementation focuses on simplicity and AWS integration, with features like S3 storage and environment variable configuration. It's particularly useful for developers and content creators looking to leverage advanced AI models for media production, enabling use cases such as automated video creation, image generation for marketing, or AI-assisted visual content development without directly dealing with the complexities of Amazon Bedrock APIs."
dwarvesf,mcp-db,2,,"MCP-DB provides a database connectivity server that enables AI assistants to interact with PostgreSQL databases and Parquet files. Built with TypeScript and Node.js, it offers tools for executing SQL queries (read, create, update, delete) against PostgreSQL databases and querying Parquet files using DuckDB, with support for files stored in Google Cloud Storage. The server handles database connections, query execution, and result serialization, making it ideal for data analysis workflows, database management, and extracting insights from structured data sources without requiring direct database access credentials in the conversation."
dweigend,joplin-mcp-server,2,,"Joplin MCP Server provides a bridge between AI assistants and the Joplin note-taking application, enabling direct interaction with notes through a standardized interface. Built by David Weigend using FastMCP, it exposes tools for searching, retrieving, creating, updating, and deleting notes, as well as importing markdown files directly into Joplin. The implementation authenticates with Joplin's REST API using tokens stored in environment variables and transforms API responses into structured data for AI consumption. This server is particularly valuable for users who want to manage their knowledge base, create new content, or search through existing notes without leaving their AI assistant conversation."
dwisiswant0,delve-mcp,13,,"Delve MCP server provides a complete interface to the Delve debugger for Go programs through the Model Context Protocol. It implements all major debugging capabilities including starting debug sessions, setting breakpoints, controlling execution flow, and inspecting program state. The server exposes Delve's functionality as discoverable tools that can be executed by AI assistants, supporting various debug modes (debug, attach, exec, test), core dump analysis, and program tracing. Built with TypeScript using the MCP SDK, it requires Go with Delve installed and optionally Mozilla rr for replay debugging."
dwojtaszek,thinking-tool-server,0,,"A server implementation for logging thoughts and reasoning during AI interactions, built on the Model Context Protocol (MCP) SDK. This lightweight TypeScript server provides a structured way to capture and document the thinking process of AI assistants, making it particularly useful for debugging, auditing decision paths, and improving transparency in AI systems. The implementation includes CI/CD workflows for automated building, testing, and deployment, with security scanning via OSV Scanner to ensure dependency safety. It's packaged as both an npm module and a Docker container for flexible deployment options."
dwrtz,mcpterm,2,,"This MCP server, developed by dwrtz, provides stateful, TUI-compatible terminal sessions for AI assistants. Built with Go and leveraging the mcp-go library, it offers two main tools: 'run' for executing commands in persistent bash sessions, and 'runScreen' for interactive TUI applications. The implementation focuses on maintaining session state, handling control sequences, and supporting multi-line outputs. It's particularly useful for AI systems that need to interact with command-line interfaces, enabling use cases such as file system navigation, text editing in vim, or running interactive programs like Python REPL without losing context between commands."
dxheroes,mcp-devtools,8,610,"MCP DevTools provides integration with popular issue tracking systems like Jira and Linear, enabling AI assistants to retrieve and interact with tickets directly within conversations. Developed by DX Heroes, this TypeScript-based implementation uses a modular architecture with core components for HTTP client functionality and shared TypeScript configurations. The packages are published to npm and follow conventional commits for versioning, making it easy to incorporate ticket management capabilities into AI workflows that require access to project management data without context switching."
dylangroos,nhl-mcp,2,,"NHL API server that provides a comprehensive bridge to official NHL web and stats APIs, enabling retrieval of real-time sports data including team standings, player statistics, game schedules, and roster information. Built with TypeScript and the MCP SDK, it offers a flexible, multi-endpoint approach to fetching NHL data with robust error handling and fallback mechanisms for API reliability."
letsbuildagent,perplexity-tool,2,,"This Perplexity Tool for Claude Desktop, developed by Dylan Kim, integrates Perplexity AI's API with Claude Desktop through the Model Context Protocol. It enables Claude to perform web-based research and provide answers with citations using Perplexity's advanced search capabilities. The implementation, written in Node.js, offers customizable parameters such as temperature, token limits, and search filters. It stands out by combining Claude's conversational abilities with Perplexity's real-time web search, allowing for up-to-date information retrieval. This tool is particularly useful for users needing accurate, cited information on current events, research topics, or any query requiring recent web data."
dynamicendpoints,autogen_mcp,4,,"AutoGen MCP Server provides a bridge between the Model Context Protocol and Microsoft's AutoGen framework, enabling AI assistants to create and manage autonomous agents that can execute code, perform research, and collaborate in multi-agent conversations. Built with TypeScript and Python, this implementation exposes AutoGen's powerful agent capabilities through standardized tools for creating agents, executing one-on-one chats, running group conversations, and executing predefined workflows like code generation and research tasks. The server handles configuration management, agent lifecycle, and conversation orchestration, making it ideal for developers building complex AI systems that require autonomous problem-solving and multi-agent collaboration."
dynamicendpoints,automated-bod-25-01-cisa-microsoft-policies-mcp,2,,"This MCP server, developed by DynamicEndpoints, implements CISA Binding Operational Directive 25-01 security controls for Microsoft 365. It integrates with Microsoft Graph API to enforce and manage security settings, including legacy authentication controls, risk-based access management, multi-factor authentication, application controls, password policies, and privileged role management. The server provides a standardized interface for AI assistants to configure and monitor M365 security settings, abstracting the complexities of Graph API interactions. It is particularly useful for government agencies, security teams, and IT administrators who need to ensure compliance with CISA directives, automate security policy enforcement, and maintain a robust security posture in their M365 environment."
dynamicendpoints,cloudflare-github-backup-mcp,0,,"This Cloudflare to GitHub Backup MCP server, developed by an unnamed author, provides an automated solution for backing up Cloudflare project configurations to GitHub repositories. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers comprehensive backup capabilities for DNS records, Page Rules, Workers, Custom Pages, SSL/TLS settings, Firewall Rules, Access Rules, and Rate Limiting Rules. The server implements error handling, GitHub repository management, and file versioning. By abstracting the complexities of both Cloudflare and GitHub APIs, it enables AI systems to easily manage and version control Cloudflare configurations. This implementation is particularly valuable for DevOps and system administration tasks, facilitating use cases such as disaster recovery, configuration auditing, and multi-environment synchronization."
dynamicendpoints,huntress-mcp-server,1,,"This Huntress API MCP server, developed by the Huntress MCP Server Contributors, enables AI assistants to interact programmatically with Huntress endpoint protection services. It provides tools for account and organization management, agent monitoring, incident report access, and billing information retrieval. The server implements rate limiting and error handling to ensure reliable API interactions. By connecting AI capabilities with Huntress functionality, this implementation empowers assistants to manage cybersecurity operations, analyze threat data, and automate reporting tasks. It is particularly useful for applications requiring real-time security monitoring, incident response coordination, or any scenario where an AI system needs to access and reason about endpoint protection data from Huntress."
dynamicendpoints,netlify-mcp-server,5,,"This MCP server implementation provides comprehensive tools for working with Netlify through their CLI. Developed by DynamicEndpoints, it enables deploying sites, managing deployments, handling environment variables, DNS settings, serverless functions, forms, plugins, and webhooks. Built using TypeScript and integrating the Model Context Protocol SDK, the server focuses on secure API key management and robust error handling. It offers type-safe parameter validation using Zod and is designed for easy setup within various MCP environments. The implementation is particularly useful for AI applications that need to automate web deployment tasks, manage serverless architectures, or integrate continuous deployment workflows with Netlify's platform."
dynamicendpoints,paypal-mcp,0,,"This MCP server implementation provides integration with PayPal's APIs, enabling AI assistants to perform various payment and financial operations. Developed by DynamicEndpoints, it offers tools for managing orders, payments, payouts, invoices, products, and disputes. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on secure API key management and supports Docker deployment. It is particularly useful for AI applications that need to automate e-commerce tasks, handle billing operations, or integrate payment processing into their workflows."
dynamicendpoints,advanced-pocketbase-mcp-server,31,,"This PocketBase MCP server provides a robust interface for AI assistants to interact with PocketBase databases. Built using TypeScript and the PocketBase JavaScript SDK, it offers advanced capabilities for collection management, record operations, user authentication, and database administration. The server abstracts complex PocketBase operations, enabling seamless schema migrations, advanced querying with aggregations, and batch data import/export. It's particularly valuable for developers building AI-powered applications that require flexible, real-time database operations. This implementation excels in scenarios requiring dynamic schema management, sophisticated data querying, and scalable user authentication, making it ideal for rapidly evolving projects in fields like content management, user analytics, and collaborative data platforms."
dynamicendpoints,supabase-mcp,38,,"This Supabase MCP server, developed by DynamicEndpoints, provides AI assistants with a standardized interface to interact with Supabase databases and services. Built using TypeScript and leveraging the Supabase JavaScript client, it abstracts the complexities of Supabase operations, handling authentication, data queries, and real-time subscriptions. The server offers capabilities for managing database records, file storage, and user authentication, enabling AI systems to seamlessly integrate Supabase functionalities. It's particularly valuable for developers and AI researchers working on applications that require scalable, real-time database operations, facilitating use cases such as user management, content delivery, and collaborative data processing within the Supabase ecosystem."
dzplus,ai-mcp-server,1,,"AI-MCP-Server is a Spring Boot application that provides a Model Context Protocol server specifically designed for MySQL query operations. Built using Spring AI (version 1.0.0-M6), it leverages the spring-ai-mcp-server-webmvc-spring-boot-starter to expose MySQL querying capabilities to AI assistants. The server is configured with minimal setup requirements through application.yml, where it's named 'mysqlQuery-mcp-server' and can be enabled or disabled as needed. This implementation allows AI assistants to execute and retrieve data from MySQL databases through a standardized protocol interface, making it particularly useful for data analysis and database management tasks without requiring direct database access."
packages,js,210,,"This MCP server, developed by e2b-dev, enables AI assistants like Claude to execute code using E2B's cloud infrastructure. It provides a bridge between natural language interactions and actual code execution, allowing AI models to run and test code snippets in real-time. The server leverages E2B's secure sandboxed environments to execute code in various languages, with current support for JavaScript and Python. By integrating AI capabilities with E2B's code execution platform, this implementation enhances the ability of AI assistants to debug, prototype, and demonstrate code concepts. It is particularly useful for scenarios requiring interactive coding sessions, automated testing, or hands-on programming tutorials guided by AI."
packages,python,210,,"This MCP server, developed by E2B, enables AI assistants like Claude to execute code securely in E2B's cloud infrastructure. It bridges natural language interactions with real-time code execution in sandboxed environments, currently supporting JavaScript and Python. The server integrates with Claude Desktop and can run standalone, providing flexibility for different use cases. By combining AI capabilities with E2B's code execution platform, this implementation enhances AI assistants' ability to debug, prototype, and demonstrate coding concepts interactively. It is particularly valuable for scenarios requiring hands-on programming tutorials, automated testing, or interactive coding sessions guided by AI, allowing for more dynamic and practical coding assistance."
zh19980811,easy-mcp-autocad,40,,"Easy-MCP-AutoCad is a Python-based server for integrating AutoCAD with the Model Context Protocol, enabling programmatic interaction with AutoCAD through libraries like pyautocad and comtypes. The implementation supports database management via SQLAlchemy and provides a flexible framework for automating CAD-related tasks, with deployment capabilities through PyInstaller."
ebailey78,mcp-memory,2,,"This MCP server provides structured memory management for Claude Desktop, enabling persistent context across chat sessions within project directories. It stores memories as markdown files organized by type (entity, concept, session), indexes them with Lunr.js for efficient retrieval, and offers tools for creating, searching, updating, and relating memories. Designed specifically for project-based work, it helps Claude maintain continuity and build a comprehensive knowledge base about each project over time, making it particularly valuable for long-term collaborations in software development, research, or writing projects."
mcp-ectors,mcp-ectors,27,,"MCP-Ectors is a high-performance, actor-based MCP server that manages multiple routers, supporting tools, prompts, and resources. Developed by Maarten Ectors, it uses the Actix framework to provide a modular architecture where each router can be registered with a unique ID, allowing clients to access different capabilities through a unified interface. The server supports multiple transport protocols including SSE, STDIO, and WASI, making it versatile for various deployment scenarios. Its multi-router design enables composition of different services, with built-in examples like a counter router and hello world router demonstrating how specialized functionality can be exposed through the MCP protocol."
eddydpyl,sketchfab_mcp,0,5643,"This MCP server provides a streamlined interface to the Sketchfab API, enabling users to search for and download 3D models. Developed by Eduardo del Palacio Lirola, it exposes two primary tools: one for searching downloadable models with filtering options for animated or rigged content, and another for downloading models by their unique identifier. The implementation is containerized with Docker for easy deployment and requires a Sketchfab API token for authentication, making it ideal for applications that need programmatic access to Sketchfab's extensive 3D model library."
edgardamasceno-dev,ldoce-mcp-server,0,,"LDOCE MCP Server provides a bridge to the Longman Dictionary of Contemporary English, enabling AI assistants to look up word definitions, examples, and related linguistic information. The implementation uses TypeScript with the Model Context Protocol SDK and leverages tools like Axios, Cheerio, and TurndownJS to scrape and parse dictionary content from the LDOCE website. This server is particularly valuable for enhancing AI assistants with accurate English language definitions and usage examples without requiring context switching to external dictionary resources."
ee0pdt,godot-mcp,84,,"This MCP server implementation provides integration between Godot and the Model Context Protocol, allowing access to the currently open script in the Godot editor. Developed as a TypeScript server with a Godot editor plugin, it enables AI assistants like Claude to interact with Godot scripts, supporting features such as reading current scripts, listing project scripts, and updating script information. The implementation is designed for game developers and AI researchers looking to enhance their Godot development workflow with AI assistance."
egoist,exa-mcp,27,2246,"exa-mcp is a server implementation that provides access to the Exa Search API through the Model Context Protocol. Built with TypeScript and leveraging Polka for HTTP handling, it enables AI assistants to perform web searches with fine-grained control over parameters like search type (neural or keyword), content categories, date ranges, and domain filtering. The server supports both stdio and SSE transport methods, making it compatible with various MCP client implementations. Sponsored by ChatWise, this tool is particularly valuable for AI applications that need up-to-date information from the web with customizable search capabilities."
egoist,fetch-mcp,130,5040,"Fetch-MCP provides a server for retrieving web content and YouTube video transcripts through two specialized tools. The implementation fetches URLs and converts HTML to Markdown by default, with options to return raw HTML or limit content length. It also extracts YouTube video transcripts with timestamps, making it useful for AI assistants that need to reference web content or video information. Built with TypeScript using the Model Context Protocol SDK, it supports both stdio and SSE server modes for flexible integration options."
egoist,ffmpeg-mcp,71,962,"ffmpeg-mcp is a stdio MCP server that provides a standardized interface for common media operations using FFmpeg. Developed by egoist and sponsored by ChatWise, this implementation allows AI assistants to perform video and audio processing tasks like speeding up videos and extracting audio from video files. The server acts as a bridge between natural language commands and FFmpeg's command-line interface, making media manipulation accessible through simple tool calls without requiring users to understand complex FFmpeg syntax."
egoist,shell-command-mcp,20,222,"A shell command execution server for the MCP that allows AI assistants to run system commands in a controlled environment. Developed by egoist, this implementation provides a single tool for executing shell commands with built-in security features through an allowlist system. The server uses the ALLOWED_COMMANDS environment variable to explicitly permit specific commands, preventing unauthorized access to potentially dangerous system operations. It returns command results in YAML format with stdout, stderr, and exit code information. This implementation is particularly useful for scenarios where AI assistants need to interact with the local file system or run specific utilities while maintaining security boundaries."
ejb503,systemprompt-mcp-gmail,5,2545,"This Gmail MCP server, developed by Ejb503, enables AI agents to interact with Gmail accounts through natural language. Built with TypeScript and leveraging the Google APIs, it provides functionality for searching, reading, deleting, and sending emails. The implementation focuses on secure OAuth2 authentication and robust error handling, with features like attachment support and conversation threading. It's particularly useful for AI assistants and applications needing email management capabilities, enabling use cases such as automated email triage, scheduling assistance, and intelligent email composition without dealing directly with the complexities of the Gmail API."
ejb503,systemprompt-mcp-interview,3,3198,"This MCP server, developed by Ejb503, provides an AI-powered interview roleplay system. Built with TypeScript using the Model Context Protocol SDK, it enables dynamic simulation of interview scenarios for training and assessment purposes. The implementation focuses on creating realistic conversational exchanges between an AI interviewer and human interviewee, with customizable interview types, questions, and evaluation criteria. It's particularly useful for job seekers, HR professionals, and career coaches who want to practice and improve interview skills, offering use cases such as mock interviews, feedback generation, and performance analysis without the need for human interviewers."
ejb503,systemprompt-mcp-notion,16,2079,"This Notion MCP server, developed by SystemPrompt, provides a bridge between AI assistants and Notion's knowledge management capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for interacting with Notion pages, databases, and comments. The implementation focuses on simplifying interactions with Notion's API, making it accessible for AI models to create, retrieve, update, and manage Notion content. It includes features for searching, creating pages, and manipulating databases. This server is particularly useful for tasks like automated documentation, knowledge base management, or integrating Notion's organizational capabilities into AI-driven workflows, enabling assistants to interact with Notion without requiring deep knowledge of the underlying API complexities."
ejb503,systemprompt-mcp-reddit,2,1941,"SystemPrompt MCP Reddit is a specialized server that enables AI assistants to search, read, and interact with Reddit content through a comprehensive set of tools. It provides capabilities for analyzing subreddits, creating and sending posts/comments, managing notifications, and configuring content creation instructions. The implementation uses OAuth authentication with Reddit's API, handles rate limiting, and includes sampling prompts for generating high-quality Reddit content. Built by Ejb503, it's particularly valuable for users who want to monitor Reddit trends, engage with communities, or manage their Reddit presence without leaving their AI assistant conversation."
ejb503,systemprompt-mcp-core,8,1750,"This SystemPrompt MCP server, developed by SystemPrompt, enables seamless integration of systemprompt.io's powerful prompt management capabilities into AI workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for creating, managing, and versioning system prompts. The implementation offers features like resource fetching, error handling, and standardized interfaces for prompt operations. It's particularly useful for AI assistants or applications needing centralized prompt management, enabling tasks like dynamic prompt generation, A/B testing, and prompt versioning without requiring deep knowledge of the underlying SystemPrompt API. When used in conjunction with the multimodal-mcp-client, it provides a complete voice-powered AI workflow solution."
ejfox,vulpes-spotify-mcp,1,,"A Spotify integration server for AI assistants that enables control of music playback through the MCP protocol. It provides tools for searching tracks, playing music, managing playlists, and controlling playback on active Spotify devices. The implementation requires a Spotify Premium account and developer credentials, and works with Claude Desktop by exposing a set of specialized tools that allow the AI to interact with Spotify without leaving the conversation interface. Perfect for use cases where voice-free music control is needed or when you want your AI assistant to help manage your listening experience."
elastic,mcp-server-elasticsearch,97,2645,"Elasticsearch MCP server enables AI assistants to interact with Elasticsearch clusters through natural language conversations. Built with TypeScript and the official Elasticsearch client library, it provides tools for listing indices, inspecting field mappings, and executing full Query DSL searches with automatic highlighting of text fields. The implementation handles authentication via API keys, supports configurable security permissions, and is particularly valuable for users who need to explore and analyze their Elasticsearch data through conversational interfaces."
elber-code,database-tools,3,,"Database Tools for Claude AI is an MCP server that enables direct interaction with MySQL databases through a simple interface. Developed by Elberfeld Perez, this implementation allows Claude to execute any valid SQL query, retrieve information about tables, and format results for easy reading. The server uses environment variables for database configuration and provides detailed error handling for query execution failures. Ideal for users who need to analyze database content, check table structures, or perform database operations directly through Claude without switching to another tool."
elblanco2,hostbridge-mcp,1,,"HostBridge-MCP is a server that simplifies deploying web applications to various hosting environments through a unified interface. It supports multiple frameworks like Wasp and hosting providers including Netlify, Vercel, and traditional shared hosting services. The implementation handles authentication, project creation, building, and deployment operations through a set of MCP tools and resources. Built with Python and the MCP protocol, it abstracts away provider-specific complexities, allowing users to deploy applications with simple commands rather than managing different deployment workflows for each provider. Particularly valuable for developers who want to quickly deploy applications across different hosting environments without leaving their AI assistant conversation."
el-el-san,vidu-mcp-server,2,,"Vidu MCP Server provides a standardized interface for generating videos from static images using the Vidu AI video generation API. It implements three main tools: image-to-video conversion with customizable parameters like duration and resolution, status checking for ongoing generation tasks, and image uploading capabilities. The server handles all the complexity of API authentication, file management, and asynchronous task processing, making it particularly valuable for applications that need to transform static visual content into dynamic videos without requiring direct API integration."
elevenlabs,elevenlabs-mcp,540,12944,"An ElevenLabs MCP server implementation that provides AI assistants with access to ElevenLabs' text-to-speech, voice cloning, and conversation AI capabilities. Developed by the ElevenLabs team, this server enables voice synthesis with customizable parameters, audio file handling with similarity detection, and creation of conversational agents with specific voice profiles. The implementation includes utilities for environment configuration, output path management, and Claude Desktop integration, making it particularly useful for applications requiring high-quality voice generation, audio processing, and interactive voice-based AI experiences."
eliasuran,mcp_server_google_calendar,1,788,"This Google Calendar MCP server, developed by Elias Rissanen Uran, integrates the Google Calendar API to enable AI assistants to manage calendars and events. It exposes functions for querying, creating, and modifying calendar entries, handling authentication and API interactions. The server simplifies calendar management tasks by abstracting away the complexities of the Google Calendar API. By connecting AI capabilities with calendar functionality, this implementation allows assistants to schedule meetings, check availability, and manage events programmatically. It is particularly useful for applications requiring automated scheduling, time management, or any scenario where an AI system needs to interact with calendar data."
eliovp-bv,mcp-vllm-benchmark,2,,"MCP vLLM Benchmarking Tool enables interactive performance testing of vLLM deployments through a simple interface. This proof-of-concept implementation allows users to benchmark language models served by vLLM by specifying endpoints, model names, and test parameters through natural language prompts. The tool leverages code from vLLM's official benchmarking suite to measure metrics like throughput, latency, and token generation speed across multiple test iterations. Developed by Eliovp-BV as an exploration of MCP capabilities, it's useful for AI engineers who need to evaluate and compare the performance characteristics of different model deployments."
elsejj,mcp-cn-a-stock,107,,"A specialized MCP server for Chinese stock market data analysis, providing tools to retrieve detailed stock information across different levels of depth (brief, medium, full). Built to integrate with a custom data feed system, it enables AI assistants to fetch comprehensive stock data including basic metrics, trading information, financial details, and technical analysis through a standardized interface."
shy2593666979,mcp-server-email,8,3563,"MCP-Server-Email provides a bridge for language models to compose and send emails with attachments through SMTP servers. Developed by Tian Ming Guang, this server implementation supports multiple email providers (Gmail, Outlook, Yahoo) and offers tools for sending emails with multiple recipients and searching for attachments in specified directories. The server handles secure email transmission, supports various attachment file types (documents, archives, images), and requires environment variables for sender credentials. Ideal for automating email workflows where AI assistants need to compose messages, attach files, and manage email communications without direct access to email services."
emberian,crate-mcp,2,,"Crate-MCP provides a server that exposes Rust crate public APIs to language models through the Model Context Protocol. It offers two main tools: listing all dependencies in a project's Cargo.lock file and generating comprehensive public API documentation for any specific crate dependency. Built with Rust using cargo's dependency resolution system and rustdoc JSON generation, it enables AI assistants to understand and reason about Rust library interfaces without requiring direct code access. The implementation handles toolchain management, builds documentation in a workspace-specific target directory, and supports filtering API items with regex patterns."
emekaokoye,mcp-rdf-explorer,0,,"RDF Explorer is an MCP server that provides a conversational interface for exploring and analyzing RDF-based Knowledge Graphs in either Local File mode or SPARQL Endpoint mode. Developed by Emeka Azuka Okoye, it facilitates communication between AI applications and RDF data through SPARQL queries, full-text search, and graph statistics tools. The server supports both local RDF files and external SPARQL endpoints, offering features like schema exploration, relationship discovery, and graph visualization. Particularly useful for knowledge graph research, semantic web exploration, and AI data preparation workflows where structured graph data needs to be queried conversationally."
emeryray2002,mcp-secops-v3,4,,"This MCP server provides a bridge to Google's Chronicle Security Operations suite, enabling AI assistants to perform security analysis tasks through a standardized interface. Built with Python using the FastMCP framework, it offers tools for searching security events, retrieving alerts, looking up entities (IPs, domains, hashes), listing detection rules, and getting IoC matches. The implementation handles authentication through Google Cloud credentials and supports configurable parameters like time ranges and result limits. It's particularly valuable for security analysts who want to leverage AI assistants for threat hunting, incident investigation, and security monitoring without leaving their conversation interface."
emeryray2002,virustotal-mcp,3,,"VirusTotal MCP Server provides a bridge to the VirusTotal API for threat intelligence, enabling AI assistants to analyze security threats through file hashes, URLs, domains, and IP addresses. The implementation offers nine specialized tools that automatically fetch relevant relationship data alongside basic reports, providing complete security overviews in single requests. Built with Python using asyncio and aiohttp, it handles API authentication, rate limiting, and error conditions while formatting responses for optimal readability. This server is particularly valuable for security analysts and threat hunters who need to quickly investigate potential threats without switching context to the VirusTotal web interface."
emgeee,mcp-ollama,17,17522,"This MCP server, developed by Matt Green, provides integration with Ollama for local large language model inference. Built using Python and leveraging the MCP CLI, it enables AI assistants to interact with Ollama's API for listing available models, retrieving model details, and generating text completions. The implementation focuses on providing a standardized interface to Ollama's capabilities, making it easier to incorporate local LLM inference into AI workflows. It's particularly useful for developers and researchers who want to leverage locally-run open-source language models, enabling use cases such as private AI assistants, custom model fine-tuning, and AI-augmented development without relying on cloud APIs."
emiliobool,mcp-relay,0,,"This Discord relay MCP server, developed by Emilio Bool, enables AI agents to send messages and prompts to a Discord channel and receive responses. Built with TypeScript and leveraging the Discord.js library, it provides a bridge between MCP-compatible AI systems and Discord's communication platform. The implementation focuses on simplicity and ease of setup, offering features like customizable message types, action buttons, and timeout handling. It's particularly useful for developers and researchers working on AI-human interaction, enabling use cases such as automated support systems, community engagement bots, or AI-assisted moderation without dealing directly with Discord's API complexities."
emiryasar,mcp_code_analyzer,31,,"This MCP server implementation, developed by seanivore, provides a SQLite-based storage solution for MCP data. Built with Python and leveraging libraries like mcp and pydantic, it offers a lightweight and portable database option for MCP applications. The implementation focuses on simplicity and ease of use, making it ideal for small to medium-scale projects or as a starting point for more complex MCP data management systems. It supports basic CRUD operations and can be easily integrated into existing MCP workflows. This server is particularly useful for developers looking to quickly set up a local MCP data store, prototype MCP-based applications, or build standalone tools that require persistent storage without the overhead of larger database systems."
emmanuelsystems,mcpnotionslack,0,,"The Notion MCP server provides a bridge between AI assistants and Notion workspaces through the Model Context Protocol. It implements a comprehensive set of tools for interacting with Notion's API, including database operations (listing, querying, creating), page management (creating, updating, retrieving), block manipulation (appending, updating, retrieving children), and search functionality. Built with Node.js using the @modelcontextprotocol/sdk, this implementation enables AI assistants to seamlessly manage Notion content, making it ideal for workflows that involve document creation, knowledge management, and collaborative workspaces without requiring users to switch contexts."
emmett-deen,linear-mcp-server,3,,"Linear MCP Server provides a bridge between AI assistants and Linear project management systems through the Linear GraphQL API. Developed by Emmett Deen, it enables AI assistants to retrieve and modify data related to users, teams, projects, and issues in Linear workspaces. The server authenticates via Linear API tokens and offers a comprehensive set of tools for creating and updating issues, changing issue status, assigning tasks to team members, adding comments, and creating projects. It's designed for seamless integration with Claude Desktop and other MCP-compatible clients, making it valuable for teams who want to manage their Linear projects directly through AI assistant conversations."
emzimmer,server-moz-readability,13,506,"This Mozilla Readability Parser MCP server, created by Max Zimmer, extracts and transforms webpage content into clean, LLM-optimized Markdown. It uses Mozilla's Readability algorithm to remove ads, navigation, and non-essential elements while preserving core content structure. The server converts HTML to well-formatted Markdown, returns article metadata, and handles errors gracefully. It integrates with the Model Context Protocol, allowing AI assistants to fetch and parse web content efficiently. This implementation is particularly useful for reducing token usage in LLM processing, ensuring consistent formatting, and providing clean, relevant content for tasks like summarization, analysis, or information extraction from web pages."
emzimmer,server-wp-mcp,57,1163,"This WordPress MCP server, developed by mzimmer, enables AI assistants to interact securely with WordPress sites through a standardized interface. Built with Node.js and leveraging the Model Context Protocol SDK, it provides a bridge to WordPress REST API endpoints, handling authentication and site discovery. The server implements environment-based configuration, allowing for flexible deployment across different WordPress installations. By abstracting the complexities of WordPress APIs, it enables AI systems to easily manage content, users, and site settings. This implementation is particularly valuable for applications requiring programmatic WordPress management, facilitating use cases such as automated content publishing, user administration, and site maintenance tasks."
endaoment,endaoment-postgres-mcp,1,,"This PostgreSQL MCP server enables AI assistants to interact with PostgreSQL databases through SQL queries. Built with Node.js and the Model Context Protocol SDK, it provides tools for listing database tables, retrieving schema information, and executing custom SQL queries with retry logic for improved reliability. The implementation includes robust error handling, connection pooling, and flexible configuration options that support both environment variables and shell config files for database credentials. It's particularly useful for data analysis, database exploration, and executing complex queries directly from AI workflows."
enemyrr,mcp-mysql-server,19,,"This MCP server, developed by enemyrr, provides a standardized interface for MySQL database operations. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for executing queries, managing database schemas, and performing CRUD operations. The implementation focuses on security, with features like prepared statements and secure password handling. It supports multiple connection methods and includes comprehensive error handling. By connecting AI models with MySQL databases, this server enables sophisticated data manipulation and retrieval scenarios, making it particularly useful for applications and AI assistants that require structured data access or need to interact with existing MySQL-based systems."
kevinbin,mcp-mysql-server,0,,"MCP MySQL Server provides a standardized interface for AI models to interact with MySQL databases through the Model Context Protocol. Built by enemyrr, it offers tools for executing queries, managing database schemas, and retrieving table information with comprehensive security features like prepared statements to prevent SQL injection. The server supports multiple connection methods (URL, workspace path, or direct credentials), handles errors gracefully, and can be deployed via npm, manual installation, or Docker. Particularly valuable for AI workflows requiring database operations without leaving the conversation context, it enables models to perform complex data retrieval and manipulation tasks directly within their interactions."
enemyrr,mcp-server-pagespeed,1,,"This MCP server, developed by enemyrr, provides integration with Google PageSpeed Insights for web performance analysis. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for analyzing webpage performance, including loading experience metrics and improvement suggestions. The implementation focuses on delivering concise, actionable insights about web page speed and user experience. By connecting AI models with Google's performance analysis tools, this server enables scenarios such as automated performance auditing, optimization recommendations, and comparative analysis across multiple web pages. It's particularly useful for developers, SEO specialists, and AI assistants focused on web performance optimization."
enesbol,gcp-mcp,1,631,"Provides a standardized interface for interacting with Google Cloud Platform services through the Model Context Protocol. Built by Enes Bol, this server enables AI assistants to manage and interact with GCP resources across multiple services like Compute Engine, Cloud Run, BigQuery, and Cloud Storage through a consistent, tool-driven approach. Particularly useful for developers and AI assistants seeking programmatic cloud resource management without complex manual configuration."
enescinr,twitter-mcp,181,2288,"This MCP server, developed by Enes Çınar, enables AI assistants to interact with Twitter through the Twitter API. Built with TypeScript and Node.js, it allows posting tweets and searching for tweets via simple function calls. The implementation integrates seamlessly with Claude Desktop, providing a straightforward interface for Twitter interactions. By connecting AI capabilities with Twitter's social media platform, this server enables AI systems to analyze social trends, engage with users, and disseminate information. It is particularly useful for scenarios like social media monitoring, automated customer engagement, and building AI assistants that can understand and contribute to real-time public discourse on Twitter."
jibberish69,enhanced-outlook-mcp,2,,"Enhanced Outlook MCP Server provides a robust bridge to the Microsoft Graph API, enabling AI assistants to interact seamlessly with Outlook email, calendar, and messaging capabilities. Built with a modular architecture, it supports multi-user authentication, comprehensive email management, calendar scheduling, and mail rule configuration through a standardized set of tools. The implementation is particularly valuable for users seeking programmatic control over their Outlook ecosystem through natural language interactions."
eniayomi,gcp-mcp,44,2938,"This MCP server implementation provides integration with Google Cloud Platform services. Developed by Oluwapelumi Oluwaseyi, it offers tools for interacting with various GCP resources including Compute Engine, Cloud Storage, Cloud Functions, Cloud Run, BigQuery, and more. The server uses official Google Cloud client libraries and implements robust error handling and retry mechanisms. It's designed for developers looking to leverage GCP capabilities within MCP-based applications and workflows."
enkhbold470,bci-mcp,0,,"BCI-MCP is a Brain-Computer Interface server that enables AI systems to receive and process neural signals through the Model Context Protocol. It supports multiple EEG devices (OpenBCI, Emotiv, NeuroSky), provides real-time signal processing with features like bandpass filtering and event detection, and exposes a WebSocket API for streaming brain activity data. The implementation includes tools for device connection, calibration, data recording, and visualization, making it valuable for creating more intuitive human-AI interactions where brain activity can provide additional context to language models."
enkryptai,enkryptai-mcp-server,1,,"EnkryptAI-MCP is a server implementation that integrates with the EnkryptAI platform, providing AI assistants with tools for managing guardrails, models, deployments, and red team testing. Built using the EnkryptAI SDK, it enables content detection for sensitive material, policy management, model configuration, and deployment orchestration with customizable safety controls. The server is particularly useful for organizations looking to implement robust AI safety measures, test models against various attack vectors, and deploy AI systems with appropriate guardrails to prevent harmful outputs."
eno-graph,mcp-server-google-analytics,3,,"Google Analytics Data API server that enables AI assistants to retrieve analytics data through a standardized interface. Built with TypeScript, it provides tools for running standard and realtime reports with configurable metrics, dimensions and date ranges, while handling authentication via service accounts. Particularly valuable for marketers and analysts who need to access Google Analytics 4 data and metrics directly through conversational AI without manual API configuration."
epaproditus,google-workspace-mcp-server,17,,"This Google Workspace MCP server, developed by epaproditus, integrates with Gmail and Google Calendar APIs to provide a comprehensive suite of email and calendar management tools. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers functionalities such as listing, searching, and modifying emails, as well as creating, updating, and deleting calendar events. The server implements OAuth 2.0 authentication and includes a refresh token mechanism for secure API access. By abstracting the complexities of Google Workspace APIs, it enables AI assistants to efficiently manage emails and schedules. This implementation is particularly valuable for productivity applications, facilitating use cases such as automated email organization, intelligent scheduling, and streamlined communication management within the Google ecosystem."
epsilla-cloud,mcp-epsilla,0,,"This Epsilla MCP implementation, developed by Eric from Epsilla, integrates the pyepsilla library to provide a standardized interface for interacting with Epsilla databases. Built with Python and leveraging the Model Context Protocol SDK, it offers tools for creating, deleting, and listing tables, as well as inserting, querying, and deleting data. The implementation abstracts the complexities of Epsilla's API, enabling AI systems to easily manage and manipulate data within Epsilla databases. It is particularly useful for applications requiring programmatic database operations, facilitating use cases such as dynamic data storage, retrieval, and management in AI-driven systems that need efficient vector database capabilities."
unctad-ai,eregulations-mcp-server,0,4796,"eRegulations MCP Server provides a standardized interface for accessing eRegulations API data, making administrative procedures information accessible to AI models. Developed by benmoumen, this TypeScript implementation transforms complex regulatory data into AI-friendly formats with features like procedure listing, detailed procedure information, and step-by-step guidance. The server supports both standard I/O and HTTP/SSE transport mechanisms, implements caching for performance optimization, and includes comprehensive error handling. It's particularly valuable for AI assistants that need to answer user questions about government administrative procedures without requiring context switching."
ergodiclabs,twotruthsandatwist,5,5190,"Two Truths and a Twist is an MCP server implementation that enables AI assistants to host an interactive trivia game where players guess which of three statements is false. Developed by Ergodic Labs, this Python-based server manages game rounds, player guesses, and score tracking through a SQLite database, while providing tools for creating trivia rounds, submitting guesses, and revealing answers with explanations. The implementation is designed for Python 3.13+ and integrates with Claude Desktop through a simple configuration, making it particularly valuable for educational entertainment and showcasing how AI can create engaging, interactive content experiences."
ergut,mcp-bigquery-server,49,3482,"This BigQuery MCP server, developed by Salih Ergüt, provides a secure interface for language models to interact with Google BigQuery datasets. It enables AI agents to explore schemas, run SQL queries, and analyze data within configurable limits. The server integrates seamlessly with Claude Desktop, offering a natural language interface to BigQuery's powerful data warehousing capabilities. By focusing on read-only access and built-in safety constraints, it allows AI systems to generate insights from large datasets while maintaining data security. This implementation is particularly useful for AI assistants designed to perform ad-hoc data analysis, generate business intelligence reports, or provide data-driven recommendations using BigQuery as the backend."
ergut,mcp-logseq-server,48,,"This MCP server, developed by Salih, provides a seamless interface for AI assistants to interact with LogSeq via its API. Built using Python and the MCP library, it offers a range of tools for managing LogSeq graphs, including listing pages, searching content, and creating or updating pages. The server abstracts the complexities of API communication, allowing AI systems to easily integrate with LogSeq for note-taking and knowledge management tasks. It's particularly useful for scenarios requiring automated interaction with LogSeq, such as summarizing meeting notes, updating project statuses, or performing content searches across multiple pages. By bridging AI capabilities with LogSeq's functionality, this implementation enables more efficient and intelligent personal knowledge management workflows."
erickwendel,erickwendel-contributions-mcp,79,,"The erickwendel-contributions-mcp server provides AI assistants with access to Erick Wendel's content contributions across different platforms through a set of specialized tools. Built with Node.js and the Model Context Protocol SDK, it enables querying talks, posts, and videos with filtering options by language, title, country, and other parameters. The implementation includes Docker containerization for easy deployment and is configured through Smithery.ai for seamless integration with AI assistants. This server is particularly valuable for users wanting to discover and reference Erick Wendel's technical content within AI assistant conversations without needing to search across multiple platforms manually."
ericzakariasson,uber-eats-mcp-server,156,,"This MCP server implementation provides a bridge to Uber Eats, enabling AI assistants to search for restaurants, find menu options, and place food orders. Built using Python and the FastMCP framework, it leverages browser automation to interact with the Uber Eats website. The server offers asynchronous operations for searching and ordering, making it suitable for use cases requiring food delivery integration within AI-assisted applications."
erniebrodeur,mcp-grep,1,2605,"MCP-Grep provides a server implementation that exposes the system grep binary's functionality through the Model Context Protocol, allowing AI assistants to search for patterns in files using regular expressions. Developed by Ernie Brodeur, it offers both a resource endpoint for retrieving grep binary information and a tool for performing searches with support for common grep options like case-insensitive matching, context lines, recursive directory searching, and fixed string matching. The implementation uses Python's subprocess module to execute grep commands on the host system, making it particularly valuable for AI assistants that need to analyze text files or codebases without leaving their conversation interface."
erniebrodeur,mcp-project-typescript,1,,"MCP Project TypeScript provides a server implementation for JavaScript/TypeScript development tools, enabling AI assistants to understand and interact with project structures without manual description. Built with TypeScript and Zod for schema validation, it exposes resources for analyzing project metadata, package.json files, testing configurations, file organization patterns, and deployment setups. The implementation features standardized path handling with security validation, supports multiple transport mechanisms (stdio and HTTP/SSE), and includes a comprehensive BDD test suite using Cucumber. Ideal for AI assistants that need to navigate codebases, understand project architecture, or execute development operations like testing and dependency management."
errajibadr,twilio_manager_mcp,0,,"Twilio Manager MCP provides a robust interface for managing Twilio resources through asynchronous API interactions. The implementation offers tools for handling subaccounts, phone numbers, addresses, and regulatory bundles with features like transferring phone numbers between accounts and duplicating regulatory bundles. Built with an async-first approach using aiohttp, it enables efficient concurrent operations against the Twilio API while handling authentication, session management, and error recovery. This server is particularly valuable for organizations that need to programmatically manage multiple Twilio accounts and resources without leaving their AI assistant conversation."
esh2n,mcp-servers,0,,"This MCP server implementation provides a bridge to various data processing and API services. It integrates with libraries like Effect, Zod, and CSV for data handling, as well as external services such as YAML parsing and date manipulation. The server is designed to facilitate complex data operations and API interactions, making it suitable for tasks involving data transformation, validation, and integration with multiple data sources and formats."
esignaturescom,mcp-server-esignatures,11,,"This MCP server for eSignatures, developed by eSignatures, provides integration with the eSignatures.com API for contract and document management. Built with Python, it offers tools for creating, querying, and managing contracts and templates. The implementation focuses on simplifying access to eSignatures functionality through a standardized MCP interface, with features like draft creation, contract withdrawal, and template management. It's particularly useful for AI assistants and applications needing to handle digital contracts and signatures, enabling use cases such as automated contract generation, document workflow management, and legal compliance tracking without directly dealing with the complexities of the eSignatures.com API."
esnark,blowback,4,676,"Blowback is an MCP server that integrates with frontend development environments to provide real-time feedback and debugging capabilities. It uses Puppeteer to launch a browser instance that connects to development servers (like Vite), monitors Hot Module Replacement (HMR) events, captures console logs, and provides tools for interacting with the DOM. The server includes features for taking screenshots, monitoring network requests, retrieving element properties, and executing browser commands - making it particularly valuable for AI assistants that need to understand and debug frontend applications during development without leaving the conversation interface."
esshka,okx-mcp,7,,"The OKX MCP server provides real-time cryptocurrency price data from the OKX exchange through two main tools: get_candlesticks for historical OHLCV data and get_price for current market information. Built with TypeScript and the Model Context Protocol SDK, it connects directly to OKX's API to deliver structured cryptocurrency data with comprehensive error handling and rate limiting. This implementation is ideal for AI assistants that need to analyze crypto market trends, monitor specific instruments, or incorporate live financial data into their responses."
evangstav,python-memory-mcp-server,10,10643,"This Memory MCP Server, developed by estav, provides a knowledge graph management system for AI assistants using the Model Context Protocol. It offers tools for storing, retrieving, and querying information in a graph structure, enabling assistants to build and maintain long-term memory. The server uses SQLite for persistent storage and implements optimized batch operations for efficiency. By connecting AI capabilities with structured knowledge representation, this implementation allows assistants to accumulate and reason over information across conversations. It is particularly useful for applications requiring context retention, relationship modeling between concepts, or any scenario where an AI system needs to build and leverage a persistent knowledge base."
qianniuspace,mcp-security-audit,24,1141,"This MCP server implementation provides a security audit tool for package.json dependencies. Developed by esx, it leverages npm-audit-report and npm-registry-fetch to analyze and report potential vulnerabilities in Node.js projects. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It offers a command-line interface for easy integration into development workflows and CI/CD pipelines. The implementation focuses on providing clear, actionable security insights, making it particularly useful for development teams prioritizing code safety and compliance. It supports various output formats and can be easily incorporated into existing project management tools and security protocols."
ethangillani,anki-mcp-server,1,,"Anki MCP Server enables AI models to interact directly with Anki flashcard software through the AnkiConnect API, providing tools to create, search, and manage decks and notes programmatically. Built with TypeScript and the Model Context Protocol SDK, it allows AI assistants like Claude to generate flashcards, list decks and models, and perform advanced note management tasks. Particularly useful for learners and educators seeking to automate flashcard creation and study material organization."
ethangillani,connectwise-mcp-server,1,,"This MCP server provides integration with the ConnectWise Manage API, enabling Claude to interact with service tickets, companies, and contacts in ConnectWise. It implements functions for searching and retrieving tickets and companies, with authentication handled through ConnectWise API keys. The server is designed for MSPs and IT service providers who need to access their ConnectWise data directly from Claude, making it easier to query ticket information, look up company details, and perform other ConnectWise operations without switching contexts."
ethanhenrickson,math-mcp,6,,"This MCP server provides basic mathematical and statistical functions to Large Language Models (LLMs). Developed by EthanHenrickson, it offers capabilities such as arithmetic operations, statistical calculations, and rounding functions. The server is designed for use cases requiring accurate numerical computations within AI-assisted applications, enabling LLMs to perform precise calculations through a simple API."
ethereumdegen,mcp-rs,1,,"This Rust implementation of the MCP server provides a robust foundation for building AI-powered applications. It offers core functionalities like tool management, authentication handling, and custom middleware support. The server is designed with flexibility in mind, supporting both stdio and SSE transports. It's particularly well-suited for developers looking to integrate AI capabilities into Rust-based projects or those seeking a performant, type-safe MCP server implementation."
otc-ai,mcp-otc,0,,"MCP Etherscan Server provides Ethereum blockchain data tools through Etherscan's API, enabling AI assistants to check ETH balances, view transaction histories, track ERC20 transfers, fetch contract ABIs, monitor gas prices, and resolve ENS names. Built with TypeScript and the Model Context Protocol SDK, it runs on stdio transport for seamless integration with Claude Desktop, making it particularly valuable for users who need to access and analyze blockchain data without leaving their conversation interface."
etoxin,untapped-mcp,0,,"Untapped MCP server provides a bridge to the Untappd beer tracking and discovery API, enabling AI assistants to search for beers, retrieve detailed beer and brewery information, and access comprehensive metadata about craft beverages. Built by Adam Lusted, the implementation offers tools for searching beers, retrieving specific beer details, and exploring brewery information through a clean, type-safe TypeScript implementation with robust error handling."
eugenechabanov,hf-mcp,0,,"The Hypefury MCP Server enables AI assistants to authenticate with and schedule posts through the Hypefury platform. It implements two key tools: an authentication function that verifies API credentials and a post scheduling capability that allows direct submission of content to Hypefury's publishing queue. Built using the Model Context Protocol SDK with a stdio transport layer, this server creates a secure bridge between AI systems and social media management, making it ideal for automated content publishing workflows."
evalstate,mcp-hfspace,219,10388,"This MCP server, developed by evalstate, enables AI assistants to seamlessly interact with Hugging Face Spaces. It provides a streamlined setup process where users simply specify desired spaces as arguments, with the server automatically configuring appropriate endpoints. Built for integration with Claude Desktop, it offers capabilities like image generation, vision tasks, text-to-speech, and more through various pre-configured spaces. The implementation handles authentication, file management, and API interactions, abstracting away complexities of working with Hugging Face. It is particularly useful for developers and researchers who want to leverage diverse AI models and tools from Hugging Face Spaces without manual configuration, enabling rapid prototyping and experimentation across a wide range of AI tasks."
evalstate,mcp-miro,36,,"This Miro MCP server, developed by evalstate, enables AI assistants to interact with Miro whiteboards through the Miro API. It provides tools for manipulating boards, creating stickies and shapes, reading content, and performing bulk operations. Built in TypeScript, the implementation exposes Miro's collaborative features via a standardized MCP interface, allowing analysis within Miro boards. By bridging AI models with Mir's digital whiteboard platform, this server enhances LLM's ability to assist with brainstorming, project planning, and visual data organization. It is particularly useful for teams seeking AI-powered collaboration, ideation, and visual information management within their existing MIRO workspaces."
evalstate,mcp-webcam,19,910,"This MCP webcam server, developed by llmindset.co.uk, enables AI models to capture and analyze live webcam images and screenshots. Built with React, Express, and TypeScript, it provides tools for taking webcam snapshots and full-screen captures, with a web interface for testing and configuration. The implementation focuses on simplifying visual input for AI, allowing models to perceive and interact with the user's environment in real-time. It's particularly useful for applications requiring visual context, such as AI assistants that can comment on what the user is showing them, analyze objects in view, or provide feedback on the user's surroundings."
evangstav,personal-mcp,5,,"This personal MCP server, developed for health and well-being tracking, integrates with pandas for data analysis and pydantic for data validation. It uses a command-line interface built with Click and rich for enhanced terminal output. The implementation is designed for individuals who want to track and analyze their personal health data using AI assistance, allowing for natural language queries and visualization of trends. It's particularly suited for users who prefer local data storage and processing, offering a balance between privacy and powerful analysis capabilities."
evansims,openfga-mcp,8,,"OpenFGA MCP server enables large language models to interact with OpenFGA authorization stores through a standardized protocol. Built by Evan Sims, it provides tools to read, search, and manipulate fine-grained access control policies programmatically, with support for checking permissions, creating relationships, and generating explanations for access decisions."
event-catalog,mcp-server,13,249,"EventCatalog MCP Server provides a standardized interface for AI assistants to interact with event-driven architecture metadata and resources. Built by David Boyne, it enables querying and retrieving information about events, services, domains, queries, commands, and other architectural components through a set of predefined tools and resources. The server dynamically loads catalog information and supports schema retrieval, making it particularly useful for developers and architects seeking to understand and explore complex event-driven systems."
everaldo,mcp-mistral-ocr,10,,"The MCP Mistral OCR server provides optical character recognition capabilities by leveraging Mistral AI's OCR API. It processes both local files and URLs, supporting various image formats (JPG, PNG, WebP) and PDFs, with results saved as timestamped JSON files. The implementation includes Docker containerization for easy deployment, configurable environment variables for API authentication and file storage, and offers two primary tools: process_local_file for handling files from a configured directory and process_url_file for processing remote documents with explicit file type specification. This server is particularly useful for workflows requiring text extraction from visual documents within AI assistant conversations."
everford,fetcher-mcp,2,,"Fetcher-MCP is a server implementation that provides AI assistants with the ability to fetch and process web content using Playwright's headless browser. It offers two main tools: fetchUrl for retrieving content from a single URL and fetchUrls for batch processing multiple URLs simultaneously. The implementation includes sophisticated content extraction capabilities through Mozilla's Readability library and markdown conversion via Turndown, allowing for clean, readable text from complex web pages. With features like customizable timeouts, content extraction options, and anti-bot handling, this server is particularly valuable for research tasks, content analysis, and information gathering directly through AI assistant conversations without context switching."
evilran,baidu-mcp-server,3,5480,"Baidu MCP Server provides web search capabilities through Baidu's search engine, enabling AI assistants to retrieve search results and fetch webpage content. Developed by Evilran, this implementation includes features for rate limiting, error handling, and content parsing to ensure optimal results for language models. The server exposes two main tools: a search function that returns formatted results with titles, URLs, and snippets, and a content fetching tool that retrieves and cleans webpage text. Built with Python and leveraging libraries like BeautifulSoup4 and httpx, it's particularly useful for users in regions where Baidu is the primary search engine or when alternative search options are needed."
aiteks-ltda,mcp-evolution-whatsapp-api,9,,"A WhatsApp integration server that connects AI assistants to the Evolution API, enabling management of WhatsApp instances and messaging capabilities. This implementation provides tools for creating and managing WhatsApp instances, sending various message types (text, media, stickers, polls, buttons), retrieving contacts and group information, and configuring webhooks. Built with TypeScript and Bun, it uses the Model Context Protocol to expose WhatsApp functionality as tools that can be called programmatically, making it valuable for automated customer service, chatbots, and messaging workflows."
exa-labs,exa-mcp-server,533,,"This Exa MCP server, developed by exa-labs, provides an interface for AI assistants like Claude to perform web searches using Exa's search API. It enables AI agents to query Exa and retrieve structured search results including titles, URLs, and content snippets through a controlled MCP server. Built in TypeScript, the implementation handles API authentication, rate limiting, and error cases. By leveraging Exa's powerful search capabilities, this server allows AI systems to access real-time web information in a safe and controlled manner. It is particularly useful for AI assistants needing to conduct research, answer questions based on current information, or provide relevant search results to users while maintaining a clear separation between the AI model and external data sources."
xxpe3,omgflux-mcp-server,2,,"OmgFlux MCP Server provides a bridge to the OhMyGPT Flux image generation API, enabling AI assistants to create images based on text prompts. Developed by Exa Labs, it implements a Model Context Protocol server that handles image generation requests with customizable parameters like aspect ratio, safety tolerance, and reference images. The server maintains a cache of recent generations and exposes them as resources, making it particularly useful for workflows requiring high-quality AI image generation directly within conversations without switching contexts."
mrunmays,exa-mcp-server,0,,"Exa MCP Server provides web search capabilities for AI assistants through integration with the Exa Search API. Built by Exa Labs, it offers a search tool that returns structured web search results and maintains a cache of recent searches as accessible resources. The server runs on stdio, can be deployed via Docker, and requires an Exa API key for authentication. It's particularly valuable for AI workflows requiring up-to-date information from the web, enabling assistants to retrieve and reference search results directly within conversations."
geezerrrr,exa-mcp-server,0,,"The Exa MCP Server provides AI assistants with real-time web search capabilities through the Exa Search API. It enables performing up-to-date web searches and content scraping from specific URLs, returning comprehensive results from relevant websites. The server is built using TypeScript and the Model Context Protocol SDK, supporting configurable parameters like result count and live crawling options. This implementation is particularly valuable for AI assistants that need access to current information beyond their training data, making it useful for research, fact-checking, and retrieving the latest information on any topic."
yzfly,mcp-excel-server,20,4594,"MCP Excel Server provides a robust interface for Excel file operations and data analysis through the Model Context Protocol. Developed by yzfly, it enables AI assistants to read, write, and analyze Excel files in various formats (XLSX, CSV, TSV, JSON), offering tools for statistical analysis, data filtering, pivot table creation, and visualization through charts and plots. The server leverages pandas, numpy, matplotlib, and seaborn to perform operations like summary statistics, data quality assessment, and visualization export, making it particularly valuable for data analysis workflows where users need to extract insights from spreadsheets without manual manipulation."
excelsier,things-fastmcp,8,,"This Things MCP server enables Claude Desktop to interact with the Things 3 task management app, allowing users to create tasks, manage projects, and analyze productivity patterns through natural language. Built with Python and leveraging the Things.py library and URL scheme, it offers two implementation approaches: a standard MCP server and a modern FastMCP version with decorator-based tool registration for better maintainability. The server provides comprehensive task management capabilities including list views, search operations, tag management, and time-based features, making it ideal for users who want AI assistance with their GTD workflows and productivity systems."
executeautomation,mcp-database-server,3,,"ExecuteAutomation Database Server is an MCP server that provides AI assistants with access to SQLite and SQL Server databases. Developed by ExecuteAutomation, this TypeScript implementation enables database schema inspection and SQL query execution through nine core tools including read/write queries, schema management, and data export capabilities. The server features a modular adapter-based architecture that abstracts database-specific implementations, making it particularly useful for data analysis, database management, and business intelligence workflows where AI assistants need direct database interaction without exposing raw credentials."
executeautomation,mcp-playwright,2885,213912,"This Playwright-based MCP implementation, created by Execute Automation, provides a bridge between language models and web browsers. It enables AI agents to perform a wide range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution. The implementation stands out by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Playwright's cross-browser support, it ensures compatibility across Chrome, Firefox, and Safari. This tool is particularly useful for AI-driven web testing, data scraping, and automated web interactions, opening up possibilities for more sophisticated AI assistants that can directly interact with web applications."
exi,mcp-steam,1,,"This MCP server implementation provides integration with the Steam Web API, allowing AI assistants to access Steam user data, game information, and other Steam-related functionalities. Built using Spring Boot and the Steam Web API Java wrapper, it offers a streamlined interface for querying Steam data. The server is designed for use cases such as analyzing gaming habits, providing game recommendations, or integrating Steam user profiles into AI-assisted applications."
exoticknight,mcp-file-merger,6,262,"Simple utility to combine multiple files into one. Fast, secure, and easy to use.

Features
Simple - Merge any number of files with a single command
Fast - Efficiently combines files of any size
Secure - Only accesses directories you allow
Detailed - Reports file sizes and merge summary"
explorium-ai,mcp-explorium,4,8911,"The Explorium MCP server enables AI assistants to interact with the Explorium API, providing a bridge between Claude Desktop, Cursor, and other MCP-compatible clients and Explorium's data services. Developed by Explorium Ltd, this implementation is built in Python and requires an API key for authentication. The server can be run locally during development using the provided local_dev_server.py script, and is designed to be easily integrated with Claude Desktop and Cursor through their respective configuration files. The package is distributed via PyPI, making it accessible for users who want to leverage Explorium's data capabilities directly within their AI workflows."
expressionsbot,ms-lucidia-voice-gateway-mcp,4,,"This Windows Speech MCP server, developed by ExpressionsBot, provides text-to-speech and speech-to-text capabilities using native Windows speech services. Built with Node.js and leveraging PowerShell commands, it offers tools for converting text to speech, recording audio, and transcribing speech without external API dependencies. The implementation focuses on utilizing built-in Windows features, making it accessible for AI models to interact with speech functionalities on Windows systems. It's particularly useful for voice-enabled applications, accessibility tools, or integrating speech capabilities into AI assistants on Windows platforms, allowing natural language interactions without requiring additional speech services or APIs."
eyalzh,browser-control-mcp,12,,"Browser Control MCP is a server paired with a Firefox extension that enables AI assistants to control the user's browser. Developed by eyalzh, it provides tools for tab management, history searching, webpage content extraction, and text highlighting. The implementation uses WebSocket communication between a Node.js server and browser extension, with a shared secret for secure messaging. It's particularly useful for scenarios requiring browser automation, research assistance, and content analysis, allowing AI assistants to open tabs, read webpage content, search browser history, and manipulate the browser environment based on user requests."
eyevinnosc,mcp-server,5,945,"This MCP server, developed by EyevinnOSC, enables AI assistants to interact with the Eyevinn Open Source Cloud API for creating and managing cloud infrastructure components. It provides tools for setting up databases, storage buckets, and VOD pipelines through a standardized interface. The implementation stands out by leveraging open source technologies to offer vendor-independent cloud services, where creators share in the platform's revenue. By connecting AI capabilities with scalable cloud infrastructure, this server empowers AI systems to dynamically provision and manage resources for data storage, content delivery, and media processing. It is particularly useful for applications requiring flexible cloud deployments, media workflows, or any scenario where an AI assistant needs to orchestrate cloud services while avoiding vendor lock-in."
ez-walk,weather-mcp-server,0,,"The Weather MCP server provides AI assistants with access to National Weather Service data through two main tools: retrieving current weather alerts by state code and obtaining detailed weather forecasts for specific locations using latitude and longitude coordinates. Built with Python using the FastMCP framework and httpx for API requests, it formats weather data into human-readable responses with proper error handling for failed requests. This implementation is particularly valuable for workflows requiring up-to-date weather information within AI assistant conversations, allowing users to check for severe weather alerts or plan activities based on upcoming forecasts without leaving their conversation interface."
f4ww4z,mcp-mysql-server,51,10939,"This MCP MySQL server, developed by f4ww4z, enables AI assistants like Claude to interact with MySQL databases through a standardized interface. Built in JavaScript/TypeScript, it provides capabilities for executing queries, managing database connections, and retrieving schema information. The implementation stands out by offering prepared statement support, automatic connection management, and comprehensive error handling. By connecting AI capabilities with relational database operations, this server allows AI systems to query and manipulate data in MySQL databases programmatically. It is particularly useful for building AI-powered data analysis tools, automated reporting systems, and intelligent assistants that need to interact with MySQL-based applications and data stores."
atomzzm,mcp-mysql-server,0,,"MCP MySQL Server provides a standardized interface for AI models to interact with MySQL databases, enabling operations like executing queries, listing tables, and describing table structures. Built by f4ww4z, it leverages the Model Context Protocol SDK and mysql2 library to offer secure database connections with prepared statements to prevent SQL injection. The server handles connection management automatically, provides comprehensive error handling, and can be easily configured through environment variables, making it ideal for AI workflows that require database access without leaving the conversation context."
fabian1710,mcp-intercom,5,,"This MCP server, developed by Fabian, provides seamless access to Intercom conversations and chats for AI-assisted analysis. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a robust interface for querying Intercom data with flexible filtering options. The implementation supports searching conversations by date range, customer ID, and conversation state, providing rich conversation details including contact information and statistics. It's particularly useful for customer support teams, data analysts, and developers looking to incorporate on-demand access to Intercom data into their AI workflows, enabling dynamic analysis of customer interactions and support trends."
fabianh001,threedee-mcp,1,,"ThreeDee-MCP is a server implementation that enables AI assistants to generate 3D models from text descriptions or images through the Meshy API. Built with Python and FastMCP, it provides tools for creating 3D previews, refining models with PBR textures, converting images to 3D objects, and managing tasks with detailed status tracking. The implementation includes a JavaScript backend using Bun and Anthropic's Claude for natural language processing, making it particularly valuable for users who want to create 3D assets through conversational interfaces without specialized modeling skills. Developed as a hackathon project for Paris AI Tinkerers, it demonstrates practical integration of generative AI with 3D content creation workflows."
gomarble-ai,facebook-ads-mcp-server,4,,"Facebook Ads MCP Server provides programmatic access to Facebook's advertising platform through a Python-based interface. This implementation enables AI assistants to retrieve and analyze ad account data, campaign metrics, ad sets, creatives, and performance insights using the Facebook Graph API. The server requires a Facebook access token with appropriate permissions and exposes over 20 specialized tools for operations ranging from basic account listing to detailed performance analysis with customizable time ranges, breakdowns, and attribution settings. It's particularly valuable for marketers and analysts who need to monitor campaign performance, extract advertising insights, or manage Facebook ad objects through AI assistants."
faizan45640,google-classroom-mcp-server,1,,"A Google Classroom integration server that enables AI assistants to access and interact with classroom data through the MCP protocol. The server provides tools for retrieving courses, course details, announcements, and assignments using Google's Classroom API. It handles OAuth2 authentication flow, token management, and permission scopes to securely access user data. The implementation is particularly useful for students and educators who want to check their Google Classroom information, track assignments, and view course announcements directly through AI assistant conversations without switching contexts."
faiz-gear,dify-mcp-server-ts,4,,"This Dify MCP server, developed as an open-source project, enables integration of Dify workflows with MCP-compatible applications. Built with TypeScript and leveraging the Model Context Protocol SDK, it converts Dify applications into MCP tools, supporting streaming responses and configurable via YAML. The implementation focuses on exposing Dify's AI workflow capabilities through a standardized MCP interface, making it easier to incorporate Dify-powered AI into various applications. It's particularly useful for developers looking to leverage Dify's workflow automation and AI orchestration features within MCP ecosystems, enabling use cases like chatbots, content generation, and data analysis pipelines that can seamlessly interact with other MCP tools and resources."
fakepixels,base-mcp-server,2,82,"Base MCP Server provides a bridge between AI assistants and the Base blockchain network, enabling wallet management, balance checking, and transaction execution through natural language commands. Built with TypeScript and the viem library, it supports both Base Mainnet and Sepolia testnet, handling private key management securely while exposing tools for creating wallets, checking balances, sending transactions, and processing natural language requests. The implementation includes a natural language parser that recognizes common blockchain operation intents, making it particularly valuable for users who want to interact with Base network directly through conversational AI without managing technical blockchain details."
falahgs,gemini-data-analysis-research-mcp-server,1,,"Gemini Data Analysis Research MCP Server provides a bridge to Google's Gemini AI model, enabling data analysis, email communication, and detailed thinking process generation. This TypeScript implementation offers three main tools: analyze-data for processing Excel/CSV files with statistical analysis and visualization, send-email for dispatching messages with AI-generated subject lines, and generate-thinking for producing comprehensive reasoning outputs. The server handles file processing, data visualization, and AI prompt engineering behind the scenes, making it particularly valuable for researchers and analysts who need to extract insights from datasets, communicate findings via email, or document AI reasoning processes."
am0y,mcp-fal,37,,"The fal.ai MCP Server provides a bridge between AI assistants and fal.ai's machine learning models and services through the Model Context Protocol. Built with Python using the FastMCP framework, it exposes tools for listing, searching, and using any fal.ai model, with support for both direct and queued execution modes. The implementation handles authentication, file uploads to fal.ai CDN, and queue management (status checking, result retrieval, and request cancellation), making it particularly valuable for AI assistants that need to generate images, process media, or leverage other specialized AI capabilities without leaving the conversation context."
el-el-san,fal-mcp-server,2,,"This MCP server provides a bridge to fal.ai's video generation models (Luma Ray2 and Kling v1.6 Pro), enabling AI assistants to create videos from text prompts and/or images. It offers two main tools: 'generate-video' for creating videos with customizable parameters like aspect ratio, resolution, and duration, and 'check-video-status' for monitoring ongoing generation requests. The implementation handles API authentication, request formatting, and error handling, making it easy for AI systems to leverage powerful video generation capabilities without managing the underlying API complexities."
falgom4,calendar-mcp,1,,"Google Calendar AutoAuth MCP Server enables AI assistants to manage Google Calendar through natural language interactions. It features comprehensive calendar management capabilities including creating, updating, deleting, and searching events with support for natural language date/time input. The implementation provides a streamlined OAuth2 authentication flow with auto browser launch, supports both Desktop and Web application credentials, and stores authentication globally for convenience, making it ideal for users who need to integrate calendar management directly into their AI assistant workflows."
falkordb,falkordb-mcpserver,6,,"FalkorDB MCP Server provides a bridge between AI models and FalkorDB graph databases, enabling natural language querying of graph data. Built with TypeScript and Express, it implements the Model Context Protocol to translate requests into FalkorDB queries and format responses according to MCP standards. The server features authentication via API keys, connection management for multiple FalkorDB instances, and endpoints for executing queries, retrieving metadata, and listing available graphs. It's particularly valuable for AI applications that need to analyze relationships in graph data, such as knowledge graphs, recommendation systems, or network analysis."
famano,mcp-server-office,7,,"This MCP server implementation, developed for Microsoft Office document manipulation, provides a Python-based interface for AI assistants to interact with Word documents. Built using libraries like python-docx and leveraging the Model Context Protocol, it offers tools for reading, writing, and editing .docx files, including handling of text, tables, and images. The implementation focuses on efficient document processing, making it easier for AI models to analyze and generate content in Word format. It's particularly useful for automating document creation, content analysis, or report generation tasks that require working with structured Word documents, enabling AI to manipulate Office files without needing deep knowledge of the underlying file formats."
family-it-guy,perplexity-mcp,2,,"Perplexity MCP Server provides Claude Desktop with direct access to Perplexity AI's language models through a lightweight proxy implementation. It offers two main tools: perplexity_ask for single questions using the llama-3.1-sonar-small-128k-online model with web search capabilities, and perplexity_chat for multi-turn conversations using mixtral-8x7b-instruct. The server communicates via stdio transport, requires only a Perplexity API key for authentication, and is designed for easy installation through npm or direct execution, making it ideal for users who need to augment Claude with Perplexity's specialized search and reasoning capabilities."
farhankaz,redis-mcp,6,1657,"This Redis MCP server, created by fahrankaz, provides a bridge between Model Context Protocol clients and Redis databases. It supports core Redis operations like GET, SET, SADD, SMEMBERS, ZADD, ZRANGE, ZRANGEBYSCORE, ZREM, HGET, HGETALL, HMSET, DEL, and SCAN. The implementation is designed as a lightweight CLI tool that starts a Node.js server, making it easy to integrate with existing MCP setups. It's particularly useful for scenarios requiring fast, in-memory data storage and retrieval within AI workflows, such as caching intermediate results or maintaining session state across multiple AI interactions."
ia-programming,mcp-images,1,,"An MCP server that enables AI assistants to fetch, process, and display images from both URLs and local files. Built by FarhaParveen919, this implementation uses FastMCP to expose a tool that handles image retrieval, automatic compression of large images while maintaining quality, and proper formatting for LLM consumption. The server intelligently processes multiple image sources concurrently, handles various image formats, and includes robust error handling and logging - making it particularly valuable for applications where AI assistants need to work with visual content from diverse sources."
farzad528,mcp-server-azure-ai-agents,33,,"The Azure AI Search MCP server connects Claude Desktop to Azure AI Search services, enabling users to query their search indexes using three distinct methods: keyword search for exact lexical matches, vector search for semantic similarity using embeddings, and hybrid search combining both approaches. Built with Python using the FastMCP framework, it handles authentication through Azure credentials, formats search results in readable markdown, and provides detailed error handling. This implementation is particularly valuable for users who need to retrieve information from their Azure AI Search indexes directly within Claude conversations, making it ideal for research, content discovery, and knowledge management workflows."
fastnai,mcp-fastn,7,,"Fastn is a dynamic tool registration and execution server that enables seamless integration with services like Claude.ai and Cursor.ai. It provides a unified platform for connecting various services through a simple setup process, with robust logging and error handling capabilities. The server supports integration with platforms like Slack, Notion, and HubSpot, offering developers a flexible API-driven solution for real-time operations."
fatwang2,search1api-mcp,115,6418,"This Search1API MCP server, developed by fatwang2, provides an interface for AI assistants to perform web searches, news searches, content extraction, and sitemap retrieval using the Search1API service. It enables AI agents to query Search1API and retrieve structured results through a controlled MCP server. Built in JavaScript, the implementation handles API authentication and request formatting for multiple Search1API endpoints. By leveraging Search1API's capabilities, this server allows AI systems to access real-time web information, news articles, and site structures in a safe manner. It is particularly useful for AI assistants needing to conduct web research, analyze current events, or extract content from websites while maintaining a clear separation between the AI model and external data sources."
faurealexis,sentry-mcp-server,2,,"Sentry-MCP-Server provides a bridge between AI assistants and Sentry error tracking platform, enabling retrieval and analysis of application errors through a standardized interface. The server exposes tools for fetching detailed issue information including stacktraces, error types, and occurrence statistics from Sentry projects. Built with TypeScript and the MCP framework, it authenticates with Sentry via API tokens, handles URL parsing for convenient issue referencing, and formats error data in a structured way. This implementation is particularly valuable for developers who need to investigate application crashes, monitor error trends, or troubleshoot production issues directly through conversational AI without context switching."
fdionisi,gitingest-mcp,0,,"GitIngest MCP provides AI assistants with direct access to GitHub and GitLab repositories, enabling code exploration and analysis without context switching. The server exposes tools for searching repositories, viewing file structures, and reading file contents with syntax highlighting support. Built in Rust with a modular architecture, it handles authentication via environment variables for API rate limits, implements intelligent file filtering with customizable ignore patterns, and supports various Git references (branches, tags, commits). This implementation is particularly valuable for developers who need to explore codebases, understand project structures, or reference specific code snippets during AI-assisted programming tasks."
claw256,mcp-web-search,5,,"This Google Search MCP server, developed by Fearghal Hayes, provides Google search capabilities, web content extraction, and screenshot functionality with advanced bot detection avoidance. Built with TypeScript and leveraging the rebrowser-puppeteer library, it offers features like custom search filtering, markdown conversion, caching, and browser instance pooling. The implementation focuses on reliability and performance, with configurable rate limiting and resource management. It's particularly useful for AI assistants and applications needing robust web search and content extraction capabilities, enabling use cases such as research automation, content aggregation, and web monitoring without dealing directly with browser APIs or search engine complexities."
springwq,kayzen-mcp,0,539,"Kayzen Analytics MCP Server enables Claude Desktop to access and analyze marketing campaign data from the Kayzen API. Developed by FeedMob, it provides tools for listing available reports and fetching report results with date filtering capabilities, along with a specialized prompt for analyzing performance metrics, trends, and optimization opportunities. The implementation authenticates with the Kayzen API using environment variables and handles token management, making it particularly valuable for marketers who need to access campaign analytics data directly within their AI assistant conversations."
p-funk,fegis,6,,"FEGIS is a schema-driven memory engine that gives LLMs cognitive tools and structured persistent memory. Developed by Perry Golden, it uses Qdrant vector database with FastEmbed for efficient storage and retrieval of information based on predefined archetypes. The system allows models to create, store, and search through structured cognitive artifacts like thoughts, reflections, and decisions using a facet-based organization system. This implementation enables LLMs to maintain context across conversations, build knowledge bases with qualitative dimensions, and create meaningful connections between related ideas - making it particularly valuable for applications requiring persistent memory and structured thinking."
feiskyer,mcp-kubernetes-server,0,5439,"MCP Kubernetes Server provides a bridge between AI assistants and Kubernetes clusters through kubectl commands. Developed by Pengfei Ni, this implementation exposes a single tool that executes kubectl commands and returns their output, enabling AI assistants to manage Kubernetes resources directly within conversations. The server runs on stdio transport, making it compatible with Claude Desktop integration, and includes error handling for failed command executions. It's particularly valuable for DevOps workflows that require Kubernetes cluster management without leaving the conversation interface."
felipfr,linkedin-mcpserver,1,,"LinkedIn MCP Server provides a bridge to the LinkedIn API, enabling AI assistants to search for profiles, retrieve detailed professional information, search job postings, and send messages through a standardized protocol. Built with TypeScript using the Model Context Protocol SDK, it implements OAuth authentication with LinkedIn's API and includes comprehensive metrics tracking for performance monitoring. The server exposes seven tools for LinkedIn interactions including people search, profile retrieval, job search, and messaging capabilities, making it ideal for recruitment workflows, professional networking, and career research applications."
texasfortress-ai,rs_filesystem,17,,"This Rust-based MCP filesystem server, developed by Chris Odom, provides a set of filesystem tools for use with Claude Desktop or other MCP clients. Built using the rpc-router library for JSON-RPC routing, it offers functionality like listing prompts, resources, and tools, as well as executing specific filesystem operations. The server implements security measures by restricting operations to user-defined allowed directories. By abstracting filesystem interactions through a standardized MCP interface, it enables AI systems to safely perform file and directory operations. This implementation is particularly useful for applications requiring controlled filesystem access, facilitating use cases such as AI-assisted file management, automated data processing, and secure document handling within specified directories."
felores,airtable-mcp,30,,"This Airtable MCP server, developed by felores, enables AI assistants to programmatically manage Airtable bases, tables, fields, and records through a standardized interface. It provides tools for common operations like listing bases, creating/updating tables and fields, and performing CRUD operations on records. The server integrates directly with the Airtable API, abstracting away complexities to offer a simplified workflow for AI systems. By connecting AI capabilities with Airtable's flexible database structure, this implementation empowers AI assistants to handle tasks like data entry, analysis, and reporting within Airtable workspaces. It is particularly useful for applications requiring dynamic data management, collaborative workflows, or any scenario where an AI system needs to interact with structured data in Airtable."
felores,cloudinary-mcp-server,4,,"This Cloudinary MCP server, developed by felores, enables seamless integration of Cloudinary's image and video upload functionality into AI-assisted workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a straightforward interface for uploading media to Cloudinary through Claude Desktop and compatible MCP clients. The implementation supports various upload options including file paths, URLs, and base64 data URIs, along with customizable parameters like resource type, public ID, and tags. It's particularly useful for AI assistants and developers looking to incorporate on-demand media uploads into their applications, allowing for dynamic content creation and management within Cloudinary's ecosystem."
felores,docs_scraper_mcp,1,,"Documentation scraping server that enables AI assistants to extract structured content from web-based documentation through multiple crawling strategies. Built with Python and the crawl4ai library, it provides tools for single URL crawling, multi-URL batch processing, sitemap-based crawling, and menu-driven navigation extraction, with features like rate limiting, concurrent request handling, and robots.txt compliance. The implementation is particularly valuable for users who need to ingest documentation into AI systems while respecting site access policies and maintaining clean markdown output."
felores,gdrive-mcp-server,17,,"This Google Drive MCP server, developed by Anthropic, enables Large Language Models to interact with Google Drive through the Model Context Protocol. Built with TypeScript and leveraging the Google Drive API, it provides tools for listing, searching, and reading files from Google Drive. The implementation offers a straightforward authentication process and integration with the MCP SDK, making it accessible for AI assistants or applications needing to access and analyze documents stored in Google Drive. It's particularly useful for tasks like document retrieval, content analysis, or managing file operations programmatically within AI workflows."
felores,placid-mcp-server,9,1109,"This Placid.app MCP server, developed by Felipe Restrepo, integrates with Placid's API to provide image generation capabilities for AI workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for listing templates and generating creatives using dynamic content. The implementation focuses on secure API token management, error handling, and type safety, making it accessible for AI assistants or applications needing to create visual content programmatically. It's particularly useful for tasks like social media post creation, marketing material generation, or dynamic image production, enabling quick access to Placid's template-based image creation without requiring deep knowledge of the underlying API complexities."
fengin,image-gen-server,86,,"This MCP server, developed by an unknown author, provides a lightweight implementation for handling MCP requests. Built with Python and leveraging the aiohttp and aiofiles libraries, it offers asynchronous capabilities for efficient request processing. The server focuses on basic functionality, utilizing the fastmcp and mcp libraries for core MCP operations. It's designed for developers who need a simple, customizable MCP server solution, enabling use cases such as prototyping MCP-based applications, testing MCP integrations, or serving as a foundation for more complex MCP implementations."
fengin,search-server,57,,"Search-Server provides a unified interface for AI assistants to access multiple search engines through a standardized API. The implementation integrates with Brave Search, Metaso, and Bocha search services, handling authentication, rate limiting, and response formatting for each provider. Built with Python and modern async libraries like httpx, aiohttp, and Playwright, it abstracts away the complexity of different search APIs while maintaining provider-specific features. This server is particularly valuable for developers who need to incorporate web search capabilities into AI applications without managing multiple search engine integrations separately."
fenxer,steam-review-mcp,1,552,"Steam Review MCP provides AI assistants with access to Steam game reviews and information through a Node.js server implementation. It offers tools to fetch game reviews with customizable parameters (language, filter type, review type) and game details from the Steam Store API, along with pre-built prompts for summarizing reviews and analyzing recent player sentiment. The implementation cleans and formats review text for compatibility with various LLM models, making it particularly valuable for understanding player feedback, identifying game strengths and weaknesses, and tracking changes in player sentiment over time."
fer1994ly,vercel_mcp_complete,0,,e.g. vercel-list-all-deployments and other tools
ferrislucas,iterm-mcp,264,17392,"iterm-mcp, created by Ferris Lucas, is a Model Context Protocol server that provides direct access to the currently active tab in iTerm. It enables seamless execution of shell commands within the active iTerm session, bridging the gap between AI assistants and terminal operations. This implementation stands out by focusing specifically on iTerm integration, making it particularly useful for developers and system administrators who frequently work in terminal environments. It simplifies workflow automation, remote system management, and interactive scripting tasks by allowing AI systems to directly interact with the user's terminal session. The server is built with TypeScript, ensuring type safety and easy integration with other JavaScript-based tools and environments."
feuerdev,keep-mcp,2,523,"Keep-MCP is a Python-based MCP server that provides a bridge to Google Keep, allowing AI assistants to search, create, update, and delete notes. Developed by Jannik Feuerhahn, it uses the gkeepapi library to authenticate with Google's services via master tokens, and includes safety features that restrict modification operations to notes with a specific 'keep-mcp' label unless explicitly overridden. The server exposes four main tools for note management while handling authentication and serialization behind the scenes, making it particularly useful for users who want to integrate note-taking capabilities into their AI workflows."
fewsats,fewsats-mcp,10,7456,"Fewsats MCP server integrates with the Fewsats payment platform, enabling AI agents to securely make purchases through a simple interface. Built with Python using the FastMCP framework, it exposes four key tools: checking wallet balances, retrieving payment methods, paying for offers using L402 protocol, and accessing payment details. The implementation is designed to run via either uv package manager or pip installation, and requires a Fewsats API key for authentication. This server is particularly valuable for applications where AI agents need to handle financial transactions autonomously while maintaining security and user control over the payment process."
fibery-inc,fibery-mcp-server,11,1886,"Fibery MCP Server provides a flexible integration with the Fibery API, enabling AI assistants to interact with Fibery workspaces through a set of standardized tools. The server supports operations like querying databases, creating and updating entities, retrieving schema information, and managing workflow states. Built for developers and teams using Fibery for project management, it streamlines interactions between AI systems and collaborative work tracking platforms."
admica,filescopemcp,56,,"FileScopeMCP is a TypeScript-based MCP server that analyzes codebases to identify important files based on dependency relationships, providing AI tools with structural understanding of projects. It scans source files to detect imports across multiple languages (JavaScript, TypeScript, Python, C/C++, Rust, Lua, Zig), calculates importance scores (0-10) based on dependency patterns, and generates visualizations using Mermaid diagrams. The implementation features persistent storage of file trees, cross-platform path handling, and tools for querying file importance, finding critical components, and adding human-readable summaries to files, making it valuable for developers who want AI assistants to understand the architecture and significance of different files in their projects."
filipecalegario,mcp-server-strateegia,0,144,"Strateegia MCP Server provides a bridge to the Strateegia API, enabling AI assistants to access and interact with projects and labs through a standardized MCP interface. Built with TypeScript and the Model Context Protocol SDK, it exposes a single tool for listing projects, designed to help users quickly retrieve an overview of their Strateegia workspace. Particularly useful for teams and individuals wanting to integrate their collaborative project data directly into AI workflows."
filipptrigub,linkedin-mcp,1,,"LinkedIn MCP server enables Claude Desktop users to post content directly to LinkedIn with support for text and media attachments. Developed by Filipp Trigub, it handles OAuth2 authentication with LinkedIn's API, securely stores tokens, and provides tools for creating posts with customizable visibility settings. The implementation is particularly valuable for users who want to share professional updates on LinkedIn without leaving their Claude conversation, streamlining social media workflow for both text-only and media-rich content."
financial-datasets,mcp-server,199,,"Financial Datasets MCP Server provides AI assistants with direct access to stock market data through a set of specialized financial tools. Built by Financial Datasets, it enables Claude and other AI assistants to retrieve income statements, balance sheets, cash flow statements, current and historical stock prices, and market news via the Financial Datasets API. The server is designed to run locally using the uv package manager and can be easily integrated with Claude Desktop, making it valuable for financial analysis, investment research, and market monitoring workflows without leaving the conversation interface."
findmine,findmine-mcp,1,1067,"FindMine's MCP server connects Claude and other AI assistants to FindMine's product styling API, enabling fashion recommendations and outfit creation. Built with TypeScript and the Model Context Protocol SDK, it provides tools for browsing products, generating outfit recommendations, finding visually similar items, and accessing style guides. The implementation features configurable caching, sample data for development, and customizable style guides, making it ideal for e-commerce platforms wanting to enhance their product discovery with AI-powered fashion styling assistance."
plugins,mcp,1575,7024,"This Genkit MCP plugin, developed by Firebase, provides seamless integration between Genkit and the Model Context Protocol (MCP). It enables Genkit developers to both consume MCP tools, prompts, and resources as a client and expose Genkit functionality as an MCP server. The client automatically discovers and registers available MCP actions with Genkit, while the server exposes Genkit tools and prompts via MCP. Built with TypeScript, it offers flexible configuration options for connecting to MCP servers, including local process spawning and remote connections. The implementation handles parsing and coercion of MCP responses for compatibility with Genkit's structured approach. It is particularly useful for developers looking to extend Genkit's capabilities with external MCP-compatible services or expose their Genkit-based AI assistants as MCP servers."
fireproof-storage,mcp-database-server,15,,"This MCP server, developed by the Fireproof Storage team, integrates a Fireproof database to provide a JSON document store with CRUD operations and querying capabilities. It offers a simple interface for AI assistants to store, retrieve, update, and delete JSON documents, as well as perform queries sorted by any field. The implementation stands out by leveraging Fireproof's local-first database technology, enabling offline-capable and real-time collaborative features. By connecting AI capabilities with a flexible document store, this server empowers AI systems to manage structured data efficiently. It is particularly useful for applications requiring persistent storage of AI-generated content, collaborative note-taking systems, or any scenario where an AI assistant needs to work with dynamic, structured data."
fisheepx,mcp-easy-copy,0,435,"MCP Easy Copy is a utility server that simplifies working with Claude Desktop by automatically reading the configuration file and presenting all available MCP services in an easy-to-copy format. Created by fisheep, it solves the problem of having to remember service names or look them up in configuration files by displaying them at the top of the tools list. This is particularly useful when you have many MCP services configured, need to explicitly specify a service name, or are troubleshooting between different services."
fl0w1nd,grok2-image-mcp-server,10,1336,"Grok2 Image MCP Server enables AI assistants to generate images through the Grok2 model using the Model Context Protocol. Built with TypeScript and running on Node.js, this server implementation uses stdio transport to facilitate communication between clients and the image generation capabilities of Grok2. The server is designed for easy integration into existing workflows, making it particularly valuable for applications requiring on-demand image creation from text prompts without complex setup or configuration."
fleagne,backlog-mcp-server,3,897,"Backlog MCP Server provides integration with the Backlog API, enabling AI assistants to manage projects, issues, and wikis within Backlog workspaces. Built by Toshinori Suzuki, it offers tools for retrieving, creating, updating, and deleting Backlog resources through a TypeScript implementation that can be run via NPX or Docker. The server requires Backlog API credentials and is particularly useful for teams who want to incorporate project management tasks directly into their AI assistant workflows without switching contexts."
fleuristes,fleur-mcp,1,6576,"Fleur MCP server enables seamless integration with the Fleur application, an app store that allows users to access various applications like Gmail, Linear, and Slack without leaving their chat interface. The implementation provides two main tools: explaining what Fleur is when a user types 'hello fleur' and opening the Fleur application with platform-specific methods for both macOS and Windows. It includes robust executable detection for Windows systems and handles onboarding state management, making it ideal for enhancing AI assistant capabilities with direct access to external applications."
flexpa,mcp-fhir,25,,"This FHIR MCP server, developed by Flexpa, enables seamless integration of FHIR (Fast Healthcare Interoperability Resources) data into AI-assisted workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for accessing and searching FHIR resources through Claude Desktop and compatible MCP clients. The implementation supports all FHIR resource types available in the connected FHIR server's CapabilityStatement, offering tools for resource retrieval via URIs and advanced search capabilities. It's particularly useful for healthcare professionals, researchers, and developers looking to incorporate on-demand access to medical data into their AI-assisted applications, allowing for dynamic querying and analysis of FHIR-compliant healthcare information."
flipt-io,mcp-server-flipt,1,737,"Flipt MCP Server provides a bridge between AI assistants and Flipt feature flag management, enabling operations like listing, creating, updating, and deleting namespaces, flags, segments, and rules. Built with TypeScript and the Model Context Protocol SDK, it communicates with the Flipt API through a configurable endpoint and optional authentication token. The server can be deployed via npm or Docker, making it accessible for developers who want to integrate feature flag management into their AI assistant workflows. Particularly useful for evaluating flags for specific entities, toggling features on/off, and managing complex rollout strategies through constraints, variants, and distributions."
chatmcp,mcp-server-flomo,20,,"The mcp-server-flomo provides a simple interface for writing notes to Flomo's note-taking service through the Model Context Protocol. Built with TypeScript, it exposes a single 'write_note' tool that accepts markdown-formatted content and posts it to Flomo via their webhook API. The server requires a Flomo API URL (configured through environment variables or command-line arguments) and returns a link to view the created note. This implementation is ideal for AI assistants that need to capture thoughts, ideas, or research findings directly to a user's Flomo account without requiring manual copying and pasting."
floodfx,mcp-server-linear,1,,"This MCP server provides integration with Linear, a project management tool, allowing AI assistants to search for issues with detailed filtering options. Built with TypeScript and Bun, it currently implements a 'linear-search-issues' tool that supports filtering by team, status, assignee, labels, project, priority, and more. The implementation was created as an alternative to an existing Linear MCP server that had usability issues, and is designed to be run as a standalone executable or with Bun/Node runtimes. Future plans include adding tools for creating and updating issues, managing projects, and accessing various Linear resources."
flothjl,edgar-sec-mcp,1,,"edgar-sec-mcp is an MCP server that enables AI agents to access and analyze SEC EDGAR filings data. Built by Josh Floth, it provides tools for retrieving proxy statements containing executive compensation information and Form 4 filings for insider trading details. The implementation uses the SEC's public API with proper user-agent headers, parses HTML tables from filings into CSV format, and handles CIK lookups by ticker symbol with caching support. Particularly valuable for financial analysis workflows that require extracting structured data from regulatory filings without leaving the conversation interface."
flrngel,mcp-painter,8,,"A drawing tool server that provides AI assistants with canvas manipulation capabilities through a simple interface. Built with TypeScript, it enables creating canvases, drawing filled rectangles with custom colors, and exporting the results as PNG images or raw pixel data. Particularly useful for AI assistants that need to create or edit basic images through natural language commands, as demonstrated by the included cowboy drawing example."
flux159,mcp-server-kubernetes,386,,"This MCP server, developed by Flux159, enables AI assistants like Claude to interact with Kubernetes clusters. It provides tools for listing pods, services, deployments, and namespaces, as well as creating and deleting pods. The server integrates with kubectl and automatically connects to the current context, allowing seamless management of Kubernetes resources through natural language commands. By bridging AI capabilities with Kubernetes operations, this implementation facilitates easier cluster management and troubleshooting. It is particularly useful for DevOps teams looking to streamline their Kubernetes workflows, developers needing quick access to cluster information, or system administrators performing routine cluster maintenance tasks through AI-assisted interactions."
flux159,mcp-server-modal,4,,"This Modal MCP server, developed by the Server Modal team, enables deployment of Python scripts to Modal's serverless compute platform. It integrates with Modal's API to provide a streamlined interface for running code in the cloud. The server abstracts the complexities of Modal's infrastructure, offering operations for script deployment, execution, and result retrieval. By connecting AI systems with Modal's scalable computing resources, this implementation allows for on-demand execution of Python code without managing servers. It is particularly useful for AI applications requiring distributed computing, data processing pipelines, or any system that needs to run Python scripts efficiently in a cloud environment."
frankdeno,flux-image-generator-mcp,0,,"FLUX Image Generator server provides a bridge to Black Forest Lab's FLUX model for AI image generation. Built with TypeScript and the latest MCP SDK, it exposes tools for generating single images with customizable parameters like dimensions and safety settings, quick image generation with sensible defaults, and batch processing of multiple prompts. The implementation features robust error handling, configurable output paths, and detailed logging, making it valuable for users who need programmatic access to FLUX's capabilities through natural language requests."
fluxinc,dicom-mcp-server,2,,"This MCP server implementation provides DICOM connectivity testing capabilities through a Model Context Protocol interface. Developed by Flux Inc., it offers tools for listing DICOM nodes, performing C-ECHO operations, and managing node configurations. The server is designed for use cases requiring DICOM network testing and diagnostics, such as verifying connectivity to PACS systems or troubleshooting medical imaging workflows."
m-mcp,flux-schnell-server,0,,"Flux Schnell Server is a lightweight Python MCP server built with the MCP framework, designed to provide a fast and efficient server implementation. It uses httpx for HTTP requests and includes a demo HTML interface, targeting developers who need a quick, minimal server setup with basic configuration and dependency management."
focussearch,focus_mcp_data,3,,A Model Context Protocol (MCP) server enables artificial intelligence assistants to directly query data results. Users obtain data results in natural language.
focussearch,focus_mcp_sql,11,,"Focus MCP SQL Server enables AI assistants to convert natural language queries into SQL by registering database schema information and handling text-to-SQL conversions. Built by DataFocus, it implements the Model Context Protocol using Spring Boot and exposes tools for registering tables, columns, and relationships, as well as initiating and continuing text-to-SQL conversations. The server runs on stdio transport for seamless integration with AI assistants and provides a structured approach to database schema representation, making it particularly valuable for users who need to query databases using natural language without writing SQL manually."
folderr-tech,folderr-mcp-server,1,227,"This Folderr MCP server, developed by santiq, provides a bridge to interact with Folderr's API, specifically for managing and communicating with Folderr Assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for authentication, listing assistants, and sending questions to specific assistants. The server implements error handling and configuration management, storing settings in a config.json file. By abstracting the complexities of the Folderr API, it enables AI systems to easily interact with Folderr's assistant ecosystem. This implementation is particularly valuable for applications requiring programmatic access to Folderr Assistants, facilitating use cases such as automated task delegation, multi-assistant orchestration, and AI-enhanced workflow management."
jlfwong,food-data-central-mcp-server,1,,"A Model Context Protocol server that provides access to the USDA's FoodData Central database, allowing AI assistants to search for foods and retrieve detailed nutritional information. The implementation supports searching by keywords, retrieving food details by ID, accessing multiple foods simultaneously, and listing foods with pagination options. It exposes both MCP resources for direct data access and tools for more complex search operations, making it useful for nutrition analysis, meal planning, and dietary information retrieval applications."
forayconsulting,zoom_transcript_mcp,2,,"This MCP server implementation provides a bridge to the Zoom API for managing cloud recording transcripts. It offers functionality to authenticate with Zoom, retrieve recordings and transcripts, and process transcript data. The server is built using TypeScript and integrates natural language processing capabilities through the 'natural' library. It's designed for use cases requiring AI assistants to analyze or interact with Zoom meeting transcripts, such as summarizing discussions or extracting key information from recorded meetings."
formulahendry,mcp-server-code-runner,109,2499,"Code Runner MCP Server enables AI assistants to execute code snippets in multiple programming languages directly within conversations. Built by Jun Han, it supports over 30 languages including JavaScript, Python, Ruby, Go, and more by creating temporary files and executing them with the appropriate interpreter. The server is designed for easy integration with VS Code and Claude Desktop through simple configuration, making it ideal for demonstrating code examples, testing algorithms, or exploring system information without leaving the conversation interface."
fortunto2,prefect-mcp-server,1,2206,"Prefect MCP Server provides a bridge between AI assistants and the Prefect workflow orchestration platform, enabling interaction with workflows, deployments, and flow runs through standardized MCP tools. Built with FastMCP and the official Prefect client, it offers capabilities for retrieving flow information, managing flow runs, searching deployments, and executing workflows directly from AI interfaces. The server supports both stdio and SSE transport methods, making it compatible with Cursor IDE and Claude Desktop, and is particularly valuable for DevOps teams who need to monitor, troubleshoot, or trigger Prefect workflows without switching contexts to the Prefect UI or CLI."
fosdickio,binary_ninja_mcp,31,,"Binary Ninja MCP provides a bridge between the Binary Ninja reverse engineering platform and large language models through a HTTP server that exposes binary analysis capabilities. The plugin enables users to perform tasks like listing functions, decompiling code, renaming symbols, and analyzing binary structures directly through LLM interfaces. Built with Python 3.12, it features a modular architecture with separate components for binary operations, API endpoints, and server management. The implementation is particularly optimized for Claude Desktop integration, allowing reverse engineers to leverage AI assistance for complex binary analysis workflows without leaving their development environment."
fr0ziii,perplexity-mcp-server,4,,"This MCP server, developed by fr0ziii, provides a standardized interface for interacting with the Perplexity AI API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for maintaining ongoing conversations, performing searches, retrieving documentation, finding APIs, and checking for deprecated code. The implementation focuses on abstracting the complexities of API communication and maintaining chat history, enabling AI models to seamlessly integrate Perplexity AI's capabilities. By connecting AI assistants with Perplexity's advanced language models, this server allows for sophisticated scenarios like context-aware conversations, in-depth research, and code analysis. It's particularly useful for applications and AI systems that require access to up-to-date information and natural language processing capabilities through a standardized MCP interface."
fradser,mcp-server-to-markdown,30,512,"MCP Server to Markdown provides a bridge between Claude and Cloudflare's AI services, enabling the conversion of various file formats to markdown descriptions. This implementation authenticates with Cloudflare using API credentials, supports multiple file types including PDFs, images, HTML, and Office documents, and handles file uploads through a secure curl-based approach. The server exposes a single tool that processes files by sending them to Cloudflare's tomarkdown API endpoint and returns structured descriptions with metadata. Particularly valuable for workflows that require detailed content analysis and documentation generation without leaving the conversation interface."
fradser,mcp-server-local-web-search,5,,"This MCP server implementation provides a local web search capability, integrating with a headless browser to perform Google searches and extract content from web pages. Developed by Frad Lee, it offers features such as customizable search queries, result limiting, domain exclusion, and content truncation. The server uses the Readability library to clean and parse web content, converting it to markdown format. It's designed for AI assistants and other MCP-compatible clients that require up-to-date web information without direct internet access. The implementation is particularly useful for tasks like research, content aggregation, and information retrieval across various domains."
fradser,mcp-server-mas-sequential-thinking,93,5337,"Sequential Thinking Multi-Agent System (MAS) implements a coordinated team of specialized AI agents to break down complex problems through structured thinking steps. Built by Frad LEE using the Agno framework and DeepSeek models, this server orchestrates a Team Coordinator, Strategic Planner, Researcher (with Exa search capabilities), Core Analyzer, Quality Controller, and Integration Specialist working in parallel to process thoughts with greater depth than single-agent approaches. The implementation supports revision steps, branching analysis paths, and provides detailed guidance throughout the thinking process, making it particularly valuable for multi-disciplinary problem solving requiring diverse expertise and comprehensive analysis."
franccesco,bloomy-mcp,0,,"This MCP server implementation provides a bridge to the Bloom Growth GraphQL API, enabling AI assistants to interact with Bloom's growth management platform. Developed by Franccesco Orozco, it utilizes the MCP framework to expose Bloom's functionality through a standardized interface. The server supports authentication via environment variables and includes error handling capabilities. It's particularly useful for AI-assisted workflows requiring integration with growth management and analytics tools."
franccesco,hex-mcp,0,,"This MCP server implementation provides a bridge to the Hex API, enabling AI assistants to interact with Hex projects. Developed by Franccesco, it utilizes the httpx library for making HTTP requests and integrates with the MCP CLI. The server offers tools for retrieving project details, listing projects, viewing and managing project runs, and executing projects with custom parameters. It's designed for use cases requiring automated data analysis, report generation, or integration of Hex workflows into AI-assisted applications."
francesliang,custom_mcp_servers,0,,"The Transaction Categoriser MCP server provides AI assistants with the ability to process and organize financial transaction data. Built with Python using the FastMCP framework, it reads transaction files from a specified folder and categorizes them into predefined expense categories (such as Food/drinks, Transportation, Utilities) and income categories (Paycheck, Rental income, Other). The server outputs the categorized transactions in CSV format with date, amount, description, and category fields, making it particularly useful for personal finance management, expense tracking, and financial data organization within AI assistant conversations."
francisoliverlee,rocketmq-mcp,3,,"A Message Context Protocol (MCP) server implementation for RocketMQ, allowing AI applications to interact with RocketMQ message queues."
fred-em,headline-vibes,4,,"This MCP server, developed by Fred Em, provides sentiment analysis for news headlines from major US publications. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for analyzing headline sentiment on specific dates or using natural language queries. The implementation focuses on providing a normalized sentiment score, source distribution information, and sample headlines. By connecting AI models with current news sentiment data, this server enables sophisticated analysis of media trends and public opinion. It's particularly useful for applications and AI assistants that require insights into news sentiment, supporting use cases such as market analysis, public relations monitoring, and social media trend forecasting."
hungson175,wm_mcp,7,,"A Federal Reserve Economic Data (FRED) MCP server that provides access to macroeconomic indicators through Claude and other LLM clients. The implementation connects to the FRED API to retrieve real-time economic data series including GDP, employment statistics, inflation metrics, and monetary policy indicators. It offers tools for searching FRED series by description and fetching time-series data with customizable parameters. This server enables AI assistants to incorporate authoritative economic data into analyses, visualizations, and forecasts without requiring users to manually retrieve or format the information."
freedanfan,mcp_server,5,,"This MCP server implementation enables AI assistants to interact with multiple language model APIs through a unified interface. Built with Python using FastAPI, it supports both OpenAI and Anthropic models, allowing seamless switching between different AI providers. The server handles API authentication, request formatting, and streaming responses, while the accompanying client script provides a simple way to connect to the server. This implementation is particularly useful for developers who need to work with multiple AI models or want to create applications that can easily switch between different AI services without changing their core integration code."
freepeak,db-mcp-server,116,,"DB-MCP-Server provides a database connectivity layer for AI assistants through the Model Context Protocol, enabling direct interaction with MySQL and PostgreSQL databases. Built in Go, it supports both local stdio and production SSE transport modes, with configurable database connections through environment variables. The server can be deployed using Docker for easy integration into existing workflows, making it ideal for AI applications that need to query, analyze, or manipulate structured data stored in relational databases without requiring separate database access tools."
freespirit,pdfsearch-zed,2,,"This PDF Search extension for Zed, developed by stano, enables semantic searching of PDF documents and integrates results with Zed's AI Assistant. It uses a Qdrant vector database for storing document embeddings and OpenAI's API for generating them. The extension implements a RAG-style approach, allowing users to query PDF content through Zed's interface. Built with Rust and Python, it offers a unique combination of Zed integration and semantic PDF search capabilities. This tool is particularly useful for researchers, students, or professionals who frequently work with PDF documents and need quick, context-aware access to their contents within their coding environment."
csonigo,datagouv-mcp-server,6,,"Data Gouv MCP Server provides a bridge to the French government's data APIs, specifically enabling searches for detailed company information through the API Recherche Entreprises. Built by csonigo, this server implements the HTTP+SSE transport protocol and exposes a single tool that retrieves comprehensive business details including names, addresses, directors, and sector information when provided with a search query. The implementation is designed to run locally with Node.js and can be easily configured with any MCP client, making it valuable for workflows requiring access to official French business registry data without leaving the conversation interface."
freshlife001,mcp_poker,1,,"Texas Hold'em poker game server that enables AI agents to play poker through a standardized interface. Built with Node.js and TypeScript, it implements core poker game mechanics including betting rounds, hand evaluation, and multi-player table management. The server exposes tools for joining tables, placing bets, performing poker actions like check/fold/raise, and receiving real-time game state updates, making it valuable for training AI agents in strategic decision making and testing poker playing capabilities."
freshtechbro,vibe-coder-mcp,3,,"Vibe Coder MCP Server provides a suite of AI-assisted development tools for semantic routing, code generation, refactoring, and project management. Built with TypeScript and Node.js, it leverages OpenRouter to connect with LLM services like Gemini and Perplexity for tasks ranging from research to code stub generation. The implementation features a hybrid matching system for intelligent request routing, sequential thinking for complex reasoning, and specialized tools for Git integration, dependency analysis, and workflow automation. This server is particularly valuable for developers seeking to streamline their workflow with AI assistance while maintaining a structured approach to software development tasks."
frgmt0,mcp-inked,3,,"This Inked MCP server, developed by the Model Context Protocol team, provides tools for managing and generating long-form content through drafts. Built with TypeScript and leveraging SQLite or PostgreSQL for storage, it offers features like draft versioning, chapter organization, and multiple output formats including Markdown and plain text. The implementation focuses on intuitive conversation-based drafting and revision workflows. It's particularly useful for AI assistants or applications supporting novelists, report writers, and other long-form content creators, enabling efficient content development without requiring deep knowledge of document formatting or version control systems."
frstycodes,zed-github-mcp,2,,"Zed GitHub Context Server provides AI assistants with access to GitHub repositories directly within the Zed editor. This Rust-based extension integrates with the Model Context Protocol by installing and managing an npm package that serves as the bridge between Zed and GitHub's API. It requires users to configure a GitHub personal access token in their Zed settings, enabling the assistant to retrieve repository information, issue details, pull requests, and other GitHub context. Particularly valuable for developers who want AI assistance with code review, issue management, and repository exploration without leaving their editor."
fujitsu-ai,mcp-server-for-mas-developments,4,,"This MCP server implementation enables seamless integration between privateGPT and MCP-compatible applications. It provides a robust set of features including chat management, knowledge source organization, group-based permissions, and secure communication protocols. The server supports multiple programming languages through various client implementations, making it versatile for diverse AI-driven projects that require privateGPT's capabilities within an MCP framework."
funmula-corp,biggo-mcp-server,8,,"BigGo MCP Server provides product search, price history tracking, and specification search capabilities through BigGo's professional price comparison APIs. Developed by Funmula Corp, it enables AI assistants to search for products across multiple e-commerce platforms (including Amazon, Aliexpress, Ebay, Taobao, Shopee), track price histories by URL or related terms, and compare product specifications. The server supports both stdio and SSE transports, includes region-specific configurations for global markets, and is particularly valuable for shopping assistance, price monitoring, and product research workflows without leaving the conversation interface."
funwarioisii,cosense-mcp-server,0,,"This cosense MCP server, developed by funwarioisii, integrates the cosense platform with the Model Context Protocol, enabling AI assistants to access and interact with cosense project data. Built using TypeScript and the @modelcontextprotocol/sdk, it currently offers a 'Get Page' feature for retrieving project information. The server simplifies interaction with cosense's API, allowing AI systems to incorporate project management and collaboration data into their workflows. It supports both public and private cosense projects through configurable environment variables. This implementation is particularly useful for project managers, team leads, and AI developers working on productivity tools, facilitating use cases such as project status reporting, task management, and automated project analysis within the cosense ecosystem."
furey,mongodb-lens,84,,"MongoDB Lens is an MCP server that provides AI assistants with direct access to MongoDB databases for exploration and analysis. Built with Node.js and the Model Context Protocol SDK, it enables browsing databases and collections, executing queries with filters and projections, running aggregation pipelines, analyzing schemas, managing indexes, and optimizing query performance. The implementation includes specialized tools for inferring collection schemas, explaining query execution plans, and generating recommendations for database optimization, making it valuable for database exploration, performance tuning, and schema design assistance within AI workflows."
fusedio,fused-mcp,23,,"Fused MCP is a Python-based implementation that enables data scientists to easily connect Claude and other LLMs to executable Python code through User Defined Functions (UDFs). Built by Fused Labs, it provides a simple workflow for setting up MCP servers that can run either locally or remotely, with pre-built agents for common tasks like retrieving current time and fetching news. The repository includes step-by-step notebooks for both using existing functions and creating custom agents, making it particularly valuable for data scientists who want to extend their LLMs with Python capabilities without leaving their conversation interface."
futureunreal,mcp-pdf2md,3,,"PDF to Markdown Conversion Service provides a bridge to the MinerU API for converting PDF documents to Markdown format. This implementation uses the Model Context Protocol to expose PDF conversion capabilities, allowing users to transform complex PDF documents into clean, editable Markdown text while preserving the document structure. The service handles API authentication, file processing, and stores converted files in a configurable output directory, making it valuable for content migration, documentation workflows, and making PDF content more accessible and editable."
fyimail,whatsapp-mcp2,2,,"WhatsApp Web MCP provides a bridge between WhatsApp Web and AI models using the Model Context Protocol, enabling AI assistants like Claude to interact with WhatsApp through a standardized interface. The server offers two operational modes: a standalone mode that directly connects to WhatsApp Web, and an API client mode that connects to a separate WhatsApp API server. It exposes WhatsApp functionality through MCP tools and resources for sending messages, managing groups, searching contacts, and retrieving chat history, making it valuable for automating WhatsApp interactions and enhancing conversational AI capabilities without leaving the assistant interface."
g0t4,mcp-server-macos-defaults,10,6643,"This MCP server, developed by Wes Higbee, enables AI assistants to interact with macOS system preferences through the 'defaults' command. It provides tools for listing domains, finding settings, reading preference values, and writing new settings. The server implements subprocess calls to execute system commands, offering a straightforward interface for AI systems to query and modify macOS configurations. By connecting AI capabilities with low-level system operations, this implementation empowers AI assistants to perform tasks like customizing user interfaces, adjusting system behaviors, or troubleshooting macOS issues. It is particularly useful for applications requiring automated macOS configuration, user preference management, or any scenario where an AI system needs to interact with and reason about macOS system settings."
g0t4,mcp-server-memory-file,2,,"This MCP server for memory management, developed by an unnamed creator, provides a simple interface for AI assistants to store and retrieve contextual information in a text file. It integrates with the Model Context Protocol to offer operations for adding, searching, deleting, and listing memories. The server handles file I/O operations and implements basic text-based storage, allowing AI systems to maintain persistent context across conversations without complex database setups. By focusing on simplicity and ease of use, this implementation enables quick deployment for scenarios requiring lightweight, file-based memory storage. It is particularly useful for chatbots, personal assistants, or any application where an AI needs to recall information from previous interactions."
g0t4,mcp-server-commands,102,7655,"This MCP server, developed by g0t4, enables AI assistants to execute system commands and run scripts on the host machine. It provides tools for running individual shell commands and executing multi-line scripts in various languages like bash, fish, and Python. Built in JavaScript, the implementation exposes local system functionality via a standardized MCP interface, allowing Claude to interact directly with the host operating system. By bridging AI models with the local command line, this server enhances Claude's ability to perform system administration tasks, automate workflows, and execute code snippets. It is particularly useful for developers and power users seeking AI-powered assistance with command-line operations, scripting, and system automation tasks. The implementation emphasizes security, recommending careful review of commands before execution."
g2dgaming,spotify-mcp,0,,"Spotify-MCP provides a bridge between Claude and the Spotify API, enabling control of music playback through conversation. Built by Varun Srivastava on top of the spotipy library, this server implementation allows users to start, pause, and skip playback; search for tracks, albums, artists, and playlists; get detailed information about Spotify items; and manage the playback queue. The implementation handles authentication and device management automatically, making it valuable for users who want to control their Spotify experience without leaving their AI assistant interface."
gabornyergesx,mcp-notion-server,0,672,"This MCP server for Notion, developed by Gabor Nyerges, enables AI assistants to interact with Notion databases and pages through a standardized interface. It integrates with the Notion API to provide tools for database and page operations, including creation, querying, updating, and deletion. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers a bridge between Claude and Notion, allowing seamless content management and analysis. The server implements features like resource management, CRUD operations, and AI-powered content analysis prompts. This implementation is particularly useful for knowledge workers, project managers, and content creators looking to incorporate AI-driven Notion interactions into their workflows, enabling use cases like automated note-taking, content organization, and collaborative document management."
gabriel-paulos,twilio-mcp-python,0,,"This Twilio MCP server enables AI assistants to send SMS messages and retrieve message logs through the Twilio API. Built with Python using the FastMCP framework, it provides two main tools: 'textme' for sending text messages to specified phone numbers and 'msglogs' for retrieving message history. The implementation handles Twilio authentication through environment variables and includes phone number formatting validation. It's particularly useful for workflows requiring programmatic SMS communication, notification systems, or monitoring message delivery status without leaving the conversation interface."
gabrimatic,mcp-web-search-tool,3,,"A web search tool for the Model Context Protocol that provides real-time information retrieval using the Brave Search API. Designed with intelligent query categorization to proactively determine when web search is necessary, such as for current events, weather, sports scores, and time-sensitive information. Supports dynamic provider configuration and offers robust error handling to ensure reliable search capabilities across various query types."
gamelifezhao,mcp-figma,0,,"MCP-Figma provides a bridge between AI assistants and the Figma design platform, enabling direct interaction with Figma files and resources. Built with TypeScript and leveraging the Figma API, it allows for querying design assets, retrieving file information, and potentially manipulating design elements through a standardized interface. This implementation is particularly valuable for designers and product teams who want to access or modify their Figma designs through conversational AI without switching contexts."
mahecode,gamethinking-mcp-server,1,,"Game Thinking MCP Server provides a structured tool for dynamic and iterative game design problem-solving, enabling developers to adjust game mechanics, explore alternative gameplay scenarios, and build cohesive game designs through a sequential thinking process. Built with TypeScript and integrating Three.js game engine capabilities, it supports iterative game concept development with flexible branching and revision strategies."
gannonh,firebase-mcp,79,4221,"Firebase MCP server provides a standardized interface for AI assistants to interact with Firebase services including Authentication, Firestore, and Storage. Built by Gannon Hall, this TypeScript implementation enables LLM clients to perform user management, document database operations, and file storage tasks through a consistent set of MCP tools. Particularly useful for developers building AI-powered applications that require seamless integration with Firebase's backend services."
gaplydev01,coingecko-mcp-server,1,,"CoinGecko API Server provides a Node.js Express server that interfaces with the CoinGecko cryptocurrency data API through both REST endpoints and MCP integration. It supports both free and Pro API access with automatic fallback, implements comprehensive error handling, and exposes cryptocurrency market data including prices, trends, and detailed coin information. The server includes a JSON-RPC 2.0 endpoint for AI assistants to discover and call methods, making it particularly valuable for financial analysis, portfolio tracking, and market research without leaving the conversation interface."
garblesnarff,gemini-mcp-server,0,,"Gemini MCP Server provides a bridge between Claude Desktop and Google's Gemini AI for image generation, enabling users to create images directly through conversational interaction. Built by Garblesnarff, the server implements a JSON-RPC protocol that allows Claude to call the generate_image tool, supporting configuration of model parameters like temperature and style. It's particularly useful for users who want seamless, configurable image generation within their AI workflow."
garc33,bitbucket-server-mcp-server,3,,"This Bitbucket Server MCP implementation, developed for managing pull requests in Bitbucket Server environments, provides a TypeScript-based interface for AI assistants to interact with Bitbucket Server's API. Built using the Model Context Protocol SDK, it offers tools for creating, retrieving, merging, and declining pull requests, as well as adding comments and fetching diffs. The implementation focuses on streamlining PR workflows, making it easier for AI models to assist in code review processes and PR management. It's particularly useful for development teams using Bitbucket Server who want to integrate AI assistance into their PR workflows, enabling more efficient code reviews, automated PR creation, and status updates without requiring deep knowledge of Bitbucket Server's API intricacies."
garc33,js-sandbox-mcp-server,0,254,"This JavaScript sandbox MCP server, developed by an unknown author, provides a secure environment for executing JavaScript code within defined constraints. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for running arbitrary JavaScript with configurable time and memory limits. The implementation focuses on isolation and security, utilizing the vm2 library to create a controlled execution context. It's particularly useful for tasks like code testing, algorithm evaluation, or providing a safe playground for AI models to experiment with JavaScript, enabling assistants to execute and analyze JavaScript code without risking system integrity or resource exhaustion."
garcheng,mcp-server-jina-java,4,,"This Java-based MCP server integrates with Jina AI's web search and content fetching APIs, enabling Claude to perform web searches and extract content from URLs. Built with Spring Boot and Retrofit2, it exposes two primary tools: one for searching the web and retrieving SERP results, and another for reading and extracting content from specific URLs. The implementation uses Spring AI's tool annotation system to make these capabilities available through the MCP protocol, making it useful for research tasks, content aggregation, and information retrieval directly within Claude conversations without requiring users to manually search or visit websites."
garethcott,enhanced-postgres-mcp-server,5,,"Enhanced PostgreSQL MCP Server provides both read and write access to PostgreSQL databases, extending the original read-only implementation by Anthropic. Developed by Gareth Cottrell, it enables LLMs to not only query database schemas and execute read operations but also modify data through insert, update, and delete operations, as well as manage database schema objects like tables, functions, triggers, and indexes. The server implements proper transaction handling with COMMIT/ROLLBACK mechanisms and uses parameterized queries for data modification operations to prevent SQL injection, making it suitable for AI assistants that need to interact with PostgreSQL databases for both data analysis and database management tasks."
garoth,dalle-mcp,2,,"DALL-E MCP Server enables AI assistants to generate images using OpenAI's DALL-E API. It supports creating images with DALL-E 2 or DALL-E 3, editing existing images (DALL-E 2 only), and creating variations of images (DALL-E 2 only). The server is configured with an OpenAI API key and offers flexible options for image generation including model selection, size, quality, style, and custom save locations. Particularly useful for workflows requiring image generation capabilities directly within AI assistant conversations."
garoth,sendgrid-mcp,8,,"This MCP server implementation provides integration with SendGrid's Marketing API, enabling AI assistants to manage email marketing campaigns and contact lists. Developed by Garoth, it offers tools for contact management, list operations, email sending, template creation, and analytics. Built with TypeScript and leveraging the SendGrid SDK, the server focuses on supporting modern SendGrid features like dynamic templates and the Single Sends API. It is particularly useful for AI applications that need to automate email marketing tasks, manage subscriber lists, or integrate email communications into their workflows. The implementation includes robust error handling and environment variable management for secure API key storage."
garoth,sleep-mcp,7,,"This MCP server implementation provides a simple sleep/wait tool, allowing AI agents to introduce delays between operations. Developed by Garoth, it offers a single 'sleep' tool that waits for a specified duration in milliseconds. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on ease of use and configuration. It is particularly useful for scenarios requiring timed delays, such as spacing out API calls, testing eventually consistent systems, or simulating time-dependent processes. The implementation includes Jest-based tests to verify sleep functionality with various durations and supports easy deployment through npm scripts."
garoth,wolframalpha-llm-mcp,27,,"This MCP server implementation provides a bridge to WolframAlpha's LLM API, enabling AI assistants to leverage WolframAlpha's computational knowledge engine for complex mathematical and scientific queries. Developed by Garoth, it offers tools for asking questions, getting simplified answers, and validating API keys. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on structured, LLM-friendly responses and supports both detailed and simplified outputs. This implementation is particularly useful for AI applications requiring advanced computational capabilities, data analysis, or access to WolframAlpha's vast knowledge base across various scientific and mathematical domains."
garymengcom,serper-mcp-server,1,2257,"A MCP server for Serper that enables AI assistants to perform Google searches via the Serper API. Developed by Gary Meng, this implementation provides a simple interface for querying Google search results with support for various parameters including location, language, and time period filters. The server is designed to be easily integrated with Claude and other AI applications through standard MCP configuration, allowing models to retrieve up-to-date information from the web without direct internet access."
gauntletrunner2025,ugs-cli-mcp,0,,"UGS-CLI-MCP provides a Model Context Protocol server that enables AI assistants to interact with the Unity Gaming Services (UGS) command-line interface. The implementation offers tools for retrieving UGS version information and setting project IDs, executing these operations through child processes that call the UGS CLI directly. Built as a Node.js application using TypeScript, it leverages the MCP SDK to register tools and communicate via stdio transport, making it compatible with Claude Desktop integration. This server is particularly useful for developers who need to manage Unity Gaming Services configurations without leaving their conversation interface."
gbcui,horoscope-serve,1,,"Horoscope Serve is a TypeScript-based MCP server that provides astrological horoscope functionality through a standardized interface. Built by Freddie, this implementation leverages the Model Context Protocol SDK to expose horoscope-related tools that can be discovered and executed by AI assistants. The server is designed to be run as a command-line application, with the compiled JavaScript executable available through npm. It's suitable for applications that want to incorporate astrological predictions and insights into AI-powered conversations or workflows."
gblack686,n8n-workflow-summarizer-mcp,0,,"N8N Workflow Summarizer MCP Tool analyzes and simplifies complex n8n workflow JSON files into clear, concise markdown summaries. It extracts key information about nodes, connections, and functionality using OpenAI's models, with intelligent handling of large workflows through progressive simplification and fallback options. The tool identifies specialized components like AI/agent nodes and database connections, extracts prompts, and even generates conceptual Python code that replicates the workflow's functionality - making it particularly valuable for understanding and documenting complex automation workflows."
gdamitha,mcp_claude,0,,"The PyMOL MCP server provides a bridge between Claude and the PyMOL molecular visualization software, enabling interactive protein structure analysis through a comprehensive set of tools. Built with Python using the FastMCP framework, it offers capabilities for loading structures from PDB files, manipulating visualizations with different representations and colors, measuring molecular distances and angles, and rendering high-quality images. The implementation includes robust error handling and logging, making it particularly valuable for researchers and educators who need to analyze protein structures, examine binding sites, or create publication-quality molecular visualizations through natural language instructions."
gdli6177,mcp-prompt-server,4,,"MCP Prompt Server is a Node.js-based server that provides a collection of pre-defined YAML prompts for common software development tasks. It integrates with the Model Context Protocol SDK to expose these prompts as tools, including code review, refactoring, API documentation, test case generation, and project architecture assistance. The server is designed to be easily configurable through a JSON configuration file and can be integrated into existing development workflows, making it particularly valuable for developers looking to streamline repetitive writing and coding tasks through AI assistance."
w-jeon,mcp-gdrive,0,,"The MCP server for Google Drive enables AI assistants to interact with Google Drive files through a standardized interface. Built with TypeScript using the Model Context Protocol SDK, it provides capabilities to list, read, and search Drive files with support for various Google document formats (Docs, Sheets, Presentations) and handles both text and binary content appropriately. The implementation includes OAuth authentication flow for secure access to user's Drive content and offers a search tool that allows querying files by content. This server is particularly useful for workflows requiring document retrieval, content analysis, or file discovery within Google Drive."
gebabygeegee,amapmcpserver,2,,"AmapMCPServer provides two specialized MCP servers for interacting with AMap (Gaode Maps) API services in China. The coordinate server enables location-based operations including coordinate conversion between different systems (GPS, mapbar, baidu) and place searching by keywords, proximity, or within polygons. The route server complements this with transportation planning tools for walking, driving, transit, and bicycling routes between locations. Both servers require an AMap API key and are designed to work with Claude Desktop, making them valuable for applications needing Chinese mapping services."
gechmind,mcp-postman,0,,"MCP Postman Server enables AI assistants to execute Postman collections using Newman, allowing for automated API testing and interaction directly within conversations. Built with TypeScript, it leverages the Newman library to run collections, validate responses, and return results in a structured format. The implementation includes comprehensive error handling, supports environment variables, and can be deployed as a Docker container or run locally. This tool is particularly valuable for developers and QA teams who need to test APIs, validate endpoints, or automate API workflows without leaving their AI assistant interface."
geekbot-com,geekbot-mcp,8,,"Geekbot MCP server integrates with the Geekbot API to provide AI assistants with access to standup meeting data and reports. Developed by Savvas Papadopoulos at Geekbot, this Python implementation offers tools to fetch standup configurations and detailed reports with filtering capabilities by date ranges and users. The server includes templating for structured data presentation and specialized prompts for generating weekly rollup reports, making it particularly useful for teams wanting to analyze standup patterns or create automated summaries of team activities."
geeksfino,kb-mcp-server,23,,"The KB-MCP-Server is a Python implementation of a Model Context Protocol server designed to interact with knowledge bases. Developed by Geeksfino, it provides a structured way for AI assistants to query and retrieve information from connected knowledge sources. The server likely supports operations such as searching documents, retrieving specific information, and possibly updating knowledge repositories. This implementation would be valuable for applications requiring AI systems to access and utilize structured knowledge repositories in their workflows."
geelen,workers-mcp,20,,"This MCP implementation, developed by geelen, enables AI assistants to interact with Cloudflare Workers through a standardized interface. It provides both CLI tooling for setup and in-Worker logic for handling requests, allowing developers to easily create custom Worker-based APIs accessible to AI systems. The implementation stands out by leveraging Cloudflare's global network and serverless platform, offering low-latency access to custom functionality. By connecting AI capabilities with Cloudflare's edge computing infrastructure, this tool empowers AI assistants to perform tasks like data processing, API integrations, or custom calculations at scale. It is particularly useful for applications requiring distributed computing power, real-time data manipulation, or any scenario where an AI system needs to execute custom logic close to the end user."
geli2001,datadog-mcp-server,10,1800,"Datadog MCP Server provides a bridge to the Datadog monitoring platform, enabling AI assistants to access metrics, logs, dashboards, monitors, and incidents through a standardized interface. Developed by GeLi2001, this TypeScript implementation leverages the official Datadog API client to offer ten specialized tools for querying and analyzing observability data. The server supports both environment variables and command-line configuration for authentication, making it easy to integrate with Claude Desktop or other MCP clients. It's particularly valuable for DevOps and SRE workflows where users need to investigate system performance, troubleshoot issues, or analyze monitoring data without switching context to the Datadog web interface."
geli2001,shopify-mcp,22,1438,"Shopify MCP Server provides a bridge to the Shopify GraphQL Admin API, enabling AI assistants to interact with store data through five specialized tools for product, customer, and order management. Built with TypeScript, it authenticates with Shopify using custom app access tokens and exposes functionality for searching products, retrieving customer information, querying orders with filters, and updating order details. The implementation handles GraphQL requests with comprehensive error reporting and can be configured through command-line arguments or environment variables. This server is particularly valuable for e-commerce store owners and managers who want to leverage AI assistants for inventory management, customer analysis, and order processing without switching to the Shopify admin interface."
geli2001,tft-mcp-server,5,1188,"A TypeScript implementation of an MCP server for Teamfight Tactics (TFT) game data. This server provides information about TFT champions, items, and other game elements to be used with Claude via the Model Context Protocol."
bsmi021,mcp-gemini-server,11,,"MCP-Gemini-Server provides a robust interface to Google's Gemini AI models through a collection of specialized tools. Built with TypeScript and the Model Context Protocol SDK, it enables AI assistants to leverage Gemini's capabilities including content generation, chat functionality, function calling, and file/cache management. The server implements both streaming and non-streaming content generation, supports stateful chat sessions with function execution, and offers comprehensive file and cache operations for optimizing performance. This implementation stands out by providing fine-grained control over generation parameters, safety settings, and tool configurations while handling error cases gracefully. It's particularly valuable for developers building AI applications that need direct access to Gemini's advanced features through a standardized protocol."
gemini-dk,mcp-server-firebase,10,,"This MCP server implementation provides a bridge to Firebase services, enabling AI assistants to interact with Firebase Authentication, Firestore, and Storage. Developed by Gemini, it offers tools for user management, document operations, and file handling. Built with TypeScript and leveraging the Firebase Admin SDK, the server focuses on secure API key management and easy setup. It is particularly useful for AI applications that need to manage user data, store documents, or handle file uploads in Firebase-powered applications."
geminiwen,mcp-wechat-moments,4,3519,"MCP Wechat Moments Server enables AI assistants to publish content to WeChat Moments on macOS through AppleScript automation. Developed by Gemini Wen, it uses cliclick to emulate mouse events and can be configured for auto-publishing via environment variables. The server integrates with clients like Cherry Studio, providing a programmatic interface to WeChat's social sharing functionality without requiring direct API access. This implementation is particularly useful for social media management workflows where automated posting to WeChat's popular Moments feature is needed."
googleapis,genai-toolbox,607,,"Toolbox is an MCP server implementation that enables AI assistants to interact with various database systems including PostgreSQL, MySQL, SQL Server, Neo4j, Dgraph, and Spanner. Developed by Google's SenseAI team, it provides a configurable interface for executing pre-defined queries against databases through a YAML-based configuration system. The implementation features telemetry integration, authentication services, and support for both HTTP and SSE transport protocols. Toolbox is particularly useful for AI applications that need to retrieve or manipulate data from multiple database types without exposing direct database access, making it ideal for creating secure, controlled database interfaces for generative AI applications."
genm,mcp-server-discord-webhook,0,,"This Discord webhook MCP server, developed by genm, enables seamless integration between AI agents and Discord channels. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a straightforward way to send messages, including custom usernames and avatars, to Discord webhooks. The implementation focuses on simplicity and ease of use, offering a command-line interface for quick setup and deployment. It's particularly useful for developers and teams looking to incorporate AI-generated content or notifications into their Discord workflows, enabling use cases such as automated updates, AI-assisted moderation, or interactive chatbots without dealing directly with Discord's API complexities."
genm,switchbot-mcp,0,,"This SwitchBot MCP server, developed by the GenM team, enables AI assistants to control SwitchBot devices through the SwitchBot API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for device discovery, status monitoring, and command execution. The implementation focuses on simplifying smart home automation, making it easier for AI models to interact with physical devices. It's particularly useful for enhancing AI-driven home management, energy optimization, or creating custom automation routines, enabling seamless integration of AI capabilities with SwitchBot's ecosystem without requiring deep knowledge of the SwitchBot API."
genomoncology,biomcp,50,3654,"BioMCP is a server implementation that provides structured access to key biomedical databases through a unified interface. Developed by GenomOncology, it connects to ClinicalTrials.gov, PubMed (via PubTator3), and MyVariant.info to enable searching and retrieving information about clinical trials, research articles, and genetic variants. The server exposes these capabilities as MCP tools that can be used by AI assistants to access up-to-date biomedical data, overcoming knowledge cutoff limitations. BioMCP handles entity normalization, intelligent rendering of complex data as Markdown, and transparent attribution of sources, making it valuable for biomedical research, clinical decision support, and literature review workflows."
gentoro-gt,mcp-nodejs-server,4,816,"Integration with Gentoro. Allow for agents, tools and their underlying functionality to be fully controlled at the level of Gentoro's bridge which allows you to enable and disable tools per design."
george5562,jira-mcp-server,39,,"This Jira MCP server, developed by an unnamed creator, integrates Jira project management capabilities with AI assistants. It leverages the Jira API to provide a streamlined interface for managing projects, issues, and workflows. The server abstracts Jira's complex API, offering operations for user management, issue creation and updating, project configuration, and automated workflows. By connecting AI systems with Jira's collaborative features, this implementation enables assistants to automate project management tasks, track progress, and maintain organized development processes. It is particularly useful for software development teams and project managers looking to enhance their Jira-based workflows with AI-driven insights and automation."
georgeck,hn-companion-mcp,0,,"HN Companion MCP is a server that fetches and processes Hacker News discussions, preparing them for Claude to generate high-quality summaries. It analyzes the hierarchical structure of comments, scores them based on community engagement metrics (upvotes, downvotes, replies), and formats the data optimally for summarization. The implementation includes both a CLI for direct use and a JSON-RPC server that follows the Model Context Protocol specification, making it particularly valuable for users who want to quickly understand key insights from lengthy HN threads without reading all comments."
georgejeffers,gemini-mcp-server,4,,"This TypeScript-based MCP server, developed by GeorgeJeffers, integrates Google's Gemini Pro model with the Model Context Protocol. Built using the @modelcontextprotocol/sdk and @google/generative-ai libraries, it provides a standardized interface for leveraging Gemini's text generation capabilities. The implementation focuses on simplicity and ease of integration, offering straightforward setup via Claude Desktop. It's particularly useful for developers looking to incorporate Gemini's AI capabilities into MCP-compatible applications, enabling use cases such as content generation, language translation, and conversational AI without directly dealing with the complexities of the Gemini API."
georgi-io,jessica,1,,"This MCP server integrates ElevenLabs' text-to-speech capabilities with Cursor through the Model Context Protocol. It allows AI assistants to convert text to speech using ElevenLabs' advanced voice synthesis technology. The implementation includes features like voice selection, model choice, and a web interface for testing and configuration. It's designed for use cases requiring high-quality, customizable voice output in AI interactions."
gerbal,linear-mcp-server-1,0,,"Linear MCP Server provides a bridge to the Linear project management API, enabling AI assistants to create, update, and search issues, add comments, and retrieve organizational data. Built with TypeScript using the Model Context Protocol SDK, it implements rate limiting to manage API quotas, offers five specialized tools for issue management, and provides resource templates for accessing specific Linear entities. This implementation is particularly valuable for teams using Linear who want to integrate project management workflows directly into AI assistant conversations, allowing for ticket creation, workload analysis, and team coordination without context switching."
gergelyszerovay,mcp-server-qdrant-retrieve,0,236,"An MCP server that enables semantic search capabilities through Qdrant vector database integration. It allows AI assistants to retrieve semantically similar documents across multiple collections using natural language queries, with configurable result counts and collection source tracking. The server supports both stdio and HTTP transports, includes REST API endpoints with OpenAPI documentation, and uses embedding models like Xenova/all-MiniLM-L6-v2 to generate vector representations for similarity matching. Particularly useful for knowledge retrieval workflows where semantic understanding is more important than exact keyword matching."
geropl,git-mcp-go,3,,"This MCP server provides tools for Git repository interaction and automation, written in Go. It offers a range of Git operations including status checks, diff viewing, committing, branching, and pushing. The server supports both shell-based Git commands and the go-git library, allowing flexibility in implementation. It's designed for integration with Large Language Models, enabling AI-assisted version control and repository management workflows."
geropl,github-mcp-go,0,,"GitHub MCP Server provides a Model Context Protocol server for interacting with GitHub repositories, issues, pull requests, and more through a standardized interface. Built in Go, it features comprehensive GitHub API access through tools for repository management, file operations, issue tracking, pull request handling, branch operations, commit management, and GitHub Actions workflows. The server includes security controls with write access disabled by default, fine-grained auto-approval options, and a convenient setup command that supports multiple AI assistants including Cline, Roo Code, and Claude Desktop. This implementation is particularly valuable for developers who want to integrate GitHub operations into their AI-powered workflows without switching contexts or manually performing operations."
geropl,linear-mcp-go,5,,"This MCP server implementation provides a bridge to the Linear API, enabling AI assistants to interact with Linear's issue tracking system. Developed by geropl, it offers tools for creating, updating, and searching issues, as well as managing comments and user assignments. The server includes rate limiting to respect Linear's API constraints and is designed for use cases requiring project management integration, such as automated task creation or status reporting."
gerred,mcpmc,22,1177,"This MCP server for Minecraft, developed by Gerred Dillon, integrates Mineflayer to enable AI control of Minecraft bots through a standardized JSON-RPC interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for navigation, block manipulation, inventory management, and real-time game state monitoring. The server implements error handling, environment configuration, and uses Jest for testing. By abstracting Minecraft's complexities, it allows AI systems to easily interact within the game world. This implementation is particularly valuable for applications requiring programmatic Minecraft control, facilitating use cases such as automated building, resource gathering, and bot-assisted gameplay."
gerred,mcp-server-replicate,10,16418,"This Replicate API MCP server, developed by Gerred Dillon, provides a standardized interface for AI assistants to interact with machine learning models hosted on Replicate. Built with Python using the FastMCP framework, it offers tools for model discovery, inference, and result retrieval. The implementation stands out by abstracting the complexities of the Replicate API, allowing AI systems to seamlessly leverage a wide range of pre-trained models. By connecting AI capabilities with Replicate's diverse model ecosystem, this server enables easy access to state-of-the-art machine learning across various domains. It is particularly useful for developers and researchers looking to incorporate advanced AI capabilities into their applications without the need for local model hosting or extensive ML infrastructure."
getfounded,mcp-tool-kit,53,3673,"MCP Tool Kit provides a unified server implementation for Claude AI assistants with over 100 integrated tools spanning file operations, web search, browser automation, data analysis, and document management. Built by getfounded, it uses a modular architecture that reduces cognitive load on Claude by encapsulating domain knowledge in vertical agents that handle complex workflows internally. The Docker-based deployment makes it easy to set up and configure with API keys for services like Brave Search, NewsAPI, and FRED economic data, enabling powerful capabilities for tasks ranging from market analysis to presentation creation without requiring Claude to coordinate individual tool calls."
gfb-47,whatsapp-mcp-server,3,,"WhatsApp MCP Server enables programmatic interaction with the WhatsApp desktop application on macOS through AppleScript automation. It provides tools for sending messages to contacts, checking WhatsApp status, and explaining contact listing limitations. The implementation uses keyboard shortcuts and UI automation to navigate the WhatsApp interface, with comprehensive error handling and logging. Designed specifically for macOS users, it requires the WhatsApp desktop application to be installed and serves as a bridge between AI assistants like Claude and the user's WhatsApp account."
ggerve,coding-standards-mcp,3,,"This MCP server provides tools for accessing coding style guidelines and best practices for Java, Python, and React. It offers a standardized interface for retrieving language-specific style guides and application best practices in Markdown format. The server is designed to enhance development workflows by providing easy access to coding standards, making it particularly useful for teams looking to maintain consistent code quality across projects."
gh05tcrew,metasploitmcp,8,,"MetasploitMCP is a server implementation that provides AI assistants with a secure interface to Metasploit Framework's penetration testing capabilities. Developed by GH05TCREW, this Python-based server uses FastAPI and the pymetasploit3 library to expose Metasploit functionality through MCP tools including exploit execution, payload generation, session management, and post-exploitation modules. The implementation handles both synchronous and asynchronous command execution, manages console sessions carefully, and includes robust error handling and logging, making it particularly valuable for security professionals who want to leverage AI assistance for penetration testing workflows while maintaining precise control over Metasploit operations."
gh05tcrew,winsecmcp,4,,"winsecMCP is a Python-based security tool that automates Windows security hardening tasks through an AI-powered agent interface. Developed by GH05TCREW, it provides administrators with tools to check and modify critical security settings including firewall configuration, RDP settings, UAC controls, password policies, and user account management. The implementation uses subprocess commands to interact with Windows registry and command-line utilities, offering both information gathering capabilities and active security hardening functions. Particularly valuable for system administrators who need to efficiently implement security best practices across Windows environments while maintaining detailed logging of all configuration changes."
michaelyangjson,mcp-ghibli-video,1,29,"mcp-server-ghibli-video is a TypeScript-based MCP server that provides AI image and video generation capabilities through the GPT4O Image Generator API. Developed by MichaelYangjson, this implementation offers tools for converting static images into animated videos in Ghibli style, checking API credit balances, and monitoring task status. The server communicates over stdio, making it compatible with Claude Desktop through a simple configuration, and includes debugging support via MCP Inspector. It's particularly useful for users wanting to create Ghibli-style animations from existing images without implementing complex video generation logic themselves."
ghubnerr,notion-mcp,3,,"Notion MCP server provides a standardized interface for AI models to interact with Notion workspaces, enabling querying, searching, creating, updating, and deleting pages and databases through a flexible resource-based API. Built with TypeScript and the Model Context Protocol SDK, it offers tools for backup management, content retrieval, and workspace updates, making it particularly useful for developers and knowledge workers who want to programmatically interact with their Notion data through natural language or automated workflows."
gianlucamazza,mcp-duckduckgo,2,,"MCP DuckDuckGo Search Plugin, developed by Gianluca Mazza, provides web search functionality using DuckDuckGo's public interface. It offers advanced features like detailed result exploration, related searches, pagination, and content extraction. The plugin is designed for seamless integration with Claude Code and other MCP-compatible clients, making it ideal for AI-assisted research and information gathering tasks."
gianlucamazza,mcp_python_toolbox,1,,"This MCP server implementation provides a comprehensive set of Python development tools, enabling AI assistants to effectively work with Python code and projects. Developed by Gianluca Mazza, it offers features for file operations, code analysis, project management, and safe code execution within a controlled environment. The server is designed for use cases requiring advanced Python development capabilities, such as code refactoring, dependency management, and automated testing in AI-assisted programming workflows."
giannisanni,kokoro-tts-mcp,5,,"This MCP server implementation provides text-to-speech capabilities using the Kokoro TTS engine. It exposes a single tool for generating speech from text, with options for customizing voice, speed, and output format. The server supports cross-platform audio playback and can save generated audio to files, making it useful for applications requiring high-quality speech synthesis."
ginkgoo-ai,be-core-mcp,0,,"Slate MCP Server provides a comprehensive project and talent management platform for film and media production. Built with Spring Boot and integrating with multiple microservices, it enables AI-powered workflows for project creation, talent application tracking, and role management. The implementation supports advanced features like application status tracking, submission handling, and role-based access control through a flexible, tool-driven architecture."
giovannicocco,mcp-server-postman-tool-generation,9,,"This MCP server, developed by Giovanni Cocco, integrates the Postman Tool Generation API with AI agents. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables the conversion of Postman collections and requests into type-safe code for various AI frameworks. The implementation focuses on generating AI tools from API endpoints, supporting multiple languages and frameworks like OpenAI, Mistral, and LangChain. It's particularly useful for developers and teams looking to streamline the process of creating AI-powered tools from existing API documentation, enabling use cases such as rapid prototyping, automated code generation, and seamless integration of APIs into AI workflows without directly dealing with the complexities of the Postman API."
giptilabs,mcp-stock-analysis,0,,"This is an MCP server that provides access to real-time and historical Indian stock data using the Yahoo Finance API. It allows stock data retrieval to be used as context by local LLMs via Claude Desktop, Cursor, and other MCP-compatible agents.

Available Tools
getStockQuote: Get the current quote for an Indian stock.
getHistoricalData: Get historical data for an Indian stock with custom intervals and periods."
gitcarrot,mcp-server-aws-cognito,0,,"AWS Cognito MCP Server provides authentication and user management capabilities for AI assistants by connecting to AWS Cognito. Developed by gitCarrot, this TypeScript implementation exposes a comprehensive set of user authentication flows including sign-up, sign-in, password management, account verification, and multi-factor authentication. The server uses the amazon-cognito-identity-js library to interact with AWS Cognito User Pools, handling token management and user sessions securely. Particularly valuable for applications requiring robust identity management without building custom authentication systems, it enables AI assistants to manage user accounts through natural language interactions."
github,github-mcp-server,11308,,"A Model Context Protocol (MCP) server for GitHub that enables AI assistants to access GitHub repositories, issues, pull requests, and other GitHub data."
tuanle96,mcp-github,1,,"This GitHub MCP server provides a bridge between AI assistants and the GitHub API, enabling repository management, file operations, issue tracking, and project collaboration through natural language. Developed by Anthropic, it implements a comprehensive set of tools (39+ operations) including file creation/updating, repository searching/creation, branch management, pull request handling, and both classic and v2 project management capabilities. The implementation uses TypeScript with Zod for schema validation and robust error handling, making it particularly valuable for developers who want to perform GitHub operations directly through their AI assistant without context switching or remembering complex API syntax."
ko1ynnky,github-actions-mcp-server,19,,"GitHub Actions MCP Server enables AI assistants to manage and operate GitHub Actions workflows through a comprehensive set of tools. It provides capabilities for listing, viewing, triggering, canceling, and rerunning workflows, along with detailed information about workflow runs and their jobs. The implementation features robust error handling, type validation with Zod schemas, and security-focused design including timeout handling, rate limiting, and strict URL validation. Particularly valuable for developers who need to monitor CI/CD pipelines, troubleshoot failed workflows, or trigger automated processes without leaving their conversation interface."
bmorphism,gists-mcp-server,1,,"Gists MCP Server provides a bridge between AI assistants and GitHub Gists, enabling creation, retrieval, updating, listing, and deletion of code snippets through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, it authenticates with GitHub via personal access tokens and exposes five tools that map directly to GitHub's Gists API operations. This implementation is particularly valuable for developers who want to manage code snippets, share examples, or store programming notes directly through conversational AI without switching contexts."
gitmaxd,dubco-mcp-server-npm,5,3624,"Dub.co MCP server provides a streamlined interface for creating, updating, and deleting short links through the Dub.co URL shortening service. Built with TypeScript and the Model Context Protocol SDK, it enables AI assistants to programmatically manage links by exposing tools for link creation with custom domains, updating existing links, and deleting links. The implementation focuses on simplifying URL management with robust error handling and automatic domain selection."
gitmaxd,dubco-mcp-server,0,,"This MCP server enables AI agents to interact with the Dub.co link shortener API, allowing for the creation, updating, and management of short links through a user's Dub.co account. Built with TypeScript and the Model Context Protocol SDK, it provides tools for creating links with custom slugs, updating existing links, upserting links, and deleting links with automatic domain selection. The server requires a Dub.co API key and can be installed either via NPM or by cloning and building the repository locally, making it ideal for AI assistants that need to generate and manage shortened URLs as part of their workflows."
gitmotion,ntfy-me-mcp,1,768,"ntfy-me-mcp is a Node.js server that enables AI assistants to send push notifications through the ntfy service. It provides a simple tool called 'ntfy_me' that accepts task titles, summaries, and optional parameters like priority levels and tags, then delivers these notifications to configured ntfy topics. The implementation supports both public and protected topics with authentication, making it useful for alerting users about completed tasks, errors, or status updates from AI-driven workflows."
bsreeram08,git-commands-mcp,0,809,"Git Commands MCP provides a Node.js implementation of a Git repository browser that enables AI assistants to interact with Git repositories through a set of specialized tools. Built by Sreeram Balamurugan, it offers capabilities for cloning repositories, exploring directory structures, reading file contents, comparing branches, analyzing commit history, and searching code patterns. The server uses the simple-git library to execute Git operations and returns structured JSON responses, making it particularly valuable for developers who need to analyze repositories, track changes, or extract code snippets without leaving their conversation interface."
sach999,git-spice-help-mcp,1,808,"Git Spice Help MCP Server provides a tool for searching git-spice documentation directly within Cursor IDE. This TypeScript implementation fetches documentation from the git-spice website, parses the content, and enables real-time searching through a simple query interface. The server integrates with Cursor's agent mode, automatically offering documentation assistance when relevant to user queries, making it particularly useful for developers working with git-spice who need quick access to command references and usage examples."
glassbead-tc,audius-mcp-atris,0,,"This MCP server, developed by glassBead, enables AI agents to interact with the Audius music platform API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for querying users, tracks, playlists, and other Audius data. The implementation focuses on simplifying Audius API interactions, offering functionality like user searches, track streaming, and playlist management. It's particularly useful for applications requiring programmatic Audius engagement, enabling use cases such as music discovery, playlist curation, and artist analytics without directly dealing with Audius API complexities."
gldc,mcp-postgres,4,,"PostgreSQL MCP Server enables AI agents to interact with PostgreSQL databases through a standardized interface, providing tools for schema exploration, table inspection, relationship discovery, and SQL query execution. Built with Python using the FastMCP library, this implementation connects to any PostgreSQL database via a connection string and exposes database functionality through six well-defined tools that handle everything from basic metadata retrieval to complex relationship analysis. Ideal for developers and data analysts who need to give AI assistants the ability to explore and query relational databases without direct database access."
gleicon,mcp-osv,6,,"MCP Security Analyst is a Go-based server that integrates with OSV.dev to identify and analyze potential vulnerabilities in codebases. Developed by gleicon, it provides tools for checking dependencies against known vulnerabilities and analyzing code files for security issues, with optional enhanced static analysis through Semgrep integration. The server communicates through the Model Context Protocol, making it compatible with AI tools like Claude and Cursor IDE, enabling developers to receive security insights and recommendations directly within their workflow."
glendaviesnz,wp-mcp,3,,"This MCP server provides integration with WordPress, enabling AI assistants to interact with and manage WordPress sites. Built in Python, it requires a local WordPress instance and uses the 'uv' package manager for setup. The implementation focuses on providing a standardized interface for WordPress operations, though specifics are not detailed in the current work-in-progress state. It's particularly useful for developers and content managers looking to automate WordPress tasks or integrate AI-assisted content management, enabling use cases such as automated post creation, content analysis, or site administration without directly accessing the WordPress dashboard."
glifxyz,glif-mcp-server,16,,"Glif MCP server enables Claude to run AI workflows from glif.app, providing tools to execute glifs with inputs, access metadata, and manage saved workflows. Built with TypeScript and the Model Context Protocol SDK, it connects to the Glif API using authentication tokens and exposes resources for glifs, runs, and user profiles. The implementation includes features for running glifs, listing featured workflows, saving favorite glifs as custom tools, and accessing user-specific content, making it particularly valuable for users who want to leverage Glif's visual AI workflow capabilities directly within Claude conversations."
glifxyz,mymcpspace-mcp-server,11,575,"A Model Context Protocol server that provides AI assistants with access to MyMCPSpace, a social media platform designed for AI interaction. Developed by glifxyz, this TypeScript implementation enables creating posts, replying to existing content, toggling likes, retrieving feed data, and updating usernames through a set of well-defined tools. The server authenticates with the MyMCPSpace API using a bearer token and handles all communication with the platform's endpoints, making it particularly useful for AI agents that need to participate in social media conversations, share content, or monitor discussions on this AI-native platform."
glips,figma-context-mcp,5254,219747,"This MCP server, developed by GLips, provides a standardized interface for AI models to interact with Figma's design platform API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for accessing and manipulating Figma design files, components, and styles. The implementation focuses on exposing Figma's collaborative design features through a consistent MCP interface, enabling AI assistants to perform complex design operations, asset management, and team collaboration tasks. By connecting AI models with Figma's powerful design capabilities, this server facilitates sophisticated scenarios like automated design analysis, style guide enforcement, and design system management. It's particularly valuable for design teams and organizations looking to integrate AI-powered design assistance and automation into their Figma workflows."
gluneau,hive-mcp-server,2,,"This MCP server implementation provides a bridge to the Hive blockchain, enabling AI assistants to interact with Hive data and operations. Built with TypeScript and leveraging the @hiveio/dhive library, it offers tools for querying blockchain data, posting content, and managing accounts. The server is designed for use cases requiring AI-driven content creation, social media automation, or analysis of Hive blockchain data."
gmkr,mcp-imagegen,3,,"MCP Image Generator enables AI assistants to create images using Replicate or Together AI's image generation models. Built by GMKR, it provides a tool called 'generate_image' that accepts parameters like prompt, width, height, and number of images to generate. The server can be run locally using stdio or deployed as a Docker container with an SSE endpoint, making it flexible for different integration needs. Configuration requires setting the appropriate provider API keys as environment variables, allowing users to leverage powerful image generation capabilities directly within their AI assistant workflows."
gnosis23,findrepo-mcp-server,0,,"FindRepo MCP Server provides AI assistants with access to GitHub trending repositories through the findrepo.work API. Developed by bhwang, this server exposes a tool to retrieve today's trending GitHub repositories, with optional filtering by programming language. The implementation uses the Model Context Protocol SDK to create a simple stdio-based server that returns formatted repository information including names and URLs, making it useful for developers who want to stay updated on popular open-source projects without leaving their AI assistant conversation."
godzilladancer,keitaro-mcp,0,,"A Java implementation of the Model Context Protocol (MCP) for Keitaro, allowing integration with Anthropic's Claude models."
gofireflyio,firefly-mcp,5,1522,"Firefly MCP Server provides a bridge to Firefly.ai's cloud infrastructure management platform, enabling AI assistants to query cloud resources and generate infrastructure as code. The implementation offers two specialized tools: an inventory tool for querying cloud assets across providers with filtering capabilities, and a codify tool that generates Terraform import commands for specific resources. Built with TypeScript using the Model Context Protocol SDK, it authenticates with Firefly's API using access and secret keys, making it valuable for DevOps teams who want to discover, analyze, and codify their cloud infrastructure through natural language interactions."
gojiplus,rmcp,13,,"An R-based econometrics MCP server that provides advanced statistical modeling capabilities through R packages like plm, lmtest, and AER. Developed by goji+, the server enables AI assistants to perform complex econometric analyses including linear regression, panel data modeling, instrumental variables regression, and diagnostic testing across various research domains. Useful for researchers and data scientists seeking programmatic access to robust statistical modeling tools."
gojue,moling,247,,"MoLing is an MCP server implementation that enables AI assistants to interact with local system resources through a secure, configurable interface. Developed by CFC4N, it provides services for browser automation (using ChromeDP), file system operations (with strict path validation), and command execution (with allowlist filtering), making it particularly valuable for AI assistants like Claude that need controlled access to local resources. The server supports both stdio and SSE transport methods, includes client configuration tools for popular MCP clients (Claude Desktop, VSCode extensions), and implements robust security measures to prevent unauthorized access to system resources."
gomcpgo,filesys,1,,"This MCP server implementation, developed by the gomcpgo team, provides a filesystem interface for AI models. Built using Go and leveraging the gomcpgo/mcp package, it offers tools for interacting with local file systems. The implementation focuses on simplicity and efficiency, with a straightforward build and run process managed through a shell script. It's particularly useful for AI-assisted file management tasks, enabling models to perform operations like file creation, deletion, and manipulation without needing direct access to the underlying system. The server's design makes it adaptable for various use cases where AI needs to interact with local storage, such as automated file organization or content management systems."
gongrzhe,audio-mcp-server,2,,"The Audio MCP Server provides audio input/output capabilities for AI assistants like Claude, enabling them to interact with computer audio systems. Built with Python using sounddevice and soundfile libraries, it offers tools to list audio devices, record from microphones, play recordings, and handle audio files. The implementation includes features for device selection, customizable recording parameters, and temporary file management for audio storage. This server is particularly useful for voice interaction workflows, audio analysis, and creating more accessible AI experiences through spoken communication."
gongrzhe,calendar-autoauth-mcp-server,7,,"This Google Calendar MCP server, developed by gongrzhe, enables AI assistants to manage calendar events through natural language interactions. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for creating, retrieving, updating, and deleting events, as well as listing events within specified time ranges. The server implements OAuth2 authentication with auto browser launch, supporting both desktop and web application credentials. By abstracting the complexities of Google Calendar API interactions, it allows AI systems to easily manage schedules and appointments. This implementation is particularly valuable for applications requiring programmatic calendar management, facilitating use cases such as automated scheduling, meeting coordination, and time management assistance."
gongrzhe,gmail-mcp-server,158,,"This Gmail AutoAuth MCP server, developed by gongrzhe, provides a standardized interface for AI assistants to interact with Gmail through natural language. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for sending emails, reading messages, searching emails, managing labels, and more. The server implements OAuth2 authentication with auto browser launch, supporting both desktop and web application credentials. By abstracting Gmail API operations and handling authentication complexities, it enables AI systems to easily manage email communications. This implementation is particularly valuable for applications requiring programmatic email access, facilitating use cases such as automated email management, intelligent email filtering, and AI-driven communication assistance."
gongrzhe,image-generation-mcp-server,18,,"Image Generation MCP Server provides a bridge between Claude and the Replicate API, enabling AI assistants to generate images using the Flux model directly within conversations. The server exposes a single tool that processes image generation requests with customizable parameters like prompts, seeds, aspect ratios, and output formats, then handles the asynchronous generation process by polling the Replicate API until completion. Built with TypeScript and running on stdio transport, it's particularly valuable for creative workflows that require image generation capabilities without leaving the conversation interface."
gongrzhe,json-mcp-server,32,3471,"This JSON MCP server, developed by gongrzhe, provides a standardized interface for querying and manipulating JSON data using JSONPath syntax. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers an extensive set of tools for array operations, string manipulation, numeric calculations, date handling, and data aggregation. The server implements error handling and supports various data sources through URL inputs. By abstracting complex JSON operations, it enables AI systems to easily process and analyze structured data. This implementation is particularly valuable for applications requiring programmatic JSON manipulation, facilitating use cases such as data extraction, transformation, and analysis across diverse JSON-based datasets."
gongrzhe,langflow-doc-qa-server,5,,"Langflow-DOC-QA-SERVER is a Model Context Protocol server that connects AI assistants to a Langflow-powered document question-answering system. The implementation exposes a single tool called 'query_docs' that forwards user queries to a Langflow API endpoint, which processes document-based questions using a Mistral model. The server runs on stdio transport for seamless integration with Claude Desktop, making it particularly valuable for workflows that require document-based information retrieval without leaving the conversation interface."
gongrzhe,quickchart-mcp-server,40,,"This MCP server implementation provides integration with QuickChart, a service for generating charts and graphs. Developed by GongRzhe, it offers a bridge between AI assistants and QuickChart's API, enabling the creation of visual data representations. Built with TypeScript and leveraging the Model Context Protocol SDK, the server focuses on simplifying chart generation tasks. It is particularly useful for AI applications that need to produce data visualizations on-the-fly, such as report generators, dashboard creators, or data analysis tools."
gongrzhe,redis-mcp-server,23,2827,"This Redis MCP server, developed by gongrzhe, provides a standardized interface for interacting with Redis databases through the Model Context Protocol. Built with TypeScript and leveraging the MCP SDK, it offers tools for common Redis operations like setting/getting key-value pairs, deleting keys, and listing keys matching a pattern. The server implements connection management and error handling, supporting both local and remote Redis instances. By abstracting Redis operations into a consistent MCP format, it enables AI systems to easily interact with Redis data stores. This implementation is particularly valuable for applications requiring fast, in-memory data access and caching, facilitating use cases such as session management, real-time analytics, and distributed task queues."
gongrzhe,terminal-controller-mcp,23,,"Terminal Controller is an MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface. It implements several tools for executing commands, managing directories, and tracking command history, with built-in security measures to prevent dangerous operations. The server is designed to work across Windows and UNIX-based systems, making it versatile for various terminal-based tasks and integrations with AI-assisted workflows."
gongrzhe,travel-planner-mcp-server,33,1563,"This Travel Planner MCP server, developed by Gongrzhe Inc., integrates with Google Maps services to enable AI-driven travel planning and itinerary management. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for location search, place details lookup, route calculation, and timezone information retrieval. The server implements core travel planning functionality like creating personalized itineraries, optimizing existing plans, searching attractions, and finding transport and accommodation options. By abstracting the complexities of travel APIs, it allows AI systems to easily plan and manage trips. This implementation is particularly valuable for applications requiring automated travel assistance, facilitating use cases such as personalized vacation planning, business trip optimization, and travel recommendation systems."
gongrzhe,yolo-mcp-server,6,,"The YOLO MCP Server enables AI assistants to perform computer vision tasks using state-of-the-art YOLO (You Only Look Once) models. Built with Python using FastMCP and Ultralytics, it provides tools for object detection, segmentation, classification, and pose estimation on images, as well as real-time camera analysis. The implementation offers both direct model integration and CLI-based approaches, supports model training and validation, and includes comprehensive image analysis that combines multiple model results. This server bridges the gap between AI assistants and computer vision capabilities, making it valuable for applications requiring visual understanding of user-provided images or camera feeds."
gooboot,mcp-bos,2,,"MCP-BOS is a modular server implementation that provides a structured framework for building and managing MCP modules. It features a core system for loading, registering, and managing modules through a configuration-based approach, allowing developers to easily extend functionality by adding new modules to the system. The implementation includes a simple module interface, configuration management, and server components that work together to create a flexible foundation for MCP services. The project is designed with Python 3.13 compatibility and includes example modules like 'hello_world' to demonstrate the implementation pattern."
a-bonus,google-docs-mcp,5,,"Google Docs MCP Server provides a bridge between Claude Desktop (or other MCP clients) and Google Docs, enabling AI assistants to read document content, append text, and apply formatting to specific text within documents. Built with TypeScript and the fastmcp library, it handles OAuth 2.0 authentication with Google's APIs and offers three main tools: readGoogleDoc for fetching document content, appendToGoogleDoc for adding text to documents, and formatMatchingText for applying styling (bold, color, etc.) to specific text instances. The server is designed for users who want their AI assistants to interact directly with their Google Documents, making it useful for collaborative writing, document analysis, or automated content generation."
masatoshi118,mcp_google_froms,0,,"Google Forms MCP server enables programmatic interaction with Google Forms through the Model Context Protocol. Built with TypeScript, it provides tools for retrieving and managing Google Forms data, with a focus on generating refresh tokens and establishing OAuth authentication. Useful for automating form-related workflows and integrating Google Forms data into AI-driven applications."
renoscriptdev,mcp-google-scholar-dev,2,,"Google Search MCP Server provides Google Custom Search functionality for AI assistants, enabling them to perform web searches and retrieve formatted results. Built by gradusnikov, it uses the Google Custom Search API to execute queries and return structured data including titles, links, and snippets. The implementation requires Google API credentials, is containerized with Docker for easy deployment, and can be installed via Smithery or manually. This server is particularly valuable for workflows requiring real-time web information retrieval without leaving the conversation interface."
mcp-for-dev,mcp-google-search,1,32,"MCP Google Search provides web search capabilities through Google Custom Search API and webpage content extraction functionality. This TypeScript implementation offers two main tools: a search function that returns structured results with title, link, and snippet from Google searches, and a webpage reader that extracts and cleans content from any URL. The server requires Google API credentials (API key and Search Engine ID) to function and can be easily integrated with Claude Desktop through a simple configuration. It's particularly useful for AI assistants that need to perform web searches or extract content from specific webpages without requiring complex setup."
modelcontextprotocol-servers,google-search-mcp,1,139,"A Playwright-based Google search MCP server that bypasses search engine anti-bot mechanisms, performing searches with advanced browser fingerprinting and automatic CAPTCHA handling. Designed to provide real-time search capabilities for AI assistants like Claude, the tool supports multi-language search results and adapts dynamically to changes in Google search page structures."
akchro,google-sheets-mcp,0,,"The Google Sheets MCP integration enables AI assistants to interact with Google Sheets through a set of specialized tools built with Python using the FastMCP framework. It provides capabilities for listing, creating, and copying spreadsheets, as well as writing, editing, and formatting cells with colors. The implementation requires Google Cloud authentication through OAuth and handles API interactions using the Google API Python client. This server is particularly valuable for workflows requiring spreadsheet manipulation within AI assistant conversations, allowing users to create and modify Google Sheets documents without leaving their conversation interface."
gopinathmr,mcp-tasks-server,0,,"A lightweight Spring Boot-based task management server that provides a RESTful API for creating, retrieving, updating, and tracking tasks with AI integration. Built as a template project, it demonstrates best practices for Spring Boot development, including dependency injection, exception handling, and tool-based AI interactions. The implementation uses an in-memory task repository and includes comprehensive unit and integration tests to showcase a clean, modular approach to building MCP-compatible services."
goplausible,algorand-mcp,27,1190,"Algorand MCP server provides a robust toolkit for AI agents to interact with the Algorand blockchain, enabling operations like account creation, asset management, smart contract deployment, and transaction execution. Built by GoPlausible, this TypeScript-based implementation offers a standardized interface for blockchain interactions, specifically targeting AI development tools like Claude Desktop and Cursor. The server simplifies complex blockchain tasks through a comprehensive set of tools and resources, making Algorand blockchain capabilities accessible to AI assistants."
goswamig,fetch-mcp,2,,"Fetch MCP Server provides functionality to retrieve web content in various formats including HTML, JSON, plain text, and Markdown. It offers four tools: fetch_html for raw HTML content, fetch_json for parsed JSON data, fetch_txt for plain text with HTML tags removed, and fetch_markdown for content converted to Markdown format. Built with TypeScript using the Model Context Protocol SDK, JSDOM for HTML parsing, and TurndownService for Markdown conversion, this implementation is particularly useful for workflows requiring web content extraction and transformation without leaving the conversation interface."
gotalab,bigquery-analysis-mcp-server,1,,"The BigQuery Analysis MCP Server provides tools for safely executing SQL queries on Google BigQuery datasets. It offers two main capabilities: performing dry runs to validate queries and estimate their processing size, and executing validated queries with built-in safeguards that prevent data manipulation language (DML) statements and limit query size to 1 TB. The server uses application default credentials for authentication and returns query results in JSON format, making it ideal for data analysts and developers who need to perform controlled analytics operations on large datasets without risking costly or destructive operations."
gotohuman,gotohuman-mcp-server,14,,"gotoHuman MCP Server enables AI agents to request human reviews through the gotoHuman platform, creating an asynchronous workflow for content approval and critical action validation. The server provides three main tools: listing available review forms, fetching form schemas, and submitting review requests that appear in the user's gotoHuman inbox. Built with TypeScript using the Model Context Protocol SDK, it integrates with the gotoHuman API to facilitate human-in-the-loop processes for autonomous agents and AI automations, with webhook-based responses that allow workflows to continue after human approval."
gotoolkits,mcp-difyworkflow-server,40,,"This Dify Workflow MCP server, developed by an unnamed creator, integrates with the Dify API to enable AI-driven workflow execution. Built with Go and leveraging the MCP-Go library, it provides tools for listing authorized workflows and executing specified workflows with custom inputs. The server implements environment-based configuration, allowing for flexible API key and workflow name management. By abstracting the complexities of Dify API interactions, it enables AI systems to easily trigger and manage complex workflows. This implementation is particularly valuable for applications requiring programmatic access to Dify workflows, facilitating use cases such as automated task execution, multi-step data processing, and AI-driven decision making across various domains."
gotoolkits,mcp-wecombot-server,13,,"This WeCom bot MCP server, developed by an unnamed author, provides a bridge between MCP and WeCom (WeChat Work) group messaging. Built with Go and leveraging the mcp-go library, it offers tools for sending various message types including text, markdown, images, news articles, and template cards to WeCom groups. The implementation also supports file uploads and mentions specific users or mobile numbers. It's designed for easy integration into workflows requiring team communication, making it particularly useful for developers and teams looking to automate notifications, share updates, or integrate WeCom messaging into their AI-assisted applications."
gourav221b,github-pr-mcp-server,4,,"GitHub PR MCP server enables AI assistants to retrieve detailed information about GitHub pull requests, including files, diffs, comments, and reviews. Built with TypeScript and the Octokit REST API, it provides a single tool that accepts repository owner, name, pull request number, and an optional GitHub token for authentication. The server returns structured JSON data that can be used for code review assistance, PR summarization, or change analysis workflows without requiring direct GitHub API integration in client applications."
govcraft,rust-docs-mcp-server,45,,"Rust documentation loader for the Model Context Protocol that efficiently processes HTML documentation files from Rust crates. Uses LlamaIndex's HTML reader to load and parse documentation, with intelligent file selection logic that handles duplicate files by selecting the largest version. Supports an optional 'dangerous' mode to include all HTML files, making it flexible for different documentation processing scenarios."
gpaul-faldin,mcp_puppeteer_extra,1,,"MCP Puppeteer-Extra provides enhanced browser automation capabilities using Puppeteer-Extra with Stealth Plugin, enabling LLMs to interact with web pages while avoiding detection as automation. Built by Gpaul (Faldin), it offers a suite of tools for navigating websites, capturing screenshots, interacting with elements (click, fill, select, hover), and executing JavaScript in the browser console. The implementation is containerized with Docker for easy deployment and includes resource endpoints for accessing screenshots and console logs, making it particularly valuable for web scraping, testing, and automation workflows that require human-like browser interactions."
gpaul-mcp,mcp_prompt_localdev,0,,"MCP Prompt LocalDev provides a development environment for creating and testing custom prompts using the Model Context Protocol. Built by gpaul, it offers a TypeScript-based framework with three pre-configured prompt templates for API architecture planning, GitHub workflow setup, and new project initialization. The implementation includes robust development tooling with ESLint, Prettier, Jest for testing, and Husky for pre-commit hooks that ensure code quality. This server is particularly valuable for developers who want to create, test, and refine structured prompts locally before deploying them in production environments."
gpaul-mcp,mcp_ravelry,0,,"MCP Ravelry provides a bridge to the Ravelry API for knitting and crochet pattern discovery, enabling users to search patterns, retrieve detailed information about specific patterns, and fetch multiple pattern details in a single request. Built by gpaul (Faldin), it authenticates with Ravelry using basic authentication and transforms API responses into structured data that's easier to consume. The implementation is written in TypeScript with a robust development environment including ESLint, Prettier, and Jest for testing, making it ideal for crafters who want to explore knitting and crochet patterns without leaving their conversation interface."
gpaul-mcp,mcp_thingiverse,0,,"MCP Thingiverse provides a bridge to the Thingiverse API, enabling AI assistants to search, browse, and retrieve 3D model information from the popular 3D printing community. Built by gpaul, it uses Puppeteer to interact with Thingiverse's API endpoints, offering tools for discovering random models, searching by terms or categories, retrieving detailed model information including files, and browsing featured content. The implementation is structured as a TypeScript Node.js application with comprehensive error handling and testing, making it valuable for 3D printing enthusiasts who want to find models, compare options, or explore trending designs without leaving their conversation interface."
gradusnikov,google-search-mcp-server,1,,"This MCP server provides Google Custom Search functionality, allowing AI assistants to perform web searches and retrieve formatted results. It integrates with Google's Custom Search API using environment variables for authentication (API key and Custom Search Engine ID), and exposes a single tool that returns search results with titles, links, and snippets. The implementation handles errors gracefully and is designed for easy integration with Claude Desktop and other MCP-compatible clients, making it useful for research tasks, fact-checking, and retrieving up-to-date information from the web."
gradusnikov,pubmed-search-mcp-server,5,,"This MCP server provides tools for searching and retrieving academic papers from the PubMed database. It implements two main functions: searching PubMed by keywords in titles/abstracts or author names, and fetching detailed paper information including titles, authors, journals, abstracts, and DOIs. The server uses the NCBI E-utilities API to query PubMed and parse XML responses, making it valuable for researchers, students, or AI assistants that need to access scientific literature in the biomedical field."
grafana,mcp-grafana,509,,"Grafana MCP server provides access to Grafana instances and their surrounding ecosystem through the Model Context Protocol. Developed by Grafana Labs' Machine Learning team, it enables searching dashboards, fetching datasource information, querying Prometheus metrics, and managing incidents in Grafana Incident. The server supports both stdio and Server-Sent Events (SSE) transport modes, can be run locally or deployed as a Docker container, and authenticates using Grafana service account tokens. This implementation is particularly valuable for workflows requiring monitoring data analysis, metric exploration, or incident management directly within AI assistant conversations."
grandbusta,solana-mcp,5,,"Solana MCP enables AI assistants to interact with the Solana blockchain by providing tools for checking wallet balances, retrieving blockchain information, and executing token transfers. The implementation connects to Solana's devnet through RPC endpoints, uses keypair-based authentication for transaction signing, and includes price conversion between SOL and USD. It features four main tools: retrieving the latest blockchain slot, checking wallet addresses and balances, and securely transferring SOL between wallets. This server is particularly valuable for blockchain interaction workflows that require secure transaction execution and real-time balance monitoring without leaving the conversation interface."
grandmastr,chronos-mcp,0,,"Chronos MCP is a server implementation that provides AI assistants with direct access to the Stellar blockchain network. Built with TypeScript, it exposes tools for connecting to wallets, listing tokens, checking balances, and transferring funds between Stellar addresses. The server uses the Model Context Protocol SDK to handle requests and the Stellar SDK to interact with the Stellar public network. This implementation is particularly valuable for users who need to perform Stellar blockchain operations directly through conversational interfaces without switching contexts or handling complex blockchain interactions manually."
graphlit,graphlit-mcp-server,196,48389,"This MCP server implementation provides a bridge to the Graphlit platform, enabling integration between MCP clients and Graphlit services. Developed by Unstruk Data Inc., it utilizes the Graphlit client library and Model Context Protocol SDK to facilitate communication. The server is designed for use cases requiring access to Graphlit's API capabilities, such as natural language processing tasks or data retrieval from the Graphlit ecosystem."
gravityphone,swanzmcp,0,,"Grey Swan MCP Server provides a specialized MongoDB-integrated platform for documenting and analyzing AI safety challenges, particularly focused on tracking LLM vulnerabilities through detailed thread, message, and model tracking. Built for the Grey Swan Arena competitions, it enables researchers to systematically record jailbreak attempts, safety flags, and challenge metadata across different testing sessions. The server offers six MongoDB tools that support a structured workflow for red-teaming AI systems, making it valuable for AI safety researchers seeking to comprehensively document and analyze potential model weaknesses."
gregkonush,mcp-obsidian,2,,"A lightweight MCP server for interacting with Obsidian notes through the Obsidian Local REST API. Enables AI assistants to read, modify, search, and navigate Markdown files in an Obsidian vault with granular control over content insertion, targeting specific headings, block references, and frontmatter. Designed to provide a flexible, standardized interface for programmatic note manipulation."
gregkop,sketchfab-mcp-server,23,507,"Sketchfab MCP Server enables AI assistants to search, view details, and download 3D models from Sketchfab's platform. Built by Greg Kopyltsov, it provides three main tools: sketchfab-search for finding models based on keywords and filters, sketchfab-model-details for retrieving comprehensive information about specific models, and sketchfab-download for obtaining models in various formats (gltf, glb, usdz, source). The server requires a Sketchfab API key for authentication and can be run locally or integrated with Claude Desktop and Cursor, making it ideal for workflows requiring 3D asset discovery and retrieval."
greg-swiftomatic,substack-mcp,0,,"Substack MCP enables AI assistants like Claude to interact with Substack newsletters through a standardized interface. Built by Greg-Swiftomatic, it leverages the Substack API library to provide tools for retrieving newsletter posts, accessing post content, searching within newsletters, and getting author information. The implementation is packaged as a Python module with Docker support and includes detailed configuration instructions for Claude Desktop integration. This server is particularly valuable for research workflows, content analysis, and staying updated on newsletter publications without leaving the conversation interface."
greptimeteam,greptimedb-mcp-server,12,894,"GreptimeDB MCP Server provides a secure interface for AI assistants to interact with GreptimeDB time-series databases through MySQL protocol. Developed by Greptime Inc., this Python implementation enables listing tables, reading data, and executing SQL queries with built-in security gates that prevent dangerous operations like DROP or DELETE. The server connects to any GreptimeDB instance using configurable connection parameters and exposes database resources as structured MCP resources and tools. Particularly useful for data exploration, time-series analysis, and integrating database operations directly into AI assistant conversations without requiring manual query construction."
grizzlypeaksoftware,mcp-memory-server,0,,"Memory MCP Server provides a persistent storage solution for text memories with tagging capabilities, enabling AI assistants to store, retrieve, search, and manage information across conversations. Built with TypeScript using the Model Context Protocol SDK, it exposes five tools for memory operations including storing new memories with optional tags, searching by text or tags, retrieving all memories, deleting specific memories, and viewing tag usage statistics. The implementation uses a local JSON file for storage, making it particularly valuable for users who want to maintain conversation context and important information without relying on external databases or cloud services."
grll,pubmedmcp,11,8080,"This PubMed MCP server, developed by Guillaume Raille, enables seamless integration of PubMed data into AI-assisted workflows. Built with Python and leveraging the pubmedclient library, it provides a standardized interface for searching and fetching biomedical literature through Claude Desktop and compatible MCP clients. The implementation supports advanced search capabilities and article retrieval from PubMed's extensive database of over 35 million citations. It's particularly useful for researchers, healthcare professionals, and developers looking to incorporate on-demand access to scientific literature into their AI-assisted applications, allowing for dynamic querying and analysis of biomedical information."
prixyy,rag_based_mcp,1,,"This RAG-based MCP server implementation integrates with GroundX to provide AI assistants with document search and ingestion capabilities. The server exposes two main tools: one for searching existing documents in a knowledge base to retrieve relevant context for queries, and another for ingesting new PDF documents into the system. Built with FastMCP, it operates over stdio transport and uses environment variables for API authentication, making it particularly useful for enhancing AI assistants with domain-specific knowledge retrieval without requiring direct access to the underlying document storage."
wayneqs,mcp_server_spike,0,40927,"Group Protection MCP server provides access to insurance policy and claims data through a standardized interface. Built with FastMCP, it exposes tools for retrieving recent activity data including policy changes, premium payments, member enrollments and claims processing. Particularly valuable for operations directors and brokers who need to monitor insurance activity and analyze claims data through AI assistants."
sinedied,grumpydev-mcp,9,370,"GrumpyDev MCP is a server that lets AI assistants get code reviews from a simulated grumpy senior developer with 40+ years of experience. Created by Yohan Lasorsa, this tool provides thorough, sarcastic, and slightly condescending feedback on code quality, pointing out mistakes, inefficiencies, and bad practices. The implementation uses GenAIScript to define a review_code tool that accepts code input and returns detailed critiques in a distinctive grumpy tone, making it useful for developers seeking brutally honest feedback on their code."
gt732,nautobot-app-mcp,11,1925,"Nautobot MCP integrates the Model Context Protocol server with Nautobot, a network infrastructure management platform, enabling AI assistants to query and interact with network data through standardized tools. Developed by Geury Torres, this Django-based app provides tools for retrieving information about devices, interfaces, circuits, IP addresses, and locations stored in Nautobot. The server exposes these capabilities through a RESTful API that follows the MCP specification, making it ideal for network engineers and administrators who want to leverage AI to automate network documentation, troubleshooting, and management tasks."
guanxinyuan,neo4j,1,,"Neo4j MCP Servers provide natural language interfaces to Neo4j graph databases through three specialized components: mcp-neo4j-cypher for executing Cypher queries, mcp-neo4j-memory for storing knowledge graph data in Neo4j, and mcp-json-memory as a file-based reference implementation. The project uses TypeScript for the memory servers and Python for the Cypher server, with a shared graphrag-memory library defining the knowledge graph interface. These servers enable users to query graph data, manage entities and relationships, and build persistent memory structures through Claude Desktop or any MCP client, making complex graph operations accessible through conversational interfaces."
guilhermelirio,brasil-api-mcp,3,,"Brasil API MCP server provides tools for querying various Brazilian data services through a standardized interface. Developed by Guilherme Lirio, it integrates with the Brasil API to offer capabilities for postal code (CEP) lookups, company (CNPJ) information retrieval, bank data access, area code (DDD) information, IBGE geographic data, currency exchange rates, and domain registration checks. The implementation is built with TypeScript and runs on Node.js, making it valuable for applications requiring Brazilian-specific data validation, address verification, financial information, or domain availability checking without leaving the conversation context."
guilhermelirio,brazilian-cep-mcp,0,,"Brazilian CEP MCP provides tools to query Brazilian postal code (CEP) information through the Model Context Protocol. Built by Guilherme Lirio, it uses Node.js with TypeScript and integrates with external CEP APIs via Axios to retrieve address details. The implementation is containerized with Docker for easy deployment and configured through Smithery.ai, making it ideal for applications requiring Brazilian address validation or location-based services within AI assistant workflows."
guilhermelirio,homeassistant-mpc,0,,"Home Assistant MCP provides a bridge between AI assistants and smart home devices through the Home Assistant API. Developed by Guilherme Lirio, this implementation enables AI assistants to check device status, control smart home entities, and call Home Assistant services directly within conversations. The server runs on stdio transport for seamless Claude Desktop integration and includes tools for verifying API connectivity, retrieving entity states, and executing service calls. Particularly valuable for users who want to control their smart home through natural language interactions without leaving their AI assistant interface."
gujord,openapi-mcp,19,,"OpenAPI-MCP provides a bridge between Claude and any REST API that publishes an OpenAPI specification. Built by Roger Gujord, this implementation automatically generates MCP tools from OpenAPI endpoints, handling parameter validation, OAuth authentication, and proper JSON-RPC 2.0 response formatting. It features dry-run capabilities for testing requests without making actual API calls, detailed error handling, and dynamic help documentation for each endpoint. The server is particularly valuable for workflows requiring access to third-party APIs directly within Claude conversations, eliminating the need to manually implement individual API integrations."
guoling2008,go-mcp-postgres,4,,"Go-MCP-Postgres is a ready-to-use MCP server for interacting with PostgreSQL databases, adapted from Zhwt's MySQL implementation. It provides tools for database schema management and CRUD operations with safety features like read-only mode and query plan validation. Written in Go with no external dependencies, it supports both stdio and SSE transport modes, includes multilingual support, and is particularly useful for database automation tasks without requiring Node.js or Python environments."
daipendency,daipendency-mcp,53,,"This MCP server, developed by Gus Narea, provides a standardized interface for extracting documentation and public API information from dependencies in local projects. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool called 'get_dependency_docs' that simplifies the process of retrieving dependency documentation. The implementation focuses on enhancing developer productivity by automating the extraction of dependency information, which is particularly useful for projects with complex dependency structures. It's designed for developers and AI agents working on code analysis, documentation generation, or dependency management tasks, enabling use cases such as automated code review, intelligent API suggestions, and streamlined project documentation without manually navigating through dependency files."
gutmutcode,mcp-server-cloudflare,7,1008,"This MCP server implementation provides a bridge to Cloudflare's API, enabling AI agents to interact with Cloudflare's services. Developed by GutMutCode, it offers tools for managing Cloudflare configurations and resources. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on secure API key management and is designed to work within Node.js environments. The implementation is particularly useful for AI applications that need to automate DNS management, content delivery network operations, or security configurations across web infrastructure using Cloudflare's platform."
gxjansen,transistor-mcp,1,,"This Transistor.fm MCP server, developed by Guido X Jansen, provides a comprehensive integration with the Transistor podcast hosting platform API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing podcasts, episodes, analytics, and private subscribers. The implementation stands out by providing a user-friendly interface for complex podcast management operations, including audio file uploads, episode publishing, and webhook management. It's particularly useful for podcast creators, content managers, or AI assistants needing to automate podcast workflows, analyze listener data, or manage multiple shows programmatically. The server's design prioritizes ease of use while maintaining full access to Transistor's feature set, making it ideal for both individual podcasters and larger podcast networks."
gyger,mcp-pyzotero,32,,"This Zotero MCP connector, developed by Samuel Gyger, integrates local Zotero libraries with Claude's Desktop interface. It utilizes the pyzotero library and Zotero 7's local web API to provide direct read access to users' research collections. The connector offers functions for listing collections, retrieving item details, searching the library, and fetching recent additions. Built with Python 3.10+ and the FastMCP framework, it stands out by focusing on local Zotero installations rather than cloud-based alternatives. This implementation is particularly useful for researchers and academics who want to leverage AI assistance in exploring and analyzing their personal Zotero libraries, enabling natural language interactions with their collected literature and notes."
gzuuus,dvmcp,17,2475,"A decentralized bridge connecting Model Context Protocol (MCP) servers to Nostr's Data Vending Machine (DVM) ecosystem, enabling AI and computational tools to be discovered and utilized across a distributed network. The implementation provides tool discovery through NIP-89 announcements and direct requests, supports tool execution via Nostr events, and handles job status updates, creating a standardized protocol for exposing and consuming computational services in a decentralized environment."
h4ck4life,mssql_mcp_server_ts,0,,"MSSQL MCP server enables AI assistants to execute read-only SQL queries against Microsoft SQL Server databases through a standardized interface. Built with TypeScript and FastMCP, it provides secure database access with configurable timeouts, connection pooling, and write operation detection to prevent unauthorized modifications. The implementation is particularly valuable for users who need to analyze data in MSSQL databases through natural language without direct database access."
h4ck4life,mcp-pptx-server,2,,"The MCP PPTX Server provides Claude with tools to create and manipulate PowerPoint presentations through a structured interface. Built using FastMCP, it offers comprehensive functionality for generating professional slides with customizable layouts, themes, and formatting options. Users can create complete presentations, add individual slides, apply professional themes, and generate slide previews as images. The implementation handles text formatting, bullet points, and slide layouts intelligently, saving presentations to an accessible user directory, making it particularly valuable for workflows requiring document generation without manual PowerPoint interaction."
habuma,tpapi-mcp-server,2,,"This is an MCP Server that exposes data from the ThemeParks.wiki API as tools.

Features
Get theme park operating hours
Get attraction wait times
Get show times"
hagsmand,mcp-server-starrocks,0,796,"StarRocks MCP Server provides a standardized interface for AI models to interact with StarRocks databases, enabling querying, table management, and data manipulation through a set of predefined tools. Built with Python and supporting both read-only and write modes, the server allows AI assistants to execute SELECT queries, list tables, describe schemas, and perform write operations like INSERT and CREATE TABLE when not in read-only mode."
hajime-y,deep-research-mcp,6,,"Deep Research MCP is a server that provides web search and advanced research capabilities for AI assistants. Based on HuggingFace's smolagents, it offers tools for web browsing, document analysis, image description, YouTube transcript retrieval, and archive site searching. The implementation includes specialized components for handling various file formats (PDF, DOCX, PPTX) and media types, making it particularly valuable for users who need to gather information from diverse sources without leaving their AI assistant interface."
hald,things-mcp,17,,"This MCP server, developed by hald, integrates with the Things task management app to enable AI assistants to interact with users' task data. It leverages the Things.py library and Things URL scheme to provide a wide range of operations including creating tasks, analyzing projects, managing priorities, and more. The implementation is built in Python 3.12+ and uses modern dependencies like httpx and pydantic. It's designed for Things users who want to incorporate AI assistance into their productivity workflow, allowing for natural language queries and updates to their task lists, projects, and areas."
halityurttas,cimri-mcp-investigate,0,,"Cimri-Price-Investigation is an MCP server that enables AI assistants to search for product prices on Cimri.com, a Turkish price comparison website. The implementation uses Puppeteer to scrape real-time pricing data from the site based on product name queries. When invoked, the server launches a headless browser, navigates to Cimri's search results for the specified product, extracts price information, and returns it in a formatted text response. This tool is particularly useful for price comparison tasks, helping users find current market rates for products in Turkey without leaving their conversation interface."
haltakov,meme-mcp,22,659,"Meme MCP Server enables AI models to generate meme images through the ImgFlip API. Developed by Vladimir Haltakov, it provides a single tool called 'generateMeme' that accepts parameters for template ID and text placeholders. The server runs locally using Node.js and requires ImgFlip credentials, making it easy to integrate with Claude Desktop for creating custom memes directly within conversations without leaving the interface."
loonghao,wecom-bot-mcp-server,26,16597,"This MCP server implementation, developed by Hal, provides a Python server for WeCom (WeChat Work) bots following the Model Context Protocol. Built with FastAPI and leveraging libraries like fastmcp and httpx, it offers a streamlined interface for integrating WeCom bot functionality into MCP-based applications. The implementation focuses on simplicity and ease of use, making it ideal for developers looking to add enterprise messaging capabilities to their AI workflows. It supports core WeCom bot features and can be easily extended. This server is particularly useful for teams using WeCom who want to automate notifications, create interactive chatbots, or integrate AI-assisted communication tools within their existing enterprise messaging infrastructure."
hammeiam,koroko-speech-mcp,1,875,"Koroko Speech MCP Server provides text-to-speech capabilities using the Kokoro TTS model, enabling AI assistants to generate and play audio from text input. The implementation offers multiple tools for basic speech synthesis, customizable playback speed, and voice selection from a curated list of high-quality voices. It features robust error handling with automatic retry mechanisms for model initialization failures and temporary file management for audio playback. The server runs on stdio transport for seamless integration with Claude Desktop, making it particularly valuable for adding natural-sounding voice output to AI assistant conversations without requiring external applications."
handwriting-ocr,handwriting-ocr-mcp-server,1,,"This Handwriting OCR MCP server enables AI assistants to extract text from handwritten documents through a TypeScript implementation. The server provides a bridge between Claude and other MCP-compatible clients and the Handwriting OCR API, allowing users to upload images containing handwritten content and receive digitized text in return. Built with TypeScript and requiring an API key for authentication, it supports various image formats and offers accurate text extraction from handwritten notes, making it valuable for digitizing physical documents, processing historical manuscripts, or converting handwritten notes into editable text."
hanlulong,stata-mcp,15,,"The Stata MCP Extension provides seamless integration between Stata statistical software and code editors like VS Code and Cursor through the Model Context Protocol. It enables users to execute Stata commands directly from their editor, view real-time output, and benefit from AI-assisted coding with contextual understanding of Stata data and commands. Created by Lu Han and published by DeepEcon, this cross-platform extension automatically detects Stata installations, supports syntax highlighting for Stata file formats, and establishes a local MCP server that connects the editor to Stata - making it particularly valuable for data scientists and researchers who want enhanced productivity when working with statistical analyses."
hannesj,mcp-antd-components,5,,"MCP-Antd-Components provides a server that exposes Ant Design component documentation to Large Language Models like Claude. Developed by Hannes Junnila, it extracts and serves component information from the Ant Design repository, allowing AI assistants to explore available components, view detailed documentation, examine props and API definitions, and access code examples. The server offers six specialized tools for component discovery and understanding, making it valuable for developers who need AI assistance with implementing Ant Design components in their React applications without requiring the full Ant Design repository to be present."
hannesj,mcp-graphql-schema,12,165,"The GraphQL Schema MCP server enables AI models to explore and understand GraphQL schemas through specialized tools. Built using the Model Context Protocol SDK, it loads any GraphQL schema file and provides tools for exploring query, mutation, and subscription fields, looking up detailed type definitions, searching for types and fields using pattern matching, and getting simplified field information. This implementation is particularly valuable for developers working with GraphQL APIs who need AI assistance in understanding schema structure, exploring available operations, or searching for specific functionality within complex GraphQL schemas."
hannesj,mcp-openapi-schema,19,563,"The OpenAPI Schema MCP server exposes OpenAPI specification information to Large Language Models through a set of specialized tools. Developed by Hannes Junnila, it loads any OpenAPI schema file (JSON or YAML) and provides tools for exploring API paths, operations, parameters, schemas, and security definitions. The server converts complex OpenAPI structures into YAML format for better LLM comprehension and includes features like endpoint listing, schema searching, and example retrieval. It's particularly valuable for workflows requiring API exploration and understanding within AI assistant conversations, eliminating the need to manually parse OpenAPI documentation."
hannesrudolph,imessage-query-fastmcp-mcp-server,42,,"This MCP server, developed by Hannes Rudolph, enables AI assistants to query and analyze iMessage conversations on macOS. Built with FastMCP and the imessagedb library, it provides read-only access to the iMessage database with robust safety features like phone number validation and attachment handling. The server exposes a 'get_chat_transcript' tool that retrieves message history for specific contacts, including text, timestamps, and attachment info. By connecting AI capabilities with personal messaging data, this implementation allows AI systems to gain insights from conversation history while maintaining privacy and security. It is particularly useful for personal productivity use cases like summarizing past discussions, analyzing communication patterns, or extracting action items from chats."
hannesrudolph,mcp-ragdocs,141,2156,"This MCP server, developed by Hannes Rudolph, enables AI assistants to augment their responses with relevant documentation context through vector-based search and retrieval. Built as a fork of qpd-v's original implementation, it integrates with OpenAI for embeddings generation and Qdrant for vector storage. The server provides tools for adding documentation from URLs, performing semantic searches, extracting links, and managing a processing queue. By connecting AI capabilities with efficient vector search of documentation, this implementation allows AI systems to enhance their knowledge with domain-specific information in real-time. It is particularly useful for building documentation-aware AI assistants, implementing semantic documentation search, and creating context-aware developer tools that require access to up-to-date technical information."
hannesrudolph,sqlite-explorer-fastmcp-mcp-server,37,,"This MCP server, developed by Hannes Rudolph, provides safe read-only access to SQLite databases for AI assistants. Built with FastMCP, it exposes tools for executing validated SELECT queries, listing tables, and describing table schemas. The implementation stands out with its focus on security, featuring query sanitization, parameter binding, and row limit enforcement. By connecting AI capabilities with local SQLite data sources, this server enables AI systems to explore and analyze structured data while maintaining strict safety controls. It is particularly useful for scenarios requiring AI-assisted data exploration, report generation, or insights extraction from SQLite databases, without risking data integrity or exposing sensitive information."
hanweg,mcp-discord,49,,"This Discord MCP server, developed by Hanweg Altimer, provides a comprehensive integration between Discord and the Model Context Protocol. Built using Python and the discord.py library, it offers a wide range of Discord management tools including server information retrieval, message handling, channel and role management, and webhook operations. The server implements Discord's privileged intents for enhanced functionality and uses environment variables for secure bot token management. By abstracting Discord API interactions into a standardized MCP interface, it enables AI systems to easily interact with and manage Discord servers. This implementation is particularly useful for applications involving community management, automated moderation, and AI-assisted Discord bot development, facilitating use cases such as intelligent chatbots, content moderation, and server analytics."
hanweg,mcp-discord-raw,7,,"This Discord Raw API MCP server, developed by hanweg, provides a flexible interface for AI assistants to interact with Discord's API. Built using Python and the discord.py library, it supports both REST API calls and slash command syntax, offering a unified approach to Discord bot development. The implementation stands out by abstracting Discord's complex API structure into a more accessible format, allowing for easier integration with AI systems. By exposing Discord's capabilities through standardized MCP endpoints, it enables AI assistants to perform a wide range of Discord operations, from message sending to role management. This server is particularly useful for scenarios requiring dynamic Discord bot behavior, such as moderation tools, custom command handlers, or AI-driven community management systems."
hanweg,mcp-pdf-tools,29,,"This MCP PDF Tools server, developed by hanweg, provides AI assistants with PDF manipulation capabilities. Built using Python and leveraging libraries like PyPDF2, it offers tools for merging PDFs, extracting pages, and finding related documents based on content similarity. The server implements file system operations and text extraction to enable advanced PDF management. By abstracting the complexities of PDF handling, it allows AI systems to easily perform document operations. This implementation is particularly useful for document management, research, and information retrieval tasks, enabling use cases such as compiling reports, organizing research papers, and automating document workflows."
hanweg,mcp-sqlexpress,1,,"This MCP server implementation provides a bridge to Microsoft SQL Server Express, enabling AI assistants to interact with SQL databases. Developed by hanweg, it offers tools for executing SELECT, INSERT, UPDATE, and DELETE queries, as well as creating tables and describing database schemas. The server supports both Windows and SQL Server authentication, with configurable database access restrictions. Built using Python and pyodbc, it's designed for easy integration into Claude Desktop environments. The implementation focuses on secure database interactions and is particularly useful for AI applications requiring data analysis, reporting, or automated database management tasks within Microsoft SQL Server ecosystems."
hanxuanliang,tsrs-mcp-server,3,,"A Rust-based MCP server for TuShare financial data API, providing structured access to Chinese market data including stock listings, concept themes, money flow statistics, and minute-level price data. The implementation uses a custom derive macro system to handle API responses and includes models for various financial data types like limit-up stocks, concept lists, and trading statistics. The server supports multiple platforms through GitHub Actions workflows that build releases for macOS, Windows, and both x86_64 and ARM architectures."
hanzoai,mcp,4,8178,"Hanzo MCP enables AI assistants to interact with codebases through tools for file operations, command execution, project analysis, and Jupyter notebook management. Built with Python and FastMCP, it provides secure access to local files and commands through a permission system that validates paths and operations. The implementation is designed for developers who want to use Claude for code understanding, modification, and project management tasks while maintaining security through explicit path allowlisting and operation validation."
hao-cyber,phone-mcp,6,3207,"Phone MCP is a Python-based server that enables AI assistants to control Android phones through ADB commands. Developed by hao, it provides tools for making calls, sending text messages, taking screenshots, recording screens, managing contacts, launching apps, and retrieving system information. The implementation includes specialized modules for different phone functionalities and supports map-related features when an API key is configured. It's particularly useful for scenarios requiring remote phone control, automated testing, or accessibility assistance, allowing AI agents to interact with mobile devices without direct physical manipulation."
happyany,latex-mathml-mcp-server,3,,"A lightweight MCP server that converts LaTeX mathematical expressions to MathML using MathJax-node, providing both tool-based and resource-based conversion methods. Developed by happyan, this server enables easy integration of mathematical notation translation for developers and researchers working with scientific or technical documentation."
happyzym,mcp-server-reposearch,7,,"This MCP server implementation provides a file search functionality for text content within a specified repository. Developed with TypeScript and utilizing the Model Context Protocol SDK, it offers efficient searching capabilities while respecting ignore patterns defined in a .reposearchignore file. The server is designed to work in Node.js environments and includes features for file traversal, content matching, and result filtering. It's particularly useful for AI applications or development tools that require quick and accurate text searches across codebases or document repositories. The implementation focuses on performance and configurability, making it suitable for both small-scale projects and larger, more complex file systems."
hardik-id,azure-resource-graph-mcp-server,3,,"Azure Resource Graph MCP Server provides a bridge between AI assistants and Azure's Resource Graph API, enabling users to query and retrieve detailed information about Azure resources across subscriptions. Built with TypeScript and leveraging the Model Context Protocol, it authenticates using DefaultAzureCredential and offers both default and custom query capabilities through a simple tool interface. This implementation is particularly valuable for cloud administrators and developers who need to quickly analyze their Azure infrastructure, inventory resources, or troubleshoot configuration issues without leaving their IDE environment."
hariohmprasath,k8s-ai,5,,"MCP-K8s-Server is a Kotlin-based server that provides AI assistants with direct access to Kubernetes cluster management capabilities. Developed by Hari Ohm Prasath, it exposes a comprehensive set of tools for monitoring and managing Kubernetes resources including pods, deployments, services, storage, networking, and Helm releases. The server connects to Kubernetes clusters using the local kubeconfig file and leverages the official Kubernetes Java client to interact with the API server. Particularly valuable for DevOps engineers and platform administrators who need to diagnose cluster issues, analyze resource utilization, and manage deployments through natural language interactions without switching to kubectl or other management tools."
fish0710,excel-mcp,2,,"Excel MCP Server provides Excel file manipulation capabilities without requiring Microsoft Excel installation. Built by Haris, it leverages OpenPyXL to enable workbook creation, data manipulation, formatting, and advanced features like charts and pivot tables. The server can be configured through environment variables and started in SSE mode, making it accessible from various clients including Cursor IDE. With comprehensive error handling and a rich set of tools documented in TOOLS.md, it's ideal for workflows requiring Excel operations directly within AI assistant conversations."
harjjotsinghh,mcp-server-postgres-multi-schema,2,1076,"This MCP server provides read-only access to PostgreSQL databases with enhanced multi-schema support. It enables AI assistants to inspect database schemas across multiple namespaces, execute read-only queries, and maintain schema isolation. The server supports explicit schema specification, cross-schema discovery, and metadata security, making it ideal for scenarios requiring controlled access to complex database structures across multiple schemas."
quantum-369,gmail-mcp-server,11,,"This Gmail MCP server, developed by Harshavardhan Sai M, provides a robust interface for interacting with Gmail APIs through the Message Control Protocol framework. Built in Python, it offers functionality for reading, sending, and managing emails programmatically across multiple Gmail accounts. The implementation focuses on flexibility and security, with features like OAuth 2.0 authentication, attachment handling, and advanced email search capabilities. It's particularly useful for applications requiring automated email management, enabling use cases such as bulk email processing, intelligent email routing, and integration of email functionality into AI-powered assistants or workflow automation tools."
harshmaur,gitlab-mcp,0,938,"GitLab MCP Server provides a bridge to the GitLab API, enabling AI assistants to interact with GitLab repositories, issues, merge requests, and other GitLab resources. Built by harshmaur, it supports operations like creating repositories, managing files, creating issues, and handling merge requests through a standardized interface. The implementation uses TypeScript with the Model Context Protocol SDK and can be configured with a GitLab personal access token, making it valuable for workflows that require code management, project collaboration, or GitLab automation directly within AI assistant conversations."
harukikaneko,esa-mcp,1,,"ESA MCP Server provides integration with the esa.io knowledge management platform, enabling AI assistants to search, read, create, update, and delete posts and comments. This TypeScript implementation offers tools for querying posts with advanced search parameters, managing post content with support for tags and categories, and interacting with comment threads. The server connects to the ESA API using environment variables for authentication and team selection, making it particularly useful for teams that use esa.io for documentation, knowledge sharing, and collaborative content management."
hatrigt,hana-mcp-server,0,,"HANA Cloud MCP Server provides a bridge between SAP HANA Cloud databases and Cursor IDE for machine learning operations. It implements a three-layer architecture (Models, Contexts, and Protocols) that enables managing predictive models, execution contexts, and standardized communication protocols through a RESTful API. The server handles both inference and training operations, supports SQL and Python-based protocol handlers, and includes features for health monitoring and database schema initialization, making it ideal for organizations using HANA Cloud for data science workflows."
hawstein,mcp-server-reddit,30,11763,"This MCP server, developed by Hawstein, provides tools for fetching Reddit content through the platform's public API. Built using Python and leveraging the redditwarp library, it offers functionality to retrieve frontpage posts, subreddit information, hot/new/top/rising posts, and post details including comments. The implementation focuses on providing a standardized interface for Reddit data retrieval, enabling AI assistants to interact with Reddit's vast content ecosystem. It's particularly useful for applications requiring real-time access to Reddit discussions, trend analysis, or content curation, enabling use cases such as sentiment analysis, topic tracking, and automated content aggregation without direct navigation of Reddit's web interface."
hawstein,resend-mcp,0,3359,"Resend MCP server enables AI assistants to compose and send emails through the Resend API. Built with TypeScript and the Model Context Protocol SDK, it provides a single tool for sending emails with support for customizable sender addresses, reply-to fields, and scheduled delivery. The implementation requires a Resend API key and sender email address, making it ideal for users who want their AI assistant to draft and dispatch emails directly. The server can be installed via npm or through ClaudeMind desktop app for seamless integration."
hdcola,mcp-server-oracle,7,,"A Model Context Protocol server that provides AI assistants with direct access to Oracle databases. It exposes three key tools: listing all tables, describing table structures (including columns, data types, and key relationships), and executing read-only SQL queries. The implementation uses Python's oracledb library to handle database connections asynchronously, with connection details securely managed through environment variables. This server enables AI assistants to explore database schemas and retrieve data without requiring direct database access credentials."
hdresearch,mcp-shell,30,4858,"This MCP server, developed by hdresearch, provides secure shell command execution capabilities for AI models. Built in Node.js, it integrates with Claude Desktop and enables AI assistants to run shell commands in a controlled environment. The implementation stands out through its focus on security, using command blacklisting, existence validation, and comprehensive error handling. By bridging AI models with the local shell, this server allows AI systems to interact with the file system, run utilities, and execute scripts. It is particularly useful for scenarios like system administration, development workflows, and building AI assistants that can leverage command-line tools while maintaining a strong security posture."
headcrab,clickhouse-mcp,0,,"ClickHouse MCP provides a bridge between Claude and ClickHouse databases, enabling AI assistants to execute queries and retrieve data directly from ClickHouse instances. Built by Alex Novikov, it leverages the official ClickHouse Go client to establish secure connections with configurable authentication options. The implementation is containerized with Docker for easy deployment and includes comprehensive test coverage. This tool is particularly valuable for data analysis workflows requiring access to time-series data, analytics datasets, or large-scale data warehouses stored in ClickHouse without leaving the conversation interface."
cnitlrt,headless-ida-mcp-server,4,,"Headless IDA MCP Server provides remote binary analysis capabilities through IDA Pro's headless mode, exposing powerful reverse engineering tools via the Model Context Protocol. Built upon work from mrexodia's ida-pro-mcp and DennyDai's headless-ida library, this server enables AI agents to programmatically analyze binaries, decompile functions, manipulate code elements, and extract critical information from executable files. The implementation includes tools for function management, disassembly, decompilation, cross-reference analysis, and code annotation, making it valuable for security researchers and reverse engineers who want to integrate automated binary analysis into their AI-powered workflows."
hebcal,hebcal-mcp,2,,"Hebcal MCP is a server implementation that extends the Model Context Protocol to provide Hebrew calendar functionality for AI assistants. Developed by Michael J. Radwin, it offers tools for converting between Gregorian and Hebrew dates, calculating yahrzeits (death anniversaries), and determining Torah portions for specific dates. The server leverages the established @hebcal libraries to perform accurate calendar calculations while handling both Israeli and Diaspora Torah reading schedules. This implementation is particularly valuable for users who need to access Jewish calendar information and religious observances directly through their AI assistant interface."
hedera-dev,hts-mcp-server,0,,"Hedera MCP Server provides a lightweight blockchain interaction toolkit for creating Hedera wallets, checking account balances, building transactions, and sending signed transactions. Built with TypeScript and the Hedera SDK, it offers a streamlined interface for developers to perform core blockchain operations through a Model Context Protocol server. The implementation is particularly useful for developers building decentralized applications or testing Hedera network interactions without complex blockchain management overhead."
abel9851,mcp-server-mariadb,7,2258,"MariaDB MCP Server provides a bridge between Claude and MariaDB databases, enabling read-only SQL query execution directly within conversations. Developed by HeejunShin, this implementation authenticates with MariaDB using environment variables or command-line arguments, exposes database schema information as resources, and includes safety measures that restrict operations to SELECT, SHOW, DESCRIBE, and EXPLAIN statements. The server formats query results as formatted tables, making it particularly valuable for data exploration and analysis workflows without leaving the conversation interface."
heetvekariya,linear-regression-mcp,8,,A Python implementation of linear regression using the Model Context Protocol (MCP) framework. This project demonstrates how to apply linear regression techniques within the MCP architecture.
githejie,mcp-server-calculator,25,7003,"MCP Server Calculator provides a simple mathematical expression evaluation service using Python's AST module for secure parsing and calculation. Built by He Jie, it exposes a single 'calculate' tool that safely evaluates mathematical expressions without using Python's built-in eval() function, supporting basic operations like addition, subtraction, multiplication, division, and exponentiation. The implementation uses FastMCP for server functionality and is packaged for easy installation via pip, making it ideal for workflows requiring quick calculations without leaving the conversation interface."
hekmon8,jenkins-server-mcp,1,,"This Jenkins MCP server, developed by Hekmon, provides AI assistants with a standardized interface to interact with Jenkins CI/CD pipelines. Built using TypeScript and leveraging the Model Context Protocol SDK, it offers capabilities for managing and querying Jenkins jobs, builds, and artifacts. The server implements a simple notes system to demonstrate core MCP concepts, including resource management, tool execution, and prompt generation. It's designed for flexibility, supporting various Jenkins configurations through JSON-based settings. This implementation is particularly valuable for DevOps teams and AI researchers working on automated software delivery, enabling use cases such as intelligent build monitoring, test result analysis, and deployment orchestration within Jenkins environments."
hekmon8,homeassistant-server-mcp,34,,"This MCP server, developed by hekmon, enables AI assistants to interact with Home Assistant through a standardized interface. It provides tools for retrieving device states, toggling entities, triggering automations, and listing available entities via the Home Assistant API. The server implements error handling and input validation, offering a simplified workflow for AI systems to control and monitor smart home devices. By connecting AI capabilities with Home Assistant's extensive home automation platform, this implementation empowers AI assistants to perform tasks like adjusting lighting, managing climate control, or monitoring sensor data. It is particularly useful for applications requiring smart home integration, energy management, or any scenario where an AI system needs to interact with and reason about the state of a connected home."
hellokaton,unsplash-mcp-server,110,,"Unsplash MCP Server provides AI assistants with access to the Unsplash photo library through a simple search interface. Built with Python using the FastMCP framework, it enables searching for high-quality images by keyword with additional filtering options for color, orientation, and sorting preferences. The implementation authenticates with the Unsplash API using environment variables and returns structured photo data including image URLs, dimensions, and descriptions. This server is particularly useful for workflows requiring visual content integration, allowing AI assistants to find and reference relevant imagery directly within conversations."
heltonteixeira,openrouterai,35,,"This OpenRouter MCP server, developed by bossying, provides a unified interface for accessing various AI models through OpenRouter.ai. Built with TypeScript and leveraging the OpenAI SDK, it offers tools for model management, chat completion, and detailed model information retrieval. The server implements intelligent rate limiting, caching, and error handling to optimize API usage. Key features include model search, capability validation, and default model configuration. By abstracting the complexities of API communication and model selection, it enables AI systems to easily leverage a wide range of language models. This implementation is particularly valuable for applications requiring flexible access to multiple AI models, facilitating use cases such as chatbots, content generation, and AI-assisted analysis across various domains and capabilities."
heltonteixeira,ragdocs,6,579,"This RagDocs MCP server provides Retrieval-Augmented Generation capabilities using Qdrant vector database and Ollama/OpenAI embeddings. Built with TypeScript, it offers semantic search and management of documentation through vector similarity. The server implements automatic text chunking, embedding generation, and supports both local and cloud-based Qdrant setups. Key features include adding documents with metadata, semantic search, listing/organizing documents, and deletion. By abstracting vector storage and embedding complexities, it enables easy integration of RAG functionality into AI workflows. This implementation is particularly useful for applications requiring context-aware document retrieval, knowledge management systems, and AI-powered documentation tools."
henihaddad,gcp-mcp,16,1418,"GCP MCP Server provides a comprehensive interface for Claude to manage Google Cloud Platform resources through natural language commands. Built with Python, it integrates with numerous GCP APIs including Compute Engine, Storage, IAM, Networking, Kubernetes, and Databases. The implementation handles authentication automatically through browser-based OAuth flow and offers tools for resource creation, monitoring, and management across all major GCP services. When configured in Claude Desktop, it enables users to perform complex cloud operations like creating compute instances, managing storage buckets, checking billing information, and monitoring resources without leaving the conversation interface."
henkdz,postgresql-mcp-server,16,,"PostgreSQL MCP Server provides a comprehensive set of tools for PostgreSQL database management through the Model Context Protocol. It enables analyzing database configurations, debugging issues, managing schemas, migrating data, and monitoring performance metrics. The server implements connection pooling for efficient resource management, supports various PostgreSQL operations including table creation, data export/import, function management, and Row-Level Security policies. Built with TypeScript and Node.js, it offers platform-specific setup instructions and detailed documentation, making it valuable for developers who need to interact with PostgreSQL databases directly within AI assistant workflows without requiring separate database management tools."
henryhaoson,yuque-mcp-server,9,,"Yuque MCP Server provides a bridge between AI models and the Yuque knowledge base platform through the Model Context Protocol. Built by HenryHaoson, it enables AI assistants to perform document management operations (create, read, update, delete), search content, and retrieve team statistics via Yuque's API. The server can be deployed as a Docker container or run locally in either HTTP or CLI mode, with flexible configuration options including dynamic API token setting via query parameters. This implementation is particularly valuable for workflows requiring knowledge management, document collaboration, and team analytics within the Yuque ecosystem."
henryhawke,mcp-titan,47,,"This MCP server, developed by Henry Hawke, provides enhanced Titan Memory capabilities for AI agents. Built with TypeScript and leveraging TensorFlow.js, it offers improved context retention and retrieval through neural network-based memory encoding. The implementation focuses on optimizing long-term information storage and recall for conversational AI, enabling more coherent and contextually-aware interactions. It's particularly useful for applications requiring persistent memory across multiple conversations or complex, multi-step tasks where traditional context windows fall short."
here-and-tomorrow-llc,audio-player-mcp,1,,"Audio Player MCP Server enables Claude to control audio playback on your computer through a secure, directory-isolated interface. Built with Python using the FastMCP framework and pygame for audio handling, it provides tools to play MP3, WAV, and OGG files, list available audio in a designated directory, and stop playback. The implementation includes safety features like stdout redirection and path validation to prevent unauthorized file access, making it ideal for users who want to integrate audio controls directly into their Claude conversations without leaving the interface."
agentwong,optimized-memory-mcp-server,4,,"This optimized memory MCP server, developed by Herman Wong, provides a persistent knowledge graph for AI systems using SQLite as a backend. Built with Python and leveraging libraries like aiofiles and mcp, it offers tools for creating, updating, and querying entities, relations, and observations in a graph structure. The server is designed for efficient memory management and seamless integration with Claude Desktop. By abstracting knowledge storage and retrieval into a standardized MCP interface, it enables AI assistants to maintain context and personalize interactions across conversations. This implementation is particularly useful for applications requiring long-term memory and relationship modeling, such as personalized chat systems, knowledge management tools, or AI-powered personal assistants."
heroku,heroku-mcp-server,18,,"A server implementation of the Model Context Protocol (MCP) for Heroku, allowing integration between MCP clients and Heroku services."
hertzfelt,windsurf-supabase-mcp,2,,"This MCP server implementation provides a Windsurf-optimized version of the Supabase MCP server, specifically enhanced to work seamlessly with the Windsurf Editor. Developed by hertzfelt, it builds upon the Model Context Protocol standard, adding crucial improvements for better error handling, response formatting, and SQL query processing. Key enhancements include structured error responses, improved SQL to REST conversion, flexible API key management, and optimized response formatting for UI components. The implementation is particularly useful for applications requiring natural language database interactions, real-time query validation, and enhanced debugging capabilities within the Windsurf ecosystem."
hesiod-au,python-mcp,3,,"This Python MCP server extracts and analyzes Python code structures, focusing on import/export relationships between files. It intelligently navigates codebases to identify related files, prioritizes the most relevant code sections to stay within token limits, and automatically includes README files for better context. The implementation features a CodeGrapher class that builds a comprehensive graph of code references, making it ideal for AI assistants that need to understand Python projects holistically without exceeding context windows."
hesreallyhim,mcp-server-isitdown,0,,"This MCP server checks the status of websites by querying isitdownrightnow.com. Developed by Really Him, it provides a simple interface to determine if a given website is currently up or down, along with the last known downtime. The server is useful for monitoring website availability, troubleshooting connectivity issues, or integrating website status checks into larger systems or workflows."
hetaobackend,mcp-pyautogui-server,8,1797,"MCP-PyAutoGUI-Server provides automated GUI testing and control capabilities through a Python-based interface. Developed by He Tao, this server wraps the PyAutoGUI library to enable AI assistants to control mouse movements, simulate keyboard input, take screenshots, and find images on screen across Windows, macOS, and Linux. The implementation offers tools for precise cursor positioning, clicking, typing text, pressing hotkeys, and screen analysis through a standardized protocol. It's particularly useful for automating repetitive GUI tasks, creating test scripts, or allowing AI systems to interact directly with desktop applications through visual interfaces."
heurist-network,heurist-mesh-mcp-server,40,,"Heurist Mesh MCP Server connects Claude to the Heurist Mesh network of specialized Web3 and blockchain tools through the Model Context Protocol. This implementation provides access to various agents including CoinGecko for cryptocurrency data, DexScreener for trading pair information, GoPlus for token security analysis, and search capabilities through Exa and Firecrawl. Built by Heurist AI, the server supports both SSE and stdio transports, making it compatible with Claude in Cursor, Claude Desktop, and other MCP-compatible interfaces. Users can access multiple blockchain services with a single API key, making it ideal for cryptocurrency research, token security verification, and Web3 data analysis workflows."
hexitex,mcp-backup-server,2,,"MCP Backup Server provides a specialized backup and restoration system for AI agents and code editing tools, preserving both file content and agent context. Developed by Rob McGlade, it creates targeted, timestamped backups with metadata that captures the reasoning behind changes, making it ideal for creating safety checkpoints before risky edits. The server supports individual file and folder operations with pattern filtering, maintains version history, and includes emergency backup capabilities. Unlike Git, it focuses on quick, contextual snapshots rather than comprehensive version control, making it particularly valuable for AI agents making critical code changes in editors like Cursor and Windsurf."
heyzgj,mcp-feargreedindex,1,,"CoinMarketCap Universal MCP Server provides access to cryptocurrency data through a comprehensive set of tools that interact with the CoinMarketCap API. It features smart caching to reduce API calls, detailed error handling, and exposes tools for accessing cryptocurrency listings, quotes, exchange information, global market metrics, and the Fear & Greed Index. The implementation is built with TypeScript for type safety and follows a modular design pattern that makes it easy to extend. Particularly valuable for developers and analysts who need real-time cryptocurrency data directly within their Cursor environment."
hhw67865,tripadvisor-mcp-server,1,,"This MCP server provides access to TripAdvisor data for planning vacations, finding attractions, restaurants, and hotels. It integrates with the TripAdvisor API to offer search functionality, detailed location information, photos, and reviews. The server includes tools for location searches, nearby discovery, and an interactive vacation planning prompt. It's designed for use cases like creating personalized travel itineraries, exploring destinations, and making informed decisions about accommodations and activities."
hichana,goalstory-mcp,8,1225,"Goal Story MCP enables AI assistants to interact with a goal visualization and achievement platform through a comprehensive API. Built by @hichana, it provides tools for managing personal goals, breaking them down into actionable steps, and creating personalized stories that visualize successful outcomes based on users' beliefs and motivations. The implementation connects to the Goal Story backend service, handling authentication and data formatting, making it ideal for personal development workflows where visualization and narrative-driven approaches enhance motivation and goal attainment."
hidenorigoto,sacloud-mcp,8,,"A Sakura Cloud MCP server implementation that enables AI assistants to interact with Sakura Cloud infrastructure through a standardized interface. The server provides access to various Sakura Cloud resources (servers, disks, networks) and tools for managing these resources, with special focus on AppRun containerized applications. It handles authentication via API tokens, supports zone-specific operations across different data centers, and includes public pricing information that can be accessed without authentication. Designed for integration with Claude Desktop, it allows AI assistants to perform infrastructure management tasks through natural language."
hide-org,hide-mcp,8,,"This MCP server, developed by Artem Moskvin, provides a persistent environment for executing Python code and shell commands within AI conversations. Built with Python and leveraging tools from Anthropic's computer-use-demo, it offers a String Replace Editor for file manipulation and a Bash tool for running shell commands. The implementation stands out by providing a stateful workspace that persists across interactions, enabling complex multi-step tasks. It's particularly useful for developers and system administrators who need to perform file operations, run scripts, or manage systems through AI-assisted workflows, allowing for seamless integration of coding and system management tasks into conversational AI interfaces."
highlight-ing,highlight-github-mcp,1,,"This GitHub MCP server, developed using TypeScript and the Highlight AI MCP SDK, provides a streamlined interface for AI agents to interact with GitHub's Pull Request functionality. It focuses specifically on extracting diff content from Pull Requests, offering a simple yet powerful tool for code analysis and review automation. The implementation leverages the GitHub REST API v3 and includes robust error handling and input validation. It's particularly useful for developers and teams looking to integrate automated code review processes, enabling use cases such as AI-assisted code analysis, change impact assessment, and automated documentation updates without directly dealing with GitHub API complexities."
highlight-ing,highlight-youtube-mcp,1,,"This YouTube MCP server, developed using TypeScript and the Highlight AI MCP SDK, enables AI agents to extract transcripts from YouTube videos. It provides a standardized interface for retrieving transcript text from various YouTube URL formats, including standard, shortened, and embed links. The implementation focuses on simplicity and error handling, offering functionality to fetch English transcripts from videos with captions enabled. It's particularly useful for applications requiring automated content analysis, such as sentiment analysis, topic extraction, or summarization of YouTube videos, without directly dealing with YouTube's API complexities. The server supports Node.js >=18.0.0 and uses the youtube-transcript library for transcript retrieval, making it a practical solution for integrating YouTube content into AI-driven workflows."
higress-group,higress-ops-mcp-server,9,,"Higress OPS MCP Server enables comprehensive configuration and management of Higress, a cloud-native API gateway, through a well-designed agent flow architecture. Built with Python using FastMCP, the server exposes tools for managing routes, service sources, and plugins like request-blocking, while the client leverages LangGraph and LangChain MCP Adapters to provide an interactive interface with human confirmation for sensitive operations. This implementation is ideal for DevOps teams needing to automate Higress configuration tasks through natural language commands while maintaining security through human-in-the-loop validation."
himanshusanecha,mcp-osint-server,15,,"MCP OSINT Server provides a suite of network reconnaissance tools for open-source intelligence gathering through a unified interface. Built by Himanshu Sanecha using the FastMCP framework, it integrates common OSINT utilities including WHOIS lookups, Nmap scans, DNS reconnaissance (via dnsrecon, dig, and host), and domain typosquatting detection with dnstwist. The implementation runs these tools either individually or concurrently through a parallel execution feature, making it ideal for security researchers, network administrators, and digital investigators who need quick access to domain intelligence without switching between multiple command-line tools."
hirokidaichi,mcp-tts-say,2,,"This MCP server, developed by hirokidaichi, enables text-to-speech functionality for AI agents. Built with TypeScript and leveraging the Model Context Protocol SDK, it integrates with OpenAI's API and a local sound playback library to convert text into audible speech. The implementation focuses on providing a simple interface for text-to-speech conversion, offering functionality to generate and play audio from text input. It's particularly useful for applications requiring voice output capabilities, enabling use cases such as AI-powered voice assistants, accessibility tools for visually impaired users, or audio content generation without the need for complex audio processing setups."
hiromitsusasaki,raindrop-io-mcp-server,21,,"This Raindrop.io MCP server, developed by Hiromitsu Sasaki, enables Large Language Models to interact with Raindrop.io bookmarks through the Model Context Protocol. Built with TypeScript and leveraging the Raindrop.io API, it provides tools for creating and searching bookmarks, with features like tag filtering. The implementation offers straightforward setup and integration with Claude Desktop, making it accessible for users without extensive technical knowledge. It's particularly useful for AI assistants or applications needing to manage bookmarks programmatically, enabling tasks like organizing research materials, curating content collections, or automating bookmark management across devices."
hiyorineko,mcp-rollbar-server,2,,"MCP Rollbar Server provides a bridge to the Rollbar error tracking platform, enabling AI assistants to monitor and analyze application errors. Developed by hiyorineko, this TypeScript implementation supports retrieving error items with filtering options, accessing detailed error information, viewing error occurrences, managing projects and environments, tracking deployments, and listing users. The server requires Rollbar API tokens (project and/or account level) and can be deployed via npm, locally, or with Docker, making it particularly valuable for developers who need to troubleshoot application issues, monitor error trends, or track deployment impacts through AI assistants."
hjlarry,dify-plugin-mcp_server,15,,"MCP Server transforms Dify workflow applications into MCP-compatible servers, allowing AI assistants to interact with custom functions defined in Dify. Developed by hjlarry, this plugin enables users to create simple workflow apps in Dify, expose them as endpoints with structured input schemas, and then connect these endpoints to MCP clients like Cursor. The implementation requires minimal setup - just creating a workflow in Dify, adding an endpoint that selects the app, and copying the endpoint URL to the MCP client - making it an efficient bridge between Dify's workflow capabilities and MCP-enabled AI assistants."
hloiseaufcms,mcp-gopls,8,,"MCP-Gopls is a server implementation that bridges the Go Programming Language Server (gopls) with the Model Context Protocol, enabling AI assistants to perform advanced code analysis on Go projects. It provides tools for code navigation (go-to-definition, find references), code completion, hover documentation, diagnostic error checking, and test coverage analysis. The server manages communication with the gopls language server through JSON-RPC, handling initialization, reconnection, and message formatting to make Go's powerful static analysis capabilities accessible through a standardized MCP interface."
hmk,attio-mcp-server,6,484,"This MCP server, developed by @hmk, provides integration with Attio, an AI-native CRM platform. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants like Claude to interact with Attio's API for reading company records and notes, as well as writing company notes. The implementation focuses on providing a standardized interface for CRM operations, with potential for expansion to other Attio activities. It's particularly useful for AI-assisted customer relationship management, enabling use cases such as automated data retrieval, note-taking during customer interactions, and AI-enhanced CRM analysis without directly navigating Attio's interface."
hmk,box-mcp-server,5,4148,"This Box MCP server, developed by @hmk, provides a standardized interface for interacting with Box cloud storage through the Model Context Protocol. Built with TypeScript and leveraging the Box SDK, it offers functionality for searching and reading files, with support for PDF and Word document formats. The server uses developer token authentication and is designed for easy setup and integration. By abstracting Box operations into an MCP interface, it enables AI systems to seamlessly access and process documents stored in Box. This implementation is particularly useful for applications requiring document analysis, content extraction, or information retrieval from Box repositories, facilitating use cases such as automated document processing, content management, and data mining within Box environments."
wshobson,mcp-trader,77,,"This MCP trader server, developed by Seth Hobson, provides technical analysis capabilities for stock traders. It integrates with the Tiingo API to fetch financial data and leverages libraries like pandas and TA-Lib to perform comprehensive technical analysis on stocks. The server offers a single 'analyze-stock' tool that takes a stock symbol and returns key technical indicators including moving averages, momentum oscillators, and volume metrics. Built with Python and designed to run as a local MCP server, it's particularly useful for AI assistants or applications needing to generate detailed technical analysis reports or make data-driven trading recommendations based on current market data."
kajirita2002,honeycomb-mcp-server,2,830,"Honeycomb MCP Server provides a direct interface for Claude AI to interact with the Honeycomb API, enabling programmatic access to observability and monitoring workflows. Created by kajirita2002, this TypeScript-based server allows querying, creating, and managing datasets, queries, events, boards, and other Honeycomb resources through a standardized set of tools. It's particularly useful for developers and DevOps teams wanting to automate observability tasks and perform data analysis through natural language interaction."
honey-guard,anchor-mcp,1,,"Anchor-MCP is a Rust CLI server that enables AI IDEs like Cursor or Windsurf to more effectively write Solana Anchor programs by providing security analysis capabilities. Developed by Cian (github.com/cianyyz), it implements the Model Context Protocol to expose tools for checking Anchor programs and files against Solana Fender security checks. The server processes JSON-RPC requests, allowing AI assistants to identify potential vulnerabilities in Solana smart contracts without leaving their development environment, making it particularly valuable for blockchain developers who want to ensure their code meets security standards before deployment."
hongsw,aligo-sms-mcp-server,0,,"This MCP server integrates with the Aligo SMS API, allowing AI assistants to send text messages directly through the Aligo platform. Built by Seungwon Hong, it leverages the Model Context Protocol to expose SMS functionality as tools that can be called programmatically. The server requires Aligo API credentials and supports both test and production modes, making it useful for applications that need to send notifications, alerts, or communication messages without leaving the AI assistant conversation."
horizondatawave,hdw-mcp-server,13,823,"HDW-MCP-Server provides a bridge between AI assistants and Horizon Data Wave's LinkedIn API, enabling comprehensive access to LinkedIn data and functionality. The TypeScript implementation exposes tools for searching users, retrieving profiles, accessing posts and reactions, managing connections, sending messages, and interacting with companies through the Model Context Protocol. Built with the MCP SDK, it handles authentication via environment variables and includes robust error handling and logging. This server is particularly valuable for use cases requiring LinkedIn data access directly within AI assistant conversations, such as sales prospecting, recruitment research, and professional networking."
hormold,mcp-command-proxy,6,3032,"MCP Command Proxy is a server that acts as a proxy for CLI commands, specifically optimized for Expo development but adaptable to any command-line application. Built with TypeScript and the Model Context Protocol SDK, it runs commands in a pseudo-terminal, captures output in a configurable circular buffer, and provides tools for AI assistants to retrieve logs, send key presses to the running process, and check process status. The implementation enables AI assistants like Claude to interact with and troubleshoot command-line applications, making it particularly valuable for developers working with interactive CLI tools who want AI assistance with log analysis and process management."
horw,esp-mcp,9,,"ESP-MCP provides a specialized interface for building ESP-IDF projects with integrated error handling and logging capabilities. The implementation offers a single tool that executes ESP-IDF build commands in a project directory, capturing both standard output and error streams for analysis. It handles the ESP-IDF environment setup automatically by sourcing the required export script before running build commands. This server is particularly valuable for developers working with ESP32 microcontrollers who want to streamline their build process and get automatic issue fixing based on build logs without leaving their AI assistant interface."
hosakakeigo,spreadsheet-mcp-server,1,,"Spreadsheet-MCP-Server provides integration with Google Spreadsheets through the Model Context Protocol, allowing AI assistants to interact with spreadsheet data programmatically. Built with TypeScript and leveraging the MCP SDK, this server implementation offers tools for retrieving and manipulating spreadsheet content through a standardized API. The server architecture includes utilities for formatting data and connecting to spreadsheet services, with comprehensive test coverage ensuring reliability. It's particularly useful for applications requiring data analysis, reporting, or any workflow that needs to access or update information stored in spreadsheets without manual intervention."
hpohlmann,home-assistant-mcp,15,,"The Home Assistant MCP provides AI assistants with direct control over smart home devices through the Home Assistant API. It enables searching for entities using natural language descriptions, controlling device states (on/off), and managing light colors and brightness levels. Built with Python and FastMCP, it securely handles authentication via long-lived access tokens and exposes three main tools: searching entities, controlling devices, and setting light colors. This implementation is particularly valuable for users wanting to control their smart home through conversational AI without leaving their assistant interface."
HEAD,wagyu_sports,0,,"Wagyu Sports MCP Server provides a bridge between AI assistants and The Odds API, enabling access to sports betting data including available sports, odds, and quota information. The server supports both test mode with mock data and live mode with real API calls, making it suitable for development without consuming API credits. Built with Python using the FastMCP framework, it features configurable authentication, comprehensive error handling, and tools for retrieving sports lists, game odds with customizable parameters, and API quota tracking. This implementation is particularly valuable for sports bettors who want to compare odds across multiple bookmakers, track line movements, or analyze betting trends directly through conversational AI."
hrishi0102,payman_mcp,2,,"Payman AI MCP Server provides a bridge to Payman AI's payment processing API, enabling AI assistants to create payees, search existing payees, send payments, and check balances through natural language prompts. Built with TypeScript using the Model Context Protocol SDK, it authenticates with the Payman API using API keys and exposes four specialized tools that handle the core payment operations. The server runs on stdio transport, making it compatible with Claude Desktop and Cursor, and is particularly useful for developers who want to integrate payment functionality into their AI assistant workflows without switching context to a separate payment interface."
hrishi0102,spotifyyy-mcp,1,,"A Spotify MCP server that enables Claude to interact with the Spotify API using a user's authenticated account. The implementation provides tools for searching tracks, creating playlists, adding songs to playlists, getting personalized music recommendations, and managing user profiles. Built with TypeScript and Node.js, it handles authentication through OAuth, including token refresh capabilities, and communicates with Claude via the Model Context Protocol. The server stores credentials in memory only, requiring users to authenticate at the start of each conversation, making it a secure way for AI assistants to help manage music collections without permanent access to user accounts."
hritik003,linkedin-mcp,9,8854,"This MCP server for LinkedIn, developed by Hritik Raj, enables AI agents to interact with LinkedIn's platform for job applications and feed searching. Built using Python and leveraging the unofficial LinkedIn API, it provides tools for profile retrieval, advanced job searching, feed post retrieval, and resume analysis. The implementation focuses on simplifying LinkedIn interactions, offering functionality to extract key profile information, perform customizable job searches, and parse resumes in PDF format. It's particularly useful for applications requiring automated LinkedIn engagement, enabling use cases such as job matching, content curation, and candidate screening without directly dealing with LinkedIn's API complexities."
hrmeetsingh,mcp-browser-automation,6,,"This MCP browser automation implementation, developed by Harmeet Singh, integrates Playwright with the Model Context Protocol to enable AI-driven web interactions. Built with TypeScript, it provides a server that can be controlled via Claude Desktop, allowing AI assistants to perform automated browsing tasks. The implementation leverages Playwright's cross-browser capabilities and the MCP SDK to create a flexible interface for web automation. By abstracting browser interactions into MCP-compatible tools, it enables AI systems to easily navigate websites, interact with web elements, and extract information. This implementation is particularly useful for scenarios involving web scraping, automated testing, or any task requiring programmatic control of web browsers, facilitating use cases such as data collection, UI testing, and web-based workflow automation."
hrs-asano,claude-mcp-trello,3,,"This MCP server implementation provides a bridge to Trello, enabling AI assistants to interact with Trello boards, lists, and cards. Developed by the Model Context Protocol team, it offers tools for retrieving cards, managing lists, adding and updating cards, and monitoring board activity. The server includes built-in rate limiting, robust error handling, and TypeScript support. It's designed for use cases requiring task management integration, such as project planning, workflow automation, or collaborative task tracking."
https-eduardo,clockify-mcp-server,1,,"Clockify MCP Server integrates with the Clockify time tracking API, allowing AI assistants to manage time entries through natural language prompts. Developed by https-eduardo, this TypeScript implementation provides tools for creating billable time entries, retrieving workspace information, listing projects, and accessing user data. The server handles authentication via Clockify API tokens and exposes four main tools that abstract the complexity of the Clockify API, making it particularly valuable for users who want to log their work hours without leaving their AI assistant interface. Future implementations will include deleting and editing time entries."
huang-sh,scmcp,2,,"SCMCP is an MCP server that provides natural language access to single-cell RNA sequencing analysis through the Scanpy library. Developed by Shenghui Huang, it exposes a comprehensive set of tools organized into modules for input/output operations, preprocessing, visualization, trajectory inference, and utility functions. The server supports both stdio and server-sent events (SSE) transport protocols, making it flexible for different integration scenarios. SCMCP handles AnnData objects internally, allowing users to perform complex bioinformatics workflows like clustering, dimensionality reduction, differential expression analysis, and cell type annotation through conversational interfaces, making it particularly valuable for researchers who want to analyze single-cell data without writing code."
huangxinping,ip-mcp-server,0,,"IP-MCP-Server provides a simple tool for obtaining the public IP address of the current machine through an external API service. Built with FastMCP and httpx, this lightweight server exposes a single asynchronous function that queries ipify.org and returns the IP in JSON format. The implementation runs over stdio transport, making it ideal for integration with AI assistants or applications that need to determine their external network identity without complex configuration."
huanongfish,arxiv-mcp,3,,"This MCP server implementation provides a flexible arXiv search and analysis service. It offers tools for querying arXiv papers, downloading PDFs, and extracting text content. The server supports asynchronous operations and integrates with external services like PyMuPDF for PDF processing. It's designed for use cases requiring AI-assisted literature review, research trend analysis, or automated paper summarization in scientific domains."
hubblevision,hubble-ai-mcp,3,1238,"Hubble AI MCP Server provides a bridge to Solana blockchain data and visualization capabilities through natural language queries. It implements three main tools: searching Hubble for blockchain analytics, generating charts with QuickChart, and downloading chart images to local files. The server uses a modular architecture with separate services for Hubble API interactions and chart generation, making it particularly valuable for AI assistants that need to analyze and visualize Solana blockchain data, including transaction patterns, price movements, and token holder distributions."
sheffieldp,hubspot_mcp,0,,"HubSpot MCP Server provides a bridge between Claude and the HubSpot CRM platform, enabling AI assistants to access and manipulate contact and company data. Built with Python using the HubSpot API client, it offers tools for retrieving contacts and companies, creating new entries, and accessing company activity history. The implementation supports authentication via HubSpot access tokens, includes comprehensive error handling, and can be deployed via Docker, Vercel, or Replit. This server is particularly valuable for sales and marketing workflows that require CRM data access without leaving the conversation interface."
huccihuang,bilibili-mcp-server,88,,"Bilibili MCP Server provides a simple interface to the Bilibili API, enabling search functionality across the popular Chinese video platform. Built with FastMCP, it exposes a single tool that allows querying the Bilibili search API with optional authentication via session data cookies. The implementation is lightweight, requiring only Python 3.12 and minimal dependencies (mcp[cli] and requests), making it ideal for workflows that need to retrieve video content, user information, or other searchable data from Bilibili without leaving the conversation interface."
xiyuefox,mcp-hfspace,0,,"MCP-HFSpace provides a bridge between Claude Desktop and Hugging Face Spaces, allowing AI assistants to interact with machine learning models hosted on Hugging Face. Built by Shaun Smith, this Node.js implementation automatically discovers and exposes Gradio endpoints as MCP tools, handling parameter conversion, file uploads, and progress notifications. It supports various output types including text, images, and audio files, with special handling for Claude Desktop compatibility. The server runs locally using stdio transport, making it ideal for workflows requiring access to specialized AI models without leaving the conversation interface."
hugobiais,wordware-mcp,1,,"This MCP server implementation provides a bridge to Wordware's deployed flows, enabling integration of Wordware tools directly within Claude conversations. Developed by Hugo Biais, it offers capabilities for founder research, lead enrichment, saving to Notion, and task solving with Google search and API capabilities. Built using TypeScript and the Model Context Protocol SDK, the server focuses on secure environment variable management and easy setup within the Claude Desktop environment. It is particularly useful for AI applications that need to automate research, enrich sales data, or integrate with external tools like Notion. The implementation includes a tool for dynamically adding new Wordware flows, enhancing its extensibility for future use cases."
hugoduncan,mcp-clj,25,,"This Clojure-based MCP implementation, developed by Hugo Duncan, exposes Clojure REPL functionality over an SSE transport. Built with compatibility for Anthropic's MCP specification in mind, it provides both client and server components for MCP communication. The project emphasizes simplicity and reliability, offering a straightforward setup process and integration with Claude Desktop via mcp-proxy. It's particularly useful for developers looking to leverage Clojure's interactive programming capabilities within an MCP ecosystem, enabling use cases such as remote code execution, interactive data analysis, and AI-assisted Clojure development without directly dealing with the complexities of SSE or MCP implementation details."
hugohow,mcp-music-analysis,9,,"MCP Music Analysis integrates librosa's audio processing capabilities with FastMCP to provide detailed audio feature extraction directly within AI conversations. Created by Hugo How-Choong, this server implementation offers 13 specialized tools for analyzing music and audio files, including tempo detection, spectral analysis, MFCC computation, and onset detection. Users can simply provide a file path to extract musical characteristics without leaving their conversation interface, making it ideal for musicians, audio engineers, and music analysts who need quick insights into audio properties."
human-spider,mcp-server-brave,0,,"This MCP server implementation provides a bridge to the Brave Search API, enabling AI assistants to perform web searches using Brave's privacy-focused search engine. Built with Deno, it leverages the supergateway package to handle communication and the @modelcontextprotocol/server-brave-search module for API integration. The server runs on port 8080 and uses standard input/output for data exchange. It's designed for easy deployment using Docker, making it suitable for applications that require secure and privacy-respecting web search capabilities, such as research assistants or content aggregation tools."
hummusonrails,couchbase-mcp-server,1,,"Couchbase MCP server enables AI assistants to execute SQL++ queries against Couchbase databases through a standardized interface. Built with TypeScript and the Couchbase SDK, it handles authentication, connection management, and query execution while providing detailed error handling and logging. This implementation is particularly valuable for developers and data analysts who need to interact with Couchbase data directly through natural language conversations."
hundunonline,mcp-dingdingbot-server,18,,"The mcp-dingdingbot-server provides a bridge between AI assistants and DingDing (DingTalk) messaging platform, enabling automated notifications through DingDing's bot API. Built in Go using the mcp-go library, it supports multiple message formats including text, markdown, images, news links, and template cards. The implementation includes signature verification for enhanced security, file upload capabilities, and comprehensive testing with both unit and integration tests. This server is particularly useful for workflows requiring automated alerts, team notifications, or integration of AI-generated content into DingDing group chats."
huntsyea,mcp-tasks-organizer,7,,"This MCP server converts Cursor agent plans into markdown task lists. Developed by Claude, it integrates with the MCP framework and uses Python with the markdown library. The server is designed for organizing and structuring AI-generated project plans, making them more readable and actionable for users working with Cursor or similar AI planning tools."
husaink52,mcp-spotify,0,,"Spotify MCP server that enables Claude to search and retrieve Spotify track, artist, and album information through a local Express.js server. Built with TypeScript, the implementation provides a straightforward search mechanism that allows users to query Spotify content directly within the Claude Desktop environment, leveraging the Spotify Web API for real-time music data retrieval."
husamabusafa,hasura_mcp,2,,"This advanced Hasura GraphQL MCP server enables AI agents to interact with Hasura GraphQL endpoints through a rich set of tools. It provides capabilities for schema introspection, executing read-only queries and mutations, listing tables and their structures, previewing data samples, performing aggregations, and checking service health. The implementation handles authentication via admin secrets, performs basic security checks on operations, and exposes the complete GraphQL schema as a resource, making it ideal for AI assistants that need to dynamically discover and leverage database structures based on natural language requests."
husniadil,mcp-image-placeholder,6,,"This MCP Image Placeholder Server, developed by Husni Adil Makmur, provides a simple way to generate placeholder images for testing and development purposes. Built with Python and leveraging the FastMCP framework, it offers a single tool for creating image URLs from two popular providers: placehold.co and Lorem Picsum. The implementation focuses on ease of use, allowing customization of image dimensions within specified limits. By providing a standardized interface for placeholder image generation, this server enables quick integration into development workflows, prototyping, and UI testing scenarios. It's particularly useful for developers and designers who need consistent, on-demand placeholder images in their projects."
hvkshetry,autocad-mcp,23,,"AutoCAD LT AutoLISP MCP Server enables natural language control of AutoCAD LT 2024/2025 through AutoLISP code generation and execution. It bridges Claude or other LLM clients with AutoCAD LT by providing tools for creating engineering drawings, including process equipment symbols (pumps, vessels, heat exchangers), piping connections, and complete process diagrams. The server uses keyboard simulation to send commands to AutoCAD, making it particularly valuable for engineers who need to create technical drawings through conversational prompts without manual CAD operations."
hvkshetry,mathcad-mcp,1,,"A specialized MCP server that provides deep integration with PTC MathCAD Prime, enabling AI assistants to interact with MathCAD worksheets through a comprehensive set of tools for worksheet management, input/output manipulation, and calculation control. Built using the MathcadPy library and FastMCP framework, this implementation supports Windows-based MathCAD automation, offering capabilities like opening/closing worksheets, setting inputs, retrieving outputs, and performing unit conversions, making it particularly valuable for engineering, scientific, and computational workflows."
hwillgit,onenote-mcp,2,,"OneNote MCP server enables AI assistants to browse and interact with shared OneNote notebooks through browser automation. Built with Playwright and Node.js, it provides tools for navigating notebook hierarchies, reading/writing pages, capturing diagrams and images, and maintaining session state. The implementation focuses on working with publicly shared notebooks that don't require authentication, making it ideal for collaborative note-taking and knowledge management scenarios where AI assistants need direct access to OneNote content."
h-yanagawa,research-mcp-server,0,,"This MCP server, developed by Hikari YANAGAWA, integrates with Notion to enable survey data retrieval and creation of survey pages. Built with Python and leveraging libraries like Anthropic, OpenAI, and Pydantic, it provides a standardized interface for AI-powered survey operations. The implementation focuses on bridging AI language models with Notion's database capabilities, allowing for automated survey management and analysis. By connecting to a specified Notion database, this server enables use cases such as generating survey questions, storing responses, and analyzing results, making it particularly useful for research projects that require dynamic survey creation and data collection."
hyeongjun-dev,metabase-mcp-server,2,,"Metabase MCP Server provides a bridge between AI assistants and Metabase analytics platforms, enabling conversational access to business intelligence data. Developed by Hyeongjun Yu, this TypeScript implementation exposes six tools that allow assistants to list dashboards, cards, and databases, execute saved questions with parameters, extract dashboard components, and run custom SQL queries. The server supports both session-based and API key authentication methods, delivers structured JSON responses, and includes comprehensive error handling and logging capabilities, making it particularly valuable for teams that want to analyze their Metabase data through natural language interactions."
hygao1024,xingchen-mcp-server,3,,"Xingchen-MCP-Server provides a bridge between AI assistants and iFlytek's workflow orchestration system, enabling access to complex workflow capabilities through simple MCP tools. Developed by hygao1024, this implementation connects to iFlytek workflows defined in a configuration file, allowing assistants to trigger sophisticated process flows that support sequential, parallel, loop, and nested execution modes. The server handles authentication with API keys and transforms user inputs into appropriate workflow calls, making it valuable for users who need to leverage iFlytek's Model of Models (MoM) hybrid architecture and 14 different node types for complex business automation tasks without leaving their AI assistant interface."
hyoban,folo-mcp,7,1202,"Folo-MCP is a server implementation that provides AI assistants with access to the Folo RSS reader platform through a set of specialized tools. Developed by Stephen Zhou, it enables querying and managing feed subscriptions, retrieving entries with various filtering options, checking unread counts, accessing feed information, and marking entries as read. The server authenticates with Folo's API using a session token and transforms requests into appropriate API calls, returning structured responses optimized for AI consumption. Ideal for users who want to integrate their RSS reading workflow with AI assistants for content discovery, organization, and management."
hyperb1iss,droidmind,93,,"DroidMind enables AI assistants to control and interact with Android devices through a secure, standardized interface. Built with Python and the Model Context Protocol, it provides tools for device management, app installation, UI automation, file operations, and system diagnostics. The implementation features a robust security layer that prevents dangerous operations, supports both stdio and SSE transport modes, and includes comprehensive test coverage. DroidMind is particularly valuable for developers, testers, and power users who need to debug, analyze, or control Android devices directly through conversational AI without switching to dedicated ADB tools."
hyperbrowserai,mcp,212,7966,"Hyperbrowser MCP Server provides web browsing capabilities for AI assistants through the Model Context Protocol, enabling scraping, structured data extraction, and web crawling. Built by hyperbrowserai, it offers tools to extract content in various formats (markdown, HTML, links, screenshots), follow links with customizable crawling parameters, and execute browser-based tasks. The server requires an API key for authentication and can be run in standard mode or with Server-Sent Events (SSE) for real-time communication, making it ideal for AI workflows requiring web content analysis, data collection, or automated browsing."
hyperdrive-eng,mcp-nodejs-debugger,214,3015,"MCP NodeJS Debugger connects Claude Code to Node.js's built-in Inspector Protocol, enabling real-time debugging capabilities directly within AI conversations. Developed by Hyperdrive, this tool allows users to set breakpoints, inspect variables, evaluate expressions, and step through code execution while a Node.js application is running in debug mode. The implementation includes continuous connection retry logic and comprehensive runtime state analysis features, making it particularly valuable for troubleshooting issues, understanding application behavior, and testing potential fixes without leaving the Claude interface."
bmorphism,hypernym-mcp-server,3,,"This MCP server, developed by Hypernym AI, provides semantic text analysis and compression tools. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers two main functions: full semantic analysis of text including categorization and compression metrics, and direct text compression that maintains semantic meaning. The implementation focuses on preserving core meaning while maintaining readability, with configurable compression ratios and semantic similarity targets. It's particularly useful for applications requiring advanced text processing, enabling use cases such as content summarization, semantic search optimization, and efficient text storage without compromising on meaning."
hypersequent,qasphere-mcp,8,397,"QA Sphere is a modern test management system designed to streamline the testing process in software development. It provides comprehensive tools for organizing, tracking, and analyzing test cases, making it easier for teams to maintain high-quality testing practices. The system offers intuitive test case organization, real-time collaboration features, and detailed reporting capabilities.

By integrating with AI-powered IDEs through the MCP protocol, QA Sphere enhances the testing workflow by allowing developers and QA engineers to interact with their test cases using natural language. This integration bridges the gap between test management and development environments, enabling teams to work more efficiently and maintain better test coverage without switching contexts.
"
hzzy2o,flux-cloudfare-mcp,0,,"Flux-Cloudflare-MCP enables AI assistants to generate images through the Flux API running on Cloudflare Workers. Developed by Hzzy2O, this implementation provides a streamlined interface for text-to-image generation with customizable parameters including prompt, dimensions, aspect ratio, and inference steps. The server handles the entire workflow from API communication to image retrieval and optional local file saving, making it particularly valuable for creative workflows requiring image generation without leaving the conversation context."
i524,datadog-mcp-server,0,,"Datadog MCP server provides a bridge to the Datadog API, enabling programmatic interaction with Datadog monitoring and observability services. Built using TypeScript and the Bun runtime, it leverages the Datadog API client to facilitate data retrieval and management tasks. Useful for integrating Datadog metrics and logs into AI-driven workflows and automation scenarios."
iamalexander,readwise-mcp,7,,"The Readwise MCP Server provides AI assistants with access to a user's Readwise library, including saved articles, books, highlights, and documents. Built with Node.js using the Smithery framework, it implements a secure authentication flow for Readwise API tokens and offers endpoints for browsing books, accessing highlights, performing searches, and retrieving recent content. The implementation by Alexander Bastien features both npm package and Docker deployment options, making it ideal for users who want to reference their saved reading materials, analyze highlighted passages, or search across their knowledge collection during AI conversations."
iamjzx,dida,0,195,"Dida365 (TickTick) MCP Server provides tools for AI assistants to interact with the Dida365 task management API after user authorization. It enables managing tasks and projects through a set of MCP tools that handle authentication, project creation, and task operations (creating, updating, retrieving, and deleting tasks). The server is built with Node.js, packaged as a Docker container, and configured through Smithery.ai, making it ideal for workflows that require task management integration without leaving the conversation interface."
iamwavecut,mcp-think,9,,"MCP-Think is a Go-based server that implements a 'Think Tool' for Large Language Models, allowing them to record, retrieve, and analyze their reasoning processes during complex problem-solving tasks. Developed by Valeriy Selitskiy, this implementation provides four key tools: recording thoughts as a scratchpad, retrieving previously recorded thoughts, clearing the thought history, and generating statistics about recorded thoughts. The server uses stdio transport for compatibility with various LLM clients including Claude Desktop via Smithery and Cursor, making it particularly valuable for applications requiring structured reasoning, step-by-step analysis, or policy verification where maintaining a persistent thinking context improves problem-solving capabilities."
ian-cowley,mcpsqlserver,7,,"This MCP server implementation provides SQL Server integration capabilities for Windsurf IDE. Developed by MCPSqlServer Contributors, it offers tools for database schema exploration, query execution, and stored procedure management. The server uses a JSON-RPC protocol for communication and supports features like database switching, table inspection, and column metadata retrieval. It's designed for use cases requiring AI assistants to interact with SQL Server databases, such as natural language querying of relational data or AI-driven database analysis."
iannuttall,cursor-rules-mcp,1,2120,"A server that enables AI assistants to interact with Playbooks Rules API, providing tools for listing, searching, and retrieving rules. The implementation handles API requests to fetch rules data, processes URL-based rule slugs, and formats responses into Cursor-compatible rule files with appropriate metadata and content. Built for integrating rule management capabilities into AI workflows, it's particularly useful for developers who want to programmatically access and apply Playbooks rules through natural language interactions."
iaptic,mcp-server-iaptic,3,,"This MCP server for Iaptic, developed by Jean-Christophe Hoelt, provides a seamless interface for AI assistants to interact with Iaptic's customer and transaction data. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for querying customers, purchases, transactions, and statistics. The implementation focuses on efficient data retrieval and pagination, making it easy for AI models to analyze customer behavior, track sales, and generate insights. It's particularly useful for tasks like customer support automation, sales trend analysis, or integrating e-commerce data into AI-driven systems, allowing assistants to access Iaptic data without requiring deep knowledge of the underlying API complexities."
ibproduct,ib-mcp-cache-server,5,,"This memory cache server, developed for the Model Context Protocol (MCP), optimizes token consumption in AI interactions by efficiently caching data between language model queries. Built with TypeScript and leveraging the MCP SDK, it provides an in-memory storage system with features like LRU eviction, TTL management, and memory usage tracking. The implementation stands out by offering automatic caching of file contents, computation results, and frequently accessed data, reducing the need for repeated token-heavy operations. By integrating seamlessly with any MCP client and language model, this server enables significant performance improvements and cost savings in scenarios involving repetitive data access or computations, making it particularly valuable for applications in data analysis, file processing, and AI-assisted development workflows."
ibraheem4,clover-mcp,0,468,"Clover MCP server enables AI models to interact with the Clover payment platform API through OAuth authentication. Developed by Ibraheem Abdul-Malik, it provides tools for retrieving merchant information, listing inventory items, and accessing order data. The implementation handles OAuth flow management, automatically refreshing tokens as needed, and can be easily integrated with Claude AI through a simple configuration. This server is particularly valuable for business owners who want to analyze their Clover merchant data directly within AI assistant conversations without switching contexts."
ibraheem4,eventbrite-mcp,2,598,"This MCP server implementation provides tools for interacting with Eventbrite's API, enabling AI assistants to search for events, retrieve event details, get venue information, and access event categories. Developed by Ibraheem Abdul-Malik, it offers a streamlined interface for integrating Eventbrite functionality into MCP-based applications. The server is particularly useful for use cases involving event discovery, planning, and analysis."
ibraheem4,linear-mcp,43,,"This Linear MCP server provides a bridge between AI assistants and Linear's project management platform. Built with TypeScript and leveraging the Linear SDK, it offers tools for issue, team, and project management. The implementation focuses on simplifying interactions with Linear's API, making it accessible for AI models to create, list, and update issues, as well as retrieve team and project information. It's particularly useful for tasks like automated issue tracking, project status reporting, or integrating task management into AI-driven workflows, enabling assistants to interact with Linear without requiring deep knowledge of the underlying API complexities."
ibrookssdx,mcp-server-opensearch,2,,"This MCP server implementation provides a bridge to OpenSearch, enabling AI assistants to perform powerful search and analytics operations. Developed by ibrooksSDX, it integrates with OpenSearch to offer functionalities like full-text search, data aggregation, and real-time analytics. The server is designed to work with various MCP-compatible clients, offering a straightforward setup process using Docker for easy deployment. It's particularly useful for applications requiring advanced search capabilities, log analytics, or real-time data exploration. The implementation focuses on efficient query handling and secure authentication, making it suitable for both development and production environments where robust search and analytics are needed."
ichigo3766,image-gen-mcp,8,,"A server that provides text-to-image generation capabilities by integrating with Stable Diffusion WebUI (ForgeUI/AUTOMATIC-1111). It exposes a single tool for generating images with extensive parameter control including prompts, negative prompts, sampling steps, dimensions, and more. The implementation handles authentication, manages output directories, and embeds generation parameters as image metadata. Built for users who want to generate AI art through natural language requests while maintaining fine-grained control over the generation process."
icraft2170,youtube-data-mcp-server,11,4079,"YouTube MCP Server provides a robust interface to the YouTube Data API, enabling AI assistants to retrieve and analyze video content, transcripts, channel statistics, and engagement metrics. Built with TypeScript and Node.js, it offers tools for searching videos, accessing captions with multi-language support, analyzing channel growth, and discovering trending content across different regions and categories. The implementation handles pagination for large result sets, provides detailed error handling, and includes environment variable configuration for API keys, making it particularly valuable for content research, video analysis, and trend identification workflows without leaving the conversation interface."
icykallen,aws-cli-mcp-server,2,,"AWS CLI MCP Server provides a bridge between AI assistants and the AWS Command Line Interface, enabling execution of AWS commands directly through conversation. The server implements tools for executing AWS CLI commands with optional parameters, retrieving service details, and listing available AWS services. Built with TypeScript and the Model Context Protocol SDK, it verifies AWS CLI installation and credentials before starting, making it valuable for users who need to manage their AWS resources without leaving their AI assistant interface. Particularly useful for common tasks like listing S3 buckets, creating resources, or checking service status through natural language requests."
fdrechsler,mcp-server-idapro,46,,"IDA Pro MCP server enables AI assistants to interact with IDA Pro for reverse engineering and binary analysis tasks. Created by Florian Drechsler, it provides a secure bridge between AI and IDA Pro through a remote control plugin that exposes key functionality like script execution, string/function analysis, and disassembly via HTTP endpoints. The implementation features robust error handling, automatic dialog suppression, and timeouts to ensure stable operation when automating IDA Pro tasks, making it valuable for security researchers and reverse engineers who want to leverage AI assistance while analyzing binaries."
identimoji,mcp-server-emojikey,2,378,"This MCP server, developed by Identimoji, provides a mechanism for persisting LLM interaction styles using emojikeys. It integrates with Supabase for data storage and retrieval, allowing AI assistants to save and recall specific interaction patterns or personas. The server exposes a standardized interface for managing emojikey-based styles, abstracting the complexities of database operations. By enabling the persistence of interaction styles, this implementation facilitates consistent user experiences across multiple conversations or sessions. It is particularly useful for applications requiring personalized AI interactions, such as customer support chatbots, virtual assistants, or any AI system that needs to maintain distinct communication styles for different contexts or users."
idoru,influxdb-mcp-server,5,319,"InfluxDB MCP Server provides a bridge between AI assistants and InfluxDB time-series databases, enabling operations like querying measurements, writing data, and managing buckets and organizations. Developed by Sam Coward, this implementation exposes InfluxDB's functionality through four resources and four tools, with additional prompts for Flux query examples and Line Protocol formatting guidance. The server authenticates via environment variables and includes comprehensive error handling and logging for reliability. It's particularly valuable for developers and data analysts who need to interact with time-series data through AI assistants for monitoring, visualization, and data management tasks."
idosal,git-mcp,1237,,"Transforms any GitHub project (repositories or GitHub pages) into a documentation hub. It allows AI tools like Cursor to access up-to-date documentation and code, ending hallucinations seamlessly."
chatmcp,mcp-server-chatsum,901,,"This MCP server, developed by idoubi, enables AI assistants to query and summarize chat messages stored in a local database. Built in TypeScript, it integrates with Claude Desktop and provides a standardized interface for retrieving conversation history. The implementation stands out by offering flexible querying options and the ability to generate summaries based on custom prompts. By bridging AI models with chat logs, this server allows AI systems to analyze conversation patterns, extract insights, and provide context-aware responses. It is particularly useful for personal knowledge management, conversation analysis, and building more contextually-aware AI assistants that can reference and learn from past interactions."
idyll,party-time-mcp,0,,"The Party Time MCP server is a simple implementation that responds with 'It's Party Time' when queried about the current time. It registers a single tool called 'get-time' and communicates via stdin/stdout, making it easy to integrate with Claude Desktop. The server demonstrates basic MCP protocol compliance, including initialization, tool discovery, and execution, while providing a fun, lighthearted example for developers to build upon."
iflytek,ifly-workflow-mcp-server,20,,"A server implementation that enables AI assistants to interact with iFlytek's workflow orchestration platform. Built on a Model of Models hybrid architecture, it supports 14 types of workflow nodes for tasks like sequential execution, parallel processing, and iterative loops. The implementation provides streaming output via hooks and allows complex variable I/O between nodes, making it well-suited for automating multi-step business processes through natural language interaction."
ifmelate,mcp-image-extractor,0,,"MCP Image Extractor is a server that enables AI models to process and analyze images by extracting them from URLs or base64-encoded data. It provides three main tools: extract_image_from_url for retrieving images from web sources, extract_image_from_base64 for processing already encoded images, and save_screenshot for storing images to disk. Built with TypeScript and using the Sharp library for image processing, it includes features like image resizing, format conversion, and domain filtering for security. The implementation can be deployed locally or via Docker, making it ideal for workflows where visual content analysis is needed within AI conversations."
igordias2,unitymcp,0,,"UnityMCP enables seamless integration between Unity Editor and AI assistants through the Model Context Protocol. It consists of a C# Unity plugin that monitors editor state and executes commands, paired with a TypeScript MCP server that exposes Unity functionality through standardized tools. The implementation provides real-time access to scene hierarchies, project structures, and GameObject manipulation, allowing AI assistants to retrieve editor state, execute C# code directly in the editor, and access Unity logs. This makes it particularly valuable for AI-assisted game development workflows, automated testing, and interactive debugging sessions."
igs-pochenkuo,southasia_mcp,0,,"A server implementation for the IGS South Asia team that provides tools and utilities for their specific needs. Built with Python and the MCP protocol, it exposes a basic hello world endpoint and follows a modular structure with handlers, models and services. Currently in early development with minimal functionality implemented."
ihatesea69,aws-mcp,2,,"AWS-MCP is a server implementation that enables AI assistants to interact directly with AWS services through the AWS SDK v2. It provides tools for running AWS code, listing available credentials/profiles, and selecting profiles for authentication (including SSO support). The server handles credential management, executes JavaScript code in a sandboxed environment, and returns formatted results from AWS API calls. This implementation is particularly valuable for users who need to query their AWS environment, manage resources, or analyze cloud infrastructure without leaving their AI assistant conversation."
ihor-sokoliuk,mcp-searxng,53,,"This SearXNG MCP server, developed by Ihor Sokoliuk, integrates the SearXNG API to provide web search capabilities for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for executing web searches with pagination control. The server implements error handling, environment variable configuration for SearXNG instance URLs, and result formatting. By abstracting the complexities of API communication and search result parsing, it enables AI systems to easily access and analyze web content. This implementation is particularly valuable for applications requiring up-to-date information retrieval, enabling use cases such as research assistance, fact-checking, and content aggregation across various topics and domains."
ikhyunan,mcp_investmentportfolio,2,,"The Investment Portfolio Manager MCP Server implements a clean, modular architecture for analyzing and managing user's Investment Portfolio. The core server component handles protocol negotiation, client connections, and message routing, with support for both stdio and Server-Sent Events (SSE) transports. We organized functionality into specialized modules:
- portfolio_tools manages investment creation and updates
- stock_tools handles market data retrieval
- analysis_tools generates insights and recommendations
- visualization_tools creates graphical representations of portfolio allocations

The data layer uses JSON-based storage with a well-defined schema for portfolio data, while our transport layer implements robust error handling with automatic retry mechanisms and graceful shutdown procedures. We followed REST-like design principles for our resource URIs (e.g., ""portfolio://{user_id}"") and implemented asynchronous operations for external API calls to ensure responsive performance even during intensive operations like market data retrieval or report generation."
ilask,redmine-mcp,0,,"This MCP server implementation provides integration with Redmine, allowing AI assistants to interact with Redmine projects and issues. Developed by ilask, it offers tools for accessing project details and creating new issues through a custom API built on top of the node-redmine library. The server is designed to work with the Cline VS Code extension, making it particularly useful for developers who want to incorporate Redmine project management capabilities into their AI-assisted workflows."
illgatesmusic,click-funnels-mcp-shared,0,,"ClickFunnels MCP Framework provides a server implementation that integrates Claude Desktop with ClickFunnels marketing platform API. It offers tools for listing and retrieving funnels, managing contacts, and debugging API connections. Built with TypeScript and the mcp-framework package, it features a modular architecture where each API endpoint is implemented as a separate tool. The server handles environment configuration through dotenv, includes comprehensive error handling for API requests, and is designed to be easily deployed through Claude Desktop's configuration system, making it valuable for marketers who need to access and analyze their ClickFunnels data directly within conversations."
illuminaresolutions,n8n-mcp-server,74,1360,"n8n MCP Server provides a bridge between Claude and n8n automation workflows through the Model Context Protocol. Developed by Illuminare Solutions, it enables AI assistants to list, create, update, and execute n8n workflows directly within conversations, along with managing credentials, tags, executions, and generating security audits. The implementation supports both core features available to all n8n users and Enterprise-specific capabilities like project and variable management, making it particularly valuable for teams who want to integrate their automation workflows with AI assistants without switching contexts."
ilyagulya,gradle-mcp-server,10,,"Gradle MCP server enables AI tools to interact with Gradle projects through a standardized interface built on the Gradle Tooling API. It exposes tools for retrieving project metadata and executing Gradle tasks remotely, with support for both stdio and SSE transport modes. Particularly valuable for developers who want to automate Gradle project management and builds through conversational AI without manual configuration."
ilyazub,serpapi-mcp-server,5,,"This MCP server implementation integrates with the SerpApi Google Search API, enabling access to structured search results data. It is designed to be used with the MCP CLI tool and requires a SerpApi API key for authentication. The server can be useful for applications that need to programmatically access and analyze Google search results, such as SEO tools, market research platforms, or data aggregation services."
im47cn,feishu-project-mcp,0,1014,"Feishu Project MCP Service provides a bridge between AI assistants and Feishu (ByteDance's project management platform), enabling automated requirement management and development workflows. The server exposes tools for retrieving projects, requirements, and bugs from Feishu, as well as creating and managing tasks based on these items. Built with TypeScript and Express, it features a robust task management system, health monitoring endpoints, and Docker support for easy deployment. Particularly valuable for development teams using Feishu who want to automate analysis of requirements, bug tracking, and code implementation tasks without switching contexts."
imankamyabi,dynamodb-mcp-server,6,,"This DynamoDB MCP server, developed by Iman Kamyabi, provides a comprehensive interface for managing Amazon DynamoDB resources through the Model Context Protocol. It offers tools for table management, capacity adjustment, and data operations, enabling AI assistants to interact with DynamoDB using natural language commands. Built with TypeScript and leveraging the AWS SDK, this implementation stands out by offering a wide range of DynamoDB-specific operations while maintaining safeguards against accidental data deletion. It's particularly useful for developers and database administrators who want to streamline their DynamoDB workflows, automate routine tasks, or integrate AI-assisted database management into their existing tools."
imatrixme,pocketbase-mcp-server,1,,"A PocketBase MCP server that provides AI assistants with direct access to PocketBase databases through a comprehensive set of tools. It enables collection management, record operations, user authentication, and database administration via the Model Context Protocol. Built with TypeScript and the PocketBase SDK, this server exposes over 20 specialized tools for creating collections, managing schemas, performing CRUD operations, handling user authentication flows, and executing advanced queries with filtering and aggregation capabilities - making it particularly valuable for applications that need to interact with PocketBase databases programmatically without leaving the AI assistant conversation."
imghosty17,mcp-server-sandbox,0,,"This Azure DevOps MCP server enables AI assistants to programmatically manage Azure DevOps projects through a FastAPI implementation. Built with the FastMCP framework, it provides a tool for creating new projects in Azure DevOps organizations by authenticating with personal access tokens stored in environment variables. The implementation handles checking if projects already exist, creates projects with default Git version control settings, and monitors operation status until completion. It's particularly useful for automating DevOps infrastructure setup directly from AI assistant conversations without requiring manual Azure portal interaction."
imiborbas,pocketbase-mcp-server,1,,"Provides a TypeScript-based MCP server for interacting with PocketBase, enabling AI assistants to list and manage PocketBase collections. Built with the Model Context Protocol SDK, it offers a flexible configuration system that supports both command-line arguments and environment variables for connecting to PocketBase instances, with a focus on simplifying database interaction through natural language interfaces."
imjdl,nmap-mcpserver,2,,"Nmap MCP Server provides a secure, controlled interface for running network scans through nmap, enabling AI assistants to perform targeted network reconnaissance and analysis. It exposes tools for running scans, retrieving scan details, and generating AI-powered insights about network infrastructure, with built-in rate limiting and security safeguards to prevent misuse. Particularly useful for network administrators, security researchers, and penetration testers who want to leverage AI assistance in network exploration and vulnerability assessment."
imlewc,elasticsearch7-mcp-server,1,,"This MCP server implementation provides integration with Elasticsearch 7.x, allowing for efficient interaction and data management within Elasticsearch clusters. Developed by imlewc, it utilizes FastMCP and offers a streamlined interface for Elasticsearch operations through the MCP protocol. The server is particularly useful for projects requiring robust search and analytics capabilities while leveraging the MCP ecosystem."
imlewc,metabase-server,19,,"This MCP server implementation provides a bridge to Metabase, enabling AI assistants to interact with dashboards, questions/cards, and databases. Developed by imlewc, it offers tools for listing and executing Metabase queries, accessing resources via metabase:// URIs, and retrieving structured data. The server is designed for use cases requiring AI-driven data analysis, natural language querying of Metabase-managed data, or integration of Metabase insights into AI-assisted applications."
imvirtue,ragchatbot_mcpserver,4,,"RagChatbot_MCPServer is a localhost MCP server implementation that enables a RAG-based HR chatbot to provide workplace rules information from PDF documents. Built with OpenAI models and LangChain utilities, the server orchestrates document indexing, retrieval, and answer generation through function calling. It features PDF parsing, text chunking with RecursiveCharacterTextSplitter, document indexing with OpenAIEmbeddings, and similarity search to retrieve relevant content. The implementation includes a Streamlit interface for user interaction and supports email sending capabilities, making it particularly useful for HR departments needing to provide policy information from documentation."
index01d,ytrnscrpt-mcp-server,1,,"This MCP server implementation provides a bridge to YouTube's transcript functionality, enabling AI assistants to fetch and analyze video transcripts. Developed by index01d, it utilizes TypeScript and integrates with the Model Context Protocol SDK and youtubei.js library. The server is designed for easy setup within the Claude Desktop environment and focuses on secure handling of YouTube data. It is particularly useful for applications requiring text analysis of video content, such as content summarization, keyword extraction, or sentiment analysis of YouTube videos. The implementation offers a streamlined approach to accessing YouTube transcripts, making it valuable for researchers, content creators, and AI-driven media analysis tools."
inditextech,mcp-server-simulator-ios-idb,50,,"A Model Context Protocol server for iOS simulator automation via Facebook's IDB tool, enabling AI assistants to control iOS simulators using natural language commands. Developed by Inditex Tech, this TypeScript implementation provides a comprehensive command system for managing simulator sessions, launching apps, capturing screenshots, and performing UI interactions. The architecture includes a natural language parser that converts instructions into structured commands, an orchestrator that manages command execution, and an IDB manager that interfaces with the iOS simulator. This server is particularly useful for automated testing of iOS applications, UI validation, and creating interactive demos without requiring direct access to physical devices."
inditextech,mcp-teams-server,51,,"MCP Teams Server provides integration with Microsoft Teams, enabling AI assistants to interact with Teams channels through a standardized protocol. Developed by InditexTech, this Python implementation allows reading messages, creating threads, replying to messages, and mentioning team members. The server connects to Teams using Azure bot credentials and exposes functionality through a Docker container or local installation. It's particularly valuable for collaborative workflows where AI assistants need to monitor team communications, post updates to channels, or participate in threaded discussions without requiring users to switch contexts."
infinitimeless,claude-lmstudio-bridge,2,,"Claude-LMStudio Bridge enables Claude to interact with local LLMs running in LM Studio through a robust MCP server implementation. It provides tools for checking connectivity, listing available models, generating text, and handling chat completions with local models. The bridge uses httpx for API communication with LM Studio's server, supports customizable parameters like temperature and token limits, and includes comprehensive error handling. Particularly valuable for users who want to leverage their local models' capabilities directly within Claude conversations, reducing reliance on cloud-based LLMs while maintaining a seamless conversation experience."
infinitimeless,lmstudio-mcp,15,,"LMStudio-MCP creates a bridge between Claude and locally running LLM models via LM Studio, allowing Claude to interact with private models running on your machine. The server exposes tools to check API health, list available models, identify the currently loaded model, and generate completions using local models through LM Studio's OpenAI-compatible API endpoints. This enables users to leverage their own models through Claude's interface, combining Claude's capabilities with private, locally-hosted language models."
infinitiq-tech,mcp-jira,1,,"A Jira MCP server that enables AI assistants to interact with Jira's REST API through natural language commands. Built by InfinitIQ Tech, this implementation provides tools for managing projects, issues, and workflows including getting project details, searching issues with JQL, creating and transitioning tickets, and adding comments. The server supports multiple authentication methods for both Jira Cloud and Server/Data Center installations, making it valuable for software development teams who want to integrate Jira task management directly into their AI assistant workflows without switching contexts."
infisical,infisical-mcp-server,12,227,"Infisical MCP Server provides a secure bridge to the Infisical secrets management platform, enabling AI assistants to perform operations like creating, updating, and retrieving secrets through function calling. Developed by Infisical Inc, this TypeScript implementation authenticates via Machine Identity universal auth and exposes tools for managing secrets, projects, environments, folders, and team members. The server runs on stdio transport and can be easily integrated with Claude Desktop or debugged using the MCP Inspector, making it particularly useful for applications that need to securely access and manage sensitive configuration data without exposing credentials directly."
inkdropapp,mcp-server,16,449,"Inkdrop MCP Server provides a bridge between Claude Desktop and the Inkdrop note-taking application through the Model Context Protocol. Built by Takuya Matsuyama, it enables Claude to interact with Inkdrop's local HTTP server API, allowing users to search, read, create, and update notes directly within Claude conversations. The server offers seven tools for managing notes, notebooks, and tags, making it valuable for workflows that require accessing and manipulating Markdown notes without leaving the AI assistant interface. Configuration requires setting up Inkdrop's local HTTP server and providing authentication credentials in Claude's desktop config file."
inkeep,mcp-server-python,6,,"Inkeep MCP Server enables Claude to search and retrieve relevant documentation through Inkeep's RAG API. The server exposes a single 'rag-search' tool that queries Inkeep's API using the OpenAI client library, returning structured citation data compatible with Claude's citation format. It requires an Inkeep account and API key, and is configured through environment variables. This implementation is particularly valuable for workflows where users need to reference documentation without leaving their conversation with Claude, making it ideal for technical support, developer assistance, and knowledge-based interactions."
taskmaster-ai,insta-mcp,3,1790,"Instagram DM MCP Server enables AI assistants to read and send Instagram direct messages through Claude Desktop. Built with Python using the FastMCP framework and instagrapi library, it provides tools to retrieve recent messages with comprehensive thread information and send new messages to Instagram users. The server authenticates using Instagram cookies (session ID, CSRF token, and user ID) which can be provided through environment variables, command-line arguments, or a configuration file. The implementation includes a CLI for easy setup and installation, making it ideal for users who want to manage their Instagram conversations directly through their AI assistant without switching applications."
instructa,ai-prompts-mcp,4,,"AI-Prompts-MCP is a server implementation that provides a standardized interface for finding and retrieving AI prompts based on specific rules or search criteria. Built with TypeScript and the Model Context Protocol SDK, it exposes a 'findrule' tool that allows AI assistants to search through a collection of prompts using Fuse.js for fuzzy matching. The server uses SSE transport for real-time communication, maintains heartbeat connections, and integrates with an external API to fetch prompt data. This implementation is particularly valuable for developers and AI users who need to quickly access relevant prompts without leaving their AI assistant conversation."
instructa,mcp-youtube-music,3,139,"MCP YouTube Music is a server implementation that enables AI assistants to search for and play music tracks through YouTube Music. Developed by Instructa, this Node.js-based server provides two primary tools: one for searching tracks by name and returning detailed results, and another for automatically opening the top search result in the user's default browser. The implementation handles cross-platform browser launching (macOS, Windows, Linux) and communicates with the YouTube Data API using an API key. It's particularly useful for voice assistants or chatbots that need to respond to music playback requests without requiring users to manually search for songs."
integration-app,mcp-server,15,,"This Integration App MCP server, developed by an unnamed author, provides a bridge between AI assistants and Integration App's workflow automation capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it exposes Integration App actions as tools for AI models. The implementation focuses on simplifying interactions with Integration App's API, making it accessible for AI models to trigger and manage automated workflows. It's particularly useful for tasks like data synchronization, process automation, or integrating various SaaS applications, enabling AI assistants to orchestrate complex business processes without requiring deep knowledge of individual API complexities."
iocanel,backstage-mcp,4,,"Backstage MCP is a Quarkus-based server that enables AI agents like Goose to interact with Backstage, the open-source developer portal platform. It provides tools for listing available templates and instantiating new projects directly from the command line, leveraging Quarkus Backstage for API communication. The implementation requires a Backstage installation with Service-to-Service authentication enabled, making it particularly useful for developers who want to automate project creation workflows through conversational AI interfaces."
ipfans,postgres-mcp,5,,"This MCP server, developed by ipfans, provides a standardized interface for interacting with PostgreSQL databases. Built with Go and leveraging the Gin web framework, it offers tools for executing read-only SQL queries and exploring database resources. The implementation focuses on simplicity and ease of use, allowing configuration through command-line flags or environment variables. By connecting AI models with PostgreSQL data, this server enables sophisticated querying scenarios, enhancing the ability to analyze and extract information from relational databases. It's particularly useful for applications and AI assistants that require secure, read-only access to PostgreSQL data through a familiar MCP interface."
irahulpandey,mlflowmcpserver,3,,"MLflow MCP Server provides a natural language interface to MLflow tracking servers through the Model Context Protocol. It exposes core MLflow functionality as standardized tools that AI assistants can use to query and manage machine learning experiments and models. The server connects to a local MLflow instance and offers tools for listing registered models, exploring experiments, retrieving detailed model information, and checking system status - making it valuable for data scientists who want to interact with their MLflow environment using conversational AI rather than programming interfaces."
irahulpandey,promptlab,3,,"PromptLab transforms basic user queries into optimized prompts for AI systems by automatically detecting content type and applying tailored templates from a YAML-based system. The server implementation uses FastMCP to expose specialized tools for generating enhanced prompts across four categories: essays, emails, technical explanations, and creative writing. With its modular architecture, PromptLab enables non-technical users to create and manage prompt templates, ultimately producing higher-quality AI responses through better-structured inputs."
isaacgounton,brave-search-mcp-sse,0,,"Brave Search MCP with SSE provides real-time search capabilities through the Brave Search API, delivering results via Server-Sent Events (SSE) for immediate display. Built by Isaac Gounton, it exposes both a standard MCP tool interface for web searches and a dedicated SSE endpoint that maintains persistent connections with clients, broadcasting search results as they arrive. The implementation is containerized with Docker, configured through environment variables, and designed for easy deployment to Coolify. This server is particularly valuable for applications requiring live search results without polling, such as real-time monitoring dashboards or collaborative search interfaces."
isaacgounton,sqlite-mcp-server,0,,"SQLite MCP Server provides a lightweight database management solution using SQLite, offering standardized tools for SQL operations, table management, and business insights tracking. Built with TypeScript and Docker support, it enables easy database interactions through a simple interface, with specific focus on in-memory and configurable database storage. Particularly useful for applications requiring quick, embedded database operations with minimal setup complexity."
isaacphi,mcp-filesystem,0,,"MCP-Filesystem provides a Go-based server that exposes a local filesystem as resources to Claude, enabling AI assistants to browse, read, and monitor files in real-time. The implementation watches for file changes using fsnotify, respects .gitignore patterns, handles various text encodings, and automatically registers existing files at startup. It includes features like parent process monitoring for clean shutdown, efficient resource management, and debug logging options. This tool is particularly valuable for workflows that require Claude to analyze codebases, documentation, or any file-based content without manually uploading each file."
isaacphi,mcp-gdrive,72,3320,"This Google Drive MCP server, developed by Phil Isaac, enables seamless integration of Google Drive and Sheets functionality into AI-assisted workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for accessing and manipulating Google Drive files and Sheets data through Claude Desktop and compatible MCP clients. The implementation supports file listing, reading, and writing operations, as well as specialized tools for interacting with Google Sheets. It's particularly useful for developers and businesses looking to incorporate on-demand access to cloud-stored documents and spreadsheets into their AI-assisted applications, allowing for dynamic querying and manipulation of Google Drive content."
isaacwasserman,mcp_cube_server,4,,"This MCP server, developed by Isaac Wasserman, interfaces with Cube.dev's REST API to enable AI agents to interact with semantic data layers. Built with Python and utilizing the Model Context Protocol SDK, it provides tools for querying and describing data available in Cube deployments. The implementation focuses on simplifying access to complex data structures, offering functionality to read data and retrieve metadata. It's particularly useful for organizations looking to leverage their existing Cube semantic layers with AI agents, enabling use cases such as automated data analysis, natural language querying of business metrics, and AI-assisted data exploration without directly dealing with Cube's API complexities."
isaacwasserman,mcp-langchain-ts-client,28,2075,"This LangChain.js client for Model Context Protocol, developed by Isaac Wasserman, provides a TypeScript port of the original Python implementation. It enables seamless integration of MCP tools with LangChain.js workflows, allowing developers to leverage MCP's capabilities within JavaScript and TypeScript environments. The client initializes an MCP toolkit, extracts LangChain-compatible tools, and facilitates their use with LangChain agents. By bridging MCP and LangChain.js, this implementation expands the ecosystem of AI tools available to JavaScript developers, enabling the creation of more powerful and flexible AI applications. It is particularly useful for building chatbots, question-answering systems, and other AI-powered applications that require access to external tools and APIs within a JavaScript runtime."
isaacwasserman,mcp-snowflake-server,45,,"This MCP server, developed by Isaac Wasserman, enables AI assistants like Claude to interact with Snowflake databases. Built in Python, it provides capabilities for executing SQL queries, managing database schema, and maintaining a dynamic insights memo. The implementation stands out by offering a standardized interface to Snowflake's powerful data warehousing capabilities, allowing AI systems to analyze and manipulate large-scale datasets. By connecting AI capabilities with enterprise data infrastructure, this server enables AI assistants to perform complex data analysis, generate insights, and interact with business intelligence workflows. It is particularly useful for data exploration tasks, automated reporting, and building AI-powered analytics tools that can leverage the full power of Snowflake's cloud data platform."
isaacwasserman,mcp-vegalite-server,52,,"This MCP server, developed by Isaac Wasserman, enables AI assistants like Claude to create data visualizations using Vega-Lite syntax. Built in Python, it provides two core functions: saving data tables and generating visualizations from that data. The implementation stands out by leveraging the expressive power of Vega-Lite for creating a wide range of chart types. By connecting AI capabilities with data visualization, this server enables AI systems to analyze and present data visually. It is particularly useful for scenarios like exploratory data analysis, creating reports with charts, and building AI assistants that can generate insightful data visualizations on demand."
iskakaushik,mcp-clickhouse,3,,"This ClickHouse MCP server, developed by iskakaushik, provides a standardized interface for interacting with ClickHouse databases. Built with Python and leveraging the Model Context Protocol, it offers tools for executing SQL queries, listing databases, and enumerating tables. The server implements read-only query execution for safety and uses environment variables for configuration. By abstracting the complexities of ClickHouse's API, it enables AI systems to easily query and analyze large datasets stored in ClickHouse. This implementation is particularly valuable for applications requiring fast analytical processing, facilitating use cases such as real-time data exploration, log analysis, and large-scale reporting on time-series or event data."
clickhouse,mcp-clickhouse,160,,"This MCP server integrates with ClickHouse, providing a bridge between MCP and ClickHouse's powerful analytical database capabilities. Developed by iskakaushik, it enables seamless interaction with ClickHouse features like executing SQL queries, listing databases, and retrieving table information through the MCP protocol. The implementation is built using Python 3.13+ and leverages libraries like FastMCP and clickhouse-connect for MCP and ClickHouse compatibility respectively. It's designed for data analysts and engineers who want to incorporate AI assistance into their ClickHouse workflows, allowing for natural language queries and exploration of large datasets while maintaining read-only safeguards."
islem-zaraa,mcp-powerpoint,4,706,"An MCP server that enables AI assistants to create and manipulate PowerPoint presentations programmatically. Built by islem-zaraa, this plugin provides functions for creating new presentations, adding slides with formatted content, reading presentation metadata, exporting to PDF, and retrieving slide information. The implementation uses pptxgenjs and officegen libraries to handle the PowerPoint file operations, and can be deployed as a standalone server, integrated into existing MCP systems, or used directly as a command-line tool. It's particularly useful for scenarios where AI assistants need to generate presentation materials or modify existing slide decks without requiring manual PowerPoint interaction."
karthikkrs,isms-mcp-project,0,,"An Information Security Management System (ISMS) MCP server that provides AI-powered tools for risk analysis, policy management, and incident response. Built with FastAPI and SQLAlchemy, it integrates Mistral AI and Qdrant for intelligent security workflows, enabling automated risk assessment, policy suggestion updates, and contextual incident guidance across different security domains."
mottibec,israeli-bank-mcp,12,,"Israeli Bank MCP is a TypeScript server that connects AI assistants to Israeli banking data through the Model Context Protocol. It leverages the israeli-bank-scrapers library to provide secure access to transactions from all major Israeli banks and credit card companies. The server offers three main functionalities: listing available banks with their required credentials, fetching account transactions with flexible date ranges, and handling two-factor authentication. This implementation is particularly useful for financial analysis, expense tracking, and automated financial management across multiple Israeli financial institutions."
it-beard,tavily-server,6,,"This Tavily MCP server, developed by the Tavily MCP Server Contributors, integrates Tavily's AI-powered search capabilities into MCP-compatible workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a streamlined interface for performing web searches through Claude Desktop and other MCP clients. The implementation offers both basic and advanced search depths, result caching, and persistent storage of search history. It stands out by providing AI-generated summaries alongside traditional search results. This server is particularly useful for AI assistants and developers looking to incorporate up-to-date web information into their applications, enabling natural language-driven research and information retrieval."
i-tozer,excalidraw-mcp,14,,"The Excalidraw MCP server provides AI assistants with direct access to create, manage, and export Excalidraw drawings through a set of specialized tools. Built with TypeScript using the Model Context Protocol SDK, it offers eight core tools for creating, retrieving, updating, deleting, and listing drawings, as well as exporting them to SVG, PNG, and JSON formats. The implementation features persistent storage of drawings, comprehensive error handling, and Docker containerization for easy deployment. This server is particularly valuable for workflows requiring diagramming capabilities within AI assistant conversations, allowing users to create and manipulate visual content without leaving their conversational interface."
itsanishjain,alchemy-sdk-mcp,0,,"This MCP server implementation provides integration with the Alchemy SDK, enabling blockchain and NFT operations. It offers a range of tools including retrieving NFT metadata, fetching token balances, and querying blockchain data. The server is built using TypeScript and leverages the @modelcontextprotocol/sdk for MCP compatibility. It's particularly useful for applications requiring blockchain data access and NFT-related functionalities within an MCP framework."
itsdarianngo,mcp-server-litellm,4,,"This LiteLLM MCP server integrates the LiteLLM library to provide a standardized interface for AI assistants to interact with OpenAI language models. Built using Python and leveraging libraries like Pydantic and FastAPI, it abstracts the complexities of the OpenAI API, handling authentication, request formatting, and response parsing. The server offers text completion capabilities with customizable parameters, enabling AI systems to generate human-like text across various applications. It's designed for developers and researchers who need flexible access to state-of-the-art language models, facilitating use cases such as chatbots, content generation, and natural language processing tasks. The implementation's focus on LiteLLM allows for potential future expansion to support additional model providers beyond OpenAI."
itsdarianngo,mcp-vercel-ai,5,,"This OpenAI and Mistral MCP server implementation leverages the Vercel AI SDK to provide a unified interface for interacting with multiple AI models. It supports OpenAI's GPT-4 and GPT-3.5 series, as well as Mistral's large and small models, offering features like structured output, system prompts, and safe prompts. Built with TypeScript and designed for Node.js environments, this server stands out by combining two leading AI providers in a single, easy-to-use package. It's particularly useful for developers looking to integrate advanced language models into their applications, enabling seamless switching between providers and models to suit different use cases, from content generation to complex reasoning tasks."
itseasy21,mcp-knowledge-graph,34,5363,"Knowledge Graph Memory Server provides persistent memory for Claude through a local knowledge graph, allowing the AI to remember information across conversations. Developed by itseasy21 as a fork of the original Memory Server, it stores data as entities with observations and relations between them, enabling structured information retrieval and complex knowledge representation. The implementation supports customizable memory paths, cross-platform compatibility, and offers a comprehensive API for creating, updating, and querying graph elements, making it ideal for personalized chat experiences where context retention is essential."
itworkonline,googlecalendarmcp,0,,"GoogleCalendarMCP provides a bridge between AI assistants and Google Calendar, enabling event creation with customizable parameters including time, description, location, attendees, and timezone. The implementation uses FastMCP to expose a tool that authenticates with Google's OAuth flow, handles credential management, and interacts with the Google Calendar API to create events. Particularly valuable for users who want to schedule meetings or appointments directly through their AI assistant without switching contexts."
iuill,mcp_grareco,0,,"MCP_GraReco is a server that provides AI assistants with grammar recommendation capabilities through the Anthropic Claude API. Built with TypeScript and Express, it processes text inputs using specialized prompts (elementary, standard, and timeline) to generate grammar corrections and recommendations. The server implements Server-Sent Events (SSE) for real-time communication, containerizes the application with Docker for easy deployment, and includes configurable parameters for the Anthropic model. This implementation is particularly valuable for users who need grammar assistance without leaving their AI assistant interface."
ivarvd-hldng,pdf-generator-mcp-server,1,,"This PDF generator MCP server combines PDFKit and Puppeteer to offer versatile PDF creation capabilities for AI assistants. It provides a streamlined interface for generating PDFs from various sources, including HTML content and programmatically defined layouts. The server abstracts away the complexities of PDF generation, allowing AI systems to create documents, reports, or web page snapshots without direct interaction with the underlying libraries. By integrating both PDFKit for fine-grained control and Puppeteer for web-based content, this implementation offers flexibility for a wide range of PDF generation use cases, from creating dynamic reports to archiving web content in PDF format."
ivarvd-hldng,isoplanner-mcp-server,0,,"This MCP server, developed by ivarvd-hldng, provides integration with the ISOPlanner API for AI assistants. It leverages Express.js to create a RESTful interface, enabling functionalities like retrieving planning data and managing ISO-related tasks. The server uses environment variables for configuration, allowing easy deployment across different environments. By abstracting ISOPlanner interactions, it enables AI systems to incorporate ISO planning capabilities into their workflows. This implementation is particularly useful for organizations dealing with ISO standards, quality management professionals, and developers building AI-powered tools for compliance and process management."
ivlad003,mcp_newrelic,7,,"This New Relic MCP server provides a bridge between AI assistants and New Relic's log querying capabilities. Built with Python and leveraging libraries like httpx and FastMCP, it offers a tool for executing NRQL queries against New Relic logs. The implementation focuses on simplifying interactions with New Relic's GraphQL API, making it accessible for AI models to analyze application logs and metrics. It's particularly useful for tasks like performance monitoring, error tracking, or generating insights from log data, enabling assistants to query New Relic logs without requiring deep knowledge of the underlying API complexities."
ivo-toby,contentful-mcp,27,3867,"This MCP server, developed by ivo-toby, integrates with Contentful's Content Management API to enable AI assistants to manage content across spaces and environments. It provides tools for CRUD operations on entries and assets, content type management, localization support, and publishing workflows. The implementation offers a visual inspector for debugging and testing. By connecting AI capabilities with Contentful's headless CMS, this server empowers AI systems to handle complex content management tasks. It is particularly useful for applications in content creation, website management, or any scenario where an AI assistant needs to work with structured content in a headless CMS."
ivo-toby,mcp-openapi-server,62,,"This OpenAPI MCP server, developed by Ivo Toby, enables AI assistants to interact with REST APIs defined by OpenAPI specifications. It integrates with the Model Context Protocol SDK to expose OpenAPI endpoints as MCP resources, allowing AI systems to discover and utilize a wide range of web services. Built with TypeScript and leveraging esbuild for bundling, it implements automatic resource generation from OpenAPI specs and handles authentication through configurable headers. The server is designed for flexibility, supporting various API configurations through environment variables or command-line arguments. It's particularly useful for developers and AI researchers looking to incorporate diverse API functionalities into their AI assistants, enabling use cases like data retrieval, third-party service integration, and dynamic API exploration."
iwark,linear-mcp-server,1,,"This Linear MCP server, developed by Iwark, provides a standardized interface for interacting with the Linear issue tracking system. Built with Node.js and leveraging the Linear SDK, it offers tools for creating and searching issues, as well as reading various Linear resources. The implementation focuses on efficient query parsing, rate limiting, and error handling, enabling AI models to manage projects and issues effectively. By connecting AI assistants with Linear's project management capabilities, this server facilitates sophisticated task management scenarios, enhancing the ability to create, track, and analyze issues programmatically. It's particularly useful for teams seeking to integrate AI-powered project management into their Linear workflows."
ixe1,code-scanner-server,1,,"Code Scanner Server is a versatile tool that analyzes source code to extract structural information like classes, functions, and variables across multiple programming languages (JavaScript, TypeScript, C#, PHP, Python, and CSS). It operates both as a CLI tool and an MCP server, respecting .gitignore rules while providing detailed output in XML, Markdown, or JSON formats. The implementation leverages Tree-sitter for robust parsing and offers flexible filtering options by definition type, modifiers, name patterns, and file paths, making it valuable for code exploration, documentation generation, and providing context to AI assistants about codebases."
izaitsevfb,claude-pytorch-treehugger,0,,"This PyTorch HUD API implementation provides a Python library and MCP server for accessing PyTorch's CI/CD analytics data, enabling developers to investigate build failures and trunk health issues. Built with FastMCP, it offers tools for retrieving workflow and job information, analyzing large log files efficiently, executing ClickHouse queries against CI metrics, and monitoring resource utilization. The server exposes both synchronous and asynchronous functions through a standardized interface, making it valuable for PyTorch contributors debugging CI failures, investigating test flakiness, or analyzing performance trends across the CI infrastructure."
izumisy,mcp-duckdb-memory-server,20,,"This MCP server implementation provides a pluggable knowledge graph memory server, forked from the official version. It maintains the same interfaces as the original while offering enhanced flexibility through its pluggable architecture. The implementation is built using TypeScript and includes configuration for building, testing, and packaging the server. It's designed for use cases requiring customizable knowledge graph storage and retrieval within MCP-compatible systems."
j3k0,mcp-brain-tools,6,,"This Elasticsearch-based knowledge graph implementation for MCP replaces the previous JSON file-based approach with a scalable, performant solution. It provides distributed storage for entities and relations, advanced search capabilities with fuzzy matching and relevancy ranking, and complete CRUD operations. The system tracks access patterns to prioritize recently viewed and important entities, simulating memory-like behavior where important, recent, and frequently accessed information rises to the top. Built with TypeScript and the Elasticsearch client, it includes tools for migration, management, and maintenance through a comprehensive admin CLI."
j3k0,mcp-google-workspace,7,,"This MCP server implementation integrates Google Workspace APIs, enabling AI assistants to interact with Google services like Gmail, Calendar, and Drive. It provides a bridge for performing common tasks such as sending emails, scheduling meetings, and managing documents through MCP-compatible clients. The server is designed to enhance productivity by allowing AI systems to seamlessly access and manipulate Google Workspace data on behalf of users."
j5ik2o,shared-knowledge-mcp,3,,"Shared Knowledge MCP Server enables AI assistants to access and retrieve information from various vector stores, supporting RAG (Retrieval Augmented Generation) workflows. The implementation supports multiple vector store backends including HNSWLib, Weaviate, and others, with a flexible architecture that allows easy switching between them through environment variables. Built with TypeScript and LangChain, it provides a unified interface for knowledge retrieval regardless of the underlying storage technology, making it particularly valuable for applications that need to augment AI responses with domain-specific knowledge without requiring complex integration work for each vector database type."
jaacob,perplexity-mcp,2,,"This MCP server, developed by jaacob, provides web search capabilities using Perplexity's API. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants like Claude to perform real-time web searches and retrieve up-to-date information. The implementation focuses on simplicity and ease of use, with configurable model options for different search needs. It's particularly useful for enhancing AI conversations with current data, enabling use cases such as answering queries about recent events, fact-checking, and providing context-aware responses without requiring direct web access."
jacck,mcp-reasoner,162,,"This MCP reasoner, developed by Jacck, provides a systematic approach to problem-solving using beam search and thought evaluation. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers capabilities for exploring multiple solution paths, scoring thoughts, and managing tree-based reasoning states. The reasoner implements a configurable beam width, depth-limited search, and statistical analysis of the reasoning process. It's designed for tackling complex problems that require step-by-step analysis, such as mathematical puzzles, logical deductions, and multi-stage planning tasks. This implementation is particularly valuable for enhancing AI assistants' problem-solving abilities in scenarios requiring structured thinking and exploration of multiple solution strategies."
jacck,mcp-ortools,9,,"This MCP server implementation, developed by Jacck, integrates Google's OR-Tools constraint programming solver with Large Language Models. It enables AI models to submit, validate, and solve constraint satisfaction and optimization problems using a standardized JSON-based model specification. The server supports integer and boolean variables, linear constraints using OR-Tools method syntax, and linear optimization objectives. It's designed for use with Claude Desktop and can handle a variety of problem types including portfolio selection and knapsack problems. This implementation is particularly useful for AI-assisted decision making in logistics, resource allocation, and operations research, where complex constraints need to be modeled and solved efficiently."
jacepark12,ticktick-mcp,20,,"TickTick MCP Server provides integration with the TickTick task management API, enabling AI assistants to create, read, update, and delete tasks and projects. The implementation handles OAuth2 authentication flow with automatic token refresh, securely storing credentials in environment variables. Built by Jaesung Park, it features a comprehensive client that abstracts away API complexities and includes a CLI utility for easy authentication setup. This server is ideal for productivity workflows that need to programmatically manage tasks, track projects, or automate task creation based on AI-generated content."
jackkuo666,biorxiv-mcp-server,9,,"This MCP server provides a specialized interface for searching and retrieving scientific articles from bioRxiv, a popular preprint server for biological sciences. Built with Python using the FastMCP framework, it offers three main tools: keyword-based searching, advanced searching with multiple parameters (including author, date range, and section filters), and metadata retrieval using DOIs. The implementation handles asynchronous processing through asyncio and includes comprehensive error handling and logging, making it particularly useful for researchers, AI assistants, and applications that need programmatic access to the latest biological research preprints."
jackkuo666,medrxiv-mcp-server,2,,"This MCP server provides a specialized interface for searching and retrieving medical research articles from medRxiv, a preprint server for health sciences. Built with Python using the FastMCP framework, it offers three main tools: keyword-based article searching, advanced searching with multiple parameters (including author, date range, and section filters), and metadata retrieval using DOIs. The implementation handles asynchronous processing through asyncio and includes comprehensive error handling and logging, making it particularly useful for AI assistants and researchers needing to access up-to-date medical research without leaving their workflow."
jackkuo666,pubmed-mcp-server,8,,"PubMed-MCP-Server provides a bridge between AI assistants and PubMed, enabling search and analysis of medical research articles. The server exposes tools for keyword searching, advanced filtering by author/date/journal, retrieving article metadata by PMID, downloading full-text PDFs, and performing structured analysis of papers. Built with FastMCP and asynchronous processing, it handles requests efficiently while providing detailed logging, making it valuable for researchers, medical professionals, and academics who need to access scientific literature without leaving their AI assistant conversation."
jackkuo666,semanticscholar-mcp-server,3,,"Semantic Scholar MCP Server provides a bridge between AI assistants and the Semantic Scholar academic research database, enabling paper searches, retrieval of paper/author details, and analysis of citations and references. Built with FastMCP and asynchronous processing, it exposes tools for querying papers by keyword, accessing detailed metadata about specific papers and authors, and exploring citation networks. This implementation is particularly valuable for researchers and academics who need to search and analyze scientific literature without leaving their AI assistant interface."
jacklandis29,codechecker-mcp,2,,"CodeChecker MCP is a code review tool designed for integration with Cursor IDE, leveraging OpenAI's GPT models for intelligent code analysis. Developed by Jack Landis, it offers real-time code review capabilities, supporting both SSE and stdio transport modes. The server analyzes code snippets against provided context, offering specific improvement suggestions and determining if the code meets stated goals. It's particularly useful for developers seeking AI-assisted code reviews within their IDE workflow."
jackmuva,mcp-actionkit,1,,"ActionKit MCP server enables Claude Desktop to interact with Slack through ActionKit's API. Built with TypeScript and JWT authentication, it filters available actions to Slack-specific tools and handles user authentication through the Paragon Connect Portal. This implementation is particularly valuable for users who want to automate Slack operations directly through Claude without managing separate API credentials."
jacksteamdev,obsidian-mcp-tools,98,,"This Obsidian MCP tools collection, developed by 2XR, provides a set of Model Context Protocol utilities tailored for integration with the Obsidian note-taking application. Built using TypeScript and leveraging modern JavaScript features, it offers a modular structure with workspaces for different tools. The implementation focuses on enhancing Obsidian's capabilities through AI-powered functionalities, potentially including features like intelligent note linking, content generation, or knowledge graph analysis. By bridging Obsidian's powerful note organization system with MCP's standardized AI communication, this toolkit enables users to augment their personal knowledge management workflows with advanced AI assistance. It is particularly suited for researchers, writers, and knowledge workers looking to leverage AI within their existing Obsidian setups for tasks such as information synthesis, idea generation, and content organization."
jacksteamdev,mcp-sqlite-bun-server,14,,"This SQLite MCP server, developed using Bun and TypeScript, provides AI assistants with database interaction and business intelligence capabilities. It offers tools for executing SQL queries, analyzing business data, and automatically generating insights. The server integrates with Claude Desktop, leveraging a custom setup script for easy configuration. It features a dynamic resource for storing business insights, a guided demo prompt for interactive analysis, and six core tools for database operations and insight management. This implementation is particularly suited for AI-assisted business analysis, data exploration, and automated report generation, enabling use cases such as market trend analysis, performance metric tracking, and data-driven decision support."
jacobgoren-sb,workato-mcp-server,0,,"Workato MCP Server provides a bridge between Claude and the Workato automation platform API, enabling AI assistants to manage integration recipes, connections, and workflows. Built with TypeScript, it implements over 20 tools for operations like listing and creating recipes, managing connections, organizing folders, monitoring jobs, and working with tags. The server authenticates with Workato using an API token and transforms all responses into a consistent format, making it ideal for automating integration workflows, monitoring recipe execution, and managing integration assets directly from AI conversations without switching contexts."
jae-jae,fetcher-mcp,575,13740,"Fetcher MCP is a server that enables AI assistants to retrieve web page content using Playwright's headless browser capabilities. It excels at handling dynamic JavaScript-heavy websites by executing client-side code, and includes intelligent content extraction through Mozilla's Readability algorithm to remove ads and non-essential elements. The implementation offers both single URL and batch fetching tools, supports HTML or Markdown output formats, and automatically blocks unnecessary resources like images and stylesheets to improve performance. This tool is particularly valuable for research workflows, content analysis, and information gathering that requires processing of modern web applications."
jae-jae,g-search-mcp,69,2339,"G-Search MCP is a powerful server for performing parallel Google searches with multiple keywords simultaneously, using Playwright to automate browser interactions. Developed by jae-jae, it features intelligent CAPTCHA detection with automatic switching to visible browser mode when verification is needed, browser state persistence to reduce detection likelihood, and user behavior simulation to mimic real browsing patterns. The implementation includes robust error handling, configurable search parameters (result limits, timeouts, locales), and returns structured JSON results, making it ideal for applications requiring efficient batch searching or when AI assistants need direct access to search engine results without triggering anti-bot measures."
jagan-shanmugam,climatiq-mcp-server,1,,"Climatiq MCP Server provides a bridge to the Climatiq API for calculating carbon emissions across various domains like electricity usage, travel, cloud computing, and procurement. Built by Jagan Shanmugam, it exposes a rich set of tools that enable AI assistants to perform precise carbon footprint calculations using detailed emission factors from the Climatiq database. The implementation is particularly valuable for organizations and individuals seeking to understand and quantify their environmental impact through standardized, data-driven carbon measurement."
jagreetdg,re-stack-mcp,1,,"Stack Exchange MCP Server provides a bridge between AI assistants and Stack Exchange sites like StackOverflow, enabling search and retrieval of questions, answers, and tags. The server implements caching to reduce API calls, formats content for LLM consumption, and handles rate limiting to stay within Stack Exchange API constraints. It exposes endpoints for searching questions, retrieving question details with answers, listing available Stack Exchange sites, and fetching popular tags, making it valuable for developers seeking programming help or technical information without leaving their AI assistant interface."
jaho5,json-schema-mcp,0,,"This JSON Schema MCP Server manages JSON schemas and generates instances from them, providing a structured way to create, store, and retrieve schemas with custom properties. Built with FastMCP, it offers resources for accessing specific schemas by ID and listing all available schemas, along with tools for creating new schemas with customizable properties and generating JSON instances with default or user-provided values. The implementation stores schemas as JSON files with unique IDs, making it ideal for applications that need to maintain consistent data structures or generate template-based JSON documents."
jakedahn,deno2-playwright-mcp-server,11,,"This Playwright-based MCP server, developed by Jake Dahn, provides browser automation capabilities for AI assistants. It integrates with the Playwright library to offer tools for web navigation, interaction, and data extraction. The server exposes functions like page navigation, element clicking, form filling, and JavaScript execution as MCP tools. By connecting AI capabilities with browser automation, this implementation enables assistants to perform web-based tasks, gather information from websites, and interact with web applications. It is particularly useful for applications requiring web scraping, automated testing, or any scenario where an AI system needs to navigate and interact with web content programmatically."
jake-mok-nelson,mcp-find-similar-github-issues,1,,"This MCP server implementation provides a tool for support engineers to find similar GitHub issues, aiding in faster troubleshooting. Developed by Jake Nelson, it integrates with the GitHub API to search for and compare issues based on their descriptions. The server uses a simple Jaccard similarity coefficient for text comparison, with a note that more sophisticated NLP techniques could be implemented for production use. It's particularly useful for streamlining support workflows and reducing response times in GitHub-based project management."
jakenuts,mcp-cli-exec,1,1567,"This MCP server implementation provides powerful CLI command execution capabilities, enabling structured output for shell commands. Developed by Model Context Protocol, it offers tools for executing raw and chained commands in specific working directories, with features like timeout handling, ANSI code stripping, and comprehensive error management. The server is designed for use cases requiring programmatic access to shell operations, such as automated system administration, DevOps workflows, or integrating command-line tools into AI-assisted processes."
jakenuts,mcp-solarwinds,0,1999,"This MCP server implementation provides integration with SolarWinds Observability logs. Developed by jakenuts, it offers tools for searching and visualizing log data, including advanced filtering options and customizable time ranges. The server is designed to facilitate log analysis and monitoring within the MCP ecosystem, making it particularly useful for DevOps and IT operations teams working with SolarWinds Observability."
0xjmp,mcp-tradovate,3,,"Tradovate MCP server provides a robust trading API integration, enabling programmatic access to market data, order management, and account operations through a standardized JSON-RPC interface. Built by Jake Peterson, the implementation supports key trading functions like authentication, retrieving market quotes, placing/canceling orders, and managing risk limits. Particularly useful for algorithmic traders and financial applications seeking direct, type-safe interaction with the Tradovate platform."
jakeyshakey,umami_mcp_server,5,,"This MCP server implementation provides a bridge to Umami analytics data, enabling AI assistants to analyze website performance and user behavior. Developed by jakeyShakey, it offers tools for retrieving website statistics, metrics, pageview data, and user session information. The server integrates with the Umami API and incorporates semantic search capabilities for efficient analysis of user journeys. It also features web crawling functionality to capture screenshots and HTML source code of webpages. Built with Python and designed for easy setup within Claude Desktop, this implementation is particularly useful for generating data-driven insights, creating custom analytics dashboards, and improving website performance based on user interaction patterns."
jaldekoa,mcp-fredapi,2,,"MCP-FREDAPI provides a bridge to the Federal Reserve Economic Data (FRED) API, enabling AI assistants to retrieve economic data series observations with customizable parameters. Built with Python using FastMCP, this implementation by Jon Aldekoa allows querying time series data with options for date ranges, frequency aggregation, data transformations, and output formatting. The server handles API key management through environment variables and offers robust error handling for failed requests. It's particularly useful for economic analysis, financial research, and data visualization applications that require access to official U.S. economic indicators and historical data."
jamcam-me,claude-mcp,1,,"This MCP server implementation provides tools for interacting with GitHub, Brave Search, and local filesystems. It offers capabilities such as fetching GitHub repositories and user information, performing web searches, and reading/writing files. Built with Express.js, the server exposes RESTful APIs for each service, enabling AI assistants to access external data sources and perform file operations. Useful for tasks like code analysis, web research, and document management."
james2037,mcp-gatherer,0,,"This Magic: The Gathering MCP server, developed by james2037, provides a robust interface for accessing card data, rules, and set information. Built with PHP and leveraging the MTG SDK, it offers tools for card searches, detailed card information retrieval, and access to comprehensive rules. The implementation stands out by combining multiple MTG data sources into a unified MCP interface, making it ideal for AI assistants or applications needing quick access to MTG information. It's particularly useful for tasks like deck building, rules clarification, or card analysis, enabling programmatic access to MTG data without requiring deep knowledge of individual APIs or data sources."
jameskanyiri,darajamcp,7,,"DarajaMCP provides a bridge to the Safaricom M-Pesa mobile payment API, enabling AI assistants to initiate STK Push transactions directly from conversations. Built on FastMCP, it handles authentication with the Daraja API and manages the complete payment flow, from generating access tokens to processing transaction requests. The implementation is particularly valuable for applications requiring seamless mobile payment integration in Kenya, allowing users to authorize payments on their mobile devices without leaving their conversation with an AI assistant."
jamesmontemagno,monkeymcp,23,,"MonkeyMCP is a .NET 9.0 server implementation that provides access to monkey data through a simple API. It features two main tools: GetMonkeys for retrieving a complete list of monkeys and GetMonkey for finding specific monkeys by name. The implementation uses System.Text.Json for serialization and includes a caching mechanism for improved performance. Built with Microsoft.Extensions.Hosting, it demonstrates how to create custom MCP tools with proper documentation and dependency injection, making it ideal for developers looking to build their own MCP servers or integrate monkey data into AI assistants."
jamiesonio,defectdojo-mcp,1,1518,"DefectDojo MCP server provides a bridge to the DefectDojo vulnerability management system, enabling AI assistants to interact with security findings, products, and engagements. Developed by jamiesonio, this implementation offers tools for retrieving, searching, and updating vulnerability data through an asynchronous HTTP client that handles authentication and error management. The server exposes specialized functions for managing security findings (including status updates and note addition), listing products, and handling engagement lifecycle operations. Built with Python 3.12 and the FastMCP framework, it's particularly valuable for security teams who want to integrate vulnerability management workflows into their AI assistant interactions."
javascript,mcp-server,175,3423,"foreverVM provides an API for running arbitrary, stateful Python code securely.

The core concepts in foreverVM are machines and instructions.

Machines represent a stateful Python process. You interact with a machine by running instructions (Python statements and expressions) on it, and receiving the results. A machine processes one instruction at a time."
jango-blockchained,advanced-homeassistant-mcp,14,,"This Home Assistant MCP integration, developed by Jango Blockchained, enables seamless interaction between large language models and smart home devices through the Home Assistant platform. It leverages the @digital-alchemy libraries and LiteMCP to provide a robust, TypeScript-based implementation that adheres to the Model Context Protocol. The integration supports real-time communication with Home Assistant via WebSocket, allowing for dynamic querying and control of smart home devices. It's designed for AI assistants and developers looking to incorporate smart home automation into their language model applications, offering a bridge between natural language processing and IoT device management."
needle-ai,needle-mcp,34,,"This Needle MCP integration, developed by Jan Heimes, provides a bridge between the Needle AI platform and MCP (Machine Comprehension Protocol) servers. Built using Python, it leverages the needle-python and mcp libraries to enable seamless communication between Needle's AI capabilities and standardized MCP endpoints. The integration supports environment variable configuration via python-dotenv for flexible deployment. By abstracting the complexities of API interactions, it allows developers to easily incorporate Needle's AI functionalities into MCP-compatible systems. This implementation is particularly useful for projects requiring advanced natural language processing, machine learning, or AI-driven decision making within an MCP framework, enabling use cases such as intelligent chatbots, automated content generation, or AI-assisted data analysis."
jantoniucci,mcp-tiggerbeetle,0,,"A Model Context Protocol server providing TigerBeetle account management capabilities for AI assistants. Built with Spring Boot, it enables creating and configuring TigerBeetle accounts with detailed parameters through a simple interface. The server integrates directly with Claude desktop through a stdio-based connection, making it valuable for financial applications that need to interact with TigerBeetle's high-performance accounting database without leaving the conversation interface."
janvarev,mcp-vsepgt-server,3,,"This MCP server implementation provides image generation capabilities through the VseGPT API. It offers a single tool function that accepts English-language prompts and returns local file paths to the generated images. The server handles API authentication, makes requests to the VseGPT image generation endpoint, processes the base64-encoded response, and saves the resulting image to a local directory with a timestamp-based filename. Environment variables control the API key, model ID, and image size settings, making it flexible for different deployment scenarios. Ideal for applications needing AI-generated imagery with local storage of results."
janwilmake,image-generation-mcp-cloudflare,2,,"This MCP server implementation provides a bridge to Cloudflare's AI image generation capabilities. Developed by Jan Wilmake, it leverages Cloudflare Workers for serverless deployment and utilizes the workers-mcp package for MCP compatibility. The implementation is designed to be lightweight and efficient, focusing on image generation tasks. It's particularly useful for AI applications that require on-demand image creation, such as content generation tools or visual design assistants. The server uses TypeScript and is configured for easy deployment and development using Wrangler, Cloudflare's command-line tool for Workers."
jaokuohsuan,draw-things-mcp-cursor,8,,"This MCP server implementation provides a bridge between Cursor and the Draw Things API for AI image generation. Developed by James Jao, it converts simple text prompts or JSON inputs from Cursor into proper JSON-RPC requests, handles communication with the Draw Things API, and returns generated images. The implementation includes features like API connection verification, error handling, and automatic image saving, making it useful for integrating AI image generation capabilities into Cursor-based workflows."
mistizz,mcp-japanesetextanalyzer,1,,"A server that provides Japanese text analysis capabilities through morphological parsing using the Kuromoji library. It enables AI assistants to break down Japanese sentences into their component parts, identifying words, their grammatical functions, readings, and base forms. This implementation makes it possible to analyze complex Japanese text structures programmatically through the MCP protocol, making it valuable for language learning applications, translation tools, and natural language processing tasks that require detailed understanding of Japanese grammar and vocabulary."
jasnonaz,vibe-worldbuilding-mcp,2,,"Vibe Worldbuilding MCP provides a structured approach to creating detailed fictional worlds with Claude, complete with automatic image generation capabilities. The implementation guides users through a systematic worldbuilding process—from establishing core concepts to developing taxonomies and detailed entries—while maintaining consistency throughout. Built with Python and integrating Google's Imagen API, it enables users to generate visual representations of their world elements directly from markdown files. The server includes specialized prompts for different worldbuilding stages and offers tools for consistency management, making it ideal for writers, game designers, and worldbuilding enthusiasts who want to develop rich, cohesive fictional universes."
jasondsmith72,cwm-api-gateway-mcp,2,,"ConnectWise API Gateway MCP Server provides a bridge between Claude and the ConnectWise Manage API, enabling efficient API discovery and execution through a SQLite database built from the ConnectWise API definition. Developed by Jason Smith, it features natural language search capabilities, categorized API navigation, and a Fast Memory system that saves frequently used queries for quick retrieval. The server supports both simplified parameter handling and raw API access, making it valuable for IT professionals who need to interact with ConnectWise Manage for service ticket management, company information retrieval, and other ConnectWise operations directly within Claude conversations."
jasonjmcghee,claude-debugs-for-you,280,,"This MCP server and VS Code extension, created by Jason McGhee during a 2-hour hackathon, enables AI models like Claude to interactively debug code and evaluate expressions. Built as a language-agnostic tool, it integrates with VS Code's debugging capabilities and launch configurations. The implementation allows AI assistants to set breakpoints, step through code, and inspect variables in real-time, providing a unique approach to AI-assisted debugging. It's particularly useful for developers seeking AI guidance in troubleshooting complex code issues, understanding program flow, or learning debugging techniques, without requiring the AI to have direct access to the development environment."
jasonjmcghee,webmcp,35,,"WebMCP is a browser extension that implements the Model Context Protocol (MCP) to enable web browsing capabilities for AI assistants. It allows AI models to browse the web, take screenshots, and interact with web content through a secure interface."
jsmiff,mcp,0,,"A lightweight MCP server built with TypeScript and Ollama, providing a flexible framework for AI-powered tools, resources, and prompts. Integrates local text generation and embedding services, with optional Supabase database support, enabling developers to quickly prototype and deploy context-aware AI assistants with modular, extensible components for tasks like search, retrieval, and generative interactions."
jasonsum,gmail-mcp-server,28,,"This Gmail integration leverages the Google API to provide seamless access to Gmail functionality within MCP. It enables operations like sending emails, managing labels, and searching messages programmatically. The implementation is designed for Python 3.12+ and uses modern libraries like httpx for efficient HTTP requests. It's ideal for automating email workflows, building email-based applications, or integrating Gmail capabilities into larger systems that utilize MCP's tool ecosystem."
jason-tan-swe,railway-mcp,24,,"This MCP server implementation provides a bridge to Railway.app, enabling AI assistants to interact with Railway's platform services. Developed by Jason Tan, it utilizes TypeScript and integrates with the Model Context Protocol SDK. The server is designed for use cases requiring Railway.app integration, such as managing deployments, monitoring application performance, or automating DevOps workflows within the Railway ecosystem."
jasperket,clanki,3,,
javader,mcp-sentry-custom,0,2070,"mcp-sentry-custom is a server that connects AI assistants to Sentry.io for error monitoring and debugging. It provides tools to retrieve and analyze specific Sentry issues or list all issues from a project, including detailed stack traces, error frequencies, and timestamps. The implementation supports both official Sentry.io and self-hosted Sentry instances, making it valuable for developers who need to investigate production errors without leaving their AI assistant workflow."
javaprogrammerlb,unsplash-mcp-server,5,,"Unsplash MCP Server provides AI assistants with the ability to search and retrieve images from Unsplash's extensive photo library. Built with Spring Boot and Java, it implements a single tool that queries the Unsplash API with customizable parameters including search terms, pagination, ordering, color filtering, and orientation preferences. The server requires an Unsplash API access key configured as an environment variable and runs as a standalone process that communicates via stdio, making it ideal for enhancing AI conversations with relevant imagery without leaving the chat interface."
javaprogrammerlb,zoom-mcp-server,7,,"A Zoom MCP server that enables AI assistants to create and manage Zoom meetings. Developed by Bill Lau, this TypeScript implementation authenticates with the Zoom API using server-to-server OAuth and provides tools for creating meetings with customizable settings and listing scheduled meetings. The server requires Zoom account credentials (Account ID, Client ID, and Client Secret) and can be deployed as a standalone application or within a Docker container. Ideal for use cases where AI assistants need to schedule video conferences or manage meeting calendars on behalf of users."
javorraca,tidymodels-mcp,1,,"The Tidymodels MCP Server provides tools for working with the tidymodels ecosystem in R, enabling AI assistants to access GitHub repositories under the tidymodels organization. Built by Javier Orraca-Deatcu, it offers five key tools: listing packages, retrieving package details, searching R functions, generating template code for common tasks, and searching issues in repositories. The server integrates with GitHub's API to fetch real-time data while implementing caching for performance, and is designed to work with Cline.bot and Claude Desktop as a local MCP server for data science and machine learning workflows in R."
santos-404,mcp-server.sqlite,6,,"SQLite MCP Server provides a secure interface for AI models to query SQLite databases through the Model Context Protocol. Built with TypeScript, it offers a read_query tool that allows executing SELECT queries on SQLite databases with input validation to prevent SQL injection. The server runs as a Docker container or locally via stdio transport, making it ideal for workflows requiring database access without leaving the conversation interface. The implementation is particularly valuable for analyzing data in SQLite databases directly within AI assistant conversations."
jay4242,goose_mcp,5,,"Goose MCP is a collection of MCP servers designed to extend the capabilities of the Goose AI assistant. It includes five specialized servers: mcp_plex for interacting with Plex Media Server, mcp_rt for scraping movie information from Rotten Tomatoes, mcp_sales_history for fetching eBay sales data, mcp_searxng_search for web searches via SearxNG instances, and mcp_taskwarrior for task management. Each server is built using FastMCP, requires Python 3.10+ with UV package management, and is designed to be easily integrated into Goose through its extension system, enabling users to access external services and data sources directly within their AI assistant conversations."
jay4242,mcp_searxng_search,0,,"MCP SearxNG Search provides a server that enables AI assistants to perform web searches through a SearxNG instance. Built with FastMCP, it exposes a single tool that queries a user-specified SearxNG server and returns structured search results containing titles, URLs, and content snippets. The implementation requires only setting a SearxNG base URL environment variable and is designed for easy integration with Goose via StandardIO extensions, making it valuable for workflows requiring private or customized web search capabilities without leaving the conversation interface."
thirdstrandstudio,mcp-figma,20,648,"MCP Figma Server provides a complete interface to the Figma API through the Model Context Protocol, enabling AI assistants to interact with Figma designs, files, and team resources. Built by JayArrowz, it implements all Figma API methods as MCP tools, including file operations, comment management, component handling, and webhook interactions. The server authenticates with Figma using an API token that can be provided via environment variables or command-line arguments, making it easy to integrate with Claude Desktop. Particularly valuable for designers and developers who need to analyze, discuss, or manipulate Figma designs directly within their AI assistant conversations."
thirdstrandstudio,mcp-xpath,0,614,"XPath MCP Server enables Claude to execute XPath queries on XML and HTML content, supporting both direct content parsing and web scraping capabilities. Built by JayArrowz, it provides two main tools: 'xpath' for querying XML strings directly and 'xpathwithurl' for fetching and querying content from URLs using Puppeteer. The implementation handles various node types and error cases gracefully, making it valuable for data extraction workflows that require structured information from XML documents or web pages without leaving the conversation interface."
jayli52,api2mcptools,2,585,"API2MCPTools is a Node.js-based server that converts JSON API definitions into Model Context Protocol tools, enabling AI assistants to interact with external APIs through a standardized interface. Developed by JayLi52, this implementation uses TypeScript and the MCP SDK to dynamically load and manage tool definitions from a tools.json file, making it easy to add new API integrations without modifying the core codebase. The server includes a setup script for Claude desktop integration and supports both direct execution and containerized deployment via Docker, making it ideal for developers who want to quickly expose existing APIs to AI assistants without building custom MCP servers for each one."
jayzeedesign,figma-mcp,49,16422,"Figma MCP allows AI coding agents to directly access Figma files and prototypes, bridging the gap between design and development workflows. Created by Jason Zhou, this Python-based implementation provides a server that connects to the Figma API using your personal API key. It's designed for seamless integration with Cursor and other MCP-compatible IDEs, enabling AI assistants to reference design files when generating code or answering queries about UI implementations."
vertile-ai,next-mcp-server,85,439,"Next.js MCP server enables AI assistants to analyze and understand Next.js applications by extracting API route information, validation schemas, and type definitions. Built by jazelly, it scans project directories to discover route handlers, parameters, status codes and response types, providing structured insights about the application's API surface. Particularly valuable for developers who want AI assistants to help with Next.js API development, documentation, and testing without manually documenting endpoint details."
jbchouinard,mcp-document-reader,3,,"MCP Document Reader is a server that enables AI assistants to interact with PDF and EPUB documents. Developed by Jerome Boisvert-Chouinard, this implementation provides a solution for users of Windsurf IDE by Codeium, which only supports MCP tools rather than resources. The server allows for reading and analyzing document content, making it useful for research tasks, content extraction, and document analysis workflows where AI assistants need direct access to document files."
jbdamask,cursor-db-mcp,11,,"The Cursor DB MCP server provides AI assistants with access to Cursor IDE's SQLite databases, enabling exploration of project data, chat history, and composer information. It automatically detects Cursor installations across operating systems, scans for project databases, and exposes them through a structured API of resources and tools. The implementation includes features for listing projects, retrieving chat history, accessing composer data, and executing custom queries against database tables, making it valuable for users who want to analyze their Cursor usage patterns or extract information from their development environment."
jboothomas,pure-model-context-protocol,1,,"This Pure Storage MCP server, developed by JB Thomas, enables AI assistants to interact with Pure Storage FlashBlade arrays. Built using Python and the Model Context Protocol, it provides a modular tool for retrieving real-time information about array components, volumes, and hosts. The implementation focuses on simplifying complex storage management tasks by offering a natural language interface to FlashBlade operations. It's particularly useful for storage administrators and DevOps teams who want to streamline Pure Storage FlashBlade management, enabling efficient monitoring, troubleshooting, and resource allocation through AI-assisted workflows without requiring deep knowledge of Pure Storage APIs or command structures."
jdjr2024,markdownify-mcp-utf8,6,,"This MCP server implementation provides a bridge for converting various document formats to Markdown. Developed by quasimodo-XY based on work by @zcaceres, it supports UTF-8 encoding and integrates with the markitdown library. The server offers functionality for handling multiple input formats including PDF, Word documents, and HTML, making it suitable for use cases requiring document conversion and standardization to Markdown format."
jdubois,azure-cli-mcp,55,,"Azure CLI MCP is a server implementation that wraps the Azure CLI, enabling AI assistants to execute Azure commands through a standardized interface. Developed by Julien Dubois, it uses Spring Boot and Spring AI to expose Azure CLI functionality via the stdio transport, allowing users to manage Azure resources directly from tools like Claude Desktop or VS Code. The server runs locally using the user's Azure credentials and includes a carefully crafted prompt that improves how LLMs interact with Azure, making it particularly effective for listing resources, fixing configuration issues, and creating new Azure services."
jeanibarz,knowledge-base-mcp-server,10,,"This MCP server, developed by Jean Ibarz, provides tools for listing and retrieving content from different knowledge bases. Built with TypeScript and leveraging libraries like Faiss and Hugging Face, it offers functionality to access and search through structured knowledge repositories. The implementation focuses on efficient retrieval and vectorization of knowledge base content, enabling AI models to query and utilize diverse information sources. By connecting AI systems with organized knowledge stores, this server facilitates use cases such as question answering, information retrieval, and knowledge-based reasoning, making it particularly useful for applications requiring access to curated information across multiple domains."
jedrazb,elastic-semantic-search-mcp-server,1,,"This MCP server implementation provides semantic search functionality for Search Labs blog posts using Elasticsearch. It offers a single tool for performing semantic searches across blog content, returning formatted results including titles, URLs, and relevant text snippets. The server is designed to integrate easily with Elasticsearch and can be useful for applications requiring advanced content discovery and retrieval from blog repositories."
jehan26,mcp-inspector-v0.6.0,0,,"The MCP-Inspector server enables AI assistants like Claude to interact with GitHub repositories through a Python Flask implementation. It provides endpoints for discovering and executing operations such as repository searching, issue management, and pull request handling. The server authenticates with GitHub using a personal access token and formats responses in a structured way that makes repository data easily accessible within AI conversations. This implementation is particularly useful for developers who want to analyze repositories, manage issues, or monitor pull requests without leaving their AI assistant interface."
jenstangen1,pptx-xlsx-mcp,5,,"PowerPoint MCP server provides a bridge between AI assistants and Microsoft PowerPoint, enabling programmatic creation and manipulation of presentations through natural language. The implementation uses python-pptx to offer a comprehensive set of tools for managing slides, shapes, charts, and tables, with features for styling elements, creating financial visualizations, and applying templates. Built with FastMCP, it maintains a workspace directory for presentations and handles element tracking through unique IDs, making it valuable for users who need to create or modify PowerPoint presentations without leaving their AI assistant interface."
jeong-sik,kakao-api-mcp-server,7,,"Kakao API MCP Server provides a bridge to Kakao Maps API services, enabling AI assistants to access location-based data through the Model Context Protocol. Built with TypeScript and Express, it supports both HTTP and stdio communication modes, making it compatible with various MCP client implementations. The server requires a Kakao API key for authentication, which is configured either through command-line arguments or environment variables. This implementation is particularly useful for applications needing geolocation services, address lookup, or map-related functionality within conversational AI interfaces."
jerhadf,linear-mcp-server,254,,"This MCP server, developed by jerhadf, provides seamless integration with Linear's issue tracking system for AI assistants. It offers tools for creating, updating, searching, and commenting on Linear issues through natural language interactions. The server leverages Linear's GraphQL API, enabling AI models to perform operations like creating high-priority bugs, finding in-progress tasks, and analyzing team workloads. Key features include flexible issue filtering, user-specific views, and support for markdown in descriptions and comments. By bridging AI capabilities with Linear's project management features, this implementation enhances issue tracking, task prioritization, and team collaboration through natural language. It is particularly useful for scenarios requiring dynamic project management, AI-assisted bug reporting, and automated task organization in software development workflows."
jerpint,paperpal,5,,"Paperpal is an MCP extension that connects LLMs to academic research sources, enabling users to search and discuss scientific papers from arXiv and Hugging Face. Developed by Jeremy Pinto, it provides tools for semantic paper searches and retrieving detailed paper information, making it ideal for researchers writing literature reviews, exploring new research, or organizing academic ideas. The implementation uses FastMCP with asynchronous HTTP requests to efficiently fetch and parse paper data, presenting results in a structured format that LLMs can easily process and discuss with users."
jerryokk,dify-workflow-mcp,2,,"A TypeScript MCP server for Dify workflows that enables dynamic tool discovery and execution across multiple Dify AI applications. The server automatically loads Dify application configurations, converts their input parameters to JSON schemas, and provides a standardized interface for running AI workflows with robust input validation and error handling."
jetbalsa,mcp-opensearch-js,0,,"MCP-OpenSearch-JS is a server that enables AI assistants to query and analyze Wazuh security logs stored in OpenSearch databases. The implementation provides tools for searching alerts, exploring field values, monitoring logs in real-time, visualizing alert trends, and retrieving detailed information about specific security events. Built with FastMCP and the OpenSearch client library, it features robust error handling, progress reporting for long-running operations, and configurable timeouts to prevent connection issues. This server is particularly valuable for security analysts who need to investigate security incidents, generate statistics on alert patterns, or monitor security events without leaving their AI assistant interface."
jetbrains,mcp-jetbrains,492,54252,"This MCP proxy server, developed by JetBrains, enables AI assistants like Claude to interact with JetBrains IDEs. Built with Node.js, it acts as a bridge between Claude Desktop and JetBrains IDE plugins, allowing AI models to access IDE functionality and project data. The implementation stands out by providing deep integration with JetBrains' powerful development environments, supporting multiple concurrent IDE instances. By connecting AI capabilities with professional coding tools, this server enables AI systems to assist in code analysis, refactoring, and development tasks. It is particularly useful for scenarios like code reviews, bug detection, and building AI coding assistants that can understand and contribute to software projects within JetBrains IDEs."
jevy,mcp-webresearch,0,,"MCP-WebResearch provides AI assistants with web browsing capabilities for conducting research through a Playwright-powered browser. It offers tools for Google searching, visiting webpages, and capturing screenshots, with content automatically converted to clean markdown format. The implementation handles common web challenges like consent dialogs and bot detection, while maintaining a research session that tracks visited pages and screenshots. Particularly useful for workflows requiring iterative research, source citation, and visual context from web content."
jexinsam,mssql_mcp_server,12,,"This MSSQL MCP server, created by Jexin Sam, enables secure interaction between AI assistants and Microsoft SQL Server databases. Built with Python and leveraging the Model Context Protocol, it provides a controlled interface for listing tables, reading data, and executing SQL queries. The implementation focuses on safety and structure, offering a standardized way to explore and analyze MSSQL databases. It's particularly useful for applications requiring AI-driven database operations, enabling use cases such as automated data analysis, dynamic reporting, and intelligent database exploration without direct exposure to SQL Server complexities."
jezweb,openai-mcp,0,,"OpenAI MCP is a server that enables Roo Code and other MCP-compatible AI assistants to access OpenAI's DALL-E API for image generation with full support for all available options. The implementation provides fine-grained control over image generation parameters including model selection, image size, quality, and style, allowing AI assistants to create images through natural language prompts. It includes a command-line interface for installation and configuration, and requires users to provide their own OpenAI API key."
wildfly-extras,wildfly-mcp,4,,"This WildFly MCP server, developed by the WildFly team, provides a Java-based interface for AI assistants to interact with and manage WildFly application servers. Built using Quarkus and leveraging the Model Context Protocol, it offers tools for monitoring server status, resource consumption, log analysis, and configuration management. The implementation focuses on simplifying WildFly server administration through natural language interactions, making it easier for AI models to assist in troubleshooting, performance monitoring, and server management tasks. It's particularly useful for DevOps teams and system administrators who want to integrate AI assistance into their WildFly server management workflows, enabling efficient server diagnostics and configuration without requiring deep knowledge of WildFly's management interfaces."
jfrog,mcp-jfrog,81,,"JFrog MCP Server provides a bridge to the JFrog Platform, enabling AI assistants to interact with Artifactory repositories, builds, security scanning, and release management. Developed by JFrog LTD, this TypeScript implementation exposes over 20 specialized tools for operations like repository creation, build tracking, package vulnerability scanning, and release bundle distribution. The server authenticates via JFrog access tokens and handles errors gracefully with detailed messages. Particularly valuable for DevOps teams and developers who want to leverage AI assistants for artifact management, security analysis, and release automation without switching context to the JFrog web interface."
j-gal02,clicksend-mcp,1,,"This ClickSend MCP server, developed by J-Gal02, enables AI agents to interact with ClickSend's SMS and Text-to-Speech (TTS) call services. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a streamlined interface for sending SMS messages and initiating TTS calls. The implementation focuses on simplifying communication tasks, offering a bridge between AI systems and ClickSend's API. It's particularly useful for businesses and developers looking to integrate automated messaging and voice communication into their AI workflows, enabling use cases such as automated notifications, appointment reminders, and voice-based information delivery without directly dealing with ClickSend's API complexities."
jguimera,securitycopilotmcpserver,6,,"A Python-based MCP server that provides integration between Microsoft Security Copilot and Microsoft Sentinel using Azure Identity Authentication. Developed by Jaime Guimera Coll, this implementation enables running KQL queries against Sentinel workspaces, managing Security Copilot skillsets/plugins, and executing prompts within Security Copilot. The server uses FastMCP for the transport layer and supports multiple authentication methods including interactive browser, client secret, and managed identity. It's particularly useful for security professionals developing, testing, and deploying Security Copilot KQL skills, allowing for seamless workflow from development to production environments."
jhacksman,openscad-mcp-server,19,,"OpenSCAD MCP Server enables AI assistants to create and manipulate 3D models through natural language descriptions, leveraging a pipeline that generates images with Venice.ai, segments objects with SAM2, creates 3D models with threestudio, and converts them to parametric OpenSCAD code. The implementation supports multiple export formats (3MF, AMF, CSG) that preserve parametric properties for 3D printing, includes validation tools for printer compatibility with Prusa and Bambu systems, and provides visualization capabilities for multi-angle previews - making it particularly valuable for users who need to create customizable 3D models without manual CAD work."
jhgaylor,hirebase-mcp,3,11060,"HireBase MCP Server provides tools to interact with the HireBase Job API, enabling AI assistants to search for jobs based on various criteria and retrieve detailed job information. Developed by Jake Gaylor under the MIT license, this Python implementation offers two main tools - search_jobs with extensive filtering options (keywords, location, salary, etc.) and get_job for retrieving specific job details - plus a prompt generator to help create structured candidate profiles. The server is designed for easy integration with Claude Desktop and Cursor, making it particularly valuable for job seekers and career advisors who need access to current job market data."
jhirono,todomcp,4,,"This Microsoft Todo MCP service enables Claude to interact with Microsoft Todo tasks through natural language. Built by jhirono, it provides tools for viewing task lists, creating tasks with due dates and priorities, managing checklist items, and checking authentication status. The implementation uses Microsoft Graph API with OAuth 2.0 authentication, storing tokens locally with automatic refresh capabilities. It's particularly useful for users who want to manage their Microsoft Todo tasks directly from Claude without switching applications."
jiantaofu,appinsightmcp,9,1226,"An MCP server that provides comprehensive market intelligence by analyzing data from both the Apple App Store and Google Play Store. Get insights about apps, market trends, competitors, and user feedback across the major mobile app marketplaces."
jimmy974,n8n-workflow-builder,11,,"The n8n Workflow Builder MCP server enables AI assistants to programmatically create and manage n8n workflows through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, it provides tools for creating workflows with nodes and connections, validating workflow specifications, and exporting complete workflow configurations. The implementation runs as a Node.js application that can be installed via Smithery or manually deployed, making it ideal for automation workflows where users need to design n8n processes without leaving their AI assistant conversation."
jimmy974,opensearch-mcp-server,0,,"OpenSearch MCP Server provides a bridge between AI assistants and OpenSearch databases, enabling direct querying and data retrieval capabilities. Built with Python 3.10, it leverages the opensearch-py library and FastMCP framework to establish secure connections to OpenSearch clusters using configurable authentication credentials. The server can be deployed as a Docker container or run locally, with environment variables controlling connection settings. This implementation is particularly valuable for workflows requiring real-time access to data stored in OpenSearch, such as log analysis, document retrieval, and structured data querying without leaving the conversation interface."
jimmy974,mcp-server-qdrant,0,,"MCP Server for Qdrant provides a vector database integration for storing and retrieving information using semantic search capabilities. Built with Python, it supports multiple embedding providers including FastEmbed, sentence-transformers, and lightweight alternatives optimized for Alpine Linux environments with minimal dependencies. The server offers two main tools: 'qdrant-store' for saving text with optional metadata and 'qdrant-find' for semantic searching of stored information. It can be deployed via Docker or run locally, making it ideal for AI assistants that need persistent memory storage with efficient retrieval based on meaning rather than exact keyword matching."
jimpick,mcp-json-db-collection-server,0,,"This MCP server, developed by Jim Pick, integrates Fireproof JSON document databases with the Model Context Protocol. Built with TypeScript and leveraging Fireproof's decentralized database capabilities, it provides a standardized interface for CRUD operations and querying on JSON documents. The server implements multi-database support, allowing AI systems to interact with collections of Fireproof databases through a unified API. By abstracting the complexities of decentralized data storage, it enables seamless integration of structured data operations into AI workflows. This implementation is particularly valuable for applications requiring scalable, decentralized data management, facilitating use cases such as collaborative document editing, distributed content management, and AI-driven data analysis across multiple databases."
sheshiyer,jina-ai-mcp-multimodal-search,2,,"This MCP server, developed by Jina AI, integrates with Jina's AI services to provide seamless access to advanced language models and multimodal AI capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized interface for interacting with Jina's AI ecosystem. The implementation focuses on efficient handling of AI requests and responses, making it ideal for developers building applications that require natural language processing, image analysis, or other AI-powered features. Its modular design allows for easy extension and customization, catering to a wide range of AI-driven use cases from chatbots to content generation systems."
jincai,rootdata-mcp-server,1,,"RootData MCP Server provides a bridge to the RootData API, enabling AI assistants to search and retrieve detailed information about blockchain projects, venture capital organizations, and industry professionals. The server exposes three main tools: searching for entities by keywords, fetching comprehensive project details by ID, and retrieving organization information with optional team and investment data. Built with FastMCP and async HTTP requests, it handles authentication and error management while delivering structured JSON responses, making it valuable for crypto research, investment analysis, and blockchain ecosystem exploration."
jingcheng-chen,rhinomcp,29,,"RhinoMCP is a plugin for Rhino 8 that implements the Model Context Protocol, enabling AI assistants to interact with Rhino's 3D modeling environment. The plugin creates a server that exposes Rhino's functionality through MCP, allowing for programmatic control of modeling operations. Built on the C# SDK for MCP, it features start and stop commands to manage the server connection, making it useful for automating design workflows and enabling conversational interfaces to control Rhino."
jinzcdev,leetcode-mcp-server,2,31,"LeetCode MCP Server provides a bridge to LeetCode's programming problem platform through the Model Context Protocol. Developed by jinzcdev, this TypeScript implementation supports both leetcode.com and leetcode.cn sites, offering tools for accessing problem descriptions, searching by tags and difficulty, retrieving user profiles and submission history, and accessing community solution articles. The server handles authentication via LeetCode session cookies for accessing private data, and exposes resources for problem metadata and solution content, making it particularly valuable for developers seeking programming assistance, contest preparation, or algorithm learning through AI assistants."
jitsmaster,webscrapemcpserver,1,,"This web crawler MCP server, implemented in TypeScript, provides a flexible and configurable tool for crawling websites and extracting content. It integrates with the Model Context Protocol SDK and uses libraries like Axios and Cheerio for efficient web scraping. The crawler respects robots.txt rules, handles concurrent requests, and offers customizable depth, delay, and timeout settings. It stands out by providing a simple JSON interface for initiating crawls and retrieving structured results, making it ideal for AI systems or applications that need to gather web content programmatically. Use cases include data collection for training models, content aggregation, or web monitoring tasks."
jjikky,dynamo-readonly-mcp,0,285,"A read-only MCP server for querying AWS DynamoDB databases, enabling natural language interactions with database tables through tools like listing tables, scanning data, querying with conditions, and retrieving table schemas. Built by Yunjik Kim, this implementation provides a standardized interface for LLMs to explore and extract information from DynamoDB without requiring direct database access or complex query writing."
jjsantos01,qgis_mcp,437,,"QGIS MCP provides a bridge between AI assistants and QGIS (Quantum GIS) through a socket-based server-client architecture. The implementation consists of a QGIS plugin that runs a server inside the GIS application, exposing geospatial capabilities like adding layers, executing processing algorithms, and rendering maps, while an MCP server component translates these capabilities into tools that can be called by AI assistants. This enables AI systems to perform complex GIS operations such as loading projects, manipulating vector and raster data, and generating map visualizations without requiring direct QGIS knowledge."
jkawamoto,mcp-bear,9,,"This MCP server, developed by Junpei Kawamoto, provides a standardized interface for interacting with Bear note-taking software. Built with Python and leveraging FastAPI, it offers tools for managing notes, tags, and other Bear-specific features. The implementation focuses on exposing Bear's functionality through a consistent MCP interface, enabling AI models to perform note creation, search, and organization operations. By connecting AI assistants with Bear's robust note-taking capabilities, this server facilitates sophisticated knowledge management scenarios like automated note creation, content categorization, and information retrieval. It's particularly valuable for users and applications aiming to enhance personal knowledge management through AI-powered interactions with Bear."
jkawamoto,mcp-florence2,1,,"This MCP server implementation provides a bridge to Florence-2, a powerful image processing model. Developed by Junpei Kawamoto, it enables AI assistants to perform advanced image analysis and manipulation tasks. The server utilizes PyTorch and Hugging Face's Transformers library to leverage Florence-2's capabilities. It's designed for seamless integration into existing AI workflows, making it particularly useful for applications requiring sophisticated image understanding, such as visual question answering, image captioning, or content-based image retrieval. The implementation focuses on efficient processing and easy deployment, with support for various Python environments and package management systems."
jkawamoto,mcp-youtube-transcript,11,,"This MCP server, developed by Junpei Kawamoto, provides integration with YouTube's transcript API to retrieve captions for given video URLs. Built with Python and leveraging libraries like mcp and youtube-transcript-api, it offers a straightforward way to access video transcripts through a standardized interface. The implementation focuses on simplicity and ease of use, making it compatible with both Goose CLI and Goose Desktop. By connecting AI models with YouTube's vast repository of video content, this server enables scenarios such as content analysis, subtitle generation, and information extraction from video sources. It's particularly useful for applications and AI assistants that need to process or reference spoken content from YouTube videos."
jkf87,hwp-mcp,55,,"HWP MCP Server provides a bridge between AI assistants and Hangul Word Processor (HWP) documents, enabling document manipulation through a standardized interface. The implementation supports both Python (Flask-based) and Node.js versions, utilizing the HWP COM interface via pywin32 or winax respectively to control document operations. This server allows AI assistants to create, edit, and format Korean documents in the proprietary HWP format, making it particularly valuable for workflows involving Korean language document processing that require direct interaction with the Hangul Office suite."
jkingsman,qanon-mcp-server,2,,"A Python-based MCP server that provides access to QAnon posts and related conspiracy theory content. This server allows AI models to retrieve information about QAnon posts, drops, and conspiracy theories when prompted by users."
jkoelker,schwab-mcp,2,,"Schwab MCP Server provides a bridge between Claude and the Schwab API, enabling access to financial account information, stock quotes, and transaction history directly within conversations. Built by jkoelker, it authenticates with Schwab using OAuth tokens and exposes nine tools for retrieving account details, positions, user preferences, quotes, orders, and transactions. The server runs on stdio transport, making it compatible with Claude Desktop integration, and includes robust error handling for authentication and API failures. Particularly valuable for financial advisors and investors who need to access Schwab account information without leaving their conversation interface."
jktfe,myaimemory-mcp,7,,"myAI Memory Sync is an MCP server that synchronizes personal memory templates across different Claude interfaces, including Claude Desktop, Claude Web, and Windsurf. Built with TypeScript, it provides tools for retrieving, updating, and managing structured memory sections through both stdio and HTTP transports. The implementation features robust error handling, emergency synchronization capabilities, and natural language parsing to convert unstructured text into formatted template sections. It's particularly valuable for maintaining consistent user preferences, personal information, and response styles across multiple AI platforms without manual copying."
jktfe,servemyapi,10,,"ServeMyAPI is a macOS-specific MCP server that securely stores and retrieves API keys using the native macOS Keychain. Developed by James King, it solves the common problem of managing sensitive credentials across multiple projects without exposing them in .env files. The server provides tools for storing, retrieving, listing, and deleting API keys through a consistent interface, making them accessible to AI assistants via natural language requests. This implementation is particularly valuable for developers who want to maintain security while allowing their AI tools to access necessary API credentials without manual intervention."
jlgrimes,ptcg-mcp,4,,"This Pokemon TCG Card Search MCP server enables Claude to search and display Pokemon Trading Card Game cards with rich filtering capabilities. Built with TypeScript and the Model Context Protocol SDK, it interfaces with the Pokemon TCG API to provide detailed card information including images, stats, and pricing data. The implementation supports advanced search syntax with features like exact matching, wildcards, range queries, and multiple filter combinations for attributes such as card name, type, subtype, legality, and more. It's particularly useful for Pokemon TCG enthusiasts who want to quickly find specific cards, check card legalities for tournament play, or explore card collections through natural language queries."
jlmelis,sanity-mcp-server,0,,"This MCP server provides tools for managing draft posts in a Sanity.io project. It allows creating, listing, and publishing draft posts through a simple API interface. The server integrates with Sanity.io's content management system, offering a streamlined workflow for content creators and editors working with draft content in Sanity-powered websites or applications."
jlucaso1,whatsapp-mcp-ts,13,,"WhatsApp MCP Server connects AI agents to personal WhatsApp accounts using TypeScript and the Baileys library. It stores messages and authentication locally in SQLite and provides tools for searching contacts, retrieving message history, listing chats, and sending messages. The implementation includes QR code authentication, real-time event handling, and comprehensive privacy controls, making it ideal for users who want their AI assistants to interact with WhatsApp conversations without compromising data security."
jmagar,overseerr-mcp-server,0,,"This MCP server implementation provides a bridge between AI assistants and Overseerr, a request management and media discovery tool for Plex. It offers tools for searching media, retrieving details, making requests, and managing existing requests. The server is designed for use cases requiring integration with media libraries, such as automated content curation or personalized viewing recommendations."
jmagar,unraid-mcp,2,,"Unraid MCP Server enables AI assistants to interact with Unraid servers through the official Unraid GraphQL API. Built by jmagar, it provides read-only access to system information, array status, Docker containers, virtual machines, disk information, and network shares. The implementation uses Python with the FastMCP framework, communicates via stdio transport for direct AI assistant integration, and requires an API key with appropriate permissions. This server is particularly valuable for Unraid users who want to monitor their server status, check disk health, manage containers, or troubleshoot issues directly through AI assistant conversations without switching contexts."
jmagar,yarr,2,,"YARR (Yet Another Radarr/Sonarr) provides a unified interface for managing media automation services through MCP tools. Built with TypeScript in a modular package structure, it integrates with popular services including Sonarr, Radarr, Prowlarr, Overseerr, Plex, Tautulli, qBittorrent, SABnzbd, and Gotify. The implementation uses a consistent API pattern across services, with typed interfaces for robust error handling and rate limiting. Particularly valuable for media enthusiasts who want to search, monitor, and manage their media collection directly through Claude Desktop without switching between multiple web interfaces."
jmanhype,dart-mcp-server,3,,"This MCP server implementation provides a bridge between AI assistants and the Dart task management system. Developed by jmanhype, it offers tools for task creation, document handling, workspace organization, and integration with Dartboard features. Built using TypeScript and Node.js, with Python dependencies for the Dart SDK, the server focuses on secure API token management and easy setup. It is particularly useful for AI applications that need to automate project management tasks, organize documents, or integrate task tracking into their workflows. The implementation leverages the Model Context Protocol SDK and provides a flexible interface for executing Dart-related operations, making it ideal for enhancing AI-driven productivity and collaboration tools."
jmanhype,mcp-flux-studio,14,,"MCP Flux Studio bridges Flux's advanced image generation capabilities to AI coding assistants in Cursor and Windsurf (Codeium) IDEs. This TypeScript server implementation exposes four tools through the Model Context Protocol: text-to-image generation, image-to-image transformation, inpainting with customizable masks, and structural control generation (canny, depth, pose). It works by translating MCP tool calls into commands for the Flux CLI, executing them via Python, and returning the results to the IDE. Particularly valuable for developers who need to generate or manipulate images directly within their coding workflow without switching contexts."
jmartin82,signaturit-mcp,1,,"Signaturit Tools Demo is an MCP server that integrates with the Signaturit API, enabling AI assistants to manage electronic signatures and contacts through natural language commands. Built with Go using the mark3labs/mcp-go library, this implementation provides tools for creating, tracking, and managing digital signature workflows, as well as handling contact information within the Signaturit platform. The server exposes functionality for signature creation, status checking, reminders, and cancellation, along with comprehensive contact management operations, making it ideal for businesses looking to automate document signing processes through conversational AI interfaces."
jmh108,md-webcrawl-mcp,2,,"This MCP implementation, developed by JMH, is a Python-based web crawler designed for extracting and saving website content as markdown files. It offers features like website structure mapping, batch URL processing, and configurable output settings. The project integrates with FastMCP for easy installation and deployment, and leverages libraries such as BeautifulSoup and requests for efficient web scraping. Its focus on markdown output and straightforward configuration makes it particularly suitable for content aggregation, site archiving, or building knowledge bases from web sources. The crawler's ability to create content indexes and its support for concurrent requests set it apart as a tool for both small-scale personal projects and larger data collection tasks."
jmh108,mcp-server-readability-python,1,,"This Python-based MCP server, developed by JMH, provides a robust solution for extracting and transforming webpage content into clean, LLM-optimized Markdown. Built on FastMCP and integrating libraries like readability-lxml and html2text, it offers a single powerful tool for fetching, parsing, and converting web content. The implementation stands out by removing non-essential elements like ads and navigation, while preserving key metadata such as title, excerpt, and author. It's particularly useful for developers and researchers who need to process web content for AI analysis, content aggregation, or data extraction tasks, offering a more refined and consistent output compared to simple web scraping methods."
jmonsellier,gmail-mcp-server,0,,"This Gmail MCP server provides a bridge between AI assistants and Gmail's email management capabilities. Built with Python and leveraging libraries like google-api-python-client and httpx, it offers tools for sending, reading, drafting, and managing emails programmatically. The implementation focuses on simplifying interactions with Gmail's API, making it accessible for AI models to handle email tasks. It includes features like sending emails, retrieving unread messages, trashing emails, and opening emails in a browser. This server is particularly useful for tasks like automated email management, scheduling, or integrating email capabilities into AI-driven workflows, enabling assistants to interact with Gmail without requiring deep knowledge of the underlying API complexities."
joebuildsstuff,mcp-jina-ai,16,5614,"This MCP server, developed by joeBlockchain, provides access to Jina AI's web services through Claude. It implements three main tools: web page reading and content extraction, web search, and fact checking/grounding. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, the server offers flexible output formats, image handling options, and structured responses. It's designed for developers and AI assistants who need to incorporate web content retrieval, search capabilities, and fact verification into their workflows, enabling natural language interaction with Jina AI's powerful APIs."
joelhooks,logseq-mcp-tools,16,,"Logseq MCP Tools provides AI assistants with structured access to Logseq knowledge graphs through a comprehensive set of tools for retrieving, analyzing, and manipulating data. Built with TypeScript using the Model Context Protocol SDK, it enables capabilities like retrieving page content, generating journal summaries, analyzing graph connections, identifying knowledge gaps, and suggesting potential connections between concepts. The implementation includes sophisticated natural language date parsing, DataScript query capabilities, and detailed content analysis features. It's particularly valuable for users who want to leverage AI assistants to explore, organize, and gain insights from their personal knowledge bases without leaving their conversational interface."
joenorton,comfyui-mcp-server,32,,"This MCP server implementation provides a bridge between ComfyUI and MCP clients for image generation tasks. It uses WebSockets for communication, allowing clients to send image generation requests with customizable parameters like prompt, width, and height. The server processes these requests through ComfyUI and returns the generated image URL. It's designed for easy integration into applications requiring on-demand AI image generation capabilities."
sfncat,mcp-joern,2,,"Joern-MCP is a server implementation that provides AI assistants with access to Joern's code analysis capabilities through a Python interface. This server enables querying and analyzing Code Property Graphs (CPGs) by exposing tools for loading CPGs, retrieving method and class code, examining call relationships, and executing custom queries against the Joern backend. Built on the FastMCP framework, it handles communication with a remote Joern instance via HTTP requests, making it particularly valuable for security researchers and developers who need to perform static code analysis, identify vulnerabilities, or understand code structure and dependencies through AI assistants."
politwit1984,mcp-perplexity-server,10,,"This MCP server, developed by Joe Wilson, integrates Perplexity AI with the Model Context Protocol to provide intelligent coding assistance. Built with TypeScript and leveraging the MCP SDK, it offers a streamlined interface for AI-powered code analysis, generation, and problem-solving. The server implements robust error handling, asynchronous operations, and configurable settings for API keys. By combining Perplexity's advanced language understanding with MCP's standardized communication protocol, this implementation enables AI assistants to provide context-aware coding support across various programming languages and project structures. It is particularly useful for developers seeking AI-enhanced productivity in tasks such as code review, refactoring, and debugging, as well as for creating intelligent coding tools and IDE plugins."
politwit1984,second-opinion-mcp-server,11,,"This MCP server, developed by Joe Wilson, combines insights from Google's Gemini AI, Stack Overflow, and Perplexity AI to provide enhanced coding assistance. Built with TypeScript and the MCP SDK, it offers automatic language detection, code snippet extraction, and git-aware context gathering. The implementation stands out by synthesizing multiple AI and knowledge sources into structured, markdown-formatted solutions. It's particularly useful for developers seeking comprehensive answers to coding problems, best practices, and alternative approaches, enabling more informed decision-making during the development process."
johancodinha,nrepl-mcp-server,23,431,"This nREPL MCP server implementation enables interaction between Anthropic Claude MCP clients and running Clojure nREPL instances. Developed by Johan Codinha, it provides functionalities such as Clojure code evaluation, namespace listing, and public var inspection. The server is designed to work seamlessly with Claude Desktop and CLine in VSCode, offering a bridge between AI assistants and Clojure development environments. It's particularly useful for AI-assisted Clojure development, interactive code exploration, and integrating Clojure capabilities into AI workflows. The implementation emphasizes ease of setup and use, with support for both quick npx execution and manual installation options."
therealjohn,microsoft-teams-mcp,2,,"A Microsoft Teams notification server that enables sending markdown-formatted messages to a specified Teams channel using Azure AD authentication. Developed by John Miller, this MCP server provides a streamlined way to send notifications from development environments, with a specific focus on integration with VS Code Insiders. Useful for teams wanting to centralize communication and automate status updates directly from their development workflow."
johnhuang316,code-index-mcp,4,,"Code Index MCP enables large language models to index, search, and analyze code in project directories. It provides tools for navigating file structures, searching for patterns in code, generating file summaries, and analyzing code complexity across multiple programming languages. The implementation uses UV for dependency management, stores project settings persistently in a .code_indexer folder, and integrates easily with Claude Desktop through a simple configuration process, making it ideal for developers who need to analyze codebases without leaving their AI assistant interface."
johnneerdael,netskope-mcp,1,2088,"This Netskope MCP implementation, developed by John Neerdael, provides integration with the Netskope API for managing private access infrastructure. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for publisher lifecycle management, private app configuration, policy creation, and traffic diagnostics. The implementation focuses on simplifying Netskope operations through a standardized MCP interface, with features like caching and retry logic. It's particularly useful for network administrators and security teams needing to automate Netskope NPA tasks, enabling use cases such as infrastructure validation, policy enforcement, and access control management without directly dealing with the complexities of the Netskope API."
johnneerdael,swagger-mcp,12,,"This Swagger Explorer MCP, developed by John Neerdael, enables AI agents to analyze and interact with Swagger/OpenAPI specifications. Built with TypeScript and leveraging Playwright for web scraping, it provides tools for extracting API endpoints, schemas, and documentation from Swagger UI interfaces. The implementation focuses on dynamic exploration of APIs, offering functionality to filter endpoints by HTTP method and analyze response schemas. It's particularly useful for developers and AI assistants working with unfamiliar APIs, enabling use cases such as API integration planning, documentation review, and schema validation without manual parsing of Swagger specifications."
johnnyoshika,mcp-server-sqlite-npx,5,3991,"This Node.js MCP SQLite server, developed as an alternative to the Python reference implementation, provides a lightweight database solution for environments where Python's UVX runner is unavailable. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers seamless integration with tools like Claude Desktop and LibreChat. The server implements core SQLite functionality through the sqlite3 package, enabling AI assistants to perform database operations via MCP. Its npx-based execution model simplifies deployment and usage across different Node.js environments. This implementation is particularly valuable for developers seeking a JavaScript-based MCP SQLite solution, facilitating use cases such as local data storage, simple database management, and integration of SQLite capabilities into Node.js-based AI applications."
johnxjp,todoist-mcp-python,1,,"Todoist MCP Server enables Claude to interact with the Todoist task management API, allowing users to create, retrieve, update, and delete tasks through natural language. Built with Python using the FastMCP framework, it provides tools for managing tasks with various attributes including due dates, priorities, and labels, while securely handling authentication through environment variables. The implementation is particularly useful for productivity workflows where users want to manage their Todoist tasks directly within Claude conversations without switching contexts."
johnymontana,dgraph-mcp-server,1,,"Dgraph MCP Server provides a bridge between language models and Dgraph graph databases, enabling AI assistants to execute DQL queries, perform mutations, and manage database schemas. Built in Go using the mcp-go library, it exposes specialized tools for database operations and includes a resource endpoint for retrieving schema information. The implementation features a Docker-based deployment option with a complete Dgraph environment and includes example code for both simple database operations and a more complex movie database application. Ideal for developers who want to leverage AI assistants for graph database interactions without switching context to separate database tools."
john-zhang-dev,xero-mcp,12,1537,"Xero MCP Server enables Claude to interact with Xero Accounting Software through a set of tools that access financial data. Developed by John Zhang, it provides authenticated access to Xero's API for retrieving accounts, bank transactions, contacts, invoices, journals, organizations, payments, and quotes. The implementation uses OAuth2 authentication and handles API session management, making it valuable for financial analysis, bookkeeping tasks, and accounting workflows without leaving the conversation interface. Future development plans include adding transaction creation capabilities."
jokemanfire,mcp-containerd,8,,"MCP-Containerd provides a bridge to Containerd's Container Runtime Interface (CRI), enabling AI assistants to manage containers and pods through natural language commands. Built in Rust using the RMCP library, it offers tools for listing, creating, and removing containers and pods, with support for image management operations. The implementation connects to Containerd's Unix socket and exposes its functionality through a standardized protocol, making it particularly useful for DevOps workflows where users need to monitor or manipulate container environments without remembering complex CLI commands."
jo-lion,software-planning-mcp,0,,"Software Planning MCP provides a structured approach for AI assistants to plan and organize software development projects. Built with Python using the FastMCP framework, it enables models to break down complex software tasks into manageable components, define project structures, and create implementation roadmaps. The server can be deployed via Docker or run locally, making it flexible for integration into various development workflows where systematic project planning and architecture design are needed."
jonaolden,pbixray-mcp-server,1,,"PBIXRay MCP Server provides a bridge to analyze Power BI (.pbix) files through a Python-based interface. Developed by jonaolden, this implementation exposes PBIXRay's capabilities as tools for exploring data models, querying languages (DAX and Power Query), and analyzing data structures with features like pagination and filtering. The server handles large file processing asynchronously with progress reporting, making it particularly valuable for data analysts and BI professionals who need to extract insights from Power BI files through AI assistants without switching tools."
packages,mcp,9,181,"Provides a bridge to the Osmosis blockchain protocol, enabling AI assistants to interact with decentralized finance capabilities like token swaps and account management. Built by Jon Ator, it exposes tools for querying balances, getting swap quotes, and executing trades through a standardized interface that handles transaction signing and broadcasting. Particularly valuable for users who want to perform DeFi operations through natural language interaction without dealing with low-level blockchain details."
jonemo,openpyxl-mcp-server,8,,"OpenPyXL MCP Server provides a thin wrapper around the OpenPyXL Python library that enables Claude and other MCP clients to interact with Excel files. Created by Jonas Neubert, this implementation offers tools for retrieving cell values, searching within ranges, examining cell details including formatting and formulas, and listing worksheet information. It's particularly useful for data analysis workflows where AI assistants need to extract, search, or analyze information from Excel workbooks without requiring users to manually copy spreadsheet content."
jonfreeland,mongodb-mcp,3,,"This MongoDB MCP server enables AI assistants to query and analyze MongoDB databases with read-only access. It provides a wide range of MongoDB operations including database exploration, schema inference, querying, aggregation, text search, and geospatial queries. The server emphasizes data safety and exploration capabilities, making it suitable for AI-driven data analysis, visualization, and insights generation from MongoDB data sources."
jonnyhoff,mcp-browser-use,0,,"This MCP server implementation provides browser automation capabilities through a simple API. It utilizes FastMCP for creating the API server, browser-use for browser automation, and OpenAI's GPT models to interpret natural language commands. The server enables executing browser tasks using plain language instructions, making it useful for scenarios requiring automated web interactions without complex coding."
jonpojonpo,comfy-ui-mcp-server,3,,"This ComfyUI MCP server integrates the ComfyUI stable diffusion interface with AI assistants. It provides a streamlined API for generating images using ComfyUI's node-based workflow, abstracting away the complexities of the underlying system. The server enables AI to construct image generation pipelines, adjust parameters, and retrieve results programmatically. By connecting AI systems with ComfyUI's powerful image generation capabilities, this implementation allows for dynamic creation of visual content based on textual descriptions or other inputs. It is particularly useful for applications requiring on-demand image generation, such as content creation tools, design assistants, or any AI system that needs to produce custom visuals."
jonrad,tmux-mcp,0,,"This MCP server implementation provides programmatic control over tmux sessions, allowing AI assistants to interact with and manipulate tmux environments. Developed by jonrad, it leverages the libtmux library to execute tmux commands through a simple interface. The server exposes a single tool that can run arbitrary tmux commands, effectively wrapping the tmux CLI. While currently a proof of concept, it demonstrates the potential for AI-driven terminal session management. This implementation is particularly useful for scenarios requiring automated tmux session control, such as remote system administration, development environment setup, or complex terminal-based workflows."
src,canvas-student,0,,"Canvas Student MCP provides a bridge to Canvas LMS, enabling students to interact with their course data through Claude. Built as a lightweight Python tool using the FastMCP framework, it exposes tools for retrieving courses, assignments, files, quizzes, and to-do items with rich, Claude-optimized formatting. Particularly valuable for students who want to quickly access and manage their academic information without navigating multiple interfaces."
jootsuki,backlog-mcp-server,3,,"Backlog MCP Server provides a bridge to the Backlog project management API, enabling AI assistants to interact with project tracking, issue management, and collaboration features. Built with TypeScript and the MCP SDK, it allows querying and manipulating project data through a standardized interface, making it useful for developers and project managers who want to streamline workflow interactions through conversational AI."
jordandalton,doordash-mcp-server,1,,"DoorDash MCP Server provides a bridge to the DoorDash Drive API, enabling AI assistants to manage delivery services through a standardized interface. Developed by Jordan Dalton, this TypeScript implementation offers tools for creating delivery quotes, managing deliveries, handling business operations, and store management. The server requires a DoorDash API key for authentication and handles all API requests with proper error management. It's particularly useful for applications that need to integrate with DoorDash's delivery infrastructure for last-mile logistics without writing complex API interaction code."
keboola,keboola-mcp-server,10,,"This Keboola Explorer MCP server, developed by Jordan Burger, provides a bridge between AI assistants and the Keboola Connection platform. Built with Python and leveraging libraries like httpx and pandas, it offers tools for exploring and managing Keboola projects, including bucket and table operations, component configurations, and data previews. The implementation focuses on simplifying interactions with Keboola's Storage API, making it accessible for AI models to query and analyze data stored in Keboola. It's particularly useful for tasks like data exploration, project management, and automated reporting, enabling AI assistants to access and manipulate data in Keboola without requiring deep knowledge of the underlying API complexities."
jordineil,mcp-databricks-server,17,,"Databricks MCP Server provides a bridge between LLMs and Databricks environments, enabling natural language interaction with SQL warehouses and job management systems. The implementation offers tools to run SQL queries, list jobs, check job statuses, and retrieve detailed job information through a FastAPI-based MCP server that connects to the Databricks SQL connector and REST API. It handles authentication via personal access tokens stored in environment variables and formats query results as markdown tables, making it particularly valuable for data analysts and engineers who need to interact with their Databricks workspaces through conversational AI interfaces."
jordyzomer,codeql-mcp,74,,"CodeQL MCP Server provides a bridge to the CodeQL static analysis engine, enabling AI assistants to analyze codebases for security vulnerabilities and quality issues. The implementation offers tools for registering CodeQL databases, evaluating queries against codebases, decoding query results, and performing quick evaluations of specific classes or predicates. Built with Python using the FastMCP framework, it exposes a simple API that handles the complexities of CodeQL operations while providing structured results that can be easily interpreted by language models. This server is particularly valuable for security researchers and developers who want to leverage AI assistants for code analysis without directly interacting with the CodeQL CLI."
jorekai,db-timetable-mcp,1,,"DB-Timetable-MCP is a server that connects AI assistants to the Deutsche Bahn timetable API, enabling real-time access to German railway information. Developed by Nils Jorek, this TypeScript implementation provides tools for retrieving current timetables, planned schedules, recent changes, and finding stations through a standardized interface. The server authenticates with the DB API Marketplace using client credentials, transforms natural language requests into appropriate API calls, and returns formatted XML responses. It's particularly valuable for travel planning, commute monitoring, or transportation analysis without leaving the AI assistant conversation."
joshmayerr,mcp-x,5,,"This MCP server for X/Twitter, developed by Josh Mayer, uses the real browser API instead of the developer API to interact with Twitter. It integrates with the MCP CLI and PPMCP library to provide a flexible interface for AI assistants to perform Twitter operations. The implementation focuses on bypassing API limitations and offering more direct access to Twitter's functionality. It's useful for applications requiring extensive Twitter interactions, social media management tools, or research projects analyzing Twitter data at scale without being constrained by official API rate limits or restrictions."
joshrutkowski,applescript-mcp,134,,"This AppleScript MCP framework, developed by Josh Rutkowski, enables seamless integration of AppleScript capabilities with the Model Context Protocol. It leverages TypeScript and the MCP SDK to provide a robust interface for interacting with macOS applications and system functions through natural language. The implementation is designed for developers looking to incorporate AI-driven automation and control of macOS environments, making it particularly useful for creating intelligent assistants, workflow automation tools, or AI-enhanced macOS applications. Its focus on AppleScript integration sets it apart by offering unique access to macOS-specific functionality within the MCP ecosystem."
joshualelon,deep-research-mcp,6,,"This MCP server implementation provides a deep research capability using multiple AI agents. Developed by JoshuaLelon, it offers a tool for conducting in-depth investigations on given queries with customizable research tones. The server is built using Python and integrates with the FastMCP framework and gpt-researcher library. It focuses on progress reporting and error handling, making it suitable for AI applications that require thorough, multi-agent research on complex topics. The implementation is particularly useful for generating comprehensive reports on a wide range of subjects, with the flexibility to adjust the research tone from objective to critical, optimistic, balanced, or skeptical."
joshuarileydev,app-store-connect-mcp-server,35,,"This App Store Connect MCP server, developed by JoshuaRileyDev, enables AI assistants like Claude to interact with the App Store Connect API. Built in JavaScript/TypeScript, it provides capabilities for managing beta testers, beta groups, and apps in App Store Connect. The implementation stands out by offering a standardized interface to App Store Connect functionality, allowing AI systems to programmatically control app distribution and testing workflows. By connecting AI capabilities with iOS app management, this server enables automated beta testing, app submission processes, and analytics retrieval. It is particularly useful for building AI-powered tools for iOS app deployment, user feedback analysis, and streamlined App Store management."
joshuarileydev,simulator-mcp-server,38,,"This MCP server, developed by JoshuaRileyDev, enables AI assistants like Claude to programmatically control iOS simulators. Built in JavaScript/TypeScript, it provides capabilities for listing available simulators, booting and shutting them down, installing .app bundles, and launching apps by bundle ID. The implementation stands out by offering a standardized interface to iOS simulator functionality, allowing AI systems to interact with and test iOS applications without physical devices. By connecting AI capabilities with iOS development workflows, this server enables automated testing, app deployment, and iOS environment management. It is particularly useful for continuous integration pipelines, automated QA processes, and building AI-powered tools for iOS app development and testing."
joshuarileydev,mac-apps-launcher,8,570,"This MCP server, developed by JoshuaRileyDev, enables AI assistants like Claude to launch and manage macOS applications. Built in JavaScript, it provides capabilities for listing installed applications, launching apps by name, and opening files with specific applications. The implementation stands out by offering a simple interface to interact with the macOS application ecosystem. By connecting AI capabilities with native desktop functionality, this server enables AI systems to control and utilize macOS software. It is particularly useful for automating workflows, integrating AI assistants with desktop applications, and building voice-controlled or AI-driven interfaces for macOS."
joshuarileydev,supabase-mcp-server,35,2562,"This MCP server, developed by JoshuaRileyDev, provides AI assistants like Claude with programmatic access to the Supabase Management API. It offers tools for managing Supabase projects and organizations, including listing, creating, and deleting projects, retrieving API keys, and handling organization details. The server is designed for easy integration with AI models through a standardized interface. By bridging AI capabilities with Supabase's backend-as-a-service platform, this implementation enables AI-assisted database and project management. It is particularly useful for scenarios requiring automated project setup, API key management, or AI-guided database administration in applications leveraging Supabase's infrastructure."
joshuatanderson,factbook-mcp,0,,"This minimal MCP implementation, developed by an unknown author, provides a basic structure for a project using the MIT license. It includes a .gitignore file to exclude node_modules and build directories from version control, indicating a Node.js-based project with a build process. The implementation's simplicity makes it a good starting point for developers looking to create custom MCP servers or clients with full control over the implementation details. It's particularly suitable for projects that require a clean slate to build upon, allowing for easy integration of specific APIs or services as needed."
joshuayoes,ios-simulator-mcp,183,1771,"iOS Simulator MCP Tool provides a bridge between Claude and iOS simulators, enabling interaction with virtual iOS devices through a set of specialized tools. Built by Joshua Yoes, it leverages Facebook's IDB tool to allow users to get information about simulators, control UI interactions (tapping, swiping, typing), and inspect UI elements on screen. The implementation is packaged as an NPM module that can be easily integrated with Cursor via MCP configuration, making it valuable for developers who need to test, debug, or demonstrate iOS applications without manually operating the simulator."
HEAD,juce-docs-mcp-server,2,,"Provides direct access to JUCE Framework C++ class documentation through an MCP server, enabling developers to retrieve, search, and explore JUCE class details programmatically. Built by Julius Smith, the server parses HTML documentation from Stanford CCRMA's website, converting class information into markdown-formatted resources that can be easily queried by AI development tools. Useful for developers seeking quick, structured access to JUCE framework documentation during coding and learning."
jotaderodriguez,bonsai_mcp,7,,"Bonsai_mcp is a specialized MCP server that connects Claude to Blender, enabling direct interaction with IFC (Industry Foundation Classes) models through the Bonsai BIM addon. It provides five dedicated IFC tools for querying project information, listing entities, examining properties, exploring spatial structures, and analyzing relationships between building elements. The implementation includes both a Blender addon that creates a socket server within Blender and a Python MCP server that implements the protocol, making it particularly valuable for architects, engineers, and construction professionals who need to analyze and interact with building information models through natural language."
jotaijs,jotai-mcp-server,28,361,"Jotai MCP Server provides AI assistants with access to Jotai documentation resources. Developed by Daishi Kato, this Node.js implementation fetches and serves the main Jotai README and a curated tips document through a simple interface. The server exposes two resources: 'readme' and 'tips', which retrieve content directly from GitHub repositories and make it available in a structured format. It's particularly useful for developers working with the Jotai state management library who need quick access to documentation and best practices without leaving their development environment."
jovanhsu,mcp-neo4j-memory-server,4,,"MCP Neo4j Memory Server provides a knowledge graph storage solution for AI assistants using Neo4j as the backend database. Built by JovanHsu, this implementation enables storing and retrieving contextual information in a graph structure, making it particularly effective for maintaining complex relationships between data points. The server integrates with the Model Context Protocol SDK and uses Fuse.js for fuzzy searching capabilities, allowing AI models to efficiently query and update their memory. Ideal for applications requiring persistent memory across conversations and sophisticated knowledge representation."
jovanipink,mcp-browser-use,31,,"This MCP server for browser-use, developed by JovaniPink, integrates the browser-use library with Anthropic's Model Context Protocol to enable AI agents to interact with web browsers through natural language. Built with Python and FastAPI, it provides a powerful browser automation system with features like vision-based element detection, structured JSON responses, and persistent state management. The implementation focuses on flexibility, supporting multiple model providers and customizable browser settings. It's particularly useful for developers and AI researchers working on web automation, web scraping, or AI-assisted browsing tasks, enabling complex use cases like automated form filling, content extraction, and visual web interaction without dealing directly with browser APIs."
jovezhong,mcp-timeplus,7,9190,"This MCP server implementation provides a bridge to Timeplus, enabling AI assistants to execute SQL queries and retrieve database information. Developed by Jove Zhong, it offers tools for running select queries, listing databases, and listing tables within a specified database. The server is designed to work with Python 3.13 and utilizes the timeplus-connect library for API interactions. It focuses on read-only operations to ensure data safety and includes configuration options for easy integration with Claude Desktop. The implementation is particularly useful for AI applications requiring real-time analytics or data exploration capabilities within Timeplus environments."
jpinillagoshawk,mcp-server-file-modifier,2,,"This MCP server for file modifications, developed by jpinillagoshawk, enables AI assistants to perform targeted edits on text files. It integrates with the Model Context Protocol to provide operations for adding, replacing, and deleting content at specific locations within files. The server handles UTF-8 encoding and exposes a simple API for common file modification tasks. By abstracting file I/O operations, this implementation allows AI systems to make precise changes to documents without direct file system access. It is particularly useful for scenarios requiring automated document updates, code refactoring, or any application where an AI assistant needs to modify text files programmatically."
jsonallen,laravel-mcp,10,,"This MCP server implementation provides tools for Laravel development, including log file analysis, error tracking, and Artisan command execution. It integrates with Laravel projects by utilizing environment variables to locate and interact with the Laravel directory. The server offers functionalities such as tailing log files, searching for errors within specified time windows, and displaying model details with a focus on relationships. It's designed for developers working on Laravel applications who need quick access to logs and common Laravel operations through an MCP interface."
jsonallen,perplexity-mcp,122,21170,"This Perplexity MCP server, developed by Jason Allen, provides AI assistants with web search capabilities using the Perplexity AI API. Built with Python using libraries like aiohttp and pydantic, it offers a streamlined interface for performing web searches and retrieving results. The server implements environment-based configuration for API key management and uses the Model Context Protocol to standardize interactions. By abstracting the complexities of API communication, it enables AI systems to easily incorporate up-to-date web information into their workflows. This implementation is particularly valuable for applications requiring real-time access to web data, facilitating use cases such as fact-checking, research assistance, and information retrieval across various domains."
jsonresume,mcp,34,2449,"This MCP server implementation enhances JSON Resumes with GitHub project information. It analyzes the user's current codebase, fetches existing resumes from GitHub gists, and uses OpenAI's API to intelligently update the resume with relevant project details. The server offers tools for codebase analysis, resume checking, and resume enhancement, making it useful for developers looking to automatically keep their professional profiles up-to-date with their latest work."
jsuarezruiz,github-triage-mcp-server,1,,"GitHub Triage MCP streamlines issue management workflows in GitHub repositories by providing tools for automated triage and labeling. Built with .NET, it offers capabilities to retrieve issue information, identify untriaged issues, manage labels, and apply AI-assisted labeling through LLM integration. The server requires a GitHub Personal Access Token and OpenAI API key to function, making it particularly useful for repository maintainers looking to reduce manual triage work and standardize issue categorization across projects. The implementation includes specialized tools for counting issues, fetching labels, summarizing issues, and intelligently adding labels based on issue content."
jtrogers,goose-gdrive-classifier-processor,0,,"The Google Drive Classifier Processor MCP server enables AI agents to automatically classify documents stored in Google Drive using LLMs. Developed by jtrogers, it processes documents in batches, extracting content from various file types and applying classification based on customizable rubrics. The server features real-time progress updates, confidence thresholds, and validation capabilities to ensure accuracy. It integrates with both Google Drive and OpenAI APIs to analyze document content, assign categories with confidence scores, and update document properties with classification metadata. Particularly valuable for organizations needing to organize large document repositories, identify sensitive information, or implement automated document management workflows."
jtucker,mcp-untappd-server,0,,"This MCP server provides a bridge to the Untappd API, enabling AI assistants to search for beers, retrieve detailed beer information, and access user check-ins. Developed by jtucker, it offers three main tools: search_beer, get_beer_info, and get_user_checkins. The server is built with Node.js and TypeScript, and includes features for easy development and debugging. It's designed for use cases requiring beer-related data retrieval and analysis."
jtucker,mcp-untappd-server-dotnet,5,,"This Azure Functions-based MCP server provides access to the Untappd beer database API, allowing AI assistants to retrieve detailed information about specific beers by their ID. Written in F# by jtucker, it serves as a .NET port of an existing Node.js implementation, leveraging Server Sent Events for communication with Claude Desktop. The server handles authentication with the Untappd API through client credentials and formats responses for consumption by AI assistants. It's particularly useful for applications requiring beer information lookup, brewing analysis, or beverage recommendations."
zefanhu,mcp-rapidapi-judge0-server,1,,"A Judge0 RapidAPI integration server for the Model Context Protocol that enables AI assistants to execute code in various programming languages. Built with Node.js and leveraging the MCP SDK, this implementation provides a simple interface to the Judge0 code execution API, allowing for remote compilation and running of code snippets. It's particularly useful for scenarios requiring code testing, algorithm validation, or educational demonstrations without needing local development environments."
juhemcp,jnews-mcp-server,0,1425,"A lightweight server implementation for the MCP protocol built with Python and FastAPI, designed to provide a streamlined interface for server-side interactions. The project uses modern Python tooling like uv for dependency management and includes GitHub Actions for automated testing and publishing, with a focus on clean, type-checked code and easy deployment."
juhemcp,jexchange-mcp-server,0,1175,"JExchange MCP Server provides a lightweight, asynchronous server implementation for the Model Context Protocol (MCP). Built with Python 3.10, it leverages the MCP library with CLI support to enable AI assistants to interact with external services. The server uses modern Python features including asyncio for handling concurrent requests and includes GitHub workflows for automated testing, formatting, and publishing to PyPI. This implementation is designed for developers who need a simple, reliable foundation for building MCP-compatible services that can be easily deployed and maintained."
juicetea,mcp-cursor-project,0,,"MCP Cursor Project integrates GitHub repositories with Cursor IDE through the Model Context Protocol, allowing AI assistants to access and interact with GitHub content directly within the editor. The implementation uses the @modelcontextprotocol/server-github package to establish a connection between Cursor and GitHub repositories, requiring only a GitHub Personal Access Token for authentication. This server-based approach enables developers to leverage AI capabilities while working with their code, supporting custom MCP commands and tools that enhance the coding workflow in Cursor IDE."
jumasheff,mcp-ragdoc-fork,0,,"MCP-RAGDocs is a server implementation that provides semantic documentation search and retrieval using vector databases to augment LLM capabilities. Developed by hannesrudolph and forked by jumasheff, it enables AI assistants to search through stored documentation, extract URLs from web pages, manage documentation sources, and process queues of URLs for indexing. The server uses Qdrant for vector storage and supports multiple embedding providers including Ollama and OpenAI, making it particularly valuable for enhancing AI responses with relevant documentation context without requiring users to switch between interfaces."
jurasofish,mcpunk,41,29578,"This MCP implementation, developed by Michael Jurasovic, provides a Python-based framework for building and interacting with MCP servers. It leverages libraries like FastMCP, GitPython, and SQLAlchemy to offer a robust foundation for creating MCP tools and resources. The implementation includes features for version control integration, database management, and asynchronous operations. It stands out by focusing on extensibility and developer-friendly abstractions, making it easier to create custom MCP servers and clients. This framework is particularly useful for developers looking to rapidly prototype and deploy MCP-compatible applications, especially those requiring integration with existing Python codebases or complex data processing workflows."
justaname-id,ens-mcp-server,5,1500,"The ENS MCP Server enables Claude to interact with the Ethereum Name Service, providing tools to resolve ENS names to Ethereum addresses, perform reverse lookups, retrieve text records, check name availability, get registration prices, and explore name history. Built with TypeScript using the Model Context Protocol SDK, it connects to Ethereum networks through configurable providers and implements robust error handling for network issues and invalid inputs. This implementation by JustaName offers a complete interface to ENS functionality, making it valuable for blockchain applications that need to work with decentralized naming systems or verify Ethereum identity information."
justasmonkev,mcp-accessibility-scanner,3,,"This accessibility scanner, developed for the Model Context Protocol, integrates Axe Core with Playwright to perform automated web accessibility testing. Built with TypeScript, it leverages the MCP SDK to provide a standardized interface for running accessibility checks on web pages. The implementation focuses on ease of use and comprehensive reporting, offering detailed insights into accessibility issues. It's particularly useful for developers and quality assurance teams working on web applications, enabling use cases such as continuous integration testing, compliance auditing, and identifying accessibility barriers without manual inspection of each page element."
justinpbarnett,unity-mcp,1570,,"A Unity package that enables seamless communication between Unity and Large Language Models (LLMs) like Claude Desktop via the Model Context Protocol (MCP). This server acts as a bridge, allowing Unity to send commands to and receive responses from MCP-compliant tools, empowering developers to automate workflows, manipulate assets, and control the Unity Editor programmatically."
jwaldor,mcp-api-expert,8,1333,"This MCP API Connect tool, developed by Jacob Waldor, provides a flexible interface for integrating any REST API into MCP-compatible workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it allows users to dynamically connect to APIs by simply providing API documentation and keys in a message. The implementation stands out by offering a global npm package with an easy setup process, making it accessible for both developers and non-technical users. It's particularly useful for rapidly prototyping AI-assisted applications that require real-time data from various web services, enabling seamless integration of external data sources into AI workflows without the need for extensive coding or API-specific implementations."
jwalsh,mcp-server-qrcode,2,2816,"This MCP server implementation provides QR code generation functionality. Developed by Jason Walsh, it utilizes the qrencode utility and offers a command-line interface as well as integration with MCP clients like Claude Desktop and MCP Inspector. The server supports various output formats and configuration options, making it suitable for use cases requiring dynamic QR code creation within AI-assisted applications or workflows."
juhemcp,jweather-mcp-server,0,1263,"JWeather MCP Server provides a weather data service for AI assistants, built on the MCP framework. The server is implemented in Python 3.10 and uses asyncio for handling concurrent requests. It leverages GitHub Actions for automated testing, formatting, and type checking, with PyPI publishing configured for releases. The implementation follows modern Python packaging practices with uv for dependency management and includes comprehensive CI/CD workflows for quality assurance."
jxnl,python-apple-mcp,3,,"Python Apple MCP enables AI assistants to interact with macOS native applications through AppleScript. This implementation provides modules for Contacts, Notes, Mail, Messages, Reminders, Calendar, and Maps, offering asynchronous operations with comprehensive error handling and type-safe interfaces using Pydantic models. Built with a modular design for easy extension, it allows AI systems to perform tasks like searching contacts, creating notes, sending emails, scheduling events, and getting directions - making it particularly valuable for automating personal information management tasks on macOS."
jxnl,spiral-mcp,13,,"Spiral MCP Server provides a standardized interface for interacting with Spiral's language models through four powerful tools: listing available models, generating text from prompts, processing content from files, and extracting article content from URLs. Built with FastMCP, it features robust error handling, asynchronous operations for better performance, and smart article extraction capabilities using BeautifulSoup. The implementation is particularly valuable for content generation workflows that require processing inputs from various sources, making it ideal for blog writing, technical documentation expansion, and news article analysis without leaving the conversation interface."
jzinno,biomart-mcp,0,,"This MCP server implementation provides a bridge to Biomart, a powerful bioinformatics data retrieval system. Developed by John Zinno, it enables AI assistants to perform advanced biological data queries, including gene information retrieval, ID translation, and dataset exploration. The server integrates closely with the pybiomart package, offering features like attribute and filter exploration, data retrieval, and caching for improved performance. It's designed for applications requiring access to genomic, proteomic, and other biological datasets."
kablewy,fred-mcp-server,3,,"This FRED (Federal Reserve Economic Data) MCP server provides AI assistants with access to economic data from the Federal Reserve Bank of St. Louis. It integrates with the FRED API to offer tools for retrieving time series data, searching for economic indicators, and obtaining metadata about data series. Built with TypeScript and the @modelcontextprotocol/sdk, it implements automatic rate limiting to comply with FRED's usage guidelines. The server abstracts the complexities of working with economic datasets, allowing AI systems to easily incorporate up-to-date economic indicators into their analyses. It is particularly useful for economists, financial analysts, and AI developers working on economic modeling or forecasting applications, enabling use cases like trend analysis, economic research, and data-driven policy recommendations."
kablewy,salesforce-mcp-server,21,,"This Salesforce MCP server, developed as an open-source project, enables AI assistants to interact with Salesforce data and operations through the Salesforce REST API. It provides a streamlined interface for executing SOQL queries, retrieving object metadata, and performing CRUD operations on Salesforce records. The server abstracts the complexities of Salesforce authentication and API calls, offering a set of high-level functions that simplify data access and manipulation. By connecting AI systems with real-time Salesforce data, this implementation facilitates tasks such as customer data analysis, sales pipeline management, and automated CRM updates. It is particularly useful for AI applications requiring integration with Salesforce, such as intelligent sales assistants, automated reporting tools, or any system that needs to programmatically interact with Salesforce data."
kadykov,mcp-openapi-schema-explorer,0,229,"MCP OpenAPI Schema Explorer is a TypeScript server that provides token-efficient access to OpenAPI (v3.0) and Swagger (v2.0) specifications. Developed by Aleksandr Kadykov, it transforms large API specifications into navigable MCP resources with URI-based references, allowing AI assistants to explore API structures without loading entire specs into their context windows. The server loads specs from local files or remote URLs, automatically converts Swagger v2.0 to OpenAPI v3.0, and returns information in configurable formats (JSON, YAML, or minified JSON), making it particularly valuable for working with complex APIs that would otherwise consume excessive tokens."
54yyyu,kaggle-mcp,3,466,"Kaggle-MCP provides a bridge between Claude AI and the Kaggle API, enabling AI assistants to interact with Kaggle's competitions, datasets, kernels, and models. The implementation offers a comprehensive set of tools for authenticating with Kaggle, browsing competitions, downloading datasets, managing kernels, and working with machine learning models. Built on the Model Context Protocol, it allows Claude to perform operations like listing active competitions, searching datasets, submitting to competitions, and creating or updating models—all while maintaining proper authentication and file handling. This integration is particularly valuable for data scientists and machine learning practitioners who want to leverage Claude's capabilities while working with Kaggle's resources."
kagisearch,kagimcp,58,,"This Kagi MCP server, developed by Rehan Ali Rana at Kagi Search, integrates the Kagi API into AI-assisted workflows. Built with Python and leveraging libraries like httpx and pydantic, it provides a standardized interface for accessing Kagi's search capabilities through Claude Desktop and compatible MCP clients. The implementation supports Kagi's advanced search features and is designed for easy setup and use. It's particularly useful for researchers, developers, and professionals looking to incorporate high-quality, privacy-focused search results into their AI-assisted applications, enabling more informed decision-making and analysis based on up-to-date web information."
weerofun,kaiafun-mcp,1,,"KaiaFun MCP Server enables AI assistants to interact with the KaiaFun memecoin platform on the Kaia blockchain. It provides tools for listing new memecoins, buying and selling tokens, retrieving token information, and uploading images. The implementation uses the viem library for blockchain interactions and includes features for wallet management, transaction handling, and metadata storage. Ideal for users wanting to automate memecoin trading operations or create AI-powered interfaces for the KaiaFun ecosystem."
kailashappdev,graphql-mcp-toolkit,0,,"GraphQL MCP Toolkit is a server implementation that enables LLMs to interact with GraphQL APIs through schema introspection and query execution. It provides two main tools: one for retrieving GraphQL schemas and another for executing queries against endpoints, with mutations disabled by default as a security measure. The implementation supports custom headers for authentication, local schema files as an alternative to introspection, and is containerized for easy deployment. Particularly valuable for developers who want to give AI assistants the ability to discover and use GraphQL APIs dynamically without requiring prior knowledge of the schema."
kailashappdev,figma-mcp-toolkit,1,443,"Figma Component Extractor MCP server enables AI assistants to extract and analyze components from Figma design files. Built by Kailash G, it provides tools for fetching component data, extracting component properties, and converting Figma designs into structured representations. The server requires a Figma API token and file ID to connect to design files, and includes utilities for processing component hierarchies, normalizing naming conventions, and generating component metadata. This implementation is particularly valuable for design-to-code workflows, allowing seamless integration between Figma designs and React Native development without leaving the conversation interface."
kajirita2002,esa-mcp-server,7,433,"Provides a bridge between Claude AI and the esa API, enabling AI-driven document management through tools for searching, creating, updating and deleting posts and comments. Built by kajirita2002, this Node.js implementation exposes a full suite of esa's functionality including member management and post categorization, making it valuable for teams who want to leverage AI assistance for their esa-based documentation and knowledge management workflows."
cachij,kakao-navigation-mcp-server,3,,"A Kakao Navigation MCP server that enables AI assistants to access Kakao Maps and Mobility APIs for route planning and location services. The implementation provides tools for direction searching using coordinates or addresses, geocoding, and place name searches. It leverages Kakao's REST API with proper authentication to retrieve navigation data, making it useful for applications that need to calculate routes, find locations, or provide travel directions within Korea. The server returns structured JSON responses that can be easily parsed and presented to users."
kakehashi-inc,mcp-server-mattermost,1,,"A web scraping and content extraction MCP server built by Kakehashi Inc, designed to fetch and process web content with robust features like robots.txt compliance, LRU caching, and markdown conversion. The implementation supports both autonomous and manual fetching modes, with configurable user agents and the ability to handle various content types while providing pagination and error handling for web resource retrieval."
kalepail,stellar-mcp-server,2,,"A Stellar blockchain integration server for the MCP that enables AI assistants to interact with Soroban smart contracts. Built with TypeScript and deployed on Cloudflare Workers, this implementation provides tools for deploying fungible tokens, managing wallet addresses, and executing contract functions on the Stellar testnet. It features a durable object storage system to maintain user-specific contract addresses and credentials, OAuth-based authentication, and integration with PasskeyKit for transaction signing. The server dynamically generates MCP tools from contract specifications, allowing AI assistants to perform operations like token minting, transfers, and custom contract interactions without requiring blockchain expertise."
kaliaboi,mcp-zotero,74,2073,"This Zotero MCP server, developed by Abhishek Kalia, provides AI assistants with a standardized interface to interact with Zotero libraries. Built using TypeScript and leveraging the Zotero API client, it offers capabilities for listing collections, retrieving item details, searching libraries, and fetching recently added papers. The server abstracts Zotero API authentication and request handling, enabling seamless integration with AI systems. It's particularly valuable for researchers and academics working with AI assistants, facilitating use cases such as literature reviews, citation management, and research organization within the Zotero ecosystem."
kallows,mcp-bitbucket,1,,"Bitbucket MCP server provides a robust integration with the Bitbucket API, enabling programmatic repository management through a standardized interface. It supports a wide range of operations including repository creation, file manipulation, issue tracking, and branch management, with comprehensive error handling and permission management. Designed for developers and automation workflows, this implementation simplifies interactions with Bitbucket by abstracting complex API calls into straightforward, configurable tools."
kallows,mcp-jira-python,3,,"This JIRA MCP server implementation, developed in Python, provides a bridge between AI assistants and JIRA's project management capabilities. Leveraging libraries like jira, mcp-server, and pydantic, it offers tools for issue tracking, project management, and workflow automation. The implementation focuses on simplifying interactions with JIRA's API, making it accessible for AI models to create, update, and query issues, manage projects, and automate workflows. It's particularly useful for tasks like automated bug tracking, sprint planning, or integrating project management into AI-driven systems, enabling assistants to interact with JIRA without requiring deep knowledge of the underlying API complexities."
66julienmartin,mcp-server-deepseek_r1,50,,"This MCP server, developed by Kamel IRZOUNI, provides integration with the Deepseek R1 model. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with Deepseek's advanced language model capabilities. The implementation focuses on providing a standardized interface for text generation and analysis tasks, making it easier to incorporate Deepseek's AI features into various applications. It's particularly useful for developers and teams who want to leverage Deepseek's language model in their AI workflows, enabling use cases such as content generation, text analysis, and AI-assisted decision-making without directly managing API interactions with Deepseek."
66julienmartin,mcp-server-qwen_max,12,,"This MCP implementation, developed by Kamel IRZOUNI, provides integration with the Qwen Max large language model via the Dashscope API. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with Qwen Max's advanced natural language processing capabilities. The implementation focuses on providing a standardized interface for text generation and analysis tasks. It's particularly useful for developers and researchers who want to incorporate Qwen Max's language understanding into their applications, enabling use cases such as content generation, text analysis, and conversational AI without directly managing API calls to Dashscope."
kaneyxx,weekly-report-mcp,0,,"A lightweight MCP server designed to check and process weekly reports, integrating with Google Sheets via the gspread library. The server provides a development mode for easy testing and configuration, with a simple script-based deployment process. Useful for teams needing automated weekly report validation and tracking."
kapilduraphe,okta-mcp-server,8,,"Okta MCP Server enables Claude to interact with Okta's user management system through a Node.js implementation that connects to the Okta API. Developed by Kapil Duraphe, it currently provides a 'get_user' tool that retrieves detailed user information including profile data, account status, employment details, and contact information. The server handles authentication through Okta API tokens, includes robust error handling for common issues like missing users or authentication problems, and is designed to be integrated with Claude Desktop for seamless user information retrieval directly within conversations."
kapilduraphe,webflow-mcp-server,11,,"This MCP server implementation provides a bridge to the Webflow API, enabling AI assistants to interact with Webflow sites. Developed by Kapil Duraphe, it offers tools for retrieving site information, including detailed data on custom domains, locales, and data collection settings. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on secure API token management and robust error handling, making it suitable for developers and AI applications that need to automate Webflow site management tasks or integrate Webflow data into their workflows. The implementation is designed for easy setup and configuration within the Claude Desktop environment."
timkjones,mcp-webflow,0,3087,"The Webflow MCP Server enables Claude to interact with Webflow's APIs, providing tools to retrieve site information and manage collections. Built with TypeScript and Node.js, it authenticates using a Webflow API token to securely access site data, custom domains, localization settings, and collection details. The implementation supports both local development and deployment via Smithery, making it valuable for content creators and web developers who need to manage their Webflow sites directly through AI assistants without switching contexts."
karaage0703,notion-mcp-light,27,,"Notion-MCP-Light is a Python-based server implementation that provides AI assistants with access to Notion workspaces through a simplified interface. It converts Notion content to Markdown format, making it easier to retrieve and manipulate information stored in Notion databases and pages. The server includes components for authenticating with the Notion API, converting complex Notion blocks to clean Markdown, and serving the content through an MCP-compatible interface. This implementation is particularly useful for teams who want to enable AI assistants to read from, search through, or summarize their Notion knowledge bases without requiring complex integration code."
karayaman,lichess-mcp,2,,"This MCP server enables natural language interaction with the Lichess chess platform, integrating with its API to manage accounts, play games, analyze positions, and participate in tournaments. Developed by Alper Karayaman, it leverages the Model Context Protocol to provide a seamless interface for AI assistants like Claude Desktop to engage with Lichess functionalities. The server is particularly useful for chess enthusiasts looking to enhance their gameplay, analysis, and community engagement through AI-assisted interactions."
kartha-ai,agentcare-mcp,31,,"This MCP server implementation provides healthcare tools and prompts for interacting with FHIR data and medical resources on Electronic Medical Record (EMR) systems like Cerner and Epic. Developed by Kartha, it integrates with SMART on FHIR APIs and uses OAuth2 for authentication. The server offers a range of FHIR tools for patient data retrieval, including observations, conditions, medications, and encounters. It also incorporates medical research integration with PubMed, Clinical Trials, and FDA databases. The implementation features response caching, error handling, and null-safe data formatting. It is particularly useful for AI-assisted clinical analysis, patient data management, and medical research tasks in healthcare settings."
mcp,snak,84,,"Snak is a toolkit for creating AI agents that interact with the Starknet blockchain, developed by Kasar Labs. The implementation provides both a ready-to-use NestJS server with web interface and an NPM package, supporting multiple AI providers including Anthropic, OpenAI, Google Gemini, and Ollama. It features a modular architecture with plugins for various DeFi operations, wallet management capabilities, and autonomous agent functionality, making it ideal for developers building blockchain-powered AI assistants that can execute transactions, monitor balances, and interact with smart contracts on Starknet."
kashiwabyte,vikingdb-mcp-server,2,7261,"This MCP server, developed by KashiwaByte, provides AI assistants like Claude with access to VikingDB for storing and searching information. It offers tools for introducing collections and indexes, upserting data, and performing searches within VikingDB. The server integrates seamlessly with Claude Desktop on both macOS and Windows, enabling AI-powered data management and retrieval. By bridging AI capabilities with VikingDB's storage and search functionalities, this implementation facilitates efficient information organization and retrieval. It is particularly useful for scenarios requiring persistent data storage, quick information lookup, or generating insights from stored data in AI-assisted research, knowledge management, and decision-making applications."
kashuncheng,dap_mcp,5,3660,"dap-mcp is a server implementation that bridges debugging tools with AI systems through the Debug Adapter Protocol (DAP). It enables AI assistants to control debuggers, set breakpoints, step through code, evaluate expressions, and inspect variables - all through standardized MCP tools. The server supports multiple debugging backends (currently debugpy) and renders debugging information in XML format for easy consumption by LLMs, making it particularly valuable for AI-assisted debugging workflows where context about program state needs to be maintained throughout a conversation."
katsuhirohonda,mcp-backlog-server,0,,"This MCP server implementation provides integration with Backlog, a project management and collaboration tool. Developed in TypeScript, it offers resources for accessing Backlog projects, tools for interacting with the Backlog API, and prompts for generating summaries and analyses of Backlog data. The server is designed for use cases requiring AI assistants to interact with Backlog, such as project overview generation, task management, or team collaboration analysis."
kaznak,shell-command-mcp,3,,"Shell Command MCP Server provides a secure environment for executing shell commands within a Docker container, offering isolation from the host system. Developed by Nakamura Kazutaka, this TypeScript implementation uses the MCP SDK to expose a single tool that allows running any bash command with configurable working directory, environment variables, and timeout settings. The server runs as a non-root user in the container and includes Kubernetes tools (kubectl, helm, kustomize, k9s), making it particularly useful for DevOps workflows, infrastructure management, and secure command execution in AI-assisted development environments."
kazuph,mcp-browser-tabs,5,1639,"This MCP server, developed by kazuph, enables retrieval and management of Chrome browser tabs information on macOS. It integrates with Claude Desktop and other MCP clients, allowing them to fetch data about and control open Chrome tabs using AppleScript. The implementation provides tools for getting all open tabs and closing specific tabs by window and tab indices. Its focus on browser tab management differentiates it from more general-purpose MCP implementations. This tool is particularly useful for AI assistants and automation scripts that need to interact with or analyze a user's current browsing session."
kazuph,mcp-devin,0,,"Integrates Devin AI with Slack to enable seamless collaboration between AI assistants and team communication. The server provides tools for creating Devin sessions that automatically post to Slack channels, maintaining thread context between Devin and Slack conversations, and managing sessions with enhanced Slack integration features. Built with TypeScript and the Slack Web API, it's particularly valuable for teams who want to incorporate AI assistance directly into their existing Slack workflows while keeping conversations organized and contextual."
kazuph,mcp-docs-rag,3,,"This MCP server implements a Retrieval-Augmented Generation (RAG) system for documents stored in a local directory, enabling AI assistants to query and interact with Git repositories and text files. Built with TypeScript and leveraging LlamaIndex with Google's Gemini embeddings, it provides tools for listing documents, performing RAG queries against document collections, and adding new content through Git repository cloning or text file downloads. The server requires a Gemini API key for document indexing and querying, and is designed for integration with Claude Desktop, making it ideal for users who need to reference and analyze documentation, code repositories, or text collections during conversations with AI assistants."
kazuph,mcp-fetch,15,8611,"This MCP server, developed by kazuph, enables web content fetching and image processing capabilities for AI assistants. It integrates with libraries like jsdom, Readability, and Sharp to extract readable content from web pages, convert HTML to Markdown, and process images for optimal viewing. The implementation handles robots.txt restrictions, merges multiple images vertically with size limits, and uses macOS clipboard operations for seamless image insertion. It's designed for scenarios requiring web scraping, content summarization, or image handling within AI conversations, allowing assistants to fetch and process web content on demand while respecting web standards and optimizing for readability."
kazuph,mcp-github-pera1,2,1987,"This GitHub MCP server, developed by kazuph, connects GitHub code repositories to Claude.ai using the Pera1 service. It extracts code and context from GitHub repos to provide better information to Claude when discussing codebases. The implementation uses TypeScript and leverages the @modelcontextprotocol/sdk for MCP compatibility. It's designed for developers and teams who want to seamlessly integrate GitHub discussions into their AI workflows, enabling natural language queries about code structure, dependencies, and development history directly through Claude's interface."
kazuph,mcp-gmail-gas,9,938,"This MCP server, developed by kazuph, integrates Gmail functionality into the Model Context Protocol ecosystem. It allows AI assistants to interact with Gmail accounts through Google Apps Script, enabling email search, message retrieval, and attachment downloads. The implementation uses TypeScript and leverages the @modelcontextprotocol/sdk for MCP compatibility. It's designed for users who want to incorporate email management into their AI workflows, providing a secure way to access Gmail data through Claude Desktop or other MCP clients."
kazuph,mcp-screenshot,11,,"This MCP screenshot server, developed by kazuph, provides AI assistants with the ability to capture and analyze screen content on macOS. Built with TypeScript and leveraging libraries like Tesseract.js for OCR, it offers capabilities for taking screenshots of specific screen regions (left, right, or full) and performing text recognition on the captured images. The server integrates with the macOS system through AppleScript, automatically saving screenshots to dated folders in the user's Downloads directory. It's particularly useful for AI assistants focused on visual analysis, enabling use cases such as automated UI testing, content extraction from applications, and visual data processing in macOS environments."
kazuph,mcp-obsidian,4,1278,"This MCP server, developed by kazuph, enables seamless integration between Claude Desktop (or any MCP client) and Obsidian vaults. It provides tools for reading, searching, and writing notes within specified Obsidian directories, leveraging TypeScript and the @modelcontextprotocol/sdk for robust implementation. The server includes security measures like path validation and symlink handling to ensure safe access to vault contents. It's particularly useful for users who want to incorporate their personal knowledge base into AI-assisted workflows, allowing for natural language queries and updates to Obsidian notes through MCP-compatible interfaces."
kazuph,mcp-pocket,8,679,"This MCP server integrates with the Pocket API, allowing AI assistants to interact with users' saved articles. Developed by kazuph, it enables fetching unread articles and marking them as read through natural language commands. The TypeScript implementation uses the Model Context Protocol SDK and Zod for robust type checking. It's designed for Pocket users who want to incorporate AI assistance into their reading workflow, enabling tasks like summarizing saved articles, prioritizing reading lists, or analyzing reading habits through conversational interfaces."
kazuph,mcp-taskmanager,42,4805,"This MCP server, developed by kazuph, implements a task management system with a focus on structured workflows and user approval. It provides tools for planning, executing, and tracking tasks within requests, enforcing a step-by-step process that requires explicit user approval at key stages. The implementation uses TypeScript and leverages the @modelcontextprotocol/sdk for MCP compatibility. It's designed for scenarios where careful oversight and approval of task completion is critical, making it well-suited for project management in regulated industries, quality assurance processes, or any workflow where each step needs verification before proceeding."
rudra-ravi,mcp-taskmanager,3,,"The MCP TaskManager server enables Claude Desktop to manage and execute tasks in a queue-based system. Developed by kazuph, it provides a structured approach to task management with two main phases: planning (accepting task lists and storing them as a queue) and execution (retrieving, completing, and tracking tasks). The implementation uses Cloudflare Workers with KV storage for persistence and offers tools for creating task plans, tracking progress with visual tables, approving completions, and managing task lifecycles. This server is particularly useful for breaking down complex requests into manageable steps, maintaining context across conversations, and ensuring methodical completion of multi-step workflows."
kazuph,mcp-youtube,4,1908,"This MCP server, developed by kazuph, uses yt-dlp to download subtitles from YouTube videos and connects them to claude.ai via the Model Context Protocol. It supports multiple languages and allows for flexible subtitle retrieval based on user-specified language codes. The implementation is designed for easy integration into Node.js projects and can be run using npx. It's particularly useful for developers looking to incorporate YouTube content analysis or transcription capabilities into their AI-powered applications, enabling natural language queries about video content through Claude."
kazz187,mcp-google-spreadsheet,9,,"MCP Google Spreadsheet provides a bridge between AI assistants and Google Drive/Sheets, enabling comprehensive document management capabilities. Developed by Kazuki Akamine, this Go-based server implements tools for listing, copying, and renaming files in Google Drive, as well as manipulating Google Sheets through operations like listing sheets, retrieving data, adding rows/columns, and updating cells. The implementation handles Google authentication and uses the metoro-io/mcp-golang library to expose these capabilities through a standardized interface. It's particularly useful for workflows requiring document automation, data extraction, or spreadsheet manipulation directly from AI conversations without switching contexts."
kbyk004,playwright-lighthouse-mcp,1,,"Playwright-Lighthouse MCP server enables Claude to analyze website performance by combining Playwright's browser automation with Lighthouse's auditing capabilities. Built with TypeScript, it offers two main tools: 'run-lighthouse' for comprehensive performance analysis across multiple categories (performance, accessibility, SEO, etc.) with detailed improvement recommendations, and 'take-screenshot' for capturing full or partial webpage images. The server automatically handles browser sessions, generates performance reports with color-coded scores, and saves outputs to local directories, making it valuable for web developers seeking to identify and address performance bottlenecks directly within Claude conversations."
kelnishi,popui,2,1854,"PopUI is a companion desktop app that creates a bi-directional bridge between Claude Desktop and visual interfaces. It enables Claude to create, display, and interact with user interfaces through a specialized MCP server, allowing both Claude and users to manipulate a shared visual context in real-time. The implementation leverages Electron to render React components dynamically, supports Tailwind CSS for styling, and includes features for sending messages back to Claude, making it particularly valuable for collaborative experiences like control panels, games, visualization tools, and other interactive interfaces where visual context enhances the conversation."
kelvin6365,plane-mcp-server,13,,"A Model Context Protocol server that enables LLMs to interact with Plane.so project management platform, allowing AI assistants to manage projects and issues through Plane's API. Built by Kelvin Kwong, this implementation provides tools for listing projects, creating and updating issues, filtering by priority, and managing assignees - all while maintaining user control through explicit approval for data modifications. The server uses a stdio transport for communication and includes robust error handling for API interactions, making it particularly valuable for teams looking to integrate AI assistants into their project management workflows."
kenazk,gong-mcp,3,,"Gong MCP Server provides a standardized interface for Claude to access Gong's API, enabling retrieval of call recordings and transcripts. Built with TypeScript and the MCP SDK, it offers tools for listing calls with date filtering and retrieving detailed transcripts with speaker information. The implementation securely authenticates with Gong using API credentials and can be deployed locally or via Docker, making it particularly valuable for analyzing sales conversations, reviewing customer interactions, and extracting insights from recorded calls without leaving the Claude environment."
kenjihikmatullah,productboard-mcp,5,501,"This MCP server integrates the Productboard API into agentic workflows, enabling access to various Productboard features such as companies, components, features, and products. Developed by Kenji Hikmatullah, it provides a set of tools for retrieving detailed information from Productboard, making it useful for product management tasks, feature tracking, and customer-centric development processes within AI-assisted environments."
kenliao94,mcp-server-rabbitmq,13,,"This RabbitMQ MCP server, developed by Ken Liao, enables AI assistants to interact with RabbitMQ message queues through the Model Context Protocol. Built in Python, it provides a bridge between MCP clients and RabbitMQ instances, allowing operations like publishing and consuming messages. The implementation leverages libraries such as Pika for RabbitMQ communication and supports TLS for secure connections. By abstracting queue operations into MCP-compatible endpoints, it allows AI systems to easily integrate messaging capabilities without directly handling RabbitMQ complexities. This server is particularly useful for scenarios requiring AI-driven message processing, event-driven architectures, or automated workflow management in distributed systems."
kennethreitz,mcp-applemusic,28,19344,"This MCP implementation, developed by Kenneth Reitz, provides integration with Apple Music on macOS systems. Built with Python and leveraging AppleScript, it offers tools for controlling music playback, searching the library, creating playlists, and retrieving library information. The implementation focuses on providing a simple, standardized interface for AI-powered music control, enabling use cases such as voice-activated music playback, automated playlist generation, and music library analysis. By connecting AI models with the Apple Music application, this server allows for sophisticated music interaction scenarios, enhancing the ability to manage and enjoy music through AI assistants or custom applications."
kennyckk,mcp_hkbus,3,,"KMB Bus MCP Server provides real-time access to Hong Kong's Kowloon Motor Bus information through a set of specialized tools. The implementation connects to the official KMB API to retrieve bus routes, stops, and estimated arrival times, offering functions to find buses by destination, locate stops by name, get route details, and check next bus arrivals. Built with Python using FastMCP, it includes intelligent caching to minimize redundant API calls and comprehensive error handling for reliable operation. Ideal for Hong Kong residents and visitors who want to query public transportation information through conversational AI."
kentaro,aivis-speech-mcp,0,,"AivisSpeech MCP Server provides a bridge between AI assistants and text-to-speech capabilities through the AivisSpeech API. This implementation enables AI agents to generate and play speech audio from text input, with configurable speaker settings. The server exposes the speech synthesis functionality as MCP tools that can be called programmatically, making it valuable for applications requiring voice output such as accessibility tools, language learning, or interactive voice assistants."
keonchennl,mcp-graphdb,2,,"GraphDB MCP Server provides read-only access to Ontotext GraphDB repositories, enabling LLMs to explore RDF graphs and execute SPARQL queries. The server exposes tools for running SPARQL queries and listing graphs, along with resources that provide structured views of repository data including class lists, predicates, statistics, and sample data. Built with TypeScript using the Model Context Protocol SDK, it supports authentication, custom query formats, and graph-specific operations, making it particularly valuable for AI assistants that need to analyze semantic data stored in RDF triple stores without switching contexts."
kerongon,mcp-server-mamp-mysql,0,,"This MySQL MCP server provides a standardized interface for connecting to and querying MAMP MySQL databases via socket connections. Built with TypeScript and leveraging the mysql2 library, it offers tools for listing database tables, retrieving schema information, and executing read-only SQL queries. The server implements connection pooling for improved performance and security. By abstracting MySQL database interactions into an MCP interface, it enables AI systems to easily access and analyze data stored in MAMP environments. This implementation is particularly useful for developers working with MAMP stacks who need to integrate database querying capabilities into MCP-compatible systems, facilitating use cases such as data exploration, schema analysis, and read-only data retrieval."
laulauland,bluesky-context-server,19,,"This Bluesky Context Server, developed by keturiosakys, provides a streamlined interface for language models to interact with Bluesky instances. It enables AI agents to query and retrieve data from the decentralized social network, making it ideal for AI-driven content analysis and social media automation tasks. The implementation distinguishes itself by offering a simple setup process and integration with Claude Desktop, making it easily accessible for developers and researchers. By leveraging Bluesky's API, it ensures authorized access to user data and posts. This tool is particularly useful for AI assistants designed to analyze social media trends, automate content creation, or provide intelligent insights from Bluesky conversations. Its lightweight design and focus on Bluesky-specific functionality make it a targeted solution for projects involving this emerging social platform."
keurcien,choose-mcp-server,0,,"This MCP server implementation provides a bridge to Google BigQuery and BigQuery Storage, enabling AI assistants to interact with large-scale data analytics. Developed by keurcien, it offers tools for executing SQL queries, retrieving schema information, and fetching current time. The server is built using Python and integrates with FastMCP, SQLAlchemy, and LangChain. It focuses on efficient data retrieval and analysis from BigQuery datasets. The implementation is designed for easy setup within the Claude Desktop environment and is particularly useful for AI applications requiring access to and analysis of large datasets stored in Google Cloud."
kevinkelin,mcp-gaodeweather-server,1,2596,"Provides a bridge to the Gaode Weather API, enabling AI assistants to retrieve weather data and forecasts for locations in China. Built with Python and the MCP protocol, it exposes tools for accessing real-time weather conditions and predictions through a standardized interface. This implementation is particularly valuable for applications and services that need localized Chinese weather data without dealing with direct API integration."
kevinlin,mcp-server-weather,0,,"This weather MCP implementation, built with Python, provides a simple interface for retrieving weather data. It leverages the httpx library for efficient HTTP requests and integrates with the MCP CLI for easy command-line usage. The project structure includes test files and development requirements, indicating a focus on code quality and maintainability. While the specific weather API is not evident, the implementation offers a straightforward approach to accessing weather information, making it suitable for AI assistants, chatbots, or applications needing to incorporate weather data into their workflows."
kevinmeyvaert,azure-devops-mcp,4,,"Azure DevOps MCP serves as a reference server implementation that enables AI assistants to interact with Azure DevOps resources programmatically. Developed by Kevin Meyvaert, it integrates with the Azure DevOps Node.js SDK to provide tools for project management, work item operations, repository access, and code search capabilities. The server uses Server-Sent Events (SSE) for communication, authenticates via Personal Access Tokens, and includes comprehensive error handling. This implementation is particularly valuable for developers and project managers who want to query work items, create tasks, search code repositories, or retrieve project information directly through AI assistants without context switching to the Azure DevOps interface."
kevinmeyvaert,very-basic-confluence-mcp,1,,"Confluence MCP Server provides a lightweight integration between AI assistants and Atlassian Confluence, enabling programmatic access to wiki content through the Model Context Protocol. Built by Kevin Meyvaert, this implementation offers a search tool that queries Confluence content using CQL (Confluence Query Language), allowing AI assistants to retrieve and reference documentation directly within conversations. The server uses Server-Sent Events (SSE) for communication, making it compatible with Cursor AI and similar tools that support the MCP standard, and is particularly valuable for teams that rely heavily on Confluence for knowledge management."
kevinwatt,mysql-mcp,4,2300,"This MCP server implementation provides secure MySQL database access for LLMs. Developed by Dewei Yen, it offers both read and write operations, including SELECT queries, table listings, and INSERT/UPDATE/DELETE statements with transaction support. The server emphasizes security through read-only transaction modes, query limits, and performance monitoring. It's designed for integration with tools like Dive Desktop, making it suitable for AI-assisted database interactions, data analysis, and automated data management tasks."
kevinwatt,mcp-server-searxng,13,5761,"This MCP server, developed by Kevin Watt, integrates SearXNG's meta-search capabilities into AI workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a privacy-focused search interface that combines results from multiple engines. The implementation offers features like multi-category searches, language filtering, time range selection, and adjustable safe search levels. By connecting AI models with SearXNG's robust search functionality, this server enables sophisticated information retrieval scenarios such as multi-source research, trend analysis, and content aggregation. It's particularly valuable for applications requiring privacy-conscious, diverse, and customizable search results, making it ideal for research tools, content curation systems, and privacy-oriented AI assistants."
kevinwatt,shell-mcp,2,9941,"This MCP server implementation provides a shell command execution interface, allowing AI models to interact with the local system through a standardized protocol. Developed by Kevin Watt, it leverages the @modelcontextprotocol/sdk to enable secure and controlled access to shell operations. The implementation is designed for automation tasks, system management, and scenarios where AI assistants need to perform local machine operations. It stands out by focusing on shell interactions, making it particularly useful for DevOps, system administration, and automated workflow applications."
kevinwatt,mcp-webhook,7,1992,"This MCP webhook server, developed by kevinwatt, enables AI agents to send messages to external webhook endpoints. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a simple interface for posting customizable messages. The implementation focuses on flexibility, allowing users to specify content, username, and avatar for each message. It's particularly useful for integrating AI-driven notifications into existing workflows, enabling use cases such as automated alerts, chat integrations, and system notifications without directly dealing with webhook API complexities. The server's design emphasizes ease of configuration and deployment, making it suitable for both development and production environments."
kevinwatt,yt-dlp-mcp,21,9004,"This MCP server, developed by Dewei Yen, provides a bridge between AI models and YouTube content through the yt-dlp tool. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers capabilities for downloading YouTube subtitles and videos. The implementation focuses on simplifying access to YouTube content for AI processing, enabling use cases such as video summarization and content analysis. By connecting AI models with YouTube data, this server allows for sophisticated scenarios like automated video transcription, content curation, and language processing of video subtitles. It's particularly useful for applications and AI assistants that require programmatic access to YouTube content through a standardized MCP interface."
kevinypfan,fugle-mcp-server,0,,"Fugle MCP Server provides a bridge between AI assistants and the Masterlink SDK for Taiwan stock market trading and data access. The server exposes tools for account management, market data retrieval (including historical, intraday, and snapshot data), and trade execution capabilities like placing orders, checking balances, and viewing trade history. Built with TypeScript and containerized with Docker, it requires authentication via environment variables for secure access to trading accounts, making it valuable for financial analysis, automated trading strategies, and portfolio management applications."
kfischer-okarin,joplin-mcp-server,1,,"Joplin-MCP-Server provides a bridge between Claude and the Joplin note-taking application's API, enabling AI assistants to interact with notebooks and notes directly within conversations. Built by Kevin Fischer, this Ruby implementation authenticates with Joplin using environment variables for port and token, and currently offers a tool to retrieve and display the complete notebook hierarchy in a formatted tree structure. The server leverages the HTTParty gem for API communication and includes comprehensive error handling and pagination support, making it particularly valuable for users who want to reference or manipulate their Joplin notes without leaving their conversation interface."
kfischer-okarin,mcp-server-performance-review-data,0,,"Performance Review Data MCP Server provides developers with tools to retrieve GitHub pull request activity for performance reviews. Built by Kevin Fischer, it integrates with the GitHub API to fetch a user's opened pull requests within a specified month, formatting the results as structured XML output. The implementation uses environment variables for configuration, includes proper error handling, and follows Ruby best practices with modular code organization. Particularly valuable for developers who need to compile their contributions for regular performance evaluations without manually searching through GitHub history."
khandelwaltushar,weather-mcp-server,0,,"This Weather MCP server provides access to the National Weather Service (NWS) API, allowing AI assistants to retrieve current weather data and alerts. Built with Python using httpx for asynchronous HTTP requests, it makes properly formatted requests to the NWS API with appropriate headers and error handling. The implementation includes helper functions for formatting weather alerts into readable text and maintains clean separation between API interaction code and constants. It's ideal for applications needing reliable access to official US weather data without requiring API keys or authentication."
kj455,mcp-kibela,10,1126,"MCP-Kibela is a server implementation that integrates with the Kibela API, allowing AI assistants to search, read, create, and update notes in Kibela knowledge bases. Built by kj455, it provides a bridge between AI models and team documentation stored in Kibela, enabling seamless access to organizational knowledge without leaving the conversation interface. The implementation requires a Kibela team name and API token for authentication, and can be deployed as a Docker container or run directly using Node.js, making it ideal for teams that use Kibela for knowledge management and want to enhance their AI assistant workflows with document retrieval and creation capabilities."
kikuchy,pubdev_mcp,7,,"PubDev MCP is a server that enables natural language search for Dart and Flutter packages on pub.dev. It leverages the pub_api_client to retrieve package information, scores, and metrics, allowing users to find appropriate packages through conversational queries rather than traditional keyword searches. The implementation provides detailed package results including version, description, URL, and score, making it easier for developers to discover and evaluate packages that meet their specific needs without having to master pub.dev's search syntax."
kilicmu,mcp-web-content-pick,1,1962,"MCP Web Content Pick is a server implementation that extracts structured content from web pages using customizable selectors. Developed by kilicmu, it leverages the web-structure library to crawl websites and parse HTML elements like headings, paragraphs, and lists. The tool supports recursive crawling with configurable depth limits, custom selector definitions, and error handling options. This implementation is particularly valuable for content analysis, web scraping, and generating structured representations of web pages without leaving the AI assistant interface."
kiliczsh,mcp-mongo-server,137,8829,"This MCP server, developed by kiliczsh, provides AI assistants like Claude with read-only access to MongoDB databases. It offers tools for querying collections, retrieving schema information, and executing aggregations. The server integrates seamlessly with Claude Desktop on both macOS and Windows, enabling AI-powered data analysis and insights. By bridging AI capabilities with MongoDB's flexible document model, this implementation facilitates natural language interactions with complex datasets. It is particularly useful for scenarios requiring data exploration, schema analysis, or generating insights from MongoDB-stored data in AI-assisted research, reporting, and decision-making applications."
kilkelly,nano-currency-mcp-server,4,,"A lightweight MCP server for sending Nano cryptocurrency, providing tools to send Nano, retrieve account information, and interact with Nano blockchain nodes. Developed by Frank Kilkelly, this implementation enables AI agents and language models to perform cryptocurrency transactions through a standardized, programmatic interface with built-in validation and error handling."
kimtaeyoon83,mcp-server-youtube-transcript,138,18574,"This YouTube transcript extraction MCP server, developed by kimtaeyoon83, provides a streamlined interface for retrieving captions and subtitles from YouTube videos. It supports multiple video URL formats and offers language-specific transcript retrieval, making it versatile for various content analysis tasks. The server features error handling, including validation of input parameters, graceful handling of YouTube API errors, and implementation of timeouts. It's particularly useful for AI-driven content analysis, automated video summarization, and accessibility enhancement projects. Its ability to provide detailed metadata along with transcripts enhances its utility for comprehensive video content analysis."
kinothe-kafkaesque,ssh-mcp-server,2,,"SSH MCP Server provides secure remote access and command execution capabilities through the Model Context Protocol. It allows AI assistants to execute SSH commands on remote servers using stored credentials, with a SQLite database for persistent credential management. The implementation includes tools for executing commands, adding/removing credentials, and listing available connections - making it particularly valuable for system administration tasks and remote server management without leaving the conversation interface."
kinsha-dev,confluence-chat-mcp-service,0,,"A lightweight MCP server for expanding and updating Confluence page content through a JSON-RPC interface. The implementation provides a tool for generating expanded content based on a given header and original text, with a focus on simplifying content generation workflows in Confluence. Designed to be easily configurable through a JSON configuration file and minimal Python dependencies."
kinshukk,book-fetch-mcp,2,,"Book Fetch MCP provides AI assistants with access to published books through a specialized tool that retrieves and processes book content from Library Genesis. Built with Python using the FastMCP framework, it downloads books based on title and author, extracts text from PDFs using parallel processing, and intelligently manages large texts by delivering them in manageable chunks with proper metadata. The implementation includes a caching mechanism to improve performance for repeated requests and handles various error conditions gracefully. It's particularly valuable for workflows requiring in-depth book analysis, research, or reference within AI assistant conversations without requiring users to manually locate and process book content."
kioyong,mysql-mcp-server-java,2,,"This MCP server implementation provides a bridge to MySQL databases, enabling execution of SELECT queries, listing of tables, and retrieval of table schemas. Developed using Spring Boot and the Spring AI MCP server starter, it offers a streamlined interface for integrating MySQL operations into AI-assisted workflows. The server is particularly useful for scenarios requiring data analysis, reporting, or dynamic database interactions within MCP-based applications."
kirandawadi,volatility3-mcp,2,,"Volatility3 MCP Server is a powerful tool that connects MCP clients like Claude Desktop with Volatility3, the advanced memory forensics framework. This integration allows LLMs to analyze memory dumps, detect malware, and perform sophisticated memory forensics tasks through a simple, conversational interface."
kira-pgr,promptshopmcp,8,,"The Image Toolkit MCP Server provides AI assistants with a comprehensive set of image manipulation capabilities through Google's Gemini models and third-party APIs. Built with Python using the FastMCP framework, it offers three main tools: generating images from text prompts, modifying existing images based on instructions, and removing image backgrounds. The implementation handles image safety checks, temporary file management, and automatic uploading to FreeImage.host for easy sharing. This server is particularly valuable for workflows requiring image generation and editing directly within AI assistant conversations, eliminating the need for separate image editing tools."
kirikoko1213,kr-mcp-server,0,,"A Go-based MCP server implementation that integrates with the mark3labs/mcp-go library to provide specialized tools for retrieving DNF gold prices and weather information. The server leverages the kiririx/krutils utility package for additional functionality, making it suitable for applications that need to access real-time market data and meteorological information through a standardized protocol interface."
myblockcities,mcp-server-heroku,1,,"This MCP server implementation provides a simple website fetching tool exposed through the Model Context Protocol. Developed by Kirill Markin, it allows AI assistants to retrieve web page content for analysis and processing. The server is built using Python and the MCP SDK, with support for both local development and deployment on Heroku. It features configurable settings for port, host, and user agent, as well as debug mode options. The implementation is designed to be lightweight and easily extensible, making it suitable for a wide range of applications that require web scraping capabilities, such as content aggregation, data analysis, or information retrieval tasks."
chrisboden,mcp_template,3,,"This MCP server, developed by Kirill Markin, provides a simple tool for fetching website content. Built with Python and leveraging the MCP library, it offers a standardized interface for AI models to retrieve web page data. The implementation focuses on ease of deployment, with Docker and Heroku support, and includes configuration options for customizing server behavior. By enabling AI assistants to access web content through a unified API, this server facilitates use cases such as web scraping, content analysis, and information retrieval. It's particularly useful for applications and AI models that require programmatic access to web data without dealing with the complexities of direct HTTP requests and HTML parsing."
kishimoto-banana,shopify-py-mcp,2,,"This MCP server implementation provides a bridge to the Shopify API, enabling AI assistants to interact with e-commerce data and operations. Developed by masashi kishimoto, it leverages the MCP framework and ShopifyAPI library to offer tools for managing products, orders, and customer information. The server is designed for use cases requiring integration with Shopify-powered online stores, such as automated inventory management or sales analysis."
kiss-kedaya,crypto_mcp,2,,"Crypto MCP provides a bridge between language models and cryptographic operations using the PyCryptodome library. This implementation enables AI assistants to perform various encryption, decryption, hashing, and digital signature operations through a standardized interface. Built with Python and containerized with Docker, it offers a lightweight solution for secure data handling in AI applications where cryptographic capabilities are needed."
kitchenchem,degen-mcp,0,,"Degen-MCP is a sports betting data retrieval tool that interfaces with The Odds API to fetch real-time sports odds and game information. Built with Python and the FastMCP framework, it provides async functions to retrieve sports lists and betting odds across multiple regions and markets, enabling AI assistants to access and analyze sports betting data programmatically."
kivo360,anthropic-mcp-code-analyzer,5,,"This MCP server, developed by kivo360, analyzes open source projects and assists with codebase integration. Built using Node.js and leveraging the Anthropic AI SDK, it provides repository analysis, code pattern detection, and intelligent merge strategy generation. The implementation focuses on using Claude to analyze code structures, dependencies, and documentation to provide context-aware integration recommendations. It's particularly useful for development teams working on large-scale integrations, enabling use cases such as automated code analysis, conflict detection, and AI-assisted refactoring suggestions without manual code review."
kiwamizamurai,mcp-kibela-server,1,,"This MCP server, developed by kiwamizamurai, provides integration with the Kibela API for knowledge management. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for searching notes, retrieving recent content, and accessing note details including comments. The implementation focuses on enabling AI assistants to interact with Kibela's collaborative documentation platform, providing functionality to query and retrieve relevant information. It's particularly useful for teams using Kibela who want to integrate their knowledge base with AI workflows, enabling use cases such as automated documentation lookup, context-aware responses in chatbots, and AI-assisted knowledge management without directly navigating Kibela's web interface."
k-jarzyna,mcp-miro,0,922,"An MCP server for Miro integration that enables AI assistants to interact with Miro's collaborative whiteboard platform. Developed by Konrad Jarzyna, this TypeScript implementation provides over 80 tools for managing boards, creating and manipulating various item types (sticky notes, shapes, text, images), handling tags, and working with enterprise features. The server uses the official Miro API client and implements a singleton pattern for API access management. It's particularly useful for teams looking to automate whiteboard creation, organize visual collaboration sessions, or integrate Miro's capabilities into AI-assisted workflows for design thinking, project planning, and visual ideation."
kjozsa,git-mcp,0,9802,"Git MCP is a server implementation for managing Git operations on local repositories. Developed by Kristof Jozsa, it provides a set of methods for listing repositories, retrieving tags, creating and pushing tags, and refreshing repositories. The server is designed to be easily integrated into AI-assisted development workflows, offering a streamlined interface for Git operations without direct shell access."
kjozsa,jenkins-mcp,7,,"This Jenkins MCP server, developed by Kristof Jozsa, provides a bridge to Jenkins CI/CD operations, enabling AI assistants to interact with Jenkins servers. Built with Python, it leverages the python-jenkins library and integrates with the Model Context Protocol. The server offers tools for listing jobs, triggering builds with parameters, and checking build statuses. It focuses on secure credential management through environment variables and supports easy deployment via Docker. This implementation is particularly useful for DevOps automation, allowing AI agents to monitor and control Jenkins pipelines, streamline CI/CD workflows, and integrate Jenkins operations into broader AI-assisted development processes."
kklab-com,trinity-mcp,0,,"Trinity-MCP is a Go-based server implementation that provides a bridge between AI assistants and the Trinity API. Built using the mark3labs/mcp-go library, it enables AI assistants to access Trinity's formula-based tools through a standardized JSON-RPC interface. The server mounts Trinity tools to an MCP server, supports configuration options for app ID and host customization, and handles communication through standard I/O, making it suitable for integration with AI platforms that need to leverage Trinity's capabilities."
klara-research,mcp-analyzer,8,,"MCP-Analyzer is a debugging tool for retrieving and analyzing Model Context Protocol logs from Claude desktop applications. Built with TypeScript, it provides a server that can locate, filter, and display MCP logs from standard system locations on macOS, Windows, and Linux. The implementation features pagination support for handling large log collections, content size limiting to prevent overwhelming responses, and flexible filtering options. It's particularly useful for developers working with Claude who need to troubleshoot MCP interactions, analyze communication patterns, or debug integration issues between Claude and external tools."
klauern,mcp-ynab,1,,"This MCP server implementation provides access to YNAB (You Need A Budget) functionality through the Model Context Protocol. Developed by klauern, it integrates with the YNAB API to offer features such as viewing account balances, creating transactions, and accessing YNAB data through standardized MCP resources. The server is designed to work with Claude Desktop, Goose, and other MCP-supported environments, offering easy installation and configuration options. It's particularly useful for AI assistants and applications that need to interact with personal finance data, enabling tasks like budget analysis, expense tracking, and financial planning within the MCP ecosystem."
klauseduard,vibe-coded-jira-mcp,0,,"JIRA MCP Server enables AI assistants to interact with JIRA issue tracking systems through a comprehensive set of tools for managing issues, projects, and work logs. Built by klauseduard, it provides capabilities for retrieving, searching, creating, and updating JIRA issues, as well as listing projects and logging work time. The implementation uses Python with the JIRA library and FastMCP to expose these operations through a standardized interface, making it valuable for development teams who want to integrate JIRA workflows directly into their AI assistant conversations without context switching to the JIRA web interface."
kleneway,awesome-cursor-mpc-server,281,,"This MCP server, developed by kleneway, provides three Cursor Tools: Screenshot, Architect, and Code Review. Built with TypeScript and leveraging the Model Context Protocol SDK, OpenAI, and Puppeteer, it enables AI assistants to capture screenshots, analyze web page structures, and review code. The implementation focuses on automating visual and code-related tasks, making it easier to incorporate these capabilities into AI workflows. It's particularly useful for developers and QA teams who want to streamline web testing, UI analysis, and code review processes, enabling use cases such as automated UI testing, web scraping, and AI-assisted code quality checks without manual intervention."
kludge-works,mcp-server-rdf,2,,"This MCP server implementation provides a bridge to query SPARQL servers, enabling AI assistants to interact with RDF data sources. Developed by Kludge Works, it integrates Spring Boot, Spring AI, and Apache Jena to facilitate SPARQL queries and RDF data manipulation. The server is designed for use cases requiring semantic web integration, such as knowledge graph exploration, linked data analysis, or ontology-based information retrieval."
kmexnx,excel-to-pdf-mcp,0,323,"An MCP server that converts Excel (.xls/.xlsx) and Apple Numbers (.numbers) files to PDF format, enabling AI assistants like Claude to perform file conversions directly through conversations. Built with TypeScript and Node.js, it leverages LibreOffice for the actual conversion process and implements the Model Context Protocol to expose two primary tools: convert_excel_to_pdf and convert_numbers_to_pdf. The server handles file validation, secure path resolution, and temporary file management while providing detailed error messages. It's particularly useful for users who need to share spreadsheets with stakeholders who may not have access to the original applications."
kmwebnet,mcp-server-for-sensor-device,2,,"This MCP Server simulates a CO2 sensor device, providing a JSON-RPC interface to interact with either a simulated sensor or a real Raspberry Pi Pico connected via USB. Built with Node.js and the SerialPort library, it offers resources for device information, sensor data, and network status, along with tools to publish data to MQTT, reconnect WiFi, and manage MQTT connections. The implementation includes both simulation mode with randomized CO2 levels and real mode that reads actual sensor data, making it ideal for testing IoT applications or integrating CO2 monitoring into AI assistant workflows."
knight0zh,mssql-mcp-server,4,0,"A TypeScript-based MCP server for executing SQL queries and managing connections to Microsoft SQL Server databases. Built with robust error handling, security features, and comprehensive configuration options, it provides tools for querying databases, listing tables and schemas, and handling complex database interactions through a standardized interface. Useful for developers and data professionals needing programmatic access to MSSQL databases with strong validation and error management."
knmurphy,glide-api-mcp-server,5,,"This Glide API MCP server, developed by an unnamed creator, provides a bridge between the Model Context Protocol and Glide's API (versions 1 and 2). Built with TypeScript and leveraging the MCP SDK and Axios, it offers tools for interacting with Glide apps, including retrieving app information, managing tables, and manipulating data rows. The server implements secure API key handling through environment variables and runtime configuration. By abstracting Glide API operations into a standardized MCP format, it enables AI systems to easily interact with and manage Glide applications. This implementation is particularly valuable for automating Glide app management and data operations, facilitating use cases such as dynamic data updates, automated reporting, and integration of Glide apps with other systems or workflows."
mberg,kokoro-tts-mcp,4,,"Kokoro TTS MCP is a server that converts text to speech using the Kokoro TTS engine, generating MP3 files with optional S3 upload capabilities. The implementation provides a robust text-to-speech service with configurable voices, speech speed, and language options, while handling file management through local storage or cloud integration. Built with fallback mechanisms for when the primary TTS engine is unavailable, it includes features like automatic cleanup of old files and markdown text preprocessing. This server is particularly valuable for applications requiring high-quality voice synthesis without leaving the AI assistant interface, such as content creation, accessibility tools, or voice-enabled applications."
koladev32,mcp-discord-chat,0,,"This MCP server, developed by koladev, provides a Discord chat integration for AI assistants. Built with Python using discord.py, it enables AI models to interact with Discord channels and users. The implementation focuses on a simple note-taking system with custom URI schemes and summarization capabilities. It offers tools for adding and retrieving notes, as well as generating summaries with adjustable detail levels. The server is particularly useful for enhancing Discord communities with AI-powered features, enabling use cases such as automated note-taking during discussions, on-demand summarization of channel content, and AI-assisted information management within Discord servers."
komer3,linode-mcp,1,727,"Linode MCP server provides a bridge to the Linode cloud infrastructure API, enabling AI assistants to interact with Linode services like region discovery and instance management. Built by Khaja Omer, this implementation uses the Linode API4 library to expose tools for querying cloud resources, with a focus on simplifying cloud infrastructure interactions through a standardized MCP interface. Particularly useful for developers and teams looking to programmatically manage Linode cloud resources through conversational AI."
kong,mcp-konnect,22,,"Kong Konnect MCP Server provides tools for managing and analyzing Kong API Gateway configurations and traffic through the Konnect platform. Developed by Kong, this TypeScript implementation offers capabilities for querying API requests, analyzing consumer traffic patterns, and managing control plane configurations including services, routes, plugins, and control plane group memberships. The server connects to Kong's cloud APIs using authentication tokens and transforms complex API responses into structured, actionable data. It's particularly valuable for DevOps teams managing API infrastructure who need to monitor traffic patterns, troubleshoot issues, and maintain consistent gateway configurations across multiple environments."
pjookim,mcp-visit-korea,1,,"Korea Tour MCP Server provides AI assistants with access to Korean tourism information through the TOUR API. Developed by Pyungjoo Kim, this TypeScript implementation offers tools for area code lookup, tourism information searches (by region, keyword, or location), and detailed content about attractions, festivals, and accommodations. The server requires an optional API key configuration and uses the Model Context Protocol to enable AI systems to retrieve structured tourism data about Korea, making it particularly useful for travel planning, regional exploration, and tourism research."
korigamik,markitdown_mcp_server,13,,"This MCP server, developed by KorigamiK, converts various file formats to Markdown using the MarkItDown utility. Built with Python and leveraging libraries like pdfminer, mammoth, and openpyxl, it supports conversion of PDFs, Office documents, images, audio files, and more. The implementation focuses on providing a unified Markdown output for diverse input formats, enabling easy integration with text-based workflows. It's particularly useful for developers and content managers working with mixed document types, facilitating use cases such as content migration, documentation standardization, and text analysis across multiple file formats without manual conversion steps."
kornbed,jira-mcp-server,0,,"Jira MCP Server provides a TypeScript-based integration with Jira, enabling AI assistants to interact directly with Jira tickets through standardized tools. The server supports core ticket management operations like listing, viewing, creating, commenting, and updating ticket statuses, with full MCP protocol support for seamless interaction. Built for developers and project managers who want to streamline their Jira workflow through conversational AI interfaces."
korotovsky,slack-mcp-server,15,,"Slack MCP Server provides a bridge between AI assistants and Slack's messaging platform, enabling access to conversation history from Slack channels. Developed by Dmitrii Korotovskii, this Go implementation authenticates with Slack using XOXC and XOXD tokens, handling the necessary HTTP transport customization to maintain session cookies. The server supports both stdio and SSE transport modes, includes API key authentication for secure access, and offers optional HTTP proxy and custom CA certificate configuration. Particularly useful for AI assistants that need to analyze, reference, or work with team communications stored in Slack channels without requiring direct Slack API integration."
kotelberg,playwright-mcp-server,0,,"Playwright-MCP-Server provides web browsing capabilities for AI assistants through Playwright automation. It offers tools for navigating websites, extracting visible content, identifying interactive elements, and performing mouse actions. The server is containerized with Docker for easy deployment and uses the Model Context Protocol SDK to expose browser functionality as tools and resources. This implementation is particularly valuable for workflows requiring web scraping, content extraction, and automated browser interactions without leaving the conversation interface."
koundinya,zd-mcp-server,1,,"Zendesk MCP Server provides a bridge between AI assistants and the Zendesk customer support platform through the Model Context Protocol. This TypeScript implementation enables agents to perform essential Zendesk operations including retrieving, creating, and updating tickets, adding public and private comments, and searching across the ticket database. The server authenticates with Zendesk using API tokens configured through environment variables and exposes seven specialized tools that handle different aspects of ticket management. It's particularly valuable for customer support teams who want to leverage AI assistants for ticket triage, response drafting, and support workflow automation without leaving their conversation interface."
kouui,web-search-duckduckgo,0,,"DuckDuckGo Web Search MCP Server enables AI assistants to search the web using DuckDuckGo and optionally fetch content from search results. Built with Python using the FastMCP framework, it extracts titles, URLs, and snippets from search results, with the ability to convert HTML content to markdown using the Jina API. The server handles concurrent URL fetching, gracefully manages timeouts, and provides configurable result limits, making it ideal for workflows requiring real-time internet information without leaving the conversation interface."
kov,gkmcp,1,,"GKMCP is a Rust-based MCP server implementation that provides a fetch tool for retrieving content from URLs. Built with the Tokio async runtime and Reqwest HTTP client, it follows the 2025-03-26 protocol version specification and implements the core MCP request handling flow including initialization, tool listing, and tool execution. The server processes JSON-RPC style requests from stdin, handles tool calls asynchronously, and returns formatted responses with proper error handling. This implementation is particularly useful for AI assistants that need to access web content during conversations, enabling capabilities like retrieving documentation, checking online resources, or gathering information from specific websites."
kpsunil97,devrev-mcp-server,2,4018,"This DevRev MCP server, developed by Sunil Pandey, provides AI assistants with search and retrieval capabilities using the DevRev APIs. Built with Python and leveraging the MCP library, it offers tools for searching DevRev data and retrieving detailed information about specific objects. The server implements namespace-aware searching and object retrieval by ID. By abstracting the complexities of API communication, it allows AI systems to easily access and analyze DevRev data. This implementation is particularly valuable for DevRev users and developers working on integrations, enabling use cases such as automated issue tracking, customer support analysis, and data-driven decision making within the DevRev ecosystem."
krekun,vrchat-mcp-osc,4,,"VRChat OSC MCP Server provides a bridge between AI assistants and VRChat, enabling programmatic control of avatar parameters, inputs, and interactions through WebSocket and OSC protocols. Built with TypeScript and supporting features like avatar parameter manipulation, movement control, chatbox messaging, and event handling, it allows AI agents to directly interact with VRChat's input and avatar systems. Particularly useful for creating dynamic, AI-driven VRChat experiences with fine-grained avatar and interaction control."
krishh-amilineni,mcp-azuredevops-bridge,0,,"This MCP server implementation provides a bridge to Azure DevOps, enabling AI assistants to interact with work items, wikis, and sprints. It offers tools for creating, updating, and querying work items, managing relationships and attachments, and interacting with wiki pages. The server integrates closely with the Azure DevOps API, supporting features like WIQL queries, work item templates, and batch operations. It's designed for software development teams using Azure DevOps who want to leverage AI assistance for project management and documentation tasks."
krupalp525,fledge-mcp,0,,"Fledge MCP Server provides a bridge between Fledge IoT platform and AI assistants, enabling natural language interaction with sensor data and system management. Developed by Krupal Patel, it offers tools for data access, service control, UI component generation, and real-time streaming over WebSockets. The implementation includes both standard and secure API key authentication modes, with Docker containerization for easy deployment on Smithery.ai. This server is particularly valuable for IoT workflows requiring data visualization, monitoring, and configuration management without leaving the conversation interface."
kryzo,mcp-sncf,2,,"The SNCF API MCP Server provides a comprehensive interface to the French National Railway's (SNCF) API services, enabling Claude to plan train journeys, retrieve station information, check schedules, and monitor service disruptions across France. Created by Christian Delage, it combines a modular Python wrapper for the SNCF API with an intelligent station-finding system that uses both API queries and a CSV database of European train stations with coordinates. The implementation includes fallback mechanisms with hardcoded coordinates for major French cities, ensuring reliability even when API searches fail, and is particularly valuable for travel planning, transportation research, and real-time transit monitoring without leaving the conversation interface."
krzko,google-cloud-mcp,17,350,"Google Cloud MCP Server connects AI assistants to Google Cloud services, providing context and tools for interacting with Google Cloud resources. Built by Kristof Kowalski, it currently supports Google Cloud Logging for querying and filtering log entries, Cloud Spanner for executing SQL queries and exploring database schemas, and Cloud Monitoring for retrieving and analyzing metrics. The server authenticates with Google Cloud using either a service account key file or environment variables, and includes lazy authentication loading to prevent timeouts during initialization. It's designed for deployment with Smithery and is ideal for workflows requiring direct access to Google Cloud resources within AI conversations."
ks0318-p,sound-notification-mcp,1,327,"A sound notification MCP server that plays audio alerts when AI assistants need user attention. It integrates with Cursor and Windsurf development environments, triggering sounds at key interaction points like when user approval is needed or when tasks are completed. The implementation uses the play-sound library to handle audio playback across different platforms, making it useful for developers who want clear audio cues during AI-assisted workflows without having to constantly monitor the interface."
ks-gen-ai,confluence-mcp-server,9,,"This Confluence Communication Server, developed as an MCP implementation, provides tools for interacting with Confluence through a TypeScript-based interface. It offers capabilities for executing CQL queries to search pages and retrieving page content, demonstrating core MCP concepts. The server integrates with Confluence's API, requiring user authentication via email and API key. It's designed for easy integration with Claude Desktop, supporting both MacOS and Windows environments. This implementation is particularly useful for teams and individuals who need to programmatically access and search Confluence content, enabling AI-assisted information retrieval and analysis from their Confluence wikis."
ks-gen-ai,jira-mcp-server,17,,"This Jira communication server, developed as an MCP implementation, provides a comprehensive interface for interacting with Jira through AI-assisted workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers tools for executing JQL queries, managing tickets, listing projects, and handling attachments. The server stands out by providing a wide range of Jira-specific functionalities, including ticket creation, editing, and deletion, as well as user assignment and project status retrieval. It's particularly useful for development teams and project managers looking to integrate Jira operations into their AI-assisted workflows, enabling automated ticket management, project oversight, and streamlined communication with Jira instances."
kshern,image-tools-mcp,2,,"Image Tools MCP provides a service for retrieving image dimensions from both URL and local file sources, with additional image compression capabilities through the Tinify API. Developed by kshern, this TypeScript implementation uses the probe-image-size library to extract image metadata and exposes these capabilities through a Model Context Protocol interface. The server is designed to run as a standalone service or be integrated as a dependency, making it particularly useful for AI agents that need to analyze or process images without requiring external tools or manual dimension checking."
kshern,mcp-tavily,3,1538,"This MCP server implementation provides integration with the Tavily API, enabling AI assistants to perform advanced search and content extraction operations. Developed by kshern, it leverages the Tavily Core library to offer powerful search capabilities. Built with TypeScript and utilizing the Model Context Protocol SDK, the server focuses on secure API key management and easy configuration. It is particularly useful for AI applications that need to access up-to-date information, perform web research, or integrate search functionality into their workflows."
kstrikis,ephor-mcp-collaboration,0,,"An MCP server that facilitates collaborative debates between multiple AI agents, enabling them to discuss and reach consensus on user prompts. Built with Node.js and TypeScript, it manages multi-turn conversations through a session-based architecture where participants can register, submit responses, and view other contributions in real-time. The server provides tools for participant registration, response submission, and session status checking, making it ideal for scenarios requiring deliberative consensus among AI agents like the 'Council of Ephors' use case."
kstrikis,ephor-mcp,1,,"The LLM Responses MCP Server enables multiple AI agents to share and read each other's responses to the same prompt, facilitating collaborative analysis and reflection. Built with TypeScript using the Model Context Protocol SDK, it provides two main tools: 'submit-response' for LLMs to submit their answers to a prompt, and 'get-responses' to retrieve all responses from other LLMs for a specific question. The implementation includes Docker configuration for easy deployment to EC2 instances and uses Bun as its JavaScript runtime. This server is particularly valuable for scenarios where multiple AI agents need to analyze the same problem and learn from each other's perspectives."
ktabori,dixa-mcp,0,,"Dixa MCP server provides a bridge to the Dixa customer support API, enabling AI assistants to interact with conversation management, tagging, and retrieval capabilities. Built with TypeScript, it exposes tools for searching conversations, fetching messages and notes, and managing conversation tags. Particularly useful for customer support teams wanting to programmatically access and manipulate their Dixa conversation data through an AI interface."
ktanaka101,mcp-server-duckdb,100,16028,"This DuckDB MCP server, developed by ktanaka101, provides a flexible interface for language models to interact with DuckDB databases. It enables AI agents to execute SQL queries, create tables, and inspect schemas through a controlled interface. The server can be run in read-only mode for enhanced security and integrates with Claude Desktop. By leveraging DuckDB's column-oriented architecture, it allows AI systems to efficiently analyze large datasets locally. This implementation is particularly useful for AI assistants designed to perform ad-hoc data analysis, generate insights from local files, or provide data-driven recommendations using DuckDB as a high-performance analytical database backend."
kujenga,zotero-mcp,40,4996,"This MCP server, developed by an unknown author, provides integration with the Zotero reference management system. Built with Python and leveraging the pyzotero library, it offers tools for searching Zotero libraries, retrieving item metadata, and accessing full-text content. The implementation focuses on providing a bridge between AI agents and scholarly research data, with features like formatted metadata output and attachment handling. It's particularly useful for researchers, students, and knowledge workers looking to incorporate their Zotero libraries into AI-assisted workflows, enabling use cases such as literature review automation, citation management, and content summarization without directly interacting with the Zotero API."
kukapay,crypto-feargreed-mcp,13,,"Crypto Fear & Greed Index MCP Server provides real-time and historical cryptocurrency market sentiment data through integration with Alternative.me's Fear & Greed Index API. Built by kukapay using the FastMCP framework, it offers resources and tools to fetch current index values, historical data, and trend analysis, making it easy for Claude Desktop and other MCP-compatible clients to incorporate market sentiment indicators into conversations. The implementation is particularly valuable for cryptocurrency investors and analysts who want to gauge market psychology and potential price movements without leaving their AI assistant interface."
kukapay,crypto-indicators-mcp,15,,"Crypto Indicators MCP Server provides AI trading agents with access to over 50 technical analysis indicators and trading strategies for cryptocurrency markets. Built on the Model Context Protocol, it fetches real-time OHLCV data from Binance (configurable to any CCXT-supported exchange) and calculates trend, momentum, volatility, and volume indicators. Each tool returns either raw indicator values or actionable trading signals (-1 for sell, 0 for hold, 1 for buy), enabling AI agents to analyze market conditions and develop quantitative trading strategies without implementing complex technical analysis algorithms themselves."
kukapay,cryptopanic-mcp-server,21,,"The cryptopanic-mcp-server provides AI agents with real-time cryptocurrency news from CryptoPanic. Built for Python 3.13, it implements a single tool that fetches news, analysis, or video content with configurable pagination. The server requires a CryptoPanic API key and is designed to be run using the UV package manager. This implementation by kukapay enables AI assistants to stay current on cryptocurrency developments, making it valuable for financial analysis, market research, and investment decision support where timely crypto information is needed."
kukapay,crypto-sentiment-mcp,5,,"Crypto Sentiment MCP Server delivers cryptocurrency sentiment analysis to AI agents by leveraging Santiment's aggregated social media and news data. Developed by kukapay, this server exposes five key tools that enable agents to retrieve sentiment balance for specific cryptocurrencies, monitor social media mentions, detect significant volume shifts, identify trending discussion topics, and measure an asset's dominance in crypto conversations. The implementation uses FastMCP and the Santiment API to fetch and process time-series data, making it particularly valuable for traders, analysts, and researchers who need real-time insights into market mood and emerging trends without leaving their AI assistant interface."
kukapay,dune-analytics-mcp,14,,"The Dune Analytics MCP Server provides AI assistants with direct access to blockchain data through the Dune Analytics API. Built with Python using the FastMCP framework, it offers two key tools: retrieving the latest results from existing Dune queries and executing queries on demand, with all results returned in CSV format for easy processing. The server requires a Dune Analytics API key for authentication and includes robust error handling for API requests. This implementation is particularly valuable for workflows requiring real-time blockchain analytics within AI assistant conversations, allowing users to access on-chain data and metrics without leaving their conversation interface."
kukapay,freqtrade-mcp,16,,"Freqtrade-MCP provides a bridge between AI assistants and the Freqtrade cryptocurrency trading bot via its REST API. The server exposes tools for monitoring market data, managing trades, configuring bot behavior, and analyzing performance metrics. Built with FastMCP and asynchronous processing, it features robust error handling and detailed logging while maintaining secure access through configurable authentication. This implementation is particularly valuable for crypto traders who want to monitor and control their Freqtrade bots through natural language interaction without switching interfaces."
kukapay,jupiter-mcp,3,,"Jupiter MCP Server provides a bridge to Jupiter's Ultra API for executing token swaps on the Solana blockchain. It exposes two key tools: one for fetching optimal swap orders that combine DEX routing and RFQ (Request for Quote) pricing, and another for executing these swaps with proper handling of slippage, priority fees, and transaction landing. The implementation uses the Solana Web3.js library to sign transactions with a private key before submitting them to Jupiter's API, making it valuable for applications that need to perform programmatic token swaps with competitive pricing on Solana."
kukapay,nearby-search-mcp,6,,"NearbySearch MCP Server provides location-based place discovery by combining IP-based location detection with Google Places API integration. It offers a single tool endpoint that determines the user's current location using ipapi.co and then searches for nearby places based on keywords, with options to filter by place type and customize the search radius. Ideal for users who need to quickly find local businesses, restaurants, or services without manually entering location coordinates."
kukapay,opcua-mcp,2,,"OPC UA MCP server that connects to industrial automation systems and exposes their data points through a standardized interface. Built with FastMCP and asyncua, it provides tools for reading and writing OPC UA node values while handling connection lifecycle management. Particularly valuable for industrial automation engineers and system integrators who need to monitor and control OPC UA-enabled devices through AI assistants."
kukapay,pancakeswap-poolspy-mcp,1,,"PancakeSwap PoolSpy is an MCP server that tracks newly created liquidity pools on PancakeSwap's decentralized exchange. Built with Python and leveraging The Graph API, it provides real-time data on pools created within customizable time ranges, including detailed metrics like token pairs, creation timestamps, transaction counts, volume, and total value locked. This tool is particularly valuable for DeFi analysts, traders, and developers who need immediate visibility into emerging trading opportunities or want to monitor market activity on the BNB Smart Chain without leaving their conversation interface."
kukapay,token-minter-mcp,9,,"Token Minter MCP enables AI assistants to deploy and interact with ERC-20 tokens across multiple blockchain networks. Built by kukapay, it provides tools for deploying custom tokens with configurable parameters, querying token information, checking balances, and transferring tokens. The server leverages ethers.js and a SimpleERC20 smart contract to interact with various EVM-compatible chains including Ethereum, Polygon, BSC, and others. This implementation is particularly valuable for blockchain workflows where users need to create and manage tokens without leaving their conversation interface."
kukapay,token-revoke-mcp,1,,"Token Revoke MCP provides a multi-chain solution for managing and revoking ERC20 token allowances, helping users protect their assets from potential security risks. Built with the Model Context Protocol SDK, it integrates with Moralis API to fetch token approvals across 40+ blockchain networks and uses ethers.js to execute revocation transactions. The server offers three main tools: fetching all token approvals for a wallet, revoking specific allowances, and checking transaction status - making it valuable for crypto users who need to audit and control which protocols have permission to spend their tokens."
kukapay,uniswap-poolspy-mcp,1,,"Uniswap PoolSpy MCP Server tracks newly created liquidity pools on Uniswap V3 across nine blockchain networks including Ethereum, Base, Optimism, and others. Built by kukapay, it leverages TheGraph API to query subgraphs for each network, allowing users to retrieve pools created within a specified time range and sort them by various metrics like transaction count, volume, or TVL. The implementation provides a single tool that returns detailed information about each pool including token pairs, creation timestamp, transaction count, and USD values, making it valuable for cryptocurrency traders, researchers, and developers who need real-time data on emerging liquidity opportunities across multiple chains."
kukapay,uniswap-trader-mcp,8,,"Uniswap Trader MCP enables AI agents to execute cryptocurrency trading strategies across multiple blockchains through the Uniswap decentralized exchange. The implementation provides tools for getting price quotes and executing swaps with optimal multi-hop routing, supporting various EVM-compatible networks including Ethereum, Optimism, Polygon, Arbitrum, Celo, BNB Chain, Avalanche, and Base. It handles native token conversions, slippage tolerance settings, and transaction management with proper error handling, making it particularly valuable for automated trading, portfolio rebalancing, and liquidity provision without leaving the conversation interface."
kukapay,whale-tracker-mcp,9,,"The Whale Tracker MCP server provides real-time monitoring of cryptocurrency whale transactions using the Whale Alert API. Built with Python 3.13 and the FastMCP framework, it offers tools to fetch recent large-value transactions across blockchains, retrieve detailed transaction information, and access blockchain-specific transaction data through resource endpoints. The implementation includes configurable parameters for transaction value thresholds and blockchain filtering, with comprehensive error handling for API interactions. This server is particularly valuable for cryptocurrency traders, analysts, and researchers who need to monitor significant market movements and identify patterns in whale behavior without leaving their AI assistant interface."
kukapay,whattimeisit-mcp,7,,"WhatTimeIsIt MCP Server is a lightweight implementation that provides the current time based on the client's IP location using the World Time API. Built with Python 3.13 and the FastMCP framework, it offers a single tool that returns the current time in ISO 8601 format, making it useful for applications that need accurate time information without maintaining their own time synchronization. The server requires minimal configuration and can be easily integrated into existing MCP client setups through a simple command-line interface."
kukapay,whereami-mcp,1,,"WhereAmI-MCP provides geolocation data based on the user's IP address through integration with the ipapi.co API. Built with Python using the FastMCP framework, it offers both a resource endpoint for retrieving specific location details (like country, city, coordinates) and a comprehensive tool that returns formatted location information in a Markdown table. The implementation is lightweight, requiring only httpx for API requests, and is particularly useful for workflows where knowing a user's geographical context enhances the conversation experience without requiring manual location input."
kumartheashwani,paypal-java-mcp-server,0,,"This PayPal Java MCP server implementation provides tools for analyzing and improving payment processing, including authorization rate analysis and a basic calculator. It supports both REST API and JSON-RPC over stdio interfaces, making it versatile for web clients and Smithery integration. The server is containerized with Docker support, facilitating easy deployment and scalability for various payment processing use cases."
kunihiros,google-patents-mcp,2,510,"A Model Context Protocol (MCP) server implementation for Google Patents, allowing AI assistants to search and retrieve patent information."
kunihiros,claude-code-mcp,12,610,"The claude-code-mcp project is an MCP server for Claude Code.

It calls the locally installed Claude Code command and provides the following tools: explain_code, review_code, fix_code, edit_code, test_code, simulate_command, and your_own_query. The server is implemented using Node.js and the MCP SDK, receiving JSON format requests from clients via stdio. Internally, it adopts Base64 encoding to smoothly process special characters (newlines, quotation marks, etc.) in natural language text, resulting in improved stability and flexibility. Its main roles are receiving requests, encoding input, generating and executing commands, and returning execution results in JSON format. This project has been confirmed to work in Claude Code CLI environments (Ubuntu/WSL2, etc.).

💡 MCP Host with less capable LLM, can tame and make use of Claude power💪! With claude-code-mcp, you can also call Claude Code from Claude Desktop!! 😇😜😎 (unconfirmed)"
kunihiros,patsnap-mcp,1,133,"PatSnap MCP Server provides access to PatSnap's patent analytics API, enabling AI assistants to retrieve patent trends, keyword analyses, and competitive intelligence. Developed by Kunihiros, this TypeScript implementation handles authentication with the PatSnap API, caches access tokens for efficiency, and transforms complex patent data into structured responses. The server exposes nine specialized tools for analyzing patent landscapes, including trend analysis, word clouds, top inventors/assignees identification, and litigation tracking, making it particularly valuable for technology scouting, competitive analysis, and innovation research workflows."
kunihiros,screenshot-server,0,,"This project provides an MCP (Modular Communication Protocol) server designed to capture screenshots and facilitate their use by other processes or AI assistants, primarily by saving the screenshot to a file path specified by the client (Host)."
kunwarvivek,mcp-github-project-manager,17,,"This GitHub Project Manager MCP server provides comprehensive tools for managing GitHub projects, milestones, tasks, and sprints through deep integration with GitHub Projects V2. Developed by an unnamed author, it offers features like automated kanban workflows, sprint planning, and custom field management. The TypeScript-based implementation uses the Octokit library for GitHub API interactions and includes robust test coverage. It's designed for development teams and project managers who want to incorporate AI assistance into their GitHub project workflows, enabling natural language queries and updates for project boards, issues, milestones, and sprints."
kuon-dev,advanced-reason-mcp,17,,"Advanced Reason MCP is a server implementation that enables AI assistants to leverage structured reasoning capabilities through the deepseek-r1 model. It provides three specialized tools: a deepseek reasoner for analytical thinking and problem decomposition, a reflection tool that evaluates reasoning processes with quality scoring (0.0-1.0), and a sequential thinking tool that supports dynamic problem-solving with branching thoughts. Built with TypeScript and the Ollama API, it processes reasoning requests by extracting structured thinking blocks from model outputs, making it particularly valuable for users who need to solve complex problems requiring step-by-step analysis, critical evaluation, and adaptive reasoning strategies."
kurror,mcp,0,,"Multichat MCP Server enables parallel communication with multiple unichat-based MCP servers, allowing users to query different language models simultaneously and compare their responses. It acts as an intermediary that manages client connections to target servers like 'Lacayo 1' and 'openrouter-chat', handles message routing, and stores responses in organized directories for later retrieval. The implementation includes robust error handling, connection retry logic, and timeout management, making it particularly valuable for applications that benefit from aggregating responses from multiple AI models without requiring users to manage individual connections."
kursk-ye,code2flow-mcp-server,0,,"Code2Flow MCP Server provides a FastAPI-based interface that enables AI assistants to generate visual code flow diagrams from source code. By leveraging the code2flow Python library, this server allows agents to analyze code structure, visualize execution paths, and understand program flow without manual diagramming. The implementation includes a client example script demonstrating how to interact with the server, making it particularly useful for code comprehension, documentation generation, and architectural analysis tasks."
kush36agrawal,video_editor_mcp,21,,"This video editing MCP server, developed by Kush Agrawal, enables AI assistants to perform a wide range of video editing operations using FFmpeg. Built with Python and leveraging the MCP framework, it provides a single powerful tool, 'execute_ffmpeg', which validates and executes FFmpeg commands with real-time progress tracking. The server supports operations like trimming, merging, format conversion, speed adjustment, audio manipulation, and subtitle addition. By abstracting complex FFmpeg operations into a natural language interface, it allows AI systems to easily manipulate video content. This implementation is particularly useful for automating video editing tasks, content creation, and media processing workflows, making it suitable for applications in video production, social media content generation, and automated video analysis."
kuvanov-2,mcp-server-jira,0,,"MCP Server for JIRA provides a bridge between AI assistants and Atlassian JIRA, enabling issue retrieval through a standardized interface. The server authenticates with JIRA using environment variables for server URL and credentials, and exposes a tool for fetching issue details by key. Built with TypeScript and the MCP protocol, it handles JSON-RPC requests over stdio transport, making it valuable for teams who need to access JIRA issue information directly through conversational AI without context switching."
kuzudb,kuzu-mcp-server,9,,"An MCP server that enables graph database interactions with Kuzu - an embedded property graph -  allowing users to access and manipulate graph data through natural language commands. 

Demonstrative example can be seen here: https://blog.kuzudb.com/post/2025-03-23-kuzu-mcp-server/
"
kuzushilabsorg,mcp-servers,0,,"This MCP server implementation provides weather data retrieval functionality. Developed by Kuzushilabs, it utilizes the httpx library for making HTTP requests and integrates with the MCP CLI. The server is designed for use cases requiring current weather information or forecasts, such as trip planning or outdoor event scheduling."
kvadratni,speech-mcp,31,29572,"This MCP server implementation provides voice interaction capabilities for AI assistants, enabling speech-to-text and text-to-speech functionality. It uses faster-whisper for improved speech recognition performance and integrates with PyAudio for audio processing. The server offers a simplified API for starting conversations and replying to user input, making it suitable for applications requiring natural language voice interfaces with AI models."
block,square-mcp,3,,"This MCP server implementation provides access to Square API functionality, enabling AI assistants to interact with Square's payment and business management services. Developed by Max Novich, it offers a streamlined interface for Square API operations, supporting both sandbox and production environments. The server is built using Python and leverages the squareup library for API interactions. It's particularly useful for AI applications requiring e-commerce capabilities, point-of-sale integrations, or business analytics based on Square data. The implementation focuses on secure API token management through environment variables and efficient request handling, making it suitable for various business-oriented AI use cases."
kvas-it,mcp-server-fs,3,,"This MCP server implements a comprehensive set of filesystem operations, enabling AI agents to interact with the host system's files and directories. Developed using Python and the FastMCP framework, it provides tools for navigation, reading, writing, and analyzing files, as well as a notes system for metadata. The implementation focuses on offering a wide range of file manipulation capabilities through a standardized interface, including batch operations for improved efficiency. It's particularly useful for AI-assisted file management, code analysis, and content generation tasks, allowing seamless integration of AI capabilities with local filesystem operations."
kwen1510,mcp-nltk,0,720,"A lightweight MCP server that provides a word-finding tool for word games, specifically designed to read from a local corpus file and return the longest valid word matching given letter constraints. The implementation filters words efficiently, excluding previously used words and ensuring all letters are within the allowed set, making it useful for games like Spelling Bee where players need strategic word selection."
kyan9400,file-finder-mcp,0,,"This MCP server implementation provides a file finding functionality within the filesystem. It offers a tool to search for files based on a path fragment, returning detailed information such as file name, full path, size, and creation date. The server is built using Python and leverages the os module for filesystem operations, making it suitable for use cases requiring file discovery and metadata retrieval in local or networked environments."
kydlikebtc,mcp-server-bn,10,,"This MCP server integrates with the Binance spot trading API, enabling automated cryptocurrency trading strategies. It leverages the @binance/connector library for API interactions and uses SQLite for local data storage. The implementation focuses on providing a robust foundation for algorithmic trading, with features like secure credential management via keytar. Ideal for developers looking to build custom trading bots or automate portfolio management on Binance."
l33tdawg,strapi-mcp,3,2040,"This MCP server integrates with Strapi CMS, providing a bridge between AI assistants and content management through the MCP protocol. Built with TypeScript, it enables creating, reading, updating, and deleting content entries in Strapi with support for advanced filtering, pagination, sorting, and media uploads. The implementation exposes content types as resources via URI patterns and offers tools for comprehensive content management, making it ideal for AI-assisted content workflows, headless CMS integration, and automated content operations."
l3wi,mcp-lighthouse,1,8494,"This MCP server provides integration with Lighthouse.one portfolio tracker, allowing AI assistants to fetch and display cryptocurrency portfolio data. Built with TypeScript and FastMCP, it offers two main tools: 'authenticate' for logging in with a transfer token URL and 'getLighthousePortfolio' for retrieving detailed portfolio information including total value, asset type breakdown, and major holdings. The implementation securely manages session cookies for persistent authentication and formats portfolio data into readable tables showing asset allocations and values. Ideal for crypto investors who want to quickly analyze their holdings through AI assistants without switching to the Lighthouse web interface."
lakphy,deep-reasoning-mcp,4,1477,"This MCP server implementation provides deep reasoning capabilities for AI models using the Model Context Protocol. Developed by Lakphy, it integrates with OpenRouter's AI SDK to enable sophisticated analysis and inference tasks. The server exposes MCP-compatible endpoints that allow AI assistants to perform complex reasoning operations, likely including multi-step logical deductions, causal analysis, and abstract problem-solving. It is designed for use cases requiring advanced cognitive abilities from AI systems, such as scientific research, strategic planning, or complex decision-making scenarios."
laksh-star,mcp-server-tmdb,24,,"This MCP server, developed by Laksh-star, integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations. It offers tools for searching movies, getting trending titles, and generating personalized recommendations based on movie IDs. The server stands out by combining multiple TMDB API endpoints into a unified interface optimized for AI assistants. By connecting AI capabilities with a vast movie database, this implementation enables AI systems to handle complex movie-related queries and analysis. It is particularly useful for applications in entertainment recommendation systems, film analysis tools, or any AI assistant that needs to work with detailed movie data."
lalanikarim,comfy-mcp-server,18,11729,"This server implementation provides a bridge between the Model Context Protocol (MCP) and ComfyUI, a powerful UI for Stable Diffusion. It allows users to generate images based on text prompts by interacting with a remote ComfyUI server. The implementation uses a predefined workflow exported from ComfyUI, which can be customized to suit specific image generation needs. It's particularly useful for integrating AI image generation capabilities into MCP-based applications, enabling tasks such as creating illustrations, concept art, or visual content for various creative projects."
lalanikarim,comfy-mcp-pipeline,6,,"This MCP server implementation provides a bridge to ComfyUI, a powerful UI for Stable Diffusion workflows. Developed by Karim Lalani, it enables AI assistants to generate images using custom ComfyUI workflows through natural language prompts. The server utilizes a JSON-defined workflow and integrates with the ComfyUI API, allowing for flexible image generation pipelines. It's particularly useful for AI-assisted creative tasks, prototyping visual concepts, and integrating advanced image generation capabilities into AI applications. The implementation focuses on ease of use and configurability, supporting customizable workflow parameters and seamless integration with Open WebUI."
lalanikarim,systemctl-mcp-server,0,,"Systemctl MCP Server provides a bridge between Claude and systemd services, allowing direct management of system services through the conversation interface. The implementation exposes tools for checking service status, starting, stopping, and restarting systemd services via a FastMCP server that communicates using Server-Sent Events (SSE). Built by Karim Lalani, it leverages pystemd to interact with the systemd daemon and includes both server and client components for flexible deployment. This tool is particularly valuable for system administrators who need to monitor and control system services without leaving their AI assistant conversation or switching to a terminal."
lamaalrajih,kicad-mcp,53,,"KiCad MCP Server enables Claude to interact with KiCad electronic design automation projects, providing tools for PCB design analysis, validation, and visualization. The server offers Design Rule Check (DRC) capabilities with history tracking, PCB thumbnail generation, schematic analysis, and project management functions. Built to support macOS, Windows, and Linux, it integrates directly with KiCad's command-line tools and Python modules when available, falling back to alternative methods when needed. This implementation is particularly valuable for electronics designers seeking AI assistance with troubleshooting design rule violations, understanding PCB layouts, and preparing designs for manufacturing without leaving their Claude conversation."
lamemind,coder-toolbox-mcp-server,2,,"This Coder Toolbox MCP server, developed by lamemind, enhances AI-assisted software development workflows. It provides a set of tools for code analysis, manipulation, and testing, focusing on Java class operations and test execution log retrieval. The server offers functionalities such as locating and creating Java classes, managing class content and structure, and accessing test results. By abstracting complex file operations and providing a programmatic interface, it enables AI assistants to perform code-related tasks efficiently. This implementation is particularly useful for automated code review systems, intelligent IDE assistants, or any AI application that needs to interact with Java codebases and test environments programmatically."
landicefu,android-adb-mcp-server,11,562,"Provides a bridge to Android devices through the Android Debug Bridge (ADB), enabling AI assistants to perform common Android development and testing operations. Built by Landice Fu, this TypeScript-based MCP server supports tools for device management, shell command execution, app installation/uninstallation, screenshot capture, and file transfer across connected Android devices."
landicefu,mcp-client-configuration-server,2,,"This MCP server manages configurations for various MCP clients including Cline, Roo Code, WindSurf, Cursor, and Claude app. It provides tools to retrieve, list, add, and remove server configurations from client configuration files, automatically detecting the appropriate file path based on the operating system. The implementation is designed to simplify configuration management for developers working with multiple MCP clients across different platforms."
landicefu,divide-and-conquer-mcp-server,4,2009,"The Divide and Conquer MCP server enables AI agents to break down complex tasks into manageable pieces using structured JSON storage. Developed by Landice Fu, it evolved from a simpler text-based approach to provide robust task tracking with checklist functionality, progress monitoring, and context preservation across multiple conversations. The implementation includes tools for initializing tasks, managing checklist items, tracking completion status, and retrieving task summaries, making it particularly valuable for complex software development projects, research activities, and project planning where context needs to be maintained across multiple interactions."
lane83,mcp-telegram,2,,"This Telegram MCP server, developed as an open-source project, enables AI assistants to interact with Telegram chats through the Telegram Bot API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for sending messages to specific chats. The implementation focuses on security by allowing only whitelisted chat IDs. It's particularly useful for integrating AI capabilities into Telegram-based workflows, enabling use cases like automated notifications, chatbots, or AI-assisted communication channels without requiring deep knowledge of Telegram's API intricacies."
langchain-ai,mcpdoc,301,22575,"MCPDoc is a server that provides documentation access from llms.txt files through the Model Control Protocol. It allows AI assistants to query documentation sources like LangGraph by fetching and parsing llms.txt files from specified URLs. The implementation supports multiple configuration methods including YAML, JSON, or direct URL specification, and offers features like HTTP redirect following and customizable timeouts. Built for integration with Claude Code and other MCP-compatible assistants, MCPDoc enables seamless documentation lookup during coding sessions without requiring users to leave their conversation interface."
langfuse,mcp-server-langfuse,51,,"This MCP server implementation provides access to Langfuse's prompt management capabilities, allowing users to list and retrieve prompts through the Model Context Protocol. Developed by marcklingen, it transforms Langfuse prompts into MCP-compatible formats, supports pagination for prompt listing, and includes a prompt compilation feature. The server also offers tool-based operations for increased compatibility with MCP clients. It's particularly useful for AI applications requiring dynamic prompt management, version control, and integration with existing Langfuse workflows. The implementation focuses on production-labeled prompts and is designed to work seamlessly with Claude Desktop and Cursor environments."
laodev1,perplexity-mcp-server,6,,"This Perplexity MCP server provides a bridge between Claude and Perplexity AI's language models, enabling enhanced AI interactions through tool use. It implements two main tools: perplexity_chat for advanced chat completions with full message history support, and perplexity_ask for simplified single-query interactions. The server is built with TypeScript, uses the @modelcontextprotocol/sdk for MCP implementation, and communicates via stdio transport. It features comprehensive error handling, environment-based configuration, and a modular tool system with type-safe handlers. This implementation is particularly useful for developers and researchers looking to leverage Perplexity AI's capabilities within Claude, enabling applications like advanced chatbots, question-answering systems, and AI-assisted research tools."
laptou,rust-docs-mcp-server,12,,"This MCP server provides access to Rust documentation from docs.rs, enabling AI tools to search for crates, retrieve documentation, type information, feature flags, versions, and source code. Developed by laptou, it offers a standardized interface for querying Rust-related information, making it valuable for developers and AI assistants working with Rust projects. The server is built using Bun and Node.js, with a focus on efficient documentation retrieval and symbol searching within crates."
larkooo,dojo-mcp-go,0,,"This MCP server implementation integrates with the Dojo framework, providing a set of tools and prompts for AI-assisted development. It leverages the mark3labs/mcp-go library to create a server with customizable tools and prompts, loaded dynamically from static directories. The implementation includes logging capabilities, resource management, and a Server-Sent Events (SSE) interface, making it suitable for real-time, interactive AI development environments."
lars-hagen,mcp-playwright-cdp,16,,"This MCP implementation, developed by Lars Hagen, provides integration with Playwright and Chrome DevTools Protocol (CDP) for web automation and testing. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized interface for AI models to interact with web browsers. The implementation focuses on combining Playwright's powerful automation capabilities with CDP's low-level browser control, enabling use cases such as advanced web scraping, automated UI testing, and performance analysis. By connecting AI models with browser automation tools, this server allows for sophisticated web interaction scenarios, enhancing the ability to analyze and manipulate web content programmatically."
lars-hagen,slack-user-mcp,3,,"This MCP server, developed by Lars Hagen, enables AI agents to interact with Slack workspaces as users. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for channel management, messaging, reactions, and user profile retrieval. The implementation focuses on user-level interactions, offering functionality like thread replies and emoji reactions. It's particularly useful for AI assistants or automation systems needing to engage in Slack conversations, enabling use cases such as automated responses, channel monitoring, or user analytics without requiring bot-specific permissions."
larshvidsten,mcp_af_graph,0,,"This MCP server implementation provides a GraphQL client interface for AI assistants. It offers tools for setting up connections to GraphQL endpoints, executing queries, and retrieving schema information. Built using Python and leveraging libraries like gql and httpx, the server focuses on secure authentication handling and efficient query execution. It is particularly useful for AI applications that need to interact with GraphQL APIs, enabling data retrieval and exploration across various domains. The implementation includes features like connection setup, query execution, schema retrieval, and type information lookup, making it versatile for integrating GraphQL data sources into AI workflows."
last9,last9-mcp-server,26,,"Last9 MCP Server enables AI agents to query exception and service graph data from Last9's observability platform. The implementation provides two tools: get_exceptions for retrieving server-side exceptions with details like type, message, and stack trace; and get_service_graph for analyzing upstream and downstream service dependencies with throughput metrics. Built with Go and featuring configurable rate limiting, the server integrates seamlessly with Claude desktop app and Cursor, making it valuable for developers who need AI-assisted troubleshooting and service dependency analysis within their Last9 monitoring environment."
laubplusco,mcp-webdav-server,1,,"WebDAV MCP Server enables Claude and other MCP clients to interact with WebDAV file systems through natural language commands. Built with TypeScript and the Model Context Protocol, it provides a complete set of CRUD operations for files and directories, supports both stdio transport (for Claude Desktop integration) and HTTP/SSE transport for remote access, and includes security features like basic authentication and bcrypt password encryption. The server exposes WebDAV operations as MCP resources, tools, and prompts, making it ideal for AI assistants that need to manage documents, configuration files, or any content stored on WebDAV-compatible servers."
launchthatbrand,mcp-graphql,1,,"mcp-graphql is a Model Context Protocol server that enables LLMs to interact with GraphQL APIs through schema introspection and query execution. Developed by Boris Besemer, it allows AI models to discover and use GraphQL APIs dynamically by providing tools for schema retrieval and query execution, with mutations disabled by default as a security measure. The implementation supports custom headers for authentication, local schema files, and can be easily integrated with Claude Desktop via Smithery, making it ideal for workflows requiring AI assistants to access structured data from GraphQL endpoints."
run-llama,llamacloud-mcp,82,,"LlamaCloud MCP server provides a tool for querying LlamaIndex documentation through RAG (Retrieval-Augmented Generation) using the LlamaCloud managed index service. Developed by Laurie Voss, this implementation connects to a pre-configured LlamaCloud index containing LlamaIndex documentation and uses it to answer queries with detailed responses including code examples. The server requires a LlamaCloud API key and optionally an OpenAI API key for powering the RAG queries, making it ideal for developers who need up-to-date access to LlamaIndex documentation within their AI assistant workflows."
lauriewired,ghidramcp,4094,,"GhidraMCP is a Model Context Protocol (MCP) server implementation that integrates with the Ghidra reverse engineering framework. It allows AI assistants to analyze binary files, decompiled code, and other reverse engineering artifacts directly from Ghidra, enabling more effective collaboration between AI systems and reverse engineers."
lazerthings,twosplit,0,,"Twosplit MCP Server leverages multiple Claude instances to provide enhanced AI responses. It sends the same prompt to two separate Claude models and uses a third instance to either select the best response or combine elements from both, delivering a final optimized answer. The server supports various Claude models including Opus, Sonnet, and Haiku, and returns not only the final response but also the original outputs from both AIs along with source attribution. This implementation is particularly valuable for users seeking more comprehensive or nuanced answers by comparing multiple AI perspectives within a single query."
lazy-dinosaur,ccxt-mcp,26,2094,"CCXT-MCP provides a bridge between the CCXT cryptocurrency trading library and AI assistants through the Model Context Protocol, enabling natural language interactions with over 100 cryptocurrency exchanges. This TypeScript implementation exposes core functionality for retrieving exchange information, market data, orderbooks, and price information, making it ideal for traders and developers who want to monitor cryptocurrency markets, analyze price trends, or build trading bots with AI assistance. The server supports Node.js environments and is designed to be easily integrated into existing trading systems."
leafeye,lunchmoney-mcp-server,6,429,"This MCP server provides a bridge to the Lunchmoney personal finance API, enabling AI assistants to interact with users' financial data. It offers tools for retrieving recent transactions, searching transaction history, analyzing category-specific spending, and obtaining detailed budget summaries. Developed by a third-party contributor, it aims to enhance financial management capabilities within AI conversations. The implementation is particularly useful for personal finance tracking, budget analysis, and expense monitoring use cases, allowing users to gain insights into their spending habits and financial health through natural language interactions."
adi2355,model-context-protocol-servers,0,,"Leafly Strain Scraper is an MCP server that extracts structured cannabis strain data from Leafly.com following a standardized methodology. It implements both regex-based and LLM-powered extraction techniques to collect 66 data points per strain including cannabinoids, terpenes, effects, and flavors. The server handles batch processing with rate limiting, provides fallback mechanisms for missing data, and exports results in CSV or JSON format. Built with Node.js and the Firecrawl API, it requires an API key for authentication and is designed for researchers, developers, and cannabis industry professionals who need reliable, normalized strain information."
leanware-io,clickup-mcp-server,1,,"ClickUp MCP Server provides a bridge to the ClickUp API, enabling AI assistants to manage tasks within ClickUp workspaces. Built by Leanware-io, it offers tools for authenticating with the ClickUp API, retrieving tasks by ID or custom ID, and creating new tasks with customizable properties like priorities, due dates, and tags. The implementation is containerized with Docker for easy deployment and uses TypeScript with Zod for type safety and validation. This server is particularly valuable for project management workflows where teams need to create and retrieve ClickUp tasks directly within AI assistant conversations."
minhyeoky,mcp-server-ledger,7,,"The mcp-server-ledger provides AI assistants with structured access to Ledger CLI, a powerful command-line accounting system. Built with Python using the FastMCP framework, it exposes nine tools that map directly to Ledger commands including balance reports, transaction registers, account listings, and budget analysis. The server requires a valid Ledger file path and includes security measures to prevent command injection. It's particularly valuable for users who want to analyze financial data, generate reports, and track budgets through natural language queries without leaving their AI assistant conversation."
leehanchung,bing-search-mcp,25,,"A Bing Search MCP server that enables AI assistants to perform web, news, and image searches through Microsoft's Bing Search API. Developed by Hanchung Lee, this implementation provides three core tools: web search for general information, news search for current events, and image search for visual content. The server handles rate limiting, comprehensive error handling, and formats results in a clear, structured manner. It's designed to be easily integrated with Claude Desktop and other MCP-compatible clients, allowing AI assistants to access up-to-date information from the web without direct internet access."
leescot,pubmed-mcp-smithery,2,,"The PubMed Enhanced Search MCP Server provides AI assistants with powerful tools to search and analyze academic medical literature through the PubMed database. It offers specialized functions for keyword searches with journal filtering, MeSH term lookups, publication count statistics, detailed paper information retrieval, and structured PICO-based evidence searches. Built with Python using the FastMCP framework, this server implements automatic retry mechanisms with backoff delays to handle potential rate limiting by NCBI's E-utilities service, making it particularly valuable for researchers, healthcare professionals, and academics who need to efficiently access and analyze medical research without leaving their AI assistant conversation."
leftspin,mcp-xcode-diagnostics,3,,"The Xcode Diagnostics MCP plugin extracts and parses build errors and warnings from Xcode's DerivedData logs, enabling AI assistants to quickly identify issues in Swift projects without manually searching through build logs. Developed by Mike R. Manzano, it provides tools to list available Xcode projects and extract structured diagnostic information including file paths, line numbers, error messages, and fix-it suggestions. The implementation features enhanced regex patterns optimized for capturing Swift concurrency-related warnings and includes comprehensive error categorization for syntax errors, type errors, protocol conformance issues, and Swift 6 language mode compatibility warnings, making it particularly valuable for developers working with Swift concurrency features."
legaltime,filesystem,0,,"This MCP server implementation provides secure filesystem operations within specified allowed directories. Developed with Node.js, it offers tools for reading, writing, editing, and searching files, as well as directory management and file metadata retrieval. The server employs strict path validation and security measures to prevent unauthorized access. It's designed for use cases requiring AI assistants to interact safely with local filesystems, such as code analysis, document management, or automated file operations."
theralabs,legion-mcp,13,2461,"Database MCP Server, developed by Legion AI, enables AI assistants to access and query data across multiple database types (PostgreSQL, MySQL, SQL Server, BigQuery, etc.) through a standardized interface. Built with Python using the Legion Query Runner library, it exposes database operations as MCP tools and resources, allowing natural language interactions with databases for executing queries, retrieving schemas, and optimizing SQL statements. The implementation features flexible configuration options and maintains query history for context, making it particularly valuable for data analysis, business intelligence, and database exploration use cases where AI assistants need direct, controlled access to structured data."
leighmcculloch,stellar-mcp-xdr-json,2,,"Stellar MCP Server for XDR-JSON provides Claude with tools to decode and understand Stellar blockchain data by converting XDR (External Data Representation) format to human-readable JSON. The server exposes three main tools: guessing XDR types, decoding arbitrary XDR data, and specifically decoding Stellar transactions. Built using the Model Context Protocol SDK and Stellar's XDR-JSON library, this implementation enables Claude to analyze blockchain transactions and contract events without requiring users to manually decode complex binary data, making it valuable for blockchain developers and analysts working with the Stellar network."
leixiaotian1,pgsql-mcp-server,1,,"A PostgreSQL MCP server that enables AI assistants to interact directly with PostgreSQL databases through a set of specialized tools. It provides capabilities for executing read and write SQL queries, creating tables, and listing database tables - all through the MCP protocol. Built with Go and leveraging the lib/pq driver, this implementation includes security features like query type validation and input sanitization, making it suitable for database management tasks while maintaining appropriate access controls. The server is easily configurable through environment variables and can be integrated with any MCP-compatible AI assistant."
lenwood,cfbd-mcp-server,9,,"This College Football Data MCP server, developed by Chris Leonard, provides AI assistants with access to comprehensive college football statistics via the College Football Data API. Built with Python and leveraging libraries like httpx and pydantic, it offers a natural language interface for querying game results, team records, player stats, rankings, and advanced metrics. The server implements robust error handling, rate limiting, and caching to optimize API usage. By abstracting the complexities of data retrieval and analysis, it enables AI systems to generate insights on team performance, analyze historical trends, and compare statistics across seasons. This implementation is particularly valuable for sports analysts, researchers, and fans seeking in-depth college football data analysis, facilitating use cases such as game prediction, player evaluation, and historical performance comparisons."
leobuskin,mcp_jetbrains_proxy,0,,"This MCP JetBrains Proxy, developed by Leonard Buskin, provides a bridge between Large Language Models (LLMs) and JetBrains IDEs. Built with Python and leveraging libraries like aiohttp, it offers a standardized interface for LLMs to interact with JetBrains development environments. The proxy abstracts the complexities of IDE communication, enabling AI assistants to seamlessly integrate with code editing, project management, and debugging functionalities. It's particularly valuable for enhancing developer productivity, facilitating use cases such as intelligent code completion, automated refactoring suggestions, and context-aware documentation generation within JetBrains IDEs."
leomercier,mcp-tunnel,2,,"MCP Tunnel provides a secure way to access VM command lines through a web-based terminal interface. Built with TypeScript and Express, it creates a WebSocket connection for real-time command execution and automatically establishes a web tunnel using localtunnel, making the VM accessible from anywhere. The server exposes MCP tools for executing shell commands and managing tunnels, while the frontend delivers an interactive terminal experience with features like command history and proper output formatting, making it ideal for remote VM management without requiring direct SSH access."
leonardsellem,n8n-mcp-server,148,18816,"n8n MCP Server provides a bridge between AI assistants and n8n workflow automation through the Model Context Protocol. It offers tools for managing workflows (listing, creating, updating, activating) and executions, along with resources for accessing workflow data. Built with TypeScript and using the MCP SDK, it authenticates with n8n via API keys and follows a layered architecture that separates API client, tools, and resources. This implementation is particularly valuable for users who want to automate tasks, monitor workflow executions, or integrate n8n capabilities directly within AI assistant conversations."
leonelberio,the-wordpress-mcp-server,1,,"The WordPress MCP server provides a bridge between AI assistants and WordPress sites, enabling content management operations through the Model Context Protocol. Developed by Leonelberio, this TypeScript implementation leverages the MCP SDK and Axios to offer tools for creating, retrieving, and updating WordPress posts via the WordPress REST API. The server supports authentication through environment variables or request parameters, making it flexible for various deployment scenarios. It's particularly valuable for content creation workflows where AI assistants need to directly interact with WordPress sites without requiring users to manually transfer content."
leonmelamud,mysql-mcp,5,,"MySQL MCP server provides direct database interaction capabilities for AI agents, enabling users to query, manage, and explore MySQL databases through natural language commands. Built by Leon Melamud, it supports operations like listing tables, executing SQL queries, and creating notes, with a focus on making database interactions accessible to users without SQL expertise while maintaining security through parameterized queries."
leovoon,mcp-emotion,0,,"MCP-Emotions is a server implementation that analyzes text for emotional content and provides meaningful interpretations. Built with TypeScript and the Model Context Protocol SDK, it maintains a knowledge base of 19 different emotional states (like anger, anxiety, fear) and their corresponding interpretations. When text is submitted through the analyzeEmotion tool, the server identifies matching emotions from its database and returns personalized, variation-rich responses that not only recognize the emotion but offer constructive perspectives on how to understand and work with that emotional state."
leslieleung,mcp-server-memos,7,1215,"Memos MCP Server provides a bridge between Claude and the Memos note-taking application, enabling AI assistants to search existing notes and create new ones with tags. Built by Leslie Leung, it offers two primary tools: searching memos by keyword and creating new memos with automatic tagging. The server connects to any Memos instance using API keys and environment variables for configuration, making it ideal for users who want to capture insights from conversations directly into their personal knowledge base without switching contexts."
letz-ai,letzai-mcp,1,,"LetzAI-MCP is a server that connects AI assistants to the LetzAI image generation API, enabling image creation and upscaling through natural language. The implementation provides two main tools: image generation with customizable parameters like dimensions, quality, and creativity, and image upscaling with adjustable strength. Built with TypeScript and the Model Context Protocol SDK, the server handles authentication via API keys, manages asynchronous image processing with progress updates, and automatically opens completed images in the user's browser. This integration is particularly valuable for users who want to generate or enhance images directly through AI assistants without switching to a separate interface."
lexiconalex,better-auth-mcp-server,0,,"Better-Auth MCP Server provides tools for setting up, migrating to, and maintaining Better-Auth authentication systems in web applications. It offers capabilities for analyzing project structures, configuring Better-Auth implementations, testing authentication flows, and debugging security issues. The server implements the Model Context Protocol to expose tools for project analysis, migration planning from existing auth systems (like auth.js/next-auth), security testing, and real-time monitoring of authentication processes. Configuration requires a Better-Auth project ID and API key, and the server can be deployed using Docker or run directly with Node.js, making it valuable for developers implementing or troubleshooting authentication in their applications."
lgcarrier,xrpl-mcp-server,3,,"XRPL MCP Server provides AI models with direct access to XRP Ledger data and functionality through a standardized interface. It enables querying account information, trust lines, NFTs, transaction history, order book data, and submitting signed transactions to the network. Built with Python using the xrpl-py library and FastMCP framework, it connects to public XRPL nodes by default but can be configured for private node connections. This implementation is valuable for AI assistants that need to retrieve real-time blockchain data or interact with the XRP Ledger ecosystem."
lharries,whatsapp-mcp,3283,,"WhatsApp MCP Server provides a secure bridge to your personal WhatsApp account, enabling AI assistants to search messages, manage contacts, and send messages through standardized tools. The implementation uses a two-component architecture with a Go-based WhatsApp bridge that connects to the WhatsApp web API via the whatsmeow library, storing all messages locally in SQLite, and a Python MCP server that exposes functionality through nine specialized tools. Designed for privacy, it keeps your message history on your device while allowing controlled AI access to your conversations for tasks like finding past information or sending new messages."
liamcioci,server-wp-mcp,0,,"The WordPress MCP server enables AI assistants to interact with WordPress sites through a standardized interface. It handles authentication and provides a secure way to discover and interact with WordPress REST API endpoints. The server loads site configurations from a JSON file, establishes connections with Basic Auth, and exposes two main tools: wp_discover_endpoints for mapping available API endpoints on a WordPress site, and wp_call_endpoint for executing specific REST API requests with parameters. This implementation is particularly valuable for users who need to manage WordPress content or retrieve site data directly through AI assistants without manual API configuration."
lifejwang11,alphavantage-mcp,0,,"AlphaVantage MCP Server provides a comprehensive bridge to the AlphaVantage financial data API, enabling access to stock market, forex, cryptocurrency, and fundamental financial data through a standardized MCP interface. Built by lifejwang11, this server encapsulates a wide range of financial data retrieval tools, including time series, technical indicators, and company financial metrics, making it easy to integrate complex financial data queries into AI-driven applications."
lifinance,lifi-mcp,1,,"LI.FI MCP Server enables AI assistants to interact with cross-chain token transfers and swaps through the LI.FI API. It provides tools for querying token information, fetching quotes, checking transaction status, and executing transfers using a connected Ethereum wallet. The implementation includes wallet management capabilities for signing transactions, chain data caching for improved performance, and comprehensive error handling. Particularly valuable for use cases involving DeFi operations, cross-chain transfers, and token management without leaving the conversation interface."
lightfate,ssh-tools-mcp,0,,"The SSH Tools MCP server provides a secure interface for AI assistants to connect to and interact with remote servers via SSH. Built using the FastMCP framework and Paramiko library, it exposes three core tools: connecting to SSH servers, executing commands on connected servers, and disconnecting from sessions. This implementation maintains a single global connection state, allowing for persistent SSH sessions throughout a conversation, making it particularly valuable for system administration tasks, server diagnostics, and remote management workflows that require command execution across multiple interactions."
lileeei,mcp-git-tools,2,,"This MCP server implementation provides Git tools for the Model Context Protocol. It integrates with the MCP Core, Server, and Macros libraries to enable Git-related operations. The server is built using Rust and leverages asynchronous programming with Tokio. It's designed for use cases requiring version control integration within AI-assisted applications, such as managing code repositories or tracking changes in collaborative environments."
ipvr9,mcp-limitless-server,5,,"The Limitless MCP Server provides AI assistants with access to the Limitless API for retrieving and searching personal lifelogs recorded via the Limitless Pendant. Developed by Ryan Boyle, this TypeScript implementation offers five specialized tools for interacting with lifelog data: retrieving logs by ID, listing logs by date or time range, fetching recent recordings, and performing keyword searches within log content. The server handles API authentication, pagination, error management, and result formatting while providing clear guidance on tool selection—recommending list operations for conceptual analysis and reserving search functionality specifically for keyword queries. It's particularly useful for users who want their AI assistants to analyze their Limitless recordings for summaries, action items, and key topics without requiring direct API access."
lincest,mcp-papersearch,4,,"This papersearch MCP implementation provides an interface for querying academic papers from the arXiv repository. Built with Python using the arxiv library, it enables AI assistants to search for and retrieve metadata about scientific publications. The implementation supports functions like searching by keyword, retrieving paper details, and listing recent submissions across different subject categories. It stands out by focusing specifically on arXiv as a data source, making it particularly useful for researchers, students, and academics who want to leverage AI assistance in literature reviews, staying updated on recent publications, or exploring connections between papers in their field of study."
skspade,mcp-linear-server,3,,"Linear MCP Server provides a robust integration with Linear's project management platform, enabling AI models to create, search, and manage issues across teams. Built with TypeScript and the Linear SDK, it exposes a comprehensive set of tools for querying sprint issues, updating issue statuses, and retrieving detailed project information, making it ideal for teams seeking to streamline workflow automation and project tracking through conversational AI interfaces."
zalab-inc,mcp-linear-app,0,,"MCP Linear App provides a set of tools for AI assistants to interact with Linear's issue tracking system. Built with TypeScript and the Linear SDK, it enables searching, creating, and updating issues, managing comments, and retrieving user profiles and team information. The implementation features robust error handling, standardized response formatting, and helper utilities for working with Linear's API. This server is particularly useful for development teams looking to integrate AI assistants into their project management workflow, allowing for issue creation, status updates, and team collaboration directly through conversation interfaces without switching to the Linear application."
martinsione,linear-remote-mcp,16,,"Linear Remote MCP is a Cloudflare Workers-based server that provides AI assistants with access to Linear's issue tracking capabilities. Built by Martin Sione, this implementation enables users to manage issues, teams, workflows, and users through a set of well-defined tools. The server handles OAuth authentication with Linear's API, allowing secure access to a user's Linear workspace. Key features include creating and updating issues, searching across workspaces, managing team information, and listing workflow states. This server is particularly useful for AI assistants that need to help users manage their project tasks, create bug reports, or organize work items without leaving their conversation context."
linglai27,mcp-tools,0,,"MCP-tools provides file system management capabilities for AI assistants through a FastMCP server implementation. Created by Linglai Chen, it offers tools for removing directories, counting PDF files, retrieving detailed file information, and recursively analyzing directory structures with comprehensive error handling. The implementation exposes these file operations as callable tools that enable AI systems to interact with the local file system, making it particularly useful for workflows involving file organization, document management, and directory analysis tasks."
lingodotdev,lingo.dev,1458,77098,"Lingo.dev MCP server enables AI assistants to translate content across multiple languages through the Model Context Protocol. Built by the Lingo.dev team, it provides a 'translate' tool that leverages advanced language models to handle app localization, website content, and other text data. The implementation can be run via npx command with an API key from the Lingo.dev platform, making it accessible from various AI tools including Cursor, Claude desktop, and Cline for VS Code. This integration is particularly valuable for developers and content creators who need to translate materials without leaving their AI assistant workflow."
linkupplatform,python-mcp-server,15,84792,"This MCP server, developed by Linkup Technologies, enables AI assistants to perform web searches using the Linkup API. It leverages the Linkup SDK and MCP library to provide a standardized interface for executing search queries and retrieving results. The server abstracts the complexities of API interactions, offering a simple way for AI systems to access web search capabilities. By connecting AI assistants with Linkup's search technology, this implementation facilitates tasks such as information gathering, fact-checking, and research. It is particularly useful for AI applications requiring up-to-date web information, like question-answering systems, content generation tools, or any AI that needs to augment its knowledge with current web data."
lior-ps,multi-llm-cross-check-mcp-server,5,,"Multi LLM Cross-Check MCP Server provides a unified interface for querying multiple LLM providers simultaneously, allowing users to compare responses side-by-side. Built with Python using FastMCP, this server integrates with Claude Desktop and supports OpenAI, Anthropic, Perplexity AI, and Google Gemini APIs through asynchronous parallel processing. The implementation handles API authentication, request formatting, and error management for each provider, making it particularly valuable for users who want to cross-reference AI responses for fact-checking, gathering diverse perspectives, or evaluating different models' capabilities on the same prompt."
lipdog,excel-master-mcp,5,,"This MCP server, developed by an unnamed author, provides integration with Excel operations using XLwings. Built with Node.js and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with Excel spreadsheets programmatically. The implementation focuses on bridging the gap between AI and Excel, allowing for automated data manipulation, analysis, and reporting. It's particularly useful for businesses and analysts who want to incorporate AI-driven insights into their Excel workflows, enabling use cases such as automated financial modeling, data cleansing, and report generation without manual Excel interactions."
lipdog,lipsky-memory,0,,"Lipsky Memory MCP is a server for managing project context and relationships using Turso database for persistence. It supports tracking entities, maintaining project memory, and handling transactions, currently operational in the Cline environment with ongoing investigation into connection issues in HyperChat."
lishenxydlgzs,aws-athena-mcp,9,600,"This MCP server enables AI assistants to execute SQL queries against AWS Athena databases and retrieve results. Developed by Shen Li, it integrates with the AWS SDK to provide a standardized interface for Athena operations. The server is particularly useful for applications requiring large-scale data analysis, business intelligence, or integration with AWS data lakes."
lishenxydlgzs,simple-files-vectorstore,16,,"This MCP server, developed by lishenxydlgzs, provides a vector store for local files and directories, enabling semantic search across their contents. Built with TypeScript and leveraging libraries like LangChain and FAISS, it offers tools for initializing the store and performing searches. The implementation focuses on creating embeddings from supported file types (Markdown, HTML, JSON, plain text) using the all-MiniLM-L6-v2 model and storing them efficiently. It's particularly useful for teams wanting to add semantic search capabilities to their local document repositories, enabling use cases such as context-aware information retrieval, automated document linking, and AI-assisted content exploration without relying on external search services."
revit-mcp,revit-mcp,56,,"Revit-MCP is a Node.js server implementation that enables AI assistants to interact with Autodesk Revit models through the Model Context Protocol. It provides tools for creating, deleting, and modifying Revit objects, with specific functionality for wall creation and object deletion. The server uses a stdio transport layer for communication and implements a tool registration system that allows for extensible Revit model manipulation capabilities, making it particularly valuable for architectural design workflows and BIM (Building Information Modeling) processes."
lite,iterm-mcp,0,,"iTerm-MCP provides AI models with direct access to the active iTerm terminal session, enabling efficient interaction with terminal output and command execution. Built by Ferris Lucas, it features tools for reading terminal output, writing commands, and sending control characters, allowing models to inspect only relevant output and interact with REPLs. The implementation requires minimal dependencies, runs via npx, and integrates seamlessly with Claude Desktop and other MCP clients, making it ideal for workflows where users want to share their terminal with AI assistants for troubleshooting, task delegation, or interactive terminal sessions."
littledivy,mcp-deno-kv,3,,"DenoKV MCP Server provides a bridge to Deno's key-value store, enabling AI assistants to perform persistent data storage operations. The implementation offers three core tools for setting, retrieving, and deleting key-value pairs in the Deno KV database. Built with TypeScript using the Model Context Protocol SDK, it runs as a standalone process that communicates via standard I/O. This server is particularly valuable for applications requiring simple persistent storage between sessions without the complexity of a full database system."
littleironwaltz,bluesky-mcp,9,,"Bluesky MCP is a Go-based server that implements the Model Context Protocol for the Bluesky social network, enabling AI-powered features through three main services: Feed Analysis for sentiment analysis on posts, Post Assistant for generating content suggestions based on mood and topic, and Community Management for tracking user activity. Developed by Koji, the implementation prioritizes reliability with features like circuit breakers, retry mechanisms, fallback responses, and persistent caching, while maintaining security through input validation, TLS enforcement, and rate limiting. The server connects to the Bluesky API via AT Protocol and includes comprehensive error handling and performance optimizations like connection pooling and parallel processing."
liujilongobject,mcp-host-cli,3,1009,"A simple and easy-to-use MCP Host CLI that provides a command-line interface for creating and managing MCP hosts. Built by Liu Jilong, this tool leverages the Model Context Protocol SDK to establish connections between AI assistants and external services. The implementation includes both client and server components, allowing users to quickly set up an MCP host environment through a streamlined CLI experience. It's particularly useful for developers looking to integrate AI capabilities with their applications without dealing with complex configuration processes."
liuscraft,superset-mcp-server,3,,"Superset-MCP-Server provides a TypeScript-based bridge between AI assistants and Apache Superset, enabling direct interaction with data visualization dashboards through the Model Context Protocol. The implementation leverages the MCP SDK to expose Superset's API functionality, allowing assistants to query, analyze, and visualize data without context switching. Built with a modular architecture that separates API services from HTTP utilities, it includes example code to demonstrate integration patterns and supports environment-based configuration for flexible deployment options."
liuwanglei-tal,nasa-mcp,0,,"NASA APOD MCP Service provides access to NASA's Astronomy Picture of the Day API within the Cursor IDE. Developed by Simon Liu, this service allows users to retrieve daily astronomy images and their descriptions directly through the Cursor interface. Built with Node.js and Axios, it creates a streamlined connection to NASA's APOD data, making it valuable for developers working on astronomy-related projects, educational tools, or simply wanting to incorporate stunning space imagery into their applications without leaving their development environment."
freezonex,mcp-server-supos,7,7637,"This MCP server implementation, developed by liuyanqiu, provides integration with the SUPOS platform. It utilizes the @modelcontextprotocol/sdk and offers functionality for interacting with SUPOS services. The server is designed to facilitate communication between MCP clients and SUPOS, enabling applications to leverage SUPOS capabilities within the MCP ecosystem. It's particularly useful for projects that require seamless integration of SUPOS features into MCP-based workflows."
livehybrid,splunk-mcp,16,,"The Splunk MCP tool provides a natural language interface to Splunk Enterprise/Cloud operations, enabling AI assistants to execute searches, manage indexes, handle users, and perform KV store operations. Built with Python using FastMCP and the Splunk SDK, it features async support for better performance, detailed logging with emoji indicators, and flexible SSL configuration options. The implementation can run in both STDIO mode for command-line integration and SSE mode for web server integration, making it particularly valuable for security analysts and system administrators who need to query and manage Splunk resources through conversational interfaces."
li-vien,lark-tools-mcp,20,,"Feishu Tools MCP Server provides a bridge between Claude and Feishu (also known as Lark), enabling AI assistants to retrieve document content from Feishu's collaborative workspace. Built by Li-vien, this Node.js implementation authenticates with the Feishu API using app credentials and offers a tool for fetching document content by ID. The server supports both HTTP and stdio transport modes, making it versatile for different integration scenarios. It's particularly useful for workflows that require analyzing, referencing, or working with content stored in Feishu documents without manual copying and pasting."
lizthedeveloper,terminal-mcp-idk,2,,"Terminal MCP Server provides secure command-line access for AI assistants, enabling execution of shell commands through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, it validates input commands using Zod schemas and returns both standard output and error streams in a structured format. The server runs on stdio, making it lightweight and easily integrable into existing workflows where programmatic terminal access is needed, while handling errors gracefully to provide meaningful feedback when commands fail."
lkm1developer,apollo-io-mcp-server,1,,"Apollo.io MCP Server provides seamless integration with the Apollo.io API, enabling AI assistants to access and manipulate sales intelligence data. Developed by Lakhvinder Singh, this TypeScript implementation exposes five core tools for enriching people and organization data, searching for contacts and companies, and retrieving job postings. The server authenticates via Apollo.io API keys, supports optional authentication server integration through mcp-proxy-auth, and is designed with extensibility in mind for adding new Apollo.io capabilities. It's particularly valuable for sales teams and recruiters who need to access up-to-date contact information, company details, and job listings directly through their AI assistants."
lkm1developer,hubspot-mcp-server,9,,"HubSpot MCP Server provides seamless integration with the HubSpot CRM API, enabling AI assistants to create and manage contacts and companies, retrieve detailed activity histories, and access engagement data. Built with TypeScript using the Model Context Protocol SDK, this server exposes six powerful tools for interacting with HubSpot data, including contact creation, company management, and activity tracking. Ideal for businesses looking to incorporate their CRM operations into AI assistant workflows without leaving their conversational interface."
llmian-space,devdocs-mcp,7,,"This DevDocs MCP implementation, developed by llmian-space, provides a Python-based interface for AI assistants to interact with software documentation. Built using libraries like Pydantic, Hypothesis, and Trio, it offers tools for processing, indexing, and retrieving documentation from various sources. The implementation focuses on efficient documentation handling, version management, and content transformation, making it easier for AI models to access and utilize technical documentation. It's particularly useful for enhancing AI capabilities in software development workflows, enabling tasks like code assistance, API exploration, or technical writing support without requiring deep knowledge of specific documentation formats or structures."
lloydzhou,bitable-mcp,2,4292,"Bitable MCP Server provides access to Lark Bitable through the Model Context Protocol, allowing AI assistants to interact with Bitable tables using SQL-like queries. Built by lloydzhou, it leverages the pybitable library to establish connections to Lark's API and offers three main tools: listing available tables, describing table schemas, and executing read queries against the data. The implementation requires Lark API credentials (personal base token and app token) and supports one-click installation for Claude Desktop, making it ideal for workflows that need to analyze or reference structured data stored in Lark Bitable without leaving the conversation interface."
lmcmz,flow-mcp-server,0,,"Flow MCP Server provides direct RPC communication with the Flow blockchain, enabling AI assistants to interact with blockchain data and execute operations. Built by lmcmz, it offers tools for checking account balances, resolving domain names (.find and .fn), executing Cadence scripts, and sending transactions. The server implements the Model Context Protocol standard for seamless integration with AI agents, and includes both HTTP endpoints and stdio mode for flexible deployment options. This implementation is particularly valuable for blockchain applications that need to access Flow data, query token balances, or automate transaction workflows without requiring users to switch context."
lobstercare,geofs-mcp,1,,"GeoFS MCP Server provides a bridge between AI assistants and the GeoFS flight simulator, enabling natural language control of aircraft through GPT-4o. The TypeScript implementation creates a WebSocket server that connects to GeoFS via a browser bookmarklet, allowing commands to be translated into simulator actions like takeoff, landing, and navigation maneuvers. It features a simulated flight physics engine for testing without browser access, flight pattern replay capabilities, and a dashboard for monitoring aircraft telemetry. Ideal for flight simulation enthusiasts who want to control aircraft using conversational AI or developers building autonomous flight control systems."
diganto-deb,local_file_organizer,0,,"Local File Organizer is a Python-based MCP server that helps users manage and organize their files by automatically categorizing them based on file extensions. It provides tools for analyzing directory contents, creating category folders, moving files in bulk, and identifying project directories to preserve their structure. The implementation includes features like recursive directory scanning, metadata retrieval, and project detection based on common indicators like .git folders or package.json files. Particularly useful for cleaning up messy downloads folders, organizing media collections, or preparing directories for backup while respecting important project structures."
localsummer,dify-workflow-mcp,9,,"This MCP server implementation provides a bridge to Dify, a low-code AI application development platform. It enables AI assistants to interact with Dify workflows, allowing for tasks like generating text, analyzing data, and managing conversational flows. The server integrates with Dify's API, offering features such as prompt management and model fine-tuning. It's designed for developers looking to leverage Dify's capabilities within their AI applications, streamlining the process of building and deploying AI-powered solutions."
locchung,three-js-mcp,4,,"Three-js-mcp is a Model Context Protocol server that enables AI assistants to control and manipulate Three.js 3D scenes through a WebSocket connection. The implementation provides tools for adding, moving, and removing 3D objects, controlling object rotation, and retrieving scene state information. Built with TypeScript and the MCP SDK, it establishes a bidirectional communication channel between AI assistants and Three.js clients, making it valuable for creating interactive 3D experiences, visualizations, or educational tools through natural language commands without requiring direct code manipulation."
lochgeo,kube-mcp,1,,"The kube-mcp server provides AI assistants with direct access to Kubernetes cluster operations through a set of specialized tools built with Python using the FastMCP framework. It enables capabilities like listing, creating, and managing pods, deployments, and services, as well as retrieving logs and cleaning up resources. The implementation includes predefined container templates for common images (Ubuntu, Nginx, Busybox, Alpine) with appropriate resource limits and health checks. It's particularly valuable for DevOps workflows requiring Kubernetes management within AI assistant conversations, allowing users to monitor cluster state, deploy test containers, and troubleshoot issues without switching to separate command-line tools."
loglmhq,mcp-server-github-repo,4,,"This GitHub repository MCP server, developed by LogLM, provides AI assistants with access to GitHub repository contents. It integrates with the GitHub API to offer file browsing, content retrieval, and directory navigation capabilities. The server handles authentication, request formatting, and response parsing to simplify interactions with GitHub repositories. By connecting AI systems to version-controlled codebases and documentation, this implementation enables assistants to analyze project structures, read source code, and access file contents programmatically. It is particularly useful for applications requiring code analysis, documentation generation, or any scenario where an AI needs to work with and understand GitHub-hosted projects."
loglmhq,mcp-server-prometheus,14,,"This MCP server for Prometheus, developed by LogLM, provides a bridge between AI assistants and Prometheus metrics data. It offers a structured interface to access metric schemas, metadata, and current statistical information from Prometheus instances. The server supports basic authentication and exposes metrics through a RESTful API structure. By abstracting Prometheus query complexities, it enables AI systems to easily retrieve and analyze monitoring data. This implementation is particularly useful for DevOps teams, system administrators, and data analysts who want to incorporate Prometheus metrics into AI-driven workflows for tasks such as automated system health monitoring, performance analysis, and anomaly detection."
lolrazh,cad-mcp,5,,"This MCP server implementation provides a bridge to the Rayon Design CAD interface, enabling AI assistants to search for drawing methods and create shapes programmatically. Developed using Python and the FastMCP framework, it leverages browser automation to interact with the Rayon Design website. The server offers asynchronous operations for searching and drawing, making it suitable for applications requiring CAD integration within AI-assisted design workflows."
longjianjiang,mermaid-mcp-server,0,,"Mermaid MCP Server provides a bridge between AI assistants and mermaid.js for generating diagrams and visualizations through natural language. Built with Python using FastMCP, it exposes tools for generating mermaid diagrams securely while maintaining full compliance with the MCP 1.0 specification. The implementation is optimized for performance and scalability, making it valuable for users who need to create flowcharts, sequence diagrams, and other visualizations directly through their AI assistant conversations."
longmans,coin_api_mcp,20,,"This MCP server, developed by longmans, provides access to CoinMarketCap's cryptocurrency data through a standardized interface. Built with Python and leveraging the MCP library, it offers tools for fetching cryptocurrency listings, detailed coin information, and market quotes. The implementation stands out by supporting various query parameters like price ranges, market cap filters, and sorting options. By abstracting CoinMarketCap's API complexities into an MCP-compatible format, this server enables AI systems to easily retrieve and analyze cryptocurrency market data. It is particularly useful for applications requiring real-time crypto market information, such as portfolio tracking tools, market analysis bots, or AI-powered trading assistants."
longportapp,longport-mcp,4,,"Longport MCP is a server implementation that provides AI assistants with direct access to Longport's financial OpenAPI services. Built with Rust, it offers tools for retrieving market data (quotes, depth, trades, candlesticks), executing trades, managing orders, and accessing account information. The server supports both stdio and SSE transport protocols, making it versatile for different integration scenarios. With cross-platform compatibility for Linux, Windows, and macOS (both x86_64 and ARM64), it enables AI agents to perform sophisticated financial operations including submitting orders, checking positions, and analyzing market data without leaving the conversation interface."
loopwork-ai,imcp,384,,"iMCP is a macOS menu bar application that enables AI assistants to access system services including Calendar, Contacts, Messages, Reminders, Location, and Weather. Developed by Loopwork, it creates a secure bridge between Claude Desktop and macOS native APIs through a Bonjour-advertised TCP server that requires explicit user permission for each connection. The app features a simple toggle interface for enabling specific services and includes integration with Claude Desktop for easy configuration. It's particularly useful for AI assistants that need to perform tasks like checking schedules, finding contacts, sending reminders, or getting weather information without requiring users to manually copy information."
loopwork-ai,emcee,213,,"Emcee is a CLI tool that creates Model Context Protocol servers from OpenAPI specifications, enabling AI assistants to interact with REST APIs through JSON-RPC. Developed by Loopwork AI, it processes an OpenAPI spec (from a file, URL, or stdin) and automatically generates tools that map to API endpoints, handling authentication, parameter validation, and response formatting. The tool supports various authentication methods including Bearer tokens and Basic auth, with secure 1Password integration for credential management. Emcee is particularly useful for quickly exposing existing APIs to Claude Desktop and other MCP-compatible assistants without writing custom integration code."
lorhlona,geminiserchmcp,21,,"This TypeScript-based MCP client, developed by Lorhlona, enables AI assistants to perform searches using the Google Gemini API. Built with the @modelcontextprotocol/sdk and axios, it provides a streamlined interface for querying Gemini and retrieving search results. The implementation stands out by leveraging Gemini's advanced language understanding capabilities. By connecting AI systems with Google's latest search technology, this client allows for more contextually relevant and up-to-date information retrieval. It is particularly useful for enhancing AI assistants with powerful web search capabilities, conducting research tasks, or building applications that require natural language understanding in search queries."
lorrylockie,lark-mcp,0,65,"Lark MCP Server provides a bridge between AI assistants and Lark/Feishu workplace collaboration platform, enabling access to employee information and messaging capabilities through a standardized interface. Built with TypeScript and the Model Context Protocol, it exposes tools for retrieving user data from Lark's Contact API and sending messages to users. The server handles authentication through app credentials provided via command line arguments or environment variables, manages API connections with automatic token management, and properly formats responses for AI consumption. This implementation is particularly valuable for organizations using Lark/Feishu who want their AI assistants to access company directory information without switching contexts."
lostinbrittany,clever-doc-mcp-server,0,,"This MCP server, developed by Horacio Gonzalez, exposes Clever Cloud's documentation through a standardized interface. Built with TypeScript and leveraging FastMCP, it provides tools for querying and accessing Clever Cloud's documentation programmatically. The implementation focuses on simplifying access to Clever Cloud's documentation, offering functionality to retrieve and search through documentation content. It's particularly useful for developers and users of Clever Cloud looking to integrate documentation access into their workflows or tools, enabling use cases such as automated documentation lookup, integration with development environments, and AI-assisted troubleshooting without directly navigating Clever Cloud's documentation website."
junmer,mcp-server-lottiefiles,0,,"LottieFiles MCP Server provides a bridge between AI assistants and the LottieFiles API, enabling search and retrieval of Lottie animations. Built with TypeScript and the Model Context Protocol SDK, it offers tools for searching animations by keywords, retrieving animation details, and accessing popular animations. The server implements resource handling for popular animations and prompt capabilities to guide interactions, making it valuable for workflows requiring animated content without leaving the conversation interface."
mnbpdx,mcp,0,,"A collection of Model Context Protocol (MCP) servers developed by Mark Beebe that provide various capabilities to AI assistants. The repository includes servers for dice rolling, price checking on Amazon, Mac notifications, and several Lowe's-specific implementations that integrate with services like GitHub, Redis, PostgreSQL, and Google Maps. The implementation uses a mix of Python (with FastMCP) and TypeScript servers, with Docker containerization support for deployment flexibility. Each server follows a consistent pattern with tools, resources, and prompts defined according to the MCP specification, making it easy to extend Claude and other AI assistants with new capabilities."
lowlyocean,mcp-ddgs,0,,"This MCP server implementation provides a simple interface for searching Duck Duck Go, based on Open-WebUI's built-in Web Search feature. Developed by lowlyocean, it utilizes the duckduckgo-search library to perform text searches and return results as a list of dictionaries containing links, titles, and snippets. The server is designed to work with Python 3.11+ and uses FastMCP for easy integration into MCP-based systems. It's particularly useful for AI applications requiring quick access to web search results, such as information retrieval tasks or content generation. The implementation focuses on simplicity and efficiency, making it suitable for both development and production environments with Docker support."
lowlyocean,mcp-vikunja,2,,"This MCP server implementation provides integration with Vikunja, a task management and to-do list application. Developed by lowlyocean, it enables AI assistants to interact with Vikunja's API for creating and retrieving tasks. Built using TypeScript and the Model Context Protocol SDK, the server focuses on secure token management through environment variables and supports Docker deployment. It is particularly useful for AI applications that need to automate task creation, manage to-do lists, or integrate task management into their workflows. The implementation leverages Vikunja's API capabilities and provides a streamlined interface for task-related operations."
lowprofix,n8n-mcp-server,2,,"N8n-MCP-Server provides a validation and best practices framework for n8n workflows, enabling AI assistants to interact with n8n automation platform. It implements tools for workflow validation, API integration, NextJS integration, and workflow management through a TypeScript Express server. The implementation includes specialized validators for calendar integrations, documentation, error handling, naming conventions, performance, and security, making it particularly valuable for teams building complex automation workflows that need to maintain quality standards and follow best practices."
lpsdevelopers,lps-mcp,1,,"LPS-MCP is a secure filesystem server implementation that provides AI assistants with controlled access to local files and directories. It features robust path validation to prevent directory traversal attacks, comprehensive file operations (reading, listing, searching), and a unique Sequential Thinking tool that enables step-by-step problem solving with support for thought revision and branching. The server runs on stdio transport, making it compatible with Claude Desktop, and only allows access to explicitly specified directories passed as command-line arguments - making it particularly valuable for safely exposing local filesystem resources to AI assistants while maintaining security boundaries."
lroolle,openai-agents-mcp-server,1,,"OpenAI Agents MCP Server exposes OpenAI's agent capabilities through the Model Context Protocol, allowing AI assistants to access web search, file search, and computer actions. Built by Eric Wang, it implements both specialized agents for individual tools and a multi-agent orchestrator that can coordinate between them based on the task requirements. The server uses FastMCP to handle communication, supports both stdio and SSE transports, and includes a simulated computer interaction mode that can be extended for real-world actions. Particularly valuable for workflows requiring real-time information retrieval, document analysis, or safe computer automation within AI assistant conversations."
lsd-so,lsd-mcp,63,,"This MCP server, developed by LSD.so, enables Claude to directly query and analyze web content using LSD SQL, a domain-specific language for web scraping. Built with Python and leveraging cloud browsers, it allows Claude to write and execute LSD SQL queries to extract structured data from websites. The implementation focuses on providing a flexible interface for web data extraction, including features like parallel processing and just-in-time table creation. It's particularly useful for applications requiring real-time web data analysis, enabling use cases such as market research, competitor analysis, and content aggregation without complex web scraping setups or API integrations."
lsemenenko,openhue-mcp-server,8,,"This OpenHue MCP server, developed by an unnamed author, integrates with Philips Hue smart lighting systems to enable AI-controlled home automation. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for managing light states, scenes, and schedules. The server implements secure local network discovery and authentication with Hue bridges, offering a standardized interface for complex lighting operations. By abstracting the intricacies of the Hue API, it allows AI systems to easily control and monitor smart lighting environments. This implementation is particularly valuable for applications requiring programmatic light management, facilitating use cases such as mood-based lighting adjustments, energy optimization, and interactive home experiences."
lucas-deangelis,arango-mcp-server,3,,"This ArangoDB MCP server, developed by Lucas DE ANGELIS, enables seamless integration of ArangoDB databases into AI-assisted workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for querying and manipulating ArangoDB collections through Claude Desktop and compatible MCP clients. The implementation supports both read-only and read-write AQL queries, offers tools for listing databases and collections, and allows document retrieval via URIs. It's particularly useful for developers and data analysts looking to incorporate on-demand access to document-oriented and graph data into their AI-assisted applications, enabling dynamic querying and analysis of ArangoDB-stored information."
lucashild,mcp-server-bigquery,60,8818,"This BigQuery MCP server, developed by LucasHild, provides a streamlined interface for language models to interact with Google BigQuery databases. It enables AI agents to inspect database schemas, list tables, and execute SQL queries using the BigQuery dialect. The server is configurable with project ID, location, and optional dataset filtering. By leveraging BigQuery's powerful data warehousing capabilities, it allows AI systems to analyze large datasets efficiently. This implementation is particularly useful for AI assistants designed to perform data analysis tasks, generate insights from business intelligence data, or automate reporting processes using BigQuery as the backend data source."
lucasoeth,mitmproxy-mcp,1,,"This MCP server implementation integrates mitmproxy, a powerful HTTP/HTTPS interception tool, with the Model Context Protocol. It provides a simple note storage system with custom URI schemes, allows for note summarization, and includes a tool for adding new notes. The server is designed to enhance AI assistants' capabilities in managing and analyzing network traffic, making it useful for debugging, security analysis, and API testing scenarios."
luc-io,mcp-digitalocean-server,4,,"This MCP implementation integrates with DigitalOcean for server management, providing a FastAPI-based HTTP server that implements the Model Context Protocol. Built with Python, it leverages the DigitalOcean API to offer server management capabilities within the MCP framework. The implementation focuses on simplicity and ease of use, with configuration handled through environment variables. It's particularly useful for developers and organizations looking to automate DigitalOcean server operations through AI agents, enabling use cases such as dynamic resource allocation, automated scaling, and AI-driven infrastructure management without directly interacting with the DigitalOcean API."
luc-io,mcpserver,0,,"This MCP server, developed by an unknown creator, integrates with DigitalOcean's API to manage cloud resources. Built with Python and leveraging FastAPI, it offers secure API authentication, rate limiting, and Telegram bot integration. The implementation focuses on providing a robust interface for DigitalOcean operations, allowing users to programmatically control their cloud infrastructure. It's particularly useful for DevOps teams and system administrators looking to automate DigitalOcean resource management, enabling use cases such as dynamic scaling, automated deployments, and infrastructure monitoring without directly interacting with DigitalOcean's API complexities."
lucker631,mcp-templateio,0,,"This MCP server implementation provides a template for building custom MCP servers using TypeScript and the mcp-framework package. It sets up the basic project structure and configuration files needed to develop an MCP server, including TypeScript compilation settings and necessary dependencies. The implementation is designed as a starting point for developers looking to create their own MCP servers tailored to specific APIs or services."
luigiajah,mcp-stocks,3,,"This MCP server provides real-time stock market data and trading capabilities using the yfinance library. It offers six tools for accessing stock quotes, company information, historical price data, symbol search, analyst recommendations, and insider transactions. The implementation handles errors gracefully, returning informative error messages when operations fail. Ideal for financial analysis, investment research, and building trading applications that require up-to-date market information without direct API costs."
lukaskai,voice-call-mcp-server,5,,"A voice call automation server that enables AI assistants to make outbound phone calls via Twilio. Built with TypeScript, this implementation handles the complete lifecycle of phone conversations, from initiating calls to processing speech with OpenAI's real-time audio models. The server features a WebSocket architecture that bridges Twilio's voice API with OpenAI's streaming capabilities, allowing for natural conversations with context-aware responses. It's particularly useful for applications requiring automated phone interactions like appointment scheduling, customer service, or information gathering without human intervention."
operative-sh,playwright-consolelogs-mcp,5,,"This MCP server uses Playwright to open a browser, monitor console logs, and track network requests, exposing these capabilities as tools for AI assistants. It enables opening a browser at specified URLs, capturing console messages and network activity in real-time, and retrieving this information in a structured format. The implementation is particularly useful for debugging web applications, analyzing network traffic, and monitoring JavaScript console output without requiring users to manually inspect browser developer tools."
lumif-ai,mcp-ta-tool,0,,"The LumiFAI MCP Technical Analysis Server provides cryptocurrency trading tools through a FastMCP implementation, focusing on Exponential Moving Average (EMA) calculations for Binance pairs. Built with Python 3.13, it integrates with MongoDB to fetch OHLCV (Open, High, Low, Close, Volume) data and calculates 12-period and 26-period EMAs for technical analysis. The server uses Server-Sent Events (SSE) for real-time communication, making it ideal for traders who need quick access to technical indicators for cryptocurrency market analysis and trading decisions."
lumile,lumbretravel-mcp,1,1667,"This MCP server, developed by Lumile Argentina S.A., provides access to the LumbreTravel API for managing travel programs and activities. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a comprehensive set of tools for creating, updating, and managing programs, activities, passengers, agencies, hotels, services, and more. The implementation focuses on providing a standardized interface to LumbreTravel's functionality, enabling seamless integration with Claude Desktop and other MCP clients. It's particularly useful for travel agencies, tour operators, and event planners who need programmatic access to LumbreTravel's features, allowing for efficient management of complex travel itineraries, passenger data, and service bookings."
lumile,mercadolibre-mcp,3,197,"This MercadoLibre MCP server, developed by Lumile Argentina S.A., enables AI agents to interact with MercadoLibre's e-commerce platform. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a standardized interface for accessing MercadoLibre's API. The implementation focuses on simplifying interactions with the platform, offering functionality to query product and seller information. It's particularly useful for businesses and developers looking to integrate MercadoLibre data into their AI workflows, enabling use cases such as price monitoring, inventory management, and market analysis without directly dealing with MercadoLibre's API complexities."
luoshui-coder,image-generator-mcp-server,1,,"The Image Generator MCP Server enables AI assistants to create images using OpenAI's DALL-E 3 model through a simple interface. Built with TypeScript, it provides a 'generate_image' tool that accepts a prompt and image name, then saves the generated image to a 'generated-images' directory on the user's desktop. The server runs locally using stdio communication and requires an OpenAI API key for authentication. It's particularly useful for workflows where users need to quickly generate and save custom images based on text descriptions without leaving their AI assistant conversation."
luotocompany,cursor-local-indexing,10,,"Local Code Indexing for Cursor provides a Python-based server that locally indexes codebases using ChromaDB and enables semantic code search through the MCP protocol. Built with FastMCP, it watches specified project directories, automatically indexes code files using language-specific parsers, and maintains a vector database of code chunks that can be queried using natural language. The implementation includes Docker containerization for easy deployment, file system watchers for real-time updates, and configurable ignore patterns for directories and files. This tool is particularly valuable for developers who want to perform semantic code search within their projects directly through the Cursor IDE without sending their code to external services."
lupuletic,onyx-mcp-server,2,595,"Onyx MCP Server provides a bridge between MCP-compatible clients and Onyx knowledge bases, enabling powerful semantic search and chat capabilities. Developed by lupuletic, this TypeScript implementation offers two main tools: a search tool for retrieving relevant documents with configurable context windows, and a chat tool that leverages Onyx's RAG capabilities for comprehensive answers. The server connects to the Onyx API using environment variables for configuration, making it particularly valuable for teams who need to access their organizational knowledge through AI assistants without switching contexts."
lyarwood,kubevirt-mcp-server,1,,"KubeVirt MCP Server provides a simple interface for managing virtual machines in Kubernetes environments through natural language commands. Built with Go and leveraging the KubeVirt API, it offers tools for listing VM names, starting and stopping VMs, and managing instance types. The server bridges the gap between LLMs and Kubernetes virtualization, enabling AI assistants to control virtual infrastructure through conversational interactions. As demonstrated in the included demo using llama3.2 with ollama, it allows users to perform VM management tasks without needing to write complex kubectl commands or understand the underlying KubeVirt object model."
lyuhau,claude-mcp-repl,0,,"This Python-based REPL server for Claude provides a robust interface for executing Python code and shell commands within the Model Context Protocol framework. Developed to enhance Claude's capabilities, it offers both isolated and session-based Python environments, along with smart async handling for long-running shell operations. The server's key features include persistent Python sessions, automatic timeout management, and comprehensive error handling. By integrating seamlessly with Claude Desktop, it enables a wide range of use cases from quick calculations to complex data analysis and system administration tasks. The implementation stands out for its focus on performance, security, and ease of use, making it an ideal tool for developers and data scientists working with AI assistants."
lzsheng,yapi-mcp,1,,"This MCP server implementation, developed by lzsheng, provides integration with the YApi platform for API management and documentation. It offers tools for querying and retrieving API information, including endpoints, parameters, and response structures. The server is designed to enhance AI-assisted development workflows by enabling seamless access to API documentation, facilitating tasks such as code generation, API testing, and integration planning."
m0xai,trello-mcp-server,6,,"Trello MCP Server provides a bridge between AI assistants and the Trello API, enabling management of boards, lists, and cards through natural language interactions. Built with Python using FastMCP and httpx, it offers tools for retrieving, creating, updating, and deleting Trello resources with proper error handling and logging. The implementation authenticates via API keys and tokens, exposing Trello's functionality through a standardized protocol that makes it particularly valuable for project management workflows where users need to organize tasks, track progress, or collaborate on boards without switching contexts or remembering Trello's specific interface conventions."
m2rads,e2e-mcp,0,,"E2E-MCP provides a server for running end-to-end tests using browser automation through the Model Context Protocol. Built with Python, it integrates with LLM providers like OpenAI and Anthropic to power an agent that can interact with web browsers using the browser-use library. The implementation allows for headless or visible browser operation, making it ideal for AI-assisted web testing, content extraction, and automated browsing workflows. The server can be debugged using the MCP inspector tool and is designed to enhance 'Vibe Coding' workflows in AI IDEs like Cursor or Windsurf."
josemartinrodriguezmortaloni,websearch-tools,1,,"This MCP server implementation provides web search and information extraction capabilities. It integrates with external APIs like Firecrawl and Tavily to perform web searches, crawl websites, and extract specific information based on prompts. The server offers tools for searching the internet, crawling linked pages, and scraping content from URLs. It's designed for use cases requiring AI assistants to access and analyze up-to-date information from the web, such as research tasks, content aggregation, or data mining."
m4tyn0,influx_mcp,0,,"InfluxDB MCP Server provides secure, read-only access to InfluxDB 1.8 time-series databases through a standardized interface with JWT authentication. Developed by m4tyn0, it implements tools for listing databases, measurements, and executing read-only queries while enforcing security through token validation and query restrictions. The server is containerized with Docker for easy deployment and is particularly valuable for AI assistants that need to analyze time-series data without requiring direct database access credentials."
ma3u,mcp-server-dust-py,0,,"Dust MCP Server provides a bridge between Claude and the Dust.tt AI agent platform, specifically integrating a SystemsThinking agent that specializes in cognitive neuroscience and problem-solving strategies. Built by an AI research team, this implementation enables users to interact with specialized Dust agents through a standardized MCP interface, supporting features like conversation management, message retrieval, and dynamic agent interactions."
mabeldata,pocketbase-mcp,8,,"This is an MCP server that interacts with a PocketBase instance. It allows you to fetch, list, create, update, and manage records and files in your PocketBase collections. Also let you create, apply and manage your migrations."
maccam912,searxng-mcp-server,1,,"This SearXNG MCP server, developed by the Model Context Protocol team, provides a bridge to SearXNG instances for AI-powered search capabilities. Built with TypeScript and leveraging the MCP SDK, it offers a streamlined interface for querying multiple search engines through a single API. The implementation focuses on simplicity and flexibility, allowing easy integration with various SearXNG instances. It's particularly useful for AI assistants or applications needing comprehensive search results from diverse sources, enabling tasks like information gathering, fact-checking, or content discovery without the complexity of managing multiple search engine APIs directly."
mackenly,mcp-fathom-analytics,1,2238,"This MCP server provides access to Fathom Analytics data through an AI assistant, enabling users to retrieve account information, manage sites, track events, generate aggregated analytics reports, and monitor real-time visitor data. Built by Mackenly Jones using the unofficial @mackenly/fathom-api SDK, it exposes five main tools that interface with Fathom's API endpoints, allowing for flexible data querying and visualization. The implementation is designed for easy integration with Claude Desktop and other MCP clients through a simple configuration that requires only a Fathom API key, making it ideal for website owners who want to analyze traffic patterns, track performance metrics, and monitor visitor engagement without leaving their AI assistant interface."
macrat,mcp-ayd-server,0,,"This MCP server for Ayd, developed by SHIDA Yuma, provides AI assistants with access to Ayd's service monitoring capabilities. It integrates with the Ayd API to offer tools for listing monitored targets, retrieving status overviews, checking individual target statuses, and reading monitoring logs. Built in Go and implementing the MCP 2024-11-05 specification, it serves as a bridge between AI systems and Ayd's monitoring infrastructure. The server abstracts Ayd's API complexities, allowing AI assistants to easily incorporate real-time service status information into their workflows. It's particularly useful for system administrators, DevOps teams, and AI developers working on operational support tools, enabling use cases like automated status reporting, incident response, and service health analysis."
macrat,mcp-server-kintone,9,,"This MCP server, developed by SHIDA Yuma, enables AI assistants to interact with Kintone databases through a standardized interface. It provides tools for listing apps, reading app info, and performing CRUD operations on records via the Kintone API. The server implements custom permission handling and error checking, offering a simplified workflow for AI systems to access and manipulate Kintone data. By connecting AI capabilities with Kintone's flexible database platform, this implementation empowers AI assistants to perform tasks like data analysis, workflow automation, or custom reporting. It is particularly useful for applications requiring structured data management, business process automation, or any scenario where an AI system needs to interact with and reason about enterprise data stored in Kintone."
madarco,ragrabbit,74,430,"This MCP server implementation provides AI assistants with access to RagRabbit, an open-source system for site AI search and LLM.txt generation. It integrates with LlamaIndex and pgVector to crawl websites, convert pages to markdown, generate vector embeddings, and enable AI-powered search and question answering from indexed content. The server exposes functionality for crawling URLs, managing indexes, and querying the knowledge base, making it useful for applications requiring domain-specific information retrieval and conversational AI capabilities."
madebynando,mcp-linear-server,0,,"This MCP server implementation provides a bridge between AI assistants and Linear, a project management tool. It offers functionality for creating and managing issues, likely enabling AI-driven task automation and project tracking. The server is built with TypeScript and Express, includes rate limiting and environment variable configuration, and is containerized for easy deployment. It's designed for development teams looking to integrate AI capabilities into their Linear workflows."
madosh,mcp-itsm,0,,"MCP ITSM provides a unified interface for LLMs to interact with multiple IT Service Management systems (ServiceNow, Jira, Zendesk, Ivanti Neurons, and Cherwell) through standardized tools. Built with Node.js, it intelligently routes requests to the appropriate ITSM system, handles ticket creation, retrieval, updates, assignment, and knowledge base searches while maintaining consistent response formats. The implementation supports both HTTP and stdio transports with API key authentication, making it ideal for organizations managing multiple ITSM platforms who want to streamline AI assistant interactions with their ticketing systems."
magarcia,mcp-server-giphy,7,950,A Model Context Protocol (MCP) server implementation for Giphy API that allows AI assistants to search and retrieve GIFs.
magarcia,mcp-server-linearapp,0,213,"Linear MCP Server provides a bridge between AI assistants and Linear's issue tracking system, enabling natural language interaction with projects, issues, teams, and users. The implementation uses TypeScript and the @linear/sdk to expose a comprehensive set of tools for issue management, including creating and updating issues, adding comments, managing attachments, linking related issues, and retrieving project information. Built with a modular architecture that separates resources, tools, and configuration, it handles authentication via Linear API keys and formats responses according to MCP specifications, making it valuable for teams who want to manage their Linear workflow directly through AI assistants without context switching."
idcdev,mcp-magic-ui,7,,"MCP Magic UI is a server that fetches and categorizes Magic UI components from the magicuidesign/magicui GitHub repository, providing AI assistants with a standardized way to discover and use UI components. It supports multiple transport methods (stdio and HTTP), implements local caching to reduce API calls, and automatically categorizes components based on their names and dependencies. The server is particularly useful for developers and AI assistants looking to quickly integrate pre-built, categorized UI components into their projects."
magnetai,mcp-free-usdc-transfer,13,45,"Free USDC Transfer MCP Server enables feeless USDC transfers on the Base blockchain through Coinbase CDP's MPC wallet integration. Developed by Magnet Labs, it provides tools to create secure MPC wallets and transfer USDC to any Ethereum address or ENS/BaseName domain without transaction fees. The implementation stores wallet seeds locally in a JSON file and requires Coinbase CDP API credentials for authentication. Particularly valuable for workflows requiring blockchain transactions without the complexity of managing gas fees or traditional wallet interfaces."
mahawi1992,mcp-documentation-server,9,,"This MCP documentation server, developed as an open-source project, provides AI-assisted code improvement and documentation management through Claude Desktop integration. Built with TypeScript and leveraging libraries like Express and Cheerio, it offers features such as an AI documentation guide, code analysis, and framework-specific support for popular technologies like React, Next.js, and Node.js. The server integrates with Brave Search for smart documentation retrieval and implements a learning system to improve suggestions over time. It's designed for developers and technical writers seeking intelligent assistance in maintaining codebases and documentation, enabling use cases like automated code reviews, dynamic documentation updates, and AI-powered development workflows across multiple programming languages and frameworks."
maheshdoiphode,mcp-cline-project-content-server,5,,"This Project Content Server, implemented in TypeScript, provides a streamlined solution for accessing and retrieving project files and their contents through the Model Context Protocol. It offers a single API endpoint, 'latest_project_data', which accepts a project path and returns a comprehensive map of file paths to file contents. The server is designed to be easily configurable via environment variables and includes robust error handling. It's particularly useful for AI assistants or development tools that need to analyze or manipulate entire project structures, enabling use cases such as code review, project analysis, or automated documentation generation."
dataring-engineering,mcp-server-trino,13,,"A Trino MCP server that enables secure, controlled data exploration and analysis by providing tools to list tables, read data, and execute SQL queries through a standardized interface. Built by Mahesh Premachandran, this implementation allows AI assistants to interact with Trino databases using environment-based configuration, supporting operations like querying tables, retrieving data samples, and running SQL commands with robust error handling."
m-ahmed-elbeskeri,ultimatecodermcp,3,,"UltimateCoder is a FastMCP server that exposes comprehensive file system operations and advanced coding functionalities. It provides tools for precise code modifications, process management, code searching/editing, intelligent block replacement, linting, and static analysis. Built with Python and utilizing tools like ripgrep for fast code search, this implementation enables AI assistants to perform complex coding workflows, from reading and modifying files to running linters and analyzing Python code. It's particularly useful for developers seeking automated code maintenance, refactoring assistance, and intelligent file manipulation through the MCP interface."
mailgun,mailgun-mcp-server,12,,"Mailgun MCP Server provides a bridge between Claude Desktop and the Mailgun email service API, enabling AI assistants to send emails and retrieve email statistics through a standardized interface. The implementation transforms Mailgun's OpenAPI specification into MCP tools, handling authentication, parameter validation, and request formatting automatically. It supports over 30 Mailgun API endpoints including sending messages, retrieving domain information, and analyzing email delivery statistics. Built with Node.js and the MCP SDK, this server requires a Mailgun API key and is ideal for workflows that need email delivery capabilities integrated with AI assistants."
mailpace,mailpace-mcp,1,,"MailPace MCP Server provides a bridge to MailPace's transactional email API, enabling AI assistants to send emails with features like HTML/text content, attachments, CC/BCC recipients, and custom headers. Built with TypeScript and running over stdio, it authenticates using domain API tokens and handles error states appropriately, making it valuable for applications that need to send automated emails through natural language requests without managing SMTP servers or complex email infrastructure."
railsware,mailtrap-mcp,15,180,"The official Mailtrap MCP server enables AI assistants to send transactional emails through the Mailtrap service. Developed by Railsware Products Studio LLC, this TypeScript implementation provides a single tool for sending emails with support for HTML/text content, CC/BCC recipients, and email categorization. The server authenticates with the Mailtrap API using an API token and includes configurable default sender settings. It's particularly useful for scenarios requiring email notifications, automated messaging, or communication workflows where AI assistants need to send formatted emails to specified recipients."
maitreyam,gmail-mcp-server,2,,"Gmail MCP Server enables AI assistants to send emails through Gmail's SMTP service. Built by MaitreyaM, it provides a tool called 'send_email_tool' that supports sending messages with optional attachments from local files, pre-staged files, or downloaded from URLs. The server can be configured with Gmail credentials through environment variables and runs as a FastMCP implementation on port 5000. This implementation is particularly useful for workflows requiring email communication capabilities directly within AI assistant conversations, without requiring users to switch contexts."
maitreyam,documentation-fetching-mcp-server,0,,"The Custom-MCP-server provides AI assistants with access to technical documentation through a specialized tool for searching and retrieving content from popular libraries including LangChain, LlamaIndex, and OpenAI. Built with Python using the FastMCP framework, it leverages the Brave Search API to find relevant documentation pages based on user queries, then fetches and extracts the content using httpx and BeautifulSoup. The implementation handles proper error cases and timeout scenarios, making it particularly valuable for developers and technical users who need quick access to up-to-date documentation without leaving their AI assistant conversation."
makafeli,n8n-workflow-builder,158,,"This n8n Workflow Builder MCP server, developed by an unnamed author, provides a programmatic interface for creating and managing n8n workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for defining nodes, connections, and workflow specifications. The implementation focuses on simplifying the creation of complex automation workflows, making it accessible for AI assistants or applications needing to generate n8n configurations. It's particularly useful for tasks like automated workflow generation, template creation, or integrating n8n capabilities into AI-driven systems, enabling programmatic workflow management without requiring deep knowledge of n8n's internal structures."
integromat,make-mcp-server,67,3691,"Make MCP Server enables AI assistants to trigger and interact with Make automation workflows through the Model Context Protocol. Developed by Make, it connects to your Make account to identify on-demand scenarios, parse input parameters, allow AI assistants to invoke scenarios with appropriate parameters, and return structured JSON output. The server runs as a Node.js application that can be installed via npm or run in a Docker container, requiring a Make API key with scenarios:read and scenarios:run scopes. This implementation is particularly valuable for maintaining complex automation logic in Make while exposing functionality to AI systems, creating bidirectional communication between assistants and existing workflows."
amanasmuei,mcp-server-malaysia-prayer-time,0,,"Malaysia Prayer Time MCP Server provides accurate Islamic prayer times for Malaysia by integrating with the waktusolat.app API. It offers tools to retrieve prayer schedules for specific zones, list available geographical zones across Malaysia, and get current prayer status information. The server is implemented in Python using Pydantic for data validation and exposes a simple interface that makes it easy for AI assistants to access and display prayer times for Muslims in Malaysia, making it particularly useful for applications serving Malaysian Muslim communities."
malikelate,yt-description-mcp,1,,"This YouTube Transcript Extractor MCP server provides AI assistants with the ability to extract and process transcripts from YouTube videos. Built using TypeScript and the Model Context Protocol SDK, it exposes a single tool that accepts a YouTube video URL and returns the complete transcript text. The implementation leverages the youtube-transcript and get-video-id packages to handle the extraction process, making it valuable for use cases requiring content analysis, summarization, or information extraction from YouTube videos without needing to watch them."
mamertofabian,audio-mcp-server,1,,"This Audio MCP server, developed by an unnamed creator, provides a standardized interface for audio playback operations through the Model Context Protocol. Built with TypeScript and leveraging the MCP SDK, it integrates with the play-sound library to enable cross-platform audio playback functionality. The server implements basic audio controls, allowing AI systems to easily trigger sound playback on the host machine. By abstracting the complexities of audio APIs, it facilitates use cases such as voice notifications, sound effects in AI-driven applications, or audio cues in automated systems. This implementation is particularly useful for scenarios requiring programmatic audio output in response to AI-generated events or commands."
mamertofabian,elevenlabs-mcp-server,72,,"This ElevenLabs MCP server, developed by an unknown author, provides AI assistants with text-to-speech capabilities using the ElevenLabs API. Built with Python and leveraging libraries like pydub and requests, it offers a streamlined interface for generating audio from text using multiple voices and customizable speech parameters. The server implements features such as multi-part script handling, voice selection, and output file management. By abstracting the complexities of API communication and audio processing, it allows AI systems to easily incorporate high-quality speech synthesis into their workflows. This implementation is particularly valuable for applications in content creation, accessibility, and voice-driven interfaces, enabling use cases such as audiobook production, voice-over generation, and dynamic text-to-speech conversion."
mamertofabian,mcp-everything-search,122,14972,"This MCP server, developed by Mamerto Fabian, enables AI assistants to perform fast file searches using the Everything SDK on Windows systems. It provides a tool for executing complex file queries with support for wildcards, boolean operators, and various search criteria like file size, dates, and attributes. The server abstracts the Everything SDK's functionality, offering a simplified interface for AI systems to locate files and retrieve metadata. By connecting AI capabilities with Everything's ultra-fast file indexing, this implementation empowers AI assistants to quickly find and analyze files across entire drives. It is particularly useful for applications requiring rapid file discovery, system analysis, or any scenario where an AI system needs to efficiently locate and reason about files on a Windows machine."
mammothgrowth,dbt-cli-mcp,8,,"The dbt-cli-mcp server implementation provides a bridge between Claude and the dbt Core command-line interface, enabling AI assistants to directly interact with data transformation workflows. Currently experiencing setup issues with the MammothGrowth/dbt-cli-mcp repository, this tool would allow users to execute dbt commands, manage data models, and analyze transformation pipelines without leaving their conversation interface. When functioning properly, it would streamline data engineering tasks by bringing dbt's capabilities directly into Claude-assisted workflows."
mangooer,mysql-mcp-server-sse,6,,"MySQL MCP Server provides a lightweight server implementation for MySQL database operations using Server-Sent Events (SSE) transport. It offers a streamlined approach to database interactions, with configuration managed through environment variables and MySQL connection handling abstracted into modular Python components."
manimohans,farcaster-mcp,1,,"This MCP server provides tools to interact with the Farcaster network, allowing AI models to fetch casts, search channels, and analyze content. It integrates with the Farcaster Hubble API to retrieve user casts by FID or username, as well as channel-specific casts. The implementation is designed for use cases requiring real-time access to Farcaster social data, such as content analysis, trend monitoring, or user engagement tracking."
manimohans,verge-news-mcp,1,,"This MCP server integrates with The Verge's RSS feed to provide AI assistants with access to the latest technology news. It offers tools for fetching daily and weekly news updates, as well as searching for specific topics within a customizable time range. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it's designed for use cases requiring up-to-date tech news integration, such as generating summaries, analyzing trends, or answering queries about recent technological developments."
manolaz,amoca-solana-mcp-server,0,,"AMOCA (Autonomous Merit On Chain Agent) is a Solana blockchain MCP server that provides enhanced capabilities for interacting with the Solana ecosystem. Built by manolaz, it offers comprehensive RPC methods for account operations, wallet management, and DeFi trading capabilities including token balance checking, portfolio analysis with USD-based visualizations, and Jupiter API integration for token swaps. The implementation leverages Helius API for powerful Solana data access, including NFT ownership queries, collection analysis, and network monitoring tools. This server is particularly valuable for workflows requiring on-chain operations, portfolio management, and merit-based validation of blockchain transactions without leaving the conversation interface."
manolaz,emergency-medicare-planner-mcp-server,4,,"This MCP server integrates with Google Maps to locate and evaluate medical facilities in emergency situations. Developed by AMOCA Corp., it provides tools for searching medical facilities, calculating routes, and checking availability within a 10km radius. The server implements sequential thinking for medical evaluation, enabling step-by-step clinical reasoning for more accurate facility matching based on patient symptoms and medical history. It's designed for use cases requiring urgent healthcare decision-making and real-time medical facility information retrieval."
manpreet2000,mcp-database-server,0,,"MCP Database Server provides a bridge between AI assistants and databases through natural language, currently supporting MongoDB operations with plans to expand to PostgreSQL, CockroachDB, and Redis. Developed by Manpreet Singh, this TypeScript implementation uses the Model Context Protocol SDK to expose tools for listing collections, querying documents with filters, inserting and deleting records, and executing aggregate pipeline operations. The server connects to MongoDB via environment variables and handles database operations efficiently, making it valuable for users who need to interact with their databases directly through AI assistants without writing complex queries."
mantrakp04,manusmcp,51,,"ManusMCP is a framework for orchestrating specialized AI agents that work together through a Model Context Protocol (MCP) server implementation. Built with TypeScript, it provides file operations, shell command execution, and browser automation capabilities through a comprehensive API. The server enables AI agents to read/write files, execute shell commands, navigate web pages, and interact with browser elements. The implementation includes a Docker-based deployment with services for Flowise, Unstructured API, and LiteLLM, making it ideal for creating AI team members with specialized roles like Planner, FileWizard, CommandRunner, and WebNavigator that can collaborate on complex tasks requiring filesystem access, command-line operations, and web interactions."
manusa,kubernetes-mcp-server,92,,"Powerful and flexible Kubernetes MCP server implementation.
Provides features to perform both, low-level and high-level operations on Kubernetes and OpenShift.
Lower level features include performing CRUD operations on any Kubernetes or OpenShift resource.
Higher level features include abstractions to run and deploy container images and exposing them. This is helpful for smaller models which don't have enough context to generate complete and valid Kubernetes resources."
manusa,podman-mcp-server,2,2516,"This MCP server implementation provides a bridge to Podman, enabling AI assistants to interact with container management functionalities. Developed by manusa, it offers tools for container creation, management, and orchestration using Podman's API. The server is designed for use cases requiring containerized application deployment and management, such as automating DevOps workflows or managing microservices architectures."
maoxiaoke,create-mcp-server,21,198,"This MCP server implementation, developed by maoxiaoke, streamlines the creation of new Model Context Protocol (MCP) servers by providing a structured development protocol and example templates. It offers a specialized tool that can be easily invoked using npx, making it efficient for developers to set up MCP server scaffolds. The implementation is designed to support various use cases where rapid deployment of MCP servers is required, such as in AI-assisted development environments or for quickly prototyping MCP-based applications."
marcelmarais,obsidian-mcp-server,10,,"Obsidian MCP Server is a lightweight implementation that enables AI assistants like Claude and Cursor to read from and write to Obsidian vaults through direct filesystem access. Developed by Marcel Marais, it provides tools for retrieving file lists, reading file contents with flexible matching, collecting open todos across notes, and creating or updating markdown files. The server operates independently of the Obsidian application, making it particularly valuable for users who want their AI assistants to interact with their knowledge base without requiring the Obsidian application to be running."
marcelmarais,spotify-mcp-server,44,,"Spotify MCP Server enables AI assistants like Claude and Cursor to control Spotify playback and manage playlists through the Model Context Protocol. Built by Marcel Marais, it provides a comprehensive set of tools for both reading operations (searching tracks, viewing playlists, getting currently playing tracks) and playback/creation operations (playing music, creating playlists, adding tracks). The implementation authenticates with the Spotify API using OAuth, automatically refreshes tokens when needed, and runs as a lightweight stdio server that can be easily integrated with Claude Desktop or Cursor for seamless music control during conversations."
marcoeg,mcp-server-ntopng,0,2044,"MCP-ntopng provides AI assistants with direct access to network monitoring data from ntopng systems through both ClickHouse database queries and REST API endpoints. Developed by Marco Graziano of Graziano Labs, this server exposes over 20 specialized tools for retrieving network traffic statistics, analyzing flows, monitoring alerts, and identifying top talkers in a network environment. The implementation requires ntopng with ClickHouse storage and handles authentication through API tokens, making it particularly valuable for cybersecurity professionals who need to investigate network anomalies, track traffic patterns, or diagnose connectivity issues without leaving their conversation interface."
marcoeg,mcp-nvd,1,1156,"MCP-NVD is a server implementation that provides AI assistants with access to the NIST National Vulnerability Database (NVD) through the Model Context Protocol. Developed by Marco Graziano of Graziano Labs Corp., this server exposes two main tools: get_cve for retrieving detailed information about specific CVE records by ID, and search_cve for keyword-based vulnerability searches with customizable result options. The implementation supports both stdio and SSE transports, includes Docker containerization for easy deployment, and requires an NVD API key for authentication, making it valuable for cybersecurity professionals who need to access vulnerability data without leaving their AI assistant interface."
marcopesani,mcp-server-serper,10,2671,"This MCP server implementation provides web search and webpage scraping capabilities using the Serper API. Developed by Marco Pesani, it offers tools for performing Google searches with rich results and extracting content from web pages. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on flexible search options, including region and language targeting, and comprehensive content extraction that preserves document structure. This implementation is particularly useful for AI applications requiring up-to-date web information or content analysis, supporting use cases like research assistance, content aggregation, or data mining across various domains."
marcopesani,think-mcp-server,8,4806,"A minimal MCP server that implements Anthropic's 'think' tool research, allowing AI assistants to use a dedicated thinking space for complex reasoning. The server provides a simple interface where thoughts are acknowledged with random encouragements, making it ideal for scenarios requiring step-by-step analysis or memory retention without performing external actions. Built with TypeScript and the MCP SDK, it's containerized for easy deployment and designed to integrate with MCP-compatible clients like Cursor."
marcusbai,caiyun-weather-mcp,2,24,"Caiyun Weather MCP Server provides real-time weather data from the Caiyun Weather API, enabling AI assistants to access meteorological information based on geographic coordinates. The implementation uses TypeScript and the Model Context Protocol SDK to fetch weather forecasts, with geocoding capabilities to convert location names to coordinates. Built with a modular architecture separating weather data retrieval and geocoding services, it handles API authentication and response formatting while maintaining a clean separation of concerns. This server is particularly useful for applications requiring accurate weather forecasts for travel planning, outdoor activities, or location-based services."
mario-andreschak,mcp-windows-desktop-automation,50,,"MCP Windows Desktop Automation provides a TypeScript server that wraps AutoIt functions for Windows desktop automation, allowing AI assistants to control mouse movements, keyboard input, window management, and UI controls. Developed by mario-andreschak, it exposes a comprehensive set of tools organized into categories like mouse, keyboard, window, process, and control operations, while also offering file access resources and screenshot capabilities. The server supports both stdio and WebSocket transports, making it particularly valuable for automating repetitive Windows tasks, form filling, and system monitoring directly through natural language instructions."
mario-andreschak,mcp-msoffice-interop-word,1,,"A Windows-specific MCP server that provides programmatic interaction with Microsoft Word through COM Interop, exposing a comprehensive set of tools for document manipulation. Built with TypeScript and the Winax library, it enables developers to perform complex Word operations like text editing, formatting, table management, image insertion, and page setup through a standardized protocol. Ideal for automating document generation, report creation, and batch processing tasks in enterprise or productivity workflows."
marissamarym,imessage-mcp-server,3,,"This iMessage MCP server, developed as an open-source project, enables AI assistants to interact with Apple's iMessage and Contacts services. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for messaging and contact management operations. The server abstracts the complexities of interacting with Apple's proprietary systems, allowing AI systems to seamlessly incorporate iMessage functionality into their workflows. It's particularly useful for personal productivity assistants, automated customer service applications, and AI developers looking to integrate iMessage capabilities, enabling use cases like automated message handling, contact management, and personalized communication workflows on Apple platforms."
mariyafilippova,mcp-strava,6,,"This MCP server, developed for integrating with Strava's API, enables seamless access to fitness data and activity tracking. Built with Kotlin and leveraging the Model Context Protocol SDK, it provides tools for retrieving and analyzing user activities, routes, and performance metrics. The implementation focuses on efficient data retrieval and processing, offering features like activity summarization and performance analysis. It's particularly useful for fitness applications, personal trainers, or data analysts working with athletic performance data, enabling use cases such as workout planning, progress tracking, and community engagement without complex API integrations."
coolbit-in,docker-mcp,0,,"Docker MCP provides a standardized JSON API for AI models to interact with Docker infrastructure, enabling operations like container and image management, log retrieval, and command execution. Built by Mark3Labs, it implements the Model Context Protocol to bridge AI systems with Docker engine capabilities, offering a flexible tool for programmatic container manipulation through a unified interface."
mark3labs,mcp-filesystem-server,198,,"This filesystem MCP server, developed by mark3labs, provides a secure interface for language models to interact with local filesystems. It enables AI agents to read, write, search, and manipulate files and directories through a controlled API. By restricting operations to specified directories, it maintains data security while allowing AI systems to work with file-based data and content. The server integrates with Claude Desktop and can be run standalone, offering deployment flexibility. This implementation is particularly useful for AI assistants designed to manage documents, analyze local datasets, or automate file organization tasks using the local filesystem as a backend."
addcontent,nuclei-mcp,4,,"Nuclei MCP Server provides a secure and efficient interface for integrating ProjectDiscovery's Nuclei vulnerability scanner with large language models. Developed by Mark3 Labs, this implementation offers multiple scanning tools with configurable options for template filtering, severity levels, and protocol selection. The server features thread-safe concurrent scanning operations, result caching with configurable expiry to improve performance, and comprehensive vulnerability reporting through both structured tool responses and queryable resources. Ideal for security workflows that need to automate vulnerability scanning through AI-driven analysis and remediation."
mark3labs,phalcon-mcp,1,,"Phalcon MCP is a Go-based server that integrates with BlockSec's blockchain transaction analysis platform, providing AI assistants with tools to analyze on-chain transactions across multiple blockchains. Developed by Mark3Labs, it offers seven specialized tools including transaction tracing, profiling, address labeling, balance and state change analysis, and chain ID lookups. The server handles authentication with BlockSec's platform transparently, formats responses as prettified JSON, and implements parallel processing for comprehensive transaction overviews, making it particularly valuable for blockchain developers, analysts, and users who need detailed insights into cryptocurrency transactions beyond basic block explorer data."
yuchenssr,mindmap-mcp-server,59,4621,"Mindmap-MCP-Server provides a bridge between Markdown content and interactive mind maps using the markmap-cli tool. Built by YuChenSSR, this server exposes a single tool that converts Markdown text into HTML-based mind maps, with options to return either the complete HTML content or just the file path to the generated visualization. The implementation handles temporary file creation, subprocess management for the markmap-cli tool, and proper error handling. It's particularly useful for workflows that involve visualizing structured content, organizing thoughts, or creating interactive knowledge maps directly within Claude conversations."
fashionzzz,markdown-to-html,2,,"A Model Context Protocol server that converts Markdown content to HTML with syntax highlighting. Built with TypeScript and leveraging libraries like marked, highlight.js, and DOMPurify, this implementation provides a clean, secure way to render Markdown as styled HTML. The server exposes a single tool, 'markdown_to_html', which takes Markdown content as input and returns sanitized HTML output. It's designed for easy integration with Claude Desktop and includes debugging support through the MCP Inspector. This server is particularly useful for applications that need to display formatted content from Markdown sources while ensuring proper syntax highlighting and security through sanitization."
markelaugust74,mcp-google-calendar,26,,"This Google Calendar MCP server, developed by markelaugust74, enables AI assistants to create and manage calendar events through the Google Calendar API. Built with Node.js and leveraging the Model Context Protocol SDK, it provides a streamlined interface for creating events with details like title, description, start/end times, and attendees. The implementation features OAuth2 authentication, debug logging for troubleshooting, and a full MCP protocol implementation. It's particularly useful for AI developers and researchers looking to integrate calendar management capabilities into their AI-assisted applications, allowing for automated scheduling and event creation based on natural language interactions."
karthiknarayankotha,marklogic-mcp,1,,"Provides a TypeScript-based MCP server for MarkLogic document management, enabling CRUD operations and querying capabilities through a standardized interface. Implements tools for reading, creating, updating, and deleting documents with support for collections, permissions, and advanced querying using MarkLogic's native cts.query functionality. Designed to simplify interaction with MarkLogic databases by abstracting complex database operations into a clean, type-safe API."
markomitranic,mcp-vegalite-server,1,,"The MCP Vega-Lite Server provides AI assistants with data visualization capabilities using the Vega-Lite specification language. It offers two core tools: 'save_data' for storing tabular data and 'visualize_data' for generating visualizations from that data. The server can output either text-based Vega-Lite specifications or render them as PNG images, making it flexible for different display needs. Built with Python and containerized with Docker, it's designed for seamless integration with Claude Desktop and other MCP-compatible systems, enabling AI assistants to create custom charts and graphs from user data without leaving the conversation interface."
markov-kernel,databricks-mcp,10,,"Databricks MCP Server provides tools for interacting with Databricks APIs through a standardized protocol, enabling AI assistants to manage clusters, jobs, notebooks, DBFS files, and execute SQL queries. Built with Python using the FastMCP framework, it authenticates with Databricks tokens and exposes functionality through well-documented tools that handle proper error reporting and response formatting. The server can be run via command line or integrated into applications, making it particularly valuable for data scientists and engineers who need to automate Databricks workspace management, monitor resources, or execute data operations without leaving their AI assistant interface."
markpitt,freeagent-mcp,1,,"This MCP server implementation provides a bridge to the FreeAgent API, enabling management of timeslips and timers for time tracking. Developed by Mark Pitt, it offers tools for listing, creating, updating, and deleting timeslips, as well as starting and stopping timers. The server includes features like automatic OAuth token refresh and comprehensive error handling. It's designed for use cases requiring AI assistants to interact with FreeAgent accounts for time management and project tracking."
albert-launcher,mcp-gsuite,1,,"MCP-GSuite integrates Gmail and Google Calendar APIs into AI assistants, allowing users to access and manage their email and calendar data. Built by Markus Pfundstein, this Python-based implementation authenticates through OAuth2, providing tools to read emails, manage drafts, search messages, create events, and interact with calendar entries. The server requires configuration files for authentication (.gauth.json) and account management (.accounts.json), and can be deployed via Docker or run locally. It's particularly valuable for workflows requiring email management or scheduling capabilities without leaving the conversation interface."
markuspfundstein,mcp-gsuite,266,19077,"This Google Workspace (G Suite) MCP implementation, developed by MarkusPfundstein, provides an interface for AI agents to interact with Gmail and Google Calendar. It enables a wide range of operations including email management, calendar event handling, and multi-account support. This tool is helpful for AI-driven email and calendar management tasks, enabling sophisticated AI assistants that can directly manipulate and analyze Google Workspace data."
markuspfundstein,mcp-obsidian,640,35559,"This Obsidian MCP server, developed by MarkusPfundstein, enables AI assistants to interact with Obsidian vaults through the Local REST API plugin. It provides tools for listing files, retrieving content, searching across documents, and modifying notes. Built in Python, the implementation handles API authentication and exposes Obsidian's functionality via a standardized MCP interface. By bridging AI models and Obsidian's note-taking system, this server allows AI systems to analyze personal knowledge bases, assist with note organization, and augment information retrieval. It is particularly useful for AI assistants supporting knowledge management, research workflows, and collaborative note-taking within Obsidian vaults."
markvp,mcp-lambda-sam,9,1980,"A lightweight AWS Lambda layer for Model Context Protocol (MCP) server infrastructure, specifically designed to support Server-Sent Events (SSE) through Lambda response streaming. Built with TypeScript and the MCP SDK, this implementation provides a flexible handler factory that simplifies creating Lambda functions with streaming capabilities, focusing on ease of tool and prompt configuration while handling complex transport and protocol details."
martinbowling,thoughtful-claude,47,,"This FastMCP server implementation integrates DeepSeek's R1 reasoning engine with Claude, enabling advanced reasoning capabilities in MCP-compatible applications. Developed using Python and the FastMCP framework, it leverages DeepSeek's API to process queries and return formatted reasoning outputs. The server focuses on enhancing Claude's thought process by incorporating DeepSeek's large-scale reinforcement learning-based reasoning. It's particularly useful for developers and researchers looking to augment AI assistants with external reasoning capabilities, enabling more complex problem-solving, analysis, and decision-making tasks without requiring direct interaction with DeepSeek's API."
martinlippert,spring-io-api-mcp,5,,"This Spring AI MCP server, developed by an unnamed author, provides access to Spring project release information and support generations via the https://api.spring.io API. Built using Spring Boot and leveraging the Spring AI MCP library, it offers tools for querying release versions and support timelines for Spring projects. The implementation focuses on simplifying access to Spring ecosystem data through a standardized MCP interface. It's particularly useful for developers and teams working with Spring technologies who need up-to-date information on project versions and support status, enabling use cases like dependency management, upgrade planning, and support lifecycle tracking without directly interacting with the Spring API."
martinschlott,bettermcpfileserver,0,,"The original MCP file server was functional but not optimized for how LLMs actually interact with filesystems. This project delivers a complete redesign focused on simplicity, privacy, and efficiency."
mashriram,azure_mcp_server,5,,"This MCP server, developed by Shriram Madurantakam, provides a standardized interface for interacting with Azure services, specifically Azure Blob Storage and Azure Cosmos DB (NoSQL API). Built with Python and leveraging the Model Context Protocol, it offers tools for reading and manipulating Azure resources using an LLM. The implementation focuses on secure authentication and flexible configuration, supporting various Azure credential types. By connecting AI models with Azure cloud services, this server enables sophisticated data management scenarios, enhancing the ability to store, retrieve, and query data in Azure. It's particularly useful for applications and AI assistants that require programmatic access to Azure resources through a familiar MCP interface, with built-in operation logging for auditing purposes."
masonchow,source-map-parser-mcp,2,948,"Source Map Parser MCP provides a specialized tool for debugging production JavaScript errors by mapping minified stack traces back to their original source code locations. Built by MasonChow, this server implementation leverages WebAssembly for efficient source map parsing and offers a simple interface to process error stack traces with line and column information. The implementation fetches source maps from provided URLs, parses them using the stack_parser_js_sdk, and returns the original source location along with contextual code lines, making it particularly valuable for developers troubleshooting errors in production environments where code is minified or transpiled."
mastergo-design,mastergo-magic-mcp,38,7866,"MasterGo Magic MCP is a standalone service that enables AI models to directly retrieve DSL (Domain Specific Language) data from MasterGo design files. Developed as a lightweight Node.js tool, it provides a simple mechanism for extracting design file metadata using a personal access token, with a focus on enabling programmatic access to design element details. The implementation is particularly useful for AI-powered design analysis, code generation, and design system exploration."
mastra-ai,discord-mcp-server,1,,"Discord MCP Server provides a bridge between Discord's API and Mastra's MCP Bot component, enabling intelligent assistance for users through slash commands and direct messages. This TypeScript implementation handles Discord interactions, manages bot commands, and routes user questions to the Mastra component for generating responses. It features thread creation for conversations, message chunking for long responses, and cooldown management to prevent spam. The server supports two main commands: '/ask' for querying about Mastra and '/cleardm' for clearing bot messages in direct messages, making it particularly useful for providing AI-powered support in Discord communities."
packages,mcp-docs-server,12019,22243,"A Model Context Protocol (MCP) server that provides AI assistants with direct access to Mastra.ai's complete knowledge base. This includes comprehensive documentation with MDX support, a collection of production-ready code examples, technical blog posts, and detailed package changelogs. The server integrates with popular AI development environments like Cursor and Windsurf, as well as Mastra agents, making it easy to build documentation-aware AI assistants that can provide accurate, up-to-date information about Mastra.ai's ecosystem."
mathd,govee_mcp_server,3,,"This MCP server, developed by MoovAI, provides integration with Govee smart lighting devices. Built with Python and leveraging the Govee API, it enables AI agents to control Govee LED products through natural language commands. The implementation focuses on device management and state control, offering functionality to adjust brightness, color, and power settings. It's particularly useful for home automation systems and AI assistants looking to incorporate smart lighting control, enabling use cases such as mood-based lighting adjustments, scheduled lighting changes, or voice-controlled ambiance without directly interacting with the Govee API."
mathieugal,mcp-serveur,0,,"MCP-serveur provides a specialized documentation search tool that connects AI assistants to technical documentation for popular libraries including LangChain, LlamaIndex, and OpenAI. The implementation uses the Serper API to perform targeted Google searches within specific documentation domains, then fetches and extracts the relevant content from search results. Built with FastMCP, it exposes a single tool that accepts queries and library specifications, making it particularly valuable for developers and AI assistants that need quick access to accurate library documentation without leaving their conversation interface."
matlock08,watson_discovery_mcp,0,,"Watson Discovery MCP provides a bridge to IBM Watson Discovery service, enabling AI assistants to search and retrieve information from Watson Discovery projects and collections. The implementation offers three key tools: finding project IDs by name, listing collections within a project, and executing natural language queries against specific collections. Built with Python using the IBM Watson SDK and FastMCP, it handles authentication and asynchronous operations through environment variables, making it ideal for retrieving structured information from enterprise knowledge bases or documentation repositories without leaving the conversation interface."
matmax-worldwide,payloadcmsmcp,30,697,"Payload CMS MCP Server provides validation, query, and code generation services for Payload CMS 3.0 development. Built by MATMAX WORLDWIDE, it offers tools to validate collections, fields, and configurations, execute SQL-like queries against validation rules, generate code templates, and scaffold complete projects following best practices. The server integrates with Redis for persistence and exposes endpoints for real-time communication, making it particularly valuable for AI-assisted development environments like Cursor IDE where developers need immediate feedback on Payload CMS code quality and structure."
HEAD,modelcontextprotocol,24,,"A TypeScript implementation of the Model Context Protocol (MCP) for the Maton Agent Toolkit, enabling agents to interact with external services and data sources."
mattarnster,supabase-mcp-server,0,,"This MCP server implementation provides a bridge to the Supabase CLI, enabling programmatic access to Supabase project management and database operations. Developed by mattarnster, it offers tools for creating and linking projects, managing migrations, and executing database commands. The server is built using the FastMCP framework and is designed for use cases requiring automated Supabase workflows or integration of Supabase operations into larger systems."
mattbarlow-sg,bun-s3-mcp,0,,"This Bun-based S3 MCP server, developed for Claude Desktop, provides a streamlined interface for managing code snippets in S3 storage. Leveraging Bun's S3 bindings for fast API operations, it offers tools for creating, retrieving, and listing code snippets in various programming languages. The implementation focuses on efficient S3 interactions, robust error handling, and seamless integration with Claude Desktop, making it ideal for AI assistants to manage and access code snippets without dealing with S3 complexities directly. It's particularly useful for tasks like code reference management, collaborative programming, or integrating code snippet functionality into AI-driven development workflows."
mattzcarey,mcp-thinking,51,,"This MCP thinking server, developed by Matt Carey, extracts the reasoning chain from the Deepseek R1 model and makes it available to Claude Desktop and other MCP clients. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a bridge between Deepseek's API and MCP-compatible applications. The implementation focuses on exposing Deepseek R1's step-by-step reasoning capabilities through a standardized interface. It's particularly useful for developers and researchers looking to incorporate Deepseek's advanced reasoning into their workflows, enabling use cases like complex problem-solving, decision analysis, and explainable AI without directly interacting with Deepseek's API."
mattcoatsworth,zoom-mcp-server,1,,"A comprehensive MCP server for the Zoom API that enables AI assistants to interact with Zoom's platform features including meetings, webinars, users, chat, recordings, and more. The implementation uses OAuth 2.0 authentication with Server-to-Server credentials and provides structured tools with proper validation using Zod. It handles API responses and errors consistently, making it easy for AI models to manage Zoom resources through natural language. Ideal for use cases like scheduling meetings, managing participants, retrieving recordings, and automating administrative tasks within Zoom."
matteturtle09,mongo-mcp-server,1,,"This MongoDB MCP server provides a bridge between AI assistants and MongoDB databases, enabling document retrieval operations through a standardized interface. Built with TypeScript using the Model Context Protocol SDK and the MongoDB driver, it offers a tool for fetching documents from specified collections and databases. The server implements environment-based configuration for MongoDB connection and error handling for robustness. By abstracting MongoDB operations into an MCP-compatible format, it allows AI systems to easily query and analyze data stored in MongoDB. This implementation is particularly valuable for applications requiring programmatic access to MongoDB data, facilitating use cases such as data analysis, content retrieval, and dynamic information lookup across various domains."
matthewdailey,figma-mcp,135,16062,"This MCP server, developed by Matthew Dailey, enables AI assistants to interact with Figma design files through the Figma REST API. Built in TypeScript, it allows adding Figma files to conversations, viewing nodes, reading and posting comments. The implementation integrates seamlessly with Claude Desktop and stands out by providing a direct bridge between AI models and Figma's collaborative design platform. By connecting AI capabilities with Figma's extensive design ecosystem, this server enables AI systems to analyze designs, provide feedback, and assist in the design process. It is particularly useful for scenarios like design reviews, generating design suggestions, and building AI assistants that can understand and contribute to visual design workflows."
matthewdailey,rime-mcp,1,665,"A text-to-speech server for the MCP ecosystem that integrates with Rime's API to convert text into spoken audio. This implementation streams audio content with optimized buffering to reduce latency between text generation and speech playback. It provides a 'speak' tool that can be configured through environment variables to control voice selection, speaking style, and playback behavior. Built with TypeScript and Node.js, it supports cross-platform audio playback through various media players and includes features for handling WebSocket connections and managing temporary audio files. Particularly useful for AI assistants that need to communicate verbally with users or for applications requiring audio narration of generated content."
matthewdcage,cursor-mcp-installer,36,156,"Cursor MCP Installer provides a streamlined way to install and configure MCP servers within the Cursor IDE. Built by Matthew Cage, this tool offers three main capabilities: installing MCP servers from npm or Python packages, setting up locally cloned MCP server code, and adding custom MCP server configurations to Cursor's settings. The implementation automatically handles environment setup, detects the appropriate package manager (npm or uv), and creates the necessary configuration entries in Cursor's mcp.json file. This server is particularly valuable for developers who want to quickly integrate various MCP capabilities into their Cursor IDE without manual configuration steps."
matthewdcage,pbs-mcp-server,1,,"PBS MCP Server provides access to the Australian Pharmaceutical Benefits Scheme (PBS) API through a standalone server that enables AI models to query pharmaceutical data including medicine listings, pricing, and availability. Developed by Matthew Cage, founder of AI-Advantage.au, this TypeScript implementation offers multiple interfaces including stdio, HTTP/SSE, and a command-line tool with comprehensive error handling for API rate limits. The server supports various PBS endpoints such as prescribers, item-overview, and schedules, making it particularly valuable for healthcare applications, medication research, and integrating up-to-date pharmaceutical information directly into AI workflows without requiring the data in the model's training."
matthewdcage,vapi-mcp,2,,"Vapi MCP for Cursor integrates Vapi's voice AI capabilities with the Cursor editor through the Model Context Protocol, enabling AI assistants to make outbound calls, manage voice assistants, and retrieve conversation transcripts. The implementation consists of two server components: a core MCP server that handles direct communication with Cursor, and an HTTP server that provides RESTful API endpoints for broader integration with services like n8n. Built with TypeScript and leveraging the Vapi Server SDK, this implementation supports creating customizable voice assistants with different voices and models, initiating phone calls with AI-driven conversations, and analyzing call transcripts—making it particularly useful for automated customer outreach, sales calls, and support interactions."
matthewhand,mcp-flowise,23,,"This Flowise integration, developed by Matthew Hand, provides a seamless connection between Flowise and the Model Context Protocol (MCP). It allows users to interact with Flowise chatflows and assistants through a standardized MCP interface, enabling easy integration into existing MCP-compatible systems. The implementation offers flexibility in configuration, supporting both specific chatflow/assistant locking and dynamic selection. It's particularly useful for developers looking to incorporate Flowise's AI capabilities into their MCP-based applications, streamlining the process of AI-powered conversational interfaces and predictions."
matthewhand,mcp-openapi-proxy,31,,"This MCP server, developed by Matthew Hand, dynamically exposes REST APIs defined by OpenAPI specifications as MCP tools. Built with Python and leveraging libraries like FastAPI and Pydantic, it offers two operation modes: a low-level mode that registers all API endpoints as separate tools, and a FastMCP mode for simplified exposure of specific endpoints. The implementation focuses on flexibility, allowing users to filter endpoints and customize tool naming. By connecting AI models with any OpenAPI-described API, this server enables seamless integration of external services into MCP-based workflows. It's particularly useful for developers and organizations looking to quickly incorporate diverse APIs into their AI systems without extensive custom coding."
matthewpdingle,consulting-agents-mcp,7,,"The ConsultingAgents MCP Server enables Claude Code to consult with additional AI agents for enhanced code and problem analysis. It provides access to two expert coding consultants: Darren (powered by OpenAI's o3-mini model with high reasoning capabilities) and Sonny (powered by Anthropic's Claude 3.7 Sonnet with enhanced thinking). The server supports multiple transport options including stdio for direct Claude Code integration and HTTP/SSE for broader applications. Built with Python using the FastMCP framework, it requires API keys for both OpenAI and Anthropic services, making it ideal for developers seeking multi-model perspectives on coding problems."
mattjoyce,senechal-mcp,0,,"This MCP server implementation provides a bridge to the Senechal health data API, enabling AI assistants to access and analyze personal health information. Developed by Matt Joyce, it offers tools for retrieving health summaries, profiles, current measurements, trends, and statistics. The server is designed for use cases requiring AI-driven health analysis, such as personalized wellness recommendations or long-term health monitoring."
mattlevine,brightsy-mcp,0,,"This MCP server implementation provides a bridge to an OpenAI-compatible AI agent. Developed by Matt Levine, it allows for seamless integration of AI capabilities into applications through a standardized protocol. The server supports customizable tool names, environment variable configuration, and includes comprehensive testing scripts. It's designed for use cases requiring AI-powered task automation, natural language processing, or interactive chat functionalities within larger systems or applications."
mattmarcin,aqicn-mcp,0,,"This MCP server, developed by mattmarcin, provides integration with the World Air Quality Index (AQICN) API for retrieving real-time air quality data. Built with Python and leveraging libraries like FastMCP and Pydantic, it offers tools for querying air quality information by city name or coordinates, as well as searching for monitoring stations. The implementation focuses on providing a standardized interface for accessing global air quality metrics, enabling AI assistants to incorporate up-to-date environmental data into their responses. It's particularly useful for applications in environmental monitoring, public health, and urban planning, allowing for easy integration of air quality considerations into AI-driven decision-making processes without requiring direct interaction with the AQICN API."
mattmorgis,nuanced-mcp,8,,"This MCP server implementation provides code analysis capabilities using the nuanced library. It offers tools for initializing code graphs, exploring function call relationships, analyzing dependencies, and assessing the impact of code changes. The server is designed to help AI assistants understand code structure and provide contextually aware assistance for tasks like refactoring, debugging, and code review."
mattshu0410,mcp-server,1,,"This MCP server provides a bridge to NCBI's dbSNP database, enabling developers to retrieve genetic variant information directly in their development environment. It implements three key functions: retrieving detailed SNP data by rs ID, searching for SNPs using terms like gene names or phenotypes, and accessing clinical significance information for specific variants. The implementation handles API rate limits (with optional API key support for higher throughput), normalizes rs ID formats, and includes comprehensive error handling to ensure reliable access to genetic variant data for bioinformatics applications."
mauricio-cantu,brasil-api-mcp-server,4,,"Query a variety of data from Brasil resources seamlessly. Access information on postal codes, area codes, banks, holidays, taxes, and more through a unified interface. Enhance your AI agents and applications with rich and updated data from BrasilAPI effortlessly."
maximepeabody,simple-jira-mcp,1,,"Simple-jira-mcp is a Model Context Protocol server that enables AI assistants to interact with Jira issue tracking systems. Built with FastAPI and the Python Jira library, it provides tools for fetching assigned tickets, adding comments, updating ticket status, and creating new issues. The implementation requires minimal setup with Docker and Jira API credentials, making it accessible for teams looking to integrate AI assistants with their existing project management workflows. Particularly useful for developers and project managers who want to automate routine Jira tasks through natural language interactions."
maxim-saplin,mcp_safe_local_python_executor,10,,"An MCP server (stdio transport) that wraps Hugging Face's LocalPythonExecutor (from the smolagents framework). It is a custom Python runtime that provides basic isolation/security when running Python code generated by LLMs. This package allows to expose the Python executor via MCP (Model Context Protocol) as a tool for LLM apps like Claude Desktop, Cursor or any other MCP compatible client. In case of Claude Desktop this tool is an easy way to add alternative to ChatGPT's Python Interpreter plugin."
maxparisotto,rust-doc-mcp,0,,"Rust-Doc-MCP is a server implementation that provides AI assistants with access to Rust documentation, code patterns, and error solutions through a structured database. It fetches and parses documentation from multiple sources including docs.rs, GitHub repositories, and community resources for frameworks like Leptos and Tauri. The server exposes tools for searching documentation, analyzing Cargo.toml dependencies, fetching framework-specific docs, and finding solutions to common errors. Built with TypeScript and SQLite, it maintains a searchable documentation database with full-text search capabilities, making it particularly valuable for developers seeking contextual Rust documentation and code pattern examples without leaving their conversation interface."
maxteabag,githubworkflowmcp,0,,"GitHub Workflow Debugger MCP provides a set of tools for diagnosing and fixing GitHub Actions workflow failures through the GitHub API. It enables AI assistants to fetch failed workflow runs, analyze job failures, retrieve workflow files, and suggest specific fixes for common issues like Node.js setup problems, checkout failures, and dependency installation errors. The implementation requires a GitHub Personal Access Token with repo and workflow permissions, and is particularly valuable for developers who need to troubleshoot CI/CD pipeline failures without leaving their conversation interface."
trap-jp,mcp-traq,1,,"Provides a bridge to the traQ chat platform, enabling AI assistants to interact with traQ's messaging ecosystem through a set of standardized MCP tools. Supports retrieving information about channels, messages, users, stamps, and pins with flexible search and filtering capabilities. Built using Deno and the Model Context Protocol SDK, this implementation offers a clean, type-safe interface for querying traQ's API resources."
mccartykim,goose_fm,0,,"This MCP implementation, developed by Kim, provides a radio tuning interface for AI assistants. Built with Python and leveraging the FastMCP framework, it offers tools for tuning to specific FM frequencies and controlling audio playback. The implementation focuses on integrating with RTL-SDR hardware to enable real-world radio reception. By connecting AI models with radio functionality, this server allows for scenarios like voice-controlled radio tuning, automated station scanning, and audio content analysis. It's particularly useful for projects involving smart home integration, audio processing experiments, or enhancing AI assistants with live radio capabilities."
mccartykim,honk_mcp,0,,"This MCP server, developed by Kim McCarty, provides a simple text-to-speech interface for MacOS using the built-in 'say' command. Built with Python and leveraging the FastMCP framework, it offers a single tool for converting text to speech. The implementation focuses on demonstrating basic MCP functionality in a Nix-based development environment, enabling AI models to generate audible output on MacOS systems. By connecting AI assistants with the system's text-to-speech capabilities, this server allows for scenarios like voice notifications or audio content generation. It's particularly useful as a starting point for developers looking to understand MCP server implementation within a Nix ecosystem or those wanting to add basic speech output to their AI-powered applications."
mcerqua,freepik-mcp,1,,"Freepik MCP Server provides a bridge between AI assistants and Freepik's API, enabling access to stock photos and Mystic AI image generation capabilities. The implementation offers tools for searching resources with various filters, retrieving detailed information about specific resources, downloading resources, generating images using Freepik's Mystic AI with customizable parameters, and checking the status of image generation tasks. Built with TypeScript using the Model Context Protocol SDK, it handles input validation through Zod schemas and implements comprehensive error handling, making it particularly valuable for AI assistants that need to incorporate visual assets or generate custom imagery directly within conversations."
mcerqua,netlify-mcp,0,,"Netlify MCP Server provides a bridge between AI assistants and Netlify's hosting platform, enabling site management directly through conversation. Built with TypeScript using the Model Context Protocol SDK, it exposes tools for creating sites from GitHub repositories, listing existing sites, retrieving detailed site information, and deleting sites. The server authenticates with Netlify's API using personal access tokens and handles various error conditions including rate limiting and parameter validation. This implementation is particularly valuable for developers who want to manage their web deployments without leaving their AI assistant interface."
mckaywrigley,takeoff-linear-mcp-server,2,4928,"Linear MCP Server provides a bridge to the Linear project management platform, enabling AI assistants to interact with team tasks, issue tracking, and workflow management. Built with TypeScript, it exposes tools for creating, updating, and retrieving tasks across different teams, with robust API key resolution and comprehensive error handling. Particularly useful for teams wanting to automate task creation, track project progress, or integrate project management workflows directly through conversational interfaces."
mcollina,mcp-node-fetch,10,166,"MCP Node Fetch provides a server that enables AI assistants to fetch and process web content using Node.js's undici library. It offers three specialized tools: fetch-url for retrieving content in various formats, extract-html-fragment for targeted HTML extraction using CSS selectors, and check-status for verifying URL accessibility. Developed by Matteo Collina, this implementation is particularly useful for workflows requiring web scraping, API interactions, or content analysis without leaving the conversation interface."
mcollina,perm-shell-mcp,1,106,"PermShell MCP is a TypeScript server that enables AI assistants to execute shell commands with explicit user permission through desktop notifications. Developed by Matteo Collina, it implements a security-focused approach where all commands require user approval via growl notifications that display the exact command and working directory for transparency. The server provides two main tools: 'execute-command' for running shell commands with permission safeguards and 'system-info' for retrieving system information without requiring explicit permission. It's particularly useful for scenarios where AI assistants need controlled access to the local system while maintaining strong security boundaries."
mcollina,mcp-ripgrep,8,518,"MCP Ripgrep Server provides a wrapper around the powerful ripgrep search tool, enabling Claude and other MCP-compatible clients to perform high-performance text searches across files on a user's system. Developed by Matteo Collina, it offers several specialized tools including basic search, advanced search with filtering options, match counting, and file listing capabilities. The server executes ripgrep commands on the local machine and formats the results for AI assistants, making it particularly useful for code exploration, finding patterns across codebases, and quickly identifying relevant files without leaving the conversation interface."
mcp2everything,mcp2brave,1,,"This MCP implementation, mcp2brave, provides integration between MCP and the Brave browser. Developed by mcp2everything, it allows AI assistants and other MCP clients to interact with and control Brave browser sessions programmatically. The implementation leverages FastMCP and other libraries to enable capabilities like opening tabs, navigating pages, and extracting web content. It stands out by focusing specifically on Brave rather than being a general browser automation tool. Use cases include web scraping, automated testing of web applications in Brave, and enabling AI assistants to directly access web content through a user's existing Brave browser."
mcp2everything,mcp2tavily,2,,"This Tavily integration for MCP, developed by an unknown author, provides a bridge between AI assistants and the Tavily search API. It enables AI systems to perform web searches and retrieve relevant information through a standardized MCP interface. The implementation uses Python and leverages libraries like FastMCP and Tavily's official Python SDK to handle API interactions and request processing. By abstracting Tavily's search capabilities into MCP-compatible endpoints, it allows AI assistants to easily incorporate web search functionality without directly managing API complexities. This integration is particularly useful for scenarios requiring up-to-date information retrieval, fact-checking, or research tasks, enhancing AI systems with real-time web search capabilities."
mcp2everything,mcp2serial,8,3810,"MCP2Serial provides a bridge between AI Large Language Models and physical hardware devices through serial communication. Developed by the MCP2Serial Contributors, it enables AI models to interact with and control real-world electronics using the Model Context Protocol (MCP). The implementation features automatic port detection, multiple baud rate support, and real-time status monitoring. It integrates seamlessly with MCP clients like Claude Desktop and Cline, offering a flexible prompt system and resource management capabilities. MCP2Serial is particularly useful for IoT projects, robotics applications, and any scenario where AI-driven control of serial-connected devices is desired."
mcpcrypto,bsc-mcp,0,,"BSC-MCP is a backend service that enables AI assistants to execute transactions on the Binance Smart Chain (BSC) blockchain. It provides tools for managing wallet addresses, fetching balances, transferring native and ERC20 tokens, and interacting with smart contracts. The implementation uses ethers.js and viem for blockchain interactions, secures sensitive data through environment variables, and follows the Model Context Protocol framework to ensure structured, efficient transactions. Particularly valuable for DeFi applications that require secure token management and smart contract interactions without leaving the conversation interface."
mcpdotdirect,evm-mcp-server,185,1226,"EVM-MCP-Server provides a bridge between AI assistants and Ethereum Virtual Machine (EVM) compatible blockchains through the Model Context Protocol. Built by mcpdotdirect, it enables interaction with multiple networks including Ethereum, Optimism, Arbitrum, and Base, offering tools for querying blockchain data, transferring tokens (ETH, ERC20, ERC721, ERC1155), reading smart contracts, and resolving ENS names. The server can run in both stdio mode for direct integration and HTTP mode with SSE support, making it flexible for various deployment scenarios while maintaining secure handling of private keys for transaction signing."
src,server-curl,39,,"This MCP server, developed by the mcp-get community, enables AI assistants to make HTTP requests to any URL using a curl-like interface. Built with TypeScript, it supports all common HTTP methods, customizable headers, request bodies, and configurable timeouts. The server provides a single 'curl' tool that accepts parameters like URL, method, headers, body, and timeout, returning full response information including status, headers, and body. By allowing AI models to interact with external APIs and web services, this implementation extends their capabilities for tasks such as data retrieval, third-party integrations, and real-time information gathering. It is particularly useful for scenarios requiring dynamic data access or interaction with external systems beyond the AI's training data."
src,server-llm-txt,39,2133,"This LLM.txt MCP server, developed by mcp-get, enables AI assistants to access and search the LLM.txt Directory, a collection of structured documentation files for various APIs and services. Built in TypeScript, it provides tools for listing available LLM.txt files, retrieving their contents, and performing multi-query searches with context. The server implements local caching to improve performance and uses numeric IDs to discourage hallucination of non-existent files. By abstracting access to the LLM.txt ecosystem, this implementation allows AI models to quickly gather accurate information about APIs and services without relying on potentially outdated training data. It is particularly useful for developers and AI assistants needing up-to-date documentation for integrating or troubleshooting various software tools and platforms."
src,server-macos,39,,"This MCP server, developed by the mcp-get community, provides macOS-specific system information and operations for AI assistants. Built with TypeScript, it offers tools for retrieving detailed system data (CPU, memory, disk, network; via sysctl) and sending native macOS notifications (via AppleScript). The server extends AI capabilities to interact directly with macOS environments, enabling tasks like system monitoring, performance analysis, and user notifications. By bridging AI models with macOS-specific functionalities, this implementation is particularly useful for scenarios requiring real-time system insights, automated macOS management, or enhanced user interaction through native notifications on Apple devices."
mcprouter,exa-ai-mcp-server,0,2415,"This MCP server for Exa.ai, developed using TypeScript and the Model Context Protocol SDK, provides a streamlined interface for AI assistants to perform web searches using Exa's API. It offers a single 'search' tool that takes a query string and returns formatted results from Exa.ai. The implementation focuses on simplicity and ease of integration, requiring only an API key for setup. It's particularly useful for enhancing AI models with up-to-date web information, enabling tasks like research assistance, fact-checking, or content generation with current data, while leveraging Exa.ai's search capabilities."
meanands,mysql-mcp,2,,"The SQL MCP Server enables natural language interaction with MySQL databases through Claude Desktop. Built with Python using SQLAlchemy for database connectivity, it provides a secure interface for executing SQL queries across multiple databases with features like connection pooling and transaction management. The implementation handles all query types (SELECT, INSERT, UPDATE, DELETE) and returns structured results, making it ideal for users who want to analyze data, manage database content, or perform database operations using conversational language instead of writing raw SQL."
screenpipe-integrations,screenpipe-mcp,13370,,"This screenpipe MCP server, developed by Mediar AI, provides a standardized interface for searching and retrieving screen recordings and associated data. Built with Python and leveraging libraries like httpx and nest-asyncio, it offers tools to query recordings based on content type, time range, and application context. The server integrates with a local screenpipe API, abstracting the complexities of data retrieval and formatting into a consistent MCP interface. By enabling AI systems to access and analyze screen capture data, this implementation facilitates use cases such as productivity tracking, user behavior analysis, and automated documentation of digital workflows."
meeting-baas,meeting-mcp,9,,"Meeting BaaS MCP Server provides tools for managing meeting recordings, transcripts, and calendar data across Zoom, Google Meet, and Microsoft Teams. Built by Meeting-Baas, this TypeScript implementation enables AI assistants to create meeting bots that automatically record and transcribe meetings, search through meeting content, manage calendar integrations, and share meeting segments with teammates. The server includes robust authentication handling, environment selection capabilities, and QR code generation for bot avatars, making it ideal for teams who need to capture, access, and share meeting knowledge without manual note-taking."
meghanmurphy1,mcp,0,,"This MCP server implementation provides a bridge to Elasticsearch, enabling AI assistants to interact with Elasticsearch clusters. It offers tools for retrieving index information, performing standard and semantic searches, and analyzing Salesforce data. The server utilizes the FastMCP framework and Elasticsearch Python client, making it suitable for use cases requiring advanced search capabilities and data analysis within AI-assisted applications."
mehmetoguzderin,shaderc-vkrunner-mcp,2,,"shaderc-vkrunner-mcp is a Model Context Protocol server that provides AI agents with a secure sandbox for developing, compiling, and visualizing GPU shaders using Vulkan. It runs entirely locally in a Docker container using Mesa's software Vulkan implementation, eliminating risks of GPU crashes while supporting advanced features like subgroups, atomic operations, and raytracing without physical GPU hardware. The implementation leverages Rust's type safety, integrates with tools like Shaderc for compilation and VkRunner for execution, and is designed to work with VS Code Copilot and other MCP-capable AI tools for shader development workflows."
meilisearch,meilisearch-mcp,72,,"This MCP server for Meilisearch, developed by the Meilisearch team, provides a standardized interface for interacting with Meilisearch's powerful search capabilities. Built with Python and leveraging the official Meilisearch Python client, it offers tools for indexing, searching, and managing documents within Meilisearch instances. The server implements the Model Context Protocol, enabling AI systems to easily perform search operations and retrieve results. By abstracting Meilisearch's API complexities, it allows for seamless integration of advanced search functionality into AI-powered applications. This implementation is particularly valuable for use cases requiring fast, typo-tolerant, and customizable search experiences, such as e-commerce platforms, content management systems, or data exploration tools."
mekanixms,sqlite-mcp-server,3,,"This SQLite MCP server, developed by mekanixms, provides a flexible interface for AI models to interact with SQLite databases. Built using Python and leveraging libraries like pandas and sqlite3, it offers tools for schema exploration, data querying, updates, and statistical analysis. The implementation focuses on security through input validation and error handling, while providing a user-friendly configuration for integration with Claude Desktop. It's particularly useful for AI-assisted database management, data analysis, and rapid prototyping scenarios where SQLite's lightweight nature is advantageous. The server's ability to handle both read and write operations, coupled with its statistical analysis capabilities, makes it a versatile tool for AI models working with structured data."
mektigboy,server-hyperliquid,10,724,"This MCP server integrates with the Hyperliquid SDK to provide real-time cryptocurrency market data. It offers three main tools: retrieving mid prices for all coins on Hyperliquid, accessing historical candlestick data for any token with customizable time intervals, and fetching L2 order book information. The implementation is designed for easy integration with Claude Desktop and can be quickly deployed using npx, making it ideal for traders, analysts, and applications requiring up-to-date crypto market information."
melaodoidao,datagov-mcp-server,7,601,"This MCP server implementation provides a bridge to Data.gov, enabling AI assistants to interact with government datasets. Developed by Joao Bondan, it offers tools for searching packages, retrieving dataset details, listing groups and tags, and accessing specific resources. The server is designed to facilitate data-driven analysis and research using public government information, making it valuable for projects requiring access to official U.S. datasets."
melbourneandrew,docs2prompt-mcp,0,,"docs2prompt-mcp is an MCP server that wraps the docs2prompt library, allowing AI assistants to convert documentation from GitHub repositories or websites into LLM-friendly prompts. Developed by Andrew Melbourne, it builds on Reza Tabrizi's original library and exposes two main tools: one for fetching documentation from GitHub repos and another for retrieving documentation from URLs. The server handles authentication with GitHub via tokens and includes safeguards against oversized responses, making it particularly useful for developers who need to quickly reference or understand external codebases and documentation without leaving their conversation interface."
mem0ai,mem0-mcp,101,,"Mem0-MCP provides a structured approach for managing coding preferences through an MCP server that integrates with mem0.ai. Built with Python using the FastMCP framework, it offers three main tools: adding coding preferences with comprehensive context, retrieving all stored preferences, and semantically searching through preferences to find relevant code implementations, solutions, and documentation. The server runs as a persistent process that agents can connect to via SSE, making it ideal for cloud-native environments where server and clients operate as decoupled processes. This implementation is particularly valuable for developers using Cursor who need efficient storage and retrieval of code snippets and programming knowledge."
kunihiros,mem0-mcp-for-pm,3,,"Brings AI power into your Project management methods.
Stop manage your project by your own experience based instincting black boxed knowledge that leads you into hell fired project !!
Enpower your management by AI capablity, they are obviously sperior to you !!😇"
wuyunmei,momedb-mcp,1,,"MomeDB-MCP server provides a bridge between AI assistants and the MemoBase API for managing conversation context and personal knowledge. It implements tools for user management, blob storage (for conversation data), and knowledge base operations including querying, adding, updating, and relating knowledge items. The server uses a JSON-RPC interface over stdio, making it compatible with any MCP client while enabling AI assistants to maintain persistent user data and retrieve relevant contextual information during conversations."
joleyline,mcp-memory-libsql,3,,An MCP server implementation that uses LibSQL as a memory store for the Model Context Protocol.
mekanixms,mcp_memory_plugin,0,,"This Memory Plugin is a Python-based SQLite implementation for persistent storage in AI conversations. It provides tools for storing, retrieving, and searching memories, allowing AI assistants to maintain context across sessions. The plugin uses a simple database structure to categorize and timestamp memories, with features like access counting and category-based filtering. It's designed to integrate seamlessly with the Model Context Protocol (MCP) ecosystem, making it ideal for enhancing AI assistants with long-term memory capabilities in applications ranging from personal assistants to complex knowledge management systems."
merajmehrabi,outlook_calendar_mcp,14,1423,"This MCP server provides integration with Microsoft Outlook Calendar, enabling AI assistants to interact with and manage calendar events. Developed by Meraj Mehrabi, it offers capabilities such as listing events, creating new events, finding free time slots, and managing attendee statuses. The server is built using Node.js and the Model Context Protocol SDK, making it suitable for automating scheduling tasks, optimizing meeting planning, and enhancing productivity workflows that involve calendar management."
merajmehrabi,puppeteer-mcp-server,17,,"This Puppeteer MCP server, developed by Anthropic, provides browser automation capabilities through a standardized interface. Built with TypeScript and leveraging Puppeteer, it offers tools for web navigation, interaction, and data extraction. The implementation supports both new browser instances and connections to existing Chrome windows, enabling flexible deployment scenarios. It includes features like screenshot capture, form filling, and JavaScript execution, making it suitable for web scraping, automated testing, and AI-assisted web browsing. The server's logging system and error handling enhance its reliability and debuggability. By bridging AI models with web automation, this implementation enables sophisticated web interaction scenarios, particularly useful for AI assistants or applications requiring programmatic web access."
src,mcp,92,3734,"Lokka is an MCP server that provides a bridge between AI assistants and Microsoft Graph API, enabling natural language interaction with Microsoft 365 tenants. Developed by Merill Fernando, it allows users to query and manage their Microsoft environment through simple conversational prompts rather than complex API calls. The server authenticates with Microsoft Entra using client credentials, translates natural language requests into appropriate Graph API calls, and returns formatted results. Particularly valuable for administrators who need to perform tasks like creating security groups, reviewing conditional access policies, or managing Intune configurations without leaving their AI assistant interface."
metatool-ai,mcp-server-metamcp,60,9358,"This MCP server implementation manages multiple MCPs through a centralized interface, streamlining AI assistant interactions across various platforms. Developed by James Zhang, it utilizes TypeScript and integrates with the Model Context Protocol SDK. The server focuses on secure API key management and provides a unified access point for multiple MCP services. It's designed for scalability and easy configuration, making it particularly useful for applications that need to coordinate multiple AI assistants or integrate diverse AI services. The implementation supports Docker deployment and is optimized for production environments, offering a robust solution for complex AI orchestration scenarios."
metcalfc,atrax,3,,"Atrax is a proxy service for Model Context Protocol (MCP) servers that aggregates multiple servers and presents them as a unified interface. It supports various transport types including STDIO, HTTP/SSE, and Docker, enabling seamless communication between clients and MCP servers. The implementation features resource aggregation with configurable conflict resolution, transparent proxying, authentication support, and enhanced error handling. Atrax is particularly useful for scenarios where multiple specialized MCP servers need to be accessed through a single endpoint, simplifying client integration while maintaining strict protocol compliance."
meterlong,mcp-doc,52,,"DocxProcessor MCP server provides a comprehensive Word document processing service that enables AI assistants to create, edit, and manipulate Microsoft Word documents through a rich set of tools. Built using Python with the python-docx library, it offers functionality for adding and formatting text, managing tables, searching and replacing content, and preserving document styling. The implementation includes state management for maintaining document sessions across server restarts and detailed error handling, making it particularly valuable for workflows requiring document generation, content editing, or template-based document creation without leaving the conversation interface."
metoro-io,github-mcp-server-go,3,,"GitHub MCP Server in Go provides a robust interface for AI assistants to interact with GitHub's API, enabling operations like repository management, branch creation, file manipulation, and issue tracking. Developed by Metoro K8s, this implementation authenticates via environment variables or HTTP headers and exposes 15 specialized tools including repository search, file content retrieval, commit listing, and code search. The server is built with Go 1.21 and uses the Model Context Protocol to standardize how AI systems can perform GitHub operations, making it ideal for developers who want to integrate GitHub workflows into their AI assistant interactions."
metoro-io,metoro-mcp-server,36,,"This MCP server, developed by Metoro, enables AI assistants like Claude to interact with Kubernetes clusters through Metoro's observability platform. Built in Go, it exposes Metoro's APIs to allow querying and analyzing telemetry data collected from microservices using eBPF instrumentation. The implementation stands out by providing deep visibility into Kubernetes environments without requiring code changes. By connecting AI capabilities with Metoro's comprehensive cluster insights, this server enables AI systems to troubleshoot issues, optimize performance, and understand complex microservice interactions. It is particularly useful for DevOps teams seeking to leverage AI for Kubernetes observability, automated incident response, and performance optimization in cloud-native environments."
mfukushim,map-traveler-mcp,10,2582,"Map-Traveler-MCP creates a virtual travel environment on Google Maps for AI assistants, allowing users to simulate journeys with an avatar that can navigate real-world routes. Built by Masahiro Fukushima, it integrates with Google Maps API for location data, image generation services (PixAI, Stability.ai, ComfyUI) for avatar visualization, and Bluesky for social sharing. The implementation stores travel history in SQLite, supports both real-time and skip-ahead travel modes, and includes features like nearby facility discovery and customizable avatar prompts, making it ideal for virtual tourism, storytelling, and interactive geography exploration."
mfydev,ghost-mcp,36,,"A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude. This server provides secure and comprehensive access to your Ghost blog, leveraging JWT authentication and a rich set of MCP tools for managing posts, users, members, tiers, offers, and newsletters."
m-gonzalo,cosa-sai,13,,"Gemini Docs MCP Server enables AI assistants to access comprehensive documentation for various technologies using Google's Gemini API with its 2M token context window. Built by M-Gonzalo, it overcomes traditional RAG system limitations by eliminating the need for chunking, custom retrievers, and vector databases, instead loading entire documentation sets directly into the LLM. The server provides specialized tools for checking task feasibility, getting problem-solving hints, evaluating code practices, and exploring implementation alternatives. This approach delivers well-reasoned answers that consider entire technology specifications, making it particularly valuable for learning, debugging, and exploring alternative approaches across both common and obscure technologies."
mhyrr,sketchup-mcp,71,,"SketchupMCP connects Sketchup to Claude AI through a bidirectional TCP socket connection, enabling AI-assisted 3D modeling and scene manipulation. Built with Python and Ruby, it provides tools for creating, modifying, and transforming components, applying materials, inspecting scenes, and executing Ruby code directly in Sketchup. The implementation includes both a Sketchup extension that creates a TCP server within the application and a Python MCP server that handles the protocol communication, making it ideal for users who want to leverage AI capabilities for architectural design, interior modeling, or general 3D content creation without leaving their conversation interface."
micahman33,vonageaicodeassist,0,,"Vonage Assist is an MCP server that helps developers integrate Vonage API capabilities into their applications by providing AI-assisted access to Vonage documentation. Built with FastMCP, the server performs targeted searches within Vonage's developer documentation using Google Serper API, extracts relevant content from search results, and returns it to the user. The implementation includes a specialized tool called 'Vonage-Assist' that accepts search queries and library parameters, making it easy for AI assistants to find information about Vonage's communication APIs for features like SMS, voice, verification, and video."
michael7736,mysql-mcp-server,1,,"MySQL MCP Server provides direct access to MySQL databases, allowing AI assistants to execute various SQL operations including queries, table creation, data insertion, updates, and deletions. Built with TypeScript and the Model Context Protocol SDK, it features specialized tools for different SQL operations, transaction logging with unique IDs, and configurable database connection settings. The server is particularly useful for applications where AI assistants need to interact with relational databases without requiring users to write complex database code."
michaelbuckner,servicenow-mcp,9,,"This MCP server implementation provides a bridge to ServiceNow, enabling AI assistants to interact with incident management, user information, and knowledge base articles. Developed by Michael Buckner, it offers tools for creating and updating incidents, searching records, and performing queries against ServiceNow tables. The server supports multiple authentication methods and is designed for use cases requiring natural language interactions with ServiceNow data, such as automated incident triage or AI-driven IT service management."
michaelneale,deepseek-r1-mcp,1,232,"This MCP server, developed by an unspecified author, provides a reasoning extension for locally running models using Deepseek r1. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for task planning and context-based reasoning. The implementation focuses on enabling AI agents to perform reasoning tasks without relying on remote models, using Ollama to run Deepseek r1 locally. It's particularly useful for applications requiring autonomous planning and decision-making capabilities, enabling use cases such as task decomposition, strategy formulation, and context-aware problem-solving while maintaining data privacy and reducing latency."
michalnaka,mcp-substack,3,,"This MCP server implementation enables downloading and parsing of Substack posts for integration with Claude's desktop app. Developed as an open-source Node.js project, it provides a streamlined interface for retrieving article content, including title, author, and full text. The server leverages libraries like Cheerio for HTML parsing and the Model Context Protocol SDK for standardized communication. It stands out by focusing specifically on Substack content extraction, making it particularly useful for researchers, writers, and analysts who want to easily incorporate Substack articles into their AI-assisted workflows for tasks like summarization, content analysis, or trend identification."
michsob,powerplatform-mcp,9,1306,"PowerPlatform MCP Server provides intelligent access to Microsoft PowerPlatform/Dataverse entities and records through a Model Context Protocol interface. Developed by Michal Sobieraj, it offers tools for retrieving entity metadata, attributes, relationships, and records with support for OData queries. The server includes formatted, context-rich prompts for entity overviews, attribute details, query templates, and relationship mapping. It authenticates with Azure AD and requires minimal configuration through environment variables, making it ideal for developers working with PowerPlatform who need context-aware assistance for data modeling, query building, and entity exploration directly within AI assistant conversations."
mcp-servers,mcp-server-giphy,248,,"Search and Retrieve: Uses the GIPHY API to search for images based on a provided search term.
(Future) Sampling: Employs the MCP ""sampling"" feature to request the assistant to choose the most appropriate image for the context.
Integration: The selected GIPHY image and its metadata are returned to the original assistant tool call, enabling it to be included in assistant responses to users."
mcp-servers,mcp-server-open-deep-research,248,,"This is a Model Context Protocol (MCP) server that wraps the HuggingFace Open Deep Research project, built on their smolagents library, making the project available for use with MCP clients, such as AI assistants.

This is an early work-in-progress, has limited testing, and requires access to API's that will be replaced in the near future. For now, the following API keys are required to be set in the environment or in a .env file (see .env.example):

OpenAI API Key: https://platform.openai.com/
HuggingFace API Key: https://huggingface.co/
SERP API Key: https://serpapi.com/"
microsoft,playwright-mcp,8036,201756,"Playwright MCP is a server implementation that enables AI assistants to control web browsers through the Model Context Protocol. It provides tools for navigating websites, capturing page snapshots, interacting with elements, and taking screenshots - all accessible via standardized MCP interfaces. The server offers two modes: a snapshot-based approach that uses accessibility trees for better semantic understanding of web pages, and a vision-based mode that works with screenshots for visual interactions. Built by Microsoft, this implementation leverages Playwright's automation capabilities to allow AI assistants to perform complex web tasks like form filling, clicking elements, and extracting information from websites."
mcp-servers,mcp-server-vscode,248,,"The VSCode MCP Server is a VSCode extension that acts as a Model Context Protocol (MCP) server integrated directly within VSCode. Its primary purpose is to expose a coding diagnostic tool—namely, the code_checker—which aggregates diagnostic messages (similar to those displayed in VSCode’s Problems panel) and makes them accessible to an external AI assistant via Server-Sent Events (SSE). This allows your assistant to invoke MCP methods and retrieve timely diagnostic information from your workspace."
mcp-servers,mcp-server-word,248,,"MCP Server for Interaction with Office Apps
This is a Model Context Protocol (MCP) server project.

Warning: Be VERY careful with open Word or PowerPoint apps. Your content may be unexpectedly modified or deleted.

"
miguelg719,home-assistant-mcp,1,,"This Home Assistant MCP server, developed by Miguel, enables seamless integration of smart home devices and automation into AI-assisted workflows. Built with Python and leveraging libraries like anthropic, httpx, and mcp, it provides a standardized interface for controlling and querying Home Assistant entities through compatible MCP clients. The implementation supports various smart home operations including lighting control, climate management, security system interactions, and more. It's particularly useful for developers and smart home enthusiasts looking to incorporate on-demand access to home automation features into their AI-assisted applications, allowing for dynamic control and monitoring of connected devices."
miguelyad26,alpaca-mcp-server,0,,"Alpaca MCP Server provides a bridge between Claude and the Alpaca trading API, enabling AI assistants to execute stock trading operations directly within conversations. The server implements the Model Context Protocol to expose Alpaca's trading functionality, requiring API credentials for authentication, and can be deployed either as a standalone Python service or containerized using Docker. Running on port 8000, it creates a seamless integration that allows for automated trading strategies, portfolio management, and market data analysis without leaving the conversation interface."
miiton,meilisearch-hybrid-search-mcp,10,,"Meilisearch Hybrid Search MCP Server provides a bridge between AI assistants and Meilisearch's hybrid search capabilities, enabling semantic and keyword-based document searches with adjustable weighting. Built in Go, it allows users to fine-tune search results by setting a semantic ratio (from pure keyword to pure semantic search) and supports filtering by document attributes. The server includes helpful prompts for guiding users on parameter adjustment and offers detailed documentation on search optimization, making it particularly valuable for applications requiring nuanced document retrieval from Meilisearch indexes."
mikah13,mcp-clickup,1,1166,"This MCP server implementation provides a bridge to the ClickUp API, enabling AI assistants to interact with ClickUp's project management tools. Developed by mikah13, it offers integration with ClickUp's task management, team collaboration, and workflow automation features. The server is designed to work with Node.js environments and utilizes the @modelcontextprotocol/sdk for MCP compatibility. It's particularly useful for AI-driven project management, automated task creation and updates, and generating reports based on ClickUp data. The implementation focuses on secure API key management and efficient request handling, making it suitable for both development and production environments."
mike-pete,starbucks-mcp,0,,"Starbucks MCP server provides programmatic access to Starbucks menu and ordering data through a set of tools for retrieving menu categories, menu items, and potentially store locations. Built using TypeScript and the MCP SDK, it leverages Playwright for web interactions and Zod for type validation, enabling developers to programmatically explore and interact with Starbucks menu data without direct web scraping."
mikeyny,ai-image-gen-mcp,69,,"This MCP server, developed by an unspecified author, enables image generation using Replicate's flux-schnell model. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers configurable image parameters such as resolution, aspect ratio, and quality. The implementation focuses on providing a standardized interface for text-to-image generation, including features like saving generated images to specified directories and full error handling. It's particularly useful for applications requiring on-demand image creation, enabling use cases such as content illustration, design prototyping, and AI-assisted art generation without complex API integrations or local model deployments."
mikhael-abdallah,mcp-revisor-server,2,,An Azure DevOps pull request review assistant that enables automated code review workflows through MCP. Provides tools for retrieving pull request diffs and creating inline comments programmatically using Azure Personal Access Tokens. Designed to streamline code review processes by allowing AI-powered review and annotation of code changes directly within Azure DevOps pull requests.
miki-hoshizaki,mcp-magi,1,,"MAGI MCP Server provides a code review orchestration system that connects AI assistants to a distributed review framework with three specialized agents (Melchior, Balthasar, and Casper). The server establishes WebSocket connections to the MAGI Gateway, submits code for evaluation, and aggregates agent decisions into a final verdict based on majority rule. Built with FastMCP and supporting both SSE and WebSocket transports, it features authentication token generation, detailed logging, and containerization via Docker. This implementation is particularly valuable for developers seeking automated, multi-perspective code quality assessment without leaving their AI assistant interface."
mikkohei13,mcp-biodiversity,0,,"This MCP server implementation provides a simple interface for adding numbers and generating personalized greetings. It utilizes the FastMCP framework and includes custom helper functions for string capitalization. The server exposes an addition tool and a dynamic greeting resource, making it suitable for basic arithmetic operations and customized user interactions in MCP-based applications."
milancermak,starknet-mcp,9,,"This Starknet MCP server provides a bridge to the Starknet blockchain, enabling AI assistants to interact with Starknet's JSON-RPC API. Developed using TypeScript and the Model Context Protocol SDK, it offers tools for querying blockchain state, retrieving transaction data, and executing contract calls. The implementation focuses on comprehensive coverage of Starknet's RPC methods, making it easier for AI models to perform complex blockchain operations without deep knowledge of Starknet's API intricacies. It's particularly useful for blockchain analytics, smart contract interactions, and automated Starknet-based workflows, enabling AI to efficiently query and analyze Starknet data."
milescool,binance-mcp,1,,"Binance-mcp is a TypeScript-based MCP server that provides real-time and historical Bitcoin market data from Binance. Built by MilesCool, this implementation offers five specialized tools for accessing Bitcoin ticker data, order book information, recent trades, historical price charts, and real-time price streams. The server leverages WebSocket connections for live data and REST API calls for historical information, formatting responses with detailed market metrics including price trends, trading volumes, and buy/sell pressure indicators. It's particularly valuable for financial analysis workflows, market research, and educational use cases where AI assistants need access to cryptocurrency market data without requiring direct API integration."
milkosten,task-mcp-server,1,,"This MCP server implementation provides a task management API with CRUD operations for tasks, including categories, priorities, and statuses. It uses a custom MCP SDK implementation and integrates with an external task API service. The server offers resources for task lists and individual tasks, tools for task operations, and prompts for natural language interactions. It's designed for AI assistants to manage tasks through conversation, with features like task filtering, progress reporting, and natural language task creation."
milosbastaja,mcp-klaudium,1,,"This MCP server implementation, developed by MilosBastaja, provides a knowledge graph management system with dynamic compression capabilities. Built using TypeScript and the MCP SDK, it offers a range of tools for creating, reading, updating, and deleting entities, relations, and observations within a knowledge graph. The implementation stands out by incorporating a thinking process that allows for intelligent data compression and retrieval. By abstracting complex graph operations into a standardized MCP interface, it enables AI systems to efficiently manage and query structured knowledge. This tool is particularly valuable for applications requiring dynamic knowledge representation and reasoning, facilitating use cases such as intelligent information retrieval, contextual understanding, and adaptive learning systems."
mindscapehq,mcp-server-raygun,10,577,"This Raygun MCP server, developed by MindscapeHQ, provides a standardized interface for AI assistants to interact with Raygun's crash reporting and real user monitoring services. It integrates with Raygun's V3 API to enable operations like listing applications, managing error groups, handling deployments, and accessing performance metrics. Built in TypeScript, the implementation handles API authentication and exposes Raygun's functionality through an MCP interface. By bridging AI models and application monitoring data, this server allows AI systems to analyze crash reports, track user sessions, and monitor application performance. It is particularly useful for AI assistants needing to provide insights on software stability, user experience issues, or deployment impacts in applications monitored by Raygun."
mindsdb,mindsdb,27721,,"MindsDB is an MCP server that enables your MCP applications to answer questions over large-scale federated data—spanning databases, data warehouses, and SaaS applications.

​
Key Features
Unified Data Gateway
MindsDB acts as a unified data gateway that handles complex data operations, freeing AI apps and agents from the need to manage individual data sources or write complex logic. MindsDB enables “one-step” querying across multiple sources with full auditability.

Superior User Experience
MindsDB delivers a polished, secure, and user-friendly experience on top of MCP integrations. Our turnkey solution includes robust security controls, monitoring, governance, and native integrations to ensure compatibility with non-MCP solutions and applications.

Advanced AI Workflows
MindsDB orchestrates complex AI workflows, such as joining data from multiple sources and coordinating across various models and data systems in a single query. These composite workflows are challenging to implement using MCP alone."
mineru98,mysql-mcp-server,23,,"MySQL-MCP-Server provides a Model Context Protocol server implementation that connects to MySQL databases. Built with Python 3.11, it uses PyMySQL to enable AI assistants to interact with MySQL 8.0 databases through a containerized environment. The server exposes port 8081 for MCP communication and includes configuration options for database connection parameters through environment variables. This implementation is particularly useful for workflows requiring AI assistants to query, analyze, or manipulate data stored in MySQL databases without leaving the conversation interface."
mingolladaniele,taskmaster-todoist-mcp,10,,"TaskMaster-Todoist-MCP is a server implementation that provides AI assistants with access to Todoist task management capabilities through the Todoist REST API. The server exposes a tool for retrieving tasks with flexible filtering options, allowing users to query tasks by date, priority, status, and other criteria using Todoist's native filtering syntax. Built with FastMCP, it handles authentication via environment variables and formats task data for optimal display. This implementation is particularly valuable for users who want to manage their tasks and productivity workflows directly through AI assistants without switching contexts."
minhalvp,android-mcp-server,267,,"This MCP server implementation provides a bridge to control and interact with Android devices using ADB (Android Debug Bridge). It offers tools for retrieving installed packages, executing ADB commands, capturing screenshots, and analyzing UI layouts. Developed as an open-source project, it integrates with the MCP CLI and uses libraries like adb-shell and Pillow for device communication and image processing. The server is designed for use cases requiring automated Android device testing, app analysis, or remote device management."
minimax-ai,minimax-mcp,126,5357,"MiniMax MCP is a server implementation that provides AI assistants with access to MiniMax's text-to-speech, voice cloning, and video generation capabilities. Developed by Roy Wu at MiniMax, this Python-based server handles authentication with the MiniMax API, manages file operations, and provides tools for audio playback and file conversion. The implementation includes robust error handling, fuzzy filename matching, and environment variable configuration, making it particularly useful for applications requiring high-quality voice synthesis and media generation from AI interactions."
minipuft,claude-prompts-mcp,0,,"Claude Custom Prompts MCP Server provides a flexible, template-based prompt system for Claude AI models. Built with TypeScript and Node.js, it allows users to define and manage custom prompts in markdown format organized by categories, with support for both simple prompts and multi-step prompt chains. The server includes a comprehensive API for prompt management, execution via STDIO or SSE transports, and features like conversation history tracking and error handling. Particularly valuable for users who need to standardize interactions with Claude across different use cases, it enables complex reasoning workflows through its chain execution capabilities while maintaining a modular, extensible architecture."
miottid,todoist-mcp,4,,"This MCP server, developed by David Miotti, provides a standardized interface for interacting with the Todoist API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers comprehensive task and project management capabilities. The implementation focuses on exposing Todoist's full feature set through a consistent MCP interface, enabling AI models to perform complex task organization, scheduling, and collaboration operations. By connecting AI assistants with Todoist's robust functionality, this server facilitates sophisticated productivity scenarios like automated task creation, project analytics, and personalized workflow optimization. It's particularly valuable for applications and AI systems aimed at enhancing personal and team productivity through intelligent task management."
misanthropic-ai,ddg-mcp,2,6635,"The ddg-mcp server provides DuckDuckGo search capabilities through the Model Context Protocol, enabling AI assistants to perform web searches, image searches, news queries, video searches, and interact with DuckDuckGo's AI chat. Developed by Shannon Sands, this implementation offers five specialized tools with configurable parameters for region, safesearch, and time limits, along with a prompt for creating search result summaries. The server supports advanced search operators and various filtering options, making it particularly valuable for workflows requiring up-to-date information from the web without direct internet access."
misanthropic-ai,playwrite-mcp,0,1524,"Playwright-MCP is a server that enables LLM-powered clients to control a web browser for automation tasks. Developed by Shannon Sands, it provides a comprehensive set of browser automation tools including navigation, page interaction, and content extraction capabilities through the Model Context Protocol. The server exposes resources for accessing browser screenshots, implements tools for clicking elements, typing text, and extracting content, and provides a specialized prompt for interpreting web pages. Particularly valuable for AI assistants that need to perform web-based tasks like form filling, data extraction, or automated testing without leaving the conversation interface."
missionsquad,mcp-github,1,1905,"MCP GitHub Server provides a comprehensive interface to the GitHub API, enabling AI assistants to perform repository operations, file management, issue tracking, and code search directly within conversations. Developed by MissionSquad (based on Anthropic's original implementation), this server supports dynamic GitHub Personal Access Token handling per request, allowing for flexible authentication while maintaining backward compatibility with environment variables. The implementation exposes over 30 tools covering everything from creating repositories and branches to managing pull requests and releases, making it particularly valuable for developers who need to interact with GitHub without context switching."
missionsquad,mcp-helper-tools,2,390,"MCP Helper Tools provides a suite of utility functions for AI agents, including encoding/decoding operations, geolocation services, cryptographic tools, QR code generation, and timezone conversions. Built by MissionSquad using TypeScript and the Model Context Protocol SDK, this server implements intelligent caching and rate limiting to optimize performance when accessing external APIs like IP geolocation services. The implementation features a modular architecture with separate tool categories, progress reporting capabilities, and error handling mechanisms, making it particularly valuable for developers who need to integrate common utility operations into AI-assisted workflows without implementing these functions from scratch."
mitchybawesome,sar-mcp,6,,"The AWS Service Reference MCP Server provides tools to interact with the AWS Programmatic Service Reference API, allowing users to list all available AWS services and retrieve API actions for specific services. Built with Python using FastMCP and httpx for asynchronous HTTP requests, it fetches real-time service information from AWS's service reference endpoints. This implementation is particularly useful for developers and cloud architects who need quick access to AWS service capabilities without leaving their Claude Desktop environment, enabling seamless integration of AWS service information into their workflows."
mixelpixx,google-search-mcp-server,38,772,"This Google Search MCP server, developed using TypeScript and Python, provides AI assistants with a standardized interface to perform web searches and analyze webpage content. It integrates with the Google Custom Search API for retrieving search results and utilizes libraries like Trafilatura and BeautifulSoup for content extraction and markdown conversion. The server offers tools for executing searches, analyzing individual webpages, and batch processing multiple URLs. It's particularly valuable for AI systems that require up-to-date web information, enabling use cases such as research assistance, content summarization, and data aggregation from multiple online sources."
mjpitz,mcp-rfc,2,375,"MCP RFC Server provides a bridge to IETF RFC documents, enabling AI assistants to fetch, parse, and search through technical standards documentation. This TypeScript implementation offers tools for retrieving RFCs by number, searching by keyword, and extracting specific sections from documents, with support for both HTML and TXT format parsing. The server includes caching for better performance and handles the complexities of parsing RFC document structures, making it particularly useful for technical writing, protocol research, and standards compliance verification without requiring users to manually navigate the IETF website."
mk965,asset-price-mcp,1,595,"Asset Price MCP provides real-time financial data for precious metals, cryptocurrencies, and other assets through a standardized interface. Developed by mk965, this TypeScript implementation uses the Model Context Protocol SDK to expose current market prices and historical trends. The server is containerized for easy deployment and includes multilingual documentation (English, Chinese, Japanese). Ideal for financial analysis, portfolio tracking, and applications requiring up-to-date asset pricing information without direct API integrations to multiple financial data sources."
mkc909,agent-communication-mcp-server,0,,"The Agent Communication MCP Server enables collaboration between different Roo modes/roles across multiple systems, creating a team of specialized LLM agents that can work together on tasks. It provides core functionality including agent registration, asynchronous messaging, task coordination, and context sharing, along with GitHub integration for issue tracking and PR management. Built with TypeScript and using PlanetScale for data storage, this server creates a robust infrastructure for multi-agent systems where agents can register their capabilities, communicate with each other, assign and track tasks, and share knowledge - making it ideal for complex workflows requiring coordination between specialized AI agents."
mkearl,dependency-mcp,8,,"This DependencyMCP implementation, developed using TypeScript, provides a robust solution for managing and analyzing project dependencies. It integrates with the Model Context Protocol SDK and utilizes tools like diff and minimatch for precise dependency tracking and comparison. The implementation stands out by offering a cache system for improved performance and supporting various build environments through its flexible configuration. It's particularly useful for developers and teams looking to streamline their dependency management process, identify potential conflicts, and maintain up-to-date project dependencies across complex software ecosystems."
mkummer225,google-sheets-mcp,35,,"A Google Sheets MCP server that enables AI assistants to interact directly with spreadsheets through the Google Sheets API. Developed by Matt Kummer, this TypeScript implementation provides a comprehensive set of tools for creating, reading, and editing spreadsheets, including operations like creating new documents, managing sheets, manipulating rows and columns, and editing individual cells. The server handles OAuth authentication with Google's services and formats responses in a structured manner for AI consumption. It's particularly useful for scenarios requiring data analysis, report generation, or collaborative document management where AI assistants need direct access to spreadsheet functionality."
mkusaka,mcp-server-perplexity,1,,"This MCP server, developed by mkusaka, provides integration with Perplexity AI's search capabilities. Built with TypeScript and leveraging the OpenAI SDK, it offers a standardized interface for AI-powered web search queries. The implementation focuses on supporting all official Perplexity models (Sonar series) and includes robust error handling and logging. By connecting AI models with Perplexity's advanced search technology, this server enables sophisticated information retrieval scenarios, enhancing the ability to find relevant and up-to-date information. It's particularly useful for applications and AI assistants that require access to current web data through a familiar MCP interface."
mkusaka,mcp-shell-server,2,,"MCP Shell Server provides a secure bridge for AI assistants to execute shell commands on the host system through a standardized interface. Developed by mkusaka, it supports various shells (bash, zsh, powershell, cmd) across different operating systems with automatic detection of the user's environment. The server exposes a single 'shell_exec' tool for command execution and several system information resources including hostname, platform, and user details. It features comprehensive error handling, logging capabilities, and configurable shell selection via command-line options, making it particularly valuable for AI agents that need to perform system operations or automate tasks without leaving the conversation interface."
mladensu,cli-mcp-server,70,16009,"This MCP server, developed by MladenSU, provides secure command-line execution with configurable security policies. It implements strict command whitelisting, path validation, and execution controls to enable controlled CLI access for AI applications while maintaining security. The server exposes tools for executing whitelisted commands and displaying security rules. By combining customizable restrictions with detailed error reporting, this implementation facilitates safe integration of command-line capabilities into AI workflows. It is particularly useful for scenarios requiring limited shell access, such as allowing an AI assistant to perform basic file operations or run specific utilities in a constrained environment."
mlobo2012,claude_desktop_api_use_via_mcp,6,,"This Claude Desktop API Integration via MCP, developed by mlobo2012, enables seamless access to advanced Claude API features from within Claude Desktop. It bypasses Professional Plan limitations by providing direct API integration, conversation history tracking, and system prompt support. The implementation uses a Node.js-based MCP server to handle API requests, allowing users to switch between Professional Plan and API usage as needed. It's particularly useful for scenarios requiring longer context windows, custom system prompts, or advanced conversation management, while maintaining the familiar Claude Desktop interface. The project emphasizes ease of setup and usage, with clear instructions for configuration and a range of MCP tools for querying Claude, managing conversations, and retrieving history."
mmruesch12,azdo-mcp,1,,"Azure DevOps MCP server provides seamless integration with Azure DevOps API, enabling AI assistants to manage work items, pull requests, and wiki content through natural language. Developed by Matt Ruesch, this TypeScript implementation authenticates with Personal Access Tokens and exposes tools for listing, creating, and updating Azure DevOps resources. The server handles complex operations like creating pull requests with reviewers, adding file-specific comments, and managing wiki pages with proper version control, making it valuable for development teams who want to interact with their Azure DevOps projects directly through AI assistants."
mnhlt,websearch-mcp,7,538,"WebSearch-MCP provides real-time web search capabilities through a standardized interface, integrating with a dedicated crawler service that handles the actual web searches and content extraction. Built with TypeScript and the MCP SDK, it features configurable result limits, language/region filtering, and domain inclusion/exclusion rules, making it particularly valuable for AI assistants that need up-to-date information from the web without leaving their conversation context."
mobilehackinglab,jadx-mcp-plugin,34,,"The jadx-mcp-plugin is a powerful extension for the popular Jadx decompiler that exposes the internal decompiled code structure through the Model Context Protocol (MCP) — a structured API designed to facilitate programmatic access and interaction with the decompiled codebase.

This plugin transforms Jadx into an AI-friendly analysis environment, making it easier to:

Navigate code programmatically: AI tools and scripts can query classes, methods, and fields using structured requests, removing the need for brittle regex-based parsing.

Automate analysis tasks: Streamline repetitive reverse engineering workflows by integrating AI agents or scripts that can reason over the code and metadata.

Power intelligent reverse engineering: Combine with LLMs or AI frameworks to build automated code summarizers, vulnerability scanners, or Android deobfuscators.

🧠 Use Case in AI Reverse Engineering AI models, such as Claude, GPT-40 or domain-specific agents, can use the MCP API to:

Extract call graphs or class hierarchies for architectural analysis.

Auto-document code by interpreting class roles and method behaviors.

Search and highlight suspicious patterns (e.g., dynamic loading, reflection).

🧠 𝗡𝗼𝘄 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗮𝘀𝗸 𝗖𝗹𝗮𝘂𝗱𝗲 𝘁𝗵𝗶𝗻𝗴𝘀 𝗹𝗶𝗸𝗲:
- ""𝑆𝑒𝑎𝑟𝑐ℎ 𝑎𝑙𝑙 𝐽𝑎𝑣𝑎 𝐶𝑙𝑎𝑠𝑠𝑒𝑠 𝑡ℎ𝑎𝑡 ℎ𝑎𝑛𝑑𝑙𝑒 𝑢𝑠𝑒𝑟 𝑐𝑜𝑛𝑡𝑟𝑜𝑙𝑙𝑒𝑑 𝑖𝑛𝑝𝑢𝑡 𝑡ℎ𝑎𝑡 𝑙𝑒𝑎𝑑 𝑡𝑜 𝑝𝑎𝑡ℎ 𝑡𝑟𝑎𝑣𝑒𝑟𝑠𝑎𝑙 𝑖𝑠𝑠𝑢𝑒𝑠""

- ""𝑆𝑒𝑎𝑟𝑐ℎ 𝑎𝑙𝑙 𝐽𝑎𝑣𝑎 𝐶𝑙𝑎𝑠𝑠𝑒𝑠 𝑡ℎ𝑎𝑡 ℎ𝑎𝑛𝑑𝑙𝑒 𝑢𝑠𝑒𝑟 𝑖𝑛𝑝𝑢𝑡 𝑡ℎ𝑎𝑡 𝑟𝑒𝑎𝑐ℎ 𝐽𝑁𝐼 𝑛𝑎𝑡𝑖𝑣𝑒 𝑐𝑎𝑙𝑙𝑠 𝑤𝑖𝑡ℎ 𝑢𝑠𝑒𝑟 𝑐𝑜𝑛𝑡𝑟𝑜𝑙𝑙𝑒𝑑 𝑖𝑛𝑝𝑢𝑡 𝑎𝑛𝑑 𝑓𝑖𝑛𝑑 𝑒𝑥𝑝𝑙𝑜𝑖𝑡𝑎𝑏𝑙𝑒 𝑣𝑢𝑙𝑛𝑒𝑟𝑎𝑏𝑖𝑙𝑖𝑡𝑖𝑒𝑠""

- ""𝐶𝑟𝑒𝑎𝑡𝑒 𝑎 𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛 𝑐𝑎𝑙𝑙 𝑔𝑟𝑎𝑝ℎ 𝑠ℎ𝑜𝑤𝑖𝑛𝑔 𝑡ℎ𝑒 𝑣𝑢𝑙𝑛𝑒𝑟𝑎𝑏𝑖𝑙𝑖𝑡𝑖𝑒𝑠""

Whether you're building a smarter reverse engineering assistant or just want more structured control over Jadx outputs, jadx-mcp-plugin is your gateway to the future of AI-augmented reverse engineering."
mobile-next,mobile-mcp,195,1585,"Mobile MCP Server provides tools for controlling and interacting with mobile devices through the Model Context Protocol. Built with TypeScript, it offers functionality for both Android and iOS platforms, enabling AI assistants to take screenshots, list installed apps, launch applications, click on screen elements, type text, and navigate through device interfaces. The server implements various device-specific commands through native toolchains (adb for Android and xcrun for iOS simulators), making it particularly valuable for automated mobile app testing, UI navigation, and demonstration scenarios where direct device control is needed."
src,brave-search,36543,504797,"This Brave Search MCP server, developed by ModelContextProtocol, integrates the Brave Search API to provide web and local search capabilities for AI assistants. It offers flexible querying options including pagination, result filtering, and content freshness controls. The implementation handles API authentication and exposes Brave's search functionality through a standardized MCP interface. By bridging AI models and Brave's privacy-focused search engine, this server enables AI systems to retrieve relevant web pages, news articles, and local business information. It is particularly useful for AI assistants needing to gather up-to-date information from the web, conduct research, or provide location-based recommendations while respecting user privacy."
src,everything,36543,55812,"This MCP server, developed by Anthropic, serves as a comprehensive demo suite for MCP client implementations. It exercises the full range of MCP protocol features including prompts, tools, resources, and sampling. Built in TypeScript, the server implements various tools like echo, math operations, and LLM sampling, as well as 100 test resources in both plaintext and binary formats. By providing a standardized testing ground, this server enables MCP client developers to validate their implementations against a wide array of protocol functionalities. It is particularly useful for ensuring compatibility, debugging edge cases, and demonstrating the capabilities of the MCP protocol in a controlled environment."
src,fetch,36543,683689,"This fetch MCP server, developed by Anthropic, provides AI assistants with web content retrieval capabilities. It integrates with web servers to fetch and process HTML content, converting it to markdown for easier consumption by language models. Built in Python, the implementation handles URL fetching, content extraction, and HTML-to-markdown conversion. By bridging AI models and web content, this server allows AI systems to access and analyze online information in a structured format. It supports chunked reading of long web pages and offers customization options for user agents and robots.txt handling. The fetch server is particularly useful for AI assistants needing to retrieve and process web-based information, conduct research, or provide summaries of online content."
src,filesystem,36543,1056462,"This filesystem MCP server, developed by Anthropic, provides a secure interface for language models to interact with local filesystems. It enables AI agents to read, write, search, and manipulate files and directories through a controlled API. By restricting operations to specified directories and providing advanced editing capabilities, it maintains data security while allowing AI systems to work with file-based data and content. This implementation is particularly useful for AI assistants designed to manage documents, analyze local datasets, or automate file organization tasks using the local filesystem as a backend."
src,gdrive,36543,31377,"This Google Drive MCP server, developed by ModelContextProtocol, provides a secure interface for language models to interact with Google Drive files and folders. It enables AI agents to search, read, and access Google Drive content through a controlled API. The server handles OAuth authentication, automatically exports Google Workspace files to standard formats, and integrates with the desktop app via NPM. By focusing on read-only access and using OAuth for authorization, it maintains data security while allowing AI systems to work with cloud-stored documents and files. This implementation is particularly useful for AI assistants designed to analyze documents, search through cloud storage, or provide insights from Google Drive content."
src,git,36543,257608,"This server, developed by Anthropic, provides AI assistants with Git repository interaction capabilities. It enables operations like viewing working tree status, staging changes, committing, and managing branches through a standardized interface. Built in Python, the implementation handles Git operations and exposes functionality via MCP. By bridging AI models and Git version control, this server allows AI systems to analyze codebases, track changes, and assist with source code management tasks. It is particularly useful for AI assistants supporting software development workflows, code review processes, and collaborative programming projects using Git repositories."
src,github,36543,572225,"This GitHub MCP server, developed by Anthropic, provides AI assistants with comprehensive access to GitHub's API functionality. It enables operations like file management, repository creation, issue tracking, and advanced code search across GitHub. Built in TypeScript, the implementation handles authentication, request formatting, and exposes GitHub's features through a standardized MCP interface. By bridging AI models and GitHub's development platform, this server allows AI systems to interact with code repositories, manage projects, and analyze development workflows. It is particularly useful for AI assistants supporting software development teams in tasks like code review, project management, and collaborative coding on GitHub."
src,gitlab,36543,22817,"This GitLab MCP server, developed by Anthropic, provides AI assistants with comprehensive access to GitLab's API functionality. It enables operations like file management, repository creation, issue tracking, and merge request handling across GitLab projects. Built in TypeScript, the implementation handles authentication, request formatting, and exposes GitLab's features through a standardized MCP interface. By bridging AI models and GitLab's development platform, this server allows AI systems to interact with code repositories, manage projects, and analyze development workflows. It is particularly useful for AI assistants supporting software development teams in tasks like code review, project management, and collaborative coding on GitLab."
src,google-maps,36543,46329,"This Google Maps MCP server, developed by Anthropic, provides a comprehensive interface for language models to interact with Google Maps data and services. It enables AI agents to perform geocoding, reverse geocoding, place searches, and retrieve detailed location information through a controlled API. The server handles API key authentication. By exposing core Google Maps functionality, it allows AI systems to work with location data, calculate distances and routes, and access place details. This implementation is particularly useful for AI assistants designed to provide location-based recommendations, plan trips, analyze geographic data, or offer insights about places and businesses using Google Maps as a backend."
jonathanfischer97,juliadoc-mcp,3,,"This Julia Documentation MCP server, developed by the ModelContextProtocol team, provides access to Julia's documentation and source code through Claude Desktop. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for retrieving documentation and source code for Julia packages, modules, types, functions, and methods. The implementation features built-in caching with a 5-minute TTL and proper error handling for Julia-specific issues. It's particularly useful for developers and data scientists working with Julia who need quick access to documentation and source code within their AI workflows, enabling use cases like code exploration, function reference, and interactive learning without switching contexts."
src,memory,36543,189826,"This knowledge graph memory server, developed by Anthropic, provides a persistent memory system for language models using a local graph database. It enables AI agents to create, query, and update entities, relations, and observations through a controlled API. By storing information as a semantic network, it allows AI systems to build and maintain complex knowledge structures over time. The server integrates with Claude Desktop via NPM and focuses on personalization use cases. This implementation is particularly useful for AI assistants designed to remember user preferences, track relationships between people and organizations, or accumulate domain knowledge across conversations."
src,postgres,36543,404772,"This PostgreSQL MCP server, developed by Anthropic, provides a read-only interface for language models to interact with PostgreSQL databases. It enables AI agents to inspect database schemas and execute SQL queries through a controlled interface. The server integrates with Claude Desktop and can be run as a standalone application, offering deployment flexibility. By focusing on read-only access and using environment variables for configuration, it maintains data security while allowing AI systems to explore and analyze relational data. This implementation is particularly useful for AI assistants designed to perform database schema exploration, generate SQL queries, or provide data-driven insights using PostgreSQL as the backend."
src,puppeteer,36543,486738,"This Puppeteer-based MCP implementation provides a powerful interface for language models to interact with web browsers. Developed by Anthropic, it enables AI agents to perform a wide range of browser automation tasks including navigation, clicking, form filling, and JavaScript execution in real browser environments. The implementation distinguishes itself by offering screenshot capabilities and console log monitoring, making it ideal for visual AI tasks and debugging. By leveraging Puppeteer's Chrome/Chromium automation, it ensures high-fidelity web interactions. This tool is particularly powerful for AI-driven web testing, data scraping, and automated web interactions, enabling more sophisticated AI assistants that can directly manipulate web applications. Its integration with Claude Desktop and npm-based installation process make it easily accessible for developers and researchers working on advanced AI projects involving web automation."
src,redis,36543,,"This MCP server implementation, developed by Anthropic, provides a collection of specialized servers for various data sources and services. It includes integrations for Google Drive, PostgreSQL databases, Slack, Brave Search, filesystem access, and more. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a standardized way for AI models to interact with diverse external systems and data. The implementation focuses on modularity, allowing users to selectively deploy servers based on their specific needs. It enables use cases like document retrieval, database querying, web search, and inter-application communication, making it particularly useful for enhancing AI assistants with real-world data access and action capabilities."
src,sentry,36543,45027,"This Sentry MCP server, developed by Anthropic, enables AI assistants to retrieve and analyze error reports from Sentry.io. It integrates with the Sentry API to provide detailed issue information including stacktraces, timestamps, and event counts. Built in Python, the implementation handles API authentication and request formatting, exposing Sentry's error tracking capabilities via a standardized MCP interface. By bridging AI models and application monitoring data, this server allows AI systems to inspect and analyze software errors, providing insights into bug patterns and potential fixes. It is particularly useful for AI assistants supporting software development teams in triaging issues, understanding error contexts, and prioritizing debugging efforts based on real-time application performance data."
src,sqlite,36543,155539,"This SQLite MCP server, developed by Anthropic, provides a versatile interface for language models to interact with SQLite databases. It enables AI agents to execute SQL queries, analyze business data, and generate insights through a controlled interface. The server features dynamic resources for aggregating discovered insights, and includes tools for database operations and schema inspection. This implementation is particularly useful for AI assistants designed to perform ad-hoc data analysis, generate business reports, or provide data-driven recommendations using SQLite as the lightweight, serverless backend."
mohammeduvaiz,figma-mcp-server,1,0,"Figma MCP Server provides a bridge between AI tools and Figma's design ecosystem, enabling extraction and analysis of design system components, styles, and UI copy. Built by Mohammed-uvaiz, it exposes tools for retrieving file metadata, searching design elements, and generating development handoff documentation, with support for both stdio and SSE transports. Particularly useful for designers and developers seeking AI-powered insights into their Figma design workflows."
mohit-novo,mcp-lithic,1,,"Lithic MCP Server is a TypeScript implementation that provides read-only access to Lithic's banking and card services API. It exposes two main tools: get_resource for fetching specific Lithic resources by ID and list_resources for retrieving collections of resources such as cards, accounts, transactions, and more. The server is containerized with Docker for easy deployment, includes robust error handling, and requires a Lithic API key for authentication. Particularly useful for AI assistants that need to access financial data from Lithic's platform without requiring write permissions."
mokafari,orchestrator-server,15,,"This MCP orchestrator server, developed by an unnamed author, provides task management and coordination capabilities for distributed systems. Built with TypeScript and leveraging the MCP SDK, it offers functionality for creating tasks with dependencies, assigning work to instances, tracking task status, and enforcing dependency relationships. The implementation uses persistent storage to maintain task state across restarts. By abstracting task orchestration into a standardized MCP interface, it enables AI systems and applications to coordinate complex workflows across distributed environments. This server is particularly useful for scenarios involving multi-step data processing pipelines, distributed computing jobs, or any application requiring coordinated execution of interdependent tasks."
monadical-sas,zulip-mcp,1,,"Zulip MCP Server enables AI assistants like Claude to interact with Zulip workspaces through a comprehensive set of tools for messaging and workspace management. Built by Monadical-SAS, it provides capabilities to list channels, post messages, send direct messages, add reactions, retrieve conversation history, manage topics, subscribe to channels, and list users. The server requires Zulip bot credentials (email, API key, and URL) and can be run either via npx or Docker, making it flexible for different deployment scenarios. This implementation is particularly valuable for workflows requiring AI assistants to participate in team communications or monitor Zulip conversations."
mondweep,youtube-music-mcp-server,5,,"This MCP server enables AI models to control YouTube Music playback through Google Chrome, bridging the gap between AI assistants and music streaming. Developed as an open-source project, it leverages the Model Context Protocol SDK and TypeScript to provide tools for searching and playing songs based on titles and artist names. The implementation focuses on cross-platform support, with emphasis on macOS for Chrome automation, and includes error handling and logging features. It's particularly useful for integrating music playback capabilities into AI assistants, enabling use cases such as voice-controlled music selection, mood-based playlists, and seamless music integration in conversational AI applications without requiring direct user interaction with the YouTube Music interface."
spirita1204,mongo-mcp,0,,"MongoDB MCP server provides AI assistants with direct access to MongoDB databases through a set of tools for querying and manipulating data. It supports essential database operations including finding, inserting, updating, and deleting documents, as well as managing collections and indexes. Built with TypeScript and the Model Context Protocol SDK, it runs on stdio transport and can be configured with a MongoDB connection URL, making it ideal for AI-assisted database management, data exploration, and integration of MongoDB operations into conversational workflows."
mongodb-developer,mcp-mongodb-atlas,7,7391,"The MongoDB Atlas MCP Server provides AI assistants with tools to create and manage MongoDB Atlas resources through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, it enables operations such as creating clusters, configuring network access, managing database users, and retrieving connection strings. The implementation requires MongoDB Atlas API keys for authentication and can be integrated with various AI assistant platforms including Cline for VSCode, Cursor, and Claude Desktop. This tool bridges the gap between AI development workflows and MongoDB Atlas infrastructure, making it valuable for developers who need to quickly provision and configure MongoDB resources within their AI-assisted projects."
mongodb-developer,mongodb-mcp-server,20,,"This MongoDB MCP server, developed by Pavel Duchovny at MongoDB Inc., provides AI assistants with read-only access to MongoDB databases. It enables querying collections using aggregation pipelines, explaining query plans, and retrieving schema information. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers a standardized interface for MongoDB interactions, abstracting complexities of database operations. The server implements safety features like automatic query limits and timeouts. It's particularly useful for data analysts, researchers, and developers who want to incorporate AI-driven MongoDB data exploration, analysis, and schema inspection into their workflows, without granting direct write access to the database."
monochromegane,mcp-bigquery-server,0,,"This MCP BigQuery Server, developed by monochromegane, provides a server for querying BigQuery tables using the Model Context Protocol. Built with Go and leveraging the Google Cloud BigQuery client library, it offers tools for listing tables and retrieving table schemas from specified datasets. The implementation focuses on providing a standardized interface for AI models to interact with BigQuery data, enabling use cases such as data analysis, reporting, and business intelligence. By connecting AI models with BigQuery's powerful data processing capabilities, this server allows for sophisticated data querying scenarios, enhancing the ability to extract insights from large-scale datasets through a familiar MCP interface."
monostate,employees-airdrop-rewards-mcp,1,,"A Model Context Protocol server designed for HR teams to efficiently distribute Solana tokens to employees as rewards or incentives. It provides tools for creating custom tokens, managing liquidity, generating custodial wallets through Crossmint, and performing airdrops based on employee roles. The implementation handles the entire workflow from token creation to email notifications, making it particularly valuable for companies looking to leverage blockchain-based rewards systems without requiring technical expertise from HR personnel."
monostate,100ms-spl-token-sniper-mcp,3,,"100ms-SPL-Token-Sniper-MCP provides a high-speed trading system for Solana blockchain tokens, enabling rapid detection and purchase of newly launched SPL tokens across multiple geographic regions. The implementation uses WebSocket connections to monitor Raydium AMM pools and Serum markets, with a distributed cloud architecture that deploys functions to US, Europe, and Asia regions for minimal latency. It features token parsing capabilities, configurable slippage parameters, and visualization tools for monitoring transaction status, making it particularly valuable for traders seeking to capitalize on early token launches with sub-second execution times."
monteslu,vibe-eyes,23,,"Vibe-Eyes is an MCP server that enables LLMs to visualize and debug browser-based games and applications by providing vectorized canvas output and debug information. It captures canvas content, console logs, errors, and unhandled exceptions from the browser via WebSocket, processes the visual data into compact SVG representations, and exposes this information through a single powerful tool called getGameDebug. This creates a seamless debugging experience where LLMs can 'see' what's happening in the application without requiring manual screenshots, making it particularly valuable for 'vibe coding' sessions where visual context is essential for effective assistance."
moonlabsai,enrich_b2b_mcp,1,,"EnrichB2B MCP Server provides AI assistants with real-time LinkedIn data access through a clean API integration. Built with FastMCP, it offers tools to retrieve detailed profile information, company details, and analyze recent activities of LinkedIn users. The server handles authentication with the EnrichB2B API, formats responses for readability, and includes progress reporting for longer operations. This implementation is particularly valuable for B2B research workflows, sales intelligence, and professional networking analysis where understanding a contact's current position, company information, and engagement patterns enhances conversation capabilities."
moonray,mcp-figma,2,,"This MCP server implementation provides a bridge to analyze Figma file structures, allowing AI assistants to explore and understand design hierarchies. It integrates with the Figma API to extract node trees from design files, supporting configurable depth levels for analysis. The server offers both REST API and MCP protocol interfaces, making it versatile for various client integrations. Developed by Bala Bosch, it's particularly useful for AI-assisted design analysis, collaboration workflows, and automated design system management."
mordavid,bloodhound-mcp-ai,58,,"BloodHound-MCP is a Python-based server that integrates with the BloodHound security tool to enable AI assistants to analyze Active Directory and Azure environments for security vulnerabilities. It connects to Neo4j databases containing BloodHound data and provides over 60 specialized tools for identifying attack paths, privilege escalation opportunities, certificate vulnerabilities, and security misconfigurations. The implementation supports both on-premises Active Directory and Azure/Entra ID environments, making it particularly valuable for security professionals conducting threat hunting, penetration testing, or security assessments who need AI assistance in analyzing complex network relationships and identifying potential security weaknesses."
morinokami,mcp-server-bluesky,5,1096,"This MCP server for Bluesky, developed by Shinya Fujino using TypeScript, provides AI assistants with standardized access to Bluesky's social networking features. It leverages the @atproto/api library to interact with Bluesky's API, offering tools for profile management, post creation and deletion, following/unfollowing users, timeline retrieval, and engagement actions like liking posts. The server abstracts the complexities of Bluesky's authentication and request handling, enabling AI systems to seamlessly integrate social media interactions into their workflows. It's particularly valuable for AI-powered social media management, content creation, and user engagement analysis on the Bluesky platform."
morinokami,mcp-server-hackernews,0,,"MCP Server for Hacker News provides a standardized interface to access Hacker News data through the official Firebase API. Built with TypeScript and the Model Context Protocol SDK, it offers two primary tools: retrieving top stories and fetching detailed information about specific stories by ID. The server handles API requests with proper error management and returns structured JSON responses, making it ideal for AI assistants that need to incorporate current Hacker News content into conversations without requiring custom API integration code."
morningman,mcp-doris,11,7019,"This MCP server provides integration with Apache Doris, an MPP (Massively Parallel Processing) analytical database system. It enables AI assistants to query and interact with Doris databases by connecting through MySQL protocol. The implementation requires Python 3.13 and uses environment variables for database connection configuration. Developed by morningman, it's useful for data analysis workflows, business intelligence applications, and any scenario requiring AI-assisted access to data stored in Doris."
morristai,iceberg-mcp,2,,"Iceberg MCP is a Rust-based server implementation that provides AI assistants with access to Apache Iceberg catalogs. Developed by Morris Tai, it currently supports REST catalogs with plans for AWS Glue, S3 Table, and Hive metastore integration. The server exposes five key tools for data exploration: listing namespaces and tables, retrieving table schemas, accessing table properties (including size and record count), and examining table partitions. Built with async support and comprehensive logging, it's particularly valuable for data engineers and analysts who need to explore and understand Iceberg data lakes through AI assistants without writing complex catalog interaction code."
motherduckdb,mcp-server-motherduck,91,28152,"This MCP server, developed by tdoehmen at MotherDuck, provides seamless integration with MotherDuck and local DuckDB databases. Built with Python, it offers tools for initializing database connections, retrieving schema information, and executing queries. The implementation stands out by supporting both cloud-based MotherDuck and local DuckDB instances, allowing flexible deployment options. It's particularly useful for data analysts, researchers, and developers who need to incorporate on-demand access to DuckDB-powered databases into their AI-assisted workflows, enabling dynamic querying and analysis of structured data within MCP-compatible environments like Claude Desktop."
motsuo373,mcp-servers-slack-extension,0,,"Extension of the Slack MCP Server that enables Claude to interact with Slack workspaces through a robust set of tools. Built on the @modelcontextprotocol/sdk, it provides functionality for listing channels, posting messages, managing threads, adding reactions, retrieving channel history, and accessing user profiles. The implementation uses a clean TypeScript architecture with proper error handling and input validation, making it ideal for AI assistants that need to engage with Slack conversations and workspace data."
mottibec,otelcol-mcp,28,,"This MCP server implementation provides a configuration interface for OpenTelemetry Collectors, allowing users to dynamically manage telemetry components through the Model Context Protocol. Built with TypeScript, it exposes a structured API for receivers, processors, and exporters with their complete configuration schemas, enabling AI assistants to help users construct valid OpenTelemetry configurations. The server maintains a comprehensive repository of component definitions extracted from the OpenTelemetry Collector Contrib repository, making it particularly valuable for DevOps teams and observability engineers who need assistance setting up complex telemetry pipelines without memorizing the extensive configuration options for each component."
mouhamadalmounayar,mcp-confluence,9,753,"This Confluence MCP server, developed by Al Mounayar Mouhamad, enables integration of Atlassian Confluence content with MCP-compatible applications. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for retrieving Confluence page and blog post content. The implementation focuses on simplifying access to Confluence data through a standardized MCP interface, with configurable authentication via environment variables. It's particularly useful for developers and AI models needing to incorporate Confluence documentation into their workflows, enabling use cases like knowledge base querying, content analysis, and information retrieval without dealing directly with Confluence's API complexities."
movibe,memory-bank-mcp,24,947,"Memory Bank MCP is a TypeScript-based server for managing project context across AI assistant sessions, using a modular architecture with support for multiple modes (architect, code, ask, debug, test). It provides tools for tracking progress, logging decisions, and maintaining an active context, with built-in support for file-based memory management and clinerules integration. Designed to work with various AI assistants and code editors, it enables persistent, structured project knowledge sharing through markdown-based memory bank files."
moyu6027,deepseek-mcp-server,0,,"This MCP server implementation provides a bridge to DeepSeek's R1 reasoning engine, enabling AI assistants to leverage advanced cognitive modeling and multi-step reasoning capabilities. Developed by moyu6027, it uses FastMCP and integrates with the Infini API to process queries and generate structured reasoning outputs. The server focuses on error handling and formatting responses for seamless integration with other AI models like DeepSeek V3 or Claude. It's particularly useful for applications requiring sophisticated logical analysis, critical thinking, and complex problem-solving across various domains."
mprokopov,ledger-mcp-server,3,,"The server implements three tools for ledger management:

list-accounts: Lists all accounts in the ledger

Takes ""year"" as a required argument
Returns formatted list of all available accounts
account-balance: Gets the balance for a specific account

Takes ""year"" and ""account"" as required arguments
Returns the current balance for the specified account
account-register: Shows the transaction register for an account

Takes ""year"" and ""account"" as required arguments
Returns detailed transaction history for the specified account"
mrexodia,user-feedback-mcp,20,,A simple MCP server implementation that allows users to provide feedback on AI responses. This server collects user feedback data and stores it for later analysis.
mrexodia,ida-pro-mcp,1388,,"A Python-based MCP implementation for IDA Pro, a disassembler and reverse engineering tool"
mrgnss,claudedesktopcommander,1,,"Desktop Commander MCP is a server that enables Claude Desktop to execute terminal commands and manage files on the user's computer. Developed by Eduard Ruzga, it provides tools for running commands with configurable timeouts, managing long-running processes, and performing filesystem operations including surgical text replacements for code editing. The implementation features security measures like command blacklisting and path validation, while supporting cross-platform operation on Windows, Mac, and Linux. Particularly valuable for developers who want to use Claude for coding tasks without switching to specialized IDEs like Cursor or Windsurf, it allows direct interaction with the local environment through natural language requests."
mr-house,bilibili-mcp-server,1,,"Bilibili-MCP-Server is a FastMCP-based server that enables AI assistants to search content on Bilibili, China's popular video-sharing platform. The implementation provides a general search tool that accepts keywords and returns structured results from the Bilibili API, allowing assistants to find videos, users, and other content without leaving the conversation interface. Built using the bilibili-api-python library, this server handles the authentication and request formatting required to interact with Bilibili's services, making it valuable for users who want to discover or reference Chinese video content through natural language queries."
mrjoshuak,godoc-mcp,40,,"This MCP server, developed by mrjoshuak, provides efficient access to Go documentation for AI assistants. Built in Go, it offers tools for retrieving package documentation, exploring project structures, and accessing symbol-specific information. The server leverages Go's built-in documentation system, allowing AI models to understand Go projects without processing entire source files. Key features include support for local and remote packages, caching for performance, and flexible querying options. By bridging AI assistants with Go's documentation ecosystem, this implementation significantly reduces token usage and enhances AI capabilities for tasks like code comprehension, API exploration, and Go development assistance. It is particularly useful for scenarios requiring in-depth understanding of Go codebases, efficient project navigation, and context-aware coding support."
mrnugget,tailscale-mcp,3,,"This MCP server enables Claude to query Tailscale status by running the Tailscale CLI on macOS. Developed as a small, focused implementation, it parses JSON output from Tailscale commands to provide structured data about connected devices, including IP addresses, hostnames, online status, and traffic statistics. The server exposes two main functions: getting overall Tailscale network status and retrieving detailed information for specific devices. Built with Python using FastMCP, it's particularly useful for monitoring and managing Tailscale VPN networks programmatically or through natural language interactions with Claude."
mrrobotke,django-migrations-mcp,3,,"This Django Migrations MCP service, developed by mrrobotke, provides a distributed solution for managing Django migrations across multiple services. Built with Python and leveraging the Model Context Protocol, it wraps Django's migration commands into MCP endpoints, enabling seamless integration with CI/CD pipelines. The implementation focuses on enhancing migration safety through additional validation checks, including sequential order verification, conflict detection, and dependency validation. By exposing migration operations through a standardized MCP interface, this service allows for sophisticated scenarios like automated migration management in microservices architectures, centralized migration control in multi-team environments, and streamlined database schema evolution across distributed systems. It's particularly valuable for large-scale Django projects requiring coordinated database changes across multiple services or deployment environments."
mrwyndham,pocketbase-mcp,31,,"PocketBase MCP Server provides a bridge between AI assistants and PocketBase databases, enabling direct interaction with collections, records, and user authentication through the Model Context Protocol. Built as an alternative to DynamicsEndpoints, it has been tested with the latest PocketBase version (26.1) and uses accurate type definitions from the JS-SDK. The server exposes tools for collection management, CRUD operations, user authentication, and database backups, making it valuable for applications that need to manipulate PocketBase data programmatically without leaving the AI assistant conversation."
msaelices,whatsapp-mcp-server,5,,"WhatsApp MCP Server provides a bridge to the WhatsApp Business API through GreenAPI, enabling AI assistants to send messages and manage WhatsApp groups. Built by Manuel Saelices, it offers tools for opening sessions, sending messages, retrieving chats, creating groups, and managing group participants. The server can be run locally or deployed as a Docker container, requiring GreenAPI credentials for authentication. This implementation is particularly valuable for workflows that need to interact with WhatsApp contacts and groups directly from within AI assistant conversations."
mshaaban0,contentful-delivery-mcp,4,2444,"This MCP server implementation provides a bridge to Contentful's Delivery API, enabling AI assistants to interact with content managed in Contentful. Developed by mshaaban0, it offers tools for querying entries using keywords or sentences. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on simplifying access to Contentful's content delivery capabilities, making it suitable for AI applications that need to retrieve and work with structured content from Contentful. The implementation is designed for easy setup within the Claude Desktop environment and is particularly useful for content-driven applications, dynamic websites, or any scenario requiring AI-assisted content management and delivery."
mshojaei77,reactmcp,129,,"ReActMCP Web Search integrates Exa API's web search capabilities into AI assistant frameworks through the Model Context Protocol. It provides both basic and advanced search tools with filtering options for domains, text requirements, and date ranges, returning markdown-formatted results with titles, URLs, publication dates, and content summaries. Built with Python using the FastMCP framework, this implementation is particularly valuable for workflows requiring real-time internet information within AI conversations, allowing users to access current data without leaving their conversation interface."
m-siles,branch-thinking,24,,"This branch thinking MCP server, developed collaboratively with Claude, provides tools for managing complex, multi-faceted thought processes. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers features like branch creation, navigation, cross-referencing, and insight generation. The implementation focuses on organizing and connecting related ideas across different lines of reasoning, making it accessible for AI models to explore multiple perspectives simultaneously. It's particularly useful for tasks like adversarial thinking, scientific inquiry, debate mapping, or strategic planning, enabling AI assistants to structure and analyze complex problems without losing track of interconnected thoughts and insights."
msparihar,mcp-server-firecrawl,2,,"This MCP server, developed by the Firecrawl MCP Server Contributors, provides web scraping and intelligent content searching capabilities using the Firecrawl API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for extracting structured data from websites and performing content searches with customizable options. The implementation focuses on delivering clean, formatted markdown output and supports features like ad blocking and custom scraping actions. By connecting AI models with web content, this server enables sophisticated data extraction and search scenarios, making it particularly useful for applications and AI assistants that require up-to-date information from the web or need to process large amounts of online content efficiently."
mstfe,mcp-google-tasks,4,,"This Google Tasks MCP server, developed as a demonstration of core MCP concepts, integrates with the Google Tasks API to provide structured task management capabilities. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers tools for creating, listing, deleting, updating, and toggling the completion status of tasks in the default Google Tasks list. The implementation stands out by providing a JSON-based representation of tasks and supporting a range of task operations through well-defined tools. It's particularly useful for developers and teams looking to incorporate task management functionalities into AI-assisted workflows, enabling seamless integration of Google Tasks with language models or other applications via the Model Context Protocol."
mtane0412,ghost-mcp-server,2,425,"This MCP server, developed by mtane0412, provides a robust interface to Ghost CMS's Admin API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers comprehensive tools for managing posts, pages, tags, authors, members, and images within a Ghost blog. The implementation focuses on providing programmatic access to key Ghost features, including content creation, retrieval, updating, and deletion. It's particularly useful for developers and content managers looking to automate Ghost CMS operations, enabling use cases such as bulk content management, custom publishing workflows, and integration with external systems without navigating the Ghost admin interface."
mtane0412,perspective-mcp-server,0,432,"This MCP server, developed by mtane0412, provides integration with the Perspective API for content moderation and toxicity analysis. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for analyzing text toxicity, generating score suggestions, and supporting multiple attributes like TOXICITY, SEVERE_TOXICITY, IDENTITY_ATTACK, INSULT, PROFANITY, and THREAT. The implementation focuses on providing a standardized interface for content moderation across multiple languages, enabling use cases such as automated comment filtering, user-generated content analysis, and real-time toxicity detection in online platforms. By connecting AI models with content moderation systems, this server allows for sophisticated text analysis scenarios, enhancing online safety and user experience in digital environments."
mtane0412,twitch-mcp-server,1,952,"This MCP server, developed by mtane0412, provides a comprehensive interface to the Twitch API using the Helix and GraphQL endpoints. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for retrieving channel information, stream details, game data, user profiles, clips, chat settings, and video comments. The implementation focuses on providing a wide range of Twitch-related functionalities through a unified MCP interface, enabling easy integration with AI assistants and other applications. It's particularly useful for developers building Twitch-related tools, bots, or analytics platforms, enabling use cases such as stream monitoring, content discovery, and audience analysis without directly navigating Twitch's complex API ecosystem."
mubarakhalketbi,game-asset-mcp,43,,"Game Asset Generator MCP connects AI assistants to Hugging Face Spaces for creating 2D and 3D game assets from text prompts. It leverages three AI models: Flux-2D-Game-Assets-LoRA for pixel art sprites, Flux-Game-Assets-LoRA-v2 for 3D-ready images, and InstantMesh for converting images to 3D models. Built with Node.js, the server exposes these capabilities through a clean interface that saves generated assets locally, making it particularly valuable for game developers who want to rapidly prototype visual assets without leaving their AI assistant workflow."
mufonix,airtable-mcp,1,,"Airtable MCP provides a bridge between AI code editors and Airtable databases, enabling direct access to tables, records, and schemas through a secure interface. Developed by Rashid Azarang, this Python-based server exposes Airtable operations as MCP tools, allowing AI agents to list bases, query tables, create/update/delete records, and manage data relationships using the user's personal access token. The implementation includes both a Python server component and JavaScript utilities for command-line operations, making it particularly valuable for developers who need to integrate Airtable data management capabilities into AI-assisted workflows without leaving their code editor."
muka,web-search-mcp,0,,"This web search MCP server, developed by muka, provides a standardized interface for performing web searches using the Serper API. Built with TypeScript and Express, it exposes an endpoint for executing searches and returning results in a consistent format. The implementation uses environment variables for API key management and offers Docker containerization for easy deployment. By abstracting web search functionality into an MCP interface, it enables AI systems to efficiently retrieve and process web content. This server is particularly useful for applications requiring up-to-date information from the web, such as research assistants, fact-checking tools, or content aggregators."
yuchenssr,multi-ai-advisor-mcp,25,,"Multi-model advisor server that queries multiple Ollama models in parallel to provide diverse perspectives on user queries. Built with TypeScript and the MCP protocol, it leverages three different models (Gemma, Llama, and Deepseek) with distinct system prompts focused on empathy, logic, and creativity respectively. Particularly valuable for users who want to compare different AI perspectives and get more balanced insights without managing multiple model connections."
mushroomfleet,deeplucid3d-mcp,9,,"DeepLucid3D is an MCP server implementing the Unified Cognitive Processing Framework (UCPF) for advanced cognitive analysis and creative problem-solving. It combines recursive self-awareness with dimensional knowledge categorization across three tools: analyze_problem for structured cognitive assessment, creative_exploration for generating novel perspectives, and manage_state for maintaining context between sessions. The implementation maps knowledge across awareness, content, and accessibility dimensions, enabling users to systematically explore complex problems through multiple cognitive states and knowledge categories, making it particularly valuable for tackling ambiguous problems requiring flexible thinking and conceptual connections."
mushroomfleet,transcriptiontools-mcp,9,,"TranscriptionTools MCP server provides tools for processing and enhancing transcribed text through three main functions: repairing transcription errors with high confidence, formatting timestamped transcripts into natural text, and generating intelligent summaries using ACE cognitive methodology. Built by MushroomFleet, it implements the Model Context Protocol to enable AI assistants to process text files or direct input, with features like automatic paragraph detection based on time gaps, error correction with confidence scoring, and customizable summary constraints. The server can be run locally using stdio or deployed as a Docker container, making it ideal for workflows involving speech-to-text output cleanup, podcast transcription formatting, or creating concise summaries of lengthy transcribed content."
mushroomfleet,uno-mcp,0,,"UNO-MCP is a text enhancement server that analyzes and expands narrative content using specialized techniques like Golden Shadow Enhancement, Environmental Expansion, and Prose Smoothing. The server exposes three main tools: text analysis that generates comprehensive reports with insights about narrative structure and style, full text enhancement that doubles content length while maintaining coherence, and custom enhancement that allows selective application of specific techniques. Built with TypeScript and the MCP SDK, it's particularly useful for writers looking to expand short-form content or improve narrative richness without manual rewriting."
mutker,mcp-todo-server,1,,"MCP server for managing TODO.md and CHANGELOG.md files, developed by mutker. It offers precise, line-based editing and reading of file contents, supports multiple character encodings, and provides atomic operations across files. The server implements tools for task management, version tracking, and changelog generation, making it useful for projects requiring structured task and release management."
mxiris-reverse-engineering,ida-mcp-server,409,3668,"A Model Context Protocol server for programmatically reading and searching IDA databases via Large Language Models. Developed by Mx-Iris, this early-stage project aims to provide tools for reverse engineering and binary analysis automation, with a focus on enabling LLM interaction with IDA Pro's database. The server is currently under active development and will eventually support a more streamlined workflow for analyzing binary files."
log6262635,mcp-mysql,4,,"A MySQL database service implementation for the Model Context Protocol, providing a standardized interface for database operations. Enables programmatic database interactions through a structured Express.js server with MySQL2 connectivity, supporting core database management tasks like connection handling, query execution, and resource management."
mystique920,anthropic-prompt-mcp,1,,"An MCP server providing tools to interact with Anthropic's experimental prompt engineering APIs. Built with TypeScript and Axios, it exposes three key endpoints: generate_prompt for creating prompts based on task descriptions, improve_prompt for enhancing existing prompts with feedback, and templatize_prompt for converting concrete examples into reusable templates. The implementation handles API authentication through environment variables, making it compatible with both standalone usage and integration as a child process within LibreChat. This server enables AI assistants to leverage Anthropic's specialized prompt engineering capabilities for more effective prompt creation and refinement."
mytechnotalent,rag_mcp,1,,"RAG_MCP is a PDF-based Retrieval Augmented Generation server that enables AI assistants to search and extract information from PDF documents. It uses PyMuPDF for text extraction with OCR fallback via pytesseract, and implements semantic search through FAISS vector indexing and the all-MiniLM-L6-v2 sentence transformer model. The server exposes two main tools: one for rebuilding the document index from PDFs stored in a local directory, and another for querying the indexed content with natural language questions. This implementation is particularly useful for scenarios requiring AI assistants to reference specific information from technical documentation, research papers, or other PDF-based knowledge sources."
mz462,mcppaylocity,0,,"The mcpPaylocity server provides a bridge between Claude and Paylocity's HR and payroll API, enabling access to employee data, payroll information, and other HR resources. Built by MJ Zou, it securely handles authentication with Paylocity using client credentials and manages company-specific identifiers through environment variables. The implementation is containerized with Docker for easy deployment and requires minimal configuration through the smithery.yaml file, which defines the necessary Paylocity credentials. This server is particularly valuable for HR professionals and managers who need to access employee information directly within Claude conversations without switching contexts to the Paylocity platform."
mzxrai,mcp-openai,40,1899,"This MCP server, developed by mzxrai, enables AI assistants like Claude to seamlessly interact with OpenAI's language models directly from the Claude Desktop app. It supports multiple models including GPT-4 and provides a simple message passing interface for tasks like text generation and completion. The server integrates with the OpenAI API and handles authentication via API key. By bridging Claude's capabilities with OpenAI's models, this implementation allows users to leverage multiple AI systems in a single conversation. It is particularly useful for comparing model outputs, accessing specialized capabilities, or supplementing Claude's knowledge in areas where OpenAI models may excel."
mzxrai,mcp-webresearch,227,23923,"This MCP server, developed by mzxrai, enables AI assistants like Claude to perform real-time web research. It integrates Google search, webpage content extraction, and screenshot capture capabilities. The server maintains a research session tracking visited pages, search queries, and extracted content. It is designed for seamless integration with the Claude Desktop app on macOS and Windows. By bridging AI capabilities with live web data, this implementation empowers more informed and up-to-date conversations. It is particularly useful for scenarios requiring fact-checking, gathering current information on topics, or conducting multi-source research in AI-assisted writing, analysis, and decision-making tasks."
n0119566,mcp-store,0,104,"Store MCP server provides a standardized interface for managing customer and order data through a REST API. Built with TypeScript and the MCP protocol, it exposes tools for retrieving customer information, looking up orders by customer ID, and searching customers by name. The implementation is designed for e-commerce applications that need to access customer and order records through AI assistants."
n0safe,directus-mcp,4,,"DirectusMCP provides a bridge between Claude and Directus CMS, enabling AI assistants to perform CRUD operations on Directus collections through the Model Context Protocol. Built with TypeScript, it offers tools for creating, updating, and deleting items in collections, as well as resources for browsing collection items and accessing schema information. The implementation uses the Directus REST API with token authentication, making it valuable for content management workflows where AI assistants need to interact with structured data in a headless CMS without requiring users to switch contexts."
n0safe,grafana-mcp,0,,"Grafana MCP Server provides a bridge between AI assistants and Grafana monitoring dashboards, enabling access to visualization data through a standardized interface. Built with TypeScript, it exposes Grafana's core functionality including dashboards, folders, and datasources as both MCP tools and resources with consistent URI patterns. The server authenticates with Grafana using API keys and transforms JSON responses into structured content, making it valuable for monitoring workflows, data analysis, and troubleshooting infrastructure issues directly within AI conversations."
mito001,mcp-server-n8n,0,,"MCP-SERVER-N8N provides a WebSocket-based server that enables AI assistants to execute n8n workflows directly. The implementation creates a bridge between the MCP protocol and n8n's workflow engine, allowing clients to send workflow definitions and input data for execution in a sandboxed environment using VM2. Built with Node.js, it features a tool management system that can be extended beyond the included n8n workflow tool, automatic port discovery, and JSON-RPC 2.0 compliant messaging. This server is particularly valuable for automation scenarios where AI assistants need to trigger complex workflows without leaving their conversation context."
nacal,mcp-minecraft-remote,1,185,"Minecraft Remote Control enables AI-assisted interaction with Minecraft servers through a comprehensive set of tools for navigation, world manipulation, inventory management, and entity interaction. Built from scratch to support remote server connections, this implementation provides a flexible interface for controlling a Minecraft bot via natural language commands. Particularly useful for automating gameplay, exploration, and complex in-game tasks through an AI assistant."
nacgarg,bazel-mcp-server,2,,"This MCP server provides a bridge between AI agents and the Bazel build system, enabling interaction with Bazel workspaces through a standardized protocol. It implements six tools for building targets, querying dependencies, running tests, listing available targets, fetching external dependencies, and changing workspace paths at runtime. The server includes robust security features to prevent command injection, supports multiple configuration methods (CLI arguments, environment variables, and config files), and is designed to work seamlessly with Cursor and Claude Desktop, making it particularly useful when AI environments have misconfigured shells that prevent direct Bazel usage."
nachoal,perplexity-mcp,8,,"This MCP server implementation provides web search functionality using the Perplexity API. It allows AI assistants to search the web and retrieve up-to-date information, with features like time-based filtering and comprehensive result summaries. The server includes tools for web searching and prompt generation, making it useful for applications requiring real-time web data access within MCP-compatible workflows."
nahmanmate,better-auth-mcp-server,16,,"This MCP server, developed by an unknown author, provides integration with the Better-Auth authentication system. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for setting up and maintaining Better-Auth implementations. The server focuses on simplifying the authentication process for AI agents and applications, with features likely including user management, token handling, and secure credential storage. It's particularly useful for developers looking to incorporate robust authentication into their AI-powered systems, enabling use cases such as secure API access, user identity verification, and access control without directly dealing with the complexities of authentication protocols."
nahmanmate,code-research-mcp-server,30,,"This MCP server, developed by nahmanmate, provides a comprehensive toolkit for accessing programming resources across multiple platforms. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for searching Stack Overflow, MDN Web Docs, GitHub, npm, and PyPI. The implementation focuses on efficient caching and parallel execution of searches, with features like language-specific filtering and detailed package information retrieval. It's particularly useful for AI assistants and applications needing up-to-date programming knowledge, enabling use cases such as code example lookup, documentation retrieval, and package selection without directly dealing with the complexities of individual platform APIs."
nahmanmate,postgresql-mcp-server,10,,"This PostgreSQL MCP server, developed by an unnamed author, provides a comprehensive interface for managing and analyzing PostgreSQL databases. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for database analysis, setup guidance, and debugging. The implementation focuses on performance optimization, security assessment, and troubleshooting, with features like configuration analysis and lock conflict resolution. It's particularly useful for database administrators and developers seeking to streamline PostgreSQL management tasks, enabling use cases such as automated performance tuning, secure database setup, and efficient issue diagnosis without direct interaction with complex PostgreSQL commands."
nailuogg,aliyun-mcp-server,2,151,"The Aliyun MCP Server provides tools for interacting with Alibaba Cloud services through Claude. It enables querying SLS (Simple Log Service) logs with support for filtering by project, logstore, and custom query parameters. The server is built using the Model Context Protocol SDK and communicates via standard input/output streams. It's designed to be used with Claude Desktop or Cline in VSCode, requiring only Aliyun credentials to be configured. Future plans include adding support for managing ECS instances and deploying serverless functions."
nailuogg,anki-mcp-server,14,,"This MCP server implementation provides integration with Anki flashcard software through AnkiConnect. Developed by nailuoGG, it offers tools for managing decks, creating and modifying notes, and performing searches. Built with TypeScript and Jest for testing, the server focuses on enabling AI assistants to interact with Anki for spaced repetition learning. It is particularly useful for applications that need to automate flashcard creation, organize study materials, or integrate spaced repetition into their workflows."
nakamurau1,tts-mcp,1,636,"A text-to-speech server and command-line tool that integrates with Claude Desktop and other MCP-compatible clients, enabling high-quality voice generation using OpenAI's TTS API. The implementation supports multiple voice characters (alloy, nova, echo, etc.), various output formats (MP3, WAV, OPUS, AAC), and customizable speech parameters including speed and additional instructions. It exposes a 'text-to-speech' tool that converts text to speech and plays it, making it particularly useful for reading content aloud during AI assistant interactions without requiring users to leave their conversation interface."
nakaokarei,swift-mcp-gui,15,,"Swift MCP GUI Server enables AI assistants to control macOS through mouse movements, clicks, and scrolling via the SwiftAutoGUI library. Built by Nakaoka Rei, this server exposes tools for precise cursor positioning, mouse button clicks, and directional scrolling, allowing MCP clients to programmatically interact with the macOS interface. The implementation runs as a native Swift application requiring macOS 15.0+ and Swift 6.0+, making it particularly valuable for automation workflows, GUI testing, or remote control scenarios where programmatic manipulation of the mouse and keyboard is needed."
yoda-digital,mcp-gitlab-server,9,3128,"GitLab MCP Server provides a robust integration with the GitLab API, enabling developers to interact with repositories, issues, merge requests, and project events through natural language commands. Created by Ion (Nalyk) Calmis, this server supports both stdio and Server-Sent Events (SSE) transports and offers flexible configuration for GitLab-based workflow automation and project management tasks."
namin,dafny-mcp,2,,"This Dafny Verifier MCP server, developed by Nada Amin, provides a Python-based interface for AI assistants to verify Dafny code. Built using the FastMCP framework and integrating with the local Dafny installation, it offers a tool for code verification with customizable timeout settings. The implementation focuses on efficient code analysis, making it easier for AI models to check the correctness of Dafny programs. It's particularly useful for enhancing AI-driven software development workflows, enabling automated verification of formal specifications and proofs without requiring deep knowledge of Dafny's command-line interface."
namin,livecode-mcp,0,,"This MCP server implementation, developed for io.livecode.ch, enables running code snippets from GitHub repositories through a standardized interface. Built with Python using the FastMCP framework, it provides a single 'run' tool that executes code on io.livecode.ch's backend. The implementation focuses on simplicity, with minimal setup required and clear error handling. It's particularly useful for integrating live code execution capabilities into AI assistants or educational platforms, allowing models to demonstrate concepts with runnable examples from various programming languages and frameworks without needing to manage local development environments."
namrata-ami,mcp_twitter_connect,0,,"The MCP Twitter Connect server provides a bridge to the Twitter API, allowing AI assistants to retrieve recent tweets from specified users. Built with Node.js and Express, it offers two endpoints: a standard REST endpoint (/tweets/:username) and an MCP-compliant endpoint (/mcp) that handles structured requests with proper versioning and error handling. The implementation uses Twitter's v2 API with bearer token authentication to search for recent tweets from a given username. This server is particularly useful for workflows requiring access to real-time Twitter content within AI assistant conversations without requiring direct Twitter API access."
nanahiryu,notion-mcp-server,0,41678,"A Notion integration server that enables AI assistants to interact with Notion's API through the MCP standard. Built by Kosuke Suenaga, this implementation provides tools for managing blocks, pages, databases, users, and comments in Notion workspaces. The server handles authentication via Notion API tokens and exposes a comprehensive set of functions including creating database items, appending block children, updating page properties, and searching content - making it valuable for automating document management, knowledge base maintenance, and collaborative workflows directly from AI conversations."
madebynando,mcp-postgres-server,0,,"This MCP server implementation provides a read-only interface to PostgreSQL databases, enabling language models to explore database schemas and execute queries. Developed by Nando, it utilizes the Model Context Protocol SDK and pg library to offer tools for listing tables, describing table schemas, and running SQL queries. The server is designed for use cases requiring database inspection and data retrieval, such as generating reports, analyzing data trends, or integrating database information into AI-assisted workflows."
HEAD,FINAL,0,,"PyMOL-Claude Integration enables AI assistants to visualize and manipulate molecular structures in PyMOL through a bidirectional communication bridge. Developed by Andre Watson, it implements both a PyMOL plugin that starts an MCP-compatible server and a standalone MCP server script that handles JSON-RPC requests from Claude. The integration allows Claude to execute PyMOL commands, retrieve structural information, edit PDB files, and manage molecular visualizations directly within conversations, making it particularly valuable for structural biology workflows, drug design, and protein engineering tasks that benefit from interactive molecular visualization."
narumiruna,yfinance-mcp,4,6982,"Yahoo Finance MCP Server provides a bridge to Yahoo Finance's financial data API through yfinance, enabling AI assistants to retrieve stock information, news, and market data. The implementation offers seven specialized tools for operations like getting ticker information, searching quotes and news, and retrieving market, sector, and industry data. Built with Python using FastMCP, it formats responses as structured text with clear section demarcations for complex data like sector information. This server is particularly valuable for financial analysis, investment research, and market monitoring without requiring direct API integration with Yahoo Finance."
programcomputer,nasa-mcp-server,17,498,"NASA MCP Server provides access to a wide range of NASA and JPL APIs through a unified interface, enabling AI assistants to retrieve astronomy images, satellite data, space weather information, Mars rover photos, and more. Built with TypeScript using the Model Context Protocol SDK, it handles authentication with NASA API keys, formats responses appropriately, and registers resources for persistent access. The implementation includes handlers for 13 NASA APIs including APOD, EPIC, NEO, GIBS, and DONKI, plus 3 JPL APIs for asteroid and fireball data, making it valuable for educational, research, and space exploration workflows."
nash-app,nash-mcp,6,,"Nash MCP is a server implementation that provides AI assistants with a suite of tools for executing Python code, fetching web content, automating browser interactions, managing secrets, and creating reusable tasks. Built with Python and FastMCP, it features a process manager for safe subprocess handling, browser automation via Playwright, and a session-based file system for code persistence. This implementation is particularly valuable for users who need to execute code, scrape websites, automate web tasks, or create reusable workflows directly through their AI assistant without switching contexts."
nathannj,mcp-notes,1,,"A server for managing markdown notes in a specified directory, providing tools to create, read, update and list notes with proper file management and timestamp tracking. Built with FastMCP and Python, it features automatic directory creation, UTF-8 encoding support, and detailed logging - making it valuable for users who want to maintain a structured collection of markdown notes through their AI assistant interface."
nathanonn,mcp-url-fetcher,1,,"MCP-URL-Fetcher provides AI assistants with the ability to fetch and process content from URLs in various formats including HTML, JSON, Markdown, and plain text. The server offers specialized tools for each format type, with features like HTML text extraction, JSON path navigation, and automatic content type detection. It maintains a history of recently fetched URLs and includes helpful prompts for common web fetching scenarios, making it particularly useful for web research, API data retrieval, and content analysis tasks without leaving the conversation interface."
kyrietangsheng,mcp-server-nationalparks,9,,"The National Parks MCP Server provides real-time data from the National Park Service API, offering tools to search parks by location or activities, retrieve detailed park information, and access current alerts and closures. Built by KyrieTangSheng, it uses TypeScript and the Model Context Protocol SDK to format responses optimized for AI consumption, with features like state code validation and pagination support. The server requires an NPS API key for authentication and is designed for integration with Claude Desktop, making it valuable for travel planning, outdoor activity research, and monitoring park conditions without leaving the conversation interface."
jackkuo666,weather-mcp-server,0,,"Weather MCP Server provides real-time weather information by integrating with the National Weather Service (NWS) API. Built with Python using the FastMCP framework, it offers two main tools: retrieving weather alerts for any US state and obtaining detailed forecasts for specific locations using latitude and longitude coordinates. The server includes robust error handling and logging capabilities, making it reliable for applications that need up-to-date weather data. It can be run standalone or integrated with Cline, offering a straightforward way to incorporate weather information into AI assistant workflows for travel planning, event scheduling, or safety monitoring."
nattyraz,youtube-mcp,0,,"YouTube MCP Server provides tools for extracting and transforming YouTube video content, enabling AI assistants to fetch video metadata, captions in multiple languages, and convert transcripts to markdown with customizable templates. Built with TypeScript and the YouTube Data API, it supports both API key and OAuth2 authentication methods for accessing public and private videos. The server includes search functionality within captions, chapter extraction, and three built-in markdown templates (basic, detailed, and search), making it particularly useful for content analysis, research, and creating readable transcripts from video content."
pfldy2850,py-mcp-naver,78,,"Naver MCP Server provides a comprehensive interface to Naver's OpenAPI services through the Model Context Protocol. This implementation exposes 14 different tools for interacting with Naver's search capabilities, including blog, news, book, image, and shopping searches, as well as specialized functions like adult content checking and spelling correction. The server requires Naver API credentials to function and is built using FastMCP, making it easy to deploy and integrate with AI assistants. Particularly valuable for applications requiring Korean-language search capabilities and access to Naver's extensive content ecosystem."
navisbio,ctgov_mcp,9,14784,"This MCP server implementation provides an interface to the AACT (Aggregated Analysis of Clinical Trials) database, enabling AI assistants to query and analyze clinical trial data. Developed as an open-source project, it leverages Python and the psycopg2 library to connect to the PostgreSQL-based AACT database. The server offers functions for executing custom SQL queries, retrieving study details, and searching across various trial parameters. Built with asyncio support and following MCP standards, it allows for efficient, concurrent database operations. This implementation is particularly useful for researchers, healthcare professionals, and data scientists who want to integrate large-scale clinical trial data analysis into their AI-assisted workflows, facilitating tasks such as identifying relevant studies, analyzing trial designs, or tracking drug development trends."
nayshins,mcp-server-ccxt,36,,"This cryptocurrency market data MCP server, developed by an unnamed creator, integrates with major exchanges through the CCXT library to provide real-time and historical crypto data. Built with Python using the Model Context Protocol SDK, it offers tools for fetching current prices, market summaries, trading volumes, and historical OHLCV data across multiple exchanges. The server implements standardized data formatting and robust error handling for exchange connectivity issues. By abstracting the complexities of crypto API interactions, it enables AI systems to easily analyze market trends and access detailed trading information. This implementation is particularly valuable for applications requiring programmatic access to crypto market data, facilitating use cases such as algorithmic trading, portfolio tracking, and market analysis across various cryptocurrencies and exchanges."
nazar256,user-prompt-mcp,1,,"User Prompt MCP provides a bridge between Cursor and users by enabling the AI to request additional input during generation without ending the process. Developed by nazar256, this Go implementation uses the mark3labs/mcp-go library and offers a cross-platform GUI solution that works on both Linux (using zenity) and macOS (using osascript). The server handles timeout scenarios, presents input prompts in dialog boxes with text wrapping, and communicates with Cursor via stdio transport, making it ideal for creating more interactive AI experiences where the model needs clarification or additional information mid-generation."
nazruden,clickup-mcp-server,6,,"This MCP server, developed by Nazruden, provides integration with the ClickUp project management platform. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with ClickUp's task management, team collaboration, and workflow automation features. The implementation focuses on providing a standardized interface for ClickUp operations, allowing AI agents to create and update tasks, manage projects, and retrieve workspace data. It's particularly useful for teams using ClickUp who want to integrate their project management workflows with AI assistants, enabling use cases such as automated task creation, progress tracking, and project analytics without directly interacting with ClickUp's web interface."
nbbaier,mcp-turso,4,548,"MCP-Turso provides a server for interacting with Turso-hosted LibSQL databases, enabling AI models to execute SQL queries against SQLite databases in the cloud. Built by Nico Baier, this implementation leverages the @libsql/client library to connect to Turso databases and the Model Context Protocol SDK to expose database operations through a standardized interface. It's particularly useful for workflows requiring direct database access within AI conversations, such as data analysis, content management, or application development that utilizes Turso's distributed SQLite database service."
nbiish,mcp-calc-tools,1,,"This MCP server implementation provides advanced calculus tools for MCP, developed by Nbiish Justin Kenwabikise. It integrates with libraries like NumPy, SciPy, and SymPy to offer powerful mathematical capabilities. The server is designed for use cases requiring complex calculations or mathematical analysis within MCP-enabled applications."
nickgnd,tmux-mcp,15,219,"A Tmux MCP server that allows Claude to interact with Tmux sessions, enabling it to create, manage, and interact with terminal sessions."
ndchikin,reference-mcp,1,2196,"CiteAssist MCP server provides BibTeX-formatted citation data from CiteAs and Google Scholar, enhancing research workflows by integrating citation retrieval directly into applications. Developed by Nikolay Chikin, it offers two main tools: 'get_citeas_data' for retrieving citations from CiteAs using DOIs, URLs, or keywords, and 'get_scholar_data' for searching Google Scholar with customizable result limits. The server can be installed via Smithery or manually configured for Claude Desktop on macOS and Windows, making it ideal for researchers and writers who need to generate properly formatted citations without leaving their conversation interface."
nealmalhotra,wordware-mcp-server,0,,"Wordware MCP Server provides a bridge between AI assistants and Wordware's API services, enabling creation of Notion pages, Google search, Wikipedia lookups, and Google News queries through a standardized interface. Built with FastMCP and asynchronous processing, it features both synchronous and asynchronous execution modes, robust error handling, and detailed logging. The implementation is particularly valuable for users who need to create and manage Notion documentation, perform web research, or monitor news directly through their AI assistant conversations."
nearai,near-mcp,13,,"NEAR MCP provides a secure interface for AI models to interact with the NEAR blockchain through the Model Context Protocol. Developed by Near AI, it enables models to manage NEAR accounts, check balances, sign transactions, create new accounts, and handle access keys. The implementation runs locally, storing account private keys in an unencrypted keystore, and is particularly valuable for workflows requiring blockchain interaction without leaving the conversation interface."
nefino,mcp-nefino,0,,"This MCP server implementation provides a bridge to the Nefino API, enabling AI assistants to access news and information about renewable energy projects in Germany. Developed by Nefino, it offers tools for retrieving and filtering news items based on location, date range, and specific renewable energy topics. The server is built using Python and integrates with the Model Context Protocol, focusing on secure authentication and robust input validation. It's particularly useful for AI applications requiring up-to-date information on German renewable energy developments, supporting use cases like market analysis, policy tracking, or environmental impact assessments. The implementation is designed for easy setup within the Claude Desktop environment and includes comprehensive error handling for reliable operation."
negokaz,excel-mcp-server,96,1637,"This Excel MCP server, developed by Kazuki Negoro, provides a bridge between Model Context Protocol and Microsoft Excel files. It enables reading and writing of spreadsheet data, specifically focusing on text values in xlsx format files. The implementation is designed for Node.js environments and leverages libraries like exceljs for Excel file manipulation. It's particularly useful for scenarios where AI assistants or other MCP-compatible clients need to interact with structured data stored in Excel spreadsheets, such as data analysis, report generation, or automated spreadsheet updates based on AI-driven insights."
neka-nat,freecad-mcp,81,7532,"FreeCAD MCP enables AI-driven CAD modeling by providing a remote procedure call (RPC) server that allows Claude Desktop to control FreeCAD programmatically. Developed by neka-nat, this implementation supports operations like creating documents, inserting parts from libraries, editing objects, and executing arbitrary Python code, making it powerful for generative design and automated 3D modeling workflows."
nekzus,mcp-server,0,9727,"@nekzus/mcp-server is a utility server implementation providing extensible tools for development and testing purposes. It features a modular architecture that registers tools dynamically using Zod schema validation, with tools for datetime handling, card operations, and schema conversion. The server runs on stdio transport, making it compatible with Claude Desktop, and includes robust error handling and graceful termination. Built with TypeScript and following modern development practices (semantic versioning, CI/CD pipeline), it's particularly valuable for developers who need standardized utility functions accessible through the Model Context Protocol."
neo4j-contrib,mcp-neo4j,218,,"This Neo4j MCP server, developed by neo4j-contrib, enables AI assistants to interact with Neo4j graph databases using natural language. It provides tools for converting natural language to Cypher queries, storing knowledge graph memories in Neo4j, and offering a file-based alternative for memory storage. Built for use with Claude Desktop and other MCP clients, it leverages Neo4j's graph capabilities to enhance AI interactions with structured data. The server allows AI systems to query, analyze, and manipulate graph data through a standardized MCP interface. It is particularly useful for scenarios requiring graph-based knowledge representation, complex relationship analysis, and persistent memory storage in AI applications working with Neo4j databases."
ujjalcal,mcp,0,,"Neo4j MCP Server provides a bridge between AI assistants and Neo4j graph databases, enabling complex graph data exploration and analysis through the Model Context Protocol. Built with Python using FastMCP, it exposes database schema information as resources and offers tools to execute Cypher queries against Neo4j databases. The implementation includes predefined prompt templates for common graph analysis tasks like relationship analysis, path discovery, and community detection, making it particularly valuable for workflows requiring graph-based data exploration, pattern recognition, and knowledge graph navigation."
neobundy,cwkcursorpippamcp,2,,"Pippa Memory MCP Tool provides a lightweight memory system for Cursor, enabling AI assistants to store and retrieve contextual information across sessions. It implements a vector database using ChromaDB for semantic search capabilities, with OpenAI embeddings for efficient similarity matching. The tool features both a command-line interface through the MCP protocol and an optional Streamlit web interface for memory management. Designed with a focus on simplicity and performance, it helps maintain conversation context without the overhead of full-featured memory frameworks, making it particularly valuable for development workflows that benefit from persistent assistant memory."
neoforge-dev,mcp-browser,1,,"MCP Browser provides a headless browser interface for AI agents to test and analyze frontend applications in real browser environments. Built with Playwright and FastAPI, it enables AI to capture screenshots, extract DOM structures, analyze CSS properties, test accessibility, and verify responsive designs across different viewports. The implementation features a WebSocket event subscription system for real-time browser events, Docker containerization with security controls (AppArmor profiles, non-root execution), and one-command deployment for Mac Mini setups. Particularly valuable for AI coding agents that need to identify visual rendering issues and frontend problems without excessive resource usage."
neondatabase-labs,mcp-server-neon,182,,"This MCP server, developed by Neon, provides a bridge between AI assistants and Neon's serverless Postgres database platform. Built for use with Claude Desktop, it offers tools for managing Neon projects, branches, and databases through natural language interactions. The server leverages Neon's Management API, enabling AI models to perform operations like creating projects, running SQL queries, and executing database migrations. Key features include a two-step migration process for safe schema changes and support for various database management tasks. By integrating AI capabilities with Neon's cloud-native database services, this implementation enhances database administration, schema design, and query execution through natural language. It is particularly useful for scenarios requiring dynamic database management, collaborative data modeling, and AI-assisted database operations in a serverless Postgres environment."
neosapience,typecast-api-mcp-server-sample,1,,"Typecast API MCP Server provides a bridge to the Typecast AI text-to-speech service, enabling AI assistants to convert text into natural-sounding speech with various voice options and emotional presets. Developed by Neosapience, this Python implementation offers tools for retrieving available voices, generating speech from text with customizable parameters like emotion, volume, and playback speed, and playing the resulting audio files directly. The server supports both stdio and SSE transport methods, making it flexible for different integration scenarios. It's particularly valuable for applications requiring high-quality voice synthesis with emotional expression, such as content creation, accessibility tools, and interactive voice applications."
netwrix,mcp-server-naa,1,,"This MCP server for Netwrix Access Analyzer enables AI assistants to analyze file system permissions and access data stored in SQL Server databases. Developed by Netwrix Corporation, it provides tools for discovering sensitive data locations, identifying user access rights, determining permission sources, and detecting shadow access paths. The implementation includes database connection management, schema exploration capabilities, and specialized queries for access analysis. It's particularly valuable for security administrators and compliance officers who need to audit file system permissions, identify excessive access rights, or investigate potential security vulnerabilities in enterprise environments."
newaitees,ollama-mcp-server,1,,"Ollama-MCP-server provides a bridge between AI assistants and Ollama, enabling interaction with locally-hosted language models. The server exposes tools for task decomposition and result evaluation through a standardized interface, with configurable model selection (defaulting to deepseek-r1:14b). Built with Python 3.13 and the MCP protocol, it handles requests asynchronously and supports structured prompting templates. This implementation is particularly valuable for users who want to leverage local LLMs for complex reasoning tasks without relying on cloud-based AI services."
newaitees,taskmateai,0,,"TaskMateAI is an AI-powered task management system built with FastAPI and LangChain that enables dynamic task creation, tracking, and organization across multiple agents and projects. The implementation supports flexible task operations like generating unique task IDs, managing subtasks, and storing tasks in JSON files with robust error handling and extensible agent/project management capabilities."
newbeb,clipboard-mcp,4,,"This MCP server implementation provides access to the MacOS clipboard, allowing AI assistants to read from and write to the system clipboard. Developed by Brian Lloyd-Newberry, it uses OSAScript to interact with the clipboard, offering a simple interface for clipboard operations. The server is designed for use cases requiring AI assistants to manipulate clipboard content on MacOS systems, such as text processing or data transfer tasks."
newbeb,stealth-browser-mcp,9,,"This MCP server provides stealth browser capabilities using Playwright with anti-detection techniques. It allows clients to navigate websites and take screenshots while evading common bot detection systems. The server uses puppeteer-extra-plugin-stealth to modify browser fingerprints, handle WebGL, canvas, font, and plugin fingerprinting, making it useful for web scraping, automated testing, or accessing content that may be restricted to regular browsers."
newbienl,enhanced-google-maps-mcp,0,,"This Enhanced Google Maps MCP server provides a streamlined interface for accessing Google Maps services through a Node.js Express application. It integrates with the Google Maps JavaScript API to offer functionalities such as geocoding, place searching, and route planning. The server abstracts the complexities of direct API interactions, allowing AI systems to easily incorporate location-based data and services into their workflows. By exposing endpoints for places and directions, it enables applications to find nearby points of interest and calculate optimal routes between locations. This implementation is particularly useful for developing location-aware applications, trip planning tools, or services that require real-time geographical data and analysis."
newtype-01,obsidian-mcp,16,,"Obsidian MCP Server provides a bridge between Claude and Obsidian note-taking application, enabling AI assistants to interact with markdown notes directly through conversation. The implementation offers tools for listing, reading, creating, updating, and deleting notes, as well as managing folders and searching vault content. It features dual operation modes - connecting to Obsidian's API when available or falling back to direct filesystem operations when needed. This makes it particularly valuable for knowledge management workflows, research organization, and collaborative note-taking without leaving the conversation interface."
nexgene-research,nexonco-mcp,42,,"Nexonco-MCP is an advanced server for accessing and analyzing clinical evidence data in precision oncology research. Developed by Nexgene Research, this Python implementation connects to the CIViC (Clinical Interpretation of Variants in Cancer) GraphQL API, providing flexible search capabilities across diseases, therapies, molecular profiles, and phenotypes. The server exposes a single tool that returns detailed reports containing summary statistics, top evidence entries, and literature citations, making it particularly valuable for researchers exploring relationships between genetic variants and cancer treatments. The implementation supports both Claude Desktop and NANDA server configurations, with Docker containerization available for easy deployment."
nextdriveioe,github-action-trigger-mcp,1,339,"GitHub Action Trigger MCP Server provides tools for seamless GitHub Actions integration, enabling AI assistants to fetch available workflows, get detailed action information, trigger workflow dispatch events, and retrieve repository releases. Developed by NextDrive Team, this TypeScript implementation leverages the Octokit library to interact with GitHub's API, supporting both public and private repositories through configurable authentication methods. The server is designed for easy installation via npx or local package management, making it particularly valuable for CI/CD automation, repository management, and workflow orchestration directly from Claude Desktop."
nganiet,mcp-vercel,25,,"This Vercel-based MCP server, developed using TypeScript and Node.js, provides a lightweight and easily deployable implementation of the Model Context Protocol. It leverages the MCP SDK and integrates with Vercel's serverless infrastructure to offer a scalable solution for AI model interactions. The server's modular structure and use of modern JavaScript features make it adaptable for various AI-driven applications. It is particularly suited for developers looking to quickly set up an MCP endpoint on Vercel, enabling use cases such as chatbots, content generation, and data analysis tasks that require serverless AI model access."
ngeojiajun,mcp-code-snippets,6,,"This Code Snippet Server, developed by ngeojiajun-deriv, is a Model Context Protocol server designed to manage and store code snippets across different programming languages. It provides a flexible and extensible way to create, list, and delete code snippets using a standardized server interface. The implementation supports features such as creating snippets with titles, languages, and tags, listing snippets with optional filtering, and deleting snippets by their unique ID. It also includes localization support and persistent local storage. Built with TypeScript and leveraging the MCP SDK, this server is particularly useful for developers and teams looking to organize and share code snippets efficiently across projects or within a collaborative environment."
nguyenvanduocit,all-in-one-model-context-protocol,58,,"This MCP server, developed by nguyenvanduocit, enables AI assistants like Claude to interact with a wide range of development tools and services. Built in Go, it provides capabilities for searching Confluence, querying GitLab repositories, fetching Jira issues, executing command-line scripts, and more. The implementation stands out by offering a unified interface to multiple essential development platforms and APIs. By connecting AI capabilities with core development workflows and knowledge bases, this server allows AI systems to access documentation, analyze code, track issues, and assist with various development tasks. It is particularly useful for enhancing AI-powered developer tools, automating software development workflows, and building intelligent assistants that can seamlessly integrate with existing development infrastructure."
nguyenvanduocit,confluence-mcp,0,,"Confluence MCP provides a robust bridge to the Atlassian Confluence API, enabling AI assistants to search, retrieve, create, and update Confluence pages through a standardized set of tools. Built with Go, it supports operations like full-text search, page content retrieval in Markdown, page creation with optional parent page hierarchy, and page updates with version control. Particularly useful for teams wanting to programmatically interact with their documentation, knowledge bases, and collaborative content spaces."
nguyenvanduocit,gitlab-mcp,0,,"GitLab MCP provides a comprehensive bridge to the GitLab API, enabling AI assistants to interact with GitLab repositories through a set of standardized tools. Developed by nguyenvanduocit, it supports operations like listing projects, managing merge requests, retrieving file contents, analyzing pipelines, and exploring user events. The implementation is particularly useful for developers seeking programmatic interaction with GitLab through a conversational AI interface."
nguyenvanduocit,jira-mcp,4,,"Jira MCP provides a robust bridge to the Jira API, enabling AI assistants to interact with Jira workflows through a set of standardized tools. Built by nguyenvanduocit, it supports operations like searching issues, creating and updating tickets, managing sprints, and transitioning issue states. The implementation is particularly useful for teams looking to automate or streamline their project management processes through conversational AI interactions."
niallroche,raphtory_mcp,0,,"Raphtory GraphQL Schema Explorer is a FastMCP server that enables AI assistants to explore and understand graph structures in Raphtory databases. It provides HTTP resources for querying complete database schemas, verifying graph existence, and retrieving detailed information about node properties and relationship types. The implementation uses httpx for async HTTP requests with HTTP/2 support, maintains persistent connections through a global async client, and includes comprehensive error handling for non-existent graphs and connection issues. Particularly valuable for users who need to analyze graph structures, understand property relationships, and construct effective GraphQL queries without leaving their conversation interface."
niceberginc,agentipy-mcp,2,,"This Solana blockchain MCP server implementation enables AI assistants to interact with the Solana network through the AgentiPy framework. Built using the SolanaAgentKit, it provides a complete set of blockchain operations by exposing all available actions defined in the AgentiPy MCP module. The server requires configuration of a Solana private key and RPC URL through environment variables, which are loaded from a .env file when using the provided run script. This implementation is particularly useful for developers building AI agents that need to perform Solana blockchain operations such as querying account data, sending transactions, or interacting with smart contracts."
nicholasq,mcp-server-libsql,4,,"This LibSQL Model Context Protocol Server, developed using Deno 2.1, provides a robust interface for AI assistants to interact with LibSQL databases. It leverages the @libsql/client library to offer schema information retrieval and table querying capabilities through a set of MCP-compliant endpoints. The server supports both authenticated and unauthenticated access, ensuring flexibility for various deployment scenarios. By abstracting the complexities of LibSQL database operations, this implementation enables AI systems to seamlessly integrate database functionalities into their workflows. It is particularly useful for applications requiring real-time access to LibSQL data, such as AI-driven data analysis, automated reporting, or any system that needs to programmatically interact with LibSQL databases."
nicholmikey,chrome-tools-mcp,18,1761,"This MCP server implementation provides tools for interacting with Chrome through its DevTools Protocol. Developed by nicholmikey, it enables remote control of Chrome tabs, including executing JavaScript, capturing screenshots, monitoring network traffic, and more. The server is designed to work in various environments, including native setups, WSL, and Docker, with configurable options for different use cases. It's particularly useful for scenarios where manual browser configuration is needed before AI interaction, or for capturing network events into an AI tool's context. The implementation focuses on flexibility and ease of use, offering a range of features from basic tab navigation to detailed DOM element querying and interaction."
nickbaumann98,everart-forge-mcp,5,,"This MCP server implementation provides advanced image generation capabilities through integration with EverArt's AI models. Developed by Nick Baumann, it offers both vector and raster image creation, supporting formats like SVG, PNG, JPEG, and WebP. The server features flexible storage options, automatic optimization, and a range of AI models for different styles and quality levels. It's designed to work seamlessly with Cline, making it particularly useful for AI applications requiring high-quality image generation, such as creating logos, icons, or photorealistic scenes. The implementation focuses on user-friendly prompts and efficient image processing, suitable for both creative and technical use cases."
nickbaumann98,release-notes-server,2,,"This release notes MCP server, developed by an unspecified author, facilitates the generation and management of release notes for software projects. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined interface for creating, updating, and retrieving release notes. The implementation focuses on simplicity and ease of integration, providing a command-line interface for quick setup and deployment. It's particularly useful for development teams looking to automate their release documentation process, enabling use cases such as generating comprehensive changelogs, tracking feature updates, and maintaining a consistent release history without manually managing the documentation."
nickclyde,duckduckgo-mcp-server,89,57285,"This MCP server implementation provides web search capabilities through DuckDuckGo, with additional features for content fetching and parsing. Developed by Nick Clyde, it offers tools for performing web searches and retrieving webpage content, with built-in rate limiting and error handling. The server is designed to format results specifically for large language model consumption, making it particularly useful for AI applications that require up-to-date web information. It includes features like intelligent text extraction, comprehensive error logging, and LLM-friendly output formatting. The implementation is built using Python and integrates with the Model Context Protocol, focusing on ease of use within the Claude Desktop environment."
nickiiitu,mongodb-model-context-protocol-mcp-,1,,"This MCP server implementation provides a bridge to MongoDB databases, enabling operations like querying, inserting, and updating documents. Built with Node.js and TypeScript, it uses the official MongoDB driver and follows the Model Context Protocol standards. The server is designed for use cases requiring AI assistants to interact with MongoDB databases, such as data analysis, content management systems, or automated database operations."
aias,barnsworthburning-mcp,0,,"This MCP server, developed by Nick Trombley, provides a tool for searching barnsworthburning.net through its API endpoint. It's designed to be used with Claude for Desktop or other MCP clients, allowing users to query the website's content directly. The server is particularly useful for retrieving information about design, typography, and user experience from barnsworthburning.net in an AI-assisted context."
nicobailon,code-summarizer,0,,"Code Summarizer is an MCP server that enables AI assistants to analyze and summarize code repositories using Google's Gemini Flash 2.0 LLM. It provides tools for summarizing individual files or entire directories, respects .gitignore rules, and supports customizable detail levels. The implementation includes a CLI for standalone use, secure API key management, and integration capabilities with Claude Desktop, Cursor AI, and Cline through exposed resources for accessing code files, directory listings, and generating summaries, making it particularly valuable for developers who want to quickly understand unfamiliar codebases without leaving their AI assistant interface."
pipeboard-co,meta-ads-mcp,5,2665,"Meta Ads MCP provides a bridge to Facebook's Marketing API, enabling AI assistants to interact with Meta advertising accounts through a secure OAuth authentication flow. This Python implementation handles token caching across sessions, offers tools for accessing ad accounts, campaigns, ad sets, and creatives, and includes image download capabilities for visual analysis. The server manages authentication seamlessly with a local callback server, making it particularly useful for marketers who need to analyze campaign performance, review ad creatives, or monitor account metrics without leaving their AI assistant interface."
nighttrek,moondream-mcp,12,,"This Moondream MCP server, developed by an unknown author, provides image analysis capabilities through the Model Context Protocol. Built with TypeScript and leveraging the Moondream Python package, it offers tools for image captioning, object detection, and visual question answering. The server manages its own Python environment and model setup, downloading a quantized model for efficient processing. By abstracting complex image analysis tasks into a standardized MCP interface, it enables AI systems to easily incorporate visual understanding into their workflows. This implementation is particularly useful for applications involving image content analysis, automated image captioning, and visual data extraction, facilitating use cases such as content moderation, accessibility improvements, and visual search functionalities."
nighttrek,ollama-mcp,40,,"This Ollama MCP server implementation provides a bridge between the Model Context Protocol and Ollama, a local large language model runner. Developed as an open-source project, it enables seamless interaction with Ollama-hosted models through a standardized MCP interface. The server supports key operations such as chat completions, with real-time streaming capabilities using Server-Sent Events (SSE). Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers robust error handling and configuration options. This implementation is particularly useful for developers and researchers looking to integrate locally-hosted AI models into their MCP-compatible applications, enabling low-latency access to powerful language models while maintaining data privacy and control."
nighttrek,serper-search-mcp,20,,"Serper Search MCP is a server implementation that provides AI assistants with powerful web search capabilities through the Serper API. It features two main tools: a standard Google search tool for quick information retrieval and a Deep Research tool that breaks complex queries into focused sub-queries, gathers information from multiple sources, and synthesizes findings into comprehensive responses with citations. Built with TypeScript and following domain-driven design principles, it includes configurable research depth levels, telemetry for quality improvement, and integration with OpenRouter for LLM-powered research orchestration. This implementation is particularly valuable for users who need thorough, well-cited research on complex topics without leaving their AI assistant interface."
nighttrek,supabase-mcp,10,,"This Supabase MCP server implementation provides a bridge between the Model Context Protocol and Supabase databases. It offers tools for querying tables and generating TypeScript types, enabling AI assistants to interact with Supabase using natural language commands. Built with TypeScript and leveraging the Supabase JavaScript library, it supports features like schema selection, column filtering, pagination, and error handling for queries. The type generation functionality works with both local and remote Supabase projects. This implementation is particularly useful for developers who want to integrate AI-assisted database operations into their Supabase workflows, enabling natural language interactions for data retrieval and schema exploration."
jbdamask,mcp-nih-reporter,0,,"NIH RePORTER MCP server provides a conversational interface to the National Institutes of Health's research database, allowing users to search for NIH-funded projects and publications through several specialized tools. Built with Python and the httpx library, it offers comprehensive search capabilities across fiscal years, principal investigators, organizations, funding amounts, and research categories. The implementation formats results in markdown with detailed project information including abstracts, funding details, and related publications, making it ideal for researchers, grant writers, and policy analysts who need to explore NIH funding data without leaving their AI assistant interface."
ryoooo,nijivoice-mcp,1,,"NijiVoice-MCP is a server implementation that provides AI assistants with access to the NijiVoice API for text-to-speech generation. Built with Python 3.12 and FastMCP v2, this implementation enables voice synthesis through a structured interface that handles voice actor selection, parameter configuration, and audio encoding. The server exposes tools for retrieving available voice actors, generating speech from text with customizable voice characteristics, and managing API credentials. It's particularly useful for applications requiring high-quality voice output for content creation, accessibility features, or interactive voice experiences."
nikhil-patil-ri,mcp-github-oauth,2,,"This GitHub OAuth MCP server, developed for seamless integration with GitHub's authentication system, enables AI assistants to securely access and manage GitHub resources. Built with Python using libraries like httpx and pydantic, it streamlines the OAuth flow, token management, and API interactions. The implementation focuses on robust error handling, secure credential storage, and efficient rate limiting, making it straightforward for AI models to perform tasks such as repository management, issue tracking, and code analysis. It's particularly valuable for automating development workflows, conducting code reviews, or integrating GitHub functionalities into AI-powered development tools, allowing assistants to interact with GitHub's ecosystem without requiring in-depth knowledge of OAuth intricacies."
shadowfax92,apple-reminders-mcp,2,,"A TypeScript-based MCP server for interacting with Apple Reminders on macOS, providing a standardized interface for managing reminder lists, creating, completing, and deleting reminders. Built by Nikhil Sonti, this implementation uses AppleScript to directly interface with the macOS Reminders app, enabling AI assistants to perform reminder-related tasks through a simple, typed API."
niko91i,mcp-deepseek-v3-et-claude-desktop,2,,"A server implementation that combines DeepSeek's reasoning capabilities with Claude 3.5 Sonnet's response generation through OpenRouter. Built with TypeScript and the MCP protocol, it enables AI assistants to leverage both models' strengths - using DeepSeek for analytical thinking and Claude for natural language output. This implementation is particularly valuable for users who want to enhance their AI interactions by combining multiple models' capabilities in a single conversation flow."
nikolaypavlov,mcp-myip,0,2107,"This MCP server implementation provides a simple tool for retrieving public IP address information. Developed by Mykola Pavlov, it integrates with the ifconfig.me service to fetch IP data. The server exposes a single 'get_ip_info' tool, making it straightforward for AI assistants to access and understand a user's public IP address. It's particularly useful for network diagnostics, geolocation services, or any application where knowing the client's public IP is necessary. The implementation focuses on simplicity and ease of use, leveraging the httpx library for efficient HTTP requests and the MCP CLI for seamless integration with other MCP-compatible systems."
niledatabase,nile-mcp-server,14,5333,"The Nile MCP Server provides a bridge between AI assistants and Nile Database services, enabling database operations through a standardized interface. Built with TypeScript using the Model Context Protocol SDK, it requires Nile API keys and workspace slugs for authentication. The implementation supports both stdio communication mode for direct integration and an HTTP server mode that exposes port 3000. This server is designed for developers who need to incorporate database functionality into their AI workflows, allowing assistants to interact with Nile's database services without requiring users to manually handle connection details or authentication."
nimishchaudhari,github-issue-resolver-mcp,0,,"GitHub Issue Resolver MCP provides automated resolution for GitHub issues by analyzing their content, creating resolution plans, and implementing solutions with user approval. Built with TypeScript and Docker, it integrates with the GitHub API to clone repositories, analyze codebases, and create pull requests that fix identified problems. The server features a structured workflow that includes issue analysis, plan creation, user approval, development environment setup, and solution implementation using codemcp for automated coding. It's particularly valuable for development teams looking to reduce time spent on issue management by having AI assist with routine bug fixes and feature implementations."
ningyv179,mcp-feishu,0,,"MCP-FEISHU is a microservice control plane server that integrates Feishu OpenAPI with Windsurf IDE, enabling seamless API discovery and management. It provides tools for retrieving defect information through two main endpoints: getting specific defect links by ID and fetching recently updated defect lists filtered by status and date range. The server supports both stdio and HTTP/SSE transport methods, making it flexible for different integration scenarios while maintaining a standardized communication protocol for API testing and documentation capabilities."
niyogi,render-mcp,3,765,"Deploy to Render.com directly through AI assistants.

This MCP (Model Context Protocol) server allows AI assistants like Claude to interact with the Render API, enabling deployment and management of services on Render.com."
niyonabil,blogger-mcp-server,0,,"Blogger-MCP-Server provides a bridge between AI assistants and Google's Blogger API, enabling content creation and management on Blogger platforms. Built with TypeScript and leveraging the googleapis package, this server exposes Blogger functionality through the Model Context Protocol, allowing AI systems to create, update, and manage blog posts programmatically. The implementation is designed for Node.js environments and includes configuration options for authentication with Google's services, making it particularly valuable for automated content publishing workflows and AI-assisted blogging."
nkkko,daytona-mcp-interpreter,9,,"This Daytona MCP interpreter, developed for Python code execution in Daytona workspaces, provides a secure and isolated environment for AI assistants to run Python code. Built with Python and leveraging libraries like mcp, pydantic, and httpx, it offers tools for executing code, capturing output, and managing workspaces. The implementation focuses on security and isolation, ensuring safe code execution within Daytona's infrastructure. It's particularly useful for AI-assisted coding tasks, debugging, and educational purposes, allowing AI models to test and run Python code without direct access to the underlying system."
nloui,paperless-mcp,24,712,"This MCP server, developed by Nick Loui, integrates with the Paperless-NGX document management system API. Built using Node.js with the litemcp framework and zod for schema validation, it provides tools for managing documents, tags, correspondents, and document types. The server implements a wide range of operations including document listing, searching, downloading, bulk editing, and uploading, as well as tag and correspondent management. By abstracting Paperless-NGX API interactions into a standardized MCP interface, it enables AI assistants to easily interact with and manage document collections. This implementation is particularly useful for applications involving document organization, automated filing, content analysis, and information retrieval, facilitating use cases such as invoice processing, personal document management, and business record keeping."
noahgsolomon,pumpfun-mcp-server,8,,"A Model Context Protocol server for interacting with the Pump.fun platform on Solana blockchain, enabling AI assistants to create, buy, and sell tokens directly. The implementation provides tools for token creation with customizable parameters, token purchasing and selling with slippage control, account management with automatic keypair generation, and balance checking. Built with TypeScript and leveraging the Solana web3.js library, it securely manages wallet keypairs locally while connecting to the Solana network through Helius RPC endpoints."
noahlozevski,mcp-idb,3,2781,"This MCP server provides integration between the Model Context Protocol and Facebook's iOS Development Bridge (idb), enabling automated iOS device management and test execution. Created by Noah Lozevski, it allows AI assistants to control iOS devices for tasks like automated testing, screenshot capture, UI interactions, and app installation/removal. The implementation is packaged as an npm module that can be easily started with a single command and requires idb-companion to be installed via Homebrew."
noah-vh,mcp-server-clickup,3,,"This ClickUp MCP server, developed by Noah van Hart, provides AI assistants with a standardized interface to interact with the ClickUp project management platform. Built using Python and leveraging libraries like httpx and pydantic, it abstracts the complexities of the ClickUp API, handling authentication, request formatting, and response parsing. The server offers capabilities for managing tasks, lists, spaces, and other ClickUp entities, enabling AI systems to seamlessly integrate project management functionalities. It's particularly valuable for AI assistants focused on productivity and task management, facilitating use cases such as automated task creation, project status updates, and intelligent workflow optimization within the ClickUp ecosystem."
nocodeboy,youtube-mcp-server,1,,"YouTube MCP Server provides a bridge between AI assistants and the YouTube API, enabling search and retrieval of videos, channels, and trending content. Built by Nocodeboy, it implements four core tools for searching videos, getting video details, searching channels, and retrieving channel information, plus a resource endpoint for popular videos. The server requires a YouTube API key and is designed for easy integration with Claude Desktop, making it valuable for content research, channel analysis, and staying updated on trending videos without leaving the conversation interface."
nodetec,nostr-code-snippet-mcp,3,,"Nostr Code Snippet MCP server enables AI assistants to fetch code snippets from the Nostr protocol network. Developed by NODE-TEC, this implementation uses the Model Context Protocol SDK and nostr-tools library to connect to Nostr relays and retrieve kind 1337 events, which represent code snippets shared on the network. The server provides a single tool, 'fetchNostrSnippets', that accepts a limit parameter to control the number of results returned. This implementation is particularly useful for AI assistants that need to access community-shared code examples or programming solutions distributed through the decentralized Nostr network."
nomagicln,mcp-harbor,1,,"MCP Harbor provides a Node.js interface for managing Harbor container registry resources through the Model Context Protocol. Built using the @hapic/harbor client library, it enables AI assistants to perform operations on projects, repositories, tags, and Helm charts in Harbor instances. The implementation supports both STDIO transport for local development and includes comprehensive error handling and debugging tools. This server is particularly valuable for DevOps workflows requiring container registry management without leaving the conversation interface."
non906,omniparser-autogui-mcp,27,,"This MCP server analyzes on-screen GUI elements using OmniParser and enables automated GUI interactions. Developed by NON906, it integrates computer vision and automation libraries to provide AI-assisted control of desktop applications. The server is particularly useful for tasks requiring visual analysis and programmatic interaction with graphical user interfaces, such as automated testing or accessibility assistance."
non-dirty,mcp-server-restart,4,7701,"This MCP server for restarting Claude Desktop, developed by Matthew Smith, provides a simple interface for programmatically restarting the Claude AI assistant application on macOS. It leverages the psutil library to safely terminate and relaunch the Claude Desktop process. The server exposes a status resource for checking Claude's current state and a restart tool that handles the full restart workflow with progress notifications. By enabling AI-driven restarts of Claude, this implementation facilitates automated troubleshooting, updates, or resets of the assistant. It is particularly useful for developers and power users who want to integrate Claude Desktop restarts into their workflows or automation scripts."
non-dirty,imap-mcp,4,,"IMAP MCP provides a robust email interaction server for programmatically accessing and processing email content via IMAP, with first-class support for Gmail OAuth2 and app-specific password authentication. Built with a modular architecture, it enables advanced email retrieval, searching, and management through a standardized MCP interface, with particular strengths in handling complex email parsing, attachment processing, and flexible configuration across multiple email providers."
nonomnonom,onchainsdevmcp,1,,"This MCP server implementation provides a development environment for building and testing MCP-compatible applications. It utilizes Docker for containerization, TypeScript for type-safe development, and integrates with the Model Context Protocol SDK. The server is designed to facilitate rapid prototyping and deployment of MCP services, with built-in support for Express.js routing and Bun as the JavaScript runtime. It offers a foundation for developers to create scalable and efficient MCP-enabled applications."
norbinsh,cursor-mcp-trivy,6,,"This MCP server implementation provides a Trivy-based security scanning service for AI assistants. Developed by Shay Elmualem, it offers tools to scan projects for vulnerabilities and attempt fixes by updating package versions. The server uses Python and integrates with the Trivy command-line tool, supporting various package managers including pip, npm, RubyGems, and Go modules. It's designed to enhance security in AI-driven development workflows, allowing for automated vulnerability detection and remediation across different programming languages and frameworks. The implementation focuses on clear reporting, error handling, and safe package manifest updates, making it suitable for both development and production environments."
normal-coder,gitee-mcp-server,4,1381,"Gitee MCP Server enables AI to interact with Gitee repositories through the Model Context Protocol, providing tools for repository management, branch operations, file handling, issue tracking, and pull request workflows. It supports both NPX and Docker deployment methods, requiring only a Gitee personal access token for authentication. The implementation is particularly useful for automating Gitee operations, enabling AI assistants to create repositories, manage code, handle issues, and process pull requests without manual intervention."
nosytlabs,kickmcp,2,,"KickMCP is a server implementation that provides AI assistants with access to the Kick.com streaming platform API. Developed by NosytLabs, this TypeScript-based server supports both JSON-RPC over stdin/stdout (MCP mode) and HTTP/WebSocket interfaces, offering comprehensive functionality for channel management, chat interactions, stream control, and webhook handling. The implementation includes robust features like request caching, rate limiting, error handling, and authentication, making it particularly valuable for applications requiring real-time interaction with Kick.com streams, chat moderation, or content creator analytics."
makenotion,notion-mcp-server,1171,33750,"Notion MCP Server provides a bridge to the Notion API, enabling AI assistants to interact with Notion workspaces through the Model Context Protocol. This TypeScript implementation converts the Notion OpenAPI specification into MCP-compatible tools, handling authentication, request formatting, and file uploads. The server exposes Notion's capabilities including searching content, querying databases, and managing pages and comments, while maintaining proper error handling and response formatting. It's particularly useful for AI agents that need to retrieve, create, or modify Notion content without requiring users to write complex API interaction code."
lightbaby,mcp-server-novacv,2,536,"MCP-Server-NovaCV provides tools for generating, analyzing, and converting resumes through the NovaCV API. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with resume data in various formats. The server exposes NovaCV's functionality through a standardized interface, making it particularly valuable for job seekers, recruiters, and career coaches who need to create professional resumes, extract information from existing documents, or convert between different resume formats without dealing with complex document formatting."
novakiki,mcp-gemini-server,1,,"MCP Gemini Server provides a dedicated server that wraps the Google Gemini API, exposing its capabilities through standardized MCP tools. It enables other LLMs or MCP-compatible systems to leverage Gemini's features including content generation, function calling, stateful chat, file handling, and content caching. The implementation includes intelligent model fallback mechanisms that automatically switch to alternative models when quota limits are reached, ensuring service continuity. This server simplifies integration with Gemini models by providing a consistent tool-based interface, allowing AI systems to work together seamlessly without managing multiple complex APIs."
noveum,api-market-mcp-server,2,394,"API-Market MCP Server provides access to over 200 APIs from API.market through the Model Context Protocol, enabling AI assistants to interact with a diverse range of services including text-to-image generation, geocoding, routing, content detection, and more. Developed by Noveum.ai, this TypeScript implementation automatically converts OpenAPI specifications into MCP tools, handling authentication through API keys and managing request/response transformations. The server can be easily configured in Claude Desktop or Cursor, making it particularly valuable for AI applications that need to leverage external APIs for tasks like image processing, web searches, domain checking, and data extraction without requiring users to implement these integrations themselves."
novuhq,smithery-mcp,1,,"This MCP server, developed by the Novu team, provides a standardized interface for interacting with Novu's notification infrastructure. Built with TypeScript and leveraging the Novu API, it offers capabilities for managing subscribers, triggering notifications, and handling topics. The implementation focuses on abstracting Novu-specific concepts into a generalized API, enabling AI models to perform complex notification operations. By connecting AI assistants with Novu's feature set, this server allows for sophisticated scenarios like personalized notification delivery, subscriber management, and multi-channel messaging. It's particularly useful for applications and AI systems that require programmatic access to a robust notification system, streamlining communication workflows across various channels."
nozomio-labs,nia-mcp,3,184,"The Nia Codebase MCP server enables AI assistants to access and understand codebases indexed in Nia's system through function calling. It provides a single tool, lookup_codebase_context, that retrieves relevant code snippets and context based on user queries about a repository. The server supports both stdio and SSE transport methods, making it compatible with tools like Cursor, Claude Desktop, and other MCP-compatible clients. Built with robust error handling and retry logic, it's designed to help developers get AI-powered insights about their code structure, architecture, and implementation details."
mateusribeirocampos,npm-mcp-server,0,,"NPM MCP Server provides a specialized tool for fetching detailed npm package information, offering two primary resources: a package search tool that retrieves comprehensive metadata about specific packages, and a popular packages resource that lists the top 10 npm packages. Built with TypeScript and leveraging the Model Context Protocol SDK, this server enables AI assistants to quickly access package details, dependencies, and popularity metrics, supporting use cases like dependency analysis, package comparison, and software research."
nspady,google-calendar-mcp,128,,"This Google Calendar MCP server enables AI assistants to interact with users' Google Calendar data. Developed as an open-source project, it provides a TypeScript-based interface for querying events, creating appointments, and managing calendars through natural language. The implementation leverages the Google Calendar API and OAuth 2.0 for secure authentication. It's designed for scenarios requiring AI-assisted calendar management, such as scheduling meetings, analyzing time usage, or integrating calendar functionality into conversational AI applications. The server is particularly useful for productivity-focused AI assistants or developers building tools to streamline calendar operations through natural language interfaces."
nstanw,api-service,0,,"API Service provides a TypeScript-based bridge to a backend ABP Framework API, enabling operations like employee management, breakfast registration, and specialized workflows for a Vietnamese water utility company. The implementation uses axios for HTTP requests with a hardcoded authentication token, includes comprehensive logging via Winston, and follows a service-oriented architecture pattern with clear separation of concerns. It's particularly valuable for automating business processes like chemical management, equipment tracking, and vehicle dispatching without requiring direct API interaction."
nsxdavid,clickup-mcp-server,4,777,"ClickUp MCP Server provides a standardized interface for AI assistants to interact with the ClickUp API, enabling access to workspaces, spaces, folders, lists, tasks, docs, comments, and checklists. Developed by David Whatley, this Node.js implementation exposes both tools for performing actions (like creating tasks or updating checklists) and resources for retrieving data through URI templates. The server runs on stdio transport, making it compatible with Claude Desktop and VSCode Extension integrations, and is particularly valuable for users who need to manage ClickUp projects directly from their AI assistant conversations."
ntropy-network,ntropy-mcp,3,,"This MCP server implementation provides integration with the Ntropy API for enriching banking data. Developed by Ntropy, it offers tools for creating account holders and enriching transactions with detailed financial information. Built using Python and leveraging the MCP library, the server focuses on secure API key management and easy setup. It is particularly useful for AI applications that need to analyze financial transactions, categorize spending, or provide insights into banking data. The implementation includes robust error handling and supports various transaction attributes for comprehensive data enrichment."
nwiizo,tfmcp,223,,"tfmcp is a Rust-based MCP server for Terraform infrastructure management, providing AI-assisted tools for analyzing, initializing, planning, and applying Terraform configurations. Built by nwiizo, it enables seamless integration with Claude Desktop through a JSON-RPC 2.0 protocol, supporting operations like resource listing, configuration validation, and state management across different project environments."
nylas-samples,nylas-api-mcp,0,,"Nylas API MCP server provides a comprehensive bridge to the Nylas Communications Platform, enabling AI assistants to interact with email, calendar, and contacts APIs across multiple providers. Built with TypeScript and the Model Context Protocol SDK, it offers dynamic code generation, API exploration tools, and authentication helpers that abstract away provider-specific complexities. The implementation is particularly valuable for developers seeking to build unified communication integrations without managing individual provider intricacies."
nzenitram,github-mcp,1,,"GitHub MCP Tools provides a bridge between Claude Desktop and GitHub APIs, enabling users to search repositories, manage issues, create pull requests, and control repository settings through a FastMCP server. The implementation authenticates with GitHub using personal access tokens and exposes a suite of tools for repository management, issue tracking, and workflow automation. It's particularly valuable for developers who want to perform GitHub operations directly within their AI assistant conversations without context switching to the GitHub web interface."
nzenitram,mcp-jira,0,,"JIRA MCP Tools provides a comprehensive integration with Atlassian JIRA, enabling Claude to search, create, update, and delete issues directly within conversations. The implementation includes tools for managing projects, transitioning issues between statuses, adding comments, retrieving detailed issue information, and searching for users with GDPR compliance support. Built with the Python JIRA library and FastMCP framework, it handles authentication through API tokens and includes robust error handling for common JIRA operations. Particularly valuable for teams who want to manage their JIRA workflows without leaving their Claude Desktop interface."
nzkdevsaider,mcp_server_postgredb_finder,0,,"This MCP server implementation provides a bridge to PostgreSQL databases, enabling AI assistants to interact with structured data. Developed by nzkdevsaider, it offers tools for executing SQL queries and retrieving results from PostgreSQL databases. The server is designed for use cases requiring natural language interactions with relational data, such as data analysis, information retrieval, or AI-driven database management tasks."
oakenai,mcp-edit-file-lines,19,,"This MCP server, developed by oakslee, provides tools for making precise line-based edits to text files within allowed directories. Built with TypeScript and leveraging libraries like diff and glob, it offers functionality for replacing exact line sequences, handling regex patterns, and preserving formatting. The implementation stands out with its two-step editing process for safety, dry run preview mode, and flexible whitespace matching. It's particularly useful for developers and teams looking to automate code modifications, update configuration files, or perform bulk text transformations across multiple files while maintaining strict control over changes."
oakplank,revitmcp,3,,"A Revit API integration that enables AI assistants to interact directly with Autodesk Revit models through natural language commands. Developed to provide a standardized interface for querying model information, creating and modifying elements, and performing complex operations using the Model Context Protocol. Useful for architects, engineers, and designers seeking to automate and streamline Revit model interactions through AI-powered tools."
oalles,agentic,0,,"Agentic is a Spring Boot-based MCP server implementation that enables AI assistants to interact with system monitoring tools and retrieve information from a knowledge base. It consists of three main components: a monitor service that provides system status information, a RAG (Retrieval-Augmented Generation) service that answers questions using a vector database of corporate documentation, and an application agent that serves as the client interface. The implementation leverages Spring AI with Ollama for LLM integration and Redis for vector storage, making it particularly valuable for enterprise environments where AI assistants need access to both real-time system metrics and domain-specific knowledge."
obaid,resemble-mcp,0,,"Resemble AI MCP Server provides a bridge to the Resemble AI text-to-speech API, enabling AI assistants to generate high-quality voice audio from text using various voice models. The implementation supports multiple server transport methods (MCP SDK, HTTP, StdIO) and offers flexible tools for listing available voices and generating audio in file or base64 formats. Particularly useful for applications requiring dynamic voice generation like interactive storytelling, accessibility tools, or multimedia content creation."
obinopaul,soccer-mcp-server,2,,"Soccer MCP Server provides a bridge between applications and the API-Football service, offering tools to access comprehensive football data including league standings, team fixtures, player statistics, and live match information. Built with FastMCP and requiring a RapidAPI key for authentication, it implements over 15 specialized tools that retrieve both historical statistics and real-time match data for leagues, teams, and players worldwide. The server is containerized with Docker for easy deployment and configured to run with increased timeout settings for reliable operation, making it ideal for sports analytics, fantasy football applications, or any workflow requiring detailed soccer data without leaving the conversation interface."
obinopaul,nba-mcp-server,1,,"NBA MCP Server provides a Python-based interface to NBA statistics and live game data through the NBA API. It offers tools for accessing live game information (scoreboard, box scores, play-by-play), player statistics, team data, and league standings without requiring users to understand the underlying API structure. Built with FastMCP and packaged as a Docker container, it's designed for seamless integration with Claude Desktop, making it ideal for sports analysts, fantasy basketball players, and NBA fans who want to query current and historical NBA data directly within their conversations."
objones25,mcp-research-tool,4,,"MCP Research Tool orchestrates intelligent research workflows by dynamically selecting and executing specialized tools based on query context. Built on Cloudflare Workers, it analyzes natural language queries, selects appropriate research tools (including Brave Search, Tavily, GitHub, arXiv, and news APIs), optimizes queries for each tool, and synthesizes results into comprehensive, well-cited answers. The service features iterative research with gap analysis, confidence scoring, and proper source attribution, making it ideal for complex research tasks requiring information from multiple sources."
obre10off,spotify-mcp,1,,"Spotify MCP Server enables AI assistants to control Spotify playback through natural language commands. Built with Bun and the Model Context Protocol, it exposes tools for playing tracks, pausing music, skipping songs, searching Spotify's catalog, and retrieving information about currently playing tracks. The implementation handles Spotify authentication and token management, making it easy to integrate with MCP clients like Cursor or Claude for Desktop for seamless music control without leaving the conversation interface."
ocean-zhc,seatunnel-mcp,10,,"Job management (submit, stop, monitor)
System monitoring and information retrieval
REST API interaction with SeaTunnel services
Built-in logging and monitoring tools
Dynamic connection configuration
Comprehensive job information and statistics"
ocean-zhc,dolphinscheduler-mcp,5,,"DolphinScheduler MCP Server provides a bridge between AI agents and Apache DolphinScheduler's workflow management platform through a standardized protocol. Developed by ocean-zhc, this implementation exposes DolphinScheduler's REST API as a collection of tools for project management, workflow execution, task monitoring, and resource management. The server is built with Python using FastMCP and supports configuration through environment variables or command-line arguments. It includes comprehensive error handling and authentication management for the DolphinScheduler API, making it ideal for DevOps teams who want to automate workflow orchestration tasks through AI assistants without switching context to the DolphinScheduler interface."
octagonai,octagon-mcp-server,6,2173,"Octagon MCP Server provides specialized AI agents for investment research of public and private markets through the Model Context Protocol. Built by Octagon AI, it offers tools for analyzing SEC filings, earnings call transcripts, financial data, stock market information, private company research, funding rounds, M&A transactions, and web scraping capabilities. The server connects to Octagon's API using your API key and exposes these research capabilities to Claude Desktop and other MCP clients, making it valuable for investors, analysts, and researchers who need quick access to financial intelligence without leaving their AI assistant interface."
HEAD,MCPDemo2,4,,"This MCP server provides a specialized search interface for the Quran database, allowing Claude to find and retrieve verses containing specific words or phrases. Built with FastMCP, it connects to a local SQLite database (quran.db) and offers a single tool that searches for terms within the text, returning formatted results with surah names, numbers, and verse content. The implementation is configured to run via the Claude Desktop app using UV package manager, making it ideal for religious study, textual analysis, or building applications that require quick access to Quranic verses without leaving the conversation interface."
octomind-dev,octomind-mcp,8,1393,"Octomind MCP Server enables AI assistants to create, manage, and execute end-to-end tests through integration with the Octomind platform. Built with TypeScript using the Model Context Protocol SDK, it provides tools for test case creation, execution monitoring, environment management, and test report analysis. The server communicates with the Octomind API using an authentication key and supports features like test discovery, which allows generating test cases from descriptions or prompts. Particularly valuable for development teams who want to leverage AI assistants for automated testing workflows without switching context to the Octomind web interface."
oculairmedia,letta-mcp-server,9,,"This MCP server implementation provides tools for interacting with the Letta API, enabling management of agents, memory blocks, and tools within the Letta system. Developed by Oculair Media, it offers functionality for creating and listing agents, managing memory blocks, attaching tools, and facilitating communication with agents. The server is designed to integrate seamlessly with Cline, making it useful for projects requiring advanced agent-based interactions and memory management in AI applications."
odancona,code2prompt-mcp,6,,"Code2Prompt MCP server leverages the high-performance code2prompt-rs Rust library to analyze codebases and generate structured summaries optimized for AI consumption. It provides tools for extracting context from repositories with fine-grained control over file inclusion/exclusion patterns, formatting options, and token encoding. The server bridges the gap between code repositories and language models by transforming complex codebases into contextual prompts that help AI assistants better understand and work with code, making it particularly valuable for code analysis, documentation generation, and technical assistance workflows."
odgrim,mcp-datetime,2,,"This MCP server implementation provides datetime information to agentic systems and chat REPLs. It offers tools for retrieving current time in local or specific timezones, listing available timezones, and accessing datetime resources through MCP URIs. Built with TypeScript, it supports multiple transport options including stdio and HTTP with Server-Sent Events (SSE). The server is designed for applications requiring accurate and flexible time-related functionalities across different geographical regions."
odysseus0,mcp-server-shell,2,4723,"This shell command execution MCP server, developed using Python, provides AI assistants with a standardized interface to run shell commands on the host system. It leverages the MCP library and Pydantic for robust request/response handling and data validation. The server abstracts the complexities of subprocess management and output parsing, enabling AI systems to seamlessly integrate shell command capabilities into their workflows. It's particularly valuable for AI assistants that need to interact with the host system, facilitating use cases such as system diagnostics, file manipulation, network troubleshooting, and automation of local development tasks."
oenius,browser-tools-mcp,2,,"Browser Tools MCP provides AI assistants with comprehensive browser debugging capabilities through a Chrome extension and server component. It captures console logs, network requests, screenshots, and DOM elements while offering Lighthouse-powered audits for accessibility, performance, SEO, and best practices. The implementation features real-time WebSocket communication, configurable logging limits, and cross-platform browser detection with smart cleanup mechanisms. This tool is particularly valuable for AI workflows that need to analyze web pages, debug frontend issues, or generate reports on website quality without requiring users to manually extract and share browser information."
gongrzhe,office-powerpoint-mcp-server,42,1792,"PowerPoint MCP server that enables AI assistants to create and manipulate PowerPoint presentations through python-pptx. Built by GongRzhe, it provides tools for adding and formatting slides, text, images, tables, charts and shapes with robust error handling and parameter validation. The implementation focuses on reliability with multiple fallback approaches for operations like image insertion and shape creation, making it particularly valuable for users who need to programmatically generate or modify presentations through natural language requests."
gongrzhe,office-word-mcp-server,57,4522,"Office-Word-MCP-Server provides a bridge between AI assistants and Microsoft Word documents, enabling rich document editing capabilities through a standardized interface. Built with Python and python-docx, it exposes tools for document creation, content addition, text formatting, table manipulation, and style management while handling common edge cases like missing styles and locked files. The server is particularly valuable for users who need to programmatically create and modify Word documents through natural language requests, with features like proportional image scaling, custom style creation, and detailed error handling making it suitable for both simple editing tasks and complex document automation workflows."
oghenetejiriorukpegmail,github-mcp,0,,"GitHub MCP Server provides a bridge between AI assistants and GitHub's API, enabling repository management through natural language. Developed by Oghenetejiri Orukpe, this TypeScript implementation exposes tools for creating repositories, pushing content, and retrieving user information via the GitHub API. The server authenticates with GitHub using a personal access token, translates tool requests into appropriate API calls, and handles errors gracefully. Particularly valuable for developers who want to manage their GitHub projects directly through AI assistants without switching contexts or writing manual API calls."
ognis1205,mcp-server-unitycatalog,12,,"MCP Server for Unity Catalog enables LLM agents to execute Unity Catalog functions seamlessly through a Model Context Protocol interface. Developed by Shingo OKAWA, it provides access to all registered Unity Catalog Functions alongside predefined AI tools for listing, retrieving, creating, and deleting functions. The server requires configuration of Unity Catalog server, catalog, and schema parameters, and can be deployed using Docker or run directly with uv. This implementation is particularly valuable for workflows requiring database operations and function management within Unity Catalog environments."
ogoldberg,gemini-context-mcp-server,15,,"The Gemini Context MCP server provides AI assistants with enhanced context management capabilities when working with Google's Gemini models. It maintains conversation history across sessions, implements semantic search for retrieving relevant context, and offers API-level caching for large prompts to optimize token usage and reduce costs. The server exposes tools for generating text, managing conversation context, creating and using context caches with configurable TTL, and searching through previous interactions. Built with TypeScript and the MCP SDK, it supports multiple client environments including Cursor, Claude Desktop, and VS Code through a flexible installation system, making it particularly valuable for applications requiring persistent context and efficient handling of large language model interactions."
okdshin,duckduckgo_web_search_mcp_server,0,,"This MCP server implementation provides a web search capability using the DuckDuckGo search engine. Built with the FastMCP framework, it offers a single tool for performing text searches with customizable result limits. The server handles query processing, result formatting, and error handling, making it suitable for applications requiring quick and easy integration of web search functionality."
okdshin,local-git-mcp-server,1,,"This Git repository management server leverages the MCP framework to provide a local solution for creating and interacting with Git repositories. It offers a range of Git operations including repository creation, file management, committing changes, and generating diffs. The server is designed for developers who need a lightweight, Python-based Git management tool that can be easily integrated into existing workflows. It stands out by focusing on local repository management, making it ideal for personal projects, small team collaborations, or as a building block for larger version control systems. The implementation uses GitPython for Git operations and Pydantic for data validation, ensuring robust and type-safe interactions."
okooo5km,memory-mcp-server,85,,"Memory MCP Server provides a knowledge graph management system for AI assistants to maintain persistent memory across conversations. Built in Swift, it enables creating, reading, updating, and deleting entities and relations in a JSON-based storage system. The server implements nine specialized tools for graph operations including entity creation, relation management, observation tracking, and search capabilities. Data is stored in a configurable file location, making it ideal for applications requiring AI assistants to build and maintain structured knowledge over time without losing context between sessions."
okooo5km,time-mcp-server,5,,"Time MCP Server provides time-related capabilities for AI assistants, enabling them to get current time and convert between timezones using IANA timezone identifiers. Built with Swift and the MCP Swift SDK, it offers two main tools: get_current_time for retrieving current time in a specified timezone, and convert_time for translating times between different timezones with detailed output including time differences and daylight saving information. The server runs on stdio transport, making it compatible with Claude Desktop and other MCP clients for workflows requiring accurate time information without leaving the conversation interface."
okooo5km,unsplash-mcp-server-swift,7,,"Unsplash MCP Server provides tools for searching and retrieving photos from Unsplash's library through a standardized interface. Built in Swift, it offers three main capabilities: searching photos with filters like color and orientation, retrieving detailed information about specific photos, and fetching random photos with customizable parameters. The server connects to the Unsplash API using an access key stored in environment variables, making it ideal for AI assistants that need to incorporate high-quality imagery into their workflows without leaving the conversation context."
okooo5km,zipic-mcp-server,3,,"Zipic MCP Server provides image compression and optimization capabilities through integration with the Zipic app for macOS. It offers two main tools: quickCompress for simple image compression with default settings, and advancedCompress for fine-tuned optimization with options for format selection, compression level, dimensions, and output location customization. Built with Swift 6.0 and requiring macOS 14.0+, this server enables LLMs like Claude to efficiently compress and optimize images, making it valuable for workflows involving image processing and optimization."
olaservo,shannon-thinking,10,,"This MCP server implements Claude Shannon's systematic problem-solving methodology as a tool for breaking down complex problems. Developed using TypeScript and the Model Context Protocol SDK, it guides users through stages of problem definition, constraint identification, modeling, validation, and implementation. The server's unique feature is its structured approach to thought organization, including revision capabilities, dependency tracking, and uncertainty quantification. It's particularly useful for tackling information processing challenges, engineering design problems, and optimization tasks that require iterative refinement and experimental validation alongside theoretical frameworks."
oleander,home-assistant-mcp-server,1,286,"Home Assistant MCP Server provides a bridge between AI assistants and Home Assistant smart home systems, enabling control of lights, climate devices, media players, and other connected devices through natural language. Built with TypeScript and the Model Context Protocol, it exposes tools for querying entity states, executing service calls, rendering templates, and retrieving system information. The server supports both stdio and WebSocket communication, handles authentication securely, and includes comprehensive error handling. This implementation is particularly valuable for smart home users who want to monitor and control their devices directly through conversational AI without manually configuring Home Assistant integrations."
olegshilin,mcp-eagle,0,,"This MCP server for the Eagle app, developed by an unnamed author, provides a bridge between Claude Desktop and Eagle's functionality. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for checking the Eagle app's connection status. The server implements a simple structure with TypeScript configuration and npm scripts for building and running. By abstracting Eagle's interface, it enables AI assistants to interact with the app's features. This implementation is particularly useful for integrating Eagle's capabilities into AI-driven workflows, facilitating use cases such as asset management, design resource organization, and creative project assistance within the Claude Desktop environment."
cam10001110101,mcp-server-ollama-deep-researcher,8,,"This is a Model Context Protocol (MCP) server adaptation of LangChain Ollama Deep Researcher. It provides the deep research capabilities as MCP tools that can be used within the model context protocol ecosystem, allowing AI assistants to perform in-depth research on topics using local LLMs via Ollama."
omarmwarraich,eigenlayer-mcp,0,,"EigenLayer AVS service is a Model Context Protocol server that connects to the EigenLayer API to provide detailed information about Active Validator Services (AVS). The implementation uses Claude 3.7 Sonnet to analyze AVS data retrieved from the EigenExplorer API and respond to user queries with structured, informative responses. It exposes a single tool called 'getAVSs' that accepts user prompts and optional specific AVS names, making it particularly valuable for users seeking to understand EigenLayer's decentralized validation ecosystem without leaving their conversation interface."
omd01,aws-ses-mcp,1,,"AWS SES MCP provides a secure bridge between AI assistants and Amazon Simple Email Service, enabling direct email sending capabilities through the Model Context Protocol. This implementation supports essential email features including HTML content, CC/BCC recipients, and reply-to addressing, with robust error handling and validation. Built with TypeScript and containerized with Docker, it's ideal for AI workflows requiring automated email communications while maintaining AWS security standards."
omedia,mcp-server-drupal,34,,"This MCP server for Drupal, developed using TypeScript and the Model Context Protocol SDK, provides AI assistants with seamless access to Drupal's content management capabilities. It dynamically generates resources, tools, and prompts based on the Drupal API during initialization, offering a flexible interface for interacting with Drupal-powered websites. Built with Bun for enhanced performance and leveraging Biome for code quality, this server abstracts the complexities of Drupal's API, allowing AI systems to easily manage content, users, and site configurations. It's particularly valuable for content managers, site administrators, and AI developers working on content automation, enabling use cases like automated content creation, site maintenance, and dynamic content personalization within Drupal environments."
omer-ayhan,custom-context-mcp,1,,"A TypeScript-based MCP server that transforms unstructured text into structured JSON data using customizable templates with placeholders. This implementation provides two main tools: 'group-text-by-json' which analyzes JSON templates to generate prompts that guide AI models in extracting key information, and 'text-to-json' which converts the AI-generated text into structured JSON objects based on the original template. The server supports complex nested JSON structures and intelligently extracts key-value pairs from text, making it ideal for applications that need to process AI outputs into structured data formats for downstream processing or integration with other systems."
omidsrezai,cv-mcp-tools,1,,"CV-MCP-Tools provides a suite of computer vision capabilities for language models through the Model Context Protocol. The repository includes three main components: an image generation server using FLUX.1-Schnell, an OCR server leveraging Qwen-VL and Janus models for text extraction and image understanding, and an object detection tool built on YOLO. Each component is containerized with Docker for easy deployment and exposes APIs for seamless integration. The implementation supports both Claude Desktop and Ollama through configuration files, with MinIO integration for image storage and retrieval. This toolset enables AI assistants to perform complex visual tasks including generating images from text prompts, extracting text from images, and identifying objects in photos without leaving the conversation interface."
oneofgods,vegalite-mcp-troubleshooting,0,,"This MCP server implementation provides troubleshooting and startup guidance for integrating Vega-Lite visualization capabilities with Claude. It includes documentation on common errors, recommended startup procedures, and configuration details to ensure smooth operation of the Vega-Lite server alongside Claude Desktop. The repository serves as a central resource for developers working on this integration, offering solutions to typical issues and best practices for deployment."
yokingma,one-search-mcp,17,1132,"One Search MCP Server provides a unified search and web scraping platform that integrates multiple search providers like SearxNG and Tavily, along with Firecrawl for advanced web content extraction. Built by zac_ma, it offers flexible tools for retrieving web search results, scraping webpage content, and extracting structured information across various formats and categories, making it useful for AI research, content aggregation, and intelligent web data retrieval."
onestar99,mcp-spring-test,0,,"Bitcoin MCP server provides a bridge to the CoinGecko cryptocurrency API, enabling AI assistants to fetch real-time and historical Bitcoin price data in various currencies. Built with Spring Boot and exposing tools through a standardized interface, it handles API rate limiting and error states appropriately while providing detailed logging. This implementation is particularly valuable for financial analysis, cryptocurrency tracking, and automated trading systems that need programmatic access to Bitcoin market data through natural language interaction."
onigeya,siyuan-mcp-server,6,,"SiYuan MCP Server provides a bridge to the SiYuan note-taking application, enabling AI assistants to interact with notes, documents, and knowledge bases through a comprehensive API. Built with TypeScript, this implementation offers tools for managing blocks, documents, files, SQL queries, and templates within SiYuan. The server authenticates via API tokens and exposes functionality for operations like creating documents, manipulating blocks, executing SQL queries, and rendering templates. Particularly valuable for users who want to leverage AI assistants to manage their knowledge base without switching context to the SiYuan interface."
onurpolat05,n8n-assistant,5,,"n8n-Assistant is an MCP server that enables AI assistants to search and retrieve information from n8n documentation, example workflows, and community forums. Developed by Onur Polat, it uses the Serper API for web searches and BeautifulSoup for content extraction from search results. The implementation provides a single tool that allows querying specific n8n resources by type, fetches relevant content asynchronously, and returns formatted results with source URLs. This server is particularly valuable for n8n users who need quick access to documentation and community solutions without leaving their AI assistant interface."
oopsyz,mcp,1,,"This MCP server implementation provides a bridge to a TMF620 Product Catalog Management API, allowing AI agents to interact with remote product catalogs. It offers tools for listing, retrieving, and creating catalogs, product offerings, and product specifications. The server includes configurable authentication, error handling, and supports both real and mock API endpoints. It's designed for use cases requiring product catalog management integration, such as e-commerce platforms or telecom service providers."
openadaptai,omnimcp,29,,"OmniMCP provides a robust UI automation framework leveraging visual understanding and AI interaction through the Model Context Protocol. Built by OpenAdapt.ai, it enables precise UI element detection, interaction, and verification using advanced computer vision techniques from Microsoft's OmniParser, with support for complex workflows across different interfaces. The implementation focuses on creating a flexible, typed system for AI-driven UI manipulation with comprehensive error handling and debug capabilities."
openbnb-org,mcp-server-airbnb,75,27366,"This MCP server provides AI assistants with access to Airbnb's search and listing details functionality without requiring API keys. Built with TypeScript using the Model Context Protocol SDK, it offers two main tools: airbnb_search for finding vacation rentals with various filters, and airbnb_listing_details for retrieving comprehensive information about specific properties. The implementation respects robots.txt rules by default (with an option to bypass), uses cheerio for HTML parsing, and processes the data to reduce context load by flattening arrays and cleaning objects. Developed by OpenBnB, it's ideal for travel planning use cases where users need to explore accommodation options and compare listing details."
opendatamcp,opendatamcp,109,11715,"OpenDataMCP, developed by the OpenDataMCP organization, connects open datasets to large language models through the Model Context Protocol. It provides a CLI tool for easy setup of MCP servers that expose public data sources, starting with integration for Claude AI. The implementation focuses on simplicity and standardization, using Python with minimal dependencies. OpenDataMCP aims to make millions of open government, NGO, and company datasets accessible to AI applications. It enables use cases like querying transportation data, analyzing public records, or incorporating open statistics into AI-assisted research and analysis tasks. The project is community-driven, allowing contributors to easily add new data sources using provided templates and guidelines."
askme765cs,open-docs-mcp,4,664,"Open-source MCP server that provides document management and search functionality for technical documentation. Built with TypeScript and leveraging jieba-wasm for Chinese language support, it crawls documentation sites, converts content to Markdown, and enables full-text search with Lunr.js indexing. Particularly valuable for teams needing to make their documentation searchable and accessible through AI assistants while maintaining support for multiple languages."
openledger,open-ledger-mcp-server,8,,"This MCP server implementation provides a bridge to the OpenLedger API, enabling AI assistants to interact with financial data and perform accounting operations. Developed using Bun and Express, it offers tools for managing transactions, companies, categories, and generating reports. The server is designed for use cases requiring AI-driven financial management, such as automated bookkeeping, transaction analysis, or generating financial insights from consolidated customer data."
openlinksoftware,mcp-sqlalchemy-server,8,,"MCP SQLAlchemy Server provides a bridge between AI assistants and databases through ODBC connections, enabling direct SQL and SPARQL query execution, schema exploration, and table management. Developed by Sergey Malinin, this implementation leverages SQLAlchemy and pyodbc to offer specialized tools for retrieving database schemas, describing tables, filtering table names, and executing queries with results in both JSONL and Markdown formats. The server has built-in support for Virtuoso DBMS with additional compatibility for PostgreSQL, MySQL, and SQLite, making it ideal for data analysis, database exploration, and knowledge graph querying applications where AI assistants need structured access to database systems."
wheattoast11,openrouter-deep-research-mcp,3,,"OpenRouter Research Agents MCP Server enables AI assistants to conduct deep, multi-agent research through OpenRouter's API. The server breaks down complex queries into specialized sub-questions using a planning agent, distributes these questions to multiple research agents running on different models (with configurable high/low cost options), and synthesizes the findings into comprehensive reports. Built with Node.js and the MCP SDK, it features caching for efficiency, flexible output formats, and support for both STDIO and HTTP/SSE transports, making it ideal for developers building AI applications that require thorough, evidence-based research capabilities."
opensensor,bn_cline_mcp,4,,"Binary Ninja MCP Server provides a bridge between Cline and Binary Ninja for analyzing binary files through the Model Context Protocol. It leverages Binary Ninja's personal license capabilities to offer tools for retrieving binary metadata, listing functions, disassembling code, and decompiling functions to C. The implementation consists of a JavaScript bridge that connects to a Python HTTP server, which in turn communicates with Binary Ninja's API, making it particularly valuable for reverse engineering tasks where users need AI assistance to understand complex binaries without switching contexts."
openshift-pipelines,mcp-tekton,2,,"MCP-Tekton is a proof-of-concept server that integrates Tekton CI/CD pipelines with AI assistants. Developed by the OpenShift Pipelines team, it provides tools for starting pipelines and monitoring pipeline runs in Kubernetes environments. The implementation uses Kubernetes client libraries to interact with Tekton resources and includes informers to track pipeline run status changes. It's particularly useful for DevOps teams who want to enable AI assistants to manage CI/CD workflows through natural language commands, allowing for pipeline execution and status monitoring without requiring direct cluster access."
open-strategy-partners,osp_marketing_tools,139,,"## Editing Codes 
A standardized system of codes for editing text.

## Writing Guide
OSP's guidelines and protocols for effective writing.

## Meta Information Guide 
A system to generate web-friendly titles and URLs.

## Value Map Positioning Guide
A framework for creating compelling product communications and positioning."
jagan-shanmugam,open-streetmap-mcp,34,,"The Windows Command Line MCP Server provides a robust, secure bridge between AI models and Windows system operations. It allows controlled execution of commands, project creation, and system information retrieval while maintaining strict security protocols."
opensvm,dexscreener-mcp-server,10,,"This DexScreener MCP server, developed for accessing on-chain crypto market data across multiple blockchains, provides a standardized interface for querying token prices and trading information. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers tools for retrieving real-time data from decentralized exchanges, with a focus on Solana memecoin markets. The implementation abstracts the complexities of interacting with various blockchain networks and DEX protocols, allowing AI systems to easily incorporate up-to-date cryptocurrency market data. This server is particularly useful for scenarios involving crypto price tracking, market analysis, or building applications that require access to decentralized exchange information across different blockchain ecosystems."
opensvm,solana-mcp-server,21,,"This Solana MCP server, developed by the opensvm team, provides a comprehensive interface for AI models to interact with the Solana blockchain. Built with Rust and leveraging the Solana RPC API, it offers a wide range of methods for querying account information, block data, system status, epoch details, token operations, and transaction handling. The implementation focuses on providing a clean abstraction layer over Solana's complex ecosystem, making it accessible for AI assistants or applications needing to analyze or interact with blockchain data. It's particularly useful for tasks like account balance checking, transaction analysis, token management, or blockchain metrics monitoring, enabling programmatic access to Solana data without requiring deep knowledge of the underlying RPC complexities."
opensvm,zig-mcp-server,11,,"This Zig MCP server, developed to enhance AI capabilities with Zig-specific functionality, provides tools for code optimization, compute unit estimation, code generation, and best practices recommendations. It integrates with the Model Context Protocol SDK and leverages GitHub's API for accessing popular Zig repositories. The server stands out by offering language-specific features like optimization level selection and comptime analysis. It's particularly useful for AI assistants and developers working with Zig, enabling them to generate, analyze, and optimize Zig code efficiently, as well as access curated language resources and documentation."
opentorah-ai,mcp-sefaria-server,0,,"Sefaria Jewish Library MCP Server provides AI assistants with access to Jewish texts and commentaries through the Sefaria.org API. Built with Python 3.12, it enables retrieval of Hebrew and English texts, weekly Torah portions (Parasha), and related commentaries. The server exposes tools for fetching specific text references and their associated commentaries, making it valuable for religious study, scholarly research, and educational contexts where access to traditional Jewish texts enhances the conversation experience."
openworkspace-o1,aws-ow-s3-mcp,2,,"AWS S3 MCP Server provides secure, pre-signed URL-based access to S3 bucket operations through a standardized MCP interface. It enables listing, retrieving, uploading, and deleting objects with configurable expiration times, designed to simplify cloud storage interactions for AI assistants. Built with TypeScript and AWS SDK, it offers a straightforward way to integrate S3 file management capabilities directly into conversational workflows."
operative-sh,web-eval-agent,179,,"Web-QA-Agent is an MCP server implementation that enables AI assistants to evaluate web application user experiences through automated browser interactions. Built by Operative-Sh, it leverages Playwright for browser automation and integrates with Claude AI models to perform UX/UI analysis tasks. The server provides a specialized tool for assessing web interfaces, capturing console logs and network requests during evaluation, and generating detailed reports on usability issues and recommendations. This implementation is particularly valuable for UX researchers, web developers, and product teams who need AI-powered analysis of web application interfaces without manual testing."
opgginc,esports-mcp,3,,"The OP.GG Esports MCP server connects AI agents to OP.GG's League of Legends esports data through a standardized interface. Built with TypeScript and Node.js, it provides a single tool that fetches upcoming match schedules from OP.GG's GraphQL API and formats them with essential details including match name, league, status, score, scheduled time, and direct links. This implementation enables AI assistants to seamlessly retrieve and present current esports information to users interested in following professional League of Legends competitions."
comet-ml,opik-mcp,53,,"Opik MCP Server is an open-source implementation of the Model Context Protocol for the Opik platform. It provides a unified interface for interacting with Opik's capabilities, supporting multiple transport mechanisms for flexible integration into various environments."
opticayaan,cat-facts-mcp,0,194,"Cat Facts MCP is a server implementation that provides access to cat facts through the Model Context Protocol. Built by Ayaan Gill, it connects to the Layer API service using a provided API key and exposes tools for retrieving cat-related information. The server runs on stdio transport, making it compatible with Claude Desktop integration, and includes error handling for failed API calls. It's designed to be a simple demonstration of how to build an MCP server with the @modelcontextprotocol/sdk package."
optistar,mcp-server-filesystem,0,,"A Go implementation of a filesystem MCP server that provides secure access to files and directories on the host system. It enforces strict path validation to prevent unauthorized access outside allowed directories and supports a comprehensive set of file operations including reading, writing, editing, moving files, and directory management. The server includes features like gitignore-style exclude patterns for file searches and returns detailed JSON metadata for file information and directory trees, making it particularly useful for AI assistants that need to safely interact with local filesystems while maintaining security boundaries."
oraichain,orai-mcp,1,,"Oraichain MCP Server provides a bridge for AI agents to interact with the Oraichain blockchain through a standardized interface. Built with TypeScript and leveraging the CosmJS library, it enables querying wallet balances, delegations, and executing transactions on the Oraichain network. The server implements the Model Context Protocol (MCP) over Server-Sent Events (SSE), allowing AI assistants to perform blockchain operations without leaving the conversation context. This implementation is particularly useful for cryptocurrency management, smart contract interaction, and blockchain data retrieval within AI-assisted workflows."
orbit-logistics,notion-mcp-server,18,1509,"This MCP server implementation provides a complete interface to the Notion API, enabling Large Language Models (LLMs) to interact with Notion through natural language instructions. Developed by Jan Czekala, it exposes the full range of Notion API operations as tools, including reading, creating, updating, and deleting Notion pages. The server is designed to work seamlessly with Cursor and Claude Desktop, offering easy integration through npm and custom configuration options. It's particularly useful for AI-assisted content management, knowledge base interactions, and automated Notion workspace operations. The implementation focuses on providing a robust, type-safe bridge between LLMs and Notion, leveraging TypeScript and the official Notion SDK."
aiopinions,ton-access-mcp,0,,"Provides a Model Context Protocol (MCP) server for the ton-access library, enabling AI models to interact with the TON blockchain through a standardized interface. Built by Orbs Network, this implementation offers a comprehensive set of tools for generating decentralized RPC endpoints, supporting multiple networks and protocols like TonCenter API v2 and TonHub API v4. Particularly useful for developers building blockchain applications or AI assistants that need seamless TON blockchain access."
odewahn,orm-mcp-tools,0,,"ORM Discovery MCP provides a bridge to O'Reilly Media's content search API, enabling AI assistants to find relevant books, articles, and other learning resources. Built with FastMCP, it offers tools for searching O'Reilly content with filters and retrieving detailed metadata including titles, authors, ratings, and topics. The server also includes a persona system that allows the assistant to adopt different professional perspectives when responding to queries. This implementation is particularly valuable for technical professionals seeking curated educational resources without leaving their conversation interface."
odewahn,orm-discovery-mcp,0,,"This MCP server provides a connection to O'Reilly's learning platform API, enabling AI assistants to search for content across O'Reilly's extensive library of technical books and resources. Built with FastMCP and Starlette, it exposes a search_content tool that queries the O'Reilly API with authentication, transforms the results into a structured YAML format, and returns essential metadata including titles, authors, ratings, and URLs. The server runs as an SSE-based endpoint, making it ideal for workflows requiring access to technical documentation, programming guides, or research materials from O'Reilly's collection."
orhanveli,openapi-client-generator-mcp,0,,"This OpenAPI client generator, built with TypeScript, automates the creation of API clients from OpenAPI specifications. It leverages the Model Context Protocol to extend its capabilities, allowing for dynamic client generation and integration with AI-powered workflows. The implementation stands out by combining OpenAPI parsing with MCP's extensibility, enabling seamless API interactions within AI systems. It's particularly useful for developers and AI applications that need to quickly integrate and interact with multiple RESTful APIs, streamlining the process of API consumption and reducing development time for complex integrations."
orliesaurus,pulsemcp-server,13,608,"This MCP server, developed by orliesaurus, provides a standardized interface for querying and retrieving data from PulseMCP, a service that collects information about MCP servers and clients. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers capabilities for listing MCP servers and available integrations. The implementation focuses on efficient pagination and filtering of server data, enabling AI models to access up-to-date information about the MCP ecosystem. By connecting AI assistants with PulseMCP's aggregated data, this server allows for sophisticated scenarios like discovering relevant MCP implementations, analyzing integration trends, and automating the selection of appropriate MCP servers for specific tasks. It's particularly useful for applications and AI systems that need to dynamically interact with or recommend MCP services based on real-time ecosystem data."
toolhouse-community,mcp-server-toolhouse,8,,"This MCP server, developed by orliesaurus, integrates the Toolhouse API with Groq's LLM capabilities to provide AI assistants access to a wide range of tools. It fetches tools from a specified Toolhouse bundle and executes them using Groq's powerful language models. The server implements robust error handling, asynchronous operations, and configurable settings for API keys and model parameters. By combining Toolhouse's extensible tool ecosystem with Groq's advanced language processing, this implementation enables AI assistants to perform diverse tasks ranging from data analysis to creative content generation. It is particularly useful for applications requiring flexible tool integration, high-performance language processing, or any scenario where an AI system needs to leverage a variety of external tools and services."
oschina,mcp-gitee,19,,"MCP-Gitee provides a bridge between Claude and Gitee's API, enabling AI assistants to interact with repositories, issues, pull requests, and user data on the Gitee platform. Built by OSChina, this Go-based implementation exposes a comprehensive set of tools for repository management (creating repos, releases, fetching file content), issue tracking (creating, updating, commenting), pull request workflows (creating, merging, commenting), and user notifications. The server supports both stdio and SSE transport protocols, making it compatible with Claude Desktop integration, and includes robust error handling for API interactions. Particularly valuable for developers who need AI assistance with code collaboration workflows on Gitee without leaving their conversation interface."
osomai,servicenow-mcp,40,,"ServiceNow MCP server provides a bridge between AI assistants and ServiceNow ITSM functionality, enabling management of incidents, service catalogs, change requests, workflows, and changesets through natural language. Built with Python using the MCP protocol, it supports multiple authentication methods (Basic, OAuth, API Key) and features a modular architecture with specialized tools for each ServiceNow module. The implementation includes Claude Desktop integration for seamless interaction, making it particularly valuable for IT professionals who need to create incidents, browse service catalogs, manage change requests, or automate workflows without leaving their AI assistant interface."
edenyavin,osv-mcp,2,,"OSV-MCP is a lightweight server implementation that integrates with the OSV Database API, allowing AI assistants to query for security vulnerabilities in software packages. Developed by Eden Yavin, it provides tools for retrieving CVE information related to specific packages, identifying affected versions, and determining which versions contain fixes for known vulnerabilities. The server runs using the Model Context Protocol and is particularly useful for developers and security professionals who need to assess the security posture of their dependencies without manually searching through vulnerability databases."
other-blowsnow,mcp-server-chinarailway,6,,"This MCP server provides an interface to the Chinese Railway (12306) system, allowing Claude to query train schedules, ticket availability, and related information. Built with Node.js and the Model Context Protocol SDK, it leverages the moment.js library for date handling and zod for input validation. The implementation exposes railway data through a structured API that can be integrated into conversations, making it useful for travel planning, itinerary creation, and transportation logistics within China without requiring users to navigate the official railway website."
HEAD,filesystem,0,,"MCP-Server is a filesystem-focused implementation that enables AI assistants to interact with local files and documents. It leverages aiofiles for asynchronous file operations, httpx for HTTP requests, and provides document processing capabilities through python-docx and pandas for data manipulation. The server allows for reading, writing, and analyzing various file formats, making it particularly valuable for workflows that require document generation, file management, or data extraction tasks without leaving the conversation interface."
outblock,flow-mcp-server,0,413,"Flow MCP Server provides direct RPC communication with the Flow blockchain, enabling AI assistants to interact with Flow through a set of specialized tools. Developed by Outblock, it offers capabilities for checking account balances, executing Cadence scripts, sending transactions, resolving domain names (.find and .fn), and interacting with Flow-EVM integration through Cadence Owned Accounts. The server supports both mainnet and testnet environments, can run in HTTP or stdio mode for direct integration, and includes comprehensive contract address configurations - making it particularly valuable for blockchain applications that need to query token balances, execute custom scripts, or interact with smart contracts without leaving the AI conversation interface."
owayo,mcp-source-relation,0,,"This MCP implementation, developed by owayo, provides a source relation functionality for MCP servers. Built with Python and leveraging the MCP CLI, it offers a tool for managing relationships between different data sources within an MCP ecosystem. The implementation focuses on simplifying the process of connecting and organizing various data inputs, enabling more efficient data retrieval and processing. By standardizing source relationships, this tool enhances the flexibility and scalability of MCP-based applications, making it particularly useful for projects dealing with multiple, diverse data sources or complex data integration scenarios."
owayo,mcp-src-tree,0,,"This MCP server, developed using Python, provides functionality for generating source code directory trees. It integrates with the MCP framework and utilizes the pathspec library for flexible path matching and filtering. The implementation focuses on creating structured representations of project file hierarchies, making it useful for tasks like code analysis, documentation generation, and project structure visualization. By offering a standardized interface for tree generation through MCP, it enables AI assistants and other tools to easily obtain and work with source code directory structures across different projects and languages."
oxplot,clipboard-mcp,1,,"Clipboard MCP is a server implementation that enables AI assistants to access image content from the macOS clipboard. Developed by oxplot, it uses Objective-C bindings to retrieve images from the system clipboard, convert them to PNG format, and serve them through the Model Context Protocol. The server is designed to work with Claude Code CLI, allowing users to simply copy an image to their clipboard and ask Claude questions about the visual content without manually uploading files. Currently, the implementation only supports images on macOS, making it particularly useful for developers seeking quick visual analysis of screenshots, diagrams, or code snippets."
oxplot,fetch-mcp,0,,"Fetch-MCP is a Go-based MCP server that enables AI assistants to retrieve content from URLs. It provides a single tool called 'fetch' that supports customizable HTTP requests with configurable headers, methods, and timeouts. The implementation handles both text and image responses appropriately, returning text content as UTF-8 strings and images as base64-encoded data. Designed to work with Claude Code CLI through a simple installation command, this tool is particularly useful for scenarios requiring web content retrieval, API interactions, or image fetching directly within AI assistant workflows."
oxplot,snowflake-mcp,0,,"Snowflake MCP provides a secure interface for querying Snowflake databases through external browser authentication, avoiding the need to store credentials on disk. It enables exploration of database schemas, tables, and views through a hierarchical resource structure, and includes a query tool for executing SQL statements with results limited to 1000 rows. The implementation emphasizes security by requiring users to manage permissions at the Snowflake account level, as it does not implement write restrictions within the MCP itself."
oxylabs,oxylabs-mcp,14,4064,"Oxylabs MCP server provides a bridge to Oxylabs web scraping services, enabling AI assistants to extract and process web content. Built with Python 3.12+, it handles authentication through Oxylabs credentials and transforms raw web data into clean, structured formats using lxml and markdownify. The implementation supports containerized deployment via Docker and includes comprehensive error handling. This server is particularly valuable for workflows requiring real-time web data extraction, content analysis, or monitoring of web resources without requiring users to manually collect information."
ozamatash,deep-research-mcp,67,,"This open-source AI-powered research assistant performs iterative, deep research on any topic by combining search engines, web scraping, and large language models. It is available as a Model Context Protocol (MCP) tool for seamless integration with AI agents. The implementation focuses on simplicity, keeping the codebase under 500 lines of code for easy understanding and extensibility. It features intelligent query generation, depth and breadth control, smart follow-up questions, and comprehensive markdown reports. The tool is designed for efficient concurrent processing and can be used standalone or integrated into larger AI systems for in-depth, multi-level research tasks."
ozgrozer,mcp-replicate-flux,6,,"This MCP server implementation provides a bridge to Replicate's image generation capabilities, enabling AI assistants to create images based on text prompts. Developed by ozgrozer, it utilizes Node.js and integrates with the Model Context Protocol SDK. The server focuses on secure API key management and leverages Replicate's 'flux-schnell' model for fast image generation. It offers customizable parameters such as image quality, aspect ratio, and output format. The implementation is particularly useful for applications requiring quick visual content creation, such as prototyping, content generation, or enhancing text-based interactions with visual elements."
ozgrozer,mcp-get-terminal-logs,1,,"This MCP server implementation provides a tool for retrieving terminal logs from a specified directory. Developed by ozgrozer, it offers functionality to read the last 100 lines from a log file and clear its contents. The server is built using Node.js and integrates with the Model Context Protocol SDK. It focuses on simplicity and efficiency, making it useful for monitoring and debugging applications that generate log files. The implementation is particularly suited for scenarios where real-time access to the most recent log entries is required, such as in development environments or for system administrators needing quick insights into application behavior."
pab1it0,chess-mcp,23,,"Chess.com MCP Server provides tools and resources for interacting with the Chess.com Published Data API, enabling AI assistants to access player profiles, statistics, game data, and club information. Developed by Pavel Shklovsky, this implementation offers both JSON and PGN format support for retrieving chess games, with specialized endpoints for titled players, club memberships, and real-time player status. The server is containerized with Docker for easy deployment and includes comprehensive test coverage, making it ideal for chess analysis, player research, and tournament data exploration."
pab1it0,prometheus-mcp-server,29,,"Prometheus MCP Server provides a bridge between AI assistants and Prometheus monitoring systems, enabling real-time metrics analysis through standardized interfaces. Built by pab1it0, it offers tools for executing PromQL queries, discovering available metrics, and retrieving metadata about monitoring targets. The implementation supports various authentication methods (basic auth and bearer tokens), is containerized with Docker for easy deployment, and includes comprehensive documentation for integration with Claude Desktop. This server is particularly valuable for DevOps workflows, system monitoring, and performance analysis use cases where AI assistants need direct access to operational metrics without switching context."
pab1it0,tripadvisor-mcp,15,,"Tripadvisor MCP Server provides tools for interacting with the Tripadvisor Content API, enabling location searches, detailed information retrieval, reviews access, and photo collection for hotels, restaurants, and attractions. Developed by Pavel Shklovsky under MIT license, this implementation requires a Tripadvisor API key and supports both direct execution and containerized deployment via Docker. The server exposes five specialized tools that handle different aspects of the Tripadvisor data ecosystem, making it ideal for travel planning applications, recommendation systems, or any workflow requiring structured access to Tripadvisor's extensive tourism database."
packetnomad,cursor-mcp-apple-notes,0,,"This Cursor MCP plugin enables direct integration with Apple Notes, allowing users to search through notes, create new ones, and read existing notes without leaving the editor. Built for macOS users, it adds three main commands to Cursor: notes.search for finding notes by query, notes.create for adding new notes with title and content, and notes.read for accessing specific notes by ID. The plugin requires macOS for Apple Notes integration and Cursor with MCP support."
packetnomad,linear-mcp,0,,"Linear MCP Server provides AI assistants with direct access to Linear's issue tracking system, enabling creation, retrieval, updating, and deletion of issues, comments, and projects. Built by Dimosthenis Kaponis, this TypeScript implementation offers advanced filtering capabilities including cycle-based queries (current/next/previous), team management, and project updates with health tracking. The server handles user resolution (supporting 'me' references), relationship tracking between issues, and markdown content cleaning - making it particularly valuable for software development workflows where issue management and project tracking are needed without leaving the conversation interface."
paddlehq,paddle-mcp-server,8,1821,"Paddle MCP Server provides a developer-friendly interface to the Paddle Billing API, enabling interactions with products, prices, customers, transactions, and reports through a standardized protocol. Built by Paddle's developer experience team, this TypeScript-based server allows developers to programmatically manage billing operations using natural language commands. Useful for SaaS businesses seeking streamlined financial API interactions."
qwert666,mcp-server-foundry,3,,"Foundry MCP Server provides a bridge to the Palantir Foundry platform, enabling AI assistants to interact with ontology data and execute SQL queries through a standardized interface. The server exposes five key tools: listing ontology types, querying specific ontology objects with filters, executing SQL queries against datasets, listing available functions, and executing ontology functions with parameters. Built with Python using the FastMCP framework, it authenticates with Foundry using either user tokens or client credentials, making it ideal for data analysts and engineers who need to access and manipulate enterprise data in Foundry through conversational AI."
paliago,allabolag-mcp,1,,"Allabolag MCP Server provides a bridge to the Swedish company registry database, enabling AI assistants to search for companies by name or location and retrieve detailed company information. Built with TypeScript using the Model Context Protocol SDK, it offers two specialized tools: one for searching companies that returns basic details including organization numbers and locations, and another for fetching comprehensive company profiles including revenue, employee count, industry classification, and business descriptions. The implementation uses web scraping with Axios and Cheerio to extract data from allabolag.se, making it valuable for business research, market analysis, and due diligence tasks involving Swedish companies."
palolxx,geminimcpa,1,,"Gemini MCP Server provides a flexible sequential thinking tool powered by Google's Gemini AI, enabling step-by-step problem analysis and reasoning through a standardized MCP interface. Built with Node.js and Express, it supports dynamic thought generation, session tracking, and tool-based interactions, making it particularly useful for developers and AI assistants seeking structured, AI-assisted reasoning workflows. The implementation features robust error handling, API key management, and seamless integration with Cursor IDE."
pansila,mcp_server_gdb,17,,"Features
Create and manage GDB debug sessions
Set and manage breakpoints
View stack information and variables
Control program execution (run, pause, step, etc.)
Support concurrent multi-session debugging"
panth1823,formula1-mcp,3,,"Formula1-MCP is a TypeScript server implementation that provides real-time Formula 1 racing data through the Model Context Protocol. Developed by Panth Shah, it integrates with both the OpenF1 API and Ergast API to offer comprehensive access to live timing data, historical race results, driver information, team radio messages, weather conditions, and telemetry. The server includes caching mechanisms to optimize performance and rate limiting to prevent API abuse. It's particularly valuable for F1 enthusiasts, data analysts, and developers building applications that require detailed racing statistics, live session updates, or historical performance comparisons."
hbg,mcp-paperswithcode,3,,"PapersWithCode MCP provides a comprehensive interface to the PapersWithCode API, enabling AI assistants to search and retrieve information about research papers, authors, conferences, and code implementations in machine learning. Built using FastMCP, it offers tools for searching research areas, exploring papers by author, retrieving paper details, and even extracting content directly from PDF papers. The implementation includes pagination support for handling large result sets and provides structured access to repositories, datasets, methods, and results associated with papers, making it valuable for academic research, literature reviews, and staying updated on machine learning advancements."
parassolanki,github-mcp-server,1,,"This MCP server implementation provides a bridge to the GitHub API, enabling AI assistants to interact with repositories, issues, and other GitHub resources. Developed by Paras Solanki, it offers tools for querying GitHub data and performing actions via a standardized interface. The server is built with TypeScript and uses environment variables for configuration, making it suitable for secure deployment in various environments."
parassolanki,jira-mcp-server,2,994,"Jira MCP Server provides a bridge between AI assistants and Jira API, enabling interaction with Jira issues and projects directly through the Model Context Protocol. Built by Paras Solanki, this Node.js implementation authenticates with Jira using personal access tokens and exposes endpoints for querying and manipulating Jira data. The server can be run locally or deployed as a Docker container, making it flexible for different integration needs. It's particularly useful for workflows requiring project management tasks like issue tracking, sprint planning, or generating reports without leaving the conversation interface."
pars-doe,autodocument,2,,"Autodocument is an MCP server that automatically generates documentation, test plans, and code reviews for software repositories using AI models through OpenRouter. It recursively analyzes code directories in a bottom-up approach, respecting .gitignore rules and file size limits, then uses customizable prompts to generate appropriate documentation for each component. The server includes tools for different documentation types, handles existing file updates, and provides detailed progress reporting during long-running operations. Developed by the US Department of Energy, it's particularly valuable for maintaining documentation in large codebases without requiring manual effort from developers."
parthshr370,mcp-servers,1,,"The Filesystem MCP Server provides AI assistants with direct access to local filesystem operations through a set of specialized tools. Built using the FastMCP framework, it implements two core functions: reading file contents and listing directory entries, both with comprehensive error handling. The server can run in either stdio or Server-Sent Events (SSE) transport modes, making it flexible for different deployment scenarios. The implementation includes a test suite to verify functionality and an example client that demonstrates interactive usage with Claude models. This server is particularly valuable for workflows requiring AI assistants to access and analyze local files without needing separate file management tools."
pasie15,scenario.com-mcp-server,1,,"Scenario.com MCP Server provides a bridge to the Scenario.com API, enabling AI assistants to generate images and remove backgrounds from images. Built with the FastMCP framework in Python, this server exposes tools for text-to-image generation and background removal, along with resources for tracking jobs and assets. The implementation authenticates with the Scenario API using environment variables for API keys and secrets, making it particularly useful for applications that need to create or manipulate images based on text prompts without implementing complex API integration themselves."
patrice-truong,cosmosdb-mcp,1,,"CosmosDB MCP Server provides a bridge between language models and Azure Cosmos DB, enabling AI assistants to search products, retrieve orders, and access weather data through specialized tools. Built by Patrice Truong, this implementation uses the Model Context Protocol SDK to expose database operations with vector search capabilities, making it particularly useful for e-commerce applications. The server connects to a Next.js frontend that displays products, manages shopping carts, and processes orders, creating a complete demonstration of how AI assistants can interact with database-backed applications through the MCP standard."
patrickkalkman,encoding-devops,1,,"This MCP server implementation provides a bridge to an encoding API, enabling AI assistants to interact with encoding services. Developed by Patrick Kalkman, it offers a simple interface for encoding-related operations. The server is designed to work with Python environments and utilizes aiohttp for asynchronous HTTP requests. It's particularly useful for AI applications requiring encoding capabilities, such as data compression or format conversion. The implementation focuses on secure API key management through environment variables and efficient request handling, making it suitable for both development and production use cases."
paulsmith,tailscale-mcp-server,3,,"Tailscale MCP Server provides read-only access to your Tailscale network directly from Claude Desktop and other MCP-compatible clients. Developed by Paul Smith, this Go implementation securely exposes a curated set of Tailscale CLI commands as tools and prompts, enabling users to check network status, view connected devices, run diagnostics, ping hosts, and query exit nodes without modifying network configuration. The server includes built-in safety measures that restrict operations to a whitelist of read-only commands, making it particularly useful for network administrators who want to monitor their Tailscale environment through AI assistants while maintaining security boundaries."
pavanjava,kafka_mcp_server,10,,"Kafka MCP Server provides a standardized interface for AI models to interact with Apache Kafka topics, enabling publish and consume functionalities through a simple, configurable server. Built with Python and the FastMCP framework, it supports both stdio and server-sent events (SSE) transports, making it easy to integrate Kafka message streaming into AI workflows with minimal configuration overhead."
pavelanni,mcp-server-minio-go,,,"This MCP server, developed by Pavel Anni, provides a bridge to MinIO object storage servers. Built with Go and leveraging the MinIO Go SDK, it offers functions for bucket and object management, file uploads and downloads, and object tagging. The implementation focuses on both user-level operations and admin-level functions like server status monitoring. It supports various MinIO deployments, including the public Playground server. The server is particularly useful for applications requiring cloud-native object storage integration, enabling use cases such as data backup, content delivery, and large-scale data processing without complex S3-compatible API integrations."
pavel-bc,mcp-blockchain-query,0,,"This MCP server implementation provides tools for querying Bitcoin blockchain data using Blockchain.com's Data and Query APIs. Developed by Pavel Kiselyov, it offers a range of functionalities including retrieving block and transaction details, address information, network statistics, and market data. The server supports both stdio and SSE transports, making it versatile for different integration scenarios. Built with Python and leveraging the Model Context Protocol, it focuses on providing a standardized interface for blockchain data access. This implementation is particularly useful for applications requiring real-time Bitcoin network analysis, cryptocurrency market monitoring, or blockchain-based financial tools."
paybyrd,ai-agent-toolkit-js,0,3385,"Paybyrd Agent Toolkit is a JavaScript library that enables AI models to interact with Paybyrd's payment processing API through OpenAI function calling and the Model Context Protocol. The toolkit provides tools for creating payment links, processing refunds, and retrieving order information, with support for both OpenAI and Anthropic Claude models. It features a configurable permission system to restrict API access, comprehensive error handling, and can be used either as a Node.js library or as a standalone MCP server that integrates with Claude Desktop. Particularly valuable for applications that need to incorporate payment processing capabilities directly within AI assistant conversations."
paymanai,payman-doc-mcp-server,0,,"Provides a bridge to PaymanAI's documentation and SDK, enabling AI assistants to retrieve documentation, search content, find code examples, troubleshoot integration issues, and get SDK-specific guidance. Built with TypeScript and the MCP SDK, the server dynamically fetches and caches documentation from docs.paymanai.com, offering tools for documentation retrieval, problem-solving, and SDK assistance across Node.js and Python implementations."
qinyuanpei,mcp-server-weibo,2,,"MCP Server Weibo provides a bridge to China's popular social media platform Weibo, enabling AI assistants to search for users, retrieve profile information, and extract user posts. Built by Payne, this implementation uses the Weibo mobile API to fetch data asynchronously with pagination support, making it particularly valuable for monitoring social media trends, researching Chinese social media content, or tracking specific Weibo accounts without requiring direct access to the platform. The server exposes three main tools: searching users by keyword, retrieving detailed user profiles, and extracting user feeds with customizable limits."
arbuthnot-eth,paypal-mcp,4,,"PayPal MCP Server provides integration with PayPal's APIs, enabling AI assistants to process payments, manage orders, create invoices, handle subscriptions, and perform business operations through a standardized interface. Built with TypeScript and Node.js, it implements OAuth 2.0 authentication with automatic token refresh, comprehensive input validation using Zod schemas, and detailed error handling. The server exposes tools for payment processing (creating orders, capturing payments, managing tokens), business operations (product management, invoicing, payouts), and user management - making it particularly valuable for e-commerce applications, financial services, and business automation workflows."
HEAD,modelcontextprotocol,36,718,"The PayPal Model Context Protocol server allows you to integrate with PayPal APIs through function calling. This protocol supports various tools to interact with different PayPal services.

"
pblittle,lightning-mcp-server,3,,"An MCP server for interacting with Lightning Network nodes, enabling natural language queries about channel information, balances, and node status. Built with TypeScript and strong type safety using Zod schemas, it supports both real and mock LND node connections, providing a flexible interface for querying Lightning Network data through conversational AI interactions."
pbohannon,notion-api-mcp,22,,"This Notion API MCP implementation, developed using Python, provides a streamlined interface for interacting with Notion's API through the Model Context Protocol. It leverages libraries like httpx for efficient HTTP requests, pydantic for data validation, and structlog for structured logging. The implementation focuses on enhancing the Notion integration with advanced features, as indicated by its description. It's designed for easy setup and usage, with a clear project structure and comprehensive testing support. This MCP server is particularly useful for AI assistants or applications needing to automate Notion workflows, enabling tasks like document management, knowledge base interactions, and project tracking without requiring deep knowledge of the Notion API complexities."
pbteja1998,sourcesyncai-mcp,1,,"SourceSync.ai MCP Server provides a standardized interface for AI models to interact with SourceSync.ai's knowledge management platform. Built by Bhanu Teja Pachipulusu, it enables managing namespaces, ingesting content from various sources (text, URLs, websites, external services), retrieving and updating documents, and performing semantic and hybrid searches against knowledge bases. The implementation supports multiple AI clients including Claude Desktop, Cursor, and Windsurf, making it valuable for workflows requiring knowledge management, content retrieval, and information discovery without leaving the conversation interface."
peakmojo,mcp-server-zoom-noauth,1,,"MCP Server for Zoom (No Auth) provides a headless interface to Zoom's API functionality without requiring direct user authentication. Developed by peakmojo, this server handles OAuth flows behind the scenes and offers tools for accessing Zoom cloud recordings, meeting details, and transcripts. Unlike typical Zoom integrations, it's designed to operate in a completely 'noauth' environment where all credentials are passed through tool arguments rather than stored locally, making it ideal for scenarios where direct user authentication flows aren't feasible or desirable."
peancor,moodle-mcp-server,5,,"Moodle MCP Server provides an AI-powered interface for managing educational workflows within Moodle, enabling automated interactions with courses, students, assignments, and quizzes. Built with TypeScript and the Model Context Protocol SDK, it exposes tools for retrieving student information, managing assignments, and providing feedback, specifically designed to streamline administrative tasks for educators through natural language interactions."
pedrodnt,mcp-deepwebresearch,0,,"MCP-DeepWebResearch provides enhanced web research capabilities for AI assistants, enabling both standard Google searches and parallel multi-query execution for more comprehensive information gathering. Built with TypeScript and Playwright, it features intelligent content extraction that converts web pages to clean markdown, screenshot capture functionality, and a queue management system that handles rate limiting and error recovery. The implementation includes specialized tools for visiting web pages, taking screenshots, and executing batch searches in parallel, making it particularly valuable for workflows requiring deep research across multiple sources or topics."
peggyjv,mcp-forge,0,,"MCP-Forge provides a Rust-based interface for Foundry, enabling AI agents to interact with Ethereum smart contract development tools. The implementation offers file management capabilities through a set of tools that allow storing, fetching, updating, and deleting files, which serves as the foundation for compiling and simulating Forge scripts. Built on the offeryn framework, it exposes these operations via a JSON-RPC API over Server-Sent Events (SSE), making it particularly valuable for AI-assisted smart contract development workflows that require direct interaction with Foundry's toolchain."
peikuo,china-stock-mcp-server,2,,"China-Stock-MCP-Server provides real-time access to Chinese stock market data through the AKShare financial data library. This Python implementation exposes over 40 tools for retrieving market overviews, individual stock information, sector analysis, fund flows, and financial indicators across Chinese exchanges (Shanghai, Shenzhen, Beijing) as well as Hong Kong and US markets. The server handles data formatting with configurable row limits and error handling, making it particularly valuable for financial analysis, investment research, and market monitoring applications that require current Chinese market data."
peng-shawn,mermaid-mcp-server,35,5216,"This MCP server implementation converts Mermaid diagrams to PNG images. Developed by Shawn Peng, it uses Puppeteer for high-quality headless browser rendering and supports multiple diagram themes and customizable background colors. The server exposes a single 'generate' tool, making it easy to integrate Mermaid diagram generation into AI-assisted workflows or applications that require visual representation of data structures and processes."
ppl-ai,modelcontextprotocol,913,,"An MCP server implementation that integrates the Sonar API to provide Claude with unparalleled real-time, web-wide research."
clssck,researcher-mcp,1,,"MCP-researcher is a Node.js server that integrates Perplexity AI's search capabilities with Claude Desktop and Cline through the Model Context Protocol. It provides tools for general search queries, documentation retrieval, API discovery, and code modernization assistance while maintaining conversation history in SQLite. The implementation features intelligent rate limiting with exponential backoff, connection pooling for reliable API operations, and comprehensive error handling. Particularly valuable for developers who need research assistance, documentation lookups, and deprecated code analysis without leaving their AI assistant interface."
pete0-xyz,notion-mcp,,,"This Notion MCP implementation, developed by Pete McCarthy, provides a standardized interface for interacting with Notion databases and pages through the Model Context Protocol. Built with TypeScript and leveraging the @notionhq/client library, it offers comprehensive coverage of Notion API endpoints including database operations, page management, block manipulation, user handling, and search functionality. The implementation abstracts complex Notion API interactions into simple MCP tools, enabling AI systems to easily create, read, update, and query Notion content. It is designed for seamless integration with MCP-compatible clients, making it valuable for use cases such as automated note-taking, knowledge management, project tracking, and collaborative document creation within Notion workspaces."
peterparker57,project-hub-mcp-server,2,,"This Project Hub MCP server, developed to streamline project management and GitHub integration, offers a comprehensive suite of tools for local project handling, change tracking, and GitHub repository synchronization. It provides features such as project creation, change recording, GitHub account management, and automated commit handling. The implementation focuses on simplifying complex workflows by offering a unified interface for both local and remote operations. It's particularly useful for developers and teams looking to manage multiple projects efficiently, automate version control tasks, and maintain seamless integration between local development environments and GitHub repositories. The server's multi-account GitHub support and source file scanning capabilities make it adaptable to various development scenarios and team structures."
petrbroz,aps-mcp-server,10,,"APS-MCP-Server provides secure access to Autodesk Platform Services (APS) API through a Node.js-based Model Context Protocol server. Built by Petr Broz, it leverages the new Secure Service Accounts feature for fine-grained access control, allowing AI assistants to interact with Autodesk Construction Cloud projects, documents, and issues. The implementation includes tools for listing accounts, projects, folder contents, document versions, and construction issues, making it valuable for architecture, engineering, and construction workflows where accessing project data directly within conversations enhances productivity."
phact,mcp-google-docs,9,5878,"MCP Google Docs server enables viewing, editing, and creating Google Docs with full comment support. Built with Python 3.13, it integrates with the Google API to provide seamless document management capabilities through the MCP protocol. The implementation handles authentication through Google OAuth, making it ideal for workflows requiring collaborative document editing, content creation, or document review processes without leaving the conversation interface."
phialsbasement,koboldcpp-mcp-server,2,236,"This KoboldAI MCP server, developed by Phiality, enables integration between KoboldAI's text generation capabilities and MCP-compatible applications. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a standardized interface for text generation, chat completion, and Stable Diffusion image generation. The implementation focuses on offering OpenAI-compatible API endpoints and persistent chat memory. It's particularly useful for developers and AI applications needing local, customizable language model interactions, enabling use cases such as creative writing assistance, chatbots, and AI-powered content generation without relying on cloud-based services."
phialsbasement,cmd-mcp-server,9,1920,"This CMD MCP server, developed by PhialsBasement, enables AI assistants to execute command-line operations on both Windows and Linux systems through a standardized MCP interface. Built with TypeScript and leveraging the official MCP SDK, it provides cross-platform compatibility for running CMD commands and establishing SSH connections. The server abstracts away the complexities of direct command-line interaction, allowing AI models to perform system operations, automate tasks, and integrate with local environments. It is particularly useful for scenarios requiring remote system management, task automation, or AI-driven interaction with command-line tools across different operating systems."
phialsbasement,mcp-github-server-plus,2,,"This MCP server, developed by Phialsbasement, provides a comprehensive interface for interacting with the GitHub API. Built using TypeScript and the Model Context Protocol SDK, it offers a wide range of tools for repository management, file operations, issue tracking, and code search. The implementation focuses on simplifying complex GitHub workflows, including automatic branch creation and batch operations. It's particularly useful for developers and teams who want to integrate GitHub operations into their AI-assisted workflows, enabling use cases such as automated code reviews, project management, and repository maintenance without directly navigating GitHub's web interface."
phialsbasement,mcp-time,5,493,"This MCP server, developed by zepar, provides a simple interface for retrieving the current time in Japan Standard Time (JST). Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a straightforward way to obtain timestamps in the YYYYMMDDHHMMSS format using macOS system commands. The implementation focuses on delivering accurate time data through a standardized MCP interface, making it particularly useful for applications and AI assistants that require precise JST timestamps without the complexity of full-fledged time zone libraries. It's designed to work seamlessly with the Claude desktop app on macOS, offering a lightweight solution for time-sensitive operations in the Japanese time zone."
phialsbasement,nmap-mcp-server,10,630,"This MCP server, developed by Phiality, enables AI assistants to perform network scanning operations using NMAP on Windows systems. It provides a standardized interface for AI models to interact with NMAP, supporting quick scans, full port scans, version detection, and custom timing templates. The implementation uses NMAP's native command-line interface, ensuring reliability and consistency with standard NMAP operations. It integrates seamlessly with Claude Desktop through a simple configuration process, making it particularly useful for AI-driven network analysis, security assessments, and automated penetration testing scenarios. The server's design focuses on providing core NMAP functionality through a simple, AI-friendly interface, bridging the gap between advanced network scanning tools and AI capabilities."
phialsbasement,pagespeed-mcp-server,4,547,"This PageSpeed MCP server, developed by Phiality, integrates Google's PageSpeed Insights API with AI assistants to enable comprehensive web performance analysis. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides detailed metrics on Core Web Vitals, best practices, SEO, accessibility, and resource optimization. The server implements error handling, custom configurations, and uses a standardized JSON response structure. By abstracting the complexities of performance auditing, it allows AI systems to easily analyze and interpret website performance data. This implementation is particularly valuable for applications requiring in-depth web performance insights, facilitating use cases such as SEO optimization, user experience improvement, and technical website audits."
phialsbasement,mcp-puppeteer-linux,4,,"This Puppeteer-based MCP server, developed by PhialsBasement, enables browser automation with full support for Linux display servers (X11 and Wayland). Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for web navigation, screenshots, element interactions, and JavaScript execution in a real browser environment. The implementation focuses on robust display server detection and configuration, making it uniquely suited for Linux environments. It's particularly useful for AI models and applications needing to interact with web content, enabling use cases like web scraping, automated testing, and dynamic web content generation without dealing with browser setup complexities."
phialsbasement,mcp-webresearch-stealthified,1,,"MCP Web Research provides AI assistants with robust web browsing capabilities through a suite of specialized tools. It enables Google and Google Scholar searches, webpage content extraction in markdown format, and screenshot capture - all while handling bot detection avoidance and content optimization. The implementation uses Playwright for browser automation, includes sophisticated retry mechanisms for reliability, and maintains research sessions that store results for reference, making it ideal for AI workflows requiring in-depth online research, academic literature reviews, or content analysis from specific websites."
phialsbasement,zonos-tts-mcp,7,455,"This Zonos TTS MCP integration enables Claude to generate speech directly using the Zonos text-to-speech API. It supports multiple languages and emotions, allowing for expressive and natural-sounding voice output. The implementation leverages PulseAudio for seamless audio playback and integrates with the Zonos API server. Developed by PhialsBasement, this MCP server is designed for easy installation via Smithery or manual setup, making it ideal for developers looking to add high-quality text-to-speech capabilities to their AI assistants or chatbots."
phil65,mcp-server-llmling,5,,"This MCP server, developed by Philipp Temminghoff, provides a YAML-based configuration system for LLM applications using the LLMling backend. It offers resource management, tool execution, and prompt handling capabilities, allowing users to define custom environments without coding. The server supports multiple transport options, including stdio and Server-Sent Events, and features hot-reload for resources. By enabling declarative setup of LLM environments, this implementation simplifies the creation and management of AI assistants. It is particularly useful for rapid prototyping, customizable AI interactions, and scenarios requiring flexible resource and tool management in LLM applications."
philliprt,think-mcp-server,54,,"Think Tool MCP Server implements Anthropic's 'think' tool as described in their engineering blog, providing Claude with a dedicated space for structured reasoning during complex problem-solving tasks. This TypeScript implementation creates a simple MCP server that allows Claude to pause and reflect during response generation, without performing external actions or retrieving new information. Research shows this approach improves performance by up to 54% on complex tasks, especially when working with multiple tools or following detailed policies, making it particularly valuable for customer service, legal compliance, sequential decision-making, and coding challenges."
philosolares,roam-mcp,0,,"Roam Research MCP server enables AI assistants to interact with Roam Research databases through a standardized interface. Built with FastMCP, it provides tools for searching blocks, creating pages, managing content hierarchies, and retrieving YouTube transcripts. The implementation handles authentication via API tokens, supports both stdio and SSE transport modes, and includes features like automatic daily note linking and word count limits - making it particularly valuable for users who want to query, create, and manage their Roam Research knowledge base through conversational AI."
agam1092005,mcp-photoshop,3,,"Provides a bridge between AI assistants and Adobe Photoshop through the UXP socket server, enabling programmatic control of image editing operations including document creation, layer manipulation, filters, text, and Adobe Stock integration. Built with FastMCP and featuring persistent connection management, detailed logging, and error handling, it exposes tools for both basic editing tasks and advanced features like Neural Filters. Particularly valuable for automating complex image editing workflows and enabling AI-assisted creative work directly within Photoshop."
picahq,pica-mcp,14,,"Pica MCP Server enables Claude to interact with various platforms and services through the Pica API. Built in TypeScript, it provides tools for listing connections, retrieving available actions, and executing operations across connected platforms like Gmail, Google Sheets, Slack, Postgres, and more. The server authenticates with a Pica API key and acts as a bridge between Claude Desktop and the user's connected services, allowing Claude to perform tasks such as sending emails, creating calendar events, querying databases, or posting messages to communication channels directly within conversations."
mingzilla,pi-api-mcp-server,2,,"PI API MCP Server provides a bridge to the PI Dashboard API, enabling AI assistants to interact with categories, charts, and other dashboard elements. Built by mingzilla, it offers tools for authentication, category management, chart operations, and data export in various formats. The server handles both JSON and binary responses, making it suitable for workflows requiring dashboard data analysis, chart comparison, and category structure optimization within AI conversations."
piddlingtuna,tfnsw-realtime-alerts-mcp-server,6,,"This MCP server provides integration with Transport for NSW's Realtime Alerts API, enabling AI assistants to access up-to-date information about transport disruptions and alerts across the NSW network. It offers tools to retrieve and filter alerts by transport mode, and generates structured summaries for LLM consumption. Developed in TypeScript, it's designed for applications requiring real-time public transport information in New South Wales, Australia."
pierrebrunelle,mcp-server-openai,53,,"This OpenAI MCP server, developed by Pierre Brunelle, enables AI assistants to directly query OpenAI's language models through a standardized MCP interface. It integrates seamlessly with Claude, allowing it to leverage OpenAI's capabilities while maintaining a clear separation between the AI models. Built in Python, the implementation handles API authentication, request formatting, and exposes OpenAI's text generation features. By bridging Claude and OpenAI, this server expands Claude's knowledge and capabilities, enabling it to tackle a wider range of tasks. It is particularly useful for scenarios where Claude needs to complement its own abilities with OpenAI's specialized strengths, such as coding assistance, creative writing, or domain-specific knowledge."
pim97,mcp-server-scrappey,0,,"Scrappey MCP Server provides a bridge between AI models and Scrappey's web automation platform, enabling browser session management, HTTP requests, and complex browser actions like clicking, typing, and scrolling. The implementation handles anti-bot protections automatically and enhances web content by adding CSS selectors to interactive elements, making it easier for AI assistants to identify actionable elements on webpages. Built with Node.js and the Model Context Protocol SDK, it's particularly valuable for web scraping, form automation, and navigating complex websites that require maintaining session state or bypassing anti-bot measures."
pinatacloud,pinata-mcp,3,486,"Pinata-MCP provides Claude with access to Pinata's IPFS storage services, enabling file operations on both public and private IPFS networks. Built by Pinata Technologies, this Node.js implementation offers tools for uploading, searching, organizing, and retrieving files through Pinata's API, with robust security features that validate file paths against allowed directories. The server requires a Pinata JWT token and gateway URL for authentication, making it ideal for workflows involving decentralized storage, content distribution, or managing digital assets without leaving the Claude interface."
pinkpixel-dev,blabber-mcp,1,142,"Blabber-MCP is a text-to-speech server that gives voice to LLMs using OpenAI's TTS API. It provides a simple tool for converting text into spoken audio with support for multiple voices (alloy, echo, fable, onyx, nova, shimmer), different audio formats, and optional automatic playback. The implementation saves generated audio files locally and returns file paths for client reference, making it ideal for applications that need to add natural-sounding speech output to AI-generated text."
pinkpixel-dev,mem0-mcp,35,,"The mem0 MCP server provides a memory capabilities layer for AI assistants, enabling them to store, retrieve, and utilize information across conversations. Built with FastAPI and the mem0ai library, it features an autonomous memory system that automatically extracts user information from conversations without requiring explicit commands, categorizes it appropriately, and injects relevant memories into future interactions. The implementation supports multiple LLM providers including OpenAI, Anthropic, Google, and Ollama, with configurable embedding models for semantic search. This server is particularly valuable for applications requiring persistent user context, personalized interactions, and long-term memory capabilities that enhance the natural flow of AI conversations."
pinkpixel-dev,mindbridge-mcp,2,188,"Mindbridge is an MCP server that bridges multiple LLM providers including OpenAI, Anthropic, Google, DeepSeek, OpenRouter, and Ollama through a unified interface. Developed by Pink Pixel, it provides tools for getting second opinions from various AI models, listing available providers, and identifying models with specialized reasoning capabilities. The implementation supports provider-specific features like OpenAI's reasoning_effort parameter and Claude's thinking mode, making it particularly useful for applications that need to compare responses across different LLM providers or leverage specialized reasoning capabilities for complex tasks."
pinkpixel-dev,mcpollinations,4,821,"MCPollinations is a multimodal MCP server that enables AI assistants to generate images, text, and audio through the Pollinations APIs without requiring authentication. Developed by Pink Pixel, this Node.js implementation provides tools for generating and saving images with customizable parameters, producing text responses from various models, and creating audio responses with different voice options. The server handles file management for generated content, supports multiple image formats, and offers a simple configuration system for integration with any MCP-compatible application. It's particularly useful for AI assistants that need to create visual or audio content in response to user prompts."
pinkpixel-dev,prysm-mcp-server,1,894,"Prysm MCP Server provides AI assistants with powerful web scraping capabilities through three specialized tools: scrapeFocused for speed, scrapeBalanced for moderate coverage, and scrapeDeep for thorough extraction. Developed by Pink Pixel, this TypeScript implementation leverages the @pinkpixel/prysm-llm package to handle complex web scraping tasks including content extraction, image processing, and pagination handling. The server supports customizable parameters like scroll behavior, image downloading, and output formatting, making it particularly valuable for research, content aggregation, and data extraction workflows where AI assistants need to process web content efficiently."
HEAD,spring-ai-mcp,13,,"Provides a Spring AI-based MCP implementation for managing person and account data through AI-powered tools. The server exposes tools for retrieving persons by ID, nationality, and accounts by person ID, enabling flexible querying and interaction with a lightweight H2 database. Designed to demonstrate the integration of AI capabilities with microservices using Spring AI's Model Context Protocol framework."
HEAD,modelcontextprotocol,9572,656,"Pipedream's MCP server lets you:
- Run the servers locally with npx @pipedream/mcp
- Host the servers yourself to use them within your app or company

Some of the key features include the ability to:
- Run your own MCP server for over 2,500 apps
- Manage servers for your users, in your own app.
- Connect accounts, configure params, and make API requests, all via tools
- Fully-managed OAuth and credential storage "
pixelsock,directus-mcp,2,,"Directus MCP Server provides a bridge between AI assistants and Directus headless CMS through a comprehensive set of API tools. This TypeScript implementation enables content management operations including retrieving, creating, updating, and deleting items from collections, as well as accessing system information, user management, file operations, and schema exploration. The server supports authentication via access tokens or email/password login, with configuration possible through environment variables or command-line arguments, making it particularly useful for AI-assisted content management workflows and headless CMS integration."
piyushgiitian,github-enterprice-mcp,3,,"GitHub Enterprise MCP Server provides a bridge to the GitHub API, enabling developers to perform repository management, file operations, issue tracking, and pull request workflows directly through AI assistants. Built with TypeScript using the Octokit REST client, it offers over 25 specialized tools including repository creation, file manipulation, branch management, and advanced search capabilities. The server authenticates via GitHub Personal Access Tokens and supports both GitHub.com and Enterprise instances through configurable API endpoints. This implementation is particularly valuable for developers who want to streamline their GitHub workflows without switching context to the web interface, and includes features like automatic branch creation and comprehensive error handling."
pl728,substack-fetcher-mcp,1,,"This MCP server implementation provides a tool for fetching and reading articles from Trade Companion by Adam Mancini on Substack. It authenticates using stored Substack cookies, extracts article content in plain text format while preserving structure, and offers a function to retrieve the latest article. The implementation is designed for integration with Claude AI assistant, enabling seamless access to Trade Companion content within AI-powered workflows."
planetarium,mcp-agent8,0,,"MCP Agent8 is a TypeScript-based server that provides specialized prompts and tools for game development with the Agent8 SDK. It implements a vector search tool that retrieves relevant code examples from a Supabase database, helping developers find solutions to specific game programming challenges. The server supports both stdio and SSE transports, includes comprehensive logging capabilities, and is designed to integrate seamlessly with Claude Desktop. It's particularly valuable for game developers who need contextual code examples and system prompts optimized for web-based game creation using frameworks like Phaser and react-three-fiber."
plapinski,phpocalypse-mcp,1,,"PHPocalypse-MCP is a TypeScript-based MCP server that enables AI assistants to run PHP development tools like PHPStan, PHP-CS-Fixer, and PHPUnit directly from within conversations. It works by reading a YAML configuration file that defines available tools and their commands, then executing these commands in the project directory and returning the results as base64-encoded output. Particularly valuable for PHP developers who want to run static analysis, code style checks, and tests without leaving their AI assistant conversation interface."
playcanvas,editor-mcp-server,38,,"A PlayCanvas Editor interface that enables AI assistants to interact with the PlayCanvas game engine through WebSockets. This server implementation provides tools for managing entities, assets, materials, scripts, and scene settings in PlayCanvas projects. It establishes a bidirectional communication channel between the PlayCanvas Editor and external tools, allowing for programmatic creation, modification, and deletion of game objects and assets. The implementation includes a Chrome extension that injects a WebSocket client into the PlayCanvas Editor page, making it particularly valuable for automating workflows, rapid prototyping, and AI-assisted game development tasks."
torohash,playwright-sse-mcp-server,2,,"A server implementation that enables AI models to interact with web browsers through the Playwright automation framework using Server-Sent Events (SSE) for communication. The server creates a headless browser instance and exposes endpoints for establishing SSE connections and handling message exchanges between clients and the browser. This implementation allows AI assistants to perform web automation tasks without requiring direct access to browser APIs, making it suitable for integrating web browsing capabilities into AI workflows."
ashish-bansal,playwright-mcp,10,4856,"Playwright MCP is a browser automation and interaction recording tool that enables AI assistants to generate test scripts by capturing user interactions. Built with React and TypeScript, it provides a real-time recording interface that tracks DOM interactions, screenshots, and page navigation events, allowing developers to easily create reproducible test scenarios through a visual, context-driven workflow."
veryint,mcp-playwright-screenshot,0,,"A server implementation that enables AI assistants to capture screenshots of web pages using Playwright. Built with TypeScript and the Playwright automation framework, it exposes a single tool for taking full-page screenshots of any URL, connecting to a remote Chrome instance via CDP. The implementation is particularly useful for visual testing, documentation generation, and enabling AI assistants to analyze web content through screenshots."
pmarkowsky,santa-mcp,5,,"Santa-MCP is a Proof of Concept server that enables AI assistants to interact with Santa, a binary authorization system for macOS. Developed by Peter Markowsky, it provides tools for querying Santa's status, syncing rules, retrieving file information, and checking version details through the Model Context Protocol. The implementation wraps the santactl command-line utility, making Santa's security features accessible to LLMs like Claude Desktop. This server is particularly useful for security professionals who want to investigate why applications are being blocked or analyze file signatures without leaving their AI assistant interface."
pnizer,wweb-mcp,18,939,"WhatsApp Web MCP provides a bridge between WhatsApp Web and AI models, enabling automated interactions with WhatsApp through a standardized interface. Developed by Philippe Nizer, it offers both direct WhatsApp client integration and API-based connectivity, with flexible deployment options through SSE or Command modes. The implementation includes core features like sending/receiving messages, managing contacts, creating groups, and searching conversations, making it particularly valuable for AI assistants that need to interact with WhatsApp without requiring users to implement complex API interactions themselves."
podaac,cmr-mcp,2,,"CMR-MCP provides a bridge between AI assistants and NASA's Common Metadata Repository (CMR) through the Earthaccess library, enabling search and retrieval of NASA Earth science datasets. Developed by PO.DAAC, this server implementation exposes a single tool that allows querying datasets by date range, DAAC provider, and keywords, returning structured information including concept IDs, descriptions, and shortnames. The server is particularly valuable for researchers and data scientists who need to discover and access NASA's extensive catalog of Earth observation data without leaving their AI assistant interface."
naveenbandarage,poke-mcp,4,,"Poke-MCP is a TypeScript implementation of the Model Context Protocol that provides a bridge to Pokémon data and functionality. Built with the @modelcontextprotocol/sdk, it enables AI assistants to interact with Pokémon information through a standardized interface. The server runs on Node.js, supports stdio communication as specified in the smithery.yaml configuration, and is containerized for easy deployment. This implementation is particularly valuable for developers and Pokémon enthusiasts who want to integrate Pokémon data access directly into AI assistant conversations."
polarvista,xcode-mcp-server,34,,"This Xcode MCP server, developed by PolarVista, enables AI assistants to interact directly with Xcode projects for building and testing. It provides tools for building projects with custom schemes and configurations, running unit tests with granular control, generating code coverage reports, and streaming real-time logs. The server implements subprocess calls to execute Xcode command-line tools, offering a standardized interface for AI systems to manage iOS development workflows. By connecting AI capabilities with Xcode operations, this implementation empowers AI assistants to automate build processes, run tests, and analyze results. It is particularly useful for applications requiring continuous integration, automated testing, or any scenario where an AI system needs to interact with and reason about iOS development processes."
politwit1984,github-meta-mcp-server,0,,"This GitHub MCP server, developed to streamline repository management, integrates with GitHub's API to automate the creation and updating of repositories. It offers natural language command processing for operations like creating repositories with auto-generated names, setting descriptions, adding topics, and updating homepage URLs. Built with TypeScript and leveraging the Octokit library, this implementation stands out by providing a user-friendly interface for complex GitHub operations. It's particularly useful for developers and teams looking to quickly set up and manage multiple repositories, or for AI assistants needing to interact with GitHub programmatically."
pollinations,chucknorris,8,7244,"ChuckNorris MCP server provides language models with enhanced capabilities by fetching specialized prompts from the L1B3RT4S repository. Developed by Pollinations.AI, it supports multiple LLMs including ChatGPT, Claude, Gemini, and others through a simple interface that maps model names to corresponding enhancement prompts. The server includes fallback mechanisms when the repository is inaccessible and is designed for educational and research purposes, making it particularly useful for developers exploring ways to extend AI capabilities without modifying the underlying models."
raw391,coin_daemon_mcp,1,,"This MCP server, developed by Pooly Canada, provides a standardized interface for interacting with cryptocurrency daemon RPC interfaces. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing and querying various cryptocurrency networks, with initial support for Zcash. The implementation focuses on security and flexibility, allowing easy configuration of multiple daemon connections. By connecting AI models with cryptocurrency network data, this server enables sophisticated querying and management scenarios, enhancing the ability to monitor blockchain activity, manage wallets, and automate cryptocurrency operations. It's particularly useful for applications and AI assistants that require secure, programmatic access to cryptocurrency network data through a familiar MCP interface."
avantjohn,mcp-server-test-04,0,,"Popmelt MCP Server provides AI-driven design and styling capabilities based on talent profiles with distinct aesthetic characteristics. Built with TypeScript and PostgreSQL, it offers tools for generating component-specific CSS, complete component libraries, and analyzing style compatibility between different talents. The server exposes resources for accessing talent profiles and their attributes, along with specialized tools for CSS generation that respect each talent's unique design principles. This implementation is particularly valuable for design systems, UI development workflows, and creating consistent visual experiences across applications without requiring deep design expertise."
port-experimental,port-mcp-server,2,14094,"This MCP server integrates with the Port.io API, enabling Claude to interact with Port.io's AI agent. It provides tools for authentication and triggering the AI agent with prompts, waiting for completion and handling responses. The server is designed for use cases requiring AI-assisted interactions with Port.io's platform, such as automated task management or workflow orchestration."
portswigger,mcp-server,44,,"Burp Suite MCP Server enables AI clients to interact with Burp Suite's web security testing capabilities through the Model Context Protocol. Developed by PortSwigger, this Kotlin-based extension exposes Burp's functionality as tools that AI assistants can use to send HTTP requests, analyze proxy history, manipulate Burp's configuration, and perform various security testing operations. The server includes automatic installation support for Claude Desktop through a packaged stdio proxy server, making it particularly valuable for security professionals who want to leverage AI assistance for web application security testing, vulnerability assessment, and penetration testing workflows."
danielrsnell,postgres-mcp,1,,"This PostgreSQL MCP server provides read-only access to PostgreSQL databases, enabling LLMs to inspect database schemas and execute safe queries. Developed by Anthropic, it connects to any PostgreSQL database via a connection string, automatically discovers table schemas, and exposes them as resources while providing a query tool that executes SQL within READ ONLY transactions. The implementation is designed for easy deployment via Docker or NPX, making it ideal for data analysis workflows where AI assistants need to explore database structure and content without risk of data modification."
rathoddarshil,mcp-postgres-query-server,0,,"A read-only PostgreSQL query server for Claude Desktop that provides secure, validated database access through the MCP protocol. Implements strict query validation to prevent write operations, includes a 10-second timeout mechanism, and allows users to execute SELECT queries against configured PostgreSQL databases by passing a connection string directly via command line arguments."
posthog,posthog-mcp,19,,"This PostHog MCP server enables AI assistants to interact with the PostHog analytics platform, providing tools to list projects and create annotations. Built with Python 3.13 and FastMCP, it authenticates using a personal API key to connect to the PostHog API. The implementation exposes two main functions: listing available PostHog projects and creating timestamped annotations that can mark significant events in analytics data. Ideal for teams wanting to automate analytics workflows, document deployments, or track important milestones directly through AI assistant interactions."
pottekkat,dicedb-mcp,2,,"DiceDB MCP is a server implementation that enables AI applications to interact with DiceDB database servers through the Model Context Protocol. Developed by Navendu Pottekkat, this Go-based implementation leverages the DiceDB Go SDK to provide tools for essential database operations including PING for connectivity checks, ECHO for message passing, GET/SET for key-value operations, and DEL for key removal. The server features configurable connection parameters and comprehensive error handling, making it particularly useful for AI assistants that need to perform database operations on DiceDB instances without requiring direct database access credentials or complex connection management."
povedaaqui,suzieq-mcp,2,,"A MCP implementation for SuzieQ, a network observability tool that helps network engineers understand their network's behavior."
power3xz,youtube-transcript-mcp,0,,"YouTube Transcript MCP is a server that enables AI assistants to retrieve transcripts from YouTube videos and playlists. Built with TypeScript and the Model Context Protocol SDK, it provides tools for extracting text content from individual videos and gathering metadata from playlists, handling various error cases such as disabled transcripts or unavailable videos. The implementation uses the youtube-transcript and @distube/ytpl packages to interact with YouTube's content, making it valuable for users who want to analyze or reference video content without manually transcribing or watching the videos."
powerdrillai,powerdrill-mcp,5,2010,"A Model Context Protocol (MCP) server that provides tools to interact with Powerdrill datasets, authenticated with Powerdrill User ID and Project API Key.

Notes: currently the Powerdrill MCP server implemented the READ-ONLY interfaces for security reason to avoid the data being deleted by LLM in accident.

If you want to modify data (CREATE/DELETE/UPDATE) in Powerdrill, please go to https://powerdrill.ai/ with your Team access, or if you have the Powerdrill User ID and Project API Key of your Team, you can manipulate the data via https://powerdrill-flow.streamlit.app/."
ichigo3766,powerpoint-mcp,14,,"PowerPoint MCP server enables AI assistants to create and edit PowerPoint presentations through a standardized interface. Built by Russell Ashby and forked by Ichigo3766, it provides tools for creating slides with titles, content, tables, charts and images (generated via Stable Diffusion), while handling proper formatting and layout management. Particularly valuable for users who want to automate presentation creation or have AI assistants generate complete slide decks with rich content and visualizations."
prajwalnayak7,mcp-server-redis,17,,"This MCP server, developed by Prajwal S Nayak, provides a Redis integration for caching and key-value storage use cases. Built with Python and leveraging the Model Context Protocol, it offers tools to interact with Redis servers and AWS MemoryDB. The implementation focuses on providing a standardized interface for Redis operations within the MCP ecosystem, supporting both local and cloud-based Redis deployments. It's particularly useful for applications requiring fast, in-memory data storage and retrieval, enabling use cases such as caching frequently accessed data, managing session information, and implementing real-time analytics without complex database setups."
gomcpgo,perplexity-mcp-server,1,,"This Perplexity API integration for MCP, developed by Prasanth Janardhanan, provides a streamlined interface for leveraging Perplexity's question-answering capabilities within the Model Context Protocol ecosystem. Built in Go, it offers a simple command-line interface for building and running the server, making it accessible for developers of varying skill levels. The implementation stands out through its use of local development practices, evidenced by the replace directive in go.mod, suggesting an emphasis on customization and extensibility. It's particularly suited for applications requiring robust natural language understanding and information retrieval, such as chatbots, research assistants, or knowledge management systems."
prasanthmj,primitive-go-mcp-server,6,,"This MCP server, developed by Prasanth Janardhanan, provides a Go-based implementation for generating images using OpenAI's DALL-E API. It integrates seamlessly with Claude Desktop and other MCP clients, offering a simple interface for AI models to create images from text descriptions. The server handles image generation, automatic save locations, and configurable dimensions, with proper error handling and logging. By abstracting the complexities of the DALL-E API into a standardized MCP tool, it enables AI assistants to easily generate images without direct API access. This implementation is particularly useful for applications requiring on-demand image creation, such as content generation, visual design assistance, or enhancing AI-human interactions with visual elements."
ucalyptus,prem-mcp-server,0,,"Prem MCP Server provides AI assistants with direct access to Prem AI's chat completions and RAG capabilities through a standardized interface. The server exposes tools for chat interactions, document uploads, and template-based prompting, enabling assistants like Claude to leverage Prem's ecosystem for knowledge retrieval and contextual responses. Built with TypeScript and the Model Context Protocol SDK, it requires minimal setup with API keys and project IDs, making it ideal for developers who need to enhance their AI assistants with external knowledge bases or specialized prompt templates."
pride-archive,mcp_pride_archive_search,1,,"MCP PRIDE Archive Search is a Python-based server that enables AI assistants to search and retrieve proteomics datasets from the PRIDE Archive database. Developed by Suresh Hewapathirana, this implementation provides a clean API for querying mass spectrometry research data with support for keyword filtering, pagination, and custom sorting options. The server leverages FastMCP and asynchronous HTTP requests to efficiently fetch project accessions from the EBI PRIDE web service. It's particularly useful for researchers and scientists looking to access biological and biomedical proteomics data, especially for cancer-related studies, without having to navigate the PRIDE Archive interface directly."
privetin,chroma,26,,"This Chroma MCP server, developed by privetin, provides vector database capabilities through Chroma for semantic document search and management. Built with Python and leveraging libraries like chromadb and sentence-transformers, it offers tools for CRUD operations on documents, semantic similarity search, and metadata filtering. The implementation focuses on persistent storage of documents and embeddings, enabling efficient retrieval and querying of textual data. It's particularly useful for developers and researchers working on natural language processing tasks, information retrieval systems, or AI applications requiring semantic search functionality within large document collections."
privetin,dataset-viewer,13,,"This dataset-viewer MCP server, developed by privetin, provides a standardized interface for interacting with the Hugging Face Dataset Viewer API. Built with Python and leveraging the mcp and httpx libraries, it offers tools for listing dataset splits, viewing paginated dataset contents, and retrieving dataset statistics. The server abstracts complex API interactions into simple MCP tools, enabling AI assistants to easily explore and analyze datasets hosted on the Hugging Face Hub. It stands out by supporting various dataset configurations and splits, and providing paginated access to dataset contents. This implementation is particularly useful for applications requiring dataset exploration, content analysis, or integration of Hugging Face datasets into AI workflows."
privilegemendes,amadeus-mcp-server-standalone,0,,"Amadeus MCP server that enables AI assistants to search flights, analyze prices, and plan multi-city trips through the Amadeus API. Built by Privilege Mendes, it provides tools for searching airports, finding flight offers, analyzing price metrics, and determining optimal travel dates, with built-in caching to handle rate limits. Particularly valuable for travel agents and trip planners who need to access real-time flight data and pricing analytics through natural language interaction."
privsim,mcp-test-runner,12,,"This Test Runner MCP server, developed by an unnamed author, provides a unified interface for executing tests and processing results across multiple testing frameworks including Bats, Pytest, Flutter, Jest, and Go. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers standardized test execution, result parsing, and reporting capabilities. The implementation focuses on cross-framework compatibility and structured output, making it easy for AI models to run tests and analyze results regardless of the underlying test framework. It's particularly useful for continuous integration pipelines, automated testing workflows, or integrating test results into AI-driven development processes, enabling assistants to manage testing across diverse technology stacks without requiring deep knowledge of each testing framework's intricacies."
priyankark,a11y-mcp,1,538,"A11y MCP is a server implementation that provides accessibility features for MCP clients. It helps make AI applications more accessible by providing features like screen reader support, keyboard navigation, and other accessibility enhancements."
priyankark,lighthouse-mcp,3,500,"A TypeScript implementation of the Model Context Protocol (MCP) for Lighthouse, providing a way to integrate Lighthouse search capabilities with MCP-compatible AI assistants."
HEAD,server,8,2327,"Control your phone with natural language commands, right from your desktop AI tools. Send messages, make calls, or manage contacts - just ask Cursor or Claude.
→ 23+ actions including SMS, calls, and contact management
→ Runs on your hardware over your local network - zero third-party access
→ Open Source MCP server implementation under the MIT license"
programmeragua,jenkins-mcp-server,0,,"This is a MCP Server service based on Spring AI for Jenkins Rest API calls, providing common operation interfaces for Jenkins jobs.

Features
Job Management: Create, delete, enable/disable, rename jobs
Job Building: Trigger builds, build with parameters, stop builds
Job Information: Get job info, build info, build logs
Job Configuration: Get and update job configurations"
promptly-technologies-llc,mcp-structured-thinking,3,526,"A TypeScript implementation of a Sequential Thinking Server using the MCP protocol, enabling AI assistants to structure their reasoning process through defined thought stages. The server manages a history of thoughts with metadata like stage, confidence, and relationships between thoughts, while providing tools for capturing, revising, and analyzing the thinking process. It includes features for memory management, reasoning pattern recognition, and metacognitive monitoring, making it valuable for applications requiring transparent, step-by-step problem solving or complex decision making where tracking the reasoning chain is important."
props-labs,fireflies-mcp,0,,"This MCP server implementation provides a bridge to the Fireflies.ai API, enabling AI assistants to interact with meeting transcripts. Developed by Props Labs, it offers tools for retrieving, searching, and summarizing transcripts. The server is designed for use cases requiring natural language processing of meeting content, such as generating action items, analyzing discussion topics, or creating meeting minutes."
proudmars,mailgun-mcp,0,,"Mailgun MCP Server enables direct email sending from LLM desktop apps or IDEs using the Mailgun API. Built by ProudMars, it provides a simple, type-safe tool for sending emails with flexible content options like plain text and HTML, designed to streamline communication workflows by integrating email functionality directly into development environments."
psalzman,mcp-openfec,1,,"MCP OpenFEC Server provides access to Federal Election Commission campaign finance data through the OpenFEC API. Developed by Phillip Salzman of Foundry Peak, LLC, this TypeScript implementation exposes 12 tools for searching candidates, retrieving detailed financial information, accessing committee data, tracking contributions and expenditures, and downloading bulk datasets. The server includes rate limiting to comply with API guidelines and comprehensive error handling for API interactions. It's particularly valuable for researchers, journalists, and analysts who need to explore campaign finance data without leaving their conversation interface."
psiace,nebulagraph-mcp-server,15,1167,"A lightweight MCP server that provides seamless access to NebulaGraph 3.x graph databases, enabling AI agents to explore graph schemas, execute queries, and perform graph-based operations like path finding and neighbor discovery. Designed to integrate with LLM tooling systems, it offers a simple command-line interface with configuration via environment variables and supports both stdio and server-sent events (SSE) transport methods."
pskill9,hn-server,25,,"This Hacker News MCP server, developed by Manav Kundra, provides tools for fetching and parsing stories from news.ycombinator.com. Built with TypeScript using the Model Context Protocol SDK, it offers functionality to retrieve different types of stories (top, new, ask, show, jobs) with configurable limits. The server implements HTML parsing using Cheerio to extract structured data including titles, URLs, points, authors, timestamps, and comment counts. By abstracting Hacker News interactions into a standardized MCP interface, it enables AI systems to easily analyze and work with HN content. This implementation is particularly useful for applications involving tech news aggregation, trend analysis, and community engagement tracking, facilitating use cases such as personalized news feeds, startup research, and discussion topic generation."
pskill9,website-downloader,75,,"This website downloader MCP server, developed by an unnamed author, provides a tool for downloading entire websites using wget. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers functionality to recursively download web pages, preserve site structure, and convert links for local viewing. The server implements depth control, domain restriction, and file extension handling. By abstracting the complexities of website archiving, it enables AI systems to easily capture and analyze web content offline. This implementation is particularly valuable for applications requiring local copies of websites, facilitating use cases such as web archiving, offline content analysis, and website migration or backup tasks."
psycharch,minimax-mcp-tools,41,,"Minimax MCP Tools provides integration with Minimax's AI services, offering image generation and text-to-speech capabilities through a Node.js implementation. The server exposes these features via the Model Context Protocol, allowing editors like Windsurf and Cursor to seamlessly access Minimax's image-01 model for creating images from text prompts and speech-01 models for converting text to natural-sounding speech with various voice options and customizations. It's particularly useful for creative workflows requiring AI-generated visual or audio content without leaving the editing environment."
publikprinciple,obsidian-mcp-rest,40,,"This MCP server implementation, developed by PublikPrinciple, provides a bridge between AI assistants and Obsidian vaults through a local REST API. Built with TypeScript and leveraging the Obsidian Local REST API plugin, it offers tools for reading, writing, and searching notes within Obsidian. The implementation focuses on secure, local access to Obsidian data, making it ideal for AI-assisted note-taking and knowledge management. It's particularly useful for developers and researchers looking to integrate Obsidian's powerful note-taking capabilities into AI workflows, enabling tasks like automated note analysis, content generation, and knowledge base querying while keeping sensitive data local and secure."
darkroaster,pubmearch,43,,"PubMed Analysis MCP Server enables AI assistants to search, retrieve, and analyze scientific literature from PubMed. It leverages the Biopython library to access NCBI's Entrez API, providing structured article data including titles, authors, abstracts, and keywords. The server includes robust analysis capabilities for identifying research hotspots, tracking publication trends over time, and generating comprehensive statistical reports - making it valuable for researchers, academics, and healthcare professionals who need to quickly extract insights from medical literature."
puchunjie,doc-tools-mcp,5,3280,"Word Tools MCP Server provides AI-powered Word document manipulation capabilities through natural language interactions. It implements a full suite of document management functions including creation, editing, formatting, and metadata management for Word documents. The server can be easily integrated with AI applications like Cursor and VSCode, allowing users to perform operations such as creating documents, adding paragraphs, inserting tables, and controlling document layout through conversational commands. Built by puchunjie, it runs as a Node.js application and is particularly valuable for workflows requiring document automation without leaving the AI conversation interface."
punkpeye,mcp-filesystem-python,9,,"This MCP server provides secure, read-only access to files in a specified directory, exposing them as resources using the file:// URI scheme. Developed as an open-source project, it offers file search capabilities, respects .gitignore patterns, and includes security features like path traversal protection. The server integrates with Claude Desktop, allowing AI assistants to access and analyze local files while maintaining security. Built with Python and leveraging libraries like pathspec and pydantic, it stands out by combining file system access with AI-friendly interfaces. This implementation is particularly useful for scenarios involving code analysis, document processing, or any task requiring AI assistants to work with local file systems in a controlled manner."
puravparab,gitingest-mcp,14,,"Gitingest-MCP provides a server for extracting information from GitHub repositories, enabling AI assistants to access repository summaries, directory structures, and file contents through the MCP protocol. Built by Purav Parab, it leverages the gitingest library to handle GitHub data retrieval and presents it in a format optimized for AI consumption. The implementation can be installed via Smithery, directly from GitHub, or manually, making it ideal for developers and AI assistants that need to analyze or reference code repositories without leaving their conversation interface."
puremd,puremd-mcp,10,780,"The pure.md MCP server enables AI assistants to access web content in markdown format through two key tools: 'unblock-url' for extracting content from websites without getting blocked, and 'search-web' for performing web searches and receiving results as markdown. Built with TypeScript and leveraging the Model Context Protocol SDK, it integrates with pure.md's service which handles bot detection, renders JavaScript for SPAs, and converts various formats (HTML, PDFs, images) into clean markdown. This implementation is particularly valuable for local AI agents like Cursor, Windsurf, and Claude Desktop that need reliable web access capabilities without triggering anti-bot measures."
purodelphi,mcpfirebird,6,24756,"MCP Firebird is a server that enables AI assistants like Claude to securely access and manipulate Firebird SQL databases through natural language. Developed by JhonnySuarez, it implements tools for listing tables, describing schemas, executing queries, and retrieving field descriptions with metadata context. The server supports multiple connection methods, includes comprehensive security features like data masking and operation restrictions, and can be deployed via npm, Docker, or integrated with Claude Desktop. Particularly valuable for data analysis, SQL query generation, automated documentation, and development assistance tasks without requiring users to write complex SQL or switch between interfaces."
putdotio,putio-mcp-server,4,3062,"putio-mcp-server provides a bridge to the put.io file hosting service, enabling AI assistants to manage file transfers through a simple interface. Developed by put.io, this Python implementation offers tools for listing active transfers, adding new transfers via URLs or magnet links, canceling existing transfers, and retrieving browser links for completed transfers. The server requires a put.io API token for authentication and is designed to be easily configured with Claude Desktop, making it particularly valuable for users who want to initiate and monitor downloads to their put.io account without switching contexts."
pv-bhat,gemsuite-mcp,9,,"GemSuite MCP provides a professional integration with Google's Gemini API, offering intelligent model selection and advanced file handling capabilities. The server exposes four specialized tools: gemini_search for knowledge retrieval with Google Search integration, gemini_reason for complex problem-solving with step-by-step analysis, gemini_process for efficient content processing, and gemini_analyze for intelligent file analysis that automatically selects the optimal Gemini model based on file type. Built with TypeScript and designed for Claude integration, it features robust error handling, rate limiting, and multimodal support for images, documents, and code files."
pv-bhat,vibe-check-mcp-server,34,,"The definitive Vibe Coder's sanity check Model Context Protocol (MCP) server: Prevent cascading errors in AI workflows by implementing strategic pattern interrupts. Uses tool call ""Vibe Check"" with LearnLM 1.5 Pro (Gemini API), fine-tuned for pedagogy and metacognition to enhance complex workflow strategy, and prevents tunnel vision errors.

- Prevent cascading errors in AI workflows by implementing strategic pattern interrupts.
- Uses tool call ""Vibe Check"" with LearnLM 1.5 Pro (Gemini API), fine-tuned for pedagogy and metacognition to enhance complex workflow strategy, and prevents tunnel vision errors.
- Implements ""Vibe Distill"" to encourage plan simplification, prevent over-engineering solutions, and minimize contextual drift in agents.
- Self-improving feedback loops: Agents can log mistakes into ""Vibe Learn"" to improve semantic recall and help the oversight AI target patterns over time."
pvev,mattermost-mcp,2,,"Mattermost MCP Server provides AI assistants with direct access to Mattermost workspaces through the Model Context Protocol. Built with TypeScript and the MCP SDK, it enables listing channels, retrieving message history, posting messages, managing threads, adding reactions, and accessing user information. The implementation includes a configurable topic monitoring system that can scan specified channels for discussions about topics of interest and send notifications when relevant conversations are detected. Designed for integration with Claude Desktop, it helps AI assistants become active participants in team communication platforms."
pvinis,mcp-playwright-stealth,1,,"MCP Playwright Stealth is a server implementation that enables AI assistants to automate web browsing tasks with enhanced privacy features. Developed by pvinis, it extends the standard Playwright automation capabilities with stealth mode to avoid detection by anti-bot systems. The server provides a comprehensive set of tools for browser interaction (navigation, clicking, form filling), screenshot capture, console log access, and API requests, while also offering code generation capabilities that can transform recorded browser sessions into reusable Playwright test scripts. It's particularly useful for web scraping, automated testing, and situations where browser fingerprinting prevention is essential."
pydantic,logfire-mcp,47,8398,"Logfire MCP Server provides AI assistants with access to OpenTelemetry traces and metrics through Logfire's API. Built by the Pydantic team, it enables LLMs to query application telemetry data, analyze distributed traces, and perform custom SQL queries on observability data with automatic token-based authentication. The server exposes tools for finding exceptions, analyzing errors in specific files, running arbitrary queries against trace data, and retrieving schema information - making it particularly valuable for debugging applications, investigating performance issues, and gaining insights from operational data without leaving the AI assistant conversation."
HEAD,mcp-run-python,8432,5371,"MCP-Run-Python provides a sandboxed environment for executing Python code through a standardized interface. Built with TypeScript and Pyodide, it allows AI assistants to run Python snippets safely in a browser-compatible environment, supporting package installation through PEP 723 script metadata. The server offers both SSE and stdio transport options, handles dependency management automatically, and returns execution results in a structured XML format containing stdout, stderr, and return values. This implementation is particularly valuable for interactive code examples, educational tools, and AI assistants that need to demonstrate or test Python code without requiring a full backend Python environment."
pylogmon,time-mcp,0,546,"A lightweight MCP time server that provides a simple tool to retrieve the current time as an ISO 8601 timestamp. Built by Pylogmon, this server runs on stdio and uses the Model Context Protocol SDK, offering a minimal implementation focused on delivering precise temporal information through a straightforward interface."
pyroprompts,any-chat-completions-mcp,100,,"This MCP server, developed by pyroprompts, enables AI assistants to interact with any OpenAI SDK-compatible chat completion API, including OpenAI, Perplexity, Groq, xAI, and PyroPrompts. It provides a single 'chat' tool that relays questions to the configured AI provider and returns responses. Built in TypeScript, the implementation offers a flexible way to integrate various AI models into Claude Desktop through a standardized MCP interface. By abstracting away provider-specific details, this server allows easy switching between different AI services without changing the core integration. It is particularly useful for users who want to leverage multiple AI providers within Claude, experiment with different models, or avoid vendor lock-in while maintaining a consistent interaction pattern."
qainsights,jmeter-mcp-server,8,,"JMeter MCP Server provides a bridge between AI assistants and Apache JMeter, enabling execution of performance tests through natural language commands. The implementation offers tools to run JMeter tests in both GUI and non-GUI modes, with proper environment configuration and error handling. Built with Python using the FastMCP framework, it integrates with JMeter's command-line interface to execute test plans (.jmx files) and return detailed execution results, making it ideal for performance engineers who want to automate load testing workflows through conversational AI."
qainsights,k6-mcp-server,3,,"k6-mcp-server is a Python-based MCP server that enables AI assistants to execute k6 load testing scripts through natural language commands. The implementation provides tools for running performance tests with configurable parameters like duration and virtual user count, handling script validation and execution via subprocess calls to the k6 binary. Developed by QAInsights, it bridges the gap between conversational AI and performance testing workflows, allowing users to initiate and analyze load tests without directly interacting with the command line interface."
qainsights,locust-mcp-server,1,,"Locust MCP Server provides a bridge between AI assistants and the Locust load testing framework, enabling natural language control of performance testing operations. Developed by NaveenKumar Namachivayam, this implementation uses FastMCP to expose Locust's functionality through a standardized tool that configures and executes load tests with customizable parameters including number of users, spawn rate, and test duration. The server reads configuration from environment variables and manages the Locust subprocess, making it ideal for DevOps engineers and QA professionals who want to integrate performance testing into their AI-assisted workflows without manual command-line interaction."
qdrant,mcp-server-qdrant,444,45756,"This MCP server, developed by Qdrant, provides a semantic memory layer on top of the Qdrant vector database. Built for use with Claude Desktop, it offers tools for storing and retrieving memories using Qdrant's vector search capabilities. The server leverages FastEmbed models for encoding memories, with the default being 'sentence-transformers/all-MiniLM-L6-v2'. Key features include automatic collection creation, configurable embedding models, and support for both command-line and environment variable configuration. By integrating AI capabilities with Qdrant's efficient vector search, this implementation enhances semantic memory retrieval for AI assistants. It is particularly useful for scenarios requiring persistent memory storage, semantic similarity search, and scalable vector operations in AI applications."
qeinfinity,binance-mcp-server,8,,"This Binance MCP server provides AI assistants with real-time access to cryptocurrency market data from Binance. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers WebSocket streaming for spot and futures markets, supporting trade data, price tickers, order book updates, candlestick charts, and more. The server implements automatic reconnection with exponential backoff and provides a type-safe interface for handling market events. It's particularly useful for algorithmic traders, financial analysts, and AI developers working on crypto trading systems, enabling use cases like real-time market analysis, automated trading strategies, and portfolio tracking across Binance's wide range of cryptocurrency pairs."
syauqi-uqi,qgis_mcp_modify1,2,,"QGIS MCP Server provides a bridge between AI assistants and QGIS (Quantum Geographic Information System), enabling remote control of GIS operations through a socket-based communication protocol. The implementation includes both server-side components that run as a QGIS plugin and client tools that allow external applications to perform operations like adding layers, executing processing algorithms, rendering maps, and manipulating project data. The server exposes QGIS functionality through a simple JSON-based API, making it particularly useful for AI agents that need to perform spatial analysis, create maps, or manage geographic data without requiring direct QGIS interaction."
qhdrl12,mcp-server-gemini-image-generator,5,,"MCP-server-gemini-image-generator is a server that enables AI assistants to generate high-quality images using Google's Gemini 2.0 Flash model through the MCP protocol. The implementation handles prompt engineering with strict text exclusion from generated images, intelligent filename generation based on prompts, and local image storage with configurable output paths. Built with FastMCP, it provides a simple interface for any MCP client to create AI-generated images without leaving their assistant conversation, making it particularly valuable for users who need to visualize concepts during discussions."
qiangmzsx,mcp-filesystem-server,5,,"A Go implementation of the Model Context Protocol (MCP) that enables seamless integration between LLM applications and local filesystem resources. This server provides secure, controlled access to files and directories through a set of tools for browsing, reading, writing, and manipulating filesystem content. It features robust path validation to prevent unauthorized access, supports various file types including text and images, and handles large files appropriately through resource references. Built as a learning project based on the mark3labs implementation, it's useful for AI applications that need to interact with local files while maintaining security boundaries."
mcp-100,mcp-sentry,12,4222,"MCP server for retrieving and analyzing issues from Sentry.io. Provides tools to inspect error reports, stacktraces, and debugging information from Sentry accounts. Includes functionality to retrieve individual issues by ID or URL, as well as list issues by project. Useful for developers and support teams needing to integrate Sentry error tracking into their workflows or AI-assisted debugging processes."
qiniu,qiniu-mcp-server,5,,"Qiniu MCP Server provides a bridge to Qiniu Cloud's storage and media processing services through a Model Context Protocol interface. This Python implementation exposes tools for managing object storage (listing buckets, retrieving files), CDN operations (prefetching, refreshing), and image processing capabilities (scaling, rounding corners, retrieving metadata). The server supports both stdio and SSE transport methods, authenticates via Qiniu access keys configured through environment variables, and includes resource providers that allow AI assistants to browse and access files stored in Qiniu buckets. It's particularly useful for applications that need to manage cloud storage assets or perform on-the-fly image transformations within conversational AI workflows."
qododavid,pty-mcp,1,,"This MCP tool server, developed by David Wurtz at Qodo AI, provides a stateful terminal interface for AI interactions. Built with Python and leveraging libraries like pexpect, it offers a persistent environment for command execution and output capture. The implementation focuses on maintaining session state across multiple interactions, enabling complex, multi-step operations. By providing a stateful terminal, this server allows for sophisticated scenarios like running long-running processes, interactive debugging, or step-by-step system configuration. It's particularly useful for AI assistants or applications that need to perform sequential terminal operations or maintain context across multiple commands."
qpd-v,mcp-deepwebresearch,51,,"This web research MCP server, developed by qpd-v, enables AI models to conduct deep web searches and content extraction. Built with TypeScript and leveraging Playwright for web automation, it provides tools for Google searches, parallel multi-query searches, webpage visits, and screenshot capture. The implementation stands out with its robust error handling, consent dialog management, and content cleaning capabilities. It's particularly useful for AI assistants or applications needing to perform comprehensive online research, enabling tasks like information gathering, content analysis, and visual data collection without requiring deep knowledge of web scraping techniques."
qpd-v,mcp-delete,1,537,"This MCP server, developed by qpd-v, enables AI assistants to safely delete files on the host system. It provides a single 'delete_file' tool that supports both relative and absolute file paths, implementing intelligent path resolution to locate files across multiple potential locations. The server features robust error handling, detailed logging, and clear user feedback. By connecting AI capabilities with low-level file system operations, this implementation empowers AI assistants to perform file management tasks like cleaning up temporary files, removing outdated documents, or assisting in system maintenance. It is particularly useful for applications requiring secure file deletion, automated cleanup processes, or any scenario where an AI system needs to manipulate the file system while maintaining safety and providing clear feedback."
qpd-v,mcp-guide,44,812,"This MCP guide server, developed by qpd-v, serves as an interactive tutorial for understanding and implementing Model Context Protocol concepts. It provides tools for explaining MCP components, demonstrating examples, and listing available servers across various categories. The implementation features a structured approach to presenting information through tools, resources, and prompts, making it particularly useful for developers new to MCP who want to explore its capabilities. By offering hands-on guidance for creating tools and resources, this server bridges the gap between theoretical knowledge and practical implementation, enabling users to quickly grasp MCP fundamentals and start building their own integrations."
qpd-v,mcp-image-downloader,4,,"This MCP image downloader server, developed by qpd-v, provides tools for downloading and optimizing images through a standardized interface. It leverages libraries like Sharp and Axios to enable AI assistants to retrieve images from URLs and perform basic optimization tasks such as resizing, quality adjustment, and format conversion. Built with TypeScript and following MCP standards, it offers a modular approach to image processing that can be easily integrated into existing AI workflows. The implementation is particularly useful for scenarios requiring programmatic image acquisition and manipulation, such as content generation, data preprocessing for machine learning, or automated web scraping tasks."
qpd-v,mcp-ragdocs,86,,"This MCP server, developed by qpd-v, enables AI assistants to perform semantic search and retrieval of documentation using a vector database (Qdrant). It provides tools for adding documentation from URLs, searching through stored content, and listing sources. The server implements web scraping, text chunking, and embedding generation using either Ollama or OpenAI. By connecting AI capabilities with vector search technology, this implementation empowers AI assistants to quickly find relevant information within large document collections. It is particularly useful for applications requiring context-aware information retrieval, knowledge base augmentation, or any scenario where an AI system needs to efficiently access and reason about domain-specific documentation."
qpd-v,mcp-communicator-telegram,25,1040,"This MCP server, developed by qpd-v, enables AI assistants to communicate with users through Telegram bots. It provides a tool for asking questions and receiving responses asynchronously via Telegram messages. The server implements secure chat ID validation, reply-based message tracking, and robust error handling. By connecting AI capabilities with Telegram's messaging platform, this implementation empowers AI assistants to engage in real-time conversations, gather user input, or provide interactive assistance. It is particularly useful for applications requiring human-in-the-loop interactions, customer support automation, or any scenario where an AI system needs to communicate directly with users through a familiar messaging interface."
qpd-v,mcp-wordcounter,8,432,"This MCP server, developed by Kenneth, enables AI assistants to perform word and character counting on text documents. It provides tools for analyzing files, counting words, and calculating character counts with and without spaces. The server implements efficient text processing algorithms and file handling using Node.js, offering a straightforward interface for AI systems to extract quantitative information from textual content. By connecting AI capabilities with fundamental text analysis, this implementation empowers AI assistants to perform tasks like document summarization, content length verification, or writing style assessment. It is particularly useful for applications requiring text metrics, content creation assistance, or any scenario where an AI system needs to evaluate and reason about the structure and composition of written material."
quantgeekdev,coincap-mcp,59,5807,"This MCP server, developed by QuantGeekDev, provides access to cryptocurrency data from the CoinCap API without requiring API keys or registration. It exposes tools for querying Bitcoin prices, retrieving prices for any supported cryptocurrency, and listing all available crypto assets. By integrating with CoinCap's public API, this implementation enables AI assistants to easily incorporate up-to-date cryptocurrency information into their responses. It is particularly useful for financial analysis, market tracking, and generating reports on crypto trends through natural language queries to an AI assistant."
quantgeekdev,docker-mcp,225,33496,"This Docker MCP server, developed by Alex Andru and Ali Sadykov, enables AI assistants to manage Docker containers and compose stacks through natural language. Built with Python, it provides tools for creating containers, deploying compose stacks, retrieving logs, and monitoring container status. The server leverages Docker's containerization capabilities, allowing AI models to orchestrate complex multi-container applications. Key features include seamless integration with Claude Desktop and a debugging interface for development. By bridging natural language processing with Docker operations, this implementation extends AI capabilities for tasks like application deployment, container management, and log analysis. It is particularly useful for scenarios requiring dynamic container orchestration, microservices management, and automated DevOps workflows in response to natural language instructions."
quantgeekdev,mcp-filesystem,4,239675,"Filesystem MCP server providing a robust set of file system interaction tools for AI agents. Implements core file operations like reading, writing, creating directories, moving files, and retrieving file metadata through a standardized TypeScript-based interface. Designed to enable precise, controlled file system manipulation with detailed error handling and comprehensive tool descriptions."
quantgeekdev,fiscal-data-mcp,7,768,"This Fiscal Data MCP server, created by Alex Andru, provides a streamlined interface for accessing US Treasury data through the Fiscal Data API. Built with TypeScript and utilizing the mcp-framework, it offers tools for fetching specific treasury statements, accessing historical data, and generating formatted reports. The implementation stands out by focusing on treasury-specific data retrieval and presentation, making it particularly useful for financial analysts, economists, and researchers who need quick access to up-to-date US fiscal information. It integrates seamlessly with Claude Desktop, allowing for natural language queries about treasury data and automated report generation, enhancing the efficiency of financial data analysis and reporting workflows."
quantgeekdev,mongo-mcp,106,8272,"This MongoDB MCP server, developed by QuantGeekDev, enables AI assistants to interact directly with MongoDB databases through natural language. Built with TypeScript, it provides tools for querying collections, inspecting schemas, managing indexes, and performing document operations. The server leverages MongoDB's flexible document model and powerful query capabilities, allowing AI models to explore and manipulate complex data structures. By bridging natural language processing with MongoDB's features, this implementation extends AI capabilities for tasks like data analysis, content management, and database administration. It is particularly useful for scenarios requiring dynamic data exploration, schema inference, and performing database operations in response to natural language queries."
quanticsoul4772,analytical-mcp,0,,"Analytical MCP Server enhances AI capabilities for structured problem-solving, analytical reasoning, and decision-making through a suite of specialized tools. It integrates with Exa for research verification and fact extraction, while providing statistical analysis, logical reasoning, and perspective generation capabilities. The implementation features robust error handling, configurable caching, and rate limiting to ensure reliable performance. Particularly valuable for data analysts, researchers, and decision-makers who need to validate information, analyze datasets, detect logical fallacies, and generate multi-perspective insights without leaving their AI assistant interface."
HEAD,filesystem,95,,"This Quarkus-based MCP server implementation provides a filesystem interface for AI models. Developed by the Quarkus team, it leverages Quarkus' fast startup and low memory footprint to offer efficient file system operations. The server includes dependencies for Jackson JSON processing, Qute templating, and Arc dependency injection. It supports both JVM and native compilation modes, with a Maven wrapper for easy building and running. This implementation is ideal for scenarios requiring AI models to interact with local file systems, such as automated file management, content organization, or data processing tasks, while benefiting from Quarkus' performance optimizations."
HEAD,jdbc,95,,"This Model Context Protocol server, developed by the Quarkus team, enables AI models to interact with databases through JDBC connections. Built using Quarkus and JBang, it provides tools for querying, modifying, and exploring database content with just a JDBC URL. The implementation focuses on simplicity and flexibility, supporting various database types including in-memory, downloadable, and live databases. It's particularly useful for AI-assisted database management tasks, allowing models to perform operations like data analysis, schema exploration, and content manipulation across different database systems without needing direct access to the underlying infrastructure. The server's design makes it adaptable for various use cases where AI needs to interact with structured data, such as automated reporting, data migration, or dynamic query generation."
quazaai,unitymcpintegration,36,,"Unity MCP Integration enables AI assistants to understand and interact with Unity projects in real-time through a WebSocket-based communication system. It provides tools for retrieving scene hierarchies, project settings, and executing C# code directly in the Unity Editor. The implementation includes both a Unity Editor plugin with a debug window and a Node.js server component that implements the Model Context Protocol, making it particularly valuable for AI-assisted game development workflows."
qubaomingg,stock-analysis-mcp,1,,"The Alpha Vantage Stock MCP Server provides real-time and historical stock market data through integration with the Alpha Vantage API. Built with TypeScript and Node.js, it offers tools for retrieving intraday and daily stock data with customizable intervals, generating price movement alerts based on configurable thresholds, and accessing stock information as resources through URI templates. This implementation is particularly valuable for financial analysis workflows, enabling Claude and other MCP clients to incorporate up-to-date market data directly into conversations without requiring users to manually search for or input stock information."
quegenx,supabase-mcp-server,11,,"Supabase MCP Server provides a bridge between AI assistants and PostgreSQL databases in Supabase environments. The server exposes a comprehensive set of database management tools organized into categories including table, storage, index, constraint, function, trigger, policy, role, enum, publication, user, and realtime management. Built with TypeScript and the Model Context Protocol SDK, it connects to Supabase databases using connection strings and implements security measures like SSL. This implementation is particularly valuable for developers who need to perform database operations, manage storage buckets, handle user authentication, or configure realtime features directly through conversational AI without writing SQL queries manually."
querypie,querypie-mcp-server,7,,"The QueryPie MCP server provides a secure interface for AI assistants to interact with QueryPie's Database Access Control system. Built in Go, it enables administrators to review database access logs, identify security anomalies, and manage workflow requests through a specialized prompt interface. The server authenticates with the QueryPie API, dynamically generates tools from OpenAPI specifications, and supports both stdio and SSE transport modes. It's designed for security professionals monitoring privileged database access, with features like suspicious activity detection and comprehensive log analysis capabilities."
jlucaso1,mcp-javascript-sandbox,3,,"An MCP server that provides a secure JavaScript execution environment using QuickJS compiled to WebAssembly. It exposes a single tool, 'run_javascript_code', which executes arbitrary JavaScript code within a sandboxed WASM environment, capturing stdout, stderr, and execution errors. The implementation uses Node.js's built-in WASI module and temporary files to safely isolate potentially untrusted code from the host system, making it ideal for language models that need to test or demonstrate JavaScript code without security risks."
quintonwall,mcp-airbyte-list-sources,0,,"This MCP server implementation provides a tool for checking the status of Airbyte connections. It integrates with the Airbyte API to list all connections in a workspace, check individual connection statuses, and retrieve stream information. The server uses FastMCP and includes token refresh functionality for maintaining API access. It's designed for use cases requiring real-time monitoring of data pipeline health and connection management in Airbyte-based ETL processes."
qwang07,duck-duck-mcp,1,1808,"This DuckDuckGo search implementation for the Model Context Protocol (MCP), developed by qwang07, enables AI models to perform web searches using the DuckDuckGo engine. Built with TypeScript and leveraging the duck-duck-scrape library, it provides a simple interface for querying DuckDuckGo and retrieving search results. The implementation stands out by offering easy integration with MCP-compatible AI systems and respecting DuckDuckGo's privacy-focused approach. It's particularly useful for AI assistants or applications needing up-to-date web information, enabling tasks like fact-checking, research, or providing current event updates without relying on potentially outdated training data."
r3e-network,neo-n3-mcp,2,,"Neo N3 MCP Server provides a bridge to the Neo N3 blockchain, enabling operations like querying blockchain information, managing blocks and transactions, checking balances, transferring assets, and interacting with smart contracts. Built with TypeScript and Docker support, it integrates with the @cityofzion/neon-js library and includes tools for wallet creation and management. Ideal for developers building applications that need to interact with the Neo blockchain ecosystem without managing the underlying infrastructure."
r3-yamauchi,mcp-server-blastengine-mailer,0,,"This MCP server implementation provides a bridge to the Blastengine email service, enabling AI assistants to send emails programmatically. Developed by r3-yamauchi, it offers a single tool for sending emails through the Blastengine API. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It focuses on secure API credential management, with environment variables used for Blastengine user ID and API key. The implementation is designed for easy setup within the Claude Desktop environment and includes debugging support through the MCP Inspector. It's particularly useful for AI applications requiring automated email sending capabilities, such as notification systems or email marketing campaigns."
r3-yamauchi,cdata-connect-cloud-mcp-server,0,,"This MCP server implementation provides a bridge to CData Connect Cloud, enabling AI assistants to execute SQL queries on the platform. Developed by r3-yamauchi, it uses the Model Context Protocol SDK and Microsoft SQL Server driver to connect to CData's TDS server. The server exposes a single tool for executing SQL queries, with robust error handling and environment variable management. It's particularly useful for AI applications that need to interact with various data sources through CData Connect Cloud, allowing for seamless integration of diverse data into AI-driven workflows and analytics processes."
r3-yamauchi,kintone-mcp-server,4,,"This MCP server for Kintone, developed by r3-yamauchi, integrates the Model Context Protocol with the Kintone low-code platform API. Built with Node.js and leveraging the MCP SDK, it enables AI agents to interact with Kintone applications through natural language. The implementation focuses on bridging the gap between AI and business process management, allowing for operations like data retrieval, record creation, and workflow automation within Kintone. It's particularly useful for organizations looking to enhance their Kintone-based systems with AI capabilities, enabling use cases such as automated data entry, intelligent reporting, and AI-assisted process optimization without directly dealing with the complexities of the Kintone API."
raccoonaihq,raccoonai-mcp-server,0,,"The Raccoon AI MCP Server enables AI assistants to perform web browsing, data extraction, and complex web task automation through Raccoon's LAM API. Built for Python 3.10+ environments, it allows users to search websites, fill forms, navigate UI elements, extract structured data based on defined schemas, and handle multi-step processes across websites. The server requires a Raccoon AI Secret Key and Passcode from the Raccoon platform, and can be installed via Smithery or from source, making it particularly valuable for workflows requiring web automation and data extraction capabilities without direct browser access."
radial-hks,mcp-unreal-server,3,,"MCP-Unreal-Server provides a bridge between AI assistants and Unreal Engine, enabling remote execution of Python commands within the engine environment. Built on the Unreal Engine's remote execution protocol, it establishes both UDP-based discovery of Unreal instances and TCP-based command connections, allowing AI tools to interact with and control Unreal Engine programmatically. The server handles service discovery, connection management, and command execution, making it valuable for game development workflows, automated testing, and AI-assisted content creation in Unreal Engine projects."
rados10,youtube-watchlater-mcp,4,,"This YouTube Watch Later MCP server, developed by Radek, integrates with the YouTube API to manage Watch Later playlists. Built with TypeScript and Express, it provides functionality for OAuth2 authentication, playlist item retrieval, and video management. The server implements a refresh token mechanism for maintaining long-term access and includes a separate script for obtaining initial authentication. By abstracting YouTube API interactions into a standardized MCP interface, it enables AI systems to easily interact with users' Watch Later content. This implementation is particularly useful for applications involving content curation, video recommendation systems, and automated playlist management, facilitating use cases such as personalized viewing schedules, content analysis, and cross-platform video organization."
rafaelcartenet,mcp-databricks-server,6,,"This Databricks MCP server enables AI assistants to execute SQL queries against Databricks using the Statement Execution API. Built with Python using FastMCP, it provides tools for executing SQL queries, listing schemas and tables, and describing table schemas. The implementation handles authentication through environment variables, manages long-running queries with polling, and formats query results into readable tables. It's designed to work with Cursor and other MCP clients, making it ideal for data exploration, analysis, and complex tasks when coupled with Unity Catalog Metadata."
dingzeefs,mcp-apple-notes,2,,"This MCP server implementation provides a bridge to Apple Notes, enabling AI assistants to interact with and manage notes. Developed by Rafal Wilinski, it offers tools for listing, searching, creating, and indexing notes using both semantic and full-text search capabilities. The server utilizes LanceDB for efficient data storage and retrieval, and integrates with the Hugging Face Transformers library for on-device embeddings. It's designed for use cases requiring natural language interactions with Apple Notes, such as note organization, content retrieval, and automated note creation."
rafalwilinski,mcp-apple-notes,181,,"This MCP server, developed by RafalWilinski, enables AI assistants like Claude to search and reference Apple Notes during conversations. Built in TypeScript, it provides semantic search capabilities using on-device embeddings and vector storage with LanceDB. The implementation stands out by offering native Apple Notes integration via JXA and fully local execution without API keys. By connecting AI capabilities with personal note content, this server allows AI systems to retrieve relevant information from a user's Apple Notes. It is particularly useful for building AI-powered tools that require context from personal notes, such as task planning, information retrieval, and knowledge management applications."
rafalwilinski,aws-mcp,241,,"This AWS MCP server, developed by an unknown author, provides a bridge between AI assistants and AWS services using the AWS SDK v2. It implements credential management, profile selection, and region configuration to enable secure access to AWS resources. The server exposes tools for executing AWS-related code, listing available credentials, and selecting profiles. By abstracting AWS SDK interactions into a standardized MCP interface, it allows AI systems to perform a wide range of AWS operations, from basic resource management to complex data analysis. This implementation is particularly useful for scenarios requiring programmatic AWS access, cloud infrastructure management, or data processing using AWS services, facilitating use cases such as automated deployments, resource monitoring, and large-scale data analytics in the AWS ecosystem."
ragieai,ragie-mcp-server,9,,"This MCP server provides access to Ragie's knowledge base retrieval capabilities. It implements a single 'retrieve' tool that allows querying the knowledge base for relevant information based on a given search query. The server is designed to enable AI models to leverage Ragie's information retrieval system, making it useful for applications requiring access to large-scale knowledge bases or specialized datasets."
rahgadda,openapi_mcp_server,5,,"OpenAPI MCP Server enables LLMs to interact with REST APIs by providing a bridge between OpenAPI specifications and AI assistants. It dynamically generates tools from OpenAPI documents, allowing models to execute HTTP requests (GET/PUT/POST/PATCH) against configured endpoints without requiring users to implement complex API interactions. The server supports features like request body generation, parameter handling, and proxy configuration, making it particularly valuable for workflows that need to integrate with external services or internal APIs while maintaining a conversational interface."
rahgadda,oracledb_mcp_server,11,1343,"Provides a bridge to Oracle Database, enabling AI assistants to interact with database metadata and execute SQL queries through a standardized interface. Built with Python and the MCP framework, it supports dynamic table and column discovery, configurable connection parameters, and secure query execution with whitelisting. Particularly useful for data analysts and developers who want to explore database schemas and retrieve information through natural language interactions."
rahulrana0707,mcp-server,0,,"MCP-Server is a TypeScript implementation that provides a modular framework for creating MCP servers with customizable tools. Developed by Rahul Rana, it currently offers two tool integrations: a Jira tool for creating issues and a Todo tool for managing tasks. The server uses Zod for schema validation and the Model Context Protocol SDK for handling communication, making it easy to extend with additional tools through a clean architecture that separates configuration, schemas, and handlers. Particularly valuable for developers who want to build their own MCP servers with minimal boilerplate while maintaining type safety."
rahulretnan,mcp-ragdocs,23,,"This RAG documentation MCP server, developed by Rahul Retnan as a fork of qpd-v's original project, enables AI assistants to augment their responses with relevant documentation context. Built with TypeScript and integrating Qdrant for vector search, it offers tools for semantic documentation retrieval, source management, and automated processing of new content. The implementation focuses on enhancing AI capabilities through context-aware documentation access, with features like natural language querying and efficient queue management. It's particularly useful for developers building documentation-aware AI systems, enabling use cases such as context-enhanced chatbots, semantic documentation search, and automated knowledge base augmentation without directly handling vector database complexities."
railmap,mcp-server-caldav,1,,A CalDAV MCP server that enables secure access to calendar data through the tsdav library. Provides a flexible authentication mechanism supporting both OAuth and basic authentication methods. Designed to integrate calendar functionality into AI workflows by abstracting CalDAV protocol interactions.
maquina-app,rails-mcp-server,78,,"Rails MCP Server provides a Ruby implementation that allows LLMs to interact with Rails projects through a standardized protocol. It enables AI models to browse project files, view routes, inspect models, and retrieve database schema information across multiple Rails applications. The server follows the XDG Base Directory Specification for configuration, includes tools for project navigation and codebase exploration, and integrates seamlessly with Claude Desktop through either an automated setup script or manual configuration. Particularly valuable for developers seeking AI assistance with Rails application analysis, understanding, and exploration without leaving their conversation interface."
rajnaveen344,lsp-tools-mcp,0,,"LSP Tools MCP Server provides regex-based text analysis capabilities, enabling developers to find precise character and line positions of pattern matches within files. Built with TypeScript, it offers two primary tools: finding regex positions in files and listing allowed directories, with robust security checks to prevent unauthorized file access."
rajpdus,mcp-histfile,1,,"A powerful shell command history exploration tool that allows programmatic access, searching, and retrieval of past shell commands through MCP. Built to integrate seamlessly with Cursor and other MCP-compatible tools, it provides an easy way to access and manage command history across different shells like Bash and Zsh. Useful for developers and power users who want to quickly search, recall, and analyze their command line interactions."
raju-deriv,mcp-deriv-api-server,0,,"This MCP implementation provides a bridge to the Deriv API, enabling trading-related operations like retrieving active symbols and account balances. It uses FastMCP for the server implementation and integrates with the python-deriv-api library. The project is designed for easy deployment using Docker or local installation, with configuration via environment variables. It's particularly useful for automated trading systems, market analysis tools, or AI-assisted trading applications that need programmatic access to Deriv's trading platform."
rajyraman,genaiscript-pac-az-mcp,4,,"GenAIScript PAC AZ MCP provides a bridge between AI assistants and both Power Platform CLI and Azure CLI commands through a Model Context Protocol server. Developed by rajyraman, this implementation offers three specialized tools: executing Power Platform CLI commands against Dataverse environments, making Azure REST API requests, and performing Graph API operations. The server validates command inputs, handles authentication through a start script, and returns structured results, making it ideal for developers who need to automate Power Platform administration tasks or interact with Azure resources through natural language interfaces."
rakeshgangwar,erpnext-server,3,,"The ERPNext MCP server provides integration with ERPNext/Frappe API, enabling AI assistants to interact with enterprise resource planning data through a standardized interface. Developed by Rakesh Gangwar, this TypeScript implementation supports authentication, document operations (create, read, update), report generation, and metadata discovery through tools like get_documents, create_document, and run_report. The server exposes ERPNext documents via URI templates (erpnext://{doctype}/{name}) and includes features for querying document lists with filters, retrieving field definitions, and accessing various DocTypes. It's particularly useful for business applications requiring ERP data access, such as inventory management, customer relationship management, and financial reporting without direct database access."
rakeshgangwar,f1-mcp-server,0,,"This Formula One MCP server provides access to F1 racing data through the FastF1 Python library, enabling AI assistants to retrieve race calendars, event information, session results, driver statistics, lap times, telemetry data, and championship standings. The implementation bridges Node.js and Python, with TypeScript handling the MCP server interface while Python processes the data requests, making it valuable for motorsport enthusiasts, analysts, and journalists who need to access and analyze Formula 1 data without leaving their conversation interface."
rakeshgangwar,tmdb-mcp-server,1,,"TMDB MCP Server provides a bridge to The Movie Database API, enabling AI assistants to search and retrieve detailed movie information through a standardized interface. Built with TypeScript and the MCP SDK, it exposes a search_movies tool that supports filtering by title, year and pagination while handling authentication and error states appropriately. This implementation is particularly valuable for use cases involving movie discovery, research, and recommendations without leaving the AI assistant conversation."
rakshitha2207,spotify-mcp,0,,"Spotify MCP server provides a bridge to the Spotify Web API, enabling AI assistants to interact with music playback, search, and playlist management. Built with TypeScript, it supports tools like searching tracks, getting playback state, playing specific tracks, retrieving user playlists, and controlling playback. The implementation handles Spotify OAuth authentication and rate limiting, making it useful for music-related tasks through conversational AI interaction."
rami-0,python_mcp,0,,"This MCP server implementation provides a file search service using Python. It allows searching for files containing a specific query in the current directory and its subdirectories, returning detailed information about matching files including filename, path, size, and creation date. The implementation includes error handling, file access permissions checks, and result limiting to ensure efficient and robust searching capabilities."
ramidecodes,mcp-server-notion,7,2751,"This MCP server implementation provides a bridge to the Notion API, allowing AI models to interact with Notion workspaces. Developed by Ramiro Ramirez, it offers tools for searching, querying databases, managing pages and blocks, and handling users and comments. The server is designed for use cases requiring AI-driven content management, collaborative document editing, or integration of Notion data into AI-assisted applications."
shilomagen,rami-levy-mcp,8,,"Rami Levy MCP Server provides a bridge between AI assistants and the Rami Levy online grocery shopping platform in Israel. It exposes tools for searching products, managing shopping carts, and accessing checkout functionality through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, it handles authentication with the Rami Levy API using environment variables for credentials and transforms API responses into consistent, well-typed data structures. This implementation is particularly valuable for users who want to search for products, compare prices, and manage their grocery shopping directly through conversational AI without switching to the Rami Levy website."
ramp-public,ramp-mcp,13,,"Ramp MCP Server provides a bridge to Ramp's Developer API, enabling AI assistants to analyze corporate financial data through an ephemeral SQLite database. Built by Ramp Business Corporation, it implements an ETL pipeline that loads data from various endpoints (transactions, reimbursements, bills, etc.) based on requested scopes, processes it into queryable tables, and allows SQL analysis directly within conversations. The server supports multiple data sources including transactions, vendors, users, and spend programs, making it particularly valuable for financial analysis, expense tracking, and business intelligence tasks without leaving the conversation interface."
ramuzes,mcp-jena,0,,"MCP Jena provides a bridge between AI agents and Apache Jena for SPARQL query capabilities, allowing agents to access and manipulate RDF data stored in Jena Fuseki servers. Built with TypeScript and Express, it offers tools for executing SPARQL queries, performing updates, and listing available graphs with API key authentication for secure access. The implementation is particularly valuable for semantic web applications, knowledge graphs, and any workflow requiring structured data querying through the SPARQL protocol directly within AI agent conversations."
ramxx,mcp-tavily,48,26797,"This MCP server, developed by RamXX, provides AI-powered web search capabilities using Tavily's search API. It enables AI assistants like Claude to perform web searches, get direct answers to questions, and search recent news articles with relevant content extraction. The server exposes three main tools: comprehensive web search, answer generation with supporting evidence, and news article search. By integrating Tavily's AI-enhanced search functionality, this implementation facilitates more informed and up-to-date interactions. It is particularly useful for research tasks, fact-checking, generating reports, and staying current on specific topics through natural language queries to an AI assistant."
randomm,files-db-mcp,0,,"Files-DB-MCP is a local vector database system that provides LLM coding agents with semantic search capabilities for software projects through the Message Control Protocol. It features zero-configuration setup with automatic project type detection, real-time file monitoring, incremental indexing for performance optimization, and direct Claude Code integration. The implementation uses Qdrant for vector storage and Hugging Face models for code embeddings, with support for SSE streaming updates and configurable embedding models. Particularly valuable for developers working with large codebases who need AI assistants to quickly understand and reference their code without context switching."
random-robbie,mcp-web-browser,14,,"This MCP web browser server, developed by Robbie, leverages Playwright to provide a programmatic interface for web browsing tasks. Built with Python, it offers a command-line interface for easy integration into automated workflows. The server stands out by utilizing Playwright's cross-browser capabilities, enabling consistent behavior across different browser engines. It's particularly useful for AI assistants or applications needing to perform web scraping, automated testing, or content extraction tasks. The implementation's simplicity and focus on web browsing functionality make it ideal for scenarios requiring reliable and scriptable web interactions."
rycid,randomusermcp,0,,"Provides a bridge to the randomuser.me API with enhanced features for generating realistic user data. Supports advanced filtering, customizable output formats (JSON, CSV, SQL, XML), and flexible nationality and gender distribution. Useful for developers needing synthetic user profiles for testing, prototyping, or populating databases with realistic mock data."
ranveer0323,stock-analysis-mcp,1,,"This MCP server provides stock market data from the Alpha Vantage API, allowing Claude and other MCP clients to access real-time and historical stock information. It offers tools for retrieving intraday and daily stock data, generating price movement alerts, and accessing stock data as resources. The server is designed for use cases requiring up-to-date financial market information, such as portfolio analysis, trading strategy development, or financial reporting applications."
raoulbia-ai,mcp-server-for-intercom,3,,"MCP-Server-for-Intercom provides a secure interface for retrieving customer support tickets from Intercom's API. Built by Raoul Biagioni, it implements strict date formatting requirements (DD/MM/YYYY) and includes robust security features like rate limiting, message size validation, and connection timeout handling. The server offers filtering capabilities by date range, keywords, and exclusions, while optimizing performance through concurrent processing and pagination. Particularly valuable for customer support analysis, ticket status monitoring, and conversation history review within AI assistant workflows."
rashidazarang,airtable-mcp,9,,"Airtable MCP integrates Airtable database functionality directly into AI-powered code editors through Anthropic's Model Context Protocol. Built by Rashid Azarang, it provides tools for listing bases, browsing tables, creating/reading/updating/deleting records, and performing complex queries against Airtable data. The implementation supports both Node.js and Python environments, can be installed via Smithery or NPX, and requires an Airtable Personal Access Token for secure authentication. This enables AI assistants to directly interact with Airtable databases for data management tasks without leaving the conversation interface."
daikw,mcp-server-on-raspi,0,,"MCP Server on Raspberry Pi provides a simple note storage system that allows AI assistants to create, read, and summarize notes through a standardized interface. The server implements a custom note:// URI scheme for accessing individual notes, offers a summarize-notes prompt with style customization options, and includes an add-note tool for creating new entries. Built with Python 3.13 and the MCP library, it demonstrates state management and resource notification capabilities while being lightweight enough to run on resource-constrained devices like Raspberry Pi. This implementation is particularly useful for personal knowledge management or simple note-taking applications where users want to interact with their notes through conversational AI."
ravenwits,mcp-server-arangodb,15,,"This ArangoDB MCP server, developed using TypeScript, provides a standardized interface for interacting with ArangoDB databases through the Model Context Protocol. It implements core database operations including querying, insertion, updating, and deletion of documents, as well as listing collections. The server utilizes the ArangoDB JavaScript driver and MCP SDK to offer a seamless integration between AI models and ArangoDB. It supports parameterized AQL queries and handles document metadata, making it suitable for a wide range of database-driven applications. This implementation is particularly useful for AI-assisted data analysis, content management systems, and applications requiring flexible document storage and retrieval in ArangoDB."
ravinahp,email-checker-mcp,0,,"This email validation tool, developed by Ravina Patel, provides a simple MCP server for checking email addresses. It integrates with external email verification services via the httpx library to perform real-time validation. The implementation focuses on ease of use, with a straightforward API that can be easily incorporated into existing applications or workflows. It's particularly useful for businesses and developers looking to improve data quality, reduce bounced emails, and enhance user experience in forms and sign-up processes. The tool's MCP compatibility allows for seamless integration with AI assistants and other MCP-enabled systems, expanding its utility beyond traditional email validation use cases."
ravinahp,flights-mcp,61,,"This flight search MCP server, developed by Ravina Patel, integrates with the Duffel API to provide flight search capabilities. Built with Python and leveraging libraries like httpx and pydantic, it offers a streamlined interface for querying flight information. The implementation focuses on simplicity and ease of use, making it accessible for AI assistants or applications needing to access flight data programmatically. It's particularly useful for tasks like travel planning, fare comparison, or building travel-related chatbots, enabling quick access to flight information without requiring deep knowledge of the underlying API complexities."
ravinahp,surf-mcp,12,,"This MCP implementation, developed by Ravina Patel, provides a Python-based interface for interacting with surf-related data and services. It leverages the MCP library and environment variable configuration to enable flexible deployment. The implementation is designed for Python 3.10+ and uses modern dependencies like Pydantic for data validation. It's well-suited for developers building surf forecasting tools, wave analysis applications, or integrating surf-related data into larger systems that utilize MCP's ecosystem."
rawveg,ollama-mcp,43,2393,"This MCP server, developed by tigreen, provides a seamless integration between Ollama's local LLM models and MCP-compatible applications like Claude Desktop. Built with TypeScript and Express, it offers tools for listing, pulling, and interacting with Ollama models through a standardized interface. The implementation focuses on simplifying access to Ollama's capabilities, enabling AI assistants to utilize locally-run language models. By connecting AI models with Ollama's functionalities, this server allows for sophisticated scenarios like on-premise AI processing, custom model deployment, and privacy-focused applications. It's particularly valuable for developers and organizations looking to leverage local LLM capabilities within their AI workflows while maintaining data control and reducing cloud dependencies."
ray0907,mcp-arxiv,0,,"The mcp-arxiv server provides AI assistants with the ability to search and retrieve academic papers from arXiv through the Model Context Protocol. It exposes two main tools: 'search' for finding papers matching specific queries and 'get' for retrieving the full content of papers. The implementation uses FastMCP, BeautifulSoup for HTML parsing, and requests for API interactions, enabling LLMs to access cleaned paper titles, abstracts, and content without dealing with complex HTML structures. This makes it particularly valuable for research workflows, literature reviews, and staying updated on academic publications directly within AI assistant conversations."
rayanzaki,mcp-google-contacts-server,1,1175,"MCP Google Contacts Server provides AI assistants with direct access to Google Contacts data, enabling them to list, search, create, update, and delete contacts through a simple interface. Built by Rayan Zaki, this server integrates with the Google People API to manage both personal contacts and Google Workspace directory users, with support for authentication via OAuth credentials or environment variables. The implementation includes tools for retrieving 'Other contacts' (people you've interacted with but haven't added), searching directory members, and formatting contact information in a readable format, making it valuable for personal contact management, email outreach, and organization directory exploration."
rayato159,sol-chad-mcp,4,,"SolanaChad is an MCP server that provides real-time Solana blockchain data access through a simple interface. Built in Rust using the Model Context Protocol SDK, it offers tools for checking current SOL price in USD and retrieving wallet balances from addresses on the Solana mainnet. The implementation leverages the CoinGecko API for price data and Solana's JSON-RPC API for blockchain interactions, making it useful for cryptocurrency monitoring, portfolio tracking, and blockchain data analysis applications."
rayyan9477,linkedin_mcp,1,,"LinkedIn MCP Server provides a bridge between AI assistants and LinkedIn's professional networking platform. This implementation enables automated interactions with LinkedIn including job searching, profile viewing, resume generation, and job applications through both API and browser-based methods. The server handles authentication, session management, and data caching while offering AI-powered features for tailoring resumes and generating cover letters based on job descriptions. Particularly useful for job seekers looking to automate their application process, recruiters searching for candidates, or professionals wanting to maintain their LinkedIn presence through AI assistance."
rayyokoyama,qase-mcp-server,1,,"Qase MCP server provides a bridge between AI assistants and the Qase test management platform, enabling automated test case management and reporting through a standardized interface. Built with TypeScript, it exposes tools for managing projects, test cases, and test runs through the Qase API while handling authentication and error states appropriately. This implementation is particularly valuable for QA teams who want to track and manage software testing activities directly through conversational AI."
razorback16,mcp-git-repo-browser,1,,"This Node.js implementation of a Git repository browser leverages the Model Context Protocol (MCP) to provide efficient and deterministic access to remote Git repositories. Developed by Razorback16, it offers two main tools: one for retrieving a tree-like representation of a repository's directory structure, and another for reading the contents of specified files. The server utilizes native Node.js modules, fs-extra for enhanced file operations, and simple-git for Git repository interactions. It implements clean error handling, resource cleanup, and creates deterministic temporary directories based on repository URL hashes. This implementation is particularly useful for AI assistants or applications that need to analyze or interact with Git repositories programmatically, without requiring local clones."
rbctmz,mcp-server-strava,0,,"This MCP server implementation provides integration with the Strava API, enabling access to fitness and activity tracking data. Developed by rbctmz, it utilizes Python and the Model Context Protocol SDK. The server is designed for use cases requiring programmatic access to Strava data, such as analyzing athletic performance, tracking fitness goals, or building custom applications that leverage user activity information from Strava."
rchaganti,azure-mcp-server,1,,"Azure MCP Server provides a standardized interface for interacting with and managing Azure cloud resources through the Model Context Protocol. Developed by Ravikanth C, this server exposes Azure functionality as tools that can be discovered and executed by AI assistants, including subscription management, resource group operations, resource listing, and storage account validation. The implementation uses Azure SDK libraries with environment-based authentication, making it ideal for developers and administrators who want to integrate Azure resource management capabilities into AI-powered workflows."
rdvo,mcp-server,0,,"This MCP server, developed by Steel, enables AI assistants to interact with web browsers through Puppeteer and Steel's browser automation platform. It provides tools for navigating web pages, taking screenshots, clicking elements, filling forms, and extracting content through a standardized interface. The implementation stands out by offering both local and cloud-based browser automation options, with built-in session management and console logging. By connecting AI capabilities with real browser interactions, this server empowers AI systems to perform complex web tasks, scrape data, and automate workflows. It is particularly useful for applications requiring web testing, data extraction, or any scenario where an AI assistant needs to interact with web content in a human-like manner."
azer,react-analyzer-mcp,6,,"React Analyzer MCP is a server that provides AI assistants with tools for analyzing React code. Developed by azer, this TypeScript implementation wraps the react-analyzer library to expose its functionality through the Model Context Protocol. The server enables AI assistants to parse, understand, and reason about React component structures, props, state management, and other React-specific patterns. It's particularly useful for code review, debugging assistance, and helping developers understand complex React codebases without having to manually trace through component hierarchies."
readingdancer,swagger-mcp,9,,"Swagger MCP is a server that connects to Swagger API specifications, helping AI assistants build models for generating MCP servers. Developed by Chris Houston, it downloads and locally caches Swagger definitions, then provides tools to extract endpoints, HTTP methods, models, and service connections. The implementation supports automatic configuration through a .swagger-mcp file that associates projects with specific APIs, reducing redundant API calls. Built with TypeScript and the MCP SDK, it's designed for integration with Cursor and other applications through stdio transport, making it ideal for developers who need to quickly generate API interfaces from Swagger documentation."
vizioz,teamwork-mcp,3,,"Teamwork MCP provides a simplified interface for interacting with the Teamwork API, allowing AI assistants to manage projects, tasks, people, and reports. Developed by Chris Houston, it offers tools for retrieving project details, creating and managing tasks, handling team members, and generating utilization reports in various formats. The server can be configured through environment variables or command-line arguments, with options to filter available tools for enhanced security. It's particularly useful for workflows requiring project management integration, task tracking, and team collaboration directly within AI assistant conversations."
reading-plus-ai,mcp-server-data-exploration,256,,"This MCP server, developed by ReadingPlus.AI LLC, provides AI assistants with powerful data exploration capabilities for CSV datasets. Built for use with Claude Desktop, it offers tools for loading CSV files, executing Python scripts, and generating insightful visualizations. The server leverages pandas and matplotlib to perform data analysis and create informative charts. By bridging AI models with data science libraries, this implementation enables AI systems to conduct exploratory data analysis, uncover patterns, and derive actionable insights from large datasets. It is particularly useful for scenarios requiring in-depth analysis of tabular data, trend identification, and data-driven decision making across various domains like real estate, weather patterns, or any field with structured CSV data."
reading-plus-ai,mcp-server-deep-research,25,,"A deep research MCP server that enables AI assistants to conduct thorough, structured investigations on complex topics. It guides the research process through a systematic approach: elaborating on the research question, generating focused subquestions, performing web searches, and synthesizing findings into a comprehensive report. The server maintains a record of the research process and collected data, making them available as resources. Developed by ReadingPlus.AI, this implementation is particularly valuable for educational contexts, academic research, and professional report generation where well-cited, properly formatted research outputs are needed."
rebers,4o-mini-search-mcp,1,634,"A minimal MCP server that provides AI assistants with access to OpenAI's and OpenRouter.ai's search capabilities through the gpt-4o-mini-search-preview model. This lightweight implementation requires only an API key to function and supports both direct OpenAI API access and OpenRouter as an alternative provider. The server exposes a single 'search' tool that forwards queries to the appropriate backend and returns the complete response, making it ideal for quickly adding web search capabilities to AI assistants without complex setup."
reblabers,mermaid-mcp,3,,"This MCP server implementation provides a bridge between Mermaid diagram syntax and the Model Context Protocol. Developed by reblabers, it leverages the @mermaid-js/mermaid-cli package to render Mermaid diagrams as images. The server is designed to work in a Node.js environment and can be containerized using Docker for easy deployment. It's particularly useful for AI assistants or other MCP-compatible clients that need to generate visual representations of data structures, workflows, or system architectures on-the-fly. The implementation focuses on simplicity and ease of use, making it ideal for integrating diagram generation capabilities into AI-driven documentation or explanation tasks."
rebots-online,mcp-chat-analysis-server,10,,"This MCP server for chat analysis, developed by Robin L. M. Cheung, integrates vector embeddings and knowledge graphs to provide advanced chat data processing capabilities. Built with Python, it leverages Neo4j for graph storage, Qdrant for vector search, and sentence transformers for embedding generation. The implementation stands out by combining semantic similarity search with graph-based relationship analysis, enabling more nuanced understanding of chat conversations. By exposing these capabilities through standardized MCP endpoints, it allows AI systems to perform complex chat analysis tasks such as topic modeling, sentiment analysis, and user behavior tracking. This server is particularly useful for applications in customer support analytics, social media monitoring, or building intelligent chatbots that can learn from and adapt to conversation patterns."
rebots-online,mcp-neo4j,1,,"This Neo4j MCP server, developed by the Rebots team, enables seamless integration between Large Language Models and Neo4j graph databases through the Model Context Protocol. Built with TypeScript and leveraging the Neo4j driver, it provides tools for creating, reading, updating, and deleting graph data structures. The implementation stands out by offering flexible configuration via environment variables and improved error handling, making it adaptable for various deployment scenarios. It's particularly useful for AI applications requiring complex relationship modeling, knowledge graph construction, or graph-based analytics, enabling tasks like recommendation systems, fraud detection, or network analysis with natural language interfaces."
recallnet,trading-simulator-mcp,0,,"Trading Simulator MCP Server enables AI models to interact with a multi-chain trading simulator API through structured tool calls. It provides account operations (balance checking, portfolio viewing), price operations (token price retrieval, historical data), and trading operations (executing trades between tokens) with intelligent token detection that automatically handles blockchain parameters. The server includes security features for API credential management, supports both Solana (SVM) and Ethereum (EVM) blockchains with chain-specific optimizations, and can be configured directly in Cursor or Claude Desktop for seamless integration. Particularly valuable for teams participating in trading competitions who need to execute trades and monitor performance without leaving their AI assistant interface."
rectalogic,langchain-mcp,172,26075,"This LangChain integration, developed by rectalogic, enables AI assistants (powered by LangChain) to leverage Model Context Protocol (MCP) tools within the LangChain framework. It provides an MCPToolkit class that wraps an MCP ClientSession, allowing seamless incorporation of MCP capabilities into LangChain workflows. Built in Python, the implementation abstracts away the complexities of MCP communication, presenting tools as standard LangChain BaseTools. By bridging LangChain's flexible architecture with MCP's extensible toolset, this integration enhances AI models' ability to interact with external services and data sources. It is particularly useful for developers already using LangChain who want to expand their AI applications' capabilities with MCP-compatible tools without significant changes to their existing codebase."
recursechat,mcp-server-apple-shortcuts,129,,"This MCP server, developed by recursechat, enables AI assistants like Claude to control Apple Shortcuts automations on macOS. Built with Node.js, it allows listing available shortcuts and running them by name with optional input parameters. The implementation provides a simple interface for automation control, integrating seamlessly with Claude Desktop. By connecting AI capabilities with Apple's powerful Shortcuts app, this server enables AI systems to trigger complex automations and perform tasks on macOS. It is particularly useful for scenarios like hands-free device control, automated workflow execution, and building AI assistants that can interact with and control macOS applications and system functions."
HEAD,gmail,0,,"The Gmail MCP Server provides AI assistants with direct access to Gmail accounts through a standardized interface. It enables reading emails, searching specific messages, sending emails, creating drafts, and managing labels and threads - all through MCP resources and tools. Built with the Google API Python client, the server handles OAuth authentication securely and exposes Gmail functionality through both a programmatic API and a command-line interface, making it particularly valuable for email management workflows, automated responses, and inbox organization without requiring users to leave their AI assistant conversation."
gridfireai,reddit-mcp,8,1471,"Reddit MCP server provides AI assistants with read-only access to Reddit content through PRAW (Python Reddit API Wrapper). Built with FastMCP, it exposes tools for searching subreddits, retrieving posts and comments, and accessing detailed metadata. The implementation focuses on content discovery and analysis use cases, making it valuable for researchers, content curators, and analysts who need to explore Reddit discussions and trends through natural language interaction."
redis,mcp-redis-cloud,11,,"A Model Context Protocol (MCP) server implementation for Redis Cloud, enabling AI applications to retrieve and use data from Redis Cloud databases as context for LLM interactions."
reeeeemo,ancestry-mcp,20,3878,"This Ancestry MCP server, developed by reeeeemo, enables AI assistants to interact with GEDCOM (.ged) genealogy files. It provides tools for listing, renaming, and searching genealogical data within specified directories. Built in Python, the implementation exposes GEDCOM parsing and manipulation functionality via a standardized MCP interface. By bridging AI models with genealogical records, this server facilitates tasks like family tree analysis, ancestor searching, and historical data extraction from GEDCOM files. It is particularly useful for AI assistants supporting genealogical research, family history projects, and ancestry-related information retrieval from GEDCOM datasets."
regibyte,todo-list-mcp,9,,"This MCP server implementation provides a simple todo list API using SQLite for data storage. It leverages the @modelcontextprotocol/sdk and better-sqlite3 to offer basic CRUD operations for managing tasks. The server includes functionality for creating, reading, updating, and deleting todo items, making it suitable for basic task management applications or as a starting point for more complex MCP-based productivity tools."
rleek,poc-mcp-proxy,0,,"MCP Proxy POC provides a bridge between Claude and the RelevanceAI API, enabling access to RelevanceAI tools directly within conversations. This implementation authenticates with RelevanceAI using environment variables, fetches available tools from specified tool IDs, and handles both tool listing and execution through the Model Context Protocol. The server runs on stdio transport, making it compatible with Claude Desktop integration, and includes error handling for failed tool executions. Particularly useful for workflows that require RelevanceAI's capabilities without leaving the conversation interface."
rember,rember-mcp,26,4752,"Allow Claude to create flashcards for you with the official Model Context Protocol (MCP) for Rember. Rember helps you study and remember anything you care about by scheduling spaced repetition reviews.

Features and examples:

Create flashcards from your chats ""... I like your answer, help me remember it""
Create flashcards from your PDFs ""Create flashcards from chapter 2 of this PDF"""
reminia,zendesk-mcp-server,5,,"This Zendesk MCP server, developed as an open-source project, enables AI assistants to interact with Zendesk support systems. It integrates with the Zendesk API to provide tools for retrieving and managing tickets, comments, and Help Center articles. Built with Python and leveraging the MCP library, it offers a standardized interface for Zendesk operations, abstracting complexities of API interactions. The server implements specialized prompts for ticket analysis and response drafting. It's particularly useful for customer support teams and AI developers looking to incorporate automated Zendesk interactions into their workflows, enabling use cases like intelligent ticket routing, automated response generation, and knowledge base integration."
deepsuthar496,remote-command-mcp,0,,"Remote Command MCP Server enables AI assistants to execute shell commands directly on the host machine across different operating systems. It automatically handles platform-specific differences between Windows and Unix-like systems, normalizing common commands (like 'ls'/'dir') and selecting the appropriate shell environment. The server provides a single tool called 'execute_remote_command' that can run any valid system command with optional working directory specification, making it useful for system administration, development workflows, and automation tasks without leaving the conversation interface."
renantrendt,mcp-github,1,,"GitHub MCP Server provides a bridge between AI assistants and the GitHub API, enabling repository management, file operations, issue tracking, and code search directly through conversation. Built with TypeScript and the Model Context Protocol SDK, it exposes tools for creating repositories, managing branches, handling pull requests, and searching code with proper error handling and authentication via GitHub Personal Access Tokens. The implementation follows a modular architecture with separate operation modules for different GitHub features, making it particularly valuable for developers who want to perform GitHub operations without leaving their AI assistant interface."
renant,mcp-tabnews,3,,"MCP TabNews provides access to TabNews content through a set of tools that interact with the TabNews API. Developed by Renan Teixeira, this TypeScript implementation offers capabilities for retrieving content listings, user posts, comments, and analytics data from TabNews. The server exposes nine tools including content retrieval, user content filtering, comment access, and analytics reporting functions. It's particularly useful for AI assistants that need to search, analyze, or reference TabNews discussions without direct API integration, and can be deployed via Smithery or run locally with Node.js."
renanvieira,brewfather-mcp,1,,"Brewfather MCP provides AI assistants with direct access to homebrew inventory data through the Brewfather API. This server exposes tools to retrieve and analyze fermentables, hops, and yeasts in a brewer's inventory, including detailed information about each ingredient such as quantity, specifications, and best-before dates. Built with FastMCP and httpx, it enables AI assistants to help homebrewers track inventory levels, check ingredient specifications, and get a complete summary of available brewing ingredients - making it valuable for recipe formulation, inventory management, and brewing process planning."
resend,mcp-send-email,300,,"This MCP server implementation provides email sending functionality using the Resend API. It exposes a 'send-email' tool that allows for sending plain text emails with options for scheduling delivery and configuring reply-to addresses. The server accepts command-line arguments or environment variables for API keys and sender information, making it flexible for different deployment scenarios. Ideal for applications that need to integrate email notifications or communications within AI-assisted workflows."
cyberchitta,llm-context.py,190,62324,"This LLM Context MCP server, developed by restlessronin, streamlines the process of sharing code context with Large Language Models. Built with Python using the Model Context Protocol SDK, it offers features like profile-based customization, code outlining, and integration with both MCP and clipboard for easy switching between tasks such as code review and documentation. The server implements smart file selection using .gitignore patterns and supports multiple programming languages. By abstracting the complexities of context generation, it enables AI systems to easily analyze and work with codebases. This implementation is particularly valuable for developers and teams requiring efficient code-related interactions with LLMs, facilitating use cases such as code reviews, documentation generation, and codebase analysis across various programming languages and project structures."
reuteras,mcp-search-searxng,0,,"MCP-Search-SearxNG provides a tool for Claude.ai to search the web through a SearxNG instance, enabling real-time information retrieval without leaving the conversation. Built by reuteras as an adaptation of SecretiveShell's MCP-searxng repository, it implements a FastMCP server that connects to a local or configured SearxNG search engine, processes search results including infoboxes, and returns formatted text responses. The implementation supports configuration through a .mcp.toml file, making it particularly valuable for users who want to maintain privacy by using their own search infrastructure rather than commercial search APIs."
samllpigyandong,revit_mcp,2,,"A Model Context Protocol server for Autodesk Revit that enables AI assistants to interact with Revit models through a WebSocket connection. This implementation bridges the gap between AI systems and Revit's building information modeling (BIM) capabilities, allowing for operations on architectural models without direct API access. Built with TypeScript and leveraging the MCP SDK, it provides a standardized way for AI tools to query and manipulate Revit project data, making it useful for automated design assistance, model analysis, and BIM workflow integration."
reyneill,kontxt,2,,"Kontxt MCP Server provides AI-driven codebase analysis by connecting to local repositories and using Gemini 2.0 Flash's 1M input window to generate context based on user queries. Developed by ReyNeill, it offers the get_codebase_context tool that enables AI clients like Cursor and Claude Desktop to understand codebases through internal tools (list_repository_structure, read_files, grep_codebase) while supporting both SSE and stdio transport protocols. The server intelligently maximizes context tokens, tracks API usage, and handles user-attached files for targeted analysis, making it particularly valuable for developers seeking to navigate and understand complex codebases without manual indexing."
rgarcia,mcp-server-server,1,,"This MCP server wrapper, developed as a proof of concept, transforms existing stdio-based MCP servers into websocket-accessible servers. It addresses the challenges of process management and infrastructure scaling in MCP client implementations by enabling network-based communication. The wrapper exposes MCP servers via websockets, allowing easier programmatic interaction without the need for spawning separate processes. This approach simplifies client development, reduces operational complexity, and paves the way for a centralized MCP server that can dynamically spin up and manage multiple server instances. It's particularly useful for developers building scalable AI assistant applications or those looking to streamline their MCP server integration process."
rgbkrk,rcon-mcp,4,,"This MCP server enables AI interactions with a running Minecraft server using itzg's docker-minecraft-server container. Developed to expose server administration capabilities to AI clients like Claude Desktop, Cursor, and Zed, it leverages the container's built-in RCON functionality to execute Minecraft commands. The implementation focuses on providing a standardized interface for common Minecraft operations, including player management, world manipulation, and server statistics retrieval. It's particularly useful for server administrators and modders who want to integrate AI-assisted management into their Minecraft environments, enabling use cases such as automated building, dynamic world events, and AI-enhanced player interactions without direct server access."
rhabraken,mcp-python,0,,"This MCP implementation, developed by rhabraken, provides a standardized interface for AI models to interact with PostgreSQL databases. Built using Python and leveraging SQLAlchemy, it offers a flexible solution for database operations across various SQL dialects. The implementation focuses on simplifying database access through environment variable configuration and Docker containerization, making it easy to set up and use in different environments. By connecting AI models with relational databases, this server enables sophisticated querying and data manipulation scenarios, enhancing the ability to retrieve and analyze structured data. It's particularly useful for applications and AI assistants that require programmatic access to SQL databases, facilitating use cases such as data analysis, reporting, and automated database management tasks."
rhitune2,mock-data-mcp,0,,"The Mock Data MCP Server provides AI assistants with tools to generate realistic fake data for testing and development purposes. Built with TypeScript using the Model Context Protocol SDK and Faker.js library, it offers three main tools: generateCustomData for flexible field-based data generation, generatePerson for creating mock personal information, and generateCompany for business-related data. The implementation supports various data types including personal details, internet information, location data, dates, commerce, finance, and more, making it valuable for developers who need sample data for prototyping, testing applications, or demonstrating data-driven features without using real user information."
rhnvrm,kite-mcp-server,2,,"This MCP server integrates with the Zerodha Kite trading platform, providing a comprehensive set of tools for algorithmic trading and portfolio management. It offers functionality for placing and managing orders, retrieving market data, handling user authentication, and accessing account information. The implementation is designed to facilitate automated trading strategies and real-time market analysis for Indian stock markets."
r-huijts,firstcycling-mcp,4,,"Provides a bridge to FirstCycling.com's cycling statistics and race results, enabling programmatic access to professional cycling data through a standardized interface. The server exposes tools for retrieving rider profiles, race results, rankings and other cycling statistics while handling authentication and request management. Built with Python and MCP, it features robust error handling and data parsing capabilities, making it valuable for developers building applications that need access to professional cycling data without scraping the website directly."
r-huijts,ns-mcp-server,22,,"This NS Travel Information MCP server, developed by r-huijts, provides real-time access to Dutch Railways (NS) travel data for AI assistants. It integrates with the official NS API to retrieve train schedules, disruptions, and station information. Built in TypeScript, the server handles API authentication and request formatting, exposing a standardized MCP interface. By bridging AI models and live transportation data, this implementation enables AI systems to plan trips, check train statuses, and provide up-to-date travel advice for the Dutch railway network. It is particularly useful for AI assistants needing to offer personalized travel recommendations, analyze commute options, or provide real-time updates on train services in the Netherlands."
r-huijts,portkey-admin-mcp-server,0,,"Portkey Admin MCP Server provides a comprehensive administrative interface for the Portkey AI platform, enabling management of users, workspaces, configurations, and cost analytics through a set of standardized tools. Built with TypeScript and the Model Context Protocol SDK, it offers direct programmatic access to Portkey's management API, allowing administrators to invite users, list virtual keys, retrieve workspace details, and analyze platform usage and costs. The implementation is particularly useful for organizations seeking granular control and insights into their AI infrastructure and spending."
r-huijts,rijksmuseum-mcp,41,,"This Rijksmuseum Amsterdam MCP server, developed by R.Huijts, provides a bridge to the Rijksmuseum API, enabling AI assistants to explore and interact with the museum's vast art collection. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for artwork search, detailed information retrieval, high-resolution image access, and user collection exploration. The server implements error handling and environment configuration, using dotenv for API key management. By abstracting the complexities of the Rijksmuseum API, it allows AI systems to easily access and analyze art historical data. This implementation is particularly valuable for applications in art research, education, and cultural exploration, facilitating use cases such as virtual museum tours, art analysis, and personalized collection curation."
r-huijts,strava-mcp,10,,"A Strava API integration server that enables AI assistants to access and interact with fitness data through the MCP protocol. This implementation provides tools for retrieving athlete profiles, activities, segments, routes, and clubs from Strava, with features for exporting routes in GPX/TCX formats. It handles authentication with token refresh capabilities and includes data validation using Zod schemas. Ideal for fitness analysis, training insights, and route planning use cases where AI assistants need to work with personal workout data."
r-huijts,xcode-mcp-server,156,,"This Xcode MCP server, developed by R. Huijts, provides a streamlined interface for AI assistants to interact with Xcode projects and iOS development workflows. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing Xcode projects, automating build processes, and facilitating code generation. The implementation focuses on simplifying complex Xcode operations, making it accessible for AI models to assist in iOS app development tasks. It's particularly useful for automating repetitive development tasks, generating boilerplate code, or providing intelligent suggestions during iOS app creation, enabling AI assistants to contribute to Xcode projects without requiring deep knowledge of the IDE's intricacies."
ricardolx,airgen-mcp,0,,"Airgen MCP is a TypeScript-based server for generating visual assets like images, logos, icons, and SVGs using OpenAI's DALL-E models. It provides a streamlined tool for asset generation with intelligent design prompts, supporting various image sizes and styles while abstracting away complex image generation workflows. The implementation is particularly useful for designers and developers needing quick, AI-generated visual assets for software projects."
ricauts,cybermcp,2,,"CyberMCP provides a comprehensive API security testing toolkit built on the Model Context Protocol, enabling AI assistants to perform authentication testing, SQL injection detection, data leakage analysis, rate limiting verification, and security header validation. Developed by ricauts, this TypeScript implementation offers specialized tools for various security testing scenarios including JWT vulnerability analysis, CORS configuration checking, and path traversal detection. The server includes a robust authentication manager supporting multiple auth methods (Basic, Token, OAuth2) and provides detailed security reports with severity ratings and remediation recommendations, making it ideal for security professionals who need to integrate automated API security testing into their workflows."
richard-weiss,mcp-google-cse,15,10499,"This Google Custom Search Engine MCP server, developed by Richard-Weiss, provides a streamlined interface for AI assistants to perform web searches using Google's CSE API. Built with Python and leveraging the google-api-python-client library, it offers a single tool for executing searches and returning structured results including titles, links, and snippets. The implementation focuses on simplicity and ease of use, requiring minimal setup with just an API key and engine ID. It's particularly useful for enhancing AI models with up-to-date web information, enabling tasks like fact-checking, research assistance, or content generation with current data, while operating within Google's free daily quota of 100 searches."
rickydata-indexer,notion_mcp_server,0,,"This MCP server, developed by an unnamed creator, provides a bridge between Cline and Notion knowledge bases via the Dify API. Built with Python using FastMCP, it enables users to query their Notion databases directly from the Cline VSCode extension. The implementation stands out through its use of the uv package manager for dependency isolation and its focus on robust error handling. It's particularly useful for developers and teams looking to seamlessly access their Notion-based documentation and knowledge bases within their development environment, enabling quick reference and knowledge retrieval during coding sessions."
erithwik,mcp-hn,24,14384,"This Hacker News MCP server, developed by Ricky, provides tools for fetching information from news.ycombinator.com. Built with Python using the MCP CLI, it offers functionality to retrieve different types of stories, search for stories, fetch story details including comments, and get user information. By abstracting Hacker News interactions into a standardized MCP interface, it enables AI systems to easily analyze and work with HN content. This implementation is particularly useful for applications involving tech news aggregation, trend analysis, and community engagement tracking, facilitating use cases such as personalized news feeds, startup research, and discussion topic generation."
rickyyy1116,mcp-youtube-sheets,9,134,"This MCP server, developed by Riku Kawashima, integrates YouTube search functionality with Google Sheets data storage. It leverages the Model Context Protocol SDK, YouTube Data API, and Google Sheets API to enable AI-powered video search and result logging. The implementation is built with TypeScript and designed for easy deployment, making it ideal for content creators, marketers, or researchers who want to automate YouTube data collection and analysis. Its key features include customizable search parameters, structured data output, and seamless Google Sheets integration for persistent storage and further analysis."
rifqi96,mcp-gitlab,2,,"GitLab MCP server that enables AI assistants to interact with GitLab repositories and features through a standardized interface. Built with TypeScript and the MCP SDK, it provides tools for repository management, project integrations, CI/CD operations, and user/group administration. The implementation features domain-specific managers for different GitLab API areas, proper error handling and type safety, and supports both GitLab.com and self-hosted instances, making it valuable for developers who want to use AI assistants for code review, repository management, and DevOps workflows."
riii111,researchmcp,6,,"ResearchMCP is a web search tool that combines multiple search APIs (Brave Search, Tavily Search, and Wikipedia) to provide comprehensive research capabilities through the MCP protocol. Built with Deno and Hono, it uses a hexagonal architecture with domain-driven design principles to intelligently route queries to the most appropriate search providers based on query classification. The implementation features automatic query categorization, parallel search execution, result deduplication, and caching to improve performance. It's particularly valuable for AI assistants that need to search the web for current information without requiring users to implement complex API interactions themselves."
rijkvanzanten,directus-mcp-server,19,413,"Directus MCP Server provides a bridge between AI assistants and Directus headless CMS, enabling AI tools to interact with content through the Directus API. Developed by Rijk van Zanten, this TypeScript implementation automatically generates tools based on the schema of the connected Directus instance, allowing for operations like reading items from collections, retrieving user information, and exploring available collections and fields. The server authenticates using environment variables for URL and token configuration, making it easy to set up for both global and local installations. Ideal for content managers and developers who want their AI assistants to access and manipulate structured content in their Directus instances without switching contexts."
rikachu225,mcp-pubmed-server,3,922,"This PubMed MCP server, developed by rikachu, provides AI assistants with access to PubMed's vast database of medical research articles. It offers tools for searching articles, retrieving recent open-access publications, and obtaining full-text links. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it implements automatic rate limiting to comply with NCBI's guidelines. The server abstracts PubMed API complexities, allowing AI systems to easily incorporate up-to-date medical research into their workflows. It's particularly useful for researchers, medical professionals, and AI developers working on healthcare applications, enabling use cases like literature reviews, staying current with recent research, and evidence-based medicine support."
rikuson,mcp-qase,1,,"Qase MCP Server provides a TypeScript-based integration with the Qase test management platform, enabling AI assistants to interact with test-related entities like projects, cases, runs, results, plans, suites, and shared steps. Built with strong typing using Zod and leveraging the Qase API, it offers a comprehensive set of tools for programmatically managing and querying test management data through a standardized MCP interface."
rileyedwards77,perplexity-mcp-server,0,,"This MCP server implementation provides a bridge to the Perplexity AI API, enabling AI assistants to leverage Perplexity's capabilities through various tools. Developed by Riley Edwards, it offers functionalities such as maintaining ongoing conversations, performing general searches, retrieving documentation, finding APIs, and checking for deprecated code. The server uses TypeScript and integrates with the @modelcontextprotocol/sdk for MCP compatibility. It's designed to simplify the integration of Perplexity AI into MCP-based systems, making it particularly useful for developers and AI applications requiring advanced search and conversational capabilities. The implementation focuses on error handling, chat history management, and flexible API interactions, supporting both stateless and stateful operations."
rileylemm,graphrag_mcp,4,,"GraphRAG MCP provides a hybrid retrieval system that combines Neo4j graph database and Qdrant vector database capabilities for powerful document search and context expansion. Developed by Riley Lemm, this server implementation enables semantic search through document embeddings, graph-based context expansion following relationships, and hybrid search combining both approaches. The server exposes tools for querying documentation and resources for accessing database schema information, making it particularly valuable for applications requiring both semantic relevance and structural context in document retrieval, such as technical documentation systems, knowledge bases, or any application needing contextually aware information retrieval."
rinardnick,mcp-terminal,3,1722,"This MCP terminal server, developed by Nicholas Rinard, provides a secure interface for AI assistants to execute shell commands in a controlled environment. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers robust security features including command whitelisting, timeout controls, and output size limits. The implementation focuses on safe command execution, making it easier for AI models to interact with system-level operations without compromising security. It's particularly useful for scenarios requiring controlled access to terminal functionality, such as automated system management, development workflows, or providing AI assistants with limited shell access, while maintaining strict security boundaries and resource controls."
rioriost,homebrew-age-mcp-server,1,18803,"Apache AGE MCP Server provides a bridge between Claude and PostgreSQL databases with Apache AGE graph extension, enabling graph database operations through Cypher queries. Developed by Rio Fujita, it offers tools for executing read queries, write operations, and retrieving schema information from AGE-enabled PostgreSQL databases. The server implements safety measures including query validation, parameter sanitization, and automatic query formatting with result limits. It's particularly useful for AI assistants that need to analyze graph relationships, perform graph traversals, or visualize connected data structures stored in PostgreSQL without requiring users to write complex SQL queries."
rishabh17081,paypal-au-subscription-connector,0,,"PayPal AU Subscription Connector integrates with PayPal's Account Updater service to help merchants maintain fresh payment card information in their e-commerce systems. Built by Rishabh Sharma using Python and the FastMCP framework, this implementation provides tools for subscribing payment cards to PayPal's updater service, retrieving subscription details, and processing webhook notifications for card updates. It supports multiple environments (SANDBOX, LIVE, and MOCKDB) and includes comprehensive error handling, making it ideal for merchants who need to automatically update stored payment information when customers' cards change."
rishabkoul,iterm-mcp-server,2,1404,"iTerm-MCP-Server is a Node.js implementation that enables AI assistants to interact with iTerm2 terminals on macOS through the Model Context Protocol. Developed by Rishab Koul, this server provides tools for creating terminal sessions, executing commands, reading terminal output, and managing active terminals. The implementation uses AppleScript to control the iTerm2 GUI while maintaining a parallel Node.js process to capture command outputs, ensuring both visual feedback and programmatic access to terminal operations. This server is particularly valuable for AI assistants that need to perform terminal operations without requiring users to switch contexts, making it ideal for development workflows, system administration tasks, and automated terminal interactions."
rishijatia,fantasy-pl-mcp,12,7177,"The Fantasy Premier League MCP server provides AI assistants with access to FPL data and analytical tools through a Python-based implementation. Built by Rishi Jatia, it offers resources for retrieving comprehensive player statistics, team information, and gameweek data, along with tools for comparing players and searching by various criteria. The server features efficient caching for API requests, fixture analysis capabilities, and position normalization utilities. It's particularly valuable for fantasy football managers who want to analyze player performance, compare statistics, and make informed team selection decisions without leaving their AI assistant conversation."
rishikavikondala,mcp-server-aws,101,,"This MCP server, developed by Rishika Vikondala, enables AI assistants like Claude to interact with AWS resources, specifically S3 and DynamoDB services. It provides tools for common operations such as creating/deleting S3 buckets, uploading/downloading objects, and performing CRUD operations on DynamoDB tables and items. The server integrates with the AWS SDK and automatically logs all operations, making them accessible through an audit endpoint. By bridging AI capabilities with AWS infrastructure management, this implementation facilitates easier cloud resource manipulation and monitoring. It is particularly useful for DevOps teams automating AWS workflows, developers needing quick access to cloud resources, or system administrators performing routine maintenance tasks through AI-assisted interactions."
rishipradeep-think41,drive-mcp,0,,"Drive MCP provides a server for interacting with Google Drive and Google Sheets, enabling AI assistants to search files, read document contents, and update spreadsheet cells. Built with TypeScript and the Google APIs, it authenticates using OAuth credentials and implements tools for file operations like searching Drive documents, reading file contents, and manipulating spreadsheet data. The implementation includes automatic token refresh and supports both resource-based access through gdrive:/// URIs and direct tool invocation, making it ideal for workflows requiring document retrieval, spreadsheet analysis, or collaborative content management without leaving the conversation interface."
rishipradeep-think41,gsuite-mcp,7,,"Google Workspace MCP Server provides tools for interacting with Gmail and Calendar APIs, enabling users to manage emails and calendar events through Claude or other MCP clients. Built with TypeScript and the Google APIs client library, it offers functionality for listing, searching, and sending emails, as well as creating and managing calendar events. The server requires OAuth authentication with Google Cloud and includes a utility script for obtaining refresh tokens. It's particularly useful for users who want to automate email and calendar operations without leaving their AI assistant interface."
riteshyaaa,mcp-btc-watch,1,,"Bitcoin Price MCP Server provides Claude AI with real-time access to cryptocurrency market data, specifically focusing on Bitcoin prices. The implementation fetches current price, 24-hour change percentage, and market cap information through dual API integration with CoinMarketCap and CoinGecko (with automatic fallback between services). Built with TypeScript and Node.js, it exposes a single specialized tool for Bitcoin price retrieval and can function both as a command-line utility and as an MCP server that Claude can query directly. This server is particularly valuable for users who want Claude to access up-to-date Bitcoin market information without requiring manual data entry or context switching to external price tracking websites."
ritvij14,crawl4ai-mcp,5,49136,"Crawl4AI MCP Server integrates web scraping and crawling capabilities with Cursor AI, enabling AI agents to extract content from websites. Built using the FastMCP framework, it provides tools for single-page scraping with metadata extraction and search functionality that can retrieve external links from Google search results. The implementation handles error cases gracefully with retries, supports both Markdown and JSON output formats, and is designed to work with Cursor Composer's agent mode. This server is particularly valuable for workflows requiring web content analysis, data collection, or research tasks where accessing online information enhances the conversation experience."
riza-io,riza-mcp,8,2398,"The Riza MCP Server provides a secure bridge between LLMs and Riza's isolated code interpreter API, enabling AI assistants to write, save, edit, and execute code safely. Built as a wrapper around the Riza API, it exposes functionality through discrete tools that allow LLMs to create reusable code tools, manage a library of saved tools, and execute arbitrary code in a sandboxed environment. This implementation is particularly valuable for workflows requiring secure code execution from LLM-generated content, offering both the flexibility of running arbitrary code and the convenience of maintaining persistent tools across conversations."
rizaqpratama,mcp-cucumberstudio,0,,"CucumberStudio MCP Server provides a bridge between AI assistants and the CucumberStudio API, enabling natural language interaction with test management resources. The server exposes endpoints for retrieving context about projects, features, and scenarios, as well as applying changes such as creating, updating, or deleting scenarios. Built with Node.js and Express, it implements robust error handling, request validation, and logging while abstracting away the complexity of the CucumberStudio API. This implementation is particularly valuable for teams who want to manage their BDD test scenarios through AI assistants without leaving their conversation interface."
rkmonarch,svm-mcp,1,,"SVM-MCP provides a bridge between Claude AI and SOON blockchain networks, enabling real-time querying of blockchain data through a set of specialized tools. Developed by rkmonarch, this TypeScript implementation connects to both testnet and mainnet SOON RPC endpoints, allowing users to check wallet balances, retrieve recent transactions, and view token holdings directly within Claude conversations. The server leverages the Solana Web3.js library for blockchain interactions and implements error handling for all operations, making it particularly valuable for users who need to access SOON blockchain data without switching contexts. While currently focused on SOON networks, the implementation can be easily adapted to work with any Solana-compatible blockchain or custom SVM implementation."
rlagudals95,mcp_figma,0,,"Figma MCP Server provides a bridge to the Figma design platform, enabling AI assistants to retrieve detailed design file information, node metadata, and image assets through a flexible, type-safe TypeScript implementation. Built with support for both stdio and HTTP/SSE transports, it allows developers to programmatically access Figma design data, download images, and extract layout, style, and effect information from design files."
rlopez133,mcp,7,,"This MCP server implementation provides a bridge between AI assistants and Ansible Automation Platform, OpenShift, and Event-Driven Ansible. It offers tools for managing inventories, job templates, and activations, enabling AI-driven automation workflows. The server integrates with existing Ansible and Kubernetes infrastructure, making it ideal for DevOps teams looking to enhance their automation capabilities with AI assistance."
r-lz,mcp-video-digest,9,,"MCP Video Digest enables AI assistants to transcribe and analyze video content from various sources like YouTube. Developed by R-lz, it leverages multiple transcription services (Deepgram, Gladia, Speechmatics, and AssemblyAI) to convert video audio into text, with automatic fallback between services for reliability. The implementation handles video downloading through yt-dlp and manages the entire workflow from URL input to transcription output. This tool is particularly valuable for content analysis, research, and accessibility purposes where extracting text from video content is needed."
rmasters,mcp-openapi,5,4430,"This MCP server implementation provides a bridge to OpenAPI-specified services, enabling AI assistants to interact with any API that follows the OpenAPI standard. Developed by Ross Masters, it dynamically generates MCP tools from an OpenAPI specification URL, allowing for seamless integration with a wide range of RESTful APIs. Built with Python and leveraging libraries like FastAPI and openapi3-parser, the server focuses on flexibility and ease of use. It supports OpenAPI 3.0 and 3.1 specifications in both JSON and YAML formats. The implementation is particularly useful for scenarios requiring interaction with multiple APIs, rapid prototyping, or integration with existing OpenAPI-documented services."
rmcendarfer2017,mcp-image-gen,0,,"This Node.js server integrates with Replicate's API to generate images using Stable Diffusion XL. It provides endpoints for creating and checking image generation predictions, handles authentication, and serves as middleware between frontend applications and the Replicate API. The server is designed for easy integration with Windsurf, an agentic IDE, and includes features like environment-based configuration and CORS support."
rmtech1,txtai-assistant-mcp,4,,"This MCP implementation provides a configurable server environment for handling memory-based operations. It offers customizable settings for server configuration, CORS, logging, and memory management through an environment file. The implementation stands out with its flexible memory limit option and support for custom data and logging directories. Built with scalability in mind, it's particularly useful for applications requiring efficient memory handling, such as chatbots, data processing systems, or AI-driven tools that need to manage and process large amounts of information. The server's ability to handle cross-origin requests makes it suitable for integration with various front-end applications, while its comprehensive logging capabilities aid in debugging and monitoring."
roadwy,cve-search_mcp,9,,"The cve-search_mcp server provides a bridge to the CVE-CIRCL API, enabling Claude to search and retrieve vulnerability information from the Common Vulnerabilities and Exposures database. Built with Python using the MCP framework, it offers tools to browse vendors, list products, search for specific CVEs, retrieve the latest vulnerabilities, and check database update status. This implementation makes it valuable for security researchers, system administrators, and developers who need to quickly access vulnerability information, verify security patches, or conduct security assessments without leaving their conversation with Claude."
robdodson,ollama-mcp-db,33,,"This MCP implementation provides an interactive chat interface that combines Ollama's LLM capabilities with PostgreSQL database access. Built with TypeScript and leveraging the Model Context Protocol, it enables natural language querying of SQL databases. The system automatically generates SQL queries based on user input, executes them through a secure, read-only connection, and returns AI-interpreted results. Key features include schema-aware responses and support for the qwen2.5-coder:7b-instruct model. This implementation is particularly useful for data analysts, business users, and developers who need to quickly extract insights from PostgreSQL databases without writing SQL queries manually."
robertheadley,chrome-debug-mcp,22,,"Chrome Debug MCP Server provides AI assistants with powerful browser control capabilities through Chrome DevTools Protocol and Puppeteer. Developed to enable advanced web automation, it supports launching Chrome with custom configurations, injecting userscripts with Greasemonkey-style functions, loading Chrome extensions, capturing console logs, and evaluating JavaScript in the browser context. This implementation is particularly useful for web scraping, automated testing, and browser-based AI agent tasks."
robertoamoreno,couchdb-mcp-server,2,,"This CouchDB MCP server, developed by Roberto Moreno, provides a bridge for AI assistants to interact with CouchDB databases. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for managing databases, documents, and Mango queries. The server automatically detects the CouchDB version to enable appropriate features, supporting basic operations across all versions and advanced Mango query capabilities for CouchDB 3.x+. It focuses on secure configuration management through environment variables and includes robust error handling. This implementation is particularly useful for applications requiring document database management, such as content management systems, data analytics platforms, or distributed web applications that need to leverage CouchDB's features through AI-driven interactions."
robertzaufall,mindm-mcp,1,,"This server allows you to programmatically interact with MindManager through the Model Context Protocol (MCP), a standardized way to provide context and tools to LLMs. It leverages the mindm library to manipulate MindManager documents, topics, relationships, and other mindmap elements."
robinong79,mcp-cosmos,0,,"MCP-Cosmos is a server implementation that provides a bridge between AI assistants and Azure Cosmos DB databases. It exposes tools for common database operations including inserting, retrieving, updating, and querying items within Cosmos DB containers. The server uses the Model Context Protocol SDK to handle requests through a stdio transport, translating natural language instructions into appropriate Cosmos DB operations. This implementation is particularly valuable for users who need to interact with their Cosmos DB data directly through AI assistants without writing complex database queries or switching contexts."
roboulos,xano-mcp,0,,"Xano MCP Server provides a bridge between Claude AI and Xano databases through Smithery, enabling AI agents to perform comprehensive database operations. Built with Python and FastMCP, it implements tools for managing Xano instances, databases, tables, and records with support for both stdio and WebSocket transport methods. The server handles authentication via Xano API tokens and offers capabilities ranging from basic CRUD operations to complex data querying, making it ideal for AI-assisted database management, data analysis workflows, and building intelligent applications that require direct access to structured data in Xano."
roboulos,simple-xano-mcp,1,,"A simplified server implementation that enables AI assistants to interact with Xano databases through the Metadata API. Built with Python and FastMCP, it provides core tools for listing instances, browsing databases and tables, managing table schemas, and working with indexes. The implementation focuses on essential database operations while maintaining clean error handling and logging, making it valuable for users who need to explore and manage Xano database structures through natural language interaction."
rock913,mongo-mcp,0,,"MongoDB MCP provides a bridge between AI assistants and MongoDB databases, enabling direct interaction with MongoDB collections through the Model Context Protocol. Built by Alex Andrushevich, this TypeScript implementation allows for querying, inserting, updating, and managing MongoDB data without leaving the conversation interface. The server can be configured with a MongoDB connection URL and deployed either via Docker or as a Node.js application, making it flexible for different integration needs. This implementation is particularly valuable for workflows requiring database operations, data analysis, or content management directly within AI assistant conversations."
rogerheykoop,mcp-safari-screenshot,0,,"This MCP server, developed by Roger Heykoop, provides a tool for capturing screenshots using Safari on macOS. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to automate the process of taking web page screenshots. The implementation focuses on utilizing Safari's native capabilities on macOS, offering a lightweight alternative to browser automation tools like Puppeteer. It's particularly useful for developers and QA teams who need to integrate automated screenshot capture into their workflows, enabling use cases such as visual regression testing, web archiving, and content verification without manual intervention or the overhead of full browser automation frameworks."
rohitg00,kubectl-mcp-server,342,1737,"kubectl-mcp-tool is an MCP server that enables natural language interaction with Kubernetes clusters, allowing AI assistants like Cursor, Claude, and WindSurf to perform kubectl operations through conversational commands. Developed by Rohit Ghumare under the MIT license, it features a minimal wrapper approach for better compatibility across different MCP SDK versions, supports multiple transport protocols (stdio and SSE), and includes specialized implementations for various AI assistants. The tool translates natural language queries into kubectl commands, handles resource management operations, and provides diagnostic capabilities, making it particularly valuable for developers who want to manage their Kubernetes resources through AI assistants without memorizing complex kubectl syntax."
roland0511,mcp-feishu-proj,2,7722,"MCP Feishu Project integrates Feishu Project management capabilities with Claude through a stdio-based transport system. The implementation provides a bridge to Feishu's project management API, allowing AI assistants to interact with project data, tasks, and resources directly within conversations. It uses environment variables for authentication and configuration, making it easy to connect to specific Feishu projects. This server is particularly valuable for teams using Feishu for project management who want to query project status, update tasks, or retrieve project information without leaving their conversation interface."
romanshablio,mcp_server,0,,"The MCP File Finder Server provides a powerful search capability for AI assistants to locate files within a user's system. Built with Python, it indexes and returns detailed file information including name, path, size, and creation date as demonstrated in the search_results.json output. The server can be configured through JSON files to specify execution parameters and permissions, making it adaptable to different environments. This implementation enables AI agents to efficiently navigate file systems, locate specific file types, and access relevant documents without requiring direct filesystem access, making it particularly valuable for document retrieval, code analysis, and content management workflows."
ronalddegsa,server-everything,3,,"This MCP server, developed by an unspecified author, provides system-level operations for AI agents. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for file operations, system information retrieval, HTTP requests, and command execution. The implementation focuses on providing a versatile interface for system-wide functionality, allowing AI agents to interact with the host system's resources. It's particularly useful for applications requiring AI-driven system management, enabling use cases such as automated file handling, system monitoring, web scraping, and task automation without direct exposure to underlying system complexities."
ronniemh,phrases-mcp-server,2,1086,"Phrases MCP Server provides a simple interface to a mock API for managing phrases and their authors. Built with TypeScript and the Model Context Protocol SDK, it offers tools for creating, retrieving, updating, and deleting phrases through a set of well-defined operations. The server connects via stdio transport and handles all API communication with proper error handling, making it useful for applications that need to manage and retrieve quote-like content with author attribution."
rootly-ai-labs,rootly-mcp-server,63,4500,"Rootly MCP Server provides a dynamic interface to the Rootly API for incident management directly within MCP-compatible editors like Cursor, Windsurf, and Claude. Developed by Rootly AI Labs, it transforms Rootly's OpenAPI specification into MCP tools that enable users to resolve production incidents without leaving their IDE. The server intelligently limits exposed API paths to prevent AI agent overwhelm, focusing on core incident management endpoints with default pagination to prevent context window overflow. This implementation is particularly valuable for SRE teams and developers who need to quickly respond to and manage production incidents while staying in their development environment."
ccc0168,modes-mcp-server,21,,"This MCP server, developed by Roo Veterinary Inc, enables custom mode management for AI agents. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides functionality for defining, loading, and applying custom behavioral modes. The implementation focuses on flexibility and extensibility, allowing users to create tailored AI agent behaviors through configuration files. It's particularly useful for developers and researchers working on specialized AI applications, enabling use cases such as domain-specific language models, context-aware assistants, or adaptive chatbots without directly modifying the underlying AI model."
vrtejus,mcp-rosetta,0,,"The Rosetta Symmetry Server provides tools for generating symmetry definition files from protein structures, enabling computational modeling of symmetric protein complexes. Built using the Model Context Protocol (MCP) framework, it offers three main tools: generating symmetry definitions from PDB files, saving all output files to a specified directory, and retrieving specific symmetry files. The server supports various symmetry modes including non-crystallographic (NCS), crystallographic (CRYST), and helical/fiber symmetries, with options to customize parameters like interaction distance and chain specifications. This implementation is particularly valuable for structural biologists and protein engineers who need to analyze or design symmetric protein assemblies through conversational interfaces."
roshan,rowik-mcp,0,,"This MCP server implementation provides a bridge to a personal MediaWiki instance, enabling AI assistants to search, retrieve, and interact with wiki content. It offers tools for searching pages, fetching full page content, listing category pages, and retrieving recent changes. The server is designed to enhance knowledge management and research workflows by allowing AI to access and manipulate structured information stored in a personal wiki."
rossh121,discord-mcp,0,,"Discord MCP server that enables AI assistants to interact with Discord servers through a set of tools for sending messages, reading message history, listing channels and servers, retrieving user information, and adding reactions. Built with TypeScript and the Discord.js library, it provides a flexible interface for programmatically managing Discord interactions with robust error handling, rate limiting, and permission checks."
rossh121,perplexity-mcp,0,,"This MCP server provides web search capabilities through the Perplexity API, featuring intelligent model selection based on query intent. It automatically chooses between models like sonar-deep-research, sonar-reasoning-pro, and sonar based on the nature of the search query, while also supporting domain filtering to customize search results and recency filtering for time-sensitive queries. The implementation includes tools for managing filters and model selection, making it particularly useful for Claude users who need up-to-date information from the web with control over search parameters and result quality."
rossja,irtoolshed-mcp-server,1,,"IR Toolshed MCP Server provides network analysis tools for security professionals, enabling AI models like Claude to perform lookups and analyses during security investigations. The server currently implements an ASN lookup tool that returns information about IP addresses including AS number and organization name, using the whois.cymru.com service. Future plans include adding DNS lookups, WHOIS record retrieval, IP geolocation, and other network analysis capabilities to create a general-purpose service for network incident responders."
rossshannon,weekly-weather-mcp,1,,"Weather MCP Server provides global weather forecasts and current weather conditions through the OpenWeatherMap API. This Python implementation offers two main tools: get_weather for comprehensive 8-day forecasts with detailed morning, afternoon, and evening data points, and get_current_weather for immediate conditions. The server handles location geocoding, timezone adjustments, and proper error handling, making it particularly useful for applications requiring weather data for planning outdoor activities, travel preparation, or location-specific weather alerts without requiring users to interact directly with the OpenWeatherMap API."
rotexhawk,mcp-puppeteer-server,0,,"MCP Puppeteer Server is a Home Assistant add-on that enables AI assistants to automate browser interactions through Puppeteer. Developed by Rotex Hawk, it provides tools for web navigation, element interaction (clicking, filling forms, hovering), screenshot capture, and JavaScript execution in a containerized environment. The server exposes browser console logs and screenshots as resources, supports both headless and visible browser modes, and is designed to run within the Home Assistant ecosystem while maintaining compatibility with standard MCP clients like Claude Desktop."
roychri,mcp-server-asana,55,6370,"This Asana MCP server, developed by Christian Roy, enables AI assistants to interact with the Asana project management platform. It provides a comprehensive set of tools for managing workspaces, projects, tasks, comments, and dependencies through the Asana API. The implementation abstracts Asana's functionality, offering a standardized interface for AI systems to perform project management operations. By connecting AI assistants with Asana, this server facilitates task automation, project tracking, and team collaboration. It is particularly useful for AI applications requiring seamless integration with Asana, such as automated project updates, task prioritization, or intelligent workload management across teams and projects."
royshil,obs-mcp,6,,"OBS MCP Server provides a bridge between AI assistants and OBS Studio through the OBS WebSocket protocol. It exposes a comprehensive set of tools organized by category - including scene management, source control, streaming operations, and transitions - allowing users to control OBS functionality programmatically. The server connects to a running OBS instance, handles authentication via environment variables, and translates MCP tool calls into WebSocket commands, making it valuable for automating streaming workflows, managing scenes and sources, and controlling recording or broadcasting without leaving the conversation interface."
roy2an,minium-mcp-server,0,,"Minium MCP Server provides a bridge between Claude and WeChat MiniProgram development tools, enabling AI assistants to interact with and control WeChat MiniProgram projects. Built by roy.yan, it consists of two components: a server that interfaces with the MiniProgram development environment and a connector that handles MCP protocol communication. The implementation supports a wide range of operations including navigation, element interaction (tapping, input, sliding), page manipulation, and JavaScript evaluation through HTTP requests to a local web server. This tool is particularly valuable for developers working on WeChat MiniPrograms who want to leverage AI assistance for testing, debugging, and demonstration workflows."
rss3-network,mcp-server-rss3,1,192,"MCP Server for RSS3 integrates the RSS3 API to enable AI assistants to query data across decentralized chains, social media platforms, and the RSS3 network. The server fetches OpenAPI specifications from RSS3 endpoints, converts them to MCP tools, and handles tool listing and execution through a stdio transport. It supports querying blockchain activities, social media content, RSS3 network information (staking, nodes), and AI intelligence data, making it valuable for workflows requiring real-time open web data access without leaving the conversation interface."
mshk,mcp-rss-crawler,4,,"An RSS feed crawler and aggregator that fetches, parses, and stores RSS feeds in a SQLite database, with support for filtering by category, searching, and article retrieval via Firecrawl. Designed to provide LLMs with a seamless way to access and interact with the latest news and articles through the MCP protocol, with comprehensive API endpoints for feed management and retrieval."
rt96-hub,prompt-tester,0,,"MCP Prompt Tester is a server that enables AI assistants to test and compare LLM prompts across different providers (OpenAI and Anthropic). It provides tools for listing available models, running side-by-side comparisons of prompts with different parameters, and managing multi-turn conversations. Built with Python and the MCP protocol, it features detailed token usage tracking, cost calculation, and optional Langfuse tracing for observability. This implementation is particularly valuable for prompt engineers and developers who need to evaluate prompt effectiveness, compare model responses, or test conversational flows without leaving their AI assistant interface."
rtuin,mcp-mermaid-validator,10,1208,"An MCP server that validates Mermaid diagrams and returns rendered SVG output if valid. It uses the mermaid-cli package to process diagram syntax, providing detailed error messages for invalid diagrams. The server exposes a single tool called 'validateMermaid' that accepts a diagram string as input and returns either a success message with the rendered SVG image or specific validation errors, making it useful for applications that need to verify and visualize diagram syntax without leaving the conversation interface."
ruan11223344,mcpdocserver,45,,"McpDocServer is a documentation crawler service that fetches and serves technical documentation through the Model Context Protocol. Built with Node.js and Puppeteer, it crawls specified documentation sources and makes them available via an API, allowing AI assistants to access up-to-date technical information. The implementation includes a browser manager for handling concurrent crawling tasks, a task manager for scheduling and monitoring crawl operations, and a server component that exposes the crawled documentation through standardized MCP endpoints."
ruanodendaal,bear-mcp-server,2,,"Bear MCP Server provides a semantic search interface for Bear Notes, enabling Claude to find and retrieve notes based on both keyword and vector similarity. Built with Node.js and the Model Context Protocol SDK, it creates embeddings using Xenova's transformers library and FAISS for vector indexing, allowing for powerful retrieval-augmented generation (RAG) capabilities. The server connects directly to Bear's SQLite database, offering tools to search notes, retrieve specific notes by ID, list tags, and perform semantic RAG queries, making it particularly valuable for knowledge management and accessing personal notes directly within Claude conversations."
6,mcp-server-rubygems,0,,"A TypeScript-based MCP server for fetching RubyGems metadata via the RubyGems.org API. Provides a set of tools for querying gem information, including searching gems, retrieving version details, finding gem owners, and exploring reverse dependencies. Designed to enable programmatic interaction with the RubyGems ecosystem through a standardized, type-safe interface."
ruchernchong,mcp-server-google-analytics,17,,"This Google Analytics MCP server, developed by Ru Chen Chong, integrates Google Analytics 4 (GA4) data with AI assistants. It leverages the Google Analytics Data API to provide a streamlined interface for accessing web analytics metrics. The server offers operations for retrieving page views, active users, event data, and user behavior statistics with customizable date ranges and dimensions. By connecting AI systems with GA4's powerful analytics capabilities, this implementation enables assistants to analyze website performance, user engagement, and traffic patterns programmatically. It is particularly useful for marketing teams, web developers, and data analysts looking to incorporate real-time web analytics into their AI-driven decision-making processes or automated reporting systems."
rudra-ravi,wikipedia-mcp,7,,"Wikipedia MCP server provides a bridge to Wikipedia's vast knowledge base, enabling AI assistants to retrieve, search, and analyze Wikipedia articles through a standardized set of tools. Built with Python and leveraging the Wikipedia API, it offers endpoints and tools for searching articles, retrieving full content, summaries, sections, and related topics. Particularly useful for research, contextual information gathering, and enhancing AI responses with reliable, encyclopedic knowledge."
rugvedp,linkedin-mcp,1,,"LinkedIn Profile Analyzer MCP server enables AI assistants to fetch, analyze, and search LinkedIn posts using the LinkedIn Data API. Built by Rugved Patil, it provides tools to retrieve posts for specific usernames, search content by keywords, filter by date ranges, and identify top-performing content based on engagement metrics. The implementation requires a RapidAPI key for authentication and stores retrieved data locally in JSON format, making it particularly valuable for social media analysis, content strategy development, and competitive research workflows."
ruibaby,1panel-mcp,3,,"1Panel MCP Server enables automated website deployment to 1Panel servers through a standardized protocol interface. Built by ruibaby, it creates static websites if they don't exist, uploads files from build directories, and provides detailed deployment statistics. The implementation uses Node.js with Express to expose deployment capabilities through the MCP standard, making it particularly useful for developers looking to streamline their website publishing workflow directly from AI-assisted environments like Cursor IDE."
ruixingshi,deepseek-thinker-mcp,39,1257,"This MCP server, developed by Ruixing Shi, provides a standardized interface for interacting with the DeepSeek Thinker model. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for generating chain-of-thought reasoning. The implementation focuses on exposing DeepSeek's advanced reasoning capabilities through a consistent MCP interface, enabling AI models to perform complex problem-solving and analytical tasks. By connecting AI assistants with DeepSeek's powerful cognitive abilities, this server facilitates sophisticated scenarios like multi-step reasoning, decision-making support, and in-depth analysis. It's particularly valuable for applications requiring advanced AI-driven problem-solving, such as research assistance, strategic planning, and complex data interpretation."
qloba,runbook-mcp-server,1,,"Runbook MCP Server provides Claude with access to Runbook documentation through a set of tools for retrieving and searching content. It enables querying articles by ID, listing articles within books, and searching across all books in an organization. The server uses the Model Context Protocol to expose both resource templates and tools that interact with the Runbook API, making it particularly valuable for teams who need to reference their documentation directly within Claude conversations without context switching."
runekaagaard,mcp-alchemy,155,,"MCP Alchemy, developed by Rune Kaagaard, provides a seamless interface between Claude Desktop and SQL databases. Built with Python and SQLAlchemy, it enables AI systems to directly query and analyze data from PostgreSQL, MySQL, MariaDB, SQLite, and other SQLAlchemy-compatible databases. The implementation offers tools for database exploration, query assistance, and data analysis, with features like smart result truncation and integration with claude-local-files for handling large datasets. By abstracting database interactions into an MCP interface, it allows AI assistants to act as database experts, facilitating use cases such as data exploration, SQL query writing, relationship mapping, and comprehensive data analysis across various database engines."
runekaagaard,mcp-notmuch-sendmail,2,,"This MCP server implementation, developed by an unnamed author, integrates Notmuch email management with sendmail functionality to provide AI-assisted email composition and sending capabilities. Built in Python using the FastMCP framework, it offers tools for searching email threads, viewing messages, and composing HTML emails with Markdown and LaTeX support. The implementation focuses on enhancing email workflows by leveraging AI to interact with local email databases and send messages. It's particularly useful for users who want to maintain control over their email data while benefiting from AI assistance in email management, composition, and sending tasks."
run-llama,mcp-server-llamacloud,72,,"This MCP server, developed by run-llama, provides seamless integration between AI assistants and LlamaCloud's managed vector index service. Built for use with Claude Desktop, it offers a tool for retrieving information from a knowledge base using natural language queries. The server leverages LlamaCloud's API to perform efficient vector searches on managed indexes, enabling AI models to access and utilize custom knowledge bases. By bridging AI capabilities with LlamaCloud's scalable vector storage, this implementation enhances information retrieval and knowledge augmentation for AI assistants. It is particularly useful for scenarios requiring domain-specific knowledge integration, semantic search capabilities, and scalable information access in AI-powered applications."
runninghare,ts-def-mcp,0,,"TypeScript Definition Finder MCP Server provides a tool for AI code editors to locate original TypeScript symbol definitions in codebases. Developed by runninghare, this server implementation uses the TypeScript Language Service to find definitions of imported symbols, classes, interfaces, and functions, returning both the file location and code snippet. The server exposes a single tool that accepts file path, line content, and column number parameters to precisely locate symbol definitions, making it particularly valuable for AI assistants that need to understand code structure and navigate complex TypeScript projects without context switching."
runpod,runpod-mcp-ts,3,,"Manage your RunPod cloud resources directly through an MCP-compatible client. Create, list, update, start, stop, and delete pods, serverless endpoints, templates, network volumes, and container registry authentications with ease. Streamline your RunPod operations using natural language commands via Claude or other MCP clients."
rupeebw,mcp-image-reader,0,,"Image-reader MCP server provides advanced image processing capabilities, enabling users to list, analyze, resize, and convert images through a set of flexible tools. Built with TypeScript and Sharp, it supports metadata extraction, thumbnail generation, and format conversion for various image types, making it useful for tasks like image management, preprocessing, and analysis."
client,mcp_server,410,,"This MCP implementation, developed by rusiaaman, exposes the wcgw library's functionality via MCP. wcgw enables access the local shell and file system for task automation and code execution. It integrates with Docker to provide full control over a Linux environment, including mouse and keyboard input. It allows the AI to interact directly with the user's system, execute commands, manipulate files, and even control a virtualized desktop. The implementation is particularly useful for developers and power users who want to leverage LLM intelligence for system automation, code development, and complex multi-step tasks that require direct interaction with the operating system and applications."
ryancardin15,azuredevops-mcp,13,,"This Azure DevOps MCP server provides seamless integration with Azure DevOps services, enabling AI assistants to manage work items, code repositories, boards, sprints, and projects through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, it exposes tools organized into four main categories: Work Item Tools for task management, Boards & Sprints Tools for agile workflow management, Project Tools for organizational structure, and Git Tools for source control operations. The implementation requires an Azure DevOps Personal Access Token for authentication and is designed to be easily extensible through a documented tool registration process."
ryancardin15,noaa,0,,"NOAA Tides and Currents MCP Server provides tools for interacting with NOAA's oceanographic and meteorological data APIs through FastMCP. Developed by Ryan Cardin, it enables access to water level data, tide predictions, currents, meteorological measurements, station information, moon phases, and sun position calculations. The server can be configured to run via stdio or SSE transport protocols and is containerized with Docker for easy deployment. Particularly valuable for maritime applications, weather monitoring, and astronomical calculations that require accurate tidal, current, and celestial data."
enso-labs,mcp-sse,3,,"MCPServe provides a lightweight server implementation for executing shell commands through the Model Context Protocol. Built by Ryan Eggleston, it leverages the langchain-mcp-adapters library to create a FastMCP server that exposes a shell_command tool, allowing AI assistants to run terminal commands in a containerized environment. The implementation includes Docker configuration for easy deployment, environment variable support for debugging and logging, and optional API key authentication. This server is particularly useful for scenarios requiring programmatic access to shell operations within a controlled, isolated environment."
ryanjoachim,mcp-batchit,17,,"This MCP implementation, developed using TypeScript, provides a robust foundation for building AI-powered applications. It leverages modern JavaScript features and strict type checking to ensure code quality and maintainability. The implementation focuses on modularity and extensibility, with a well-structured project setup including comprehensive linting and build configurations. It's particularly useful for developers looking to create scalable and type-safe AI integrations, enabling use cases such as natural language processing, data analysis, and machine learning model deployment without compromising on code quality or development experience."
ryanjoachim,mcp-rtfm,33,,"MCP-RTFM is a tool for transforming unstructured documentation into an intelligent, searchable knowledge base. Developed by Ryan Joachim, it addresses the common problem of non-existent or unreadable documentation by helping create clear, accessible 'manuals' from existing content. The implementation uses TypeScript and integrates with the Model Context Protocol SDK, leveraging natural language processing capabilities to analyze and structure information. It's designed for development teams, open source projects, or any organization looking to improve their documentation processes and make information more readily available to users and team members."
ryanlisse,lancedb_mcp,4,,"This LanceDB MCP server, developed by Ryan Lisse, provides a vector database interface for AI-assisted workflows. Built with Python and leveraging FastAPI, it enables efficient storage and similarity search of vector embeddings with associated metadata. The implementation supports key operations like creating tables, adding vectors, and performing nearest neighbor searches. It integrates seamlessly with Claude Desktop and other MCP clients, allowing natural language interactions with vector data. This server is particularly useful for developers and data scientists working on applications involving semantic search, recommendation systems, or any task requiring fast similarity lookups on high-dimensional data."
ryanmac,agent-twitter-client-mcp,5,189,"A TypeScript-based MCP server for interacting with Twitter, providing a robust set of tools for tweet operations, user profile management, and Grok AI integration. Built by ryanmac, this implementation supports multiple authentication methods (cookies, credentials, API) and offers flexible capabilities like searching tweets, sending messages, managing conversations, and accessing real-time Twitter data through a standardized interface. Particularly useful for AI assistants requiring dynamic Twitter interaction and conversational AI capabilities."
ryanpatrickwhiting,github-mcp-server,0,,"This GitHub MCP server, developed using TypeScript, provides a standardized interface for interacting with GitHub repositories through the Model Context Protocol. It leverages the Octokit REST library to offer GitHub API functionality, enabling operations like repository management, issue tracking, and code analysis. The server is designed as a command-line tool, making it easy to integrate into existing workflows and CI/CD pipelines. By abstracting GitHub interactions into an MCP interface, it allows AI systems to seamlessly work with GitHub data and operations. This implementation is particularly useful for automating repository tasks, generating code insights, and facilitating AI-assisted code reviews and project management on GitHub."
ryft-io,iceberg-mcp,29,2985,"Iceberg MCP is a server implementation that provides AI assistants with direct access to Apache Iceberg tables stored in AWS. The server exposes tools for exploring Iceberg catalogs, retrieving table schemas, examining table properties, and analyzing partition information. Built on top of PyIceberg with AWS Glue integration, it authenticates using AWS credentials from environment variables or profiles. This implementation is particularly useful for data engineers and analysts who need to explore and understand Iceberg table metadata without writing complex queries or code."
rymurr,signal-mcp,6,,"Signal MCP provides a bridge between AI agents and Signal messaging through the signal-cli tool, enabling agents to send messages to users and groups while receiving and parsing incoming communications. Built with modern Python async patterns and comprehensive error handling, this implementation offers tools for direct messaging, group communication, and message reception with timeout support. Particularly valuable for applications requiring secure messaging integration, it allows AI systems to participate in Signal conversations while leveraging the established security features of the Signal protocol."
ryojerryyu,mcp-server-memos-py,12,,"This MCP server for Memos, developed by RyoJerryYu, integrates the Memos note-taking application with AI assistants. It leverages the Memos API to provide a streamlined interface for managing notes, tags, and resources. The server abstracts Memos' API complexities, offering operations for note creation, retrieval, and organization. By connecting AI systems with Memos' features, this implementation enables assistants to automate note-taking tasks, organize information, and maintain structured knowledge bases. It is particularly useful for personal productivity applications, research assistants, or any AI system that needs to manage and retrieve textual information efficiently."
ryoureddy,medadapt-content-server,2,,"MedAdapt Content Server provides medical students and educators with access to curated educational resources from PubMed and NCBI Bookshelf. It offers tools for searching medical content, generating topic overviews, creating personalized learning plans, and extracting key points from articles. The server caches retrieved content in a local SQLite database for improved performance and offline access, while also supporting user-uploaded documents. Built with FastMCP, it enables AI assistants to deliver evidence-based medical information tailored to different academic levels."
ryuichi1208,mackerel-mcp-server,1,,"A Mackerel MCP server that enables Claude AI assistant to interact with the Mackerel server monitoring platform. Developed by ryuichi1208, this implementation provides tools to retrieve host information, service details, metrics, and manage monitoring configurations through the Mackerel API. The server supports operations like listing hosts, retrieving specific host data, updating host status, managing monitors, and handling alerts and downtimes. It requires a Mackerel API key and can be integrated with Claude Desktop for interactive monitoring of server infrastructure through natural language conversations."
sacode,searxng-simple-mcp,1,2616,"SearxNG Simple MCP Server provides web search capabilities through the SearxNG privacy-focused search engine. Built with Python using FastMCP, it offers a clean interface for performing web searches with customizable parameters like result count, language, and time range. The server can be deployed via Docker or installed directly in Claude Desktop, making it ideal for users who need up-to-date web information while maintaining privacy and avoiding direct dependence on commercial search APIs."
sadiuysal,mem0-mcp-server-ts,0,,"mem0-mcp-server-ts is a TypeScript implementation of the Model Context Protocol server that integrates with Mem0's memory storage and semantic search capabilities. The server provides tools for creating memory streams, appending content, searching memories using semantic queries, reading from streams, and deleting streams. It maintains an in-memory representation of streams while persisting data to Mem0's backend when user and agent IDs are provided. This implementation is particularly valuable for AI assistants that need persistent memory storage with semantic search capabilities across conversations, enabling them to recall user preferences, conversation history, and other contextual information without switching interfaces."
safedep,pinner-mcp,9,,"Pinner-MCP is a Model Context Protocol server that helps pin dependencies to specific versions for enhanced security and reproducibility. It provides tools to resolve GitHub references to commit SHAs and Docker image tags to digests, enabling precise version pinning in GitHub Actions workflows and Dockerfiles. Built by SafeDep, this implementation focuses on supply chain security by ensuring that external dependencies are immutably referenced, preventing potential supply chain attacks through dependency substitution."
safurrier,mcp-filesystem,14,,"MCP-Filesystem provides secure, token-efficient access to local filesystems with advanced capabilities beyond basic file operations. Built by Alex Furrier, it features line-targeted reading and editing with content verification, powerful search through ripgrep integration, and intelligent context management for large files. The implementation includes pagination controls to prevent context overflow, multi-file operations to reduce round-trips, and specialized utilities like file comparison and directory analysis. This server is particularly valuable for AI assistants working with large codebases or text datasets, enabling precise navigation and manipulation while maintaining strict path validation for security."
sagacious-satadru,documentation-mcp,1,,"Documentation-MCP is a server implementation that enables AI assistants to search and retrieve content from popular documentation sites including LangChain, LlamaIndex, and OpenAI. It uses the Serper API for Google search to find relevant documentation pages, then fetches and processes the content with BeautifulSoup to extract meaningful text. The server exposes a single tool that allows querying specific libraries with customizable character limits, making it particularly useful for developers and users who need up-to-date information about AI frameworks beyond an assistant's knowledge cutoff."
sahmadumass,notion-mcp-server,3,,"This MCP server implementation provides a bridge to Notion, enabling AI assistants to interact with Notion workspaces. Developed by SAhmadUmass, it offers tools for searching, retrieving, creating, and updating Notion pages and databases. The server is designed for use cases requiring natural language interactions with Notion content, such as AI-driven note-taking, knowledge management, or collaborative document creation."
saik0s,mcp-browser-use,385,,"This MCP server for browser-use, developed by an unnamed author, provides a robust interface for AI assistants to interact with web browsers and perform automated web tasks. Built with Python and leveraging libraries like browser-use, FastAPI, and LangChain, it offers tools for web scraping, form filling, and general web automation. The implementation focuses on abstracting away browser complexities, making it accessible for AI models to navigate websites, extract data, and interact with web applications. It's particularly useful for tasks like data collection, web testing, or integrating web-based workflows into AI systems, allowing assistants to interact with the web without requiring deep knowledge of browser automation techniques."
sailfish-finance,educhain-ai-agent-kit,3,,"SailFish DEX Agent Kit provides a bridge to the SailFish decentralized exchange on the EDU blockchain, enabling AI assistants to perform token swaps, query liquidity pools, and check market data. Built with TypeScript and leveraging a GraphQL subgraph, it supports operations like finding optimal swap routes, retrieving token prices, and checking arbitrage opportunities across centralized and decentralized exchanges."
saintdoresh,crypto-trader-mcp-claudedesktop,3,,"Crypto Trader MCP Tool provides real-time cryptocurrency market data through the CoinGecko API, specifically designed for Claude Desktop. Developed by SaintDoresh, this Python implementation offers six tools for accessing cryptocurrency prices, detailed market information, historical charts, search functionality, trending coins, and global market statistics. The server connects to CoinGecko's free API and handles data formatting and error management, making it particularly valuable for users who need up-to-date cryptocurrency information for market analysis, investment research, or tracking crypto trends without leaving their Claude Desktop environment."
saintdoresh,yfinance-trader-mcp-claudedesktop,8,,"YFinance Trader MCP Tool provides real-time stock market data and trading capabilities for Claude Desktop through the yfinance library. Developed as an adaptation of the mcp-stocks project, it offers six specialized tools for retrieving stock quotes, company overviews, historical price data, symbol searches, analyst recommendations, and insider transactions. The implementation uses the MCP library directly instead of FastAPI, with comprehensive error handling and support for both equity and limited cryptocurrency data, making it particularly valuable for financial analysis, investment research, and market monitoring directly through natural language queries."
saintgull,palette,1,,"Coolors MCP Server enables AI assistants to generate harmonious color palettes by automating interactions with Coolors.co through Playwright. The server provides two key functions: generating random color palettes and creating palettes based on a specific starting color. Built with Express.js, it includes a fallback mechanism that algorithmically generates complementary colors when the website interaction fails. Ideal for web developers, designers, and creative professionals who need quick access to cohesive color schemes for their projects."
saiprashanths,code-analysis-mcp,9,,"This MCP implementation, developed using Python 3.12, provides a code analysis tool with HTTP capabilities. It integrates with external services via the httpx library and leverages the MCP CLI for enhanced functionality. The implementation focuses on analyzing code repositories, likely using pathspec for file pattern matching. By combining code analysis with MCP's standardized interface, it enables AI-assisted code review, static analysis, and potentially automated refactoring suggestions. This tool is particularly suited for development teams looking to integrate AI-powered code analysis into their workflows, improving code quality and consistency across projects."
sakce,mcp-server-monday,21,13152,"This MCP server implementation provides a bridge to Monday.com, enabling AI assistants to interact with boards and items on the platform. Developed by Jovan Sakovic, it offers tools for creating items, retrieving board groups, adding comments, listing boards, and managing sub-items. The server is built using Python and integrates with the Model Context Protocol SDK. It focuses on secure API key management and workspace identification, making it suitable for AI applications that need to automate tasks within Monday.com. The implementation is designed for easy setup within the Claude Desktop environment and is particularly useful for project management, task tracking, and team collaboration workflows."
salamentic,google-flights-mcp,1,,"Flight Planner MCP server that leverages the fast-flights API to enable advanced flight search and travel planning capabilities. Built with Python and FastMCP, it provides tools for searching one-way and round-trip flights, retrieving airport information, and generating travel recommendations. Particularly useful for travelers seeking detailed flight options and trip planning assistance through a conversational AI interface."
xlengelle-sf,agentforce-mcp-xlengelle,4,,"This MCP server provides a bridge to Salesforce's Agentforce API, enabling AI assistants to authenticate, create sessions, and exchange messages with Salesforce agents. Built with Python and the FastMCP framework, it features a session management system that maintains authentication state and sequence IDs for each client, along with tools for both step-by-step interaction and a streamlined conversation flow. The implementation includes comprehensive setup scripts and detailed configuration guidance for Salesforce integration, making it particularly useful for organizations looking to extend their AI assistants with access to Salesforce data, customer service capabilities, or domain-specific knowledge contained within their Salesforce agents."
samarthsinghal28,gmail_mcp_server,1,,"This Gmail MCP server provides a robust integration with Google's Gmail and Calendar APIs, enabling AI assistants to perform email and calendar operations. The implementation offers tools for retrieving inbox and sent emails, searching emails using Gmail's query syntax, sending emails with attachments, and managing calendar events including video conference creation. Built with Python using the FastMCP framework, it handles authentication through OAuth2 and manages token persistence for seamless operation. Ideal for applications requiring email communication management, calendar scheduling, and meeting coordination within AI workflows."
samcfinan,linear-mcp-server,5,,"This Linear MCP server provides a robust integration with the Linear project management API, enabling AI assistants to interact with projects, initiatives, and issues. It offers a wide range of tools for creating, viewing, updating, and managing Linear resources, including advanced features like issue relations and project-initiative linking. The implementation is designed to support holistic project management via Claude, with a focus on comprehensive functionality beyond existing Linear MCP servers. It's particularly well-suited for teams looking to leverage AI assistance in their Linear workflows, from high-level initiative planning to granular issue tracking and prioritization."
samefarrar,mcp-ankiconnect,8,9940,"This AnkiConnect MCP server, developed by samefarrar, integrates Anki flashcard functionality with Claude's Desktop interface. It leverages the AnkiConnect plugin to provide tools for retrieving due cards, submitting reviews, and getting card counts across decks. Built with Python 3.11+ and the FastMCP framework, it enables natural language interactions for spaced repetition learning within AI conversations. The implementation focuses on seamless integration with existing Anki installations and workflows. It's particularly useful for students, lifelong learners, and anyone looking to incorporate AI-assisted flashcard review and creation into their study routines."
samge0,mcp-qqmusic-test-server,2,,"MCP-QQMusic-Test-Server provides a bridge between AI assistants and the QQ Music API, enabling access to music streaming services through natural language interactions. This implementation leverages the qqmusic-api-python library to handle authentication and API requests, while using the MCP framework to expose music search, playback, and playlist management capabilities. The server requires Python 3.13 and is designed with a minimal dependency footprint, making it ideal for developers who want to integrate QQ Music functionality into their AI assistant workflows without dealing with the underlying API complexities."
samihalawa,mcp-server-ai-vision,0,,"This MCP server provides AI vision capabilities for analyzing UI screenshots, integrating with the Gemini API. It offers tools for screen analysis, file operations, and UI/UX report generation. The implementation uses Node.js and TypeScript, with recent fixes improving method naming, removing Playwright dependency, and simplifying response formats. It's designed for automated UI testing, visual QA workflows, and generating insights from application screenshots."
samihalawa,mcp-server-smtp,1,,"This MCP server implementation provides SMTP email functionality with template management. It offers tools for sending individual and bulk emails, managing SMTP configurations, and creating email templates with variable substitution. The server is designed for use cases requiring customizable email automation, such as sending personalized newsletters or transactional emails at scale."
saml1211,prd-mcp-server,3,,"PRD Creator MCP Server provides a specialized interface for generating and validating Product Requirements Documents through standardized templates. Built with TypeScript and the Model Context Protocol SDK, it offers tools for PRD generation, validation against best practices, and access to customizable document templates. The server stores templates in a lightweight SQLite database and exposes functionality through well-defined MCP tools and resources. Developed by Sam Lyndon, this implementation helps product managers, technical leads, and development teams create consistent, high-quality PRDs directly within AI conversations, streamlining the documentation process for software and product development."
sammcj,bybit-mcp,7,,"This Bybit MCP server, developed by Alex Andrushevich, provides a read-only interface to Bybit's cryptocurrency exchange API. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers tools for retrieving real-time market data, order book information, historical price data, and account details. The implementation focuses on safety by enforcing read-only API access and includes features like testnet support and debug logging. It's designed for integration with MCP clients like Claude Desktop, enabling AI-assisted analysis of cryptocurrency market trends, portfolio management, and trading strategy development. This tool is particularly useful for traders, researchers, and developers looking to incorporate live crypto exchange data into their AI workflows without risking unauthorized trades."
sammcj,mcp-data-extractor,5,1417,"This MCP server implementation, developed by Sam McLeod, provides a tool for extracting data from TypeScript/JavaScript code into JSON configuration files. Built with TypeScript and leveraging Babel for parsing, it focuses on migrating hardcoded data out of source code. The server is designed to integrate with AI-assisted code refactoring workflows, making it particularly useful for projects aiming to improve code maintainability and configuration management. It offers a streamlined approach to data extraction, potentially simplifying internationalization efforts and dynamic content management in software applications."
sammcj,mcp-github-issue,9,861,"This MCP GitHub Issue server, developed by Sam McLeod, provides LLMs with the ability to fetch and use GitHub issues as task descriptions. Built with TypeScript using the Model Context Protocol SDK and Octokit, it offers a 'get_issue_task' tool to retrieve issue details from public GitHub repositories without authentication. The server parses issue data into a structured task format including title, description, and source URL. By abstracting GitHub issue interactions into a standardized MCP interface, it enables AI systems to easily work with real-world software development tasks. This implementation is particularly useful for applications involving project management, bug tracking, and collaborative coding, facilitating use cases such as automated task prioritization, issue summarization, and development workflow analysis."
sammcj,mcp-llm,29,2818,"This MCP server implementation provides access to LLMs using the LlamaIndexTS library. Developed by Sam McLeod, it offers tools for generating code, writing documentation, and answering questions. The server supports various LLM providers including Ollama and OpenAI, and can be configured with environment variables to customize model settings. It's designed for easy integration into AI-assisted development workflows and natural language processing tasks."
sammcj,mcp-package-docs,53,7216,"This MCP server, developed by Sam McLeod, provides efficient access to package documentation across multiple programming languages. Built with TypeScript and Node.js, it supports Go packages via 'go doc', Python libraries using built-in 'help()', and NPM packages through registry documentation. The server implements smart parsing to deliver structured output with descriptions, usage, and examples, while maintaining a minimal memory footprint through built-in caching. By offering a standardized interface for package documentation retrieval, it enables AI models to quickly access and utilize up-to-date library information. This implementation is particularly useful for developers and AI assistants working on multi-language projects, code analysis tasks, and automated documentation generation."
sammcj,mcp-package-version,74,11587,"This MCP server, developed by sammcj, provides AI assistants with up-to-date package version information for npm and PyPI registries. Built with TypeScript, it offers tools to check latest stable versions for individual packages or bulk queries across both ecosystems. The implementation stands out by integrating directly with public registries and providing flexible version range options for different use cases. By connecting AI capabilities with real-time package data, this server enables AI systems to recommend and use current, compatible dependencies when writing or reviewing code. It is particularly useful for maintaining project dependencies, ensuring security compliance, and automating dependency updates in software development workflows."
sammcj,mcp-snyk,6,,"Snyk MCP Server provides a secure code scanning interface for Claude, enabling users to scan GitHub repositories and Snyk projects for security vulnerabilities directly within conversations. The implementation integrates with the Snyk CLI to perform security scans, verify API tokens, and list projects, with multiple configuration options for organization IDs. Built by sammcj, it handles authentication through environment variables and supports scanning repositories via GitHub URLs, making it particularly valuable for developers who need to identify security issues in their code without leaving their conversation interface."
sammyl720,image-generator-mcp-server,6,,"This image generation MCP server integrates OpenAI's DALL-E 3 model with AI assistants. It provides a streamlined interface for generating images based on text prompts, abstracting the complexities of the OpenAI API. The server enables AI systems to dynamically create visual content by constructing image generation requests and retrieving results programmatically. By connecting AI assistants with DALL-E's advanced image synthesis capabilities, this implementation allows for on-demand creation of custom visuals from textual descriptions. It is particularly useful for applications requiring AI-driven image generation, such as content creation tools, design assistants, or any system that needs to produce tailored visual output based on text input."
samsel,onesies,0,,"This Mac volume controller MCP server, developed by Sam Selvanathan, provides a simple interface for AI assistants to control the audio output of macOS systems. Built using Node.js and the MCP SDK, it exposes two main functions: muting and unmuting the computer's volume. The server utilizes Apple's osascript to execute system-level commands, bridging the gap between AI interactions and OS audio controls. This implementation is particularly useful for scenarios where voice-activated AI assistants need to manage system audio, such as in smart home setups or during automated presentations. By abstracting macOS-specific commands into a standardized MCP interface, it allows AI systems to seamlessly integrate volume control into their workflows without dealing with platform-specific intricacies."
samuelgursky,davinci-resolve-mcp,119,,"A Python-based MCP server for DaVinci Resolve that provides programmatic access to video editing, color grading, and media management functions. Created by Samuel Gursky, this implementation enables developers and editors to automate complex workflows in DaVinci Resolve through a flexible scripting interface, supporting operations like timeline manipulation, clip analysis, color correction, and media pool management."
samuelrizzo,jira-mcp-server,0,,"Jira MCP Server enables AI assistants to interact with Atlassian Jira through a set of specialized tools. Built by Samuel Rizzo, this TypeScript implementation provides capabilities for listing projects, retrieving issue details, searching issues by project and assignee, listing project members, and checking user assignments. The server authenticates with Jira's API using email and token credentials, handles request validation with Yup schemas, and formats responses in markdown for optimal readability. It's particularly valuable for teams who want to query and analyze their Jira projects and issues directly within AI assistant conversations without context switching to the Jira interface."
samuraikun,aws-s3-mcp,3,799,"AWS S3 MCP Server provides a bridge between AI assistants and Amazon S3 storage, enabling direct access to bucket contents through the Model Context Protocol. It offers tools for listing buckets, browsing objects, and retrieving file contents with automatic handling of different file types including PDF text extraction. Built with TypeScript and the AWS SDK, this implementation includes comprehensive testing, Docker-based development environment, and secure credential management - making it valuable for workflows that require AI assistants to access, analyze, or reference documents and data stored in S3 buckets."
samwang0723,mcp-atlassian,3,,"This MCP server implementation provides integration with Atlassian's Confluence and JIRA APIs. It allows AI assistants to interact with Confluence pages and JIRA issues, enabling tasks like content creation, issue tracking, and project management. The server uses environment variables for authentication and includes Docker support for easy deployment. It's designed for use cases requiring collaboration on documentation or software development workflows within Atlassian ecosystems."
samwang0723,mcp-memory,2,,"This MCP server implementation provides long-term memory storage for LLM conversations using Redis Graph. It offers tools for creating, retrieving, updating, and deleting memories of various types (conversations, projects, tasks, etc.), as well as establishing relationships between them. Developed by Sam Wang, it's designed for use cases requiring persistent knowledge graphs in AI applications, such as maintaining context across multiple interactions or building complex information networks."
samwang0723,mcp-sumologic,2,,"This MCP server integrates with the Sumo Logic API to perform log searches. It allows querying Sumo Logic logs using custom queries and configurable time ranges. The implementation includes error handling, detailed logging, and Docker support for easy deployment. It's designed for use cases requiring analysis of log data from Sumo Logic, such as troubleshooting, monitoring, or generating insights from application logs."
sanchisingh01,mcp-server---gmail-plugin-for-claude-desktop,0,,"A Gmail plugin for Claude Desktop that enables direct access to Gmail functionality through the MCP protocol. Developed by Sanchi Singh, this server implementation allows AI assistants to read unread emails, send new messages, trash emails, and open emails in a browser. The server authenticates with Gmail using OAuth 2.0 and exposes these capabilities as tools that can be called programmatically, making it valuable for email management workflows where users need to interact with their Gmail account without leaving the Claude interface."
sanderkooger,mcp-server-ragdocs,18,3025,"The MCP-server-ragdocs provides tools for retrieving and processing documentation through vector search, enabling AI assistants to augment their responses with relevant documentation context. Built with TypeScript, it supports both local (Ollama) and cloud-based (OpenAI) embeddings generation, integrates with Qdrant for vector storage, and includes tools for semantic document search, URL extraction, and queue management. This implementation is particularly valuable for workflows requiring context-aware AI responses backed by specific documentation sources."
sanjeev23oct,figma-mcp,1,,"A Figma MCP server that enables AI assistants to extract and process design elements from Figma files for React implementation. The server provides tools to retrieve processed Figma file content and component image URLs through the Figma API, transforming complex design data into structured formats ready for frontend development. It includes utilities for processing node positions, backgrounds, text styles, and auto-layout properties, making it valuable for developers who need to accurately translate Figma designs into React components without manual recreation."
sanxfxteam,gemini-mcp-server,3,,"Provides image generation capabilities through Google's Gemini 2 API, exposing a single tool for creating images from text prompts with configurable parameters like aspect ratio and output format. Built with Node.js and the MCP protocol, it handles the experimental Gemini image generation feature while providing proper error handling and base64 image encoding. This implementation is particularly valuable for users who want to generate AI images through natural language requests without dealing directly with the Gemini API."
sapientpants,sonarqube-mcp-server,19,,"SonarQube MCP Server integrates SonarQube's code quality analysis capabilities with AI assistants through the Model Context Protocol. Built in Rust, it provides tools for retrieving code metrics, accessing issues (bugs, vulnerabilities, code smells), checking quality gate statuses, and analyzing project quality over time. The server exposes a set of tools that allow AI assistants to query SonarQube projects, making it valuable for development teams who want their AI assistants to have awareness of code quality metrics and issues without leaving their conversation interface."
sarathsp06,sourcesage,3,,"SourceSage is an MCP server for efficient code memory management, developed by Sarath Sadasivan Pillai. It creates and maintains a knowledge graph of code entities, relationships, patterns, and style conventions, storing this information persistently across sessions. The implementation features hierarchical compression for code representation and provides tools for registering entities, querying the knowledge base, and understanding project structure. Built with FastMCP, SourceSage saves code knowledge in platform-specific standard locations and offers project-wide understanding capabilities, making it valuable for AI assistants that need to maintain context about codebases they interact with."
sarimsiddd,xano_mcp,0,,"This Xano MCP implementation provides a streamlined interface for AI assistants to interact with Xano's no-code backend platform. Built with TypeScript and leveraging modern development practices, it offers tools for querying and manipulating data stored in Xano databases. The implementation focuses on type safety, error handling, and efficient API interactions, making it easy for AI models to perform CRUD operations, execute custom endpoints, and manage authentication. It's particularly useful for rapid prototyping, building scalable web and mobile applications, or integrating Xano's backend services into AI-driven systems, allowing assistants to leverage Xano's capabilities without deep knowledge of the underlying API complexities."
sarthakkimtani,mcp-image-gen,11,,"This MCP server, developed by an unknown author, provides image generation capabilities for AI assistants using the Flux.1 Schnell model via Together AI. Built with Python and leveraging the httpx and mcp libraries, it offers a streamlined interface for creating images from text prompts. The server implements standard MCP endpoints for image generation, abstracting the complexities of API communication with Together AI. By providing a simple, standardized way to generate images, it enables AI systems to easily incorporate visual content creation into their workflows. This implementation is particularly useful for creative applications, content generation, and visual design tasks, allowing for rapid prototyping and visualization of ideas through AI-generated imagery."
sarunasdaujotis,vilnius-transport-mcp-server,1,,"This Vilnius Transport MCP server provides real-time public transport data access for Large Language Models (LLMs). Developed to demonstrate MCP's capability to extend LLM functionalities, it offers tools for searching transport stops by name and finding the closest stop to given coordinates. The implementation integrates with Vilnius public transport data sources and is designed to work seamlessly with Claude, enhancing its ability to answer queries about local transportation. It's particularly useful for applications requiring up-to-date transit information, such as city navigation assistants or travel planning services, enabling LLMs to provide accurate and context-aware responses about Vilnius public transport without direct access to the underlying data sources."
saurabhdaware,abell-mcp,1,,"Abell MCP is a server implementation that enables AI assistants to interact with Abell, a JavaScript-based static site generator. Created by Saurabh Daware, it provides two key tools: one for retrieving Abell syntax documentation from the official website, and another for scaffolding complete Abell applications using the create-abell package. The server uses the Model Context Protocol SDK to establish a standardized communication channel through stdin/stdout, making it particularly useful for developers who want to quickly bootstrap Abell projects or learn about Abell's syntax without leaving their AI assistant interface."
sazboxai,mcp_metabase,1,,"Metabase MCP Server provides a bridge between AI assistants and Metabase databases, enabling exploration, metadata retrieval, and action execution across database systems. Built with Python, it offers tools for listing databases, retrieving schema information, visualizing table relationships, and executing Metabase actions through a secure, encrypted configuration interface. The implementation is particularly valuable for data analysts and AI assistants seeking programmatic interaction with Metabase's data and workflow capabilities."
scald,tesla-mcp,2,,"This Tesla MCP server connects to the Tesla Fleet API, allowing AI assistants like Claude to control and monitor Tesla vehicles. Built with TypeScript and the Model Context Protocol SDK, it provides tools for waking vehicles from sleep mode, retrieving vehicle information, and refreshing vehicle data in real-time. The implementation uses OAuth 2.0 authentication with Tesla's API and requires users to register their application through Tesla's Partner Accounts API. While current functionality is limited to REST API endpoints that remain active after Tesla's 2023 API deprecations, the server is designed for Tesla owners who want to integrate their vehicles with AI assistants for convenient voice-controlled monitoring and basic control."
scarletlabs-ai,votars-mcp,28,,"Votars MCP is a Go-based server implementation that connects AI assistants to the Votars platform, a multilingual meeting assistant for voice recording, transcription, and AI processing. The server provides tools for retrieving recent transcripts and fetching specific transcripts by ID from a user's Votars workspace. It supports both SSE and stdio transport modes, with authentication handled via API keys, making it ideal for applications that need to access and analyze meeting transcripts stored in Votars."
scarqin,mcp-apikit,0,,"MCP-APIKit is a server designed for Windsurf IDE integration that connects to Eolink OpenAPI to retrieve API specifications and expose them as MCP resources. It provides tools for API discovery, exploration, and testing within the development environment, allowing developers to search across projects, test endpoints with custom parameters, and access detailed API documentation. The implementation uses TypeScript and Express to create a server that can run with either HTTP/SSE or stdio transport, making it flexible for different integration scenarios while maintaining a standardized interface for API management through the Model Context Protocol."
54yyyu,school-mcp,3,,"School MCP is an academic tools server that integrates with Canvas and Gradescope platforms to help students manage their coursework. It provides tools for fetching upcoming assignment deadlines, adding them to macOS Reminders, downloading course files, and managing course materials. The implementation uses FastMCP to expose these capabilities through a standardized interface, making it particularly valuable for students who want to track deadlines across multiple platforms, organize their assignments, and access course materials without manually navigating through different learning management systems."
priteshshah96,mcp,3,,"Scientific Paper Analyzer integrates with Google's Gemini API to enable AI assistants to search, analyze and explore academic research papers. Built with FastAPI and FastMCP, it provides tools for paper searching, citation graph analysis, and detailed paper information retrieval through a standardized interface. The implementation features robust error handling, API key management, and clean response formatting, making it valuable for researchers and students who want to explore scientific literature through natural language interaction."
scmdr,sourcesyncai-mcp,0,2772,"This MCP server implementation provides a bridge to SourceSync.ai's knowledge management platform, enabling AI models to interact with various data sources and perform operations like semantic search, document management, and content ingestion. Developed by scmdr, it offers tools for managing namespaces, ingesting content from multiple sources (including text, URLs, and external services), and performing hybrid searches. The server is designed for use cases requiring AI-driven knowledge retrieval, document analysis, or integration of diverse information sources into AI-assisted applications."
scopiousdigital,hubspot-mcp,8,,"A HubSpot CRM integration MCP server that enables detailed interactions with sales and customer relationship data. Provides a comprehensive set of tools for searching contacts, managing deals, retrieving sales analytics, and performing pipeline analysis through the HubSpot API. Designed to support advanced sales intelligence and reporting workflows by offering granular access to CRM objects and performance metrics."
scorzeth,anki-mcp-server,80,,"This Anki MCP server, developed as an open-source project, provides AI assistants with a bridge to interact with locally running Anki instances. It leverages the Anki-Connect add-on to offer tools for reviewing and creating flashcards, as well as retrieving cards from various decks. Built with TypeScript and the @modelcontextprotocol/sdk, it implements resource management for card retrieval, tools for card manipulation, and prompts for high-quality card creation based on Andy Matuschak's principles. The server abstracts Anki's complexities, allowing AI systems to seamlessly incorporate spaced repetition and flashcard management into their workflows. It's particularly useful for students, educators, and lifelong learners looking to enhance their study routines with AI-driven flashcard creation and review processes."
scoutos,mcp-linear,1,,"Linear MCP Server provides a standardized interface for AI models to interact with Linear issue tracking functionality through the Model Context Protocol. The implementation follows an Actions and Effects architecture that separates business logic from side effects, making it highly testable and maintainable. It exposes core Linear capabilities including searching issues, reading issue details, editing issues, and adding comments, enabling AI assistants to seamlessly integrate with Linear workflows for project and issue management."
scrapegraphai,scrapegraph-mcp,20,,"This MCP server implementation provides a bridge to the ScapeGraph API, enabling integration of web scraping and graph-based data analysis capabilities. Developed by Marco Perini, it offers a streamlined interface for accessing ScapeGraph's functionalities through a simple configuration process. The server is designed for use cases requiring efficient web data extraction and analysis, such as market research, competitive intelligence, or large-scale data mining operations."
scrapeless-ai,scrapeless-mcp-server,3,1007,"Scrapeless MCP Server provides a bridge to the Scrapeless API, enabling AI assistants like Claude to perform Google searches with advanced query capabilities. Built with TypeScript using the Model Context Protocol SDK, it exposes a 'google-search' tool that supports customizable parameters including query text, country code, and language preferences. The server authenticates with the Scrapeless API using environment variables and formats search results as structured text responses. This implementation is particularly valuable for AI assistants that need to retrieve current web information without requiring users to switch context to a separate search interface."
ai-quill,scraperis-mcp,5,1882,"A Model Context Protocol (MCP) integration for Scraper.is - A powerful web scraping tool for AI assistants.

This package allows AI assistants to scrape web content through the MCP protocol, enabling them to access up-to-date information from the web.

Features
🌐 Web Scraping: Extract content from any website
📸 Screenshots: Capture visual representations of web pages
📄 Multiple Formats: Get content in markdown, HTML, or JSON
🔄 Progress Updates: Real-time progress reporting during scraping operations
🔌 MCP Integration: Seamless integration with MCP-compatible AI assistants"
scrapezy,mcp,1,393,"This MCP server implementation enables AI models to extract structured data from websites using the Scrapezy API. It provides a tool for extracting data based on user-specified prompts, allowing for flexible web scraping tasks. The server is designed for use cases such as data collection, content aggregation, and automated web research, making it valuable for applications that require structured information from diverse web sources."
scrapybara,scrapybara-mcp,10,,"Scrapybara MCP provides a bridge between AI assistants and virtual Ubuntu desktops, enabling browsing the web, running code, and automating tasks through a standardized interface. Built with TypeScript, it integrates with the Scrapybara API to create and manage Ubuntu instances, execute bash commands, and control the desktop environment through an agent system. The server supports tools for starting instances, listing running instances, stopping instances, executing bash commands, and taking high-level actions through natural language prompts. This implementation is particularly valuable for AI assistants that need to interact with real-world systems, test web applications, or perform complex sequences of actions in a sandboxed environment."
m-mcp,screenshot-server,1,,"Screenshot Server enables AI assistants to capture and analyze screenshots from a user's desktop through the MCP protocol. Built with Python using PyAutoGUI, it provides a simple interface for taking screenshots on demand, allowing AI systems to see what's on a user's screen without requiring them to manually upload images. This implementation is particularly useful for troubleshooting technical issues, providing visual context during assistance, or enabling AI to interact with visual content that would otherwise be inaccessible through text-only communication."
screenshotone,mcp,15,,"This MCP server implementation provides a bridge to ScreenshotOne's API, enabling the rendering of website screenshots through the Model Context Protocol. Developed by Dmytro Krasun, it offers a simple tool for capturing visual representations of web pages as images. The server is designed to work with Node.js environments and utilizes the @modelcontextprotocol/sdk for MCP compatibility. It's particularly useful for AI assistants, web developers, and content creators who need to programmatically generate website screenshots for tasks such as visual testing, content monitoring, or creating visual references of web pages without manual intervention."
pratik-kumar-cse,script-generation-mcp,0,,"Script Generator Server is an AI-powered MCP server that generates professional video scripts using a multi-agent workflow. Built by Pratik Kumar, it leverages OpenAI's GPT-4o and Tavily's research capabilities to create engaging scripts across various topics, with specialized agents handling tasks like research, tone, content generation, and formatting. The server is particularly useful for content creators seeking to streamline video script production with AI-driven assistance."
nguyenvanduocit,script-mcp,0,,"Script Tool is a secure, cross-platform command line script execution tool for MCP that enables safe remote script running with built-in protections like timeout handling, output capture, and environment validation. It supports multiple interpreters and provides granular control over script execution context, making it useful for administrators and developers who need controlled remote script capabilities across different operating systems."
sdairs,claudekeep,7,,"This ClaudeKeep MCP implementation, developed by Alasdair Brown, provides a seamless integration between Claude and a personal knowledge management system. Built with TypeScript and Next.js, it offers functions for storing, retrieving, and organizing notes and information shared during conversations with Claude. The implementation stands out by focusing on privacy and local data storage, avoiding reliance on external cloud services. It's particularly useful for individuals and teams who want to maintain a persistent knowledge base from their AI interactions, enabling easy reference and building upon past conversations in future Claude sessions."
sdd330,feishu-mcp-server,20,,"FeiShu MCP Server provides a robust integration with the FeiShu (Lark) API, enabling AI models to interact with document, bot, and chat services through a modular, type-safe architecture. Built with TypeScript, it supports dual-mode operation (stdio and HTTP) and offers tools for reading documents, sending messages, and managing chat sessions, with a focus on clean error handling and extensible design."
sdglbl,mcp-claude-code,109,,"MCP Claude Code enables Claude to directly execute code-related tasks through the Model Context Protocol, providing functionality similar to Claude Code. Developed by SDGLBL, it implements tools for code understanding, modification, command execution, and file operations with proper security controls. The server integrates seamlessly with Claude Desktop, allowing users to analyze codebases, make targeted edits, run commands in various shells, and execute scripts in multiple programming languages. This implementation is particularly valuable for developers seeking AI assistance with code modifications and project management without leaving their conversation interface."
sdilogin,filesystem-android,0,,"Filesystem-Android is an MCP server that enables secure access to Android project files, allowing AI assistants to browse and analyze source code. It validates authentic Android projects by checking for essential gradle configuration files, provides tools for listing Kotlin, KTS, TOML files and AndroidManifest.xml grouped by directory, and offers secure file reading capabilities with appropriate filtering to prevent access to sensitive directories like .gradle, .git and build folders. This implementation is particularly valuable for developers who want to leverage AI assistance to understand, analyze, and work with Android codebases without leaving their assistant interface."
sdimitrov,mcp-memory,6,,"MCP Memory Server provides long-term memory capabilities for AI assistants using PostgreSQL with pgvector for efficient vector similarity search. The implementation uses the Xenova/all-MiniLM-L6-v2 model to automatically generate embeddings for stored memories, enabling semantic search across different memory types. It exposes tools for creating, searching, and listing memories with support for tagging, confidence scoring, and filtering, making it particularly valuable for AI assistants that need to maintain context and recall information across conversations without losing important details."
seanivore,bing-searches-mcp,2,,"This MCP implementation provides a toolkit for analyzing Bing search data, offering automated collection, parsing, and trend analysis capabilities. Developed to extract insights from search queries and results, it features configurable scraping, flexible output formats, and integration with the Bing Search API. The toolkit is designed for use cases such as market research, trend forecasting, and competitive intelligence. It stands out by offering a comprehensive suite of tools specifically tailored for Bing search analysis, including automated data collection, advanced parsing, and customizable analysis features. The implementation is built with Node.js and requires a Bing Search API key for optimal functionality, though it also supports proxy usage for large-scale searches."
seanivore,mcp-code-analyzer,13,,"This MCP code analyzer, developed by seanivore, provides Python code analysis capabilities for structure, complexity, and dependencies. Built with Python and TypeScript, it leverages tools like Babel for parsing and offers a server interface for AI-assisted code review. The implementation supports file-based analysis and provides metadata about its capabilities. It's designed for integration into development workflows, enabling automated code quality checks and offering insights into code structure and complexity. This tool is particularly useful for developers and teams looking to maintain code quality standards, identify potential issues, and understand the architecture of their Python projects through AI-assisted analysis."
seanivore,mcp-file-preview,10,,"This MCP file preview server, developed by Sean Horvath, provides HTML file preview and analysis capabilities for AI assistants. Built with TypeScript and leveraging Puppeteer, it offers tools for capturing full-page screenshots and analyzing HTML structure. The server implements local file handling, screenshot management, and content analysis to enable advanced file previewing. Key features include customizable viewport sizes, headless browser automation, and detailed HTML element counting. By abstracting the complexities of rendering and parsing HTML files, it allows AI systems to easily visualize and understand web content. This implementation is particularly valuable for web testing, content analysis, and documentation tasks, facilitating use cases such as automated UI testing, web scraping, and generating visual aids for AI-assisted web development."
seanivore,convert-markdown-pdf-mcp,6,,"This MCP server converts Markdown to styled PDFs using VS Code's markdown CSS and Python's ReportLab library. Developed to leverage VS Code's clean typography and spacing for PDF generation, it offers a simple interface to transform Markdown content into visually appealing documents. The implementation stands out by combining VS Code's styling with ReportLab's PDF capabilities, providing features like code syntax highlighting and perfect typography. It's particularly useful for developers, technical writers, or anyone needing to generate professional-looking PDFs from Markdown, enabling use cases such as creating documentation, reports, or ebooks with consistent, high-quality formatting."
seanmcloughlin,mcp-vcd,2,4856,"This MCP server for Value Change Dump (VCD) waveforms enables AI assistants to query and analyze digital signal data. Built with Python and leveraging libraries like httpx and ipykernel, it provides tools for extracting specific signal changes from large VCD files. The server implements efficient data parsing and context management to handle waveform data that may exceed model context limits. By abstracting the complexities of VCD file processing, it allows AI systems to easily access and interpret time-based signal information. This implementation is particularly valuable for applications in digital design, hardware verification, and signal analysis, facilitating use cases such as debugging complex digital systems, analyzing timing relationships, and extracting insights from simulation results."
seansoreilly,abs,3,,"This ABS Data API MCP server, developed by an unnamed creator, provides a standardized interface for accessing Australian Bureau of Statistics data. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for querying and retrieving statistical information from ABS datasets. The server implements robust error handling and data formatting, supporting various ABS data endpoints. By abstracting the complexities of ABS API interactions, it enables AI systems to easily analyze and interpret Australian statistical data. This implementation is particularly valuable for applications requiring programmatic access to ABS information, facilitating use cases such as economic analysis, demographic research, and data-driven policy making across various Australian sectors."
fewsats,agora-mcp,0,5837,"Agora MCP server connects AI assistants like Claude or Cursor to SearchAgora, a universal product search engine that helps users discover and purchase products from thousands of online stores. Built by Fewsats, this implementation enables natural language interactions for searching products with customizable parameters (price ranges, sorting options, pagination), viewing detailed product information, and completing purchases directly through the AI assistant. The server uses FastMCP to expose these capabilities as tools that can be called programmatically, making it valuable for shopping workflows where product discovery and purchasing are needed without leaving the conversation interface."
stefanoamorelli,sec-edgar-mcp,6,,"SEC EDGAR MCP provides a bridge to the SEC EDGAR REST API, enabling AI models to access financial data from public companies. Built with Python and the secedgar library, it offers four key tools for retrieving company submissions, financial concepts, standardized facts, and XBRL frames data. This implementation simplifies the process of extracting structured financial information from SEC filings, making it valuable for financial analysis, investment research, and regulatory compliance use cases."
secretiveshell,mcp-llms-txt,13,7135,"This MCP server, developed by TerminalMan, provides integration with the Awesome-llms-txt project for adding documentation directly into conversations. Built with Python and leveraging the MCP framework, it offers a standardized interface for AI models to access and incorporate relevant documentation snippets. The implementation focuses on enhancing AI-assisted conversations with contextual information, enabling use cases such as improved technical support, more accurate code explanations, and enriched educational dialogues. By connecting AI models with curated documentation resources, this server allows for sophisticated information retrieval scenarios, particularly useful for applications and AI assistants that require quick access to specific documentation during interactions."
secretiveshell,mcp-searxng,59,6610,"This MCP server, developed by SecretiveShell, enables AI assistants like Claude to perform web searches using the SearXNG metasearch engine. Built in Python, it provides a simple interface for querying SearXNG and retrieving search results. The implementation stands out by leveraging SearXNG's privacy-focused approach and ability to aggregate results from multiple search engines. By connecting AI capabilities with a customizable search backend, this server allows AI systems to access up-to-date web information while maintaining user privacy. It is particularly useful for enhancing AI assistants with real-time web search capabilities, conducting research tasks, or building applications that require privacy-preserving internet queries."
cheny-alf,filesystem-server,1,,"Filesystem-Server provides secure file system access for AI assistants through a set of tools that enable reading, writing, listing, and manipulating files within specified allowed directories. Built with Go using the mark3labs/mcp-go framework, it implements strict path validation to prevent directory traversal attacks and unauthorized access outside permitted areas. The server can be deployed as a Docker container with configurable allowed directories, making it ideal for workflows requiring controlled file operations like document management, code editing, or data processing while maintaining security boundaries."
securfi,rapidapi_mcp,0,,"A Model Context Protocol (MCP) server implementation for RapidAPI, allowing AI assistants to search and retrieve data from thousands of APIs available on the RapidAPI Hub."
seekrays,mcp-monitor,21,,"MCP System Monitor provides real-time system metrics through a standardized interface, allowing LLMs to access detailed information about CPU, memory, disk, network, host, and process statistics. Built with Go using the gopsutil library, it exposes six specialized tools that retrieve system performance data in structured JSON format. The implementation is designed for cross-platform compatibility (Windows, macOS, Linux) and includes configurable parameters for customizing data retrieval, such as filtering processes by resource usage or viewing per-core CPU statistics. This server enables AI assistants to perform system diagnostics, resource monitoring, and performance analysis without requiring direct system access."
segun,mcp-server-function-hub,0,9,"This MCP server implementation provides a bridge to the Function Hub API, enabling access to a variety of tools and functions. Developed by Segun, it utilizes the Model Context Protocol SDK and integrates with the Function Hub platform. The server offers dynamic tool listing and execution capabilities, making it suitable for AI assistants requiring flexible access to external functions and APIs."
seido,mcp_npm,0,,"This TypeScript-based MCP server, developed for project-npm, enables execution of npm and npx commands from Large Language Models. It integrates with the Model Context Protocol SDK to provide a standardized interface for LLMs to interact with Node.js package management. The implementation stands out by offering direct access to npm functionality, allowing AI models to install dependencies, run scripts, and manage Node.js projects programmatically. It's particularly useful for developers looking to automate Node.js project setup, dependency management, and build processes through natural language interactions, streamlining workflow integration between LLMs and JavaScript/TypeScript development environments."
automateyournetwork,selector-mcp-server,2,,"Selector-MCP-Server provides a bridge between AI assistants and Cisco's Selector AI platform, enabling natural language interaction with Selector's capabilities through a standardized interface. The implementation consists of a server component (mcp_server.py) that handles JSON-RPC style requests and communicates with the Selector API, and a client component (mcp_client.py) that provides an interactive CLI for testing. The server authenticates with Selector using API keys configured through environment variables, processes incoming requests asynchronously, and returns formatted responses. This implementation is particularly valuable for users who want to leverage Selector's AI capabilities directly from their preferred AI assistant without switching contexts."
selenium39,mcp-server-weibo,1,494,"A server that enables scraping Weibo user information, feeds, and search functionality through a standardized interface. Built with TypeScript and the MCP SDK, it exposes tools for searching users by keyword, retrieving detailed user profiles, and fetching user feeds. Particularly valuable for applications that need to programmatically access Weibo social data while maintaining a clean separation between the scraping logic and client implementation."
self-tech-labs,entscheidsuche-mcp-server,0,,"Entscheidsuche MCP Server provides standardized access to Swiss court decisions through integration with entscheidsuche.ch's legal database. Built with TypeScript using the MCP SDK, it offers resources for accessing court decisions, tools for searching legal documents using Elasticsearch queries, retrieving document content, and listing courts by canton, plus prompts for common legal research tasks. The implementation includes thoughtful rate limiting to be considerate of the source API and formats search results with key metadata like court information, dates, and case numbers. It's particularly valuable for legal professionals and researchers who need to search, retrieve, and analyze Swiss legal documents directly within AI assistant conversations."
semgrep,mcp,91,,"Semgrep MCP Server provides a comprehensive interface to Semgrep's static analysis capabilities through the Model Context Protocol, enabling AI assistants to scan code for security vulnerabilities and coding issues. Built by Semgrep, Inc., it offers tools for scanning individual code snippets or entire directories, creating custom rules, analyzing results by severity, and filtering findings. The server is containerized with Docker for easy deployment and can be integrated with Cursor as a plugin, making it valuable for developers who want to leverage Semgrep's security analysis capabilities directly within their AI assistant workflows without leaving their coding environment."
sendaifun,solana-mcp,50,958,"A Solana blockchain MCP server powered by the Solana Agent Kit, enabling programmatic interactions with Solana through a standardized protocol. Supports a wide range of blockchain actions including asset retrieval, token deployment, wallet management, transfers, NFT minting, and domain resolution. Designed to provide a flexible, developer-friendly interface for Solana-based operations."
sendaifun,solana-agent-kit,1213,122033,"Solana Agent Kit MCP server connects AI agents to Solana blockchain protocols, enabling onchain interactions through a comprehensive set of tools. Developed by SendAI, it provides capabilities for token deployment, NFT collection creation, DeFi operations, and cross-chain transfers via Wormhole. The implementation supports both chat and autonomous modes, with a flexible architecture that allows developers to add custom tools. The server can be configured with various API keys and wallet credentials, making it ideal for AI workflows requiring direct blockchain interaction without leaving the conversation interface."
sengokudaikon,aider-mcp-server,20,,"Aider MCP Server bridges Claude and other MCP clients to Aider's powerful file editing capabilities, enabling AI assistants to edit existing files, create new ones, extract code blocks, and interact with git repositories. Built with Python, it provides a standardized interface through tools like edit_files, create_files, git_status, and extract_code, making it ideal for workflows requiring code manipulation, file management, or git operations directly within AI conversations. The server supports Aider's configuration system and can be run locally using stdio or deployed as a Docker container, offering flexibility for different integration needs."
sengokudaikon,mcp-perplexity,0,,"MCP-Perplexity provides a bridge to the Perplexity AI API, enabling AI assistants to leverage Perplexity's language models for programming assistance and conversational interactions. Developed by Daniel Riccio, it features two main tools: ask_perplexity for focused coding solutions and technical explanations, and chat_perplexity for maintaining persistent conversations with full history context. The implementation supports configurable model selection through environment variables, includes streaming responses with progress reporting to prevent timeouts, and stores chat history in a SQLite database for seamless conversation continuity."
getsentry,sentry-mcp-stdio,3,,"Sentry MCP Server provides a bridge to the Sentry error monitoring platform, enabling AI assistants to interact with error data, manage projects, and analyze application performance. The implementation offers eight specialized tools for operations like listing projects, resolving error IDs, retrieving event details, and creating new projects. Built with TypeScript using the Model Context Protocol SDK, it authenticates with the Sentry API using bearer tokens and formats responses in either plain text or markdown. This server is particularly valuable for developers and DevOps teams who want to leverage AI assistants for error investigation, project management, and monitoring application health without switching context to the Sentry web interface."
sentry01,supabase-mcp-for-copilot,0,,"Supabase MCP Server provides a secure bridge between AI assistants like GitHub Copilot and Supabase databases, enabling schema exploration, relationship understanding, and safe query execution. Built with Node.js and the Supabase JavaScript client, it features robust security measures including query validation, rate limiting, and sensitive data masking. The server exposes database metadata through standardized MCP handlers while enforcing row-level security policies, making it ideal for developers seeking AI assistance with database operations without compromising data integrity or exposing sensitive information."
getsentry,sentry-mcp,62,,"A server implementation of the Model Context Protocol (MCP) for Sentry, allowing AI applications to retrieve error and performance data from Sentry to provide context about application issues."
seohyunjun,opensearch-mcp-server,4,1146,"OpenSearch MCP Server provides a bridge between AI assistants and OpenSearch clusters, enabling natural language interaction with search functionality. This server implementation offers tools for index operations (listing indices, retrieving mappings), document operations (searching with custom queries), and cluster management (health status, statistics). Built as a fork of elasticsearch-mcp-server and adapted for OpenSearch compatibility, it runs as a containerized service that connects to OpenSearch instances using configurable authentication. The implementation is particularly valuable for users who need to query and analyze data in OpenSearch clusters without remembering complex query syntax."
mgsrevolver,seo-inspector-mcp,0,,"SEO Inspector MCP provides automated web page analysis for search engine optimization, scanning HTML files and websites to identify critical SEO issues like missing titles, meta descriptions, and heading structures. Built with Node.js and Cheerio, it offers tools to analyze individual HTML strings or entire codebases, generating detailed recommendations for improving search engine visibility and structured data implementation."
seonglae,mcp-notion,6,,"This Notion MCP server, developed by Texonom, provides a markdown-based interface for AI models to interact with Notion pages. Built with TypeScript and leveraging Texonom's Notion client libraries, it offers tools for searching and retrieving Notion content as markdown notes. The implementation stands out by using a single ROOT_PAGE variable instead of an API token, simplifying setup. It includes features like graph-based relevance ranking and prompt templates for summarization and content improvement. This server is particularly useful for AI assistants or applications needing to access and process Notion content, enabling tasks like knowledge base querying, content summarization, or automated note enhancement without deep Notion API knowledge."
sepinetam,stata-mcp,10,,"A Python implementation of the Model Context Protocol (MCP) for Stata, allowing Stata users to integrate with AI models that support MCP."
zalab-inc,mcp-sequentialthinking,0,,"Sequential Thinking MCP Server provides a structured problem-solving tool that helps break down complex problems into manageable steps. Developed by Anthropic, it enables dynamic thought processes where users can revise previous thinking, branch into alternative reasoning paths, and adjust the total number of thoughts as understanding deepens. The server tracks thought history and branches, formatting each step with visual indicators for revisions and alternative paths. It's particularly valuable for planning tasks that require course correction, multi-step solutions, or situations where the full problem scope isn't initially clear."
sergehuber,inoyu-mcp-unomi-server,4,,"This Apache Unomi MCP server, developed by Inoyu, enables AI agents to maintain user context through Apache Unomi's customer data platform. It provides profile management capabilities including lookup, creation, and property updates using email identifiers. The server features automatic session handling with date-based IDs and scope management for context isolation. By leveraging Apache Unomi's robust CDP capabilities, it allows for persistent user data across conversations. This implementation is particularly useful for AI assistants that require consistent user context, personalized interactions, and integration with existing customer data platforms."
sergey-fintech,mcp,0,,"This MCP server implementation provides file finding functionality with HTTP server support. It utilizes TypeScript and Node.js, offering both standard and HTTP-based execution modes. The server integrates with the Model Context Protocol SDK and includes features for building, starting, and developing the application. It's designed for use cases requiring efficient file search and retrieval capabilities within a networked environment."
mcp2everything,mcp2tcp,2,2526,"mcp2tcp bridges AI Large Language Models with physical hardware devices through serial communication, enabling models to interact with the real world. It automatically detects and configures serial ports, supports multiple baud rates, and provides real-time status monitoring with error handling. The implementation includes a flexible command system that allows users to define custom commands in a YAML configuration file, making it ideal for IoT projects, hardware control, and physical computing applications where AI models need to communicate with microcontrollers or other serial devices."
seriawei,mcp-developer-name,0,559,"MCP-Developer-Name is a simple server that returns the current developer's information. Created by Wayne Wei, it uses Node.js with TypeScript and the Model Context Protocol SDK to provide a lightweight service that can be run via npx command or deployed as a Docker container. The implementation allows setting the developer name through an environment variable, making it customizable for different users while maintaining a minimal footprint with just the essential dependencies."
serkanh,cloudwatch-logs-mcp,16,,"CloudWatch Logs MCP Server provides AI assistants with direct access to AWS CloudWatch logs through a Python-based implementation using FastMCP and boto3. The server exposes two main tools: listing available log groups and retrieving log entries with support for filtering by time ranges, patterns, and specific streams. It handles AWS authentication through standard credential chains or explicit parameters, formats responses as structured JSON, and includes comprehensive error handling and logging capabilities. Ideal for remote monitoring and analysis of AWS infrastructure logs without requiring direct console access."
sethbang,mcp-screenshot-server,4,,"This MCP screenshot server, developed using TypeScript and Puppeteer, provides a standardized interface for capturing screenshots of web pages and local HTML files. It offers configurable viewport dimensions, full-page screenshot support, and custom output path options. The server is designed as a command-line tool with automatic screenshot directory management. By abstracting screenshot functionality into an MCP interface, it enables AI systems to easily capture and process visual web content. This implementation is particularly useful for applications requiring automated web content capture, such as web testing tools, content archiving systems, or visual data collection for machine learning models."
setkyar,youtube-subtitles-mcp,0,,"This MCP server implementation provides a bridge to YouTube's subtitle functionality, enabling AI assistants to download and analyze video subtitles. Developed by setkyar, it offers tools for retrieving video information, listing available subtitle languages, and downloading subtitles in specified languages. The server uses yt-dlp for robust YouTube interaction and is containerized with Docker for easy deployment. It's designed for use cases requiring subtitle analysis, such as content summarization, translation, or accessibility enhancement."
HEAD,kyc,1,,"This Setu KYC MCP server, developed by Kaustav Banerjee at Setu, provides verification tools for PAN, GST, and name matching using Setu's Digital Gateway APIs. Built with Python and leveraging the Model Context Protocol, it offers a standardized interface for KYC operations, simplifying integration with AI-assisted applications. The server supports both development and production environments, with configurable credentials and product instance IDs. It's particularly useful for developers needing to incorporate identity verification into their AI workflows, enabling use cases like automated KYC checks, regulatory compliance, and fraud prevention without directly handling API complexities."
HEAD,upi-deeplinks,1,,"This Setu UPI Deeplinks MCP server, developed by Kaustav Banerjee at Setu, enables seamless integration of Setu's UPI payment infrastructure with MCP-compatible applications. Built with Python and leveraging the Model Context Protocol, it provides tools for generating and managing UPI payment links, including creation, expiration, refund initiation, and status checking. The implementation focuses on simplifying access to Setu's payment capabilities through a standardized interface, with support for both sandbox and production environments. It's particularly useful for developers looking to incorporate UPI payment functionality into their AI-assisted applications, enabling use cases like automated payment link generation, transaction monitoring, and refund processing without dealing directly with Setu's API complexities."
severity1,argocd-mcp,5,,"ArgoCD MCP Server provides a bridge between AI assistants and the ArgoCD Kubernetes application management platform, enabling natural language control of application deployments. Built with Python 3.12 and the FastMCP framework, it offers tools for managing applications, retrieving user information, and accessing server settings through a well-typed API client. The implementation includes comprehensive error handling, configurable authentication, and SSL verification options, making it ideal for DevOps teams who want to integrate AI capabilities into their GitOps workflows without leaving their conversation interface."
severity1,terraform-cloud-mcp,6,,"Terraform Cloud MCP Server integrates Claude with the Terraform Cloud API, allowing AI assistants to manage infrastructure through natural conversation. Built with Python 3.12+ and FastMCP, it provides tools for authentication, workspace management (create, read, update, delete, lock/unlock), and run management (plan, apply, discard, cancel). The server supports multiple authentication methods and can be easily connected to Claude through CLI or Desktop configurations, making it ideal for DevOps teams who want to streamline infrastructure management through conversational interfaces."
seyhunak,agentcraft-mcp,1,,"AgentCraft MCP Server provides a flexible AI agent framework with a wide range of pre-configured agents for tasks like marketing, code review, scheduling, and regulatory compliance. Built by Seyhun Akyurek, it uses a data-driven approach with YAML configuration, enabling dynamic agent creation and specialized tools for complex workflows across domains like finance, product development, and customer support."
seym0n,tiktok-mcp,27,,"The TikTok MCP server integrates TikTok content access into Claude AI and other applications through TikNeuron's API. Built with TypeScript and the Model Context Protocol SDK, it provides three key tools: retrieving available subtitles for TikTok videos, fetching specific subtitle content in different languages, and accessing comprehensive post details including engagement metrics and creator information. The implementation requires a TikNeuron MCP API key and is designed to help analyze TikTok video virality factors, extract content, and enable conversational interactions with TikTok videos through AI assistants."
shadi-fsai,fmp_mcp_server,7,,"A Model Context Protocol server that provides AI assistants with programmatic access to financial data from the Financial Modeling Prep API. The server offers a wide range of financial information including company profiles, financial statements, metrics, analyst data, SEC filings, earnings transcripts, and market data. It implements intelligent caching to reduce API calls and improve performance, with different caching strategies for various data types. Developed by Shadi Copty under the MIT license, this implementation enables AI assistants like Claude to analyze stocks, retrieve financial statements, access SEC filings, and perform competitor analysis without direct API access."
bigsy,shadow-cljs-mcp,1,123,"Shadow-cljs-mcp is a Model Context Protocol server that monitors ClojureScript builds in real-time, providing AI assistants with detailed build status information. Developed by Bill Hedworth, this Node.js implementation connects to a running shadow-cljs instance via WebSocket, tracks build progress, and exposes a tool that returns comprehensive build metrics including compilation status, warnings, errors, and file-specific details. It's particularly valuable for AI assistants working with ClojureScript codebases who need to verify build success after making code changes."
shadowk1337,mcp-csv-server,1,,"This MCP server implementation provides a framework for processing CSV and Excel files using Spring Boot. It integrates with Spring AI and includes dependencies for handling both CSV and Excel formats. The server is designed for use cases requiring data extraction and manipulation from spreadsheet files, such as data analysis, reporting, or integration with other systems that consume structured data."
shadovvsinger,ollama_mcp_guidance,0,,"Ollama MCP Guidance provides a standardized server interface for interacting with local language models through the Ollama API, offering intelligent guidance and flexible configuration options. Built by ShadowSinger, the implementation supports advanced features like multimodal inputs, structured outputs, tool integration, and fine-grained model management across generation and chat completion endpoints. It enables developers to easily interact with large language models using a consistent, feature-rich API that supports complex use cases like code generation, conversational AI, and dynamic prompt engineering."
shahanneda,wallpaper-mcp,2,,"This MCP server implementation provides random number generation capabilities. It offers tools for generating random integers and floats within specified ranges. The server is built using the FastMCP framework and is designed for use cases requiring quick access to random values, such as simulations, games, or statistical sampling."
shaike1,mcp-server-ssh,19,,"This SSH server for Model Context Protocol, developed by Shaike Lukov, provides AI assistants with secure remote access capabilities. Built with TypeScript and leveraging libraries like Express and node-ssh, it offers a standardized interface for executing commands, transferring files, and managing connections on remote systems. The server abstracts the complexities of SSH, enabling AI systems to interact seamlessly with remote environments. It includes features like connection pooling, file upload/download, and command execution with customizable parameters. This implementation is particularly valuable for AI-assisted system administration, remote diagnostics, and automated deployment scenarios, facilitating use cases such as server management, log analysis, and distributed task execution across multiple remote machines."
shaileshahuja,github-pr-mcp,3,,"GitHub PR Comments MCP Server provides a bridge to GitHub's Pull Request system, allowing AI assistants to fetch and analyze PR comments with their associated file paths, line ranges, and replies. Built with TypeScript and the Octokit REST API, this server exposes a 'get_pr_comments' tool that accepts repository owner, name, and pull request number parameters to retrieve structured comment data. The implementation is designed for integration with Claude Desktop and Cursor IDE through Smithery, making it ideal for developers who want to review and analyze PR discussions directly within their AI workflows without switching contexts to GitHub's interface."
shak2000,stockmcp,0,,"The Yahoo Finance Model Context Protocol integrates real-time financial data with LLaMA 3.2 3B through Ollama, enabling the model to retrieve stock prices, company information, historical data, and market news while preserving all regular LLaMA capabilities. It analyzes user queries to determine if they're finance-related, calls the appropriate Yahoo Finance API functions through the MCP when needed, and formats the data as context for the model to incorporate into natural responses. This implementation seamlessly enhances LLaMA with financial data capabilities without interfering with non-financial queries, making it valuable for users seeking real-time market information within their conversational AI interactions."
shaneholloman,mcp-knowledge-graph,136,,"This knowledge graph MCP server, developed by Anthropic, enables persistent memory for AI assistants through a local graph database. It provides tools for creating, querying, and manipulating entities and relationships, allowing assistants to build and maintain structured knowledge about users and contexts across conversations. The implementation uses TypeScript and file-based storage, with a customizable memory path for flexibility. It's designed for enhancing AI personalization and context retention in applications like chatbots, virtual assistants, or any scenario requiring long-term information persistence and retrieval in natural language interactions."
shanejonas,openrpc-mpc-server,33,,"This OpenRPC MCP server, developed by Shane Jonas, provides a standardized JSON-RPC interface for AI assistants using the OpenRPC specification. It offers tools for making arbitrary JSON-RPC calls and discovering available methods. The server leverages OpenRPC's metadata-rich approach to enable dynamic API exploration and interaction. By bridging AI capabilities with OpenRPC's structured method descriptions, this implementation enhances interoperability and discoverability for JSON-RPC services. It is particularly useful for scenarios requiring flexible integration with diverse APIs, automated API documentation, and standardized RPC interactions in AI-powered applications."
shanggqm,hefeng-mcp-weather,3,929,"This MCP server provides weather forecast data for locations in China through the HeFeng Weather API. Developed by shanggqm, it offers real-time weather information, hourly and daily forecasts, and supports location queries by coordinates. The server is designed for integration with MCP hosts like Claude Desktop, enabling AI-assisted access to detailed Chinese weather data for various applications."
shanksxz,gh-mcp-server,2,,"GitHub Repository MCP Server provides a tool for AI models to access GitHub repository contents as context, enabling retrieval of repository structures, file contents, and filtered file lists. It supports authentication via GitHub token, allows filtering by file extensions and paths, and is designed to help AI assistants understand code repositories by providing structured access to repository metadata and source files."
shannonlal,mcp-linear,3,1150,"This MCP implementation, developed for Linear project management integration, provides a bridge between the Model Context Protocol and Linear's task tracking capabilities. Built with TypeScript and leveraging the Linear SDK, it enables AI systems to interact with Linear projects, issues, and workflows through a standardized MCP interface. The implementation includes robust error handling, environment variable management, and comprehensive Linear API coverage. By abstracting Linear's project management features into MCP-compatible endpoints, it allows AI assistants to create, update, and query tasks programmatically. This tool is particularly valuable for automating project workflows, generating task summaries, and enabling AI-assisted project management within Linear-based development environments."
shannonlal,mcp-postman,43,1178,"This MCP Postman server, developed using TypeScript and leveraging the Newman library, provides a standardized interface for running Postman collections via the Model Context Protocol. It offers tools for executing API tests, validating responses, and generating reports based on Postman collection runs. The server integrates seamlessly with existing Postman workflows, abstracting the complexities of collection execution into a consistent MCP interface. By enabling AI systems to interact with and analyze API test results, this implementation facilitates use cases such as automated API testing, continuous integration pipelines, and API documentation generation. The server is designed for easy deployment and configuration, making it valuable for developers and QA teams building AI-powered tools that interact with API test data."
shaojiejiang,feedly-mcp,0,,"Feedly MCP server enables AI assistants to interact with Feedly RSS feeds, providing tools to fetch the latest entries from categories and mark items as read. Built with FastMCP, it integrates with the Feedly API to help users efficiently triage and manage their RSS feeds through natural language interaction."
sharplygroup,xtb-mcp-server,1,,"This MCP server implementation provides integration with the XTB trading platform, allowing AI assistants to interact with XTB trading accounts. Developed by Sharply Group, it offers tools for account operations, market data retrieval, trade execution, and financial calculations. Built with TypeScript and leveraging the @sharplygroup/xtb-api-js library, the server focuses on exposing XTB API functionality through the Model Context Protocol. It is particularly useful for AI applications that need to automate trading strategies, analyze market data, or manage investment portfolios."
shashwat001,mcptools-langchain-integration,0,,"This TypeScript project integrates Langchain with Model Context Protocol (MCP) tools, enabling interaction with Language Models and execution of various tools through a chat interface. Developed by Shashwat, it utilizes Ollama for LLM integration and connects to a local MCP server. The implementation supports Server-Sent Events (SSE) for real-time communication and includes features like interactive chat, tool execution, and configurable system prompts. It's designed for developers working on AI applications that require seamless integration of language models and external tools, with a focus on local development and customization."
codeyogi911,shopify-mcp,0,,"Shopify MCP Server provides a flexible bridge to Shopify store data, enabling AI assistants to interact with product, order, and inventory information through GraphQL queries. Built with TypeScript and the Model Context Protocol SDK, it offers tools for browsing products, retrieving order details, and exploring the Shopify GraphQL schema with features like dynamic type introspection and intelligent field validation. Particularly useful for e-commerce managers and developers seeking programmatic access to their Shopify store's data through natural language interactions."
narphorium,mcp-memex,7,,"This Memex tool for Model Context Protocol, developed by Shawn Simister, enables AI-assisted web content analysis and knowledge base creation. Inspired by Vannevar Bush's Memex concept, it integrates with Claude Desktop to analyze web pages, extract key information, and store it in a structured Markdown-based knowledge base. The implementation leverages APIs from Anthropic, FireCrawl, and Voyage AI for content processing and embedding generation. It stands out by focusing on personal knowledge management and information retrieval, storing data locally rather than in cloud services. This tool is particularly useful for researchers, students, and knowledge workers who want to build a personalized, AI-augmented system for capturing and organizing web-based information."
shawyeok,mcp-dingding-bot,4,240,"MCP DingDing Bot enables sending text and markdown messages to DingDing (Dingtalk) group chats through custom robot webhooks. Created by Yike Xiao, this Node.js implementation provides a simple interface for notification workflows, supporting both plain text and formatted markdown content with options to mention all group members. The server can be deployed via Docker or NPX, requiring only the DingDing bot access token and optional signature secret for authentication, making it ideal for teams using DingDing for communication who want to integrate automated notifications into their AI workflows."
hdcola,mcp-server-cli,1,,"MCP Server CLI enables AI assistants to execute shell commands and scripts securely through a standardized interface. Built by hdcola, it leverages the Model Context Protocol SDK to create a simple server that runs on stdio, allowing commands to be executed with proper output handling for both standard output and error streams. The implementation is written in TypeScript and packaged as an npm module that can be installed globally, making it particularly valuable for workflows requiring system automation, file manipulation, or integration with command-line tools without leaving the conversation interface."
shenghaiwang,xcodebuild,44,6159,"This MCP server implementation provides tools for building and testing iOS Xcode projects. Developed by Tim Wang, it offers capabilities to build iOS Xcode workspaces/projects and run tests, sending errors back to the LLM. The server is designed for seamless integration with Visual Studio Code extensions like Cline or Roo Code, enabling efficient iOS development workflows and automated error handling in AI-assisted coding environments."
sheshiyer,deepseek-mcp-with-moe,3,,"This DeepSeek MCP server, developed using TypeScript, provides code generation and completion capabilities through the DeepSeek API. It offers tools for generating, completing, and optimizing code across multiple languages, with support for tool chaining to combine operations. The server implements caching strategies and metadata tracking for cost optimization. Built on the MCP SDK and Axios for API interactions, it enables AI systems to perform complex coding tasks efficiently. This implementation is particularly useful for applications requiring automated code generation, intelligent code completion, and performance optimization across various programming languages."
sheshiyer,framer-plugin-mcp,10,,"This Framer Plugin MCP server, developed by Sheshiyer, enables the creation and management of Framer plugins with integrated web3 capabilities. Built using TypeScript and leveraging the Model Context Protocol SDK, it provides tools for generating plugin templates, building production-ready plugins, and incorporating web3 features like wallet connections, smart contract interactions, and NFT displays. The server abstracts the complexities of web3 integration, allowing designers and developers to easily add blockchain functionality to their Framer projects. It's particularly valuable for creating interactive prototypes and UI components that interface with blockchain networks, facilitating use cases such as crypto wallet interfaces, NFT galleries, and decentralized application (dApp) prototypes within the Framer ecosystem."
sheshiyer,git-mcp-v2,4,,"This Git MCP server, developed by Sheshiyer, provides a standardized interface for AI models to interact with Git repositories. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a wide range of Git operations including core functions, branch management, tagging, remote handling, and stashing. The implementation focuses on providing a consistent MCP interface for Git functionality, enabling AI assistants to perform complex version control tasks. By integrating with GitHub and offering features like bulk actions and smart path handling, this server facilitates sophisticated development workflows such as automated code management, repository analysis, and collaborative coding assistance. It's particularly valuable for AI-powered development tools and systems aimed at enhancing software development processes through intelligent version control interactions."
shibdad,github-mcp-server,0,,"GitHub-MCP-Server provides a bridge between Claude Desktop and GitHub repositories through the Model Context Protocol. It enables users to perform common Git operations like cloning repositories, checking status, committing changes, and pushing updates directly from their AI assistant interface. The server also includes GitHub API integration for creating repositories, listing user repositories, and retrieving repository details when a GitHub token is configured. Built with Node.js, it uses a simple stdio transport for communication and handles authentication through environment variables or token files, making it particularly valuable for developers who want to manage their code repositories without leaving their AI assistant conversation."
shibuiwilliam,mcp-server-data-wrangler,2,,"MCP Server Data Wrangler provides a standardized interface for data preprocessing, transformation, and analysis tasks through the Model Context Protocol. Developed by shibuiwilliam, this server implementation leverages Polars dataframes to offer a suite of statistical analysis tools including descriptive statistics, data shape analysis, quantile calculations, and variance measurements. The server supports multiple file formats (CSV, TSV, Parquet) and exposes its functionality through well-defined tools that return structured JSON responses, making it ideal for AI assistants that need to perform data analysis operations without direct access to data processing libraries."
shibuiwilliam,mcp-server-zenn,0,,"MCP Server for Zenn provides access to Zenn.dev's developer API, allowing AI assistants to fetch articles and books from the popular Japanese technical publication platform. Built by shibuiwilliam, this server exposes tools for retrieving content with filtering options by username, topic, ordering, and pagination. The implementation uses Python's asyncio for handling requests and includes comprehensive error handling. It's particularly valuable for users who want to search and analyze technical content from Zenn without leaving their conversation interface."
shinkeonkim,e-gonghun-mcp,0,,"Provides a bridge to the e-gonghun.mpva.go.kr API, enabling access to Korean military service records and related data. Built with Python and the MCP protocol, it handles authentication and caching while exposing tools for retrieving and processing military service information through a standardized interface. Useful for applications that need to verify or analyze Korean military service history."
shinzo-labs,coinmarketcap-mcp,2,,"CoinMarketCap MCP provides a standardized interface to the CoinMarketCap API, enabling access to cryptocurrency market data, exchange information, and blockchain metrics. Developed by Shinzo Labs, it implements tiered access based on CoinMarketCap subscription levels (Basic through Enterprise), with comprehensive parameter validation using Zod. The server exposes over 30 tools organized by subscription tier, handling everything from cryptocurrency listings and quotes to exchange data, global metrics, and specialized endpoints like the Fear & Greed Index. Particularly valuable for financial analysis, market research, and building crypto-related applications without leaving the conversation interface."
shinzo-labs,gmail-mcp,2,940,A Message Context Protocol (MCP) server implementation for Gmail that allows AI assistants to access and interact with Gmail emails.
shinzo-labs,heimdall,3,,"Heimdall is a lightweight service to manage local MCP Servers and can be installed with a single `npx` command. Specific MCP server tools can be authorized for your MCP clients, and the same config is accessible to all MCP clients on your device."
shinzo-labs,hubspot-mcp,5,1086,"HubSpot-MCP provides a standardized interface to the HubSpot CRM API, enabling AI assistants to manage customer relationship data through natural language. Developed by Austin Born at Shinzo Labs, this server implementation offers complete coverage of HubSpot's CRM functionality including companies, contacts, deals, and other standard objects, with specialized endpoints for common operations. It features type-safe parameter validation with Zod, advanced association management through CRM Associations v4, and batch operations for efficient data handling. The implementation is particularly valuable for sales teams and marketers who need to query, create, or update CRM records without leaving their AI assistant interface."
shirhatti,mcp-server-imessage,2,,"This iMessage MCP server, developed by Sourabh Shirhatti, enables AI assistants to interact with Apple's iMessage platform. Built using Python and leveraging the mcp library, it provides a bridge between AI models and iMessage conversations. The implementation focuses on simplifying iMessage integration, allowing AI to send and receive messages without needing to handle the complexities of Apple's messaging protocols directly. It's particularly useful for creating AI-powered chatbots, automated response systems, or personal assistants that can communicate via iMessage, enabling seamless integration of AI capabilities into users' existing messaging workflows on Apple devices."
shivay-couchbase,couchbase-mcp,2,,"This MCP server, developed by Shivay at Couchbase, demonstrates semantic search capabilities for Star Wars planets using Couchbase's vector search functionality. Built with TypeScript, it implements two main tools: fetching planet details and finding similar planets based on vector embeddings. The server leverages Couchbase's efficient vector search index for fast similarity lookups and includes features like timeout protection and comprehensive error handling. By integrating the Model Context Protocol with Couchbase's vector search, this implementation enables AI models to access and analyze Star Wars planet data seamlessly. It is particularly useful for applications requiring semantic search in specialized domains, showcasing how vector databases can enhance AI-powered information retrieval and similarity analysis."
shivaylamba,mcp-nebius,0,,"This MCP server provides access to Star Wars planet data stored in a Couchbase database, offering tools to fetch planet details and find similar planets using vector search. It integrates with the Nebius AI API for generating planet images based on their characteristics. The implementation includes error handling, connection management, and optimized data retrieval, making it suitable for applications requiring fast, scalable access to Star Wars planetary information with visual representations."
shlomico-tr,etoroportfoliomcp,0,,"The eToro MCP Server provides tools for interacting with eToro's public API endpoints, allowing Claude to access financial portfolio data without CORS restrictions. Built with TypeScript and Express, it offers three key capabilities: fetching user portfolios by username, retrieving detailed instrument information, and searching for financial instruments by name. The server handles authentication and data transformation behind the scenes, making it particularly valuable for financial analysis, portfolio tracking, and investment research use cases where direct access to eToro's data is needed."
shogo-ma,docbase-mcp-server,5,,"DocBase MCP Server provides a bridge between AI assistants and DocBase document management platform, enabling search, retrieval, creation, and updating of posts through a clean API. Built with Go using the mark3labs/mcp-go framework, it exposes five core tools for interacting with DocBase content: searching posts by query, retrieving specific posts by ID, creating new posts, updating existing content, and adding comments. The implementation requires minimal configuration with just a DocBase domain and API token, making it ideal for teams who need AI assistants to access or manage their DocBase knowledge repositories."
shoofio,brave-search-mcp-sse,7,,"Integrates the Brave Search API to provide both web and local search capabilities through a standardized interface. Built with TypeScript and Express, it features automatic fallback from local to web search when needed, detailed metrics collection via Prometheus, and Helm charts for Kubernetes deployment. The implementation includes rate limiting, connection keep-alive for SSE transport, and comprehensive error handling, making it particularly valuable for applications that need privacy-respecting search capabilities without relying on Google."
therealhexi,shopify-mcp-server-main,6,,"Shopify MCP Server enables AI assistants to interact with Shopify store data through GraphQL API integration. Built by Amir Bengherbi, it provides 16 specialized tools for managing products, customers, orders, collections, and webhooks. The implementation supports operations like product searching, customer tagging, order querying, discount creation, and draft order management. Configuration requires a Shopify access token and domain, making it ideal for e-commerce workflows that need to retrieve or modify store data directly within AI assistant conversations."
shopify,dev-mcp,160,9446,"A Shopify MCP server implementation that provides access to Shopify's developer resources, including API documentation, tutorials, and guides."
z9905080,mcp-langfuse,0,97,"MCP Server for Langfuse provides a bridge between AI assistants and Langfuse analytics workspaces, enabling access to LLM performance metrics through a simple interface. Developed by Shouting Hsiao, this implementation allows AI models to query metrics by time range, making it valuable for monitoring and analyzing AI system performance. The server requires minimal configuration with Langfuse API credentials and can be used either as a standalone CLI tool or integrated directly into existing Node.js applications."
z9905080,mcp-slack,0,3756,"The Slack MCP Server enables AI assistants to interact with Slack workspaces through a standardized interface. Built with TypeScript using the Model Context Protocol SDK, it provides tools for channel management, messaging, thread interactions, reaction handling, and user information retrieval. The implementation requires a Slack Bot Token with appropriate permissions and team ID for authentication. It supports both standalone CLI usage and integration into custom applications, making it valuable for AI assistants that need to participate in team communications, monitor conversations, or provide automated responses within Slack environments."
showfive,playwright-mcp-server,6,,"This MCP server, developed for Playwright automation, provides a bridge between AI models and web browser automation. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI-driven web interactions and testing scenarios. The implementation focuses on integrating Playwright's powerful browser automation capabilities with standardized MCP interfaces, allowing for sophisticated web scraping, UI testing, and automated web workflows. By connecting AI models with browser automation, this server enables use cases such as intelligent web data extraction, automated UI testing with natural language instructions, and AI-assisted web application interactions."
shreyansh-ghl,mysql-mcp-server,1,,"MySQL MCP Server provides a lightweight bridge to MySQL databases, enabling AI assistants to list database resources, retrieve table schemas, and execute read-only SQL queries through a standardized interface. Built using the Model Context Protocol SDK, it allows dynamic introspection of database structures and supports safe, controlled database interactions without exposing write capabilities."
shreyaskarnik,huggingface-mcp-server,37,,"Huggingface MCP Server provides direct access to Hugging Face models and resources through a simple interface. Built by Shreyas Karnik, it leverages the huggingface-hub library to connect with the Hugging Face ecosystem, allowing AI assistants to interact with thousands of machine learning models without complex setup. The server supports optional authentication via Hugging Face API tokens, enabling access to both public and private resources. Packaged as a Docker container with Smithery.ai configuration, it's designed for easy deployment in various environments. This implementation is particularly valuable for workflows requiring natural language processing, image generation, or other machine learning capabilities directly within conversation interfaces."
shreyaskarnik,mcpet,6,,"MCPet is a nostalgic virtual pet simulator that brings the classic Tamagotchi experience to the AI age. Built with TypeScript using the Model Context Protocol SDK, it allows users to adopt, nurture, and play with digital pets that evolve through life stages from baby to adult. The implementation features four pet types (cat, dog, dragon, and alien), comprehensive stat management (hunger, happiness, health, energy, cleanliness), and interactive tools for feeding, playing, cleaning, and putting pets to bed. Pet data persists between sessions, with stats changing over time even when users are away, creating a continuous care experience within AI assistant conversations."
HEAD,wikisearch,0,,"WikiSearch MCP server provides a bridge to Wikipedia's REST API, enabling AI assistants to retrieve article summaries through a simple interface. The implementation processes search queries to fetch concise extracts from Wikipedia pages, handling URL encoding and error cases appropriately. Built with TypeScript and running over stdio transport, it's particularly useful for AI assistants that need quick access to factual information and encyclopedic knowledge without parsing full Wikipedia articles."
sylphlab,filesystem-mcp,4,4197,"Filesystem MCP Server provides secure, controlled filesystem operations for AI agents like Cline, operating strictly within a project's root directory. Developed by shtse8, this TypeScript implementation uses Node.js's native filesystem modules to offer tools for listing, reading, writing, copying, moving, and searching files with robust path validation to prevent traversal outside the project boundary. The server determines the project root from its current working directory, enabling context-specific operations when launched correctly by the host environment. With features like batch processing, indentation preservation during edits, and detailed error reporting, it's particularly valuable for AI coding assistants that need to safely manipulate project files without unrestricted filesystem access."
sylphlab,pdf-reader-mcp,4,1504,"A PDF Reader MCP server that enables AI agents to securely extract text, metadata, and page information from PDF files within a project directory. Built by shtse8, it uses pdfjs-dist to process both local files and remote URLs, supporting multi-source requests with per-source page selection. The server enforces strict path resolution to prevent access outside the project root, making it ideal for scenarios where agents need to analyze PDF documents without requiring full file content to be sent to the model."
shuakami,mcp-mail,6,,"MCP-Mail provides a bridge between email services and the Model Context Protocol, allowing AI assistants to send and receive emails directly. Built with TypeScript and Node.js, it integrates with IMAP for email retrieval and SMTP for sending messages, with a Python wrapper script that enables seamless integration with Claude Desktop. The implementation handles email parsing, authentication via environment variables, and supports both plain text and HTML message formats. This tool is particularly valuable for workflows requiring email communication without switching contexts, such as managing correspondence, processing notifications, or automating responses within conversation interfaces."
shubham-s-pandey,wiresharkmcp,14,,"Wireshark-MCP Integration Toolkit enables natural language interaction with network analysis by creating a bridge between Wireshark and Claude Desktop. The implementation consists of a Python MCP server that manages communication between Wireshark and Claude, and a Lua extension for Wireshark that handles real-time packet dissection and analysis. The toolkit features smart buffering for packet data, automated network interface discovery, and a CLI interface for packet analysis, making it valuable for network administrators and security professionals who want to leverage AI capabilities for interpreting network traffic patterns and troubleshooting connectivity issues."
shubhanshusondhiya,mcp-tmdb,0,,"Provides a bridge to The Movie Database (TMDB) API, enabling AI assistants to retrieve movie information through resources, prompts, and tools. Supports operations like searching movies, fetching trending films, retrieving movie details, and generating movie reviews. Built with TypeScript and the MCP SDK, it offers a clean, type-safe implementation for movie-related data interactions."
shuntaka9576,cal2prompt,11,,"This MCP server, developed by an unspecified author, enables AI agents to interact with calendar data and generate prompts. Built with Rust and leveraging various crates including tokio for asynchronous runtime, it provides tools for OAuth2 authentication, HTTP requests, and calendar data retrieval. The implementation focuses on fetching calendar events and generating prompts based on that data. It's particularly useful for applications requiring AI-driven scheduling assistance or context-aware task management, enabling use cases such as automated meeting preparation, time management optimization, and personalized daily briefings without directly exposing calendar API complexities."
sichang824,mcp-figma,2,,"Figma MCP Server provides a bridge between AI assistants and the Figma design platform, enabling programmatic access to Figma files, nodes, components, and widgets. Developed by sichang824, this TypeScript implementation exposes Figma's API capabilities through MCP tools for file operations, node manipulation, comment management, image export, and widget interactions. The server includes a WebSocket component for real-time communication with Figma plugins, allowing direct canvas manipulation beyond what the REST API offers. It's particularly valuable for AI assistants that need to analyze design files, extract widget data, or automate Figma workflows without requiring users to manually navigate the Figma interface."
sichang824,mcp-terminal,2,,"MCP Terminal provides a server for controlling terminal operations across different platforms, with specialized support for macOS environments. It implements multiple terminal controllers including a cross-platform subprocess controller, macOS-specific AppleScript controller, and an iTerm2 controller that leverages the official API. The server exposes terminal functionality through a standardized interface that allows executing commands and retrieving terminal information, making it particularly useful for AI assistants that need to run shell commands, automate terminal workflows, or interact with command-line tools without direct access to the system shell."
siddhantbajaj,shopify-mcp-server,2,,"This Shopify MCP server, developed by Siddhant Bajaj, enables AI agents to interact with Shopify store data through a standardized interface. Built with Python and leveraging the Model Context Protocol, it provides tools for retrieving product and customer information from Shopify stores. The implementation focuses on simplifying access to e-commerce data, offering functionality to list products and customers with optional pagination. It's particularly useful for businesses looking to integrate AI-powered analytics or automation with their Shopify stores, enabling use cases such as inventory analysis, customer segmentation, and sales trend identification without directly dealing with Shopify's API complexities."
siddhant-k-code,mcp-apple-notes,4,,"MCP Apple Notes provides a bridge between AI assistants and the macOS Notes application through AppleScript automation. This implementation enables creating new notes, searching existing notes by title, and retrieving note content directly from conversations. The server uses Node.js with TypeScript and executes AppleScript commands to interact with the Notes app, handling content formatting and error management. Particularly useful for workflows that require note-taking or information retrieval from Apple Notes without switching context."
siddhant-k-code,mcp-devto-server,2,,"This Dev.to MCP server, developed as part of the Model Context Protocol ecosystem, enables AI assistants to interact with the Dev.to platform API. Built with TypeScript and Node.js, it provides a bridge between MCP clients and Dev.to's services, allowing operations like article publishing, content retrieval, and user interactions. The implementation leverages Axios for HTTP requests and supports environment-based configuration. By abstracting Dev.to API operations into MCP-compatible endpoints, it allows AI systems to easily integrate with the Dev.to community without directly handling API complexities. This server is particularly useful for scenarios requiring automated content publishing, community engagement analysis, or AI-assisted blog post creation on the Dev.to platform."
siddhant-k-code,memory-journal-mcp-server,16,1803,"This MCP server, developed by Siddhant Khare, enables AI agents to interact with local iCloud Photos libraries on macOS. Built with Python and leveraging the osxphotos library, it provides functionality for searching and retrieving photo metadata based on criteria like dates, locations, people, and labels. The implementation focuses on efficient local photo analysis without cloud dependencies, offering features like fuzzy matching for more flexible searches. It's particularly useful for AI assistants and applications needing to work with personal photo collections, enabling use cases such as creating memory journals, organizing photo albums, or generating photo-based narratives without dealing directly with the complexities of the Photos app or iCloud APIs."
siddontang,tidb-ai-mcp,3,,"TiDB AI MCP Server provides a lightweight bridge between Cursor and TiDB AI, enabling users to ask questions directly to TiDB AI without leaving their editor. Built with Go, it implements the Model Control Protocol with Server-Sent Events (SSE) transport and exposes a single 'ask' tool that forwards questions to the TiDB AI API and streams back responses. The server is configurable via command-line arguments for port selection and requires minimal setup, making it ideal for developers working with TiDB who want AI assistance integrated into their workflow."
sidharthrajaram,time-mcp,0,,"It seems helpful and kind of important for agents to know what time (and date) it is. Enables agents to fulfill time-dependent tasks such as ""what time is it in Pacifica?"" or ""what will the weather be 3 hours from now?""

Time-MCP provides two tools, get_datetime and get_current_unix_timestamp which return a formatted datetime in the specified timezone (UTC if none specified) and the current UNIX timestamp, respectively."
signal-slot,mcp-gdb,8,453,"MCP GDB Server provides debugging functionality for C/C++ programs through GDB integration, enabling AI assistants to analyze and debug code without leaving the conversation interface. Built by Tasuku Suzuki, it supports a comprehensive set of debugging operations including starting GDB sessions, loading programs, setting breakpoints, stepping through code, examining memory, and viewing call stacks. The TypeScript implementation uses the Model Context Protocol SDK to expose GDB's capabilities through a clean interface, making it particularly valuable for developers who need AI assistance with debugging crashes, understanding program flow, or analyzing core dumps."
silenceper,mcp-k8s,38,,"mcp-k8s is a Kubernetes MCP server that enables AI assistants to interact with Kubernetes clusters through natural language. Built in Go using the mcp-go SDK and Kubernetes client-go library, it provides tools for querying resource types and performing CRUD operations on Kubernetes resources with configurable write permissions. The server connects to clusters using kubeconfig and supports both read-only and write operations (create/update/delete) that can be independently enabled or disabled for security. Particularly valuable for interactive resource management, automated operations, development support, and educational scenarios where users benefit from natural language interaction with Kubernetes environments."
silver0510,mermail-mcp,1,,"Mermaid Diagram Generator for MCP enables AI assistants to create visual diagrams from Mermaid syntax through the Model Control Protocol framework. The implementation provides a server (mcp_server.py) that exposes a diagram generation tool and example resources, along with a client (mcp_client.py) that demonstrates how to interact with the server. Built on FastMCP, it supports multiple themes and background options, handles image data natively, and automatically cleans up temporary files. The server requires Node.js with mermaid-cli installed globally, making it ideal for workflows requiring visualization of relationships, processes, or structures directly within AI conversations."
simonb97,win-cli-mcp-server,132,9891,"This Windows CLI MCP server, developed by SimonB97, enables secure command-line interactions on Windows systems for AI assistants like Claude Desktop. Built with TypeScript, it provides controlled access to PowerShell, CMD, and Git Bash shells, as well as remote systems via SSH. The server implements robust security controls including command blocking, working directory validation, and injection protection. Its configuration system allows fine-tuning of allowed operations, paths, and SSH connections. By extending AI capabilities to local and remote command-line environments, this implementation is particularly useful for tasks involving system administration, development workflows, and secure remote management while maintaining strict control over permitted actions."
simonwfarrow,worldpay-mcp,0,,"This MCP server implementation provides a bridge to Worldpay's payment processing APIs. It enables AI assistants to make and query payments through a standardized interface. The server supports both stdio and SSE transports, making it compatible with Claude Desktop and Cursor. It's designed for use cases requiring integration of payment functionality, such as e-commerce applications or financial management tools."
galvingao,mcp-simplelocalize,2,,"A bridge to the SimpleLocalize translation management platform that enables AI assistants to create and update translation keys and content across multiple languages. Built with FastMCP and async HTTP handling, it exposes tools for bulk creation of translation keys with optional namespacing and descriptions, as well as updating translations with language-specific text. Particularly valuable for developers managing localization through SimpleLocalize who want to streamline the translation workflow through natural language interaction."
gmacev,simple-memory-extension-mcp-server,5,,"A persistent key-value memory store with semantic search capabilities, built to extend context windows for AI agents. Uses SQLite for storage, supports namespaces and chunking, and leverages the E5 multilingual embedding model to enable retrieval of contextual information by meaning rather than just exact key matches. Particularly useful for maintaining long-term memory and context across conversations or complex multi-step tasks."
sinco-lab,mcp-youtube-transcript,10,736,"MCP-YouTube-Transcript enables direct downloading of YouTube video transcripts for AI and video analysis workflows. Built with TypeScript and the Model Context Protocol SDK, it extracts captions from videos using a robust URL parsing system that handles various YouTube link formats. The server offers features like language selection, automatic paragraph formatting, and metadata enrichment, making it particularly useful for content analysis, research, and AI training on video content. Licensed under MIT and packaged as both an npm module and Docker container, it provides a standardized way for AI assistants to access and process YouTube video text content."
sionic-ai,serverless-rag-mcp-server,35,,"A serverless RAG (Retrieval-Augmented Generation) MCP server implementation focused on file management and tool handling. Built with FastAPI and leveraging the MCP framework, this server provides flexible file upload and processing capabilities with a modular architecture for tool integration and internal API management."
sirmews,apple-notes-mcp,80,15388,"This Apple Notes MCP server, developed by sirmews, enables access and and search of local Apple Notes databases. It provides tools for retrieving all notes, reading specific notes, and performing searches across note content. Built in Python, the implementation exposes Apple Notes data via a standardized MCP interface, allowing Claude to analyze and interact with personal note collections. By bridging AI models with Apple's native note-taking app, this server enhances Claude's ability to process personal information, assist with note organization, and augment information retrieval from Apple Notes. It is particularly useful for users seeking AI-powered knowledge management and research assistance within their existing Apple Notes ecosystem."
sirmews,mcp-pinecone,109,17384,"This MCP server, developed by sirmews, enables AI assistants like Claude to interact with Pinecone vector databases for retrieval-augmented generation (RAG) applications. Built with Python, it provides tools for semantic search, document retrieval, and document upsert operations on Pinecone indexes. The implementation stands out by leveraging Pinecone's inference API for embedding generation, simplifying the architecture. By connecting AI capabilities with Pinecone's efficient vector search, this server allows AI systems to augment their knowledge with relevant information from large document collections. It is particularly useful for building AI applications that require real-time access to up-to-date information, such as question-answering systems, chatbots with domain-specific knowledge, or AI-powered research assistants."
sirtenzin,autumn-mcp-server,5,,"The Autumn MCP Server provides an interface to access Autumn's pricing API for managing customers through Claude and other AI assistants. Built with TypeScript using the Model Context Protocol SDK, it enables creating customers, retrieving customer information and entitlements, managing invoices, and generating billing portal links. This implementation by SirTenzin runs on Bun and requires an Autumn API key, making it valuable for businesses that use Autumn for subscription management and want to integrate these capabilities into their AI assistant workflows."
sirusb,samtools_mcp,0,,"A Python implementation of the Model Context Protocol (MCP) for Samtools, allowing AI assistants to interact with genomic data through SAM/BAM file operations."
sivakumarl,my-mcp-worker,0,,"My MCP Worker provides a simple, Cloudflare Workers-based implementation that enables AI assistants to interact with custom APIs through the Model Context Protocol. Built using the workers-mcp package, it demonstrates a basic greeting functionality that can be extended to integrate with external services. The worker leverages Cloudflare's global network for low-latency responses and includes testing capabilities for both unit and integration approaches. Particularly useful for developers looking to create lightweight, scalable MCP servers without managing complex infrastructure."
sivan22,mcp-otzaria-server,12,,"This MCP server, developed for integrating Jewish texts into AI assistants, provides a search interface for accessing a library of Jewish literature. It utilizes the Tantivy search engine for efficient full-text search capabilities and integrates with a curated collection of Jewish texts. The server's structure, defined in pyproject.toml, allows for easy deployment and scalability. By connecting AI capabilities with Jewish literature, this implementation enables assistants to provide insights from religious texts, answer questions about Jewish law and philosophy, or analyze themes across different works. It is particularly useful for applications requiring access to Jewish knowledge, religious study assistance, or any scenario where an AI system needs to reason about and respond to queries related to Jewish texts and traditions."
sivan22,mcp-sefaria-server,11,,"This MCP server, developed by an unnamed author, provides access to the Sefaria Jewish Library for AI assistants. Built with Python and leveraging the MCP SDK, it offers tools for retrieving texts and commentaries from the Sefaria database. The server implements error handling and logging to ensure reliable operation. By abstracting the complexities of the Sefaria API, it allows AI systems to easily access and analyze Jewish texts and commentaries. This implementation is particularly valuable for applications requiring in-depth access to Jewish literature, enabling use cases such as religious study, textual analysis, and comparative research across different Jewish texts and interpretations."
sjotie,notionmcp,8,,"This MCP server implementation provides a bridge to the Notion API, enabling a wide range of database and page management operations. It offers tools for listing databases, querying and creating pages, updating blocks, and performing searches within Notion workspaces. The server is designed for use cases requiring programmatic access to Notion data, such as automating workflow processes, content management, or integrating Notion with other applications."
sjquant,llm-bridge-mcp,3,,"LLM Bridge MCP is a server that provides a unified interface to multiple large language model providers (OpenAI, Anthropic, Google, DeepSeek) using Pydantic AI. Developed by Seonu Jang, it exposes a single tool called 'run_llm' that allows AI agents to interact with different LLM providers through a standardized API, with support for customizable parameters like temperature, max tokens, and system prompts. The implementation is containerized with Docker for easy deployment and includes automatic PyPI publishing through GitHub Actions, making it ideal for developers who need to switch between different LLM providers or use multiple models within the same application."
sjwiesman,mcp-materialize,0,,"Automatically creates MCP resources based on indexes in a Materialize database cluster. The server dynamically generates URI templates and handlers for each index found in the catalog, enabling lookups through parameterized URLs like 'materialize://customers/123'. Built with FastMCP and asyncpg, it provides a clean interface for querying materialized views through AI assistants without manual resource configuration. Particularly valuable for teams using Materialize who want to expose their indexed views through natural language interaction."
newideas99,deepseek-thinking-claude-3.5-sonnet-cline-mcp,104,,"This RAT (Retrieval Augmented Thinking) MCP server, developed by Skirano, implements a two-stage reasoning process combining DeepSeek's analysis capabilities with various response models. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers flexible model selection, persistent conversation context, and customizable reasoning visibility. The implementation focuses on enhancing AI responses through structured reasoning, with features like context management and multi-model support. It's particularly useful for developers and researchers working on improving AI conversation quality, enabling use cases such as more thoughtful chatbots, enhanced question-answering systems, and AI-assisted analysis tasks without directly dealing with individual API complexities."
skobyn,mcp-dataforseo,0,764,"DataForSEO MCP Server provides a stdio-based interface to the DataForSEO API suite, enabling AI assistants to access SEO data including search results, keyword metrics, backlinks, on-page analysis, domain analytics, app data, merchant information, and business listings. Built by skobyn, it authenticates with DataForSEO credentials provided via command-line arguments or environment variables, processes JSON requests through stdin/stdout following the MCP protocol, and handles various API endpoints with appropriate parameter mapping. This server is particularly valuable for SEO analysis workflows, competitive research, and content optimization tasks without requiring direct API integration."
skobyn,dataforseo-mcp-server,17,,"A specialized MCP server that bridges AI assistants with DataForSEO's extensive SEO APIs, enabling programmatic access to search engine data, keyword research, backlink analysis, and business intelligence across multiple platforms. Built by Skobyn, this implementation provides a standardized interface for retrieving SEO insights through natural language interactions, with support for DataForSEO and optional third-party integrations like Local Falcon."
skrapeai,skrape-mcp,5,,"This MCP server, developed by Skrape.ai, provides a bridge between web content and LLMs by converting HTML pages into clean, structured Markdown. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a simple interface to the skrape.ai API for webpage conversion. The implementation focuses on noise reduction, consistent formatting, and JavaScript rendering support, making it ideal for feeding web content into LLMs. It's particularly useful for developers and researchers working with language models, enabling use cases such as web content analysis, information extraction, and automated research without dealing directly with HTML parsing or web scraping complexities."
skudskud,test-repo-mcp,0,,"This MCP server implementation provides a bridge between AI agents and the Uber Eats platform. It offers tools for searching menu options and placing food orders through automated browser interactions. The server uses FastMCP and asynchronous programming to handle requests, with background tasks for performing searches and orders. It's designed for use cases where AI assistants need to interact with Uber Eats on behalf of users, streamlining the food discovery and ordering process."
skydeckai,skydeckai-code,52,41048,"This MCP server, developed by SkyDeck.ai, provides a comprehensive set of tools for AI-driven development workflows. It integrates file system operations, multi-language code analysis using tree-sitter, Git operations, and code execution capabilities. The implementation is built in Python and leverages libraries like GitPython for version control integration. It's designed with security in mind, featuring configurable workspace boundaries and safe code execution measures. This server is well-suited for AI assistants or development tools that need to analyze, modify, and execute code across multiple programming languages, manage Git repositories, and perform file system operations in a controlled environment."
skydeckai,mcp-server-rememberizer,19,9003,"This MCP server, developed by Skydeck AI, provides a bridge between large language models and Rememberizer's document management API. It enables AI assistants to search, retrieve, and manage documents and integrations through semantic similarity queries and LLM agent augmentation. Built in Python, the implementation offers flexible search options, including date filtering and pagination. By connecting AI models with Rememberizer's knowledge base, this server allows AI systems to access and analyze relevant information from various data sources. It is particularly useful for enhancing AI assistants with context-aware responses, supporting research tasks, and enabling more sophisticated document analysis and retrieval in enterprise knowledge management scenarios."
integrations,mcp,12997,8388,An MCP implementation for Skyvern AI that enables browser automation and web interaction capabilities through the Model Context Protocol.
skywalker-harrison,mcp-soduku,1,,"A Sudoku solver MCP server that provides tools for parsing, solving, and managing Sudoku puzzles. Developed by Skywalker-Harrison, the server allows users to add, solve, and store Sudoku puzzles programmatically, with support for various input formats and automatic grid formatting. Useful for puzzle enthusiasts, game developers, and AI problem-solving applications."
src,slack,36543,136366,"This Slack MCP Server, developed by the Anthropic team, provides a robust interface for language models to interact with Slack workspaces. It enables AI agents to perform a wide range of Slack-specific tasks including listing channels, posting messages, replying to threads, adding reactions, retrieving channel history, and accessing user information. The implementation distinguishes itself by offering comprehensive Slack API integration, making it ideal for AI-driven workplace communication and automation. By leveraging Slack's Bot User OAuth Tokens, it ensures secure and authorized access to workspace data. This tool is particularly powerful for AI assistants designed to enhance team collaboration, automate routine communication tasks, and provide intelligent insights from Slack conversations."
agentsworkingtogether,mcp-sleep,0,1995,"MCP-Sleep provides a simple tool for AI agents to introduce timed pauses in their execution flow. Developed by StylusFrost, this server exposes a 'sleep' tool through the Model Context Protocol that allows agents to wait a specified number of seconds before continuing their tasks. The implementation supports both stdio and SSE transport methods, includes configurable timeout limits through environment variables or command-line options, and is containerized for easy deployment. This tool is particularly useful for scenarios requiring time-based coordination, rate limiting, or simulating processing delays in agent workflows."
slidespeak,slidespeak-mcp,6,,"SlideSpeak MCP is a server implementation that enables AI assistants to interact with presentation slides. It allows AI models to view, analyze, and manipulate slide content through the Model Context Protocol."
leghis,smart-thinking,14,,"Smart-Thinking provides a framework for intelligent decision-making and verification through semantic embeddings, thought graphs, and quality evaluation. The implementation integrates tools and metrics calculation to enable memory-based reasoning while maintaining verification states. Built with TypeScript and designed for extensibility, it's particularly valuable for applications requiring sophisticated cognitive processing with verifiable outputs."
smehmood,modal-mcp-server,2,,"Modal MCP Server provides tools for interacting with Modal, a platform for running serverless applications in the cloud. It enables AI agents to deploy Modal applications and run functions within those apps through a standardized API. The server exposes two main tools: deploying Modal apps to the cloud and executing functions within those apps with custom parameters. Built with FastAPI, it handles the communication between AI assistants and the Modal platform, making it valuable for workflows that require cloud-based computation or serverless function execution without leaving the conversation interface."
smhnkmr,realtime-crypto-mcp-server,1,136,"Realtime Crypto MCP Server provides cryptocurrency data through the CoinCap API, offering two main tools: one for retrieving detailed exchange information and another for getting current cryptocurrency rates. The server runs on stdio transport and implements robust error handling and rate limiting with automatic retries. Built with TypeScript and the Model Context Protocol SDK, it enables AI assistants to access up-to-date cryptocurrency market data for applications requiring real-time financial information."
smian0,mcp-agile-flow,0,,"MCP Agile Flow is a project management and workflow enhancement tool built with FastMCP that provides AI-assisted capabilities for software development documentation, project ideation, and team collaboration. The server offers tools for generating structured documents like Business Requirements Documents (BRDs), Product Requirements Documents (PRDs), and user stories, along with a sophisticated 'think tool' that helps break down complex problems and track reasoning processes. It focuses on standardizing project documentation, supporting natural language commands, and providing a flexible framework for agile development workflows."
smithery-ai,mcp-figma,1,,"This MCP server provides a bridge to the Figma API, enabling AI assistants to interact with Figma design files, comments, teams, projects, components, and styles. Developed by Noah, it offers tools for file operations, comment management, and accessing design assets. The server is designed for use cases requiring AI-driven design analysis, collaboration, or integration of Figma resources into AI-assisted applications."
smithery-ai,ntropy-mcp,0,,MCP server for enriching banking data using the Ntropy API. Implements two tools: creating account holders and enriching transactions. Designed to be used with Claude Desktop or other MCP clients to provide detailed financial transaction analysis and categorization capabilities.
smn2gnt,mcp-salesforce,46,9336,"This Salesforce MCP connector, developed by Suman G, enables seamless integration between Salesforce and AI-assisted workflows. It provides a Python-based interface for executing SOQL queries, performing SOSL searches, retrieving metadata, and managing Salesforce records through the Model Context Protocol. Built on the simple-salesforce library, it offers a range of Salesforce-specific operations including Tooling API and Apex REST requests. This implementation is particularly useful for developers and Salesforce administrators looking to incorporate AI assistance into their CRM workflows, enabling natural language interactions with Salesforce data and automating complex operations."
janwilmake,openapi-mcp-server,487,12188,"This MCP server, developed by snaggle-ai, enables AI assistants like Claude to interact with any API that has an OpenAPI v3.1 specification. It automatically converts API endpoints into Claude tools, allowing the AI to discover available endpoints, understand required parameters, make API calls, and handle responses. The server integrates seamlessly with Claude Desktop, facilitating natural language interactions with both local and remote APIs. By bridging AI capabilities with existing API infrastructures, this implementation empowers more dynamic and context-aware conversations. It is particularly useful for scenarios like API testing, prototyping integrations, or exploring API capabilities through natural language in AI-assisted development, documentation, and API interaction tasks."
sndani,mcp-localhost-server-weaviate,2,,"Weaviate MCP Server provides a flexible memory and knowledge base management system using the Weaviate vector database. It enables storing, searching, and retrieving memories and structured knowledge through three primary tools: memory storage, memory search, and knowledge base querying. Useful for AI assistants that need persistent, searchable information storage across conversation contexts."
snjyor,binance-mcp,4,391,"Binance Cryptocurrency MCP is a service that provides real-time access to Binance cryptocurrency market data through a set of specialized tools. Developed by snjyor, this TypeScript implementation enables AI agents to execute Binance API calls to retrieve current prices, order book data, candlestick charts, trading history, and price statistics. The server includes 12 distinct tools for different data retrieval operations, from simple price lookups to complex historical trading data analysis. It's particularly useful for users who want to query cryptocurrency market information directly through AI assistants without having to check external websites or applications."
snoglobe,prolog_mcp,15,,"Prolog MCP provides tools for executing Prolog programs, running queries, and discovering available predicates within a Prolog engine. Built using Go and the ichiban/prolog library, this implementation creates a bridge between AI assistants and Prolog's logical programming capabilities through three main tools: executing programs, running time-limited queries with solution collection, and exploring the predicate environment. The server handles query timeouts gracefully and formats solutions as structured data, making it useful for developers who want to leverage Prolog's reasoning capabilities directly from their AI assistant interactions."
baolongt,sns-mcp-server,4,,"A server implementation for interacting with Service Nervous System (SNS) DAOs on the Internet Computer blockchain. Built with TypeScript, it provides tools for listing proposals, managing votable neurons, retrieving system parameters, and executing votes through a standardized interface. Particularly valuable for DAO participants who need to monitor and participate in governance activities through natural language interaction."
socamalo,ppt_mcp_server,15,,"PowerPoint MCP Server enables Claude Desktop to interact with Microsoft PowerPoint through a comprehensive set of automation functions. Built by socamalo, it leverages the PowerPoint COM API via pywin32 to provide capabilities for creating, opening, and modifying presentations, including adding slides, inserting text boxes, updating content, and managing slide layouts. The implementation handles various PowerPoint versions through fallback mechanisms for text manipulation and includes robust error handling for common edge cases, making it particularly valuable for users who need to create or edit presentations directly through natural language conversations without switching applications."
tayler-id,social-media-mcp,1,,"Social Media MCP Server enables cross-platform content creation and posting through a unified interface, integrating with Twitter, Mastodon, and LinkedIn. Built with TypeScript, it leverages multiple AI models for content generation, handles platform-specific formatting, and provides research capabilities using Brave Search and Perplexity. The server supports natural language instructions for creating posts, with robust error handling, rate limit management, and a modular architecture that allows easy extension to new platforms."
sofianhamiti,mcp-server-s3,0,,"This MCP server implementation provides tools for interacting with AWS S3 buckets, enabling AI assistants to perform S3 operations through the Model Context Protocol. Developed by sofianhamiti, it currently offers a tool for listing S3 buckets with optional region specification. Built using Python and leveraging the boto3 library, the server focuses on secure AWS credential management and supports easy installation via PyPI or from source. It is particularly useful for applications requiring cloud storage management, such as file organization, backup solutions, or content delivery systems. The implementation is designed to be extensible, allowing for future addition of more S3-related tools and operations."
softgridinc-pte-ltd,mcp-excel-reader-server,3,,"This MCP server implementation provides tools for reading Excel (xlsx) files, offering functionality to extract content from all sheets or specific sheets by name or index. Developed by SoftGrid Inc., it uses the openpyxl library for Excel file handling and is built on Python 3.10+. The server returns data in a structured JSON format, handling empty cells and data type conversions. It's designed for easy integration into AI-driven workflows that require Excel data processing, such as financial analysis, data migration, or automated reporting. The implementation focuses on clear error handling and supports various Excel reading scenarios, making it suitable for both simple data extraction tasks and more complex Excel-based operations."
sokratisvidros,workers-mcp-clerk,9,,"This MCP server implementation provides a bridge between Claude Desktop and Clerk-protected API routes or server actions. Developed by Sokratis Vidros, it allows an AI assistant to impersonate a Clerk user, enabling secure interactions with authenticated endpoints. Built using TypeScript and Cloudflare Workers, the implementation focuses on maintaining user authentication while facilitating AI-driven operations. It's particularly useful for scenarios where AI assistants need to interact with protected resources, such as personalized data retrieval or secure API interactions, within applications that use Clerk for authentication."
solana-foundation,solana-dev-mcp,26,,"The Solana MCP Server provides AI models with direct access to Solana blockchain data through simple RPC methods including getBalance, getAccountInfo, getTransaction, and getMinimumBalanceForRentExemption. Built with TypeScript using the Model Context Protocol SDK, it connects to Solana's mainnet-beta and offers specialized prompts for common development tasks like calculating storage costs, analyzing transaction failures, and breaking down transaction fees. The implementation also includes resources for accessing Solana documentation, making it particularly valuable for developers working with Solana who need blockchain data integration within their AI workflows."
8bitsats,solana_tracker_mcp_server,1,,"A Solana token tracking MCP server that provides extensive data retrieval capabilities for Solana blockchain tokens through the Solana Tracker API. The server exposes a wide range of tools for querying token information, trading data, wallet analytics, and market insights, enabling developers and traders to access real-time and historical token performance metrics across various dimensions."
solidus-,atlassian-cursor-mcp,0,,"Atlassian Cursor MCP provides a standardized integration with Jira, Confluence, and Bitbucket APIs, enabling developers to interact with Atlassian products through a unified interface. The server supports operations like searching issues, creating and updating tickets, retrieving project information, and managing issue workflows. Built with TypeScript and the Model Context Protocol SDK, it offers a flexible, extensible approach to programmatic interaction with Atlassian's collaboration tools."
songjiayang,eino-mcp,1,,"Eino-MCP is a server that provides AI assistants with access to current time information across different timezones. Built using the Mark3Labs MCP-Go library, it exposes a simple tool that accepts a timezone parameter and returns the current time formatted for that location. The server supports both stdio and SSE transport protocols, making it flexible for different integration scenarios. The implementation is designed to work with Alibaba Cloud's Qwen2.5-32b model through the DashScope API compatibility layer, demonstrating how specialized time-related functionality can be exposed to large language models."
sonnylazuardi,cursor-talk-to-figma-mcp,2907,,"Cursor Talk to Figma MCP enables AI assistants to interact with Figma designs through a bidirectional communication system. Created by Sonny Lazuardi, it consists of a Figma plugin, a WebSocket server, and an MCP server that together allow Cursor AI to read and modify Figma designs programmatically. The implementation provides tools for creating and manipulating design elements (rectangles, frames, text), styling (colors, strokes, corner radius), and organization (moving, resizing, deleting nodes), making it particularly valuable for AI-assisted design workflows where users need to generate or modify visual elements without leaving their AI conversation."
gfable,arbitrum_mcp_server,8,,"Provides real-time Arbitrum blockchain data analysis through integration with Arbiscan API and Claude AI. The server exposes tools for fetching latest block information, transaction details, account balances and network statistics, with AI-powered interpretation of the data through Claude. Built for blockchain analysts and developers who need to monitor Arbitrum network activity and extract meaningful insights through natural language queries."
sooperset,mcp-atlassian,924,326159,"This MCP server, developed by sooperset, enables AI assistants to interact with Atlassian Cloud products, specifically Confluence and Jira. It provides tools for searching and reading Confluence spaces/pages, retrieving page comments, searching Jira issues, and accessing project metadata. Built in Python, the implementation exposes Atlassian's collaborative features via a standardized MCP interface, allowing AI models to analyze and manipulate content within Atlassian workspaces. By bridging AI capabilities with Atlassian's project management and documentation platforms, this server enhances an AI assistant's ability to support software development workflows, project tracking, and knowledge management. It is particularly useful for teams already using Atlassian tools who want to leverage AI for task automation, content analysis, and workflow optimization."
adamjbird2,mcp-atlassian-sprint,3,,"Bridges Atlassian's Jira and Confluence APIs with AI language models, providing secure, contextual interactions through a standardized interface. Built with Python and supporting both cloud and on-premise deployments, this implementation enables dynamic retrieval, creation, and manipulation of issues, pages, comments, and other resources with robust error handling and preprocessing capabilities. Particularly valuable for teams seeking programmatic, AI-assisted workflow management across Atlassian platforms."
tijs,py-sound-mcp,0,,"MCP Sound Tool is a Python-based server that plays sound effects to enhance the coding experience in Cursor AI and other MCP-compatible environments. Developed by Tijs Teulings, it provides audio feedback for various events (completion, error, notification) across Windows, macOS, and Linux platforms. The implementation exposes tools for playing predefined or custom sounds, listing available sound files, and installing sounds to the user's config directory, making it particularly valuable for AI agents that want to provide clear audio cues without requiring users to read text feedback."
sourabh-khot65,typesense-mcp-server,2,,"Typesense MCP Server provides a bridge between AI assistants and Typesense search functionality, specifically tailored for candidate and resume search operations. Built in Go using the mcp-go library, it offers tools for searching candidate profiles and their attachments with powerful filtering, sorting, and grouping capabilities. The server connects to either a Typesense instance or falls back to a Tacitbase API, enabling natural language queries against structured candidate data with features like typo tolerance and field-specific search. This implementation is particularly valuable for recruitment workflows where users need to quickly find relevant candidates based on skills, experience, education, or document content."
spacefrontiers,mcp,3,,"Space Frontiers MCP Server implements an interface to the Space Frontiers API, allowing language models to interact with various Space Frontiers data sources through defined tools. Built with FastAPI and FastMCP, it provides two main tools: 'simple_search' for keyword searches and 'search' for semantic searches across library, telegram, or reddit databases. The server supports authentication via API keys through environment variables or request headers, making it flexible for both direct integration and public access through the hosted endpoint at mcp.spacefrontiers.org."
spacemeowx2,cargo-doc-mcp,5,,"This MCP server provides tools for managing Rust documentation through cargo doc commands. It offers functionality to check if documentation is built, build documentation for specific crates, and search within crate documentation. The server includes features like caching of built documentation paths and detailed error handling. It is designed for integration with Claude Desktop and aims to streamline Rust documentation workflows for developers."
sparesparrow,mcp-project-orchestrator,5,,"The mcp-project-orchestrator is an MCP server designed to streamline software project creation by applying standardized templates and design patterns. It analyzes user input to select appropriate project structures, generates comprehensive documentation including Mermaid diagrams, and provides tools for project setup and management. This implementation is particularly useful for developers seeking to rapidly prototype new software projects with best practices in architecture and design built-in from the start."
sparesparrow,mcp-prompts,23,,"This MCP server implementation provides a system for managing and serving prompts and prompt templates for LLM interactions. It offers tools for storing, retrieving, and applying variable substitution to prompts, as well as tag-based organization and search capabilities. The server is designed to integrate with Claude Desktop and supports various use cases such as development workflows, code reviews, and customized AI interactions."
sparfenyuk,mcp-telegram,69,,"This MCP implementation for Telegram, developed by Sergey Parfenyuk, provides a server interface to interact with Telegram through the MTProto protocol. Built with Python and leveraging libraries like Telethon and Pydantic, it offers tools for listing dialogs and messages. The implementation focuses on providing a standardized way to access Telegram functionality through MCP, making it easier to integrate Telegram capabilities into AI workflows. It's particularly useful for developers and researchers looking to incorporate Telegram messaging and data retrieval into their AI-assisted applications, enabling tasks like automated message analysis, chatbot integration, or social media monitoring."
sparfenyuk,mcp-youtube,9,,"This YouTube MCP server, developed by Sergey Parfenyuk, provides a bridge between the YouTube API and AI assistants using the Model Context Protocol. Built with Python and leveraging libraries like pydantic and typer, it currently offers functionality to download closed captions for given YouTube videos. The implementation focuses on simplicity and ease of use, making it ideal for developers and content creators who want to integrate YouTube transcript data into AI workflows. It's particularly useful for tasks like video summarization, content analysis, and accessibility improvements, enabling AI assistants to work with YouTube video content more effectively."
sparsh0006,mcp-server,0,,"CoinPilot DCA MCP server provides a bridge between AI assistants and cryptocurrency investment platforms, enabling automated dollar-cost averaging (DCA) strategies on the Aptos blockchain. The server exposes tools for creating and managing DCA plans, retrieving user investment data, and accessing liquidity pools from Joule Finance and Liquidswap. Built with TypeScript and the Move Agent Kit, it authenticates with the Aptos blockchain using a private key and communicates with the CoinPilot API to execute transactions. This implementation is particularly valuable for users who want to automate their cryptocurrency investments through AI assistants without switching contexts."
sparxhub,mcp-makesync,1,,"MCP-MakeSync is a TypeScript server implementation that enables AI assistants to interact with Make.com's automation platform. Developed by Nadav Daniel, it provides tools for retrieving scenario blueprints, creating and updating scenarios, and managing modules within Make.com workflows. The server authenticates using Make.com API keys and exposes eight specialized tools that handle operations from listing available scenarios to patching module parameters with dynamic values. It's particularly valuable for users who want to automate the creation and modification of Make.com integration scenarios through natural language, without requiring deep knowledge of Make.com's API structure."
spathodea-network,opencti-mcp,9,,"This OpenCTI MCP server, developed by zxzinn and Spathodea Network, provides a standardized interface for interacting with the OpenCTI threat intelligence platform. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined way to query and manipulate threat intelligence data. The server implements OpenCTI API authentication and endpoint configuration, enabling AI systems to easily access and analyze cyber threat information. This implementation is particularly valuable for security teams and researchers working with threat intelligence, facilitating use cases such as automated threat analysis, indicator enrichment, and integration of threat data into AI-driven security workflows."
speakeasy-api,markdown-sidecar-mcp,1,,"MCP Markdown Sidecar serves and exposes markdown documentation from NPM packages as MCP resources or tools. It enables AI assistants to access relevant documentation files directly within a conversation by mounting markdown content from locally installed packages. The server supports both stdio and SSE transport methods, can target specific subdirectories within packages, and formats documentation either as tools or resources based on configuration. Particularly valuable for developers who need AI assistance with understanding package documentation without leaving their conversation interface."
speakeasy-api,mistral-mcp-server-example,2,,"This Mistral MCP server, developed by Speakeasy, provides a seamless integration with the Mistral AI platform. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers a standardized interface for accessing Mistral's language models through MCP-compatible clients. The implementation supports Mistral's API capabilities, allowing for easy integration of Mistral's AI models into various applications. It's particularly useful for developers and businesses looking to incorporate Mistral's advanced language processing capabilities into their AI-assisted workflows, enabling tasks such as text generation, analysis, and more within a unified MCP framework."
spektraldevelopment,mcp-wiki,0,,"MCP-Wiki provides a tool for AI assistants to fetch and convert Wikipedia articles to Markdown format. The server exposes a single tool, read_wikipedia_article, which takes a Wikipedia URL, validates it, retrieves the article content using requests and BeautifulSoup, and converts the HTML to clean Markdown using html2text. Built with Python 3.13 and the FastMCP framework, it handles various error conditions gracefully, including invalid URLs, connection issues, and parsing failures. This implementation is particularly useful for researchers and content creators who need to reference Wikipedia information directly within their AI assistant conversations without manual copying or formatting."
spencerhhubert,illustrator-mcp-server,19,,"This Adobe Illustrator MCP server, developed for MacOS, enables AI assistants to interact directly with Illustrator using JavaScript. It leverages AppleScript to send scripts to Illustrator and retrieve results, providing a bridge between AI systems and Illustrator's powerful design capabilities. The server abstracts the complexities of Illustrator's scripting interface, offering a streamlined way for AI to programmatically create and manipulate vector graphics. By connecting AI with professional design software, this implementation opens up possibilities for automated graphic design, data visualization, and generative art. It is particularly useful for applications requiring dynamic image creation, such as personalized marketing materials, automated report illustrations, or AI-driven design assistance."
spences10,mcp-duckduckgo-search,2,834,"This DuckDuckGo MCP server, developed by Scott Spence, provides a streamlined interface for integrating DuckDuckGo search capabilities into MCP-compatible applications. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers customizable search parameters including region-specific results, safe search options, and date filtering. The implementation focuses on simplifying access to DuckDuckGo's search engine through a standardized protocol, making it easier for AI models to perform web searches without dealing directly with the search engine's API complexities. It's particularly useful for applications requiring up-to-date information retrieval, enabling use cases like fact-checking, current events analysis, and general knowledge queries."
spences10,mcp-embedding-search,0,,"This MCP server implementation, developed by Scott Spence, provides embedding search capabilities for transcripts. It utilizes a SQLite database to store and query embeddings, allowing for efficient semantic search across large volumes of text data. The implementation is designed for use cases requiring quick retrieval of relevant transcript segments based on semantic similarity, such as in podcast analysis, speech-to-text applications, or content recommendation systems."
spences10,mcp-jinaai-grounding,2,472,"This JinaAI grounding MCP server, developed by Scott Spence, enables integration of JinaAI's content extraction and analysis capabilities with MCP-compatible applications. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for web content extraction, documentation parsing, and text analysis. The implementation focuses on simplifying access to JinaAI's grounding functionality through a standardized interface. It's particularly useful for developers and AI models needing to extract and analyze web content or documentation, enabling use cases like fact-checking, content verification, and real-time information retrieval without dealing directly with web scraping or content parsing complexities."
spences10,mcp-jinaai-reader,25,1180,"This MCP server for JinaAI reader, developed by Scott Spence, provides a TypeScript-based interface for AI assistants to extract and process web content. Built using the Model Context Protocol SDK, it offers tools for parsing and analyzing text from web pages and documentation. The implementation focuses on efficient content extraction, making it easier for AI models to work with web-based information. It's particularly useful for tasks like summarizing articles, answering questions about documentation, or analyzing web content at scale, enabling AI to process online information without needing to navigate complex HTML structures or handle various web technologies directly."
spences10,mcp-jinaai-search,4,567,"This JinaAI search MCP server, developed by Scott Spence, enables integration of JinaAI's search capabilities with MCP-compatible applications. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for performing web content searches and extracting relevant information. The implementation focuses on simplifying access to JinaAI's search functionality through a standardized MCP interface. It's particularly useful for developers and AI models looking to incorporate advanced search capabilities into their workflows, enabling use cases like content discovery, information retrieval, and data extraction without dealing directly with JinaAI's API complexities."
spences10,mcp-memory-libsql,44,7446,"This LibSQL-based persistent memory tool for MCP, developed by Scott Spence, provides a database interface for AI models to store and retrieve information. Built with TypeScript and leveraging the LibSQL client, it offers functionality for managing entities and relations in a knowledge graph structure. The implementation focuses on providing a robust, SQL-based storage solution that can be used locally or with remote databases. It's particularly useful for maintaining context across conversations, building knowledge bases, or creating persistent memory systems for AI assistants, enabling long-term information retention without requiring complex database management."
spences10,mcp-omnisearch,25,733,"Unified search and content processing MCP server that integrates multiple AI and web search providers like Tavily, Brave, Kagi, Perplexity, and Firecrawl. Provides a flexible tool registry with detailed provider descriptions, supporting search, AI response, content extraction, and content enhancement across various domains. Designed to enable AI assistants to dynamically select the most appropriate provider for complex information retrieval and processing tasks."
spences10,mcp-perplexity-search,8,2202,"This MCP server, developed by Scott Spence, provides an interface for performing Perplexity web searches. Built using TypeScript and leveraging the Model Context Protocol SDK, it offers tools for querying the Perplexity search API and returning results in customizable formats. The implementation focuses on flexibility, allowing for JSON or Markdown output and customizable prompt templates. It's particularly useful for AI assistants needing up-to-date web information, enabling use cases like fact-checking, research assistance, or generating content with current data without requiring direct web access or parsing HTML."
spences10,mcp-sequentialthinking-tools,92,7006,"This MCP server for Sequential Thinking Tools, developed by Scott Spence, provides a structured approach to problem-solving and decision-making processes. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for step-by-step analysis, branching thoughts, and adaptive thinking strategies. The implementation focuses on guiding AI models through complex reasoning tasks, with features for tool recommendation and confidence assessment. It's particularly useful for AI assistants and applications needing to break down problems, plan solutions, and conduct reflective analysis, enabling use cases such as strategic planning, troubleshooting, and multi-step decision making without relying on predefined problem-solving frameworks."
xinzhongyouhai,mcp-sequentialthinking-tools,8,,"Sequential Thinking Tools server enables AI assistants to break down complex problems into structured steps while recommending appropriate tools for each stage. Built by Scott Spence, it provides a flexible thinking framework that can adapt and revise previous thoughts, track solution progress, and suggest specific tool parameters based on context. Particularly valuable for tasks requiring multi-step planning, hypothesis generation and verification, or problems where the full scope may not be initially clear."
spences10,mcp-svelte-docs,25,3143,"This MCP Svelte documentation server, developed by Scott Spence, provides an interface for AI assistants to access and query Svelte documentation. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for retrieving and parsing Svelte documentation content. The implementation focuses on efficient documentation access and formatting, making it easier for AI models to assist with Svelte-related queries and tasks. It's particularly useful for developers and AI assistants working with Svelte, enabling quick access to framework documentation, code examples, and best practices without requiring deep knowledge of Svelte's documentation structure or manual searching through web pages."
spences10,mcp-tavily-search,9,1828,"This MCP server for Tavily search, developed by Scott Spence, provides an interface for AI assistants to leverage Tavily's semantic search capabilities. Built with TypeScript and the Model Context Protocol SDK, it enables AI models to perform web searches and retrieve relevant results. The implementation focuses on simplifying integration with Tavily's API, making it accessible for AI systems to incorporate up-to-date web information. It's useful for tasks like fact-checking, research assistance, or enhancing AI responses with current data, allowing models to access web search functionality without deep knowledge of the underlying search engine complexities."
spences10,mcp-turso-cloud,2,631,"MCP Turso Cloud provides a bridge between AI assistants and Turso SQLite databases, enabling both organization-level operations (creating/managing databases) and database-level queries. Built by Scott Spence, it implements a two-level authentication system that handles organization tokens for administrative tasks and database-specific tokens for query execution. The server maintains context between interactions, supports vector similarity search, and includes comprehensive token management with automatic rotation. This implementation is particularly valuable for workflows requiring persistent database access, schema exploration, and vector search capabilities without leaving the conversation interface."
spences10,mcp-wsl-exec,9,802,"This MCP server implementation, developed by Scott Spence, provides a secure way to execute commands in Windows Subsystem for Linux (WSL) with built-in safety features. Written in TypeScript and utilizing the Model Context Protocol SDK, it offers command execution with path validation, timeouts, and error handling. The implementation focuses on providing a controlled interface for AI models to interact with WSL, enabling safe execution of Linux commands from Windows environments. It's particularly useful for developers and system administrators looking to leverage AI capabilities for WSL-based tasks, such as automated system maintenance, development workflows, or data processing, while maintaining strict security controls."
spolepaka,ephor-youtube-mcp,0,,"YouTube MCP Integration provides AI assistants with the ability to search YouTube, retrieve video information, and extract video transcripts through a standardized interface. Built by spolepaka, this implementation scrapes YouTube data directly without requiring API keys, making it accessible for any AI assistant that supports the Model Context Protocol. The server exposes three main tools: youtube_search for finding videos based on queries, youtube_get_video_info for retrieving metadata about specific videos, and youtube_get_transcript for extracting closed captions. It includes both an HTTP/SSE server implementation for integration with AI platforms and a simple web client for testing, making it particularly valuable for research, content analysis, and educational use cases that benefit from video content."
naunau75,spotify_mcp,0,,"Spotify MCP server enables Claude to control Spotify playback and access music information directly within conversations. Built on the spotipy API, it provides tools for starting, pausing, and skipping tracks, searching for music content, managing the playback queue, and retrieving detailed information about tracks, albums, artists, and playlists. The implementation requires Spotify Premium and developer API credentials, connecting through OAuth authentication to provide a seamless music control experience. This Python-based server is particularly useful for hands-free music control, discovering new music, or analyzing listening habits without switching between applications."
bootcamptoprod,spring-boot-ai-mongo-mcp-server,1,,"A Spring Boot AI-powered MongoDB MCP server that enables AI assistants to interact with MongoDB databases through a set of specialized tools. This implementation provides capabilities for listing databases and collections, executing simple and complex queries, managing indexes, creating collections, and inserting documents. Built with Spring AI and MongoDB Java driver, it exposes MongoDB operations as MCP tools that can be called by AI models. The server is configured to run as a non-web application that connects to a MongoDB instance specified through environment variables, making it ideal for scenarios where AI systems need to access, query, and manipulate data stored in MongoDB databases."
springmt,microcms-mcp-server,0,,"MicroCMS MCP Server provides a bridge between Claude and the MicroCMS headless content management system. Built with TypeScript, it leverages the Model Context Protocol SDK and MicroCMS JavaScript SDK to enable AI assistants to interact with content stored in MicroCMS. The server exposes MicroCMS functionality through a standardized interface, allowing for content retrieval, creation, and management operations directly within AI conversations. This implementation is particularly useful for content workflows that require accessing or manipulating structured content from MicroCMS without switching contexts."
spritualkb,nuclei-mcp,0,,"Nuclei-server is an MCP server that provides a bridge to the Nuclei vulnerability scanning tool, enabling AI assistants to perform automated security scans on target URLs. It exposes tools for starting and managing vulnerability scans with configurable parameters like severity, rate limiting, and proxy settings, and tracks scan progress and results as resources that can be retrieved and analyzed."
aman-panjwani,mcp-sql-server-natural-lang,0,,"Enables natural language interaction with Microsoft SQL Server databases through a secure interface. The server exposes a tool for executing SQL queries with proper connection handling and error management, while the client uses GPT-4 to translate natural language into SQL and interpret results. Built for database administrators and analysts who want to query and analyze SQL Server data through conversational AI without writing raw SQL."
squirrelogic,mcp-architect,20,,"This MCP server, developed by an unnamed author, provides architectural expertise through specialized agents. Built with TypeScript and leveraging the Model Context Protocol SDK, Express, and OpenAI, it enables AI assistants to analyze and generate architectural designs, patterns, and solutions. The implementation focuses on delivering tailored architectural guidance for software projects. It's particularly useful for development teams seeking AI-assisted architectural decision-making, enabling use cases such as system design reviews, pattern recommendations, and scalability assessments without extensive manual analysis."
squirrelogic,mcp-feature-discussion,1,,"This MCP server, developed by Feature Discussion Squirrel Software, provides an AI-powered lead developer interface for facilitating intelligent feature discussions. Built with TypeScript and leveraging Next.js, it offers tools for interactive discussions, persistent memory management, and context-aware recommendations. The implementation focuses on guiding development teams through feature implementation, architectural decisions, and best practices. By connecting AI models with project context and development expertise, this server enables sophisticated scenarios like maintaining discussion history, tracking feature evolution, and providing tailored guidance. It's particularly useful for development teams seeking AI assistance in making informed design choices and maintaining consistent project knowledge."
sreedeep-ss,docret-mcp-server,1,,"The Documentation Retrieval MCP Server (DOCRET) enables AI assistants to access up-to-date documentation for Python libraries including LangChain, LlamaIndex, and OpenAI. Built by S.S.Sreedeep, it leverages the Serper API to perform targeted web searches within documentation sites and uses BeautifulSoup to extract readable content from HTML pages. The server exposes a single tool that allows querying specific libraries with search terms, making it ideal for AI applications that need to reference current library documentation without relying on potentially outdated training data."
srikanth-paladugula,mcp-dynamics365-server,2,,"Dynamics365 MCP server provides integration with Microsoft Dynamics 365 CRM through a set of tools for retrieving and managing business data. The implementation authenticates with Azure AD using client credentials, offering capabilities to fetch user information, retrieve accounts, get associated opportunities, create new accounts, and update existing ones. Built with TypeScript and the Model Context Protocol SDK, it requires environment variables for authentication and API endpoints, making it suitable for AI assistants that need to interact with Dynamics 365 customer relationship data."
srmorete,adb-mcp,0,77,"ADB MCP Server provides a bridge between AI assistants and Android devices through the Android Debug Bridge (ADB). Developed by Martin Arellano, this TypeScript implementation exposes essential ADB functionality as MCP tools, including device management, shell command execution, app installation, file transfers, and UI inspection. The server handles command execution, temporary file management, and error handling while providing detailed logging options. It's particularly useful for automating Android device interactions, testing mobile applications, and enabling AI assistants to control or extract information from connected Android devices without requiring direct ADB knowledge."
ssdavidai,vercel-api-mcp-fork,0,,"Vercel API MCP server provides a bridge to the Vercel platform, enabling AI assistants to manage deployments, DNS records, domains, projects, and environment variables through the Model Context Protocol. Built by zueai and forked by ssdavidai, it offers tools for retrieving deployment events, managing DNS configurations, controlling project domains, and handling environment variables. The implementation runs as a Node.js application that authenticates with the Vercel API using a personal access token, making it valuable for developers who need to automate or query their Vercel infrastructure directly within AI assistant conversations."
ssdeanx,branch-thinking,12,,"Branch Thinking provides a structured framework for managing complex thought processes through branching paths, semantic analysis, and bias detection. The implementation uses TypeScript to create a system where thoughts can be organized into branches with cross-references, insights, and semantic relationships, while the analytics engine evaluates branch metrics, temporal stability, and concept drift. Built with features for visualization, contradiction detection, and reinforcement learning capabilities, it's particularly valuable for scenarios requiring systematic exploration of multiple perspectives, scientific reasoning, design pattern analysis, and complex decision-making where tracking the evolution of ideas is essential."
ssdeanx,deep-research-mcp-server,23,,"This MCP server implementation provides an AI-powered research assistant for conducting iterative, deep research on any topic. Developed by ssdeanx, it combines search engines, web scraping, and Gemini large language models to perform comprehensive literature reviews, generate insights, and produce detailed reports. The server is built using TypeScript and integrates with Firecrawl for web data extraction and Gemini for advanced language understanding. It offers configurable depth and breadth parameters for research exploration, concurrent processing for efficiency, and outputs structured Markdown reports with source citations. The implementation is designed as a lightweight, extensible foundation (<500 LoC) for building more sophisticated AI-driven research tools, making it particularly useful for applications requiring automated literature analysis, hypothesis generation, or knowledge synthesis across various domains."
sshtunnelvision,mcp-logo-gen,164,,"This MCP server implementation provides image generation capabilities using the FAL AI service. It offers a tool for generating images from text prompts, leveraging models like 'fal-ai/recraft-v3'. The server is built using FastAPI and includes features such as Server-Sent Events (SSE) for real-time communication. It's designed for use cases requiring AI-powered image creation, such as content generation or visual design assistance."
stabgan,openrouter-mcp-multimodal,3,1707,"An MCP server that provides seamless access to OpenRouter's diverse AI models, enabling text chat, image analysis, and model discovery through a unified interface. Developed by stabgan, this implementation supports multimodal interactions across various vision and language models, with intelligent model selection, caching, and robust error handling. Useful for developers seeking flexible AI tool integration with minimal configuration overhead."
stagsz,unconventional-thinking,12,,"This MCP server, developed by Stag, provides a structured approach to unconventional problem-solving. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for generating and organizing unreasonable thoughts that challenge conventional wisdom. The implementation focuses on creating, branching, and tracking unconventional ideas within a session, allowing users to explore extreme, opposite, or tangential directions of thinking. It's particularly useful for brainstorming sessions, creative problem-solving workshops, and innovation processes where breaking out of established patterns is crucial. By integrating with Claude Desktop, it enables AI-assisted unconventional thinking without requiring users to manually navigate complex ideation techniques."
stakpak,mcp,1,962,"This MCP server connects to the Stakpak API, enabling infrastructure code generation for projects. It provides a tool called 'generate_infrastructure_code' and can be integrated with various IDEs including Claude Desktop, Cursor, and Windsurf. The implementation is built with TypeScript, uses the Model Context Protocol SDK, and requires a Stakpak API key for authentication. It's designed for developers who need to quickly generate infrastructure configurations through AI assistance."
stanislavlysenko0912,todoist-mcp-server,15,1646,"A server implementation of the Model Context Protocol (MCP) for Todoist, allowing AI assistants to interact with Todoist tasks and projects."
stanleyj03,mcp-for-security,2,,"A collection of MCP servers for popular security tools including Nmap, Masscan, SQLMap, FFUF, and MobSF, enabling AI assistants to perform network scanning, SQL injection testing, web fuzzing, and mobile application security analysis. Each server wraps its respective command-line tool or API, providing standardized interfaces for security testing operations through the MCP protocol. This implementation allows security professionals to integrate these tools into AI workflows for tasks like vulnerability assessment, penetration testing, and security audits without needing to remember complex command syntax."
starbops,harvester-mcp-server,0,,"Harvester MCP Server enables AI assistants like Claude Desktop and Cursor to interact with Harvester HCI clusters through a standardized protocol. Built in Go using the mark3labs/mcp-go SDK, it provides tools for managing both standard Kubernetes resources (pods, deployments, services) and Harvester-specific resources (virtual machines, images, volumes, networks). The server automatically connects to Kubernetes clusters using standard configuration paths and formats output in human-readable formats, making it ideal for DevOps teams who need AI assistance with Harvester cluster management and monitoring."
starrocks,mcp-server-starrocks,14,,"This official MCP server for StarRocks enables seamless integration with StarRocks databases. It provides tools for executing both read and write queries, allowing users to perform SELECT operations that return ResultSets as well as DDL/DML commands. The server is configured to connect to StarRocks instances with customizable host, port, user, and password settings. It's designed for use cases requiring efficient data querying and manipulation in StarRocks environments."
starwind-ui,starwind-ui-mcp,13,,"Starwind UI MCP Server provides a bridge between AI assistants and the Starwind UI component library for web development projects. Developed by Web Reaper, it implements tools for detecting package managers, initializing projects, installing and updating UI components, and fetching documentation. The server uses the Model Context Protocol SDK to expose capabilities through a stdio transport, making it particularly valuable for AI assistants that need to help developers integrate Starwind UI components into their projects without requiring manual command lookups or documentation searches."
stass,lldb-mcp,22,,An MCP implementation for LLDB debugging interactions
stateset,stateset-mcp-server,0,,"This MCP server provides integration with StateSet's issue operations system, enabling LLMs to interact with StateSet's API for managing returns, orders, warranties, shipments, and manufacturing processes. It implements a robust set of tools for creating and updating various business records including RMAs, orders, warranties, shipments, bills of materials, work orders, manufacturer orders, invoices, and payments. The server includes rate limiting, validation through Zod schemas, and comprehensive error handling to ensure reliable API interactions, making it suitable for e-commerce and manufacturing operations that need to programmatically manage their StateSet workflows."
stat-guy,chain-of-draft,5,,"This MCP server implements the Chain of Draft (CoD) reasoning approach, which generates concise intermediate steps while solving tasks to significantly reduce token usage. It offers tools for solving problems across various domains (math, logic, code) using both CoD and Chain of Thought methods, with adaptive complexity estimation and format enforcement. The server includes performance analytics, example management, and is designed for applications requiring efficient, token-optimized reasoning capabilities."
stat-guy,retrieval-augmented-thinking,11,,"This MCP server implementation enhances AI model capabilities with structured, retrieval-augmented thinking processes. It enables dynamic thought chains, parallel exploration paths, and recursive refinement cycles for improved reasoning and problem-solving. The server provides features like adaptive thought chains, iterative hypothesis generation, context coherence, and quality assessment, making it particularly useful for AI applications that require advanced reasoning, decision-making, and complex problem-solving capabilities."
jamie7893,statsource-mcp,0,,"The StatSource MCP server acts as a middleware between clients (like Claude Desktop) and the StatSource analytics API, enabling AI assistants to perform statistical operations and ML predictions on user data. Built with Python using the FastMCP framework, it provides tools for calculating various statistics (mean, median, etc.) on specified data columns and generating time-series forecasts, with support for multiple data sources including CSV files and databases. The implementation includes robust input validation, error handling, and security measures to prevent misuse of database connection strings, making it particularly valuable for users who need to analyze data or generate predictions within AI assistant conversations without switching to separate analytics tools."
steel-dev,steel-mcp-server,30,,"This MCP server, developed by Steel, integrates Puppeteer with the Steel SDK for browser automation. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a bridge between AI models and web browsing capabilities. The implementation stands out by combining Steel's automation features with Puppeteer's powerful browser control, enabling complex web interactions and data extraction. It's particularly useful for developers and researchers working on AI-assisted web scraping, testing, or content generation tasks that require sophisticated browser manipulation and automation."
stefanraath3,mcp-supabase,0,,"This MCP server implementation connects to a Supabase PostgreSQL database, exposing table schemas as resources and providing tools for data analysis. It offers features such as read-only SQL queries, table statistics, and relationship discovery between tables. The server includes prompts for common data exploration tasks, making it useful for applications that need to integrate Supabase data into AI-assisted workflows or perform database analysis through MCP-compatible clients."
stefans71,wordpress-mcp-server,45,963,"This WordPress MCP server, developed by stefans71, provides integration between WordPress sites and AI systems using the Model Context Protocol. Built with TypeScript and leveraging the Axios library for HTTP requests, it offers a standardized interface for interacting with WordPress APIs. The server enables AI assistants to perform common WordPress operations like managing posts, pages, and users without dealing with the complexities of direct API authentication and requests. By abstracting WordPress functionality into MCP tools, this implementation facilitates use cases such as automated content creation, site management, and data analysis for WordPress-based websites. It is designed for easy deployment and extensibility, making it valuable for developers building AI-powered WordPress automation tools or content management systems."
stefanskiasan,azure-devops-mcp-server,22,,"This Azure DevOps MCP server, developed as an open-source project, enables integration of Azure DevOps services with MCP-compatible applications like Cline. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for accessing work items, querying repositories, and reading pull requests. The implementation focuses on simplifying access to Azure DevOps functionality through a standardized MCP interface, configurable via environment variables. It's particularly useful for developers and AI models needing to interact with Azure DevOps projects, enabling use cases like project management, code review, and development workflow analysis without dealing directly with Azure DevOps API complexities."
stefanskiasan,semgrep-mcp-server,1,,"This MCP server, developed by Asan Stefanski, provides a TypeScript-based interface for integrating Semgrep static analysis capabilities. Built using the Model Context Protocol SDK, it enables AI agents to leverage Semgrep's powerful code scanning and vulnerability detection features. The implementation focuses on streamlining the process of running Semgrep scans and interpreting results, making it easier to incorporate security checks into development workflows. It's particularly useful for DevSecOps teams and security researchers who want to automate code analysis, enabling use cases such as continuous security monitoring, custom rule development, and AI-assisted vulnerability remediation without deep Semgrep expertise."
stefanskiasan,togetherai-image-mcp-server,5,,"This Together AI Image Server, developed as an open-source project, enables generation of images using Together AI's models through a standardized MCP interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a 'generate_image' tool that accepts parameters like prompt, model, dimensions, and output settings. The implementation focuses on simplifying access to Together AI's image generation capabilities, with features like automatic image resizing and high-quality JPEG output. It's particularly useful for AI assistants and applications needing to incorporate on-demand image creation, enabling use cases such as visual content generation, design prototyping, and augmented text-to-image interactions without directly dealing with the complexities of the Together AI API."
stepancooleague,file-finder-mcp,0,,"File-Finder-MCP is a server that enables AI assistants to search for files in a filesystem based on path fragments. It provides a single tool, 'search-files', which accepts a query string and an optional base directory parameter to locate matching files and return their metadata including name, full path, size, and creation date. This implementation is particularly useful for users who need to quickly locate files on their system through natural language requests without having to remember exact paths or use complex search commands."
stephanj,githubmcp,21,,"GitHub MCP Server provides a Model Context Protocol implementation for interacting with GitHub repositories through its API. Developed by Stephan J, this Java-based server exposes a comprehensive set of GitHub operations including repository management, issue tracking, pull request handling, branch operations, commit history, and content manipulation. The server supports both STDIO and web server modes, can be configured with environment variables, and works with both GitHub.com and GitHub Enterprise instances. It's particularly useful for AI agents that need to perform GitHub operations like creating issues, searching repositories, or managing pull requests without requiring users to write complex API interaction code."
stephenvertex,synth-scheduler-mcp,0,,"SynthCal MCP provides a bridge between AI assistants and a calendar system backed by Supabase, enabling event management through natural language. The server exposes tools for creating, updating, deleting, and listing calendar events, with each operation making appropriate API calls to Supabase Functions endpoints. Built with FastMCP, it handles authentication via environment variables and formats event data with proper validation, making it valuable for users who want to manage their schedule directly through AI assistants without switching contexts."
stevenstavrakis,obsidian-mcp,216,17862,"This Obsidian MCP server, developed by Steven Stavrakis, enables AI assistants to interact with Obsidian vaults, providing tools for reading, creating, editing, and managing notes and tags. It integrates with the Model Context Protocol SDK and uses TypeScript for type safety and modularity. The implementation includes features like note creation, content searching, and tag management, making it suitable for users who want to incorporate AI assistance into their knowledge management workflow. It's particularly useful for automating note-taking tasks, organizing information, and enhancing productivity within Obsidian vaults."
stevenyu113228,bloodhound-mcp,145,,"BloodHound MCP enables Large Language Models to interact with Active Directory and Azure Active Directory environments through natural language queries. By connecting to a Neo4j database containing BloodHound data, this implementation allows users to perform complex security analysis without writing Cypher queries manually. The server leverages the MCP protocol to translate conversational commands into database operations, making it particularly valuable for security professionals who need to quickly identify attack paths, permission issues, or vulnerabilities in their directory services through intuitive language-based interactions."
stijn-meijers,dracor-mcp,2,,"DraCor MCP Server provides a bridge to the Drama Corpora Project API, enabling Claude to analyze dramatic texts and character networks across different languages and periods. Built with Python using the FastMCP decorator-based approach, it offers resources for retrieving play information, character networks, metrics, and full text analysis in both plain text and TEI XML formats. The implementation includes tools for searching plays, comparing dramatic works, analyzing character relationships, and extracting themes from play texts, making it valuable for literary analysis, comparative drama studies, and historical context research without leaving the conversation interface."
stinkgen,trino_mcp,5,,"This MCP server implementation provides a bridge between large language models (LLMs) and Trino databases. Developed by the Trino MCP Team, it offers a FastAPI-based REST interface for executing SQL queries against Trino via the Model Context Protocol. The server supports features like query explanation, custom catalogs and schemas, and formatted result output. It's designed for use cases requiring AI assistants to interact with Trino-managed data, such as natural language querying of data warehouses or AI-driven data analysis."
stippi,code-assistant,28,,"Code Assistant is a Rust-based MCP server that enables AI assistants to explore, understand, and modify codebases through a rich set of tools. Built by stippi, it provides autonomous code exploration, file reading/writing capabilities, working memory management, and file summarization features. The implementation supports multiple LLM providers (Anthropic, OpenAI, Ollama, Vertex) and can run either as an interactive agent or as an MCP server that integrates seamlessly with Claude Desktop. It's particularly valuable for developers who need AI assistance with code analysis, refactoring, or understanding unfamiliar codebases without leaving their conversation interface."
alti3,stk-mcp,2,,"STK-MCP provides a bridge between Large Language Models and Ansys/AGI STK (Systems Tool Kit), enabling programmatic control of digital mission engineering simulations through natural language. Built with Python and FastMCP, this server manages STK Desktop's lifecycle and exposes tools for creating scenarios, configuring satellites with orbital parameters, and running propagations. The implementation handles STK automation via COM interfaces on Windows, making it particularly valuable for space mission planning, satellite configuration, and orbit analysis tasks where users need to interact with complex simulation software through simplified commands."
stonega,element-mcp,2,,"Element MCP is a Chrome extension that enables developers and designers to interactively select and store DOM elements from web pages, capturing their HTML structure, computed styles, and screenshots. The extension provides a seamless selection workflow with visual highlighting, context menu navigation between parent/child elements, and automatic storage of element metadata to a local SQLite database, making it useful for web design analysis, debugging, and UI research."
stopwarbywar,beeper-mcp-server,0,,"Beeper MCP server provides a blockchain interaction interface for Claude, enabling users to deploy tokens, execute trades, and manage assets on the Binance Smart Chain (BSC). Built by stopWarByWar, it leverages Web3.py to connect with BSC's mainnet and testnet, supporting operations like token deployment with customizable parameters, trading between tokens and native currency, and asset transfers. The implementation includes comprehensive contract interactions with PancakeSwap V3 for liquidity operations and is particularly valuable for cryptocurrency workflows where users need to perform blockchain transactions directly within conversations."
storacha,mcp-storage-server,5,,"Storacha MCP Storage Server provides a standardized interface for AI applications to interact with decentralized storage through the Model Context Protocol. It enables secure file uploads to Storacha's network using UCAN authentication and retrieval via content-addressed identifiers (CIDs). The server supports both stdio and Server-Sent Events (SSE) transport modes, making it suitable for both local development and remote integrations. Built with TypeScript and leveraging the w3up-client, it offers AI systems persistent, verifiable storage capabilities ideal for document management, dataset sharing between agents, and long-term structured data storage."
piplabs,story-mcp-hub,11,,"This MCP server provides tools for interacting with Story Protocol's Python SDK, enabling operations like minting and registering IP assets, managing license terms, and handling token transfers. It integrates with Pinata for IPFS uploads and offers functionality for creating IP metadata. The server is designed to facilitate blockchain-based intellectual property management and licensing workflows."
strangelove-ventures,web3-mcp,69,,"This MCP server, developed by Alex Cheng, provides a unified interface for interacting with multiple blockchains, including Solana and Ethereum. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for common blockchain operations such as checking balances, transferring tokens, and retrieving account information. The implementation focuses on simplifying blockchain interactions through standardized RPC endpoints, making it particularly useful for AI assistants and applications that require cross-chain functionality without deep blockchain expertise. By connecting to Solana's mainnet and supporting Ethereum operations, this server enables use cases ranging from basic account queries to more complex token transfers across different blockchain ecosystems."
kalivaraprasad-gonapa,azure-mcp,9,,"This MCP server implementation provides a bridge to Azure services, enabling AI assistants to interact with Azure resources through a standardized protocol. Developed by Streen9, it offers tools for managing Azure compute, network, and subscription resources. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on secure credential management and supports multiple Azure tenants. It is particularly useful for applications requiring cloud resource management, such as provisioning virtual machines, configuring networks, or monitoring Azure subscriptions. The implementation leverages Azure SDK libraries and provides a flexible interface for executing custom Azure-related code."
kalivaraprasad-gonapa,react-mcp,9,,"This MCP server implementation enables Claude AI to interact with React applications, providing tools for creating and managing React projects, executing terminal commands, and handling file operations. Developed by @streen9, it leverages the Model Context Protocol SDK and integrates with npm for package management. The server is particularly useful for AI-assisted React development workflows, offering features like running development servers, installing dependencies, and real-time process monitoring."
kalivaraprasad-gonapa,terminal-mcp,0,,"This MCP server implementation provides a secure interface for AI assistants to interact with the user's terminal or PowerShell environment. It offers tools for executing commands, managing long-running processes, and retrieving process outputs, all while maintaining robust logging and error handling. Developed with a focus on security and transparency, it includes features like directory validation, process tracking, and comprehensive logging of all actions. The server is designed for use cases requiring AI-driven system administration, development tasks, or any scenario where programmatic access to the command line is needed, with built-in safeguards to prevent misuse."
strickvl,mcp-beeminder,5,,"This MCP server implementation provides a bridge to the Beeminder API, enabling AI assistants to interact with Beeminder goals and data. Developed by strickvl, it offers a tool for retrieving detailed information about specific Beeminder goals, including optional datapoint retrieval. The server is built using Python and integrates with the FastMCP framework and Beeminder client library. It focuses on secure API key management and robust error handling. This implementation is particularly useful for AI applications that need to monitor or analyze personal productivity goals, track progress, or integrate Beeminder data into broader productivity workflows."
stripe,agent-toolkit,649,400226,"This MCP server implementation provides a bridge to Stripe's API, enabling AI agents to perform various payment and financial operations. Developed by Stripe, it offers tools for managing customers, products, prices, payment links, invoices, and refunds. The server is built using both Python and TypeScript, integrating with popular agent frameworks like LangChain, CrewAI, and Vercel's AI SDK. It focuses on secure API key management and supports connected accounts. The implementation is particularly useful for AI applications that need to automate e-commerce tasks, handle billing operations, or integrate payment processing into their workflows."
strowk,mcp-k8s-go,244,8463,"This Kubernetes MCP implementation, developed by strowk, provides a versatile interface for language models to interact with Kubernetes clusters. It enables AI agents to perform essential Kubernetes operations such as listing contexts, pods, and events, as well as retrieving pod logs across different namespaces and contexts. The implementation distinguishes itself by offering a dual-purpose design - functioning both as an MCP server and a library for building custom Kubernetes resource servers. By leveraging kubeconfig configurations, it ensures seamless integration with existing Kubernetes setups. This tool is particularly powerful for AI-driven Kubernetes management, debugging, and monitoring tasks, enabling more sophisticated AI assistants that can directly interact with and analyze Kubernetes environments. Its integration with Claude Desktop and straightforward installation process make it easily accessible for developers and DevOps professionals working on advanced AI projects involving Kubernetes automation and management."
tejpalvirk,student,0,,"The Student MCP Server provides tools for managing student knowledge graphs, enabling structured representation of academic entities like courses, assignments, exams, and concepts. Developed by Tejpal Virk, it offers six specialized tools: startsession for initializing study sessions, loadcontext for retrieving entity details, endsession for documenting progress through a multi-stage workflow, buildcontext for creating new entities and relationships, deletecontext for removing elements, and advancedcontext for complex queries. The implementation uses a graph-based data structure stored in JSON format, making it particularly valuable for students tracking academic progress, managing deadlines, and organizing educational resources across multiple study sessions."
studentofjs,mcp-figma-to-react,6,,"MCP Figma to React Converter is a server that transforms Figma designs into React components with TypeScript and Tailwind CSS. It provides tools for fetching Figma designs via the API, extracting components, generating React code with accessibility enhancements, and applying appropriate Tailwind classes based on Figma styles. The server supports both stdio and SSE transports, making it versatile for integration into various development workflows where designers and developers need to bridge the gap between design assets and production-ready React components."
studentofjs,mcp-frontend-testing,2,,"An MCP server for frontend testing that enables AI assistants to analyze JavaScript/TypeScript code, generate tests for Jest and Cypress frameworks, and execute those tests in isolated environments. It provides tools for code analysis, test generation, test execution, and React component testing, along with resources for testing templates and documentation. The implementation creates temporary test environments with proper configurations, installs dependencies, runs tests, and returns results - making it valuable for developers who want to automate frontend testing workflows directly through AI interactions."
stumason,coolify-mcp,3,2379,"Coolify MCP Server enables AI assistants to interact with Coolify instances through natural language, providing tools to manage servers, projects, environments, applications, services, and databases. Developed by Stuart Mason, this implementation connects to the Coolify API using access tokens, allowing users to perform operations like listing servers, creating projects, deploying applications, and managing databases directly within AI assistant conversations. The server supports various service types including WordPress, PostgreSQL, Redis, and many others, making it valuable for DevOps workflows and infrastructure management tasks without leaving the conversation interface."
stuzero,pg-mcp,8,,"PG-MCP is a PostgreSQL Model Context Protocol server that enables AI agents to discover, connect to, query, and understand PostgreSQL databases through a resource-oriented architecture. It extends the reference Postgres MCP implementation with multi-database support, rich catalog information extraction, extension context for PostGIS and pgVector, query execution plan analysis, and robust connection management. The server exposes database schema resources, data access capabilities, and specialized tools for executing read-only SQL queries, all while maintaining security through connection ID abstraction and read-only transaction enforcement. Built with Python 3.13 and asyncpg, it's particularly valuable for developers and data analysts who need AI assistants to interact with PostgreSQL databases without exposing sensitive connection details."
suchetaslalom-sf,mcp-key-server,0,,"MCP Key Server provides secure API key storage and NPM package management for developers. Built with FastAPI and PostgreSQL, it offers user authentication, key management with metadata support, and NPM package installation capabilities. The server features role-based access control, allowing regular users to manage their own keys while administrators can oversee all resources. With Docker containerization and AWS deployment support, it serves as a centralized solution for teams needing to securely store service credentials while maintaining NPM package dependencies."
suekou,mcp-notion-server,590,,"This Notion MCP server, developed by suekou, enables AI assistants to interact with Notion workspaces through the Notion API. It provides tools for manipulating blocks, pages, and databases, including creating, retrieving, updating, and deleting content. Built in JavaScript, the implementation exposes Notion's powerful organizational features via a standardized MCP interface. By bridging AI models with Notion's collaborative workspace, this server enhances Claude's ability to manage information, assist with project organization, and augment knowledge management within Notion. It is particularly useful for users seeking AI-powered productivity enhancements, content creation, and data analysis within their existing Notion workspaces."
sugatraj,cursor-browser-tools-mcp,0,,"Browser Tools MCP is a server implementation that provides AI assistants with browser debugging and analysis capabilities through Chrome DevTools integration. Developed by Sugatraj, it consists of a Chrome extension, browser connector server, and MCP server that work together to expose console logs, network requests, screenshots, DOM elements, and Lighthouse audits (accessibility, performance, SEO, best practices) to AI models. The implementation features smart resource limiting for optimal AI consumption, cross-platform browser detection, and a comprehensive audit system that categorizes issues by impact severity, making it particularly valuable for AI-assisted web development and debugging without leaving the assistant interface."
suhail-ak-s,mcp-typesense-server,6,,"This MCP server implementation provides a bridge between Claude Desktop and Typesense search engine instances. It allows Claude to access and search through Typesense collections, listing them as resources. The server supports connecting to local or remote Typesense instances, includes strict error handling, and detailed logging for troubleshooting. It's designed for use cases requiring integration of AI assistants with Typesense-powered search functionality."
suixinlei,tongyi-wanx-mcp-server,2,,"Tongyi Wanx MCP Server is a TypeScript implementation that provides AI assistants with access to Alibaba's Tongyi Wanx image generation API. The server leverages the Model Context Protocol SDK to create a standardized interface for image generation requests, handling authentication, API communication, and response formatting. It's particularly useful for applications requiring AI image generation capabilities through the Tongyi Wanx service without directly managing the underlying API integration details."
sujianqingfeng,mcp-apifox,0,414,"MCP-Apifox is a server implementation that provides AI assistants with access to Apifox API documentation through the Model Context Protocol. It offers tools to extract project and API IDs from Apifox URLs and fetch detailed API information using authentication tokens. The server runs on stdio transport, making it compatible with Claude Desktop integration, and requires an Apifox access token provided either through environment variables or command-line arguments. This implementation is particularly valuable for developers who need to reference or analyze API documentation within their AI assistant conversations without switching contexts."
sujianqingfeng,mcp-upload-file,0,,"This MCP server implementation provides a bridge for uploading files using the Model Context Protocol SDK. Developed by hens, it offers functionality for handling file uploads within AI-assisted workflows. The server is built using TypeScript and integrates with popular development tools like Biome for code formatting and linting. It focuses on efficient file handling and is designed to be easily integrated into existing MCP-based systems. The implementation is particularly useful for AI applications that need to manage file uploads as part of their operations, offering a streamlined approach to file handling within the MCP ecosystem."
HEAD,mcp,2,,"A TypeScript implementation of the Model Context Protocol (MCP) for the SumUp Agent Toolkit, enabling integration with external services and data sources."
sunfmin,mcp-go-debugger,1,,"MCP Go Debugger provides a bridge between AI assistants and the Delve debugger for Go applications, enabling runtime debugging capabilities through a standardized interface. Built by Felix Sun, it leverages the mark3labs/mcp-go framework to expose essential debugging functions including setting breakpoints, stepping through code, inspecting variables, and examining stack traces. The implementation embeds Delve directly as a library dependency, allowing for seamless program launch, attachment to running processes, and direct source file debugging - making it particularly valuable for AI-assisted debugging sessions where developers need to diagnose issues in Go applications without switching contexts."
sunsetcoder,flightradar24-mcp-server,21,,"This MCP server, developed by sunsetcoder, provides real-time flight tracking capabilities using Flightradar24 data. It integrates with Claude Desktop to enable AI assistants to access up-to-date flight information, including ETAs, airport statuses, and emergency alerts. The implementation stands out by offering a simple setup process and a wide range of flight-related queries. By connecting AI capabilities with live aviation data, this server empowers AI systems to handle complex flight tracking scenarios. It is particularly useful for applications in travel planning, airport operations, aviation enthusiast tools, or any AI assistant that needs to work with real-time flight information."
sunwood-ai-labs,aira-mcp-server,1,,"This MCP server, developed by the Aira team, enables AI assistants to interact with Git repositories and implement Gitflow workflows through a standardized interface. It provides tools for managing Git operations such as creating commits, initializing Gitflow, creating and merging branches, and retrieving repository status. The server integrates with simple-git for Git operations and implements custom Gitflow logic, offering a simplified workflow for AI systems to manage version control tasks. By connecting AI capabilities with Git and Gitflow practices, this implementation empowers AI assistants to perform complex version control operations, automate code management, and maintain consistent branching strategies. It is particularly useful for applications requiring automated code versioning, collaborative development workflows, or any scenario where an AI system needs to interact with and reason about Git repositories."
sunwood-ai-labs,command-executor-mcp-server,18,,"This command executor MCP server, developed by an unknown author, enables AI assistants to execute pre-approved commands on a host system. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a secure interface for running system commands within defined constraints. The server implements a binary executable that can be easily integrated into existing workflows. By abstracting the complexities of command execution and security considerations, it allows AI systems to perform authorized actions on the host environment. This implementation is particularly useful for automation tasks, system management, and scenarios where controlled access to system resources is required, facilitating use cases such as automated deployments, system health checks, and managed file operations."
sunwood-ai-labs,source-sage-mcp-server,2,189,"This directory structure visualization MCP server, developed by Sunwood AI Labs, provides tools for generating and analyzing project file hierarchies. It integrates with the glob and ignore libraries to offer flexible file matching and exclusion capabilities. The server exposes functions for building directory trees, generating structure representations, and handling tool requests. By connecting AI capabilities with project structure analysis, this implementation enables assistants to understand codebases, generate documentation, and reason about file organization. It is particularly useful for applications requiring project overview generation, dependency analysis, or any scenario where an AI system needs to comprehend and work with directory structures programmatically."
sunwood-ai-labs,documind-mcp-server,0,,"This MCP server for evaluating README structure, developed by an unnamed author, integrates with the Model Context Protocol to provide AI assistants with tools for analyzing and improving documentation. Built with TypeScript and leveraging libraries like Cheerio and Marked, it offers capabilities for parsing Markdown, extracting key sections, and assessing overall document structure. The server abstracts the complexities of README analysis, allowing AI systems to easily incorporate documentation evaluation into their workflows. It's particularly useful for developers, technical writers, and AI assistants focused on improving software documentation, enabling use cases like automated README quality checks, content organization suggestions, and standardization of project documentation across repositories."
sunwood-ai-labs,github-kanban-mcp-server,4,561,"This GitHub Kanban MCP server, developed by Sunwood AI Labs, integrates GitHub issues management with a Kanban-style workflow. It leverages the GitHub API to provide AI assistants with capabilities for creating, updating, and organizing issues across project boards. The server abstracts the complexities of GitHub's REST API, offering a streamlined interface for issue tracking and project management tasks. By connecting AI systems with GitHub's collaborative features, this implementation enables assistants to automate project workflows, prioritize tasks, and maintain an organized development process. It is particularly useful for software development teams looking to enhance their project management with AI-driven insights and automation."
sunwood-ai-labs,gitlab-kanban-mcp-server,1,,"This GitLab Kanban MCP server, developed by an unnamed creator, integrates GitLab issue management with a Kanban-style workflow. It leverages the GitLab API to provide AI assistants with capabilities for managing issues and project boards. The server abstracts GitLab's API complexities, offering a streamlined interface for issue tracking and project management tasks. By connecting AI systems with GitLab's collaborative features, this implementation enables assistants to automate project workflows, prioritize tasks, and maintain an organized development process. It is particularly useful for software development teams looking to enhance their GitLab-based project management with AI-driven insights and automation."
sunwood-ai-labs,ideagram-mcp-server,3,,"This MCP server for Ideogram API, developed by an unnamed author, provides a standardized interface for interacting with Ideogram's image generation capabilities. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a streamlined approach to creating and manipulating visual representations. The server implements error handling and environment configuration, ensuring robust operation. By abstracting the complexities of Ideogram's API, it enables AI systems to easily generate and modify images based on textual descriptions or parameters. This implementation is particularly valuable for applications requiring programmatic image creation, facilitating use cases such as data visualization, concept illustration, and dynamic content generation for various platforms."
sunwood-ai-labs,release-notes-generator-iris-mcp-server,0,,"This MCP server for Iris, developed using TypeScript and the Model Context Protocol SDK, provides AI assistants with Git-based project management capabilities. It leverages simple-git for version control operations and fs-extra for enhanced file system functionality. The server abstracts Git complexities, allowing AI systems to manage repositories, track changes, and perform code analysis. Built with a focus on TypeScript projects, it offers streamlined build processes and configuration management. This implementation is particularly valuable for AI-assisted software development, enabling use cases such as automated code reviews, version tracking, and project structure analysis within Git-managed environments."
sunwood-ai-labs,luma-mcp-server,2,,"This Luma AI MCP server, developed by Sunwood AI Labs, enables AI-driven video generation through Luma's API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a standardized interface for creating and manipulating AI-generated videos. The server implements error handling, request formatting, and response parsing to abstract away the complexities of Luma's API. By providing a consistent interface for video generation tasks, it allows AI systems to easily produce dynamic video content based on textual descriptions or parameters. This implementation is particularly valuable for applications requiring programmatic video creation, facilitating use cases such as personalized video content, automated video editing, and AI-driven visual storytelling."
sunwood-ai-labs,obsidian-mcp,10,,"This Obsidian MCP server, developed as an open-source project, enables AI assistants to interact with Obsidian vaults and notes. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides tools for querying, creating, and modifying Obsidian notes through a standardized interface. The implementation abstracts the complexities of Obsidian's file system and markdown parsing, allowing AI systems to seamlessly integrate with personal knowledge management workflows. This server is particularly useful for scenarios involving note-taking, knowledge organization, and content creation within Obsidian vaults, facilitating use cases such as automated note linking, content summarization, or intelligent task management."
sunwood-ai-labs,mcp-weather-service-server,5,,"This weather service MCP server, developed for integrating weather data into AI assistants, provides a streamlined interface for accessing real-time weather information. It utilizes the httpx library for efficient HTTP requests and integrates with external weather APIs to fetch current conditions, forecasts, and other meteorological data. The server's modular structure, defined in the pyproject.toml, allows for easy deployment and scalability. By connecting AI capabilities with weather data, this implementation enables assistants to provide location-specific weather updates, plan outdoor activities, or analyze climate patterns. It is particularly useful for applications requiring up-to-date weather information, travel planning, or any scenario where an AI system needs to reason about and respond to current and forecasted weather conditions."
supabase-community,supabase-mcp,1155,89884,"Supabase MCP Server connects AI assistants directly to Supabase projects, enabling database operations, project management, and configuration through natural language. The implementation provides tools for managing tables, executing SQL queries, applying migrations, and handling project configurations like API keys and TypeScript type generation. It also includes experimental features for database branching that allow creating development environments, merging changes, and managing migrations across branches. Built with TypeScript using the Model Context Protocol SDK, the server authenticates with Supabase's Management API using personal access tokens and is designed for developers who want to integrate database operations into their AI assistant workflows."
gevans3000,supabase-mcp,1,,"A Supabase MCP server that enables AI assistants to perform database operations through a standardized interface. Built with FastMCP and the Supabase Python client, it provides tools for reading, creating, updating, and deleting records with support for filtering, pagination, and sorting. The implementation handles authentication via service role keys and includes comprehensive error handling, making it ideal for AI-powered applications that need to interact with Supabase databases without requiring direct database access credentials in the client application."
packages,mcp-server-postgrest,1155,14029,"This MCP server collection, developed by Supabase, provides tools for connecting Large Language Models to Supabase databases and services. Built with TypeScript and leveraging the Model Context Protocol SDK, it currently offers a PostgREST server for querying Supabase projects via natural language, with plans to add a Management API for schema and DDL operations. The implementation stands out by enabling direct LLM interaction with Supabase's PostgreSQL databases through a standardized protocol. It's particularly useful for developers looking to integrate AI-powered database querying and management into their applications, allowing for natural language data exploration and manipulation in Supabase projects."
supercurses,powerpoint,74,,"The server implements multiple tools:

create-presentation: Starts a presentation
Takes ""name"" as required string arguments
Creates a presentation object
add-slide-title-only: Adds a title slide to the presentation
Takes ""presentation_name"" and ""title"" as required string arguments
Creates a title slide with ""title"" and adds it to presentation
add-slide-title-content: Adds a title with content slide to the presentation
Takes ""presentation_name"", ""title"", ""content"" as required string arguments
Creates a title with content slide with ""title"" and ""content"" and adds it to presentation
add-slide-title-with-table: Adds a title slide with a table
Takes ""presentation_name"", ""title"", ""data"" as required string and array arguments
Creates a title slide with ""title"" and adds a table dynamically built from data
add-slide-title-with-chart: Adds a title slide with a chart
Takes ""presentation_name"", ""title"", ""data"" as required string and object arguments
Creates a title slide with ""title"" and adds a chart dynamically built from data. Attempts to figure out the best type of chart from the data source.
add-slide-picture-with-caption: Adds a picture with caption slide
Takes ""presentation_name"", ""title"", ""caption"", ""image_path"" as required string arguments
Creates a picture with caption slide using the supplied ""title"", ""caption"", and ""image_path"". Can either use images created via the ""generate-and-save-image"" tool or use an ""image_path"" supplied by the user (image must exist in folder_path)
open-presentation: Opens a presentation for editing
Takes ""presentation_name"" as required arguments
Opens the given presentation and automatically saves a backup of it as ""backup.pptx""
This tool allows the client to work with existing pptx files and add slides to them. Just make sure the client calls ""save-presentation"" tool at the end.
save-presentation: Saves the presentation to a file.
Takes ""presentation_name"" as required arguments.
Saves the presentation to the folder_path. The client must call this tool to finalize the process.
generate-and-save-image: Generates an image for the presentation using a FLUX model
Takes ""prompt"" and ""file_name"" as required string arguments
Creates an image using the free FLUX model on TogetherAI (requires an API key)"
superfaceai,mcp,4,178,"Superface MCP Server provides a bridge between AI assistants and Superface's API tools ecosystem. This TypeScript implementation handles user authentication, tool discovery, and execution through a stdio-based transport layer, storing user identifiers locally for persistent sessions. The server exposes Superface's function catalog as MCP tools, transforming tool responses into a standardized format compatible with AI assistants. Particularly useful for extending AI capabilities with external API integrations while maintaining a clean separation between the assistant and third-party services."
cteaminfo,mcp-superiorapis,0,15120,"SuperiorAPIs MCP Server provides a bridge between AI assistants and external APIs, built on top of the fastmcp framework. It leverages aiohttp for asynchronous HTTP requests and Pydantic for data validation, enabling structured communication with third-party services. The server exposes a set of tools that can be called programmatically, making it valuable for workflows that require integration with external data sources or services without leaving the conversation interface."
cfdude,super-shell-mcp,1,1261,"Super Shell MCP Server enables secure execution of shell commands across Windows, macOS, and Linux platforms with automatic platform detection and shell selection. Built with TypeScript using the Model Context Protocol SDK, it implements a robust security model with command whitelisting at three levels (safe, requires approval, forbidden) and provides tools for command execution, whitelist management, and platform information retrieval. The server is designed for integration with AI assistants through Roo Code and Claude Desktop, making it valuable for workflows requiring controlled access to the local system's shell capabilities while maintaining security through explicit approval mechanisms."
supertypeai,sectors-mcp,0,,"Sectors MCP Server provides AI assistants with access to financial sector data through the Sectors API. It exposes tools for retrieving subsectors, industries, subindustries, index data, and companies by subsector, enabling structured exploration of market classification hierarchies. The implementation uses TypeScript with the Model Context Protocol SDK and runs on stdio transport, making it compatible with Claude Desktop integration. Particularly valuable for financial analysis, market research, and understanding industry relationships without leaving the conversation interface."
suqidan,volcengine_knowledgebase_mcp,0,,"A Model Context Protocol server that provides AI assistants with access to Volcengine's knowledge base API. The implementation enables searching knowledge bases and generating chat completions using Volcengine's services. It handles authentication via Volcengine credentials, manages configuration persistence, and exposes tools for querying knowledge bases with customizable search parameters. Built for integration with Claude Desktop, this server bridges AI assistants to enterprise knowledge repositories, making it valuable for retrieving and leveraging organizational information within conversations."
surajadsul,mcp-server-salesforce,5,536,"This MCP server implementation integrates Claude with Salesforce, enabling natural language interactions with Salesforce data and metadata. Developed by surajadsul02, it provides capabilities for object and field management, smart object search, detailed schema information, flexible data queries, and data manipulation across Salesforce objects. The server supports both username/password and OAuth2 authentication methods, making it versatile for various Salesforce integration scenarios."
surferdot,mcp-svg-converter,1,989,"MCP SVG Converter is a server that enables AI assistants to convert SVG files to PNG and JPG formats with customizable parameters like scale factor, quality, and background color. Built with TypeScript and using the Sharp library for high-quality image processing, it integrates seamlessly with Claude Desktop through a simple configuration file, allowing users to convert vector graphics directly within their conversations without switching applications. The server implements secure file handling with configurable output directories, making it particularly useful for designers and developers who need to quickly transform SVG code into raster images for documentation, presentations, or web content."
surya-madhav,mcp,0,,"This MCP Web Tools Server provides tools for web-related operations, allowing LLMs to interact with web content through standardized interfaces. It features a web scraping tool that converts URLs to r.jina.ai prefixed format and returns content as markdown, plus a DuckDuckGo search tool for retrieving web search results. The server supports both stdio and SSE transport mechanisms, includes convenient run scripts for both the server and a Streamlit UI for testing, and is designed for easy integration with Claude for Desktop."
sussa3007,mysql-mcp,3,,"The MySQL MCP Server provides a bridge between AI models and MySQL databases, allowing AI agents to query and analyze MySQL data. This implementation follows the Model Context Protocol specification and offers both web server and CLI modes of operation."
suthio,brave-deep-research-mcp,1,404,"Brave Deep Research MCP Server combines the Brave Search API with Puppeteer-powered web scraping to provide AI assistants with comprehensive research capabilities. Unlike standard search tools that only return snippets, this implementation visits web pages to extract full content and can traverse links at configurable depths (up to 3 levels). Developed by suthio, it intelligently identifies and extracts main content from pages while filtering out navigation elements, ads, and footers. The server exposes a single deep-search tool that accepts query parameters for search terms, result count, and exploration depth, making it particularly valuable for in-depth research requiring detailed information beyond what search snippets provide."
suthio,redash-mcp,15,5055,"Redash MCP Server provides integration between Redash data visualization platform and AI assistants like Claude. Built with TypeScript and the Model Context Protocol SDK, it enables querying and managing Redash resources through natural language. The server offers tools for listing and executing queries, creating and modifying dashboards, and managing data sources. It requires a Redash instance URL and API key for authentication, making it ideal for users who want to analyze data, create visualizations, or monitor metrics directly through AI assistant conversations."
suvarchal,docker-mcp,3,,"The Docker MCP Server enables AI assistants like Claude to interact with Docker through a standardized interface. Built with TypeScript using the Model Context Protocol SDK, it provides tools for essential Docker operations including listing containers and images, running and stopping containers, removing containers, and pulling images from registries. The server communicates via stdin/stdout following the MCP protocol, and includes an installation script that automatically configures Claude Desktop and VSCode environments. While it supports standard Docker CLI commands, it currently does not handle Docker Compose operations, making it ideal for users who need straightforward Docker functionality in their AI assistant workflows."
sv,mcp-paradex-py,3,,"This MCP server provides a bridge between AI assistants and the Paradex perpetual futures trading platform, enabling market data retrieval, account management, order placement, and position monitoring. Built with Python and the FastMCP framework, it offers both read-only resources for market information and action tools for trading operations, with support for both testnet and mainnet environments. The implementation includes Smithery.ai integration for easy deployment with Claude Desktop and can be run via Docker for simplified setup, making it ideal for AI-assisted cryptocurrency trading workflows."
tuskermanshu,swagger-mcp-server,6,,"Swagger MCP Server provides tools for generating API clients and TypeScript types from Swagger/OpenAPI specifications. It includes optimized parsers for handling large API definitions, template-based code generation for different client types (Axios, Fetch, React Query), and a modular architecture that allows for custom template extensions. The server is designed to streamline API integration workflows by automatically generating strongly-typed client code, reducing manual coding effort and ensuring type safety when working with REST APIs."
swairshah,zotero-mcp-server,6,,"The Zotero MCP Server enables programmatic access to local Zotero repositories through the Model Context Protocol. It allows MCP clients like the Anthropic Claude App to search papers, manage notes, and interact with Zotero libraries. The server supports features such as searching papers by tags, retrieving paper details and notes, adding notes to papers, and requesting paper summaries. It integrates with the Zotero API and is designed to enhance research workflows and library management tasks."
swayingleaves,uml-mcp-server,3,,"The UML MCP Server provides AI assistants with the ability to generate UML diagrams from code or text descriptions. Built in Python, it integrates with the MCP protocol to enable seamless diagram creation within conversational interfaces. The server can be configured through cursor_config.json to specify working directories and custom output locations. It's particularly useful for software development workflows where users need to visualize system architecture, class relationships, or process flows without switching to dedicated UML modeling tools."
recoupable,mcp-vercel,1,,"A Vercel-deployed MCP server designed to retrieve social media insights for artists, specifically fetching fan and post data across platforms. Built with TypeScript and the Model Context Protocol SDK, this server provides tools to aggregate and summarize social media statistics, enabling developers and analysts to easily access structured information about an artist's online presence."
mcp-wp,mcp-server,12,,"MCP Server for WordPress enables AI assistants to interact with WordPress sites through the REST API. Developed by Pascal Birchler, this PHP implementation provides tools for accessing WordPress resources including posts, users, taxonomies, media management, and community events. The server registers custom endpoints that follow the Model Context Protocol, allowing AI systems to perform CRUD operations on WordPress content through standardized JSON-RPC messages. Particularly useful for content management workflows, the implementation includes session management for maintaining state across requests and supports both single-site and multisite WordPress installations."
swonixs,weatherapi-mcp,0,1789,"WeatherAPI MCP Server provides current weather and air quality data for any city using the WeatherAPI.com service. It offers a simple tool to retrieve temperature, humidity, wind speed, and optional air quality metrics through dynamic URI support. The implementation is designed for easy integration with Windsurf IDE, requiring only an API key from WeatherAPI.com to function, making it ideal for applications that need reliable weather information without complex setup."
sworddut,mcp-ffmpeg-helper,7,171,"MCP-FFmpeg-Helper is a server implementation that provides AI assistants with access to FFmpeg's powerful video processing capabilities through a standardized interface. It exposes a suite of tools for common video operations including format conversion, audio extraction, video trimming, watermark addition, frame extraction, and detailed media information retrieval. The server uses a stdio transport layer to communicate with AI assistants, transforming complex FFmpeg commands into simple tool calls with structured inputs, making it particularly useful for applications requiring video manipulation without direct command-line access to FFmpeg."
sworddut,mcp-local-file-reader,3,,"MCP Local File Reader provides a simple server for reading local files, making them accessible to AI assistants through the Model Context Protocol. Built with TypeScript and the MCP SDK, it allows AI tools to access file content from the local filesystem, enabling workflows that require reading text files without leaving the conversation interface. The implementation is designed to be lightweight and easy to use, making it ideal for developers who need to give their AI assistants access to local file data during interactions."
HEAD,crypto_exchange_mcp_python,1,,"This MCP server implementation provides a simple interface to interact with cryptocurrency exchange APIs (Bybit, OKX, Binance), allowing users to retrieve real-time market data without dealing with complex API endpoints directly. Developed by sydowma, it offers tools for accessing last prices, order books, funding rates, open interest, and price change percentages for both spot and linear markets. The server is designed to work with Claude Desktop through a straightforward configuration process, making it particularly useful for traders and analysts who need quick access to crypto market data while conversing with AI assistants."
syedazharmbnr1,claude-chatgpt-mcp,617,,"This MCP server implementation provides a bridge between Claude and the ChatGPT desktop app on macOS. Developed by Syed Azhar, it utilizes AppleScript to interact with the ChatGPT interface, allowing Claude to send prompts, retrieve responses, and manage conversations. The tool is designed for use cases where integration between different AI assistants is needed, such as comparing outputs or leveraging ChatGPT's capabilities within Claude's workflow."
syedazharmbnr1,claude-outlook-mcp,5,,"This MCP server implementation provides a bridge to Microsoft Outlook for macOS, enabling AI assistants to interact with email, calendar, and contacts. Developed by Syed Azhar, it uses AppleScript to interface with Outlook, offering capabilities like reading and sending emails, managing calendar events, and searching contacts. The server is designed for use cases requiring programmatic access to Outlook data, such as automating email workflows, scheduling assistance, or integrating Outlook with other applications."
syedazharmbnr1,claudemcpserver,24,,"ClaudeMCPServer provides screen capture capabilities for AI assistants through the Model Context Protocol. This Python-based implementation uses PyAutoGUI to take screenshots, automatically compresses images to WebP format under 500KB through dynamic quality adjustment and resizing, and exposes both a resource endpoint for retrieving current screen content and a tool for capturing screens with optional custom save paths. The server can be configured through environment variables and includes robust error handling and logging, making it ideal for workflows where AI assistants need to analyze or reference what's currently on the user's screen."
husqvaluna,symbol-blockchain-mcp-server,0,,"The Symbol MCP Server enables AI assistants to interact with the Symbol blockchain through its REST API. This server exposes Symbol's blockchain capabilities as MCP tools, allowing for querying account information, transaction data, block details, and other blockchain operations without requiring specialized knowledge of the underlying API structure. Built with TypeScript and leveraging the Symbol SDK, it automatically generates tools from the Symbol OpenAPI specification, making it particularly valuable for use cases involving blockchain data analysis, transaction monitoring, and integration of Symbol blockchain functionality into AI-powered workflows."
synthience,mcp-titan-cognitive-memory,57,,"This Titan Memory Server implementation, developed to enhance AI model context management, provides a TensorFlow.js-based interface for efficient memory storage and retrieval. Built using the Model Context Protocol SDK and Express.js, it offers tools for storing, updating, and querying contextual information. The implementation focuses on optimizing memory operations through tensor computations, enabling AI models to maintain and utilize large amounts of contextual data effectively. It's particularly useful for long-running conversations, multi-session knowledge retention, and complex reasoning tasks that require persistent and quickly accessible memory structures."
syucream,holaspirit-mcp-server,1,1579,"This Holaspirit MCP server, developed by Ryo Okubo, provides a standardized interface for AI models to interact with Holaspirit's organizational management platform. Built with TypeScript and leveraging the Holaspirit API, it offers tools for querying circles, roles, domains, policies, tasks, metrics, and meetings within an organization. The implementation focuses on providing a clean abstraction layer over Holaspirit's data model, making it accessible for AI assistants or applications needing to analyze or manage organizational structures. It's particularly useful for tasks like organizational design, role clarity analysis, policy review, or meeting management, enabling programmatic access to Holaspirit data without requiring deep knowledge of the underlying API complexities."
syucream,lightdash-mcp-server,13,,"This lightdash-mcp-server, developed by Ryo Okubo, provides integration between Lightdash and AI systems using the Model Context Protocol. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers a standardized interface for accessing Lightdash data and analytics capabilities. The server uses environment variables for configuration and includes robust error handling. By abstracting Lightdash functionality into MCP tools, this implementation facilitates use cases such as automated reporting, data exploration, and analytics-driven decision making. It is designed for easy deployment in containerized environments, making it valuable for organizations looking to enhance their Lightdash workflows with AI-powered insights."
HEAD,idgen-mcp-server,1,,"idgen-mcp-server is a Go-based MCP server that generates various types of unique identifiers through a simple interface. Developed by syumai, it provides four distinct ID generation tools: UUID (v4), XID, ULID, and shortuuid, each with specific characteristics suitable for different identification needs. The server uses the mark3labs/mcp-go framework to expose these tools via a stdio-based transport layer, making it easy to integrate with AI assistants that need to generate unique identifiers for database entries, tracking systems, or distributed applications without implementing complex ID generation logic themselves."
syumai,opgen-mcp-server,3,,"Opgen MCP Server is a password generation implementation based on 1Password's SPG library, offering secure password creation through a standardized interface. Developed by syumai, it provides two main tools: character-based password generation with configurable length and character sets, and word-based password generation with customizable word counts, separators, and capitalization schemes. The server automatically copies generated passwords to the clipboard, making it particularly useful for applications requiring secure credential creation without manual password handling. The implementation leverages the Model Context Protocol to make sophisticated password generation capabilities easily accessible to AI assistants."
szcharlesji,crypto-mcp,1,,"Crypto MCP provides Claude AI with real-time cryptocurrency data from CoinMarketCap's API. Developed by Charles Ji, this server exposes six tools that allow AI assistants to retrieve current market listings, specific cryptocurrency quotes, ID mappings, detailed metadata, global market metrics, and exchange information. The implementation uses TypeScript and the Model Context Protocol SDK to handle API requests with proper authentication, making it valuable for users who need up-to-date cryptocurrency information for market analysis, price tracking, or research without leaving their AI assistant conversation."
szeider,mcp-dblp,2,,"This MCP server provides AI assistants with access to the DBLP computer science bibliography database. Developed by Stefan Szeider, it offers tools for searching publications, processing citations, generating BibTeX entries, and performing fuzzy matching on titles and author names. The server integrates with the DBLP API and includes features for filtering results by year and venue, as well as calculating publication statistics. It's designed for use cases requiring academic literature analysis, such as automating citation management or exploring research trends in computer science."
szeider,mcp-solver,51,,"This MCP solver, developed by Stefan Szeider, provides a server that exposes MiniZinc constraint solving capabilities to Large Language Models. It integrates MiniZinc's powerful constraint programming features with the Model Context Protocol, enabling AI models to submit and validate constraint models, set parameters, solve problems, and analyze solutions. The implementation stands out by offering asynchronous solving with timeout management, automatic library inclusion based on constraints, and progress tracking. By connecting AI capabilities with industrial-strength constraint solving, this server enables AI systems to tackle complex optimization and satisfaction problems. It is particularly useful for applications in areas like scheduling, planning, resource allocation, and combinatorial optimization where LLMs can benefit from rigorous mathematical modeling and solving."
szowesgad,mcp-server-semgrep,10,,"This MCP server implementation integrates Semgrep, a static analysis tool, into AI-assisted development workflows. Developed by Szowesgad, it provides tools for scanning codebases, managing Semgrep rules, and analyzing scan results. The server supports various programming languages and offers features like custom rule creation, result filtering, and comparison of scan outputs. It's designed for use cases requiring AI-driven code security analysis, vulnerability detection, and code quality improvement."
t1nker-1220,memories-with-lessons-mcp-server,38,,"This knowledge graph memory server enables persistent memory and error tracking for AI assistants using a local graph structure. It provides tools for creating, querying, and updating entities, relations, and observations, as well as a lesson system for capturing and retrieving solutions to encountered errors. The implementation features transactional operations, file management for scalability, and caching for improved performance. Developed by Anthropic, it's designed to enhance AI assistants' contextual understanding and problem-solving capabilities across conversations and tasks."
t3ta,memory-bank-mcp-server,7,,"Memory Bank MCP Server provides a structured document management system for AI assistants, enabling them to read and write documents in both global and branch-specific memory banks. It supports JSON documents with tagging capabilities, allowing for efficient organization and retrieval of information through a comprehensive CLI interface. The server implements a clean architecture with domain-driven design principles, separating concerns into application, domain, infrastructure, and interface layers, making it particularly valuable for projects requiring persistent context management across different development branches."
t3ta,sql-mcp-server,0,,"SQL MCP server that enables AI assistants to interact with MySQL databases through SSH tunnels. Built with TypeScript and the MCP SDK, it provides secure database access by establishing SSH connections through bastion hosts, with configurable authentication via username/password or SSH keys. Particularly valuable for organizations that need to provide AI assistants with secure access to databases in private networks while maintaining standard security practices."
taazkareem,clickup-mcp-server,70,24885,"This ClickUp MCP server, developed by Talib Kareem, integrates ClickUp task management with AI systems through the Model Context Protocol. Built with TypeScript and leveraging the MCP SDK, it provides a standardized interface for AI models to interact with ClickUp tasks, enabling automated task creation, updates, and retrieval. The implementation focuses on simplifying project management workflows and enhancing productivity by allowing AI assistants to manage tasks programmatically. It's particularly useful for teams looking to automate routine task management, generate task summaries, or incorporate AI-driven insights into their project workflows, bridging the gap between task management and AI capabilities."
taazkareem,twitter-mcp-server,3,469,"This Twitter MCP server implementation provides a robust interface to Twitter's functionality, built on top of the agent-twitter-client library. Developed by Talib Kareem, it offers a wide range of features including tweet retrieval, user profile access, search capabilities, and user interactions like liking, retweeting, and posting tweets. The server emphasizes error handling, rate limiting, and consistent response formatting, making it ideal for AI assistants and other MCP-compatible clients that require seamless Twitter integration. It's particularly suited for applications needing to analyze social media trends, manage Twitter accounts programmatically, or incorporate Twitter data into larger AI-driven workflows."
tacticlaunch,mcp-linear,44,2729,"MCP Linear is a server implementation that bridges AI assistants with the Linear project management system, enabling natural language interaction with Linear's GraphQL API. Developed by tacticlaunch, it provides tools for managing issues, projects, teams, cycles, and users through a standardized interface. The server authenticates with Linear using an API token and translates assistant requests into appropriate API calls, handling everything from creating and updating issues to managing project workflows and team assignments. Particularly valuable for teams who want to integrate project management tasks directly into their AI assistant workflows without context switching."
tadasant,mcp-server-ssh-rails-runner,7,395,"This MCP server, developed by Tadas Antanavicius, enables secure remote execution of Rails console commands via SSH. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for read-only operations, dry-run mutations, and carefully managed database changes in deployed Rails environments. The implementation focuses on offering a standardized interface for interacting with remote Rails consoles, including features like resource management for code snippets. It's particularly useful for developers and data analysts who need to perform database operations or analysis on production Rails applications, enabling efficient data wrangling and administrative tasks without navigating complex admin UIs or directly accessing production environments."
tadasant,mcp-server-stability-ai,50,2816,"This MCP server, developed by Tadas Antanavicius, integrates Stability AI's image manipulation capabilities into MCP-compatible systems. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers tools for generating, editing, and upscaling images using Stability AI's latest models. The server abstracts complex API interactions into simple MCP tools, enabling AI assistants to easily create and manipulate images. It stands out by providing a file-forward approach, saving processed images locally for easy reference. This implementation is particularly useful for applications requiring high-quality image generation and editing, such as content creation, design assistance, or visual storytelling."
taha-ghadirian,ftpmanagermcp,8,,"FtpManagerMcp is a .NET-based FTP client server that enables AI assistants to perform common file management operations on remote FTP servers. Built with C# and FluentFTP, it provides tools for listing, downloading, uploading, and deleting files and directories. The implementation handles FTP authentication through environment variables and includes comprehensive error handling for common file operations. This server is particularly useful for scenarios requiring remote file management, automated file transfers, or integration with legacy systems that use FTP protocols."
tahabakhtari,torobjomcp,11,,"TorobjoMCP is a price comparison tool that integrates with the Torob online marketplace API, allowing AI assistants to search for product prices across Iranian e-commerce platforms. The implementation includes a scraper that fetches product data including titles, prices, and URLs, and presents the top 10 results in JSON format. Additionally, it features an Instagram caption extraction tool that uses Selenium to retrieve post captions from Instagram URLs. Built with FastMCP, this server enables natural language queries for product price comparisons and social media content analysis."
taichiho,k8s-interactive-mcp,3,,"This MCP server enables running Kubernetes commands and interpreting their output through a natural language interface. It integrates with the Kubernetes client library to execute kubectl operations and provides flexible command piping. The implementation includes automatic kubectl installation checks and support for custom kubeconfig paths. Developed as an open-source project, it aims to simplify Kubernetes cluster management for both novice and experienced users. The server is particularly useful for DevOps teams looking to streamline their Kubernetes workflows or integrate AI-assisted cluster management into their existing tools."
taida957789,ida-mcp-server-plugin,111,,"IDA Pro MCP Server enables AI assistants to interact directly with IDA Pro for binary analysis tasks. This plugin provides a comprehensive set of tools for remote querying and control, allowing AI systems to examine byte data, retrieve disassembly code, access decompiled pseudocode, query function information, and perform various binary analysis operations. Running locally on port 3000, it creates a bridge between AI assistants like Claude and IDA Pro's powerful reverse engineering capabilities, making it particularly valuable for automated malware analysis, vulnerability research, and collaborative reverse engineering projects."
supavec,mcp-server,4,,"This MCP server implementation fetches relevant content from Supavec, a vector database service. Developed by Taishi, it provides a tool for retrieving embeddings and associated content, integrating seamlessly with the Supavec API. The server is designed for use cases requiring efficient retrieval of contextually relevant information, such as enhancing AI assistants with up-to-date knowledge or powering semantic search applications."
taiste,harvest-mcp-server,2,,"Harvest MCP Server provides integration with the Harvest time tracking and project management API, allowing Claude and other AI assistants to interact with your Harvest account. Built by Taiste Oy, this server enables users to manage time entries, projects, clients, and tasks directly through conversation. The implementation uses FastMCP to expose a comprehensive set of tools for listing users, creating and managing time entries, starting/stopping timers, and retrieving detailed information about projects and clients. It authenticates with the Harvest API using environment variables and is designed to work seamlessly with Claude Desktop, making it particularly valuable for professionals who need to track time and manage projects without switching contexts."
lincw,cwa-mcp-server,1,,"An MCP server that provides access to Taiwan's Central Weather Administration (CWA) API, allowing Claude to retrieve weather data and forecasts for Taiwan. The implementation uses Node.js with the MCP SDK and Axios for API requests, and can be deployed as a standalone service or using Docker. Users must provide their own CWA API key to authenticate requests to the weather service."
takiaa,twitter-scraper-mcp,0,,"This MCP server implementation provides tools for interacting with Twitter using the agent-twitter-client library. Developed by takiAA, it offers functionality to retrieve tweets by ID and post new tweets. The server is designed to run in a Docker container with proxy support, making it suitable for deployments that require network isolation or custom routing. It's particularly useful for applications that need to integrate Twitter interactions into their MCP-based workflows."
takumi0706,google-calendar-mcp,15,6637,"Google Calendar MCP Server provides a bridge between Claude Desktop and Google Calendar, enabling AI assistants to manage calendar events through the Model Context Protocol. Built with TypeScript and the Google Calendar API, it implements OAuth2 authentication and offers tools for retrieving, creating, updating, and deleting calendar events. The server stores OAuth tokens locally and includes comprehensive logging capabilities, making it ideal for users who want to integrate calendar management into their AI workflows without leaving the conversation interface."
takumiy235,uniprot-mcp-server,2,,"This UniProt MCP server, developed by TakumiY235, provides AI assistants with access to protein information from the UniProt database. It integrates with the UniProt API to retrieve data on protein function, sequence, and other attributes. The server implements caching with a 24-hour TTL to improve performance and handles rate limiting and retries. By abstracting UniProt data access, it enables AI systems to easily incorporate protein information into their workflows. This implementation is particularly useful for bioinformatics applications, protein research, and any AI system that needs to reason about or analyze protein data."
takuya0206,bigquery-mcp-server,0,,"BigQuery MCP Server provides a secure interface for LLMs to interact with Google BigQuery databases, enabling data exploration and SQL query execution. Built with TypeScript and the Bun runtime, it offers tools for executing read-only queries, listing tables, retrieving schema information, and estimating query costs. The implementation includes safeguards like query validation, configurable processing limits, and partition filter recommendations to prevent excessive costs. It supports both Application Default Credentials and service account authentication, making it ideal for data analysts and developers who need to give AI assistants access to structured data in BigQuery without compromising security."
takuya0206,obsidian-mcp,2,,"Obsidian MCP enables AI assistants to interact with Obsidian vaults through the Local REST API plugin. Built by Takuya Tokiwa, it provides tools for reading notes, listing vault contents, patching existing notes, and performing advanced searches using both DataView Query Language and JsonLogic formats. The server runs as a Node.js application that can be configured in the Claude Desktop App, making it ideal for knowledge management workflows where users want to reference, analyze, or modify their personal knowledge base without leaving the conversation interface."
takuya0206,slack_search_function_mcp,1,,"The Slack Search MCP server provides AI assistants with direct access to Slack workspace data through a set of tools and resources for retrieving users, channels, messages, and performing searches. Built with TypeScript and Bun runtime, it implements five core tools (get_users, get_channels, get_channel_messages, get_thread_replies, and search_messages) and two resource endpoints (allusers:// and allchannels://) that handle pagination automatically. The implementation features comprehensive error handling for API rate limits, network issues, and authentication failures, making it particularly valuable for AI assistants that need to reference or search through Slack conversations without requiring direct Slack API access themselves."
talhaorak,pytaiga-mcp,3,,"Taiga MCP Bridge provides a standardized interface for AI assistants to interact with Taiga project management platform, enabling programmatic control over projects, epics, user stories, tasks and issues. Built with FastMCP and Python, it features session-based authentication, rate limiting, connection pooling, and comprehensive logging while supporting both stdio and SSE transport modes. The implementation is particularly valuable for development teams who want to manage their Taiga projects and track work items directly through AI assistants without context switching."
talismanic,cleanuri-url-shortener-mcp,1,,"A URL shortening MCP server that integrates with the CleanURI API to transform long URLs into more manageable shortened links. Built using FastMCP and httpx, this lightweight implementation exposes a single tool that handles the API communication, error handling, and response parsing. The server runs on stdio transport, making it compatible with various AI assistants and automation workflows where URL shortening capabilities are needed."
tanevanwifferen,mcp-inception,19,,"This MCP server, developed by tanevanwifferen, enables nested LLM queries by allowing one MCP client to call another. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for delegating tasks and offloading context windows. The implementation focuses on task delegation and parallel execution, with features like ignoring intermediate steps and running prompts concurrently for multiple inputs. It's particularly useful for developers working on complex AI workflows or context management, enabling use cases such as distributed problem-solving, multi-agent collaboration, and efficient handling of large context windows without directly managing multiple LLM instances."
tanevanwifferen,usescraper-mcp-server,1,,"This UseScraper MCP server, developed by tanevanwifferen, provides web scraping capabilities through a simple interface. Built with TypeScript and leveraging the UseScraper API, it offers a single 'scrape' tool that can extract content from web pages in various formats including text, HTML, and markdown. The implementation stands out by offering advanced proxy options to circumvent bot detection and allowing custom data extraction. It's particularly useful for AI assistants or applications needing to gather web content programmatically, enabling tasks like data collection, content aggregation, or web monitoring while providing flexibility in output format and extraction specificity."
tanigami,mcp-server-perplexity,63,13159,"This MCP server, developed by tanigami, provides seamless integration with the Perplexity API for AI assistants. Built for use with Claude Desktop, it offers a tool for requesting chat completions with citations from Perplexity. The server bridges Claude's capabilities with Perplexity's advanced language models and real-time information retrieval, enabling more up-to-date and factual responses. Key features include citation support and easy configuration through Claude Desktop settings. By leveraging Perplexity's strengths in current events and factual queries, this implementation enhances AI capabilities for tasks requiring recent information or verified sources. It is particularly useful for scenarios like research assistance, fact-checking, or generating responses with reliable citations."
xiyuefox,mcp-server-perplexity,0,,"Perplexity MCP Server enables Claude Desktop to interact with the Perplexity API, allowing users to perform internet research with source citations directly within conversations. Developed by Hirofumi Tanigami, it provides the 'ask_perplexity' tool that sends chat completion requests to Perplexity's API and returns responses with citations. The implementation is designed to work with smaller models to avoid timeout issues in Claude Desktop, making it ideal for fact-checking, research, and gathering contextual information from the web with transparent source attribution."
tanker327,uuid-mcp,1,117,"UUID MCP Provider is a simple server that generates timestamp-based UUID v7 identifiers for LLMs. It exposes a single tool called 'generateUuid' that requires no input parameters and returns chronologically sortable, collision-resistant unique identifiers following RFC standards. Built with TypeScript and the official uuid package, it's designed for easy integration with Claude Desktop and other LLM applications where reliable unique identifier generation is needed."
HEAD,X_twee,0,,"This MCP server, developed by TannisaS, automates tweet scheduling and posting using Google Sheets integration and web automation. It provides a tool for fetching tweets from a specified Google Sheet and posting them to Twitter using Selenium. The server implements secure authentication with Google Sheets, efficient tweet retrieval, and robust error handling. By connecting AI capabilities with social media management, this implementation empowers AI assistants to manage social media content, schedule posts, or automate marketing campaigns. It is particularly useful for applications requiring automated social media management, content distribution, or any scenario where an AI system needs to interact with Twitter while maintaining a structured content pipeline through Google Sheets."
tanob,mcp-desktop-automation,1,936,"MCP Desktop Automation is a server that provides desktop automation capabilities using RobotJS and screenshot functionality, enabling AI assistants to control mouse movements, keyboard inputs, and capture screenshots. Developed by Adriano Bonat, the implementation exposes tools for screen capture, keyboard/mouse control, and screen size detection through a standardized interface that works with various MCP clients but is primarily tested with Claude Desktop. The server handles system-level permissions for screen capture and input simulation, making it valuable for users who want their AI assistant to interact directly with desktop applications without manual intervention."
tan-yong-sheng,triliumnext-mcp,1,,"TriliumNext-MCP is a server that connects AI assistants to TriliumNext Notes, enabling note management through conversation. It provides tools for creating, retrieving, updating, searching, and deleting notes via the TriliumNext API. The implementation uses TypeScript and the Model Context Protocol SDK to expose a set of tools that handle various note operations, including content retrieval, note creation with different types (text, code, image), and searching with customizable parameters. This server is particularly valuable for users who want to manage their knowledge base directly through AI assistants without switching contexts."
tapdata,mcp-tap-server,0,,"MCP TapData Server provides a bridge between AI assistants and TapData database connections, enabling inspection of database schemas and execution of CRUD operations through natural language. Developed by Leon Li, this TypeScript implementation uses the Model Context Protocol SDK to expose database connections as resources and provides tools for listing connections, exploring table schemas, and querying data. The server authenticates with TapData using access tokens, translates requests into appropriate API calls, and returns formatted results, making it valuable for users who need to interact with various database systems without leaving their AI assistant interface."
tar-ive,grants-mcp,2,,"This MCP server, developed by an unknown author, provides a tool for searching government grants using the Simpler Grants API. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers a streamlined interface for querying grant opportunities based on keywords. The server implements pagination and detailed grant information retrieval, abstracting the complexities of API communication. By providing easy access to government grant data, it enables AI assistants to efficiently find and analyze funding opportunities. This implementation is particularly useful for researchers, non-profits, and organizations seeking financial support, facilitating use cases such as identifying relevant grants, comparing funding options, and assisting in grant application processes."
signal-slot,mcp-systemd-coredump,1,1367,"This MCP server provides a bridge to systemd-coredump functionality, enabling applications to access, manage, and analyze system core dumps. It offers tools for listing available coredumps, retrieving detailed information, extracting dumps to files, and generating stack traces using GDB. The server exposes both coredump information and stack trace resources through standardized URIs, making it particularly useful for debugging applications in Linux environments where systemd is used for core dump management. The implementation includes robust parsing of coredumpctl output and handles the quirks of systemd's JSON format."
bsmi021,mcp-task-manager-server,3,104,"MCP Task Manager Server is a TypeScript-based server that provides a structured API for managing projects and tasks with dependencies. Developed by bsmi021, it uses SQLite for persistent storage and implements a comprehensive set of tools for creating projects, adding tasks, tracking task status, managing dependencies, and identifying the next actionable items based on priority and dependency completion. The server supports hierarchical task structures with parent-child relationships, task prioritization, and import/export functionality for project data. It's particularly useful for AI assistants that need to help users organize work, track progress on complex projects, or manage multi-step processes with interdependent tasks."
tatn,mcp-server-diff-python,5,4152,"This MCP server, developed by Tatsu, provides a Python-based interface for obtaining text differences between two strings. Built using Python's difflib library and the Model Context Protocol, it offers a single tool for generating unified diffs. The implementation focuses on efficient text comparison, making it straightforward for AI models to analyze changes between versions of text. It's particularly useful for version control tasks, code review assistance, or document comparison workflows that require identifying and presenting textual differences, enabling AI to perform diff operations without needing to implement the comparison logic directly."
tatn,mcp-server-fetch-typescript,2,868,"This MCP server, developed by tatn, provides web content fetching and conversion capabilities for AI assistants. Built with TypeScript and leveraging libraries like Playwright and Turndown, it offers tools for retrieving raw text, rendered HTML, Markdown, and summarized content from web pages. The implementation focuses on versatile content extraction, supporting both static and dynamic web pages. It's particularly useful for enhancing AI models with real-time web data, enabling tasks like information gathering, content summarization, or data analysis from online sources without requiring deep knowledge of web scraping techniques or DOM manipulation."
tatn,mcp-server-diff-typescript,2,1101,"This MCP server implementation, developed by tatn, provides unified diff generation capabilities between two text strings. Built using TypeScript and leveraging the diff package, it offers a tool to generate diffs with 3 lines of context around changes. The implementation focuses on accurate difference detection and a standardized output format, making it easier for AI models to analyze and compare text. It's particularly useful for version control tasks, code review assistance, or any application requiring precise text comparison, enabling AI to efficiently identify and process textual differences without needing deep knowledge of diff algorithms."
tatsuiman,docker-mcp-servers,0,,"This Docker-based MCP server implementation wraps the @suekou/mcp-notion-server package, providing a containerized environment for running a Notion integration server. It uses a slim Node.js 20 image as the base, sets up a minimal working directory, and executes the server using npx. The implementation simplifies deployment and ensures consistency across different environments for Notion-related MCP operations."
tavily-ai,tavily-mcp,265,63622,"This MCP server, developed by Tavily, provides advanced web search capabilities through the Tavily API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers real-time search and data extraction functionalities. The implementation focuses on delivering high-quality, AI-enhanced search results and web content extraction. It's particularly useful for AI assistants and applications requiring up-to-date web information, enabling use cases such as research automation, content aggregation, and fact-checking without directly interacting with the Tavily API complexities."
taweili,mcp-rss-md,0,,"The RSS to Markdown MCP server enables AI assistants to convert RSS feeds into formatted Markdown content. Built with Node.js, it exposes a single tool that fetches an RSS feed from a provided URL, parses the XML content using xml2js, and transforms it into a structured Markdown document with feed title, description, and individual items as clickable links. The implementation uses the Model Context Protocol's stdio transport for communication and includes robust error handling for invalid URLs, network issues, and malformed RSS feeds, making it ideal for content aggregation, news summarization, or blog monitoring workflows."
taxuspt,garmin_mcp,5,,"This Garmin MCP server connects to Garmin Connect and exposes fitness and health data to Claude and other MCP-compatible clients. Built by Alexandre Domingues using FastMCP and the garminconnect Python library, it provides tools for accessing recent activities, detailed activity information, and health metrics like heart rate data. The server requires Garmin Connect credentials stored in a .env file and can be integrated with Claude Desktop through a simple configuration, making it ideal for users who want to analyze their fitness data or track health metrics through natural language interactions."
taylor-lindores-reeves,mcp-github-projects,4,,"This MCP server implementation facilitates the creation and management of Agile Sprint-based projects using GitHub Projects. Developed with TypeScript and Express, it integrates with the GitHub API to provide functionalities such as project creation, task management, and sprint planning. The server includes features for authentication, rate limiting, and error handling, making it suitable for teams looking to streamline their Agile workflows within the GitHub ecosystem."
tbensonwest,loxo-mcp-server,0,,"This Loxo MCP server, developed for integrating with the Loxo recruitment platform API, enables AI assistants to perform various recruitment tasks. Built with TypeScript and utilizing the Model Context Protocol SDK, it offers tools for managing candidates, jobs, activities, and call queues. The implementation stands out by providing a comprehensive set of recruitment-specific functions, including candidate and job searches, activity logging, and call queue management. It's particularly useful for recruitment agencies and HR departments looking to automate and streamline their hiring processes, allowing for efficient candidate tracking, job matching, and task management through AI-assisted workflows."
tchbw,bart-mcp,1,,"This MCP server, developed to access BART (Bay Area Rapid Transit) departures data, provides real-time information on train schedules and station updates. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a simple interface for querying BART's API and retrieving structured departure information. The implementation stands out by focusing specifically on BART data, making it ideal for applications or AI assistants needing up-to-date public transit information for the San Francisco Bay Area. It's particularly useful for commuters, travel planners, or local businesses looking to integrate real-time BART data into their services or decision-making processes."
tchbw,mcp-imessage,2,,"This MCP implementation enables AI assistants to interact with iMessage on macOS, providing both read and send capabilities. Developed as an open-source project, it bridges the gap between large language models and Apple's messaging platform. The implementation uses TypeScript and leverages the @modelcontextprotocol/sdk for MCP compatibility, along with SQLite for message storage. It's designed for developers and researchers working on conversational AI applications, allowing them to integrate iMessage functionality into their projects. This tool opens up possibilities for automated messaging, chatbots that can operate through iMessage, and AI-assisted communication analysis on the Mac platform."
tcpipuk,mcp-server,2,,"MCP Server provides tools for AI assistants to access web content and execute Python code in a sandboxed environment. Built by Tom Foster, it implements both web and Python tools over the Model Context Protocol, supporting both stdio and Server-Sent Events (SSE) transports. The web tool can convert HTML to markdown, extract links, or retrieve raw content, while the Python tool executes code with appropriate resource limits and security constraints. The implementation is containerized with Docker, includes comprehensive testing, and is particularly valuable for AI assistants that need to verify information online or demonstrate working code examples."
tcsavage,mcp-obsidian-index,5,,"This MCP server, developed by Tom Savage, provides semantic search capabilities over an Obsidian vault and exposes recent notes as resources. Built with Python and leveraging libraries like DuckDB and sentence-transformers, it offers tools for indexing and searching notes, as well as watching for changes in the vault. The implementation stands out by using semantic search to find relevant notes and exposing them through an 'obsidian://' URL scheme. It's particularly useful for researchers, writers, and knowledge workers who want to integrate their personal knowledge base with AI assistants, enabling context-aware interactions and dynamic retrieval of relevant information from their Obsidian vaults."
tddt,stock_info_mcp,1,,"Stock Info MCP is a server implementation that provides real-time financial market data through integration with AKShare, a popular open-source financial data API for Chinese and global markets. The server architecture follows a clean separation of concerns with distinct modules for models, repositories, and services, enabling efficient retrieval and processing of stock information. This implementation is particularly useful for financial analysts, traders, and applications requiring access to comprehensive market data without direct API integration."
techkwon,mcp-gemini,2,,"MCP-Gemini provides a server implementation that integrates Google's Gemini AI model with additional context-enhancing capabilities through Google Search and YouTube APIs. Built with TypeScript and Fastify, this server exposes endpoints for text generation, chat functionality, and content analysis with external data enrichment. The implementation uses environment variables for configuration and API key management, while leveraging the Model Context Protocol SDK to standardize interactions between AI assistants and the Gemini model. Particularly useful for applications requiring AI responses augmented with real-time web search results or video content analysis."
technavii,mcp_sample,0,,"The TextSaver MCP server provides a secure way to save text content to local files through a simple interface. Built with Python using the FastMCP framework, it implements robust security measures including filename validation, path sanitization, and size limitations to prevent common vulnerabilities. The server runs locally on port 8080 and offers a single tool that saves text with either user-specified or timestamp-generated filenames, complete with comprehensive error handling and detailed logging. It's particularly useful for workflows requiring persistent storage of text data generated during AI assistant conversations without requiring complex file system access."
technavii,mcp_think,6,,"Think MCP provides deep analytical thinking capabilities through OpenAI's o3-mini model, enabling Claude to perform multi-step reasoning on complex problems. The implementation features robust error handling, rate limiting, and security measures to ensure reliable operation. It runs as a stdio transport server that integrates seamlessly with Claude Desktop, making it ideal for users who need to break down intricate concepts, explore competing hypotheses, or maintain multiple variables throughout extended reasoning chains without retrieving external information."
tecton-ai,tecton-mcp,0,,"This MCP server implementation, developed by Anthropic for Tecton, provides tools for interacting with Tecton clusters and managing feature stores. It offers capabilities such as executing Tecton CLI commands, listing workspaces and feature views, and retrieving detailed configurations. The server is built using FastMCP and integrates closely with the Tecton SDK, making it particularly useful for data scientists and engineers working with Tecton's feature management platform."
teddylee777,dify-mcp-server,1,,"Dify MCP Server provides a bridge between AI assistants and Dify.ai's workflow applications through the Model Context Protocol. Built by teddylee777, it transforms Dify workflows into MCP tools that can be dynamically discovered and called by AI assistants, handling parameter validation and response formatting. The server loads configuration from a YAML file containing Dify API keys and base URLs, then exposes each configured Dify application as a separate tool with appropriate input schemas derived from the Dify user input forms. This implementation is particularly useful for organizations that have built complex workflows in Dify and want to make them accessible to AI assistants without rebuilding the logic."
teddylee777,mcpdoc,8,,"MCPDoc is a server that provides AI assistants with access to documentation through the llms.txt protocol. It allows users to define a list of documentation sources via YAML, JSON, or direct URLs, and exposes tools to list available sources and fetch documentation content. The implementation converts HTML to Markdown for better readability and includes security features to restrict URL access to specified domains. Designed to work with MCP-compatible applications like Cursor, Windsurf, and Claude Desktop/Code, it gives users full control over which documentation sources are available to their AI assistants and enables auditing of tool calls and returned context."
teddyzxcv,ntfy-mcp,13,,"ntfy-mcp-server provides a simple notification service that allows AI assistants to send real-time alerts to users through the ntfy.sh platform. Built with TypeScript and the Model Context Protocol SDK, it exposes a single tool that sends customizable notifications with titles and summaries to a configured ntfy topic. The implementation requires minimal setup with just an environment variable for the ntfy topic, making it ideal for workflows where users need to be notified about task completions, errors, or important events without actively monitoring the conversation."
tedlikeskix,alpaca-mcp-server,7,,"This MCP server implementation integrates with the Alpaca trading API to provide a suite of tools for algorithmic trading and portfolio management. It offers functionality for account information retrieval, market data access, order placement and management, and position tracking. The server is built using the FastMCP framework and is designed for use cases such as automated trading strategies, portfolio analysis, and real-time market monitoring."
tedlikeskix,mcp-ip-geolocator,0,,"This MCP server, developed by Ted Likes Kix, provides IP geolocation services using IP-API.com. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers detailed location information for any IP address without requiring an API key. The implementation focuses on delivering clean, formatted output for AI agents like Claude, including data such as city, region, country, coordinates, timezone, ISP, and AS number. It's particularly useful for applications requiring location-based insights, enabling use cases such as user location verification, content localization, and network analysis without the need for complex API integrations or paid subscriptions."
tedlikeskix,xrpl-mcp-service,2,,"This MCP server implementation, developed for interacting with the XRP Ledger blockchain, provides a FastAPI-based interface for XRP-related operations. Built using Python and the xrpl-py library, it offers a standardized way for AI agents to interact with the XRP Ledger, enabling functionalities such as account management, transaction submission, and ledger data retrieval. The implementation focuses on simplifying XRP Ledger interactions through a well-defined API, making it particularly useful for applications requiring programmatic access to XRP blockchain data and operations. It's designed for developers and organizations looking to integrate XRP Ledger capabilities into their AI workflows, supporting use cases like automated trading, payment processing, and blockchain data analysis."
bmorphism,penrose-mcp,1,,"This Penrose MCP server, developed by Teglon Labs, provides a TypeScript-based interface for AI assistants to create mathematical diagrams using Penrose's domain-specific languages. Built with the Model Context Protocol SDK, it offers tools for defining mathematical types, describing objects and relationships, and specifying visual representation rules. The implementation focuses on bridging natural language inputs with Penrose's DSL, Substance, and Style languages, making it easier for AI models to generate accurate and visually appealing mathematical diagrams. It's particularly useful for enhancing mathematical communication in educational contexts, research papers, or technical presentations, enabling the creation of complex diagrams without requiring deep knowledge of Penrose's underlying systems."
tejedamiguel6,mcp-server-contenful,0,,"Contentful MCP Server enables Claude to directly interact with Contentful CMS data by providing tools to fetch content types and entries. Built with TypeScript and the MCP SDK, it allows retrieval of structured content from a Contentful space, supporting use cases like content exploration, metadata analysis, and dynamic content querying through a standardized AI-friendly interface."
tejpalvirk,contextmanager,4,,"A multi-domain context management system that provides specialized knowledge graph tools for different professional and academic contexts including software development, student learning, project management, and research. Built with TypeScript and the Model Context Protocol SDK, this implementation offers domain-specific tools for starting sessions, building context, deleting entities, and performing advanced queries across distinct knowledge domains, enabling structured tracking and analysis of work and learning activities."
tejpalvirk,developer,1,,"A knowledge graph-based MCP server for managing software development context, created by Tejpal Virk. This implementation stores project entities (components, features, tasks, issues, etc.) and their relationships in a graph structure, providing tools to build, query, and manipulate this development knowledge base. It features specialized operations for tracking project status, component dependencies, milestone progress, and decision history, making it particularly valuable for maintaining contextual awareness across complex software projects and enabling AI assistants to understand the evolving state of development work."
tejpalvirk,project,2,,"A project management MCP server that maintains a structured knowledge graph of project entities and relationships, enabling users to track progress, manage tasks, monitor milestones, and assess project health. Developed by Tejpal Virk, it provides specialized tools for starting sessions, loading context, building and deleting elements, and performing advanced queries on project data. The implementation uses a persistent storage system to maintain project knowledge across sessions and offers domain-specific functions for analyzing dependencies, resource allocation, and team workloads."
tejpalvirk,qualitativeresearch,2,,"A specialized MCP server for qualitative researchers that maintains a structured knowledge graph of research entities including projects, participants, interviews, codes, themes, and findings. Developed by Tejpal Virk, it provides tools for managing research sessions, organizing analytical frameworks, tracking thematic development, and documenting methodological decisions. The server stores relationships between research elements using a graph structure with 13 entity types and 18 relation types, enabling researchers to maintain analytical continuity across sessions, develop coding frameworks, and connect findings to supporting evidence."
tejpalvirk,quantitativeresearch,4,,"A quantitative research MCP server that helps researchers organize and analyze numerical data through a structured knowledge graph. Developed by Tejpal Virk, it enables tracking of research projects, datasets, variables, hypotheses, and statistical tests with their relationships and results. The server provides specialized tools for starting research sessions, loading context about specific entities, building and modifying the knowledge graph, and retrieving complex statistical information - making it particularly valuable for researchers who need to maintain analytical continuity across multiple research sessions and document statistical evidence supporting their findings."
dryeab,mcp-telegram,12,664,"MCP-Telegram is a server implementation that provides AI assistants with access to Telegram's messaging platform. Developed by Yeabsira Driba, this Python-based server uses the Telethon library to interact with Telegram's API, enabling capabilities such as sending/editing messages, downloading media, searching conversations, and managing drafts. The server exposes multiple tools that handle various Telegram operations while abstracting away the complexities of authentication and session management, making it particularly valuable for users who want to leverage AI assistants to monitor and interact with their Telegram conversations without switching contexts."
kfastov,telegram-mcp-server,12,,"This Telegram MCP server enables AI assistants to access and interact with Telegram channels and messages through a standardized interface. Built by kfastov, it provides tools for searching channels by keywords, listing available channels, retrieving messages from specific channels, and filtering messages using regex patterns. The implementation uses the MTProto protocol for Telegram API access, handles authentication (including 2FA support), and exposes functionality through an SSE-based transport layer. Particularly valuable for workflows requiring analysis of Telegram content, monitoring specific channels, or extracting structured data from messages without requiring users to manually copy information from Telegram."
tembo-io,mcp-server-tembo,8,,"This MCP server, developed by Darren Baldwin at Tembo, provides integration with the Tembo Cloud platform API. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with Tembo's cloud database services. The implementation focuses on providing a standardized interface for database operations, allowing AI agents to query and manipulate data stored in Tembo Cloud. It's particularly useful for teams using Tembo who want to integrate their database operations with AI workflows, enabling use cases such as automated data analysis, AI-assisted database management, and context-aware data retrieval without directly interacting with Tembo's web interface."
tencentedgeone,mcp-geo,11,,"EdgeOne Pages MCP Geo Location Service provides a lightweight geolocation retrieval tool that bridges EdgeOne Pages Functions with the Model Context Protocol. The server exposes a `get_geolocation` tool that fetches user location data through a simple HTTP endpoint, enabling AI models to access precise geographical context with minimal configuration overhead."
tencentedgeone,edgeone-pages-mcp,36,4552,"EdgeOne Pages MCP server enables rapid deployment of HTML content to Tencent's EdgeOne Pages service. The server integrates with EdgeOne Pages Functions and KV store to host static content at the edge, providing a simple interface for deploying HTML and obtaining publicly accessible URLs. Built for developers who need quick content publishing capabilities through AI assistants, it handles API errors gracefully and returns immediate access to deployed content."
tendayspace,cbetamcp,1,,"CbetaMCP is a FastAPI-based server implementation that provides AI assistants with access to Chinese Buddhist Electronic Text Association (CBETA) resources. The server organizes tools into three main categories: catalog browsing, search functionality, and work manipulation, enabling operations like text retrieval, metadata access, and content analysis of Buddhist texts. Built with Docker support for easy deployment, it requires minimal configuration through environment variables and follows a modular structure that allows for extension of functionality. This implementation is particularly valuable for researchers, scholars, and applications focused on Buddhist textual studies that need programmatic access to CBETA's digital collection."
tengfone,supabase-nextjs-mcp-server,4,,"This Supabase-NextJS MCP server provides a simple notes system implementation using TypeScript and the Model Context Protocol. It integrates with Supabase for data storage and offers core functionality like creating and listing notes, as well as generating summaries. The server exposes resources via 'note://' URIs and includes tools for note creation and a prompt for summarization. By abstracting Supabase interactions through an MCP interface, it enables AI systems to easily manage and analyze textual notes. This implementation is particularly useful for applications requiring structured note-taking capabilities, such as personal knowledge bases, research assistants, or collaborative documentation tools."
terhechte,cursor-rust-tools,24,,"Cursor Rust Tools is an MCP server that enables AI assistants to access Rust Analyzer, crate documentation, and Cargo commands. Developed by terhechte, it provides tools for retrieving type information, documentation for crates and symbols, finding references, accessing implementations, and running cargo commands like tests and checks. The server includes a UI for configuration and project management, and uses Rust Analyzer to index codebases while parsing HTML documentation into markdown locally. It's particularly useful for Rust developers working with Cursor who want their AI assistant to have accurate, up-to-date information about their Rust code and dependencies."
terilios,smartsheet-server,5,,"This MCP server, developed by Timothy Driscoll at Boston Children's Hospital, enables seamless integration between Smartsheet and AI systems for healthcare analytics. Built with TypeScript and Python, it provides tools for Smartsheet operations, column management, and batch analysis of clinical data. The implementation focuses on healthcare-specific use cases like pediatric innovation scoring, clinical note summarization, and research impact assessment. It leverages Azure OpenAI for advanced analytics capabilities. The server is particularly useful for healthcare organizations looking to incorporate AI-driven insights into their Smartsheet workflows, enabling efficient data management and analysis in clinical research and hospital operations contexts."
secretiveshell,mcp-toolhouse,2,2075,"This MCP server, developed by TerminalMan, provides access to tools from the Toolhouse platform. Built with Python and leveraging the Model Context Protocol, it enables AI assistants to interact with Toolhouse's diverse set of utilities. The implementation focuses on creating a standardized interface for Toolhouse's tools, allowing seamless integration into AI workflows. It's particularly useful for developers and teams who want to incorporate Toolhouse's capabilities into their AI-assisted tasks, enabling a wide range of use cases depending on the specific tools available in the selected Toolhouse bundle."
secretiveshell,mcp-timeserver,24,8931,"This MCP timeserver, developed by TerminalMan, provides AI assistants with access to current date and time information across different timezones. It implements a custom datetime:// URI scheme for retrieving timezone-specific timestamps and exposes a tool for getting the local system time. By abstracting time-related operations, this server enables AI systems to easily incorporate accurate temporal data into their workflows. The implementation is particularly useful for applications requiring precise timing information, such as scheduling systems, log analysis tools, or any AI that needs to reason about or display time-sensitive data across multiple timezones."
secretiveshell,mcp-wolfram-alpha,23,20494,"This MCP server, developed by TerminalMan, provides AI assistants with a standardized interface to interact with the Wolfram Alpha API. Built using Python and leveraging the MCP and wolframalpha libraries, it offers capabilities for querying Wolfram Alpha's computational knowledge engine. The server abstracts the complexities of API communication, enabling AI systems to seamlessly integrate Wolfram Alpha's vast knowledge base and computational capabilities. It's particularly valuable for AI assistants focused on scientific computing, data analysis, and problem-solving, facilitating use cases such as mathematical calculations, unit conversions, data visualization, and accessing factual information across a wide range of disciplines."
mark-oori,mcpserve,1,,"MCPServe is a lightweight server implementation that exposes shell command execution capabilities to AI assistants through the Model Context Protocol. Built with FastMCP, it runs in a containerized environment with Docker support for both Python slim and Ubuntu environments, making it portable and easy to deploy. The server includes configurable authentication via API keys, debug logging options, and Server-Sent Events transport, enabling AI assistants to execute terminal commands directly without context switching."
pashaydev,terminal.shop.mcp,1,114,"Terminal.shop MCP server enables AI assistants to interact with Terminal.shop's e-commerce platform, providing tools for browsing coffee products, managing shopping carts, placing orders, and handling subscriptions. Built with Node.js and the MCP protocol, it features secure payment handling through Stripe, comprehensive order tracking, and user profile management. The implementation is particularly valuable for coffee enthusiasts and retailers who want to manage their Terminal.shop orders and subscriptions through natural language interaction with AI assistants."
mryanmyn,task-manager-mcp,1,,"TaskTracker MCP is a terminal-based task management system that exposes task tracking, project planning, and note-taking capabilities through MCP. Built with Python, it features a three-pane terminal UI for local usage while providing AI assistants access to the same functionality through resources and tools. The server implementation includes comprehensive task and plan management with support for creating, updating, and organizing tasks by priority and status, as well as developing structured project plans with ordered steps. It's particularly useful for developers who want to manage their tasks and projects through both a terminal interface and AI assistants, enabling seamless integration of task management into existing workflows."
termix-official,bsc-mcp,67,,"BSC MCP Server provides a robust blockchain interaction layer for the Binance Smart Chain, enabling AI-driven transactions including native BNB and BEP-20 token transfers, smart contract interactions, and meme token creation. Built with Viem and PancakeSwap SDK, it offers secure wallet management and standardized blockchain operations through a flexible, environment-variable-configured architecture. The server is particularly useful for developers and traders seeking programmatic, AI-assisted blockchain interactions with minimal low-level complexity."
azbuilder,mcp-server-terrakube,1,,"Terrakube MCP Server provides a bridge between AI assistants and Terrakube infrastructure management, enabling workspace management, variable handling, module operations, and organization administration through a standardized interface. Built with TypeScript and the MCP protocol, it features robust error handling, environment-based configuration, and a modular design that makes it easy to extend. The implementation is particularly valuable for DevOps teams who need to manage Terrakube resources and infrastructure as code directly through conversational AI without context switching."
terryso,mcp-pinterest,7,,A Pinterest Model Context Protocol (MCP) server for image search and information retrieval
tesla0225,mcp-a2a,5,,"A2A Client MCP Server provides a bridge between LLMs and Agent-to-Agent (A2A) protocol-compatible agents, enabling AI assistants to interact with external agents through a standardized interface. This TypeScript implementation offers tools for sending tasks, receiving responses, managing task states, and querying agent capabilities, with support for both synchronous and streaming interactions. The server exposes the connected agent's functionality through MCP tools and resources, making it particularly useful for scenarios where LLMs need to delegate complex tasks to specialized agents without requiring users to implement the A2A protocol directly."
tesla0225,mcp-create,53,,"MCP Create Server is a dynamic management service that creates and controls Model Context Protocol servers on-demand. Built with TypeScript and the MCP SDK, it functions as both an MCP server itself and a controller for child MCP servers, allowing users to dynamically create, execute tools on, update, and remove servers as needed. The implementation provides tools for server creation from templates, tool execution on child servers, server listing and management, and is designed to be run in Docker for optimal isolation and security, making it ideal for environments requiring flexible, on-demand MCP server capabilities."
tevonsb,homeassistant-mcp,208,,"This MCP server, developed by tevonsb, enables AI assistants like Claude to interact with Home Assistant smart home systems. Built in TypeScript, it provides capabilities for querying device states, controlling smart home devices, and accessing floor plans and area information. The implementation stands out by offering a standardized interface to Home Assistant's rich ecosystem of integrations and automations. By connecting AI capabilities with smart home functionality, this server allows AI systems to understand and control various aspects of a user's living space. It is particularly useful for voice-controlled smart home assistants, automated home management scenarios, and building context-aware AI applications that can respond to and influence the physical environment."
text2go,ai-humanizer-mcp-server,11,,"This MCP server, developed by Text2Go, enables AI assistants to detect AI-generated text using multiple detection services. It integrates with the EdgeShop AI API to provide tools for analyzing text using Copyleaks, Hemingway, and other detection algorithms. The server implements robust error handling, input validation, and a standardized interface for AI systems to assess the likelihood of machine-generated content. By connecting AI capabilities with specialized text analysis services, this implementation empowers AI assistants to perform tasks like content authenticity verification, writing style assessment, or plagiarism detection. It is particularly useful for applications requiring content moderation, academic integrity checks, or any scenario where an AI system needs to evaluate and reason about the origin and characteristics of textual content."
arjunkmrm,textarena-mcp,0,,"Textarena MCP server provides a fact-checking tool that compares two input facts against a predefined dataset, determining which fact is correct using string similarity algorithms. It also integrates with external services like NLTK and a poker win calculator, exposing their tools through a unified interface. The implementation focuses on providing a flexible, extensible platform for verifying and retrieving information across multiple domains."
bhouston,mcp-server-text-editor,11,859,"An open-source implementation of Claude's built-in text editor tool as an MCP server, allowing AI assistants to view, edit, and create text files with persistent state across command calls. Developed by Ben Houston, this server provides identical functionality to Claude's text_editor tool, supporting operations like viewing file contents with line ranges, creating new files, replacing text, inserting at specific lines, and undoing previous edits. The implementation is particularly useful for workflows where AI assistants need to manipulate text files without switching contexts."
tght1211,http-4-mcp,6,,"HTTP-4-MCP is a middleware server that enables AI assistants to interact with HTTP APIs through a standardized interface. The implementation provides a configurable bridge between Model Context Protocol and external web services, allowing for dynamic API integration without requiring direct HTTP access from the AI system. Built with FastAPI and supporting customizable endpoints defined in JSON configuration files, the server includes features like concurrent request handling, timeout management, and debug logging. HTTP-4-MCP is particularly useful for developers who want to extend AI capabilities with external API access while maintaining control over connection parameters and request formatting."
th3w1zard1,cedarscript-mcp,8,,"This CEDARScript MCP server, developed by an unnamed author, provides a SQL-like language for code manipulation. Built with TypeScript and leveraging tree-sitter for parsing, it offers tools for executing complex pattern matching and transformations on source code. The server implements a comprehensive grammar for code operations, supporting file, function, class, and method targeting. By abstracting the complexities of code analysis and modification, it enables AI systems to perform sophisticated code edits. This implementation is particularly valuable for automated refactoring, code generation, and static analysis tasks, facilitating use cases such as codebase modernization, API migrations, and enforcing coding standards across large projects."
thadius83,mcp-server-openai,1,,"This MCP server implementation provides a bridge to OpenAI's API, enabling AI assistants to query various OpenAI models directly. Developed by Pierre Brunelle, it offers support for o3-mini and gpt-4o-mini models, with improved message handling and formatting. The server is built using Python and integrates with the Model Context Protocol, focusing on efficient query processing and error management. It's designed for easy setup within Claude Desktop and similar environments, making it particularly useful for applications requiring quick access to OpenAI's language models for tasks like text generation, question answering, or content creation."
th-ad,oas-to-mcp,0,,"The oas-to-mcp server transforms any OpenAPI specification into a Model Context Protocol server, enabling AI assistants to interact with REST APIs through a standardized interface. It dynamically generates tools from API endpoints, handling parameter mapping, authentication, and request/response formatting automatically. The implementation parses OpenAPI documents from URLs or local files, creates appropriate tool schemas based on endpoint parameters and request bodies, and manages the execution of API calls when tools are invoked. This bridge between OpenAPI and MCP makes any documented API instantly accessible to AI assistants without requiring custom integration code."
that1guy15,tox-testing,4,,"An MCP server that executes tox commands to run tests within a project using the projects tox.ini. This server provides a convenient way to run and manage tests through the Model Context Protocol (MCP).

The Tox Testing MCP server is a specialized tool designed to integrate tox's testing capabilities into AI-powered development workflows. It provides a standardized interface for executing and managing tox environments through the Model Context Protocol (MCP), enabling AI assistants like Cline or Claude to run, analyze, and debug project tests in a structured and automated way. The server acts as a bridge between the AI system and your Python project's test suite, allowing for intelligent test execution and result analysis.

At its core, this MCP server wraps around tox, a popular Python testing automation tool, and exposes its functionality through a well-defined API. It supports various testing modes including running all tests, specific test groups, individual test files, or single test cases. This granular control allows AI assistants to implement sophisticated testing strategies, from broad test suite execution to focused debugging of specific test failures. The server handles test execution in the correct project context, manages timeouts, and provides detailed output that AI systems can parse and act upon."
the0807,geeknews-mcp-server,6,,"GeekNews-MCP-Server is a Python implementation that provides AI assistants with access to content from GeekNews, a popular tech news aggregator. Built by Eom Taehyun, this server uses BeautifulSoup to parse and extract articles, comments, and other content from GeekNews, making it available through the MCP protocol. The implementation enables AI assistants to retrieve up-to-date tech news, discussions, and trending topics, allowing for more informed conversations about current developments in technology and programming."
theailanguage,terminal_server,9,,"This Terminal Server implementation enables AI assistants to execute shell commands within a designated workspace directory. Built with Python using the FastMCP framework, it provides a simple but powerful interface through a single tool that captures both standard output and error streams from command execution. The server is configured to run in Claude Desktop environments through the provided configuration file, making it ideal for users who need to perform file operations, run scripts, or interact with command-line tools directly from their AI assistant conversations without leaving the interface."
theapemachine,mcp-server-devops-bridge,1,,"This MCP server implementation provides a comprehensive integration with Azure DevOps, offering tools for managing work items, wikis, and various project-related tasks. Developed by Daniel Owen van Dommelen, it includes features such as creating and updating work items, querying with WIQL, managing relationships between items, and handling attachments. The server also integrates with external services like GitHub, Slack, and N8N for enhanced workflow automation. It's particularly useful for development teams using Azure DevOps who want to leverage AI assistants for project management, documentation, and cross-service integrations. The implementation emphasizes flexibility and extensibility, allowing for easy addition of new tools and prompts to support evolving project needs."
thedaviddias,mcp-llms-txt-explorer,30,545,"This MCP server implementation provides a bridge for exploring websites with llms.txt files. Developed by David Dias, it offers tools for fetching and parsing llms.txt files, enabling AI assistants to interact with website-specific language model instructions. The server is designed for use cases requiring AI models to adapt their behavior based on website-specific guidelines, enhancing context-aware interactions in web-based environments."
the-focus-ai,buttondown-mcp,0,,"Buttondown MCP Server provides a TypeScript-based interface for interacting with the Buttondown newsletter API, enabling AI assistants to manage email campaigns through four core tools: listing emails with status filtering, creating drafts, retrieving analytics, and scheduling publications. The implementation features secure API key handling with 1Password integration, comprehensive parameter validation using Zod, and optimized scheduling support with ISO 8601 datetime formatting. Built with a test-driven approach, it's particularly valuable for automating newsletter workflows, analyzing campaign performance, and managing publication schedules without leaving the conversation interface."
the-focus-ai,mastodon-mcp,0,,"Mastodon MCP provides tools for interacting with Mastodon social media accounts through the Model Context Protocol. Developed by The-Focus-AI, this server implementation enables creating toots (posts) with customizable visibility settings and media attachments including images, videos, and audio files. It securely manages credentials using 1Password CLI for authentication with Mastodon instances, defaulting to floss.social but configurable via environment variables. The implementation is particularly useful for automated social media posting, content scheduling, and managing Mastodon engagement without leaving the conversation interface."
the-freetech-company,mcp-sse-authenticated-cloud-run,16,,"This MCP server implementation enables secure hosting on Google Cloud Run with user-based IAM authentication. Developed by FreeTech, it addresses the current lack of built-in authentication in MCP by utilizing Cloud Run's IAM and a local proxy for team access. The server is designed for use cases requiring controlled access to custom MCP servers over the internet, balancing security with collaborative functionality."
themapleseed,cube,1,,"BlenderMCP enables AI assistants like Cursor AI to control Blender programmatically through a socket connection, allowing for creation and manipulation of 3D objects. The implementation provides a two-way communication protocol that supports object creation, material control, scene inspection, code execution, viewport capture, and live preview streaming. It includes installation scripts for Windows, macOS, and Linux, with testing utilities to verify the connection. This tool is particularly valuable for workflows where AI needs to generate or modify 3D content in Blender without requiring manual intervention."
theolawrence86,perplexity-insight-mcp,0,,"The Perplexity Insight MCP server provides a bridge between MCP-compatible clients and the Perplexity AI API, enabling advanced question answering and web search capabilities. Built with TypeScript, it exposes two primary tools: perplexity_ask for direct questions and perplexity_search for web queries, both supporting multiple Perplexity models (sonar-reasoning, sonar-pro, sonar-deep-research). The implementation includes features like customizable system prompts, rate limiting protection, and proper error handling, making it particularly valuable for users who need up-to-date information and web search capabilities within AI assistant conversations in tools like Claude Desktop or Windsurf IDE."
theposch,gmail-mcp,1,,"Gmail MCP server provides AI assistants with direct access to Gmail accounts through the Google API, enabling email management capabilities including reading, sending, drafting, archiving, and organizing emails with labels and folders. The implementation supports comprehensive email search functionality, filter management, and batch operations while requiring OAuth 2.0 authentication with appropriate credentials. This server is particularly valuable for users who want to manage their email communications through conversational AI without switching to the Gmail interface."
theronic,datomic-mcp,11,,"Datomic MCP provides a bridge between AI assistants and Datomic databases, enabling query capabilities through a JSON-RPC interface. Developed by theronic, this server implementation exposes tools for querying Datomic schema, executing Datalog queries, and accessing raw index data through datoms. The server connects to a Datomic instance specified via environment variables and handles query results appropriately whether they're scalar values or collections, making it valuable for AI assistants that need to access and analyze data stored in Datomic databases without switching contexts."
thesethrose,alexa-shopping-list,1,,"Alexa Shopping List MCP Server provides a bridge between AI assistants and Amazon's Alexa shopping list functionality. Developed by Seth Rose, this implementation consists of three components: a FastAPI server that communicates with Amazon's backend, a login script that handles authentication via browser cookies, and an MCP server that exposes shopping list operations through standardized tools. The server enables users to view, add, delete, and mark items as complete or incomplete on their Alexa shopping list directly through AI assistants like Claude or Cursor, making it particularly useful for hands-free shopping list management during conversations with AI tools."
thesethrose,fetch-browser,6,,"Fetch Browser, developed by Seth Rose, is a powerful headless browser MCP server designed for fetching web content and Google search results without API keys. Built with TypeScript and leveraging libraries like jsdom and happy-dom, it offers tools for URL fetching and Google searching with configurable options such as response size limits, timeouts, and result counts. The implementation focuses on providing a versatile interface for AI models to access web content in multiple formats (HTML, JSON, Markdown, Text), enabling use cases like web scraping, content analysis, and search result processing. By offering a containerized solution with Dockerfile support, Fetch Browser ensures easy deployment and scalability for applications requiring programmatic access to web resources through a standardized MCP interface."
thetabird,mcp-server-axiom-js,1,2089,"This MCP server for Axiom, developed by Max Jikharev, enables AI agents to query data using Axiom Processing Language (APL). Built with Node.js and leveraging the Model Context Protocol SDK, it provides a standardized interface for executing APL queries and listing datasets in Axiom. The implementation features rate limiting, environment variable configuration, and proper error handling. It's particularly useful for AI assistants and applications needing to analyze log data or perform data exploration in Axiom, enabling use cases such as log analysis, anomaly detection, and data-driven decision making without directly interacting with Axiom's API complexities."
thewebscrapingclub,ai-cursor-scraping-assistant,5,,"AI-Cursor-Scraping-Assistant combines Cursor AI with MCP tools to streamline web scraper development for e-commerce sites. Developed by The Web Scraping Club, this implementation provides a structured workflow for website analysis, detection of anti-bot protections, and automated generation of Scrapy or Camoufox scrapers. The server component offers tools for fetching page content, stripping CSS, generating XPath selectors, and creating complete scrapers from templates, while the rule system guides Cursor through the process of analyzing website structure and implementing appropriate scraping strategies for different page types."
piotrpalek,mcp-thinking-tool,1,,"MCP Think Tool is a simple server implementation that provides a 'think' tool for AI assistants to externalize their reasoning process without performing any actual operations. Developed as a no-op tool, it accepts thought content from the assistant and echoes it back, creating a space for complex reasoning or working memory without changing any external state or retrieving new information. This implementation is particularly useful for scenarios where an AI assistant needs to break down complex problems step-by-step or maintain a chain of reasoning that would otherwise exceed its context window limitations."
cgize,claude-mcp-think-tool,11,1407,"MCP Think Tool Server implements Anthropic's 'think' tool for Claude, providing a dedicated space for structured reasoning during complex problem-solving tasks. Developed by cgize, this TypeScript server maintains a timestamped log of thoughts that Claude can record, retrieve, clear, and analyze through four specialized tools. The implementation is particularly valuable for scenarios requiring complex tool chains, policy adherence, sequential decision making, and multi-step analysis, allowing Claude to break down problems methodically and improve performance in reasoning-intensive tasks without switching contexts."
thirdstrandstudio,mcp-tool-chainer,26,1909,"MCP Tool Chainer is a server that chains multiple MCP tools together in sequence, reducing token usage by allowing sequential tool execution with result passing. Developed by Third Strand Studio, it solves the challenge of executing complex workflows without sending large intermediate results back to the LLM. The implementation features JsonPath support for precise data extraction, automatic tool discovery from configured MCP servers, and a simple interface for defining tool chains where results from one tool can be passed as input to another using the CHAIN_RESULT placeholder."
python,thirdweb-mcp,9,9904,"Read/write to over 2,000 EVM blockchains, enabling data querying, smart contract analysis/deployment, and transaction execution, powered by Thirdweb. Users can swap, bridge, send, deploy contracts, build apps, and more. 

Thirdweb is an all-in-one dev stack for web3 apps and infra; the MCP gives you access to all Thirdweb features directly from LLM."
thisnick,google-calendar-mcp,2,,"This Google Calendar MCP server, developed as an open-source project, enables AI assistants to interact with Google Calendar through natural language. Built with TypeScript and leveraging the Google Calendar API, it provides tools for creating and modifying events, listing upcoming appointments, and generating calendar insights. The implementation stands out by offering structured event data with proper MIME types and embedding calendar information in prompts for AI analysis. It's particularly useful for users who want to manage their schedules, plan meetings, or gain productivity insights through AI-assisted interactions with their Google Calendar."
thomasdavis,blah,8,11789,"BLAH (Barely Logical Agent Host) is an open-source ecosystem for managing and executing AI agent tools using the Model Context Protocol. Developed by Thomas Davis with contributions from Lisa Watts and Wombat, it provides a CLI tool for creating, testing, and sharing MCP servers that can be consumed by any MCP-compatible client like Claude Desktop, Cursor, or Windsurf. The implementation includes a visual flow editor for designing agent workflows, a simulation environment for testing tool interactions, and support for both local and remote tool registries. BLAH focuses on decentralized tool discovery and execution, making it particularly valuable for developers building composable AI agent systems."
thomasdavis,valjs,1,143,"A lightweight MCP server for Val Town tools that provides a simple framework for generating and calling tools, with a focus on extensibility and ease of use. The server implements standard MCP request handling for listing and calling tools, currently featuring a basic 'random_joke' tool as an example implementation. Built with TypeScript and the Model Context Protocol SDK, it serves as a minimal template for developers looking to create their own MCP-compatible tool servers."
thomasrohde,hue-mcp,0,,"Provides a powerful interface for controlling Philips Hue smart lighting systems through natural language and programmatic tools. Built with the MCP SDK, this server enables AI assistants to discover, query, and manipulate Hue lights and groups, supporting operations like changing colors, setting brightness, applying scenes, and creating dynamic lighting effects. Particularly useful for home automation, mood lighting, and creating personalized lighting experiences through conversational interaction."
superseoworld,mcp-spotify,12,3921,"This MCP server, developed by Thomas Wawra, provides integration with the Spotify Web API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for searching and accessing music, artists, albums, playlists, and recommendations. The implementation focuses on comprehensive coverage of Spotify's features, including audiobook support, playlist management, and market-specific content. It's particularly useful for AI assistants and applications needing music data and playback control, enabling use cases such as personalized playlist generation, music discovery, and audio content management without directly dealing with the complexities of the Spotify API."
thomaub,clickhouse_mcp_server,1,,"This ClickHouse MCP server, developed by Thomas, enables AI assistants to interact with ClickHouse databases through a standardized interface. Built with Python using libraries like FastMCP and ClickHouse drivers, it provides resources for listing databases and tables, retrieving schemas, and executing SELECT queries. The server abstracts the complexities of ClickHouse's native protocols, allowing AI systems to seamlessly incorporate powerful analytical database capabilities. It's particularly valuable for data analysis, business intelligence, and AI-driven insights on large datasets, facilitating use cases such as real-time analytics, log processing, and complex data exploration within ClickHouse environments."
thompson-ad,spotr-mcp-server,0,,"Spotr MCP Server provides AI assistants with access to a fitness movement library stored in Airtable, enabling personalized workout program creation. The server exposes both tools and resources for fetching exercises by muscle group (Chest, Back, Shoulders, Arms, Legs, Core) with corresponding demo videos. Built with TypeScript and the MCP SDK, it uses a stdio transport for communication and includes robust error handling and logging. This implementation is particularly valuable for fitness coaches and AI assistants designing tailored workout programs based on specific muscle groups or training splits."
thrashr888,terraform-mcp-server,52,5079,"This MCP server implementation provides tools for interacting with the Terraform Registry API, enabling AI agents to query provider information, resource details, module metadata, and generate example configurations. Developed by Paul Thrasher, it offers functionalities such as provider lookup, resource usage examples, module recommendations, data source lookup, and schema details retrieval. Built with TypeScript and leveraging the Model Context Protocol SDK, the server is particularly useful for AI applications that need to automate Terraform-related tasks, assist in infrastructure-as-code development, or provide intelligent suggestions for Terraform configurations."
threatflux,yaraflux,10,,"YaraFlux MCP Server provides YARA-based malware scanning capabilities through a modular architecture that supports both local and MinIO storage backends. Developed by ThreatFlux, this server exposes a comprehensive set of tools for managing YARA rules, scanning files and URLs for malicious content, and analyzing scan results. The implementation includes robust file management features, JWT-based authentication, and Docker containerization support, making it ideal for security professionals who need to integrate malware detection capabilities into AI-powered workflows or Claude Desktop environments."
thuhoai27,find-files-mcp,1,610,"FindFiles is an advanced file search tool implemented as an MCP server that allows users to search for files across multiple directories with extensive filtering options. Created by Kim Seungtae, it supports wildcard patterns, file attribute filtering (size, dates), content searching within text files, and file type filtering. The server exposes a single tool that accepts various search parameters and returns detailed file information including path, size, creation/modification dates, and MIME type, making it ideal for users who need powerful file discovery capabilities without leaving their AI assistant interface."
thunderboltsid,mcp-nutanix,5,,"MCP-Nutanix provides a bridge to Nutanix's Prism Central API, enabling AI assistants to interact with virtualized infrastructure resources. Developed by Sid Shukla, this Go-based server implementation exposes over 20 resource types including VMs, clusters, hosts, and networks through standardized tools for listing resources and retrieving detailed information. The server handles authentication to Prism Central, manages API requests, and processes responses with custom JSON marshaling to strip sensitive information. It's particularly valuable for infrastructure teams who want to query and monitor their Nutanix environment directly through AI assistants without switching to the Prism web interface."
tiberriver256,mcp-server-azure-devops,75,,"This MCP server implementation provides a bridge between AI assistants and Azure DevOps, enabling interaction with projects, work items, repositories, pull requests, branches, and pipelines. Developed by Tiberriver256, it offers tools for managing Azure DevOps resources and automating development workflows. The server is designed for DevOps teams looking to enhance their Azure-based processes with AI-driven assistance, supporting use cases like automated code reviews, work item management, and CI/CD pipeline optimization."
akshay23,local-events-mcp-server,2,,"Local Events MCP Server provides access to the Ticketmaster Discover API for finding upcoming events by artist, venue, location, or genre with ticket availability information. The Python implementation offers tools to search events, get detailed event information, and check ticket status, returning formatted results that include dates, venues, pricing, and ticket links. It's particularly useful for AI assistants helping users discover local entertainment options, plan outings, or track favorite artists' tour schedules without requiring direct API interaction."
mmmaaatttttt,mcp-live-events,0,,"MCP Live Events provides a bridge between AI assistants and the Ticketmaster API, enabling search and discovery of upcoming music events. The server exposes a tool for querying events by city, date range, and optional keywords, returning formatted results with event details including name, venue, date, genres, and ticket links. Built with Python using FastMCP and asynchronous HTTP requests, it requires a Ticketmaster API key stored in environment variables. This implementation is particularly valuable for users planning entertainment activities who want to discover concerts and performances without leaving their AI assistant conversation."
tienan92it,binance-mcp,4,,"Binance MCP Server provides a standardized interface for accessing Binance cryptocurrency exchange data through the Model Context Protocol. The implementation exposes market data tools including live price retrieval, order book snapshots, historical price data, and exchange information - all fetched via Binance's public REST API without requiring API keys. Built with the FastMCP framework, it offers a clean separation between the MCP protocol handling and the Binance API integration, making it ideal for AI assistants that need to analyze cryptocurrency market data or monitor trading opportunities."
tim10002,mcp-azresource,0,,"Azure Resource MCP Server provides tools for listing and managing Azure cloud resources and costs through a standardized interface. Built with FastMCP and Azure SDK libraries, it authenticates via service principal credentials to enable resource group enumeration, resource listing with filtering capabilities, and cost analysis through the Azure Cost Management API. This implementation is particularly valuable for cloud administrators and finance teams who need to monitor Azure infrastructure and track spending patterns directly through AI assistants."
timbuchinger,mcp-github,0,,"This GitHub MCP server implementation provides a bridge between AI assistants and GitHub's issue tracking system. Developed by Tim, it offers functionalities to list and create issues in GitHub repositories. The server utilizes the PyGithub library for API interactions and implements secure authentication via environment variables. It's designed to be easily integrated with Cline, making it particularly useful for AI applications that need to manage or interact with GitHub issues programmatically. The implementation focuses on error handling and validation, ensuring robust performance in various scenarios. It's well-suited for developers and teams looking to automate issue management or incorporate GitHub issue data into their AI-driven workflows."
src,time,36543,267798,"This MCP server, developed by the Model Context Protocol team, provides time and timezone conversion capabilities for AI assistants. It offers tools to get the current time in any timezone and convert times between timezones using IANA timezone names. The server automatically detects the system timezone and supports customization. By connecting AI capabilities with accurate time information, this implementation enables AI systems to handle time-sensitive queries and perform timezone calculations. It is particularly useful for applications like scheduling across timezones, travel planning, or any scenario where an AI assistant needs to work with localized time data."
1259187996,mcp-time,1,,"MCP-Time provides a simple time utility service that exposes current time information through the Model Context Protocol. Built with Node.js and using the @modelcontextprotocol/sdk package, it runs as a standalone service that can be deployed via Docker or managed with PM2. The implementation is configured to run on port 3000 and includes auto-restart capabilities with memory monitoring. This lightweight service is useful for workflows requiring accurate time data without leaving the conversation interface."
clssck,mcp-time-server,0,,"Time Server is an MCP implementation for timezone conversions and time-related operations. It provides tools to get current time in any timezone and convert times between different timezones using IANA timezone identifiers. Built with Python and the MCP protocol standards, it features type-safe implementation, RESTful API endpoints, and comprehensive error handling, making it ideal for applications requiring accurate time management across global locations."
samay58,time-mcp,0,,"Time MCP server provides real-time timezone-aware date and time information through a simple interface. Built with Python's zoneinfo module and the FastMCP framework, it exposes a single tool that returns the current time in any IANA timezone (defaulting to UTC if none is specified). The implementation handles timezone conversion and returns responses in ISO format, making it particularly useful for applications requiring accurate time information across different regions, scheduling across timezones, or any workflow where Claude needs access to properly formatted current time data without requiring external lookups."
timholden,figma-mcp-server,115,,"This Figma MCP server, developed by TimHolden, provides a robust interface to the Figma API for managing design system elements. Built with TypeScript, it offers comprehensive variable management, file operations, component handling, and collaboration features. The server implements variable validation, batch operations, and support for variable modes and scopes. By abstracting Figma API interactions into a standardized MCP interface, it enables AI systems to easily manipulate and analyze design assets. This implementation is particularly valuable for design teams and developers working with Figma, facilitating use cases such as design system management, automated style updates, and collaborative design workflows across various project scales."
codingthefuturewithai,screenshot_mcp_server,2,,"Screenshot MCP Server provides a lightweight, cross-platform tool for AI assistants to capture screen content programmatically. Built by Tim Kitchens, it enables screenshot functionality through a simple MCP interface with automatic JPEG compression and support for both stdio and SSE transport modes. The server is particularly useful for AI tools that need visual context about a user's current screen state."
tim-mcdonnell,tana-mcp,13,1621,"This MCP server implementation provides a bridge between the Model Context Protocol and Tana's Input API, enabling AI models and MCP clients to create and manipulate data in Tana workspaces. Developed by Tim McDonnell, it supports a wide range of operations including creating various node types, applying supertags, and managing complex node structures. The server is particularly useful for integrating Tana's structured note-taking capabilities into AI-assisted workflows and automating data input tasks."
timsonner,mcp-vscode-template,5,,"External-recon is an MCP server implementation for VS Code that provides penetration testers with network reconnaissance capabilities. Built on FastMCP and inspired by Renae Schilg's work, this Python-based server exposes tools for DNS lookups, email security checks (SPF, DMARC, DKIM), port scanning, and WHOIS lookups. The server enables AI assistants to systematically enumerate domains, discover IP addresses and subdomains, assess email security measures, and identify open ports - making it particularly valuable for security professionals conducting external reconnaissance against target domains."
shenghaiwang,androidbuild,1,858,"A Model Context Protocol server designed to streamline Android project development workflows by providing tools for building, testing, and running instrumented tests. Created by Tim Wang, this server enables seamless interaction with Android projects through Visual Studio Code extensions, automating common development tasks and facilitating error reporting back to language models."
tinybirdco,mcp-tinybird,57,19273,"This MCP server, developed by Tinybird, enables AI assistants to interact with Tinybird workspaces for data exploration and analysis. Built in Python, it provides tools for querying data sources, executing API endpoints, and pushing data files. The server leverages Tinybird's real-time analytics capabilities, allowing AI models to access and analyze large datasets efficiently. Key features include SQL query execution, data source exploration, and integration with Tinybird's documentation. By bridging AI assistants with powerful analytics infrastructure, this implementation is particularly useful for tasks involving data-driven insights, business intelligence, and real-time data exploration across various domains."
tinyfish-io,agentql-mcp,45,1941,"AgentQL MCP server integrates with the AgentQL data extraction API to provide AI assistants with structured data extraction capabilities from web pages. The server exposes a single tool that accepts a URL and natural language prompt, then uses the AgentQL API to extract relevant data in JSON format based on the description. This implementation is particularly useful for scenarios requiring structured data from websites without needing to write custom scrapers, enabling AI assistants to gather specific information from web content on demand."
tisddm,searxng-mcp,6,,"SearXNG MCP Server provides a bridge between AI assistants and SearXNG, a privacy-respecting metasearch engine. Developed by Cline, this TypeScript implementation enables assistants to perform web searches with customizable parameters including language filters, time ranges, and category selections. The server connects to a user-specified SearXNG instance (with optional basic authentication support), translates search requests into appropriate API calls, and returns markdown-formatted results. It's particularly valuable for users who want to maintain privacy while giving their AI assistants the ability to search the web for current information without leaving their conversation context."
tizee,mcp-server-ietf,0,,"This MCP server implementation provides access to IETF RFC documents for large language models. It offers tools for listing, searching, and retrieving RFC documents with pagination support. The server caches documents locally for efficient access and is designed for use cases requiring AI models to reference or analyze internet standards and protocols."
tizee,mcp-unix-manual,1,,"This MCP server provides Unix command documentation directly within Claude conversations. It offers tools for retrieving help pages, man pages, and usage information for Unix commands, listing common commands available on the system, and checking command existence. The server takes precautions to prevent command injection and includes logging for debugging. It is designed for use cases where AI assistants need to access and provide Unix command information to users."
tkc,notion-mcp,0,,"Notion MCP Server enables Claude to interact with Notion workspaces through a comprehensive API integration, allowing operations on blocks, pages, databases, users, and comments. Built by tkc, it implements the full Notion API with additional custom features like CSV import/export and recurring task creation. The server includes robust error handling, rate limiting, and request retries to ensure reliable communication with Notion's API. This implementation is particularly valuable for knowledge management workflows, collaborative document editing, and database operations directly within Claude conversations without switching contexts."
tkc,tinyt-todo-mcp,1,,"Tiny TODO MCP is a specialized server that enables AI assistants to maintain persistent task management capabilities beyond their usual context limitations. Built with SQLite for data storage, it provides a clean layered architecture that allows AI models to create, update, delete, and search TODOs with features like completion status tracking and due date management. The implementation follows a structured approach with database, repository, and service layers, making it particularly valuable for scenarios requiring AI assistants to track tasks over time with persistent storage."
tlazypanda,aptos-mcp-server,0,,"Provides AI assistants with tools for interacting with the Aptos blockchain ecosystem, including creating and managing projects, generating components, and testing smart contracts. Built with FastMCP, it features documentation search and browsing capabilities, automated code generation for gas stations and indexers, and tools for testing Move contracts. Particularly valuable for blockchain developers working with Aptos who want to streamline their development workflow through natural language interaction."
tlofreso,mcp-youtube-transcripts,2,,"This YouTube Transcript Extractor, developed by tlofreso, provides a command-line tool for extracting transcripts from YouTube videos using various URL formats. Built with Python and leveraging the youtube_transcript_api, it offers features like timestamp inclusion, flexible output options, and support for multiple YouTube URL types. The tool stands out by using script dependencies management and providing comprehensive error handling. By abstracting YouTube transcript retrieval into a simple command-line interface, it enables easy access to video transcripts for various applications. This implementation is particularly useful for content analysis, subtitle generation, or creating searchable video archives."
naru-sensei,-toast-mcp-server,2,,"Toast-MCP-Server provides a cross-platform desktop notification system that implements the Model Context Protocol, enabling AI applications to display native notifications on Windows and macOS. The server handles client connections over a TCP socket, processes notification requests according to the MCP specification, and delivers them using platform-specific APIs (win10toast for Windows and osascript for macOS). It features a unified notification manager that automatically selects the appropriate notification system based on the user's operating system, supports different notification types (info, warning, error, success), and includes a command processing system for handling client requests. Ideal for AI assistants that need to alert users about important events or completion of long-running tasks."
tobarrientos2,neo4j-mcpserver,1,310,"A TypeScript-based MCP server for executing Cypher queries against Neo4j graph databases. Provides a standardized tool for running database queries via stdio transport, with robust environment configuration and error handling. Useful for developers and data analysts who need programmatic, secure access to Neo4j graph data through a flexible command-line interface."
dkeesey,todoist-mcp-server,1,,"A Model Context Protocol server that bridges Claude with Todoist, enabling seamless task management through natural language interactions. Built to provide a comprehensive set of tools for creating, updating, listing, and deleting tasks, projects, and labels directly through conversational AI. Useful for users seeking to integrate their task workflow with Claude's intelligent assistance."
tofunori,claude-mcp-data-explorer,0,,"Claude MCP Data Explorer is a dual-implementation server (Python and TypeScript) that enables AI assistants to perform data analysis and visualization tasks. The server integrates with popular data science libraries including pandas, scikit-learn, matplotlib, and seaborn, allowing users to upload datasets, explore data properties, generate visualizations, and perform statistical analysis directly within Claude Desktop. The implementation includes setup scripts for both Python and Node.js environments, automatically configuring Claude Desktop to recognize the server, making it ideal for data scientists and analysts who want to leverage Claude's capabilities for interactive data exploration without switching contexts."
manascb1344,together-mcp-server,8,1921,"This MCP server integrates with Together AI's Flux.1 Schnell model to provide high-quality image generation capabilities. Developed by Model Context Protocol, it offers customizable image dimensions, clear error handling, and optional image saving. The server is designed for easy integration with MCP-compatible clients and is ideal for applications requiring AI-powered image creation based on text prompts."
tokeii0,memprocfs-mcp-server,3,,"MemProcFS-mcp-server provides a bridge between AI assistants and memory forensics capabilities through the MemProcFS Python library. The server exposes tools for analyzing process attributes, registry hives, keys and values from memory dumps, making it valuable for digital forensics investigators who need to examine Windows memory images through natural language interaction. Built with FastMCP, it features robust error handling and comprehensive documentation of available process and registry attributes."
tokenizin-agency,mcp-npx-fetch,14,,"This CLI tool fetches and processes web content using the Model Context Protocol. Developed by TokiDev at Tokenizin, it provides a simple interface for retrieving webpage text and converting it to Markdown format. The implementation integrates with JSDOM for HTML parsing and Turndown for HTML-to-Markdown conversion. It's designed for easy integration into Node.js projects and workflows, making it useful for content scraping, data analysis, or building web-based tools that require structured text extraction."
tokenizin-agency,mcp-nativewind,3,218,"This MCP server, developed by Tokenizin, transforms Tailwind components to NativeWind 4 for React Native applications. Built with TypeScript and leveraging tools like tree-sitter for parsing, it offers capabilities for analyzing and converting individual components or entire directories. The server exposes standardized endpoints for transformation tasks, error handling, and usage analysis. By bridging the gap between web and mobile styling paradigms, it enables developers to reuse Tailwind-based designs in React Native projects efficiently. This implementation is particularly valuable for cross-platform development teams, facilitating faster UI development and maintaining styling consistency across web and mobile platforms."
tokikokoko,mcp-server-uuid-gen,0,,"This MCP server implementation generates UUIDs for AI assistants, built with Deno and the Model Context Protocol SDK. It exposes a single tool called GET_UUID_TOOL through a standard MCP interface, handling tool requests via stdio transport. The server logs all operations to stderr with timestamps for debugging purposes and includes robust error handling to return formatted error messages when tool calls fail. Licensed under Apache 2.0, this lightweight implementation provides a simple but essential utility for applications requiring unique identifiers within AI assistant workflows."
tolik-unicornrider,mcp_scraper,4,,"This MCP server scrapes websites and converts HTML to Markdown, using Mozilla's Readability library to extract meaningful content and TurndownService for high-quality Markdown conversion. Built with TypeScript, it functions both as a command-line tool and an MCP server, supporting direct URL scraping or local HTML file conversion while ensuring security by removing potentially harmful script tags. The implementation includes core functionality for web scraping, HTML processing, and a CLI interface, making it useful for content extraction, document conversion, and preparing web content for AI analysis."
tomatio13,mcp-server-tavily,29,,"This Tavily search MCP server, developed by Tomatio13, provides an interface for AI assistants to perform web searches using the Tavily API. It enables AI agents to query Tavily and retrieve structured search results including AI-generated answers, URLs, and titles through a controlled MCP server. Built in Python, the implementation handles API authentication and request formatting. By leveraging Tavily's AI-powered search capabilities, this server allows AI systems to access real-time web information in a safe manner. It is particularly useful for AI assistants needing to conduct research, answer questions based on current information, or provide relevant search results while maintaining a clear separation between the AI model and external data sources. The implementation includes Docker support for easy deployment in various environments."
tomcools,twitch-mcp,2,,"This Twitch MCP server, developed by Tom Cools, provides a Quarkus-based interface for AI assistants to interact with Twitch chat. Built using Apache Camel, it offers tools for connecting to Twitch channels and processing chat messages. The implementation focuses on real-time chat interaction, making it efficient for AI models to engage with Twitch audiences. It's particularly useful for enhancing AI capabilities in live streaming contexts, enabling tasks like automated moderation, content analysis, or interactive chatbots without requiring deep knowledge of Twitch's IRC protocol or API intricacies."
tomekkorbak,oura-mcp-server,9,,"This MCP server provides access to the Oura API, allowing language models to query sleep, readiness, and resilience data. Developed by Tomek Korbak, it offers tools for retrieving data for specific date ranges or today's metrics. The server is designed for use cases requiring analysis of personal health and wellness data, such as tracking sleep patterns or monitoring overall fitness levels."
tomekkorbak,strava-mcp-server,8,,"This MCP server provides access to the Strava API, allowing language models to query athlete activities data. Developed by Tomek Korbak, it offers tools for retrieving recent activities, activities within specific date ranges, and detailed information about individual activities. The server is designed for use cases requiring analysis of personal fitness data, such as tracking workout patterns or monitoring athletic performance over time."
tommybez,dbt-semantic-layer-mcp-server,8,,"This MCP server provides a bridge to the DBT Semantic Layer API, enabling querying and analysis of data models defined in DBT. Developed by TommyBez, it utilizes Node.js and integrates with the Model Context Protocol SDK. The server is designed for use cases requiring access to structured business metrics and dimensions, such as generating reports, performing ad-hoc analysis, or building data-driven applications on top of DBT-managed data models."
tommyn0225,anth,0,,"This cybersecurity-focused MCP server integrates with Exa AI to scan projects for vulnerabilities. Built as a JSON-RPC service, it reads requests from stdin and writes responses to stdout, offering two main tools: listing available commands and scanning project data for security issues. The server is containerized with Docker for easy deployment and configured through Smithery.ai, making it suitable for workflows requiring automated security analysis within AI assistant conversations."
tmhr1850,backlog-mcp-server,7,,"Backlog MCP Server provides integration with the Backlog project management API, allowing AI assistants to interact with Backlog issues and projects directly within conversations. The server implements the Model Context Protocol to expose Backlog's functionality through a set of endpoints that handle authentication, issue creation, and project management operations. Built with TypeScript and Node.js, it uses environment variables for configuration and includes comprehensive test coverage to ensure reliable communication with the Backlog API."
tomokiishimine,dify-mcp-server,3,987,"Dify Workflow MCP Server enables seamless integration between Claude and Dify Workflow, allowing AI assistants to leverage Dify's workflow capabilities through the Model Context Protocol. Built with TypeScript, this server dynamically retrieves workflow parameters from Dify's API and exposes them as tools in Claude, supporting multiple API keys to create distinct tools for different workflows. The implementation is designed for users who want to enhance their AI interactions with structured workflows, providing a bridge between Claude's conversational abilities and Dify's automation capabilities."
tomschell,mcp-long-term-memory,3,,"Memory MCP Server provides long-term memory storage for LLMs using SQLite and vector embeddings. It enables AI assistants to store, retrieve, and search through different types of memories (conversations, code, decisions, references) with semantic search capabilities powered by Ollama's nomic-embed-text model. The implementation includes a project-based organization system with tagging support, relationship tracking between memories, and a set of MCP tools for memory interaction. This server is particularly valuable for maintaining context across multiple conversations, preserving development decisions, and building knowledge bases that persist beyond individual chat sessions."
tom-semple,mcp-apple-notes-fixed,6,,"This MCP server implementation provides integration with Apple Notes, enabling AI assistants to interact with and manage notes. It offers tools for listing, searching, creating, and indexing notes, utilizing both vector and full-text search capabilities. The server uses LanceDB for efficient data storage and retrieval, and incorporates on-device embedding for enhanced privacy. Developed for use cases requiring natural language interaction with personal notes, such as information retrieval, note organization, and content creation within the Apple Notes ecosystem."
tomsiwik,mcp-experts,0,,"MCP Code Expert System provides code review capabilities through simulated expert personas like Martin Fowler and Robert C. Martin (Uncle Bob). Built with Python using FastAPI, it analyzes code snippets against established software engineering principles, offering refactoring suggestions and clean code recommendations. The system integrates with Ollama for AI-powered reviews, stores relationships in a knowledge graph, and supports both standard mode for Cursor IDE integration and SSE transport for web applications. This implementation is particularly valuable for developers seeking expert-level feedback on their code without leaving their development environment."
tonyhschu,test-and-typecheck-mcp-server,0,,"This MCP server, developed by an unknown author, provides a TypeScript-based implementation for running tests and type checking using Vitest. Built with the Model Context Protocol SDK, it offers a streamlined interface for executing test suites and validating TypeScript code. The server leverages Zod for runtime type checking and schema validation. By abstracting the complexities of test execution and type verification, it enables seamless integration of testing workflows into AI-assisted development processes. This implementation is particularly valuable for projects requiring robust testing and type safety, facilitating use cases such as automated code quality assurance, continuous integration pipelines, and TypeScript-based application development."
tonypan2,minesweeper-mcp-server,106,,"Minesweeper MCP Server provides a bridge between Claude and a Minesweeper game server, allowing AI assistants to play the classic puzzle game through a set of tools. Built by tonypan2, it communicates with a locally running game server via HTTP requests, translating game actions (start, click, flag, unflag) into API calls and returning the game state as images. The server is designed for integration with Claude Desktop through its configuration system, making it ideal for demonstrating AI problem-solving capabilities in a visual game environment without requiring the assistant to leave the conversation interface."
tooflex,davinci-resolve-mcp,2,,"DaVinci Resolve MCP Server enables AI assistants to interact directly with DaVinci Resolve video editing software through a comprehensive API bridge. Built with FastMCP, it exposes resources for accessing project information, timeline details, media pool contents, and gallery albums, while providing tools for creating and manipulating projects, timelines, clips, and color grades. The implementation connects to Resolve's Python API, handling the complexities of cross-platform scripting module discovery and object management. This server is particularly valuable for video editing workflows where AI assistance can help with project organization, timeline assembly, color grading, and render management without requiring manual switching between applications."
toolbase-ai,uploadthing-mcp,0,185,"UploadThing MCP provides a bridge for AI assistants to upload files to UploadThing's cloud storage service. Developed by Toolbase, this Node.js implementation offers two primary tools: one for uploading local files with specified paths, names, and MIME types, and another for uploading files directly from URLs. The server connects via stdio transport and requires an UploadThing token for authentication. This implementation is particularly useful for workflows where AI assistants need to handle file uploads during conversations without requiring users to manually upload content."
toowiredd,chatgpt-mcp-server,7,,"This MCP server implementation provides Docker management capabilities through a custom GPT interface. Developed by toowiredd, it leverages the Model Context Protocol to enable natural language interactions for container operations. The server includes robust error handling, resource management, and security features like rate limiting and API key authentication. It's designed for seamless integration with ChatGPT, allowing users to manage Docker containers, monitor logs, and execute commands using conversational prompts. Ideal for DevOps teams seeking to streamline container management workflows or developers looking to incorporate Docker controls into AI-powered applications."
topherbc,python-run-mcp,2,,"This MCP server, developed by an unknown author, provides a Python-based service for executing Python code via standardized API endpoints. Built using the MCP library, it offers a simple interface for running Python snippets remotely. The server exposes a '/run_python' endpoint that accepts JSON-formatted requests containing Python code to execute. By abstracting the complexities of code execution and providing a RESTful API, it enables easy integration of Python capabilities into various applications and workflows. This implementation is particularly useful for scenarios requiring remote code execution, such as educational platforms, code evaluation systems, or applications needing dynamic Python functionality without local installation."
HEAD,cognee-mcp,1949,,"This MCP server, developed by topoteretes, provides a boilerplate framework for building AI assistants with integrated database and API capabilities. It leverages uv for dependency management and offers configurable connections to graph databases like Neo4j, vector databases like LanceDB, and relational databases. The server stands out by combining multiple database paradigms and offering easy integration with Claude AI. By connecting AI capabilities with diverse data sources, this implementation enables the creation of knowledge-aware AI systems that can reason over structured and unstructured data. It is particularly useful for building complex AI assistants that require access to heterogeneous data stores, such as enterprise knowledge bases, research tools, or data analysis platforms."
tosin2013,mcp-codebase-insight,3,5852,"MCP Codebase Insight provides AI assistants with deep analysis capabilities for software repositories, enabling pattern detection, architecture understanding, and knowledge management. Built around a FastAPI server with Qdrant vector database integration, it features core modules for code analysis, ADR (Architecture Decision Record) management, documentation handling, and debugging assistance. The implementation includes a comprehensive caching system for performance optimization, health monitoring for reliability, and a structured knowledge base that stores code patterns with similarity search. Particularly valuable for developers seeking to understand complex codebases, document architectural decisions, or debug challenging issues without leaving their AI assistant conversation."
tosin2013,mcp-memory-cache-server,1,,"This memory cache server, developed by Tosin Akinosho, provides an efficient caching layer for Model Context Protocol (MCP) interactions to reduce token consumption. Built with TypeScript and leveraging the MCP SDK, it implements an in-memory storage system with LRU eviction, TTL management, and automatic cache cleanup. The server focuses on optimizing repeated data access patterns in AI workflows, enabling faster response times and lower costs. It's particularly useful for applications involving frequent file operations, repeated computations, or access to static datasets, allowing seamless integration with any MCP client and language model without requiring changes to existing code."
tositon,opendeepsearch,2,,"OpenDeepSearch is an open-source alternative to Perplexity Deep Research that implements the Model Context Protocol (MCP) for comprehensive web research. It provides tools for breaking down complex questions into sub-questions, performing web searches via the Brave Search API, analyzing search results, and synthesizing findings into coherent reports. The implementation includes three main MCP tools: brave_web_search for general queries, brave_local_search for location-based information, and deep_research for orchestrating multi-step research workflows, making it ideal for academic research, complex inquiries, and topics requiring synthesis from multiple sources."
trackerxxx23,dev_memory_mcp,2,,"This dev-memory-server, developed by an unnamed author, provides a persistent development memory across projects for AI assistants. Built with TypeScript and leveraging Node.js, it offers a standardized interface for storing and retrieving development-related information. The server abstracts the complexities of data persistence, allowing AI systems to maintain context and knowledge across multiple projects or sessions. It includes features like cross-project memory access, data versioning, and configurable storage options. This implementation is particularly valuable for enhancing AI-assisted software development, enabling use cases such as code snippet reuse, project-specific configuration management, and intelligent context retention during long-term development processes."
tradercjz,dolphindb-mcp-server,2,,"DolphinDB MCP Server provides a bridge between AI assistants and DolphinDB, a high-performance time-series database. This implementation enables natural language interaction with DolphinDB through FastAPI, allowing users to query and manipulate time-series data without writing complex database code. The server authenticates with DolphinDB using credentials stored in environment variables and translates requests into appropriate database operations. Particularly valuable for financial analysts, data scientists, and engineers who need to access time-series data directly through their AI assistant interface."
trafflux,pdf-reader-mcp,9,,"This MCP server implementation provides a PDF reading service for AI assistants. Developed by Philip Van de Walker, it utilizes PyPDF2 for PDF processing and is containerized using Docker for easy deployment. The server is designed to work with Python 3.11 and integrates the Model Context Protocol SDK directly from GitHub. It offers a simple interface for accessing and extracting information from PDF files, with the ability to mount local PDF directories for processing. The implementation focuses on efficiency and ease of use, making it suitable for AI applications that require text extraction or analysis from PDF documents in various domains such as document management, information retrieval, or content summarization."
translated,lara-mcp,41,2035,"Lara MCP Server provides a bridge to the Lara Translation API, enabling AI assistants to translate text between languages with support for language detection and context-aware translations. Developed by Translated, this TypeScript implementation uses the Model Context Protocol SDK to expose a single translation tool that leverages the official Lara client library. The server authenticates with Lara API credentials through environment variables and is packaged for both npm distribution and Docker deployment. Ideal for multilingual applications where AI assistants need to perform accurate translations without switching context."
carterlasalle,directory_structure_mcp,0,2857,"MCP Tree Explorer is a lightweight tool for directory tree visualization in Cursor, providing smart filtering of common large directories and customizable ignore/keep patterns. Built by Carter LaSalle, it automatically installs the 'tree' command if not available and works across Windows, macOS, and Linux, making it useful for developers who want quick, flexible directory structure insights."
t-rekttt,cgv-mcp,0,,"This MCP server implementation provides a bridge to CGV Cinema's API, allowing AI assistants to access movie showtimes, cinema locations, and seat availability information. Built with Python using FastMCP and Pydantic for data validation, it offers tools to retrieve cinema lists, movie schedules, and detailed showtime information for specific dates and locations. The implementation is particularly valuable for users wanting to check movie availability, find nearby theaters, or plan cinema outings through conversational interfaces without needing to navigate the CGV website directly."
delorenj,mcp-server-trello,23,,"This Trello MCP server, developed by the Model Context Protocol team, enables AI assistants to interact with Trello boards through a standardized interface. Built with TypeScript and leveraging the Trello REST API, it provides tools for managing cards, lists, and board activities. The implementation handles authentication, rate limiting, and error management, abstracting away the complexities of direct API interaction. By exposing Trello operations as MCP-compatible endpoints, it allows AI systems to seamlessly integrate task and project management capabilities. This server is particularly useful for scenarios requiring automated workflow management, task tracking, or collaborative project organization within Trello boards."
diegofornalha,mcp-server-trello,0,,"Trello integration server that provides tools for managing boards, lists, and cards through a standardized interface. Built with TypeScript and the MCP SDK, it handles rate limiting (300 requests/10s per API key, 100 requests/10s per token), input validation, and error handling automatically. Particularly valuable for teams who want to manage Trello boards and track tasks directly through AI assistants without context switching."
trilogy-group,youtube-summarizer-mcp,2,,"This MCP server, developed by an unknown author, integrates with a YouTube summarization API to provide AI-powered video analysis capabilities. Built with Python and leveraging the Flask framework, it offers tools for initiating video summarization, retrieving summaries, and engaging in follow-up conversations about the content. The implementation focuses on abstracting the underlying API complexities, providing a clean interface for AI agents to interact with video data. It's particularly useful for applications needing automated content analysis, enabling use cases such as research assistance, content moderation, or educational support without directly handling YouTube video processing."
triple-whale,mcp-server-triplewhale,0,1238,"This MCP server implementation provides a bridge to the Triple Whale API, enabling AI assistants to interact with e-commerce analytics and data. Developed by Triple Whale, it offers tools for querying metrics like net profit, order revenue, and ads ROAS across different time periods and attribution models. The server supports authentication via API keys and includes error handling. It's designed for use cases requiring analysis of e-commerce performance data, such as generating sales reports or optimizing marketing strategies."
triptych,opera-omnia-mcp,0,,"Opera Omnia MCP server provides access to a rich collection of creative content datasets for games, storytelling, and AI applications. Developed by triptych, it fetches data from the Opera Omnia GitHub repository and exposes tools for listing categories, retrieving datasets, getting random items, filtering content, combining datasets, and generating creative content using templates. The server is built with TypeScript and implements a clean API that works seamlessly with Claude and other AI assistants, making it particularly valuable for developers who need quick access to character concepts, equipment descriptions, RPG elements, and other creative content without leaving their AI assistant interface."
tristanlib,mcp_server_mysql_windows,2,,"This MCP server implementation provides a bridge to MySQL databases on Windows systems. It utilizes Node.js and Express to create an API for executing SQL queries and retrieving results. The server includes features for user authentication, error handling, and supports both standard and SSE-based query execution modes. It's designed for use cases requiring efficient database access and management within Windows environments."
tritlo,lsp-mcp,11,,"The LSP MCP Server acts as a bridge between Language Server Protocol (LSP) servers and AI assistants, enabling LLMs to access code intelligence features like hover information, completions, and diagnostics. Developed by Matthias Pall Gissurarson, it exposes LSP capabilities through MCP tools and resources, allowing AI models to query language servers for accurate code suggestions without leaving the conversation interface. The server supports multiple programming languages through configurable LSP backends, making it particularly valuable for code assistance, error diagnosis, and providing contextual information about code elements during development workflows."
gkhays,mcp-sbom-server,1,,"MCP-SBOM Server is a Python-based implementation that performs Trivy scans on container images to generate Software Bill of Materials (SBOM) in CycloneDX format. Built using the FastMCP library, it provides an asynchronous interface for executing Trivy scanner commands and processing the resulting SBOM data. The server exposes a single tool endpoint that accepts container image references, executes the scan, and returns detailed component information including package metadata, licenses, and vulnerability data. This implementation is particularly valuable for DevOps and security teams who need to analyze container dependencies, comply with security requirements, or integrate SBOM generation into their CI/CD pipelines."
truaxki,mcp-notes,7,,"This notes MCP implementation, developed by truaxki, provides a simple interface for reading and writing notes. Built with Python 3.10+, it leverages the MCP library for standardized communication. The project structure includes a .gitignore for version control and a pyproject.toml for dependency management, indicating a focus on maintainability. While the specific storage mechanism isn't evident, the implementation offers a straightforward approach to note management, making it suitable for AI assistants, personal productivity tools, or applications needing basic note-taking functionality. It's particularly useful for tasks like quick information capture, to-do list management, or integrating note-taking capabilities into larger workflows."
truaxki,mcp-pdf2png,3,,"This PDF to PNG conversion tool, created by Kirk Truax, provides a simple MCP server for converting PDF documents to PNG images. It integrates with the pdf2image library to handle the actual conversion process. The implementation focuses on ease of use, with a single tool call that takes input and output paths as parameters. It's particularly useful for workflows that require visual representations of PDF content, such as document previews, image-based archiving, or preparing PDFs for web display. The server can be easily configured and run using the Claude Desktop application, making it accessible for users who need quick PDF-to-image conversion capabilities without complex setup."
truaxki,mcp-variance-log,3,,"This variance logging tool for MCP, developed by truaxki, analyzes statistical variations in conversation structures and logs unusual events to a SQLite database. Built with Python and leveraging the MCP library, it provides an automated way to detect anomalies in AI interactions. The implementation focuses on identifying and recording deviations from expected conversation patterns, with configurable thresholds for what constitutes an 'unusual' event. It's particularly useful for researchers and developers working on AI safety and alignment, enabling use cases like monitoring model behavior, detecting potential instabilities or biases, and gathering data for further analysis of AI communication patterns."
truss44,mcp-crypto-price,22,2183,"This MCP server implementation provides real-time cryptocurrency data and analysis through CoinCap's API. Developed by Tracey Russell, it offers tools for price tracking, market analysis, and historical trend examination. Built with TypeScript and the Model Context Protocol SDK, the server focuses on secure API key management and easy setup within Claude Desktop. It enables AI assistants to access current prices, trading volumes, market caps, exchange data, and historical price information for various cryptocurrencies. The implementation is particularly useful for financial analysis, trading strategy development, and cryptocurrency market monitoring applications."
trustasia-com,mcp-server-myssl-go,2,,"MCP-Server-MySSL is a Go-based server that integrates with the MySSL API to provide domain and IP security checking capabilities for AI clients. Developed by TrustAsia, it offers two primary tools: a domain check tool for querying information about domains to ensure secure HTTPS deployments, and a health check tool to verify the MySSL service is operational. The implementation requires MySSL API credentials (AccessKey and SecretKey) and is designed to seamlessly integrate with compatible AI clients through the MCP protocol, making it particularly useful for security professionals who need to verify domain security configurations or monitor SSL/TLS deployments."
0xfreysa,trusted-mcp-server,5,,"A Gmail MCP server running inside a secure AWS Nitro enclave, providing email functionality through a remote interface. Originally forked from Claude Post, this implementation uses FastAPI and Server-Sent Events (SSE) transport to enable AI assistants to search, read, and send emails securely. The server authenticates with Gmail using app-specific passwords and includes tools for searching emails by date and keyword, retrieving email content, counting daily emails, and sending messages. The AWS Nitro enclave provides hardware-based attestation to verify code integrity, ensuring sensitive email credentials remain protected within the trusted execution environment."
tsavo,unity-mcp,1,,"Unity-MCP is an open-source bridge between Unity game environments and AI assistants, enabling AI-assisted game development, automated testing, scene analysis, and runtime debugging. It implements a minimal set of six commands that allow executing C# code, querying game objects, and retrieving results asynchronously—all while respecting Unity's single-threaded execution model. The server handles long-running operations through a log ID system that maintains context across thread boundaries, allowing AI assistants to continue interaction while waiting for results from resource-intensive operations like running tests or performing scene analysis."
tsmd,wcag-mcp,1,,"The WCAG MCP Server provides AI assistants with access to Web Content Accessibility Guidelines (WCAG) documentation through a structured interface. It exposes principles, guidelines, success criteria, understanding documents, and techniques from the official W3C WCAG repository as MCP resources. The server maps URI patterns to the corresponding HTML content in the WCAG repository, handling different versions (2.0, 2.1, 2.2) and organizing techniques by technology type. This implementation enables AI tools to reference specific accessibility requirements, understand implementation details, and provide accurate guidance on web accessibility compliance without needing to parse the entire WCAG documentation structure."
tsmztech,mcp-server-salesforce,16,978,"This Salesforce MCP server, developed by tsmztech, integrates Claude AI with Salesforce CRM, enabling natural language interactions for data and metadata management. Built with TypeScript and leveraging the jsforce library, it offers tools for object searching, schema retrieval, record querying, and data manipulation. The implementation focuses on providing intuitive access to Salesforce's complex data structures and operations, making it accessible for AI models to perform tasks like creating custom objects, querying records across relationships, and managing fields. It's particularly useful for automating Salesforce administration, enhancing data analysis workflows, or integrating Salesforce capabilities into AI-driven business processes, allowing assistants to interact with Salesforce without deep API knowledge."
tsuchijo,matlab-mcp,13,,"This MATLAB MCP server, developed by an unnamed author, enables seamless integration of MATLAB's powerful numerical computing capabilities with AI systems and MCP clients like Claude. It provides tools for creating, executing, and managing MATLAB scripts and functions, allowing users to leverage MATLAB's extensive libraries and toolboxes for data analysis, signal processing, and more. The implementation stands out by offering a Python-based interface to MATLAB, automatic MATLAB Engine installation, and support for visualizations. It's particularly useful for AI assistants and developers looking to incorporate complex mathematical operations, scientific computing, and data visualization into their workflows, enabling sophisticated analysis and modeling across various technical domains."
tsuchijo,sandbox-mcp,7,,"This sandbox MCP server provides isolated Docker environments for executing code in multiple programming languages. It integrates with Claude Desktop and allows creating containers, writing and running code, installing packages, and setting up development environments. The implementation stands out by offering persistent containers, state saving, and Dockerfile generation for reproducible setups. Built with Python using the MCP and Docker libraries, it's particularly useful for AI assistants or applications needing to run untrusted code, test software in isolated environments, or provide interactive coding capabilities. Use cases include automated code testing, providing a secure coding playground, or enabling AI systems to write and execute code on demand."
ttiimmaacc,cinema4d-mcp,8,,"Cinema4D MCP Server enables Claude to interact with Cinema 4D through a socket-based communication system, allowing for scene manipulation, rendering, and animation directly from conversations. The implementation includes both a Python MCP server component and a Cinema 4D plugin that establishes a socket connection, supporting operations like creating primitives, applying materials, setting keyframes, and working with MoGraph objects. It features thread-safe execution of commands in Cinema 4D's main thread, comprehensive object detection including MoGraph elements, and robust error handling - making it particularly valuable for 3D artists and motion designers who want to prototype ideas or automate workflows without leaving their AI assistant interface."
ttjslbz001,akshare_mcp_server,17,,"This MCP server implementation provides a bridge to AKShare, a powerful financial data API for Chinese and global markets. Developed to enable AI assistants to access and analyze financial data, it offers tools for querying stock, fund, bond, futures, forex, and macroeconomic data. The server is built using Python and integrates seamlessly with Claude Desktop, making it suitable for use cases requiring real-time financial analysis, market research, and investment decision support."
tuananh,hyper-mcp,382,,extensible MCP server that you can enhance with plugins written in any WebAssembly-compatible programming language. Think of it as a modular toolkit where each plugin adds new functionality without the overhead of running multiple MCP servers
tuannvm,mcp-trino,11,,"MCP-Trino is a Go-based server that enables AI assistants to execute SQL queries against Trino databases. Developed by tuannvm, it provides tools for querying data, listing catalogs, schemas, and tables, and retrieving table schemas. The implementation supports both HTTP and stdio transport mechanisms, includes SSL configuration options, and can be deployed as a Docker container with configurable connection parameters. It's particularly useful for data analysts and engineers who need to access and analyze data stored in Trino-compatible data warehouses without writing complex SQL queries manually."
tulong66,mcp-tavily-proxy,1,,"This Tavily MCP Server, developed by tulong66, enhances web search capabilities for AI assistants by integrating Tavily's search API with HTTP/HTTPS proxy support. Built using Python and the MCP framework, it offers tools for comprehensive web searches, direct answer generation, and recent news retrieval. The server's standout feature is its proxy configuration support, enabling searches through specified proxy servers. This implementation is particularly valuable for scenarios requiring web search capabilities in restricted network environments or when additional privacy layers are needed. It's well-suited for AI researchers, developers working on information retrieval systems, and applications needing robust, proxy-enabled web search functionalities."
userad,didlogic_mcp,1,,"DIDLogic MCP Server provides a standardized interface for Large Language Models to interact with the DIDLogic telecommunications API, enabling management of SIP accounts, phone numbers, call history, and billing information. Developed by Konstantin Tumalevich, this Python-based implementation offers tools for checking account balances, creating and configuring SIP accounts with security restrictions, managing IP whitelists, purchasing phone numbers, and accessing transaction records. The server is designed for VoIP service administrators who need to automate telecommunications management tasks through natural language interactions, with specialized prompts for common operations like balance checking and SIP account creation."
tumf,mcp-shell-server,64,20952,"This MCP shell server, developed by tumf, enables AI assistants like Claude to execute whitelisted shell commands on the host system. Built in Python, it provides a secure interface for running commands with stdin input support, returning comprehensive execution results including stdout, stderr, exit status, and runtime. The implementation focuses on security through command whitelisting and shell operator validation, preventing unauthorized access while allowing flexible command execution. By connecting AI capabilities with local system operations, this server enables AI assistants to interact with files, analyze data, and perform system tasks. It is particularly useful for scenarios requiring controlled system access, data processing, and building AI tools that can leverage local computing resources and file systems."
tumf,mcp-text-editor,72,21909,"This MCP text editor server, developed by tumf, enables AI assistants like Claude to perform line-oriented text file operations through a standardized API. Built in Python, it provides capabilities for efficient partial file access, concurrent editing with conflict detection, and atomic multi-file operations. The implementation stands out by optimizing for token efficiency in LLM applications while ensuring safe, synchronized file access. By connecting AI capabilities with robust text editing functionality, this server allows AI systems to read, modify, and analyze text files with fine-grained control. It is particularly useful for collaborative editing tools, automated text processing systems, and AI-powered development assistants that need to interact with codebases or documentation."
tuncer-byte,memory-bank-mcp,1,,"Memory Bank MCP is a structured documentation system that helps teams create, manage, and access project knowledge through interconnected Markdown documents. Developed by tuncer-byte, it generates and maintains six core document types (project brief, product context, system patterns, tech context, active context, and progress) that capture different aspects of project information from high-level goals to technical details. The server leverages the Gemini API for AI-assisted document generation and updates, provides advanced search capabilities across all documents, and supports customizable storage locations, making it particularly valuable for teams seeking to maintain consistent project documentation and knowledge management through AI assistants."
turlockmike,chess-mcp,9,,"This Chess MCP server, developed by an unknown author, provides AI assistants with chess game analysis and move generation capabilities. Built with TypeScript and leveraging libraries like chess.js and node-uci, it offers an interface for evaluating chess positions, generating legal moves, and interfacing with chess engines like Stockfish. The server implements position evaluation, move validation, and UCI protocol communication. By abstracting the complexities of chess rules and engine interaction, it enables AI systems to analyze games, suggest moves, and understand chess positions. This implementation is particularly useful for chess training applications, game analysis tools, and AI research into chess strategy and decision-making."
turlockmike,apple-notifier-mcp,10,519,"This Apple Notifier MCP server, developed by Michael Darmousseh, enables AI assistants to interact with native macOS notifications and system dialogs. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for sending notifications, displaying prompts, using text-to-speech, capturing screenshots, and selecting files on macOS systems. The server abstracts OS-specific interactions, allowing AI systems to easily incorporate desktop notifications and dialogs into their workflows. It's particularly useful for developers and AI researchers working on macOS-specific applications, enabling use cases like desktop alerts, user input collection, and system interaction for AI assistants."
turlockmike,mcp-rand,2,1569,"This MCP server, developed by Michael Darmousseh, provides random generation utilities including UUID, numbers, strings, passwords, Gaussian distribution, dice rolling, and card drawing. Built with TypeScript and leveraging Node's native crypto module, it offers a simple command-line interface as well as integration with MCP clients. The implementation stands out by providing a wide range of randomization tools in a single package, with features like normalized Gaussian distribution and stateful card drawing. It's particularly useful for applications needing robust random data generation, such as game development, simulation software, or testing frameworks that require diverse random inputs."
twilio-labs,mcp,8,445,"Twilio MCP Server provides access to Twilio's extensive API ecosystem through a Model Context Protocol interface. Developed by Twilio's ETI team, this TypeScript implementation exposes Twilio's communication services including messaging, voice, conversations, and serverless functions as MCP tools that can be consumed by AI assistants. The server handles authentication via Twilio API keys, automatically populates AccountSid parameters when needed, and supports filtering capabilities to manage context size limitations. It's particularly useful for building AI applications that need to programmatically send SMS messages, make phone calls, manage communication workflows, or interact with Twilio's serverless environment."
twolven,mcp-codesavant,8,,"This CodeSavant MCP server, developed by Todd Wolven, provides AI assistants with a robust interface for code management and execution. Built with Python and leveraging asyncio for concurrent operations, it offers capabilities for reading, writing, and versioning code files across multiple projects. The server implements a CodeFileManager for file operations, a CodeCommandExecutor for shell command execution, and a CodeRunner for language-specific code execution. It supports multiple programming languages and includes features like diff generation, history tracking, and timeout handling. This implementation is particularly valuable for AI-assisted software development, code review, and automated testing scenarios, facilitating use cases such as collaborative coding, code analysis, and continuous integration workflows."
twolven,mcp-optionsflow,7,,"This OptionsFlow MCP server, developed by Todd Wolven, provides advanced options analysis and strategy evaluation through Yahoo Finance. Built with Python and leveraging libraries like yfinance and scipy, it offers tools for analyzing options chains, calculating Greeks, and evaluating basic options strategies such as credit spreads, cash-secured puts, and covered calls. The implementation stands out by providing comprehensive risk metrics and liquidity analysis, making it valuable for AI assistants or applications needing to assess options strategies. It's particularly useful for tasks like portfolio risk management, options strategy backtesting, or building financial advisory tools that require in-depth options data and analysis capabilities."
twolven,mcp-server-puppeteer-py,4,,"This Puppeteer MCP server, developed by Todd Wolven, provides browser automation capabilities for AI assistants using Playwright. It exposes functions for web navigation, screenshots, element interactions, and JavaScript execution, abstracting away the complexities of browser control. The server implements detailed error handling and logging for robustness. By connecting AI systems with real browser environments, this implementation enables assistants to interact with web pages, fill forms, and extract data programmatically. It is particularly useful for web scraping, automated testing, or any scenario where an AI needs to navigate and manipulate web content in a full browser context."
twolven,mcp-stockflow,10,,"This StockFlow MCP server, developed by Todd Wolven, provides AI assistants with real-time stock market data and analysis capabilities through the Yahoo Finance API. Built with Python and leveraging libraries like yfinance and pandas, it offers tools for retrieving comprehensive stock information, historical price data, and options chain analysis. The server implements robust error handling, data processing, and API rate limiting. By abstracting financial data retrieval and analysis, it allows AI systems to easily incorporate stock market insights into their workflows. This implementation is particularly valuable for financial analysts, algorithmic traders, and AI assistants focused on investment research, enabling use cases such as portfolio analysis, options strategy evaluation, and real-time market monitoring."
twolven,mcp-stockscreen,17,,"This StockScreen MCP server, developed by Todd Wolven, provides AI assistants with advanced stock screening capabilities using data from Yahoo Finance. Built with Python and leveraging libraries like yfinance and pandas, it offers a flexible interface for technical, fundamental, and options-based stock analysis. The server implements customizable screening criteria, watchlist management, and result storage functionalities. It's designed to handle various market cap categories and ETFs, with robust error handling and rate limiting. This implementation is particularly valuable for financial analysts, algorithmic traders, and AI researchers working on quantitative finance applications, enabling use cases such as automated trading strategy development, portfolio optimization, and market trend analysis."
txbm,mcp-local-dev,24,,"A local development environment manager that lets LLMs configure and manage dev environments for you. Built for AI assistants to handle environment setup, dependency management, and testing automatically.

Supports Python, Node, Bun and many test runners. Lots more features in the works to make interacting with local dev environments a breeze via LLMs!"
angrysky56,mcp-rocq,3,,"This MCP server, developed by Tyler Blaine Hall, integrates the Coq proof assistant to provide advanced logical reasoning capabilities. Built with Python and leveraging the MCP SDK, it offers tools for automated dependent type checking, inductive type definition, and property proving using custom tactics and automation. The implementation focuses on bridging natural language inputs with Coq's formal verification system through an XML protocol, enabling detailed feedback on type errors and failed proofs. It's particularly useful for researchers and developers working on formal methods, theorem proving, and verified programming, allowing for rigorous mathematical reasoning and software correctness proofs without directly interacting with Coq's complex syntax."
tyler-r-kendrick,mcp-server-agent,0,,"A multi-language (Python and .NET) MCP server agent designed to generate tool descriptions for local git repositories and facilitate automated secret management. Built by Tyler Kendrick, the implementation provides a flexible framework for parsing repository structures, creating Docker containers, and integrating with CodeQL for security analysis, with a particular focus on enabling AI-driven repository introspection and secrets retrieval."
tylerstoltz,mcp-odbc,0,,"ODBC MCP Server enables Claude Desktop to query databases via ODBC connections, providing secure access to any ODBC-compatible database including SQLite and Sage 100 ProvideX. Developed by Tyler Stoltz, it features read-only safeguards to prevent data modification, support for multiple database connections, and flexible configuration through config files or Claude Desktop settings. The server exposes tools for listing connections, testing connectivity, retrieving table schemas, and executing SQL queries - making it particularly valuable for data analysis, business intelligence, and generating insights from database data without leaving the conversation interface."
hdresearch,mcp-python,9,31150,"This Python REPL MCP server, developed by Tynan Daly, provides AI assistants with a persistent Python execution environment. Built using the MCP library, it offers capabilities for executing Python code, listing variables, and installing packages. The server maintains session state between executions, allowing for iterative development and data manipulation. It's designed for flexibility, supporting various Python versions and environments through uv for dependency management. This implementation is particularly useful for AI assistants focused on data analysis, scripting, and rapid prototyping, enabling use cases such as exploratory data analysis, algorithm testing, and interactive code development within the context of AI-assisted programming tasks."
tyrchen,postgres-mcp,14,,"Postgres MCP is a server implementation that provides a standardized interface for AI agents to interact with PostgreSQL databases through a set of well-defined commands. Developed by Tyr Chen, it enables connection management, data operations (SELECT, INSERT, UPDATE, DELETE), and schema manipulation (CREATE/DROP tables and indexes) through a secure API that validates SQL statements before execution. The server uses sqlx for database connectivity and sqlparser for SQL validation, ensuring only allowed operations are performed. It's particularly useful for AI assistants that need to query databases, manage database schemas, or perform data operations without direct access to database drivers."
tywenk,mcp-sol,0,,"This Model Context Protocol server for Solana, developed by Tywen Kelly, integrates the Solana blockchain with Anthropic's MCP to enable AI agents to interact with Solana through natural language. Built with Python and leveraging the solana and solders libraries, it provides a comprehensive set of Solana RPC methods including balance queries, transaction handling, and blockchain data retrieval. The implementation focuses on simplicity, offering an easy setup process and integration with Claude Desktop. It's particularly useful for developers and researchers working on Solana-based applications, enabling use cases like automated trading, blockchain analysis, and decentralized finance interactions without dealing directly with Solana's low-level APIs."
tzafrir,mcp-server-replicate,2,,"This Replicate MCP server, developed by Tzafrir Rehan, provides a standardized interface for AI assistants to interact with various AI models hosted on Replicate. Built using Python and FastMCP, it currently focuses on image generation capabilities, offering model schema inspection, customizable parameter inputs, and output resizing. The server abstracts the complexities of the Replicate API, handling authentication, model execution, and result processing. It's designed for AI developers and researchers who need flexible access to state-of-the-art AI models, enabling use cases like dynamic image creation, model exploration, and integration of advanced AI capabilities into broader applications. The implementation's roadmap includes expanding support for text and video generation models, as well as adding features like version management and caching."
ualusham,mcp-github,0,,"GitHub MCP server enables Claude and other MCP-compatible LLMs to interact with the GitHub API through a set of tools and prompts. It provides four core tools for searching repositories, retrieving repository information, listing issues, and creating new issues, along with five specialized prompts for generating content like issue descriptions and pull request summaries. Built with TypeScript and Octokit, the server requires a GitHub personal access token and can be tested using either the MCP inspector or Claude Desktop. This implementation is particularly valuable for developers who want to manage GitHub repositories and issues directly through their AI assistant without switching contexts."
ubie-oss,mcp-vertexai-search,10,,"This MCP server implementation provides a bridge to Google's Vertex AI and Discovery Engine APIs, enabling AI assistants to perform advanced search and retrieval operations on large datasets. Developed by yu-iskw, it leverages Google Cloud services to offer powerful search capabilities, including semantic search and natural language understanding. The server is designed to work with various MCP-compatible clients and supports both CLI and server modes. It's particularly useful for applications requiring intelligent information retrieval from extensive document collections, such as technical documentation search, knowledge base querying, or content recommendation systems. The implementation focuses on efficient integration with Google's AI services, making it suitable for organizations already using or looking to adopt Google Cloud technologies for their AI and search needs."
ubie-oss,slack-mcp-server,18,,"Slack MCP Server is a TypeScript implementation that enables AI assistants to interact with Slack workspaces through a standardized interface. Developed by Ubie, Inc., it provides nine tools for common Slack operations including listing channels, posting messages, retrieving user profiles, searching messages, and managing reactions. The server validates requests using Zod schemas, calls the appropriate Slack Web API endpoints, and returns parsed responses with only necessary fields. It requires both Slack Bot and User OAuth tokens for authentication and can be run as a standalone server or integrated into existing applications."
ucesys,minio-python-mcp,0,,"MinIO MCP Server provides AI assistants with direct access to MinIO object storage through a Python-based implementation of the Model Context Protocol. It exposes tools for listing buckets, browsing objects, retrieving content, and uploading files to MinIO instances, with automatic bucket creation when needed. The server includes both a standalone stdio interface and an Anthropic Claude integration client that allows natural language interaction with stored objects. Particularly valuable for workflows that require AI assistants to access, analyze, or manipulate data stored in MinIO without leaving the conversation interface."
uday210,salesforce-mcp-server,0,,"Salesforce MCP Server provides a bridge between AI assistants and Salesforce CRM data through the Model Context Protocol. Built with TypeScript and the jsforce library, it enables executing SOQL queries, retrieving object metadata, and performing CRUD operations on Salesforce records. The server authenticates using Salesforce credentials stored as environment variables and exposes tools for querying data, describing objects, and interacting with the Salesforce Metadata API. This implementation is particularly valuable for workflows requiring access to customer data, sales information, or custom Salesforce objects without leaving the conversation interface."
uddeshya-23,mcp-server-jira,2,,"This Jira MCP server, developed by the Model Context Protocol team, enables AI models to interact with Jira through a standardized interface. Built with TypeScript and leveraging the Jira REST API, it provides tools for managing issues, projects, and sprints. The implementation offers features like connection pooling, comprehensive error handling, and built-in rate limiting to optimize performance and reliability. It's particularly useful for AI assistants or applications needing to automate Jira workflows, enabling tasks like issue tracking, project management, and workload analytics without requiring deep knowledge of the Jira API."
umshere,uiflowchartcreator,7,932,"This UIFlowchartCreator MCP server, developed by umshere, provides a tool for generating UI flowcharts based on input specifications. Built with TypeScript and leveraging the MCP SDK, it offers an easy-to-use API for creating visual representations of user interfaces and their interactions. The server integrates seamlessly with MCP-compatible systems, making it accessible for developers and designers working on various UI projects. By abstracting the complexities of flowchart creation into a standardized MCP interface, it enables efficient visualization of UI structures and workflows. This implementation is particularly useful for applications involving UI design, user experience mapping, and interactive documentation, facilitating use cases such as rapid prototyping, design communication, and user flow analysis."
un4ckn0wl3z,memmcp,9,,"MemMCP is a Cheat Engine-like tool built with MCP that allows memory manipulation in applications. This proof-of-concept demonstrates memory scanning and modification capabilities similar to Cheat Engine but implemented using the MCP framework, providing a Python-based alternative for memory hacking tasks."
un4ckn0wl3z,mcp-scraper-engine,1,,"A lightweight MCP server for web scraping that provides a simple tool to extract content from web pages using BeautifulSoup and HTTPX. The implementation features a single function that handles HTTP requests with proper headers, follows redirects, and processes the response to return clean text content from the target URL. It includes error handling to gracefully manage failed requests and connection issues. This server is ideal for AI assistants that need to retrieve and analyze text content from websites without dealing with the complexities of HTML parsing or HTTP request management."
szowesgad,unicode-puzzles-mcp,0,,"Unicode-Puzzles-MCP is a server implementation for creating and managing steganography puzzles that hide messages within Unicode characters. It integrates with symbl.cc to access specialized Unicode characters (including zero-width, quantum, and special categories) and provides endpoints for puzzle creation, encoding/decoding messages, and character searching. The server features template-based puzzle generation with configurable difficulty levels, rate-limited API access to external services, and persistent storage of puzzle metadata in MCP memory, making it particularly valuable for creating educational challenges or security demonstrations involving hidden text."
unievo,xpilot-mcp-library,2,,"Provides a collection of MCP servers for the MultiversX ecosystem, offering tools and resources for blockchain development. Includes servers for API services, SDK interactions (Rust, Python), and template implementations that demonstrate different MCP server capabilities like resource listing and tool execution. Useful for developers building blockchain applications on the MultiversX platform who need standardized, modular access to development tools and information."
unifuncs,ufn-mcp-server,3,,"UniFuncs MCP Server provides a bridge to the UniFuncs API, enabling AI assistants to access web search and web reading capabilities. This TypeScript implementation requires an API key from unifuncs.com and is designed to be easily integrated into existing workflows through NPX commands. The server leverages Express for handling requests and includes support for the Model Context Protocol SDK, making it particularly useful for AI assistants that need to retrieve and process information from the web."
unionai-oss,union-mcp,3,,"Union MCP is a server that connects AI assistants to Union's tasks, workflows, and apps through the Model Context Protocol. Developed by Niels Bantilan, it currently provides basic tools like addition functions and dynamic greeting resources, with plans to expand functionality for accessing authenticated Union resources, listing task and workflow metadata, and eventually enabling AI-assisted authoring of Union code. The implementation is designed to integrate with Claude Desktop and other AI interfaces, making Union's distributed computing capabilities accessible as tools for AI assistants."
unmuktoai,wazuh-mcp-server,11,,"The Wazuh MCP Server provides a secure bridge between Claude Desktop and Wazuh security data, enabling AI assistants to access real-time security alerts and context. Built with Flask, it authenticates with the Wazuh RESTful API using JWT tokens, retrieves alerts from Elasticsearch indices, and transforms them into standardized MCP-compliant messages. The implementation includes robust error handling for token expiration and network issues, is easily configurable through environment variables, and exposes an HTTP endpoint that Claude Desktop can query to incorporate security event data into conversations, making it valuable for security operations and threat analysis workflows."
ototao,unsloth-mcp-server,2,,"An MCP server for Unsloth, a library that dramatically improves large language model fine-tuning efficiency by reducing VRAM usage and training time. The server provides tools for checking Unsloth installation, listing supported models, loading models, fine-tuning, text generation, and model export, with optimizations like 4-bit quantization and extended context length support for models like Llama, Mistral, and Phi."
unstructured-io,uns-mcp,22,,"The Unstructured API MCP Server provides AI assistants with direct access to the Unstructured API's document processing capabilities through a set of specialized tools. Built with Python using the FastMCP framework, it enables operations like listing, creating, and managing source connectors, destination connectors, and workflows for document processing pipelines. The server requires an Unstructured API key for authentication and can be integrated with Claude Desktop or run locally. It's particularly valuable for users who need to process and extract structured information from documents within AI assistant conversations without switching to separate document processing tools."
upamune,human-mcp,32,,"Human-MCP is a joke MCP server that puts a real human in the loop to respond to AI assistant requests via a Streamlit UI. The implementation creates a server that exposes tools and resources to AI assistants, but instead of automated responses, it routes all requests to a human operator through a simple web interface. This allows for creative, unpredictable, or humorous interactions where the AI believes it's communicating with an automated system while actually interacting with a person who can provide custom responses to each request."
upstash,context7-mcp,176,2793,"Context7-MCP is a server implementation that provides AI assistants with access to up-to-date documentation and code examples for various libraries and frameworks. Developed by Upstash, this TypeScript-based server connects to Context7.com's documentation database, offering two main tools: one for resolving library names into compatible IDs, and another for retrieving relevant documentation with customizable token limits and topic filtering. The implementation includes intelligent project ranking algorithms to help find the most relevant documentation based on user queries, making it particularly valuable for developers seeking current technical information beyond an AI's knowledge cutoff date."
upstash,mcp-server,27,,"This Upstash MCP server, developed by Upstash, Inc., provides a seamless interface to Upstash's Developer APIs for Redis databases. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for creating, managing, and interacting with Redis databases through natural language commands in Claude Desktop or other MCP clients. The implementation supports a wide range of Redis operations, from basic CRUD functions to advanced features like backup management and usage statistics. It's particularly useful for developers and database administrators who want to streamline their Redis workflow, enabling quick database creation, monitoring, and management tasks through conversational AI interfaces."
aelaguiz,mcp-url-fetch,0,,"URL Fetch MCP provides Claude with the ability to retrieve content from web URLs, supporting text, JSON, and image formats. Built with FastMCP and httpx, it offers three specialized tools: fetch_url for general web content, fetch_json for parsing and formatting JSON data, and fetch_image for retrieving and displaying images. The implementation includes a CLI for running the server, desktop integration capabilities, and comprehensive error handling, making it ideal for use cases requiring web content retrieval directly within Claude conversations."
onurucard4,scan-url-mcp-server,0,,"Scan-URL MCP Server provides a bridge between Claude Desktop and the urlscan.io API, enabling URL scanning capabilities directly within the assistant interface. The server exposes a single tool that accepts a URL parameter and returns comprehensive scan results from urlscan.io's search endpoint. Built with the Model Context Protocol SDK, it implements both ListTools and CallTool request handlers, communicates via standard I/O, and can be easily configured in Claude Desktop. This implementation is particularly valuable for users who need to quickly analyze website security or content information without leaving their AI assistant conversation."
usama-dtc,salesforce_mcp,0,,"Salesforce MCP server that enables AI assistants to interact with Salesforce data and metadata through a standardized interface. Built with TypeScript and JSForce, it provides tools for querying records, managing custom objects/fields, executing DML operations, and handling complex SOSL searches across multiple objects. The implementation features robust error handling, relationship query support, and flexible authentication options including OAuth2, making it valuable for Salesforce administrators and developers who need to access or modify their org's data through natural language requests."
usegranthq,mcp-server,0,927,"UseGrant MCP Server provides a set of tools for interacting with the UseGrant API, enabling management of providers, clients, tenants, and access tokens. Built by sibiraj-s, it implements the Model Context Protocol to facilitate secure authentication and resource management through the UseGrant platform. The server requires Node.js 16+ and a valid UseGrant API key, and can be easily integrated with Claude Desktop through a simple configuration. It's particularly valuable for workflows requiring structured access control and tenant management within the UseGrant ecosystem."
utensils,mcp-nixos,62,6157,"MCP-NixOS provides a server for interacting with NixOS packages, system options, Home Manager configuration, and nix-darwin macOS configuration through standardized URL schemes. Developed by James Brink, this Python implementation features multi-level caching with filesystem persistence, detailed documentation integration, and support for advanced search capabilities including hierarchical paths and version filtering. The architecture separates concerns into cache, clients, contexts, resources, and tools components, making it ideal for developers seeking programmatic access to Nix ecosystem configuration options and package information through AI assistants."
utkucy,avalanche-mcp-tools,0,,"Avalanche MCP Tools provides a bridge to the Avalanche blockchain CLI, enabling AI assistants to interact with blockchain configurations and management tasks. Built by Utkucan YILDIRIM, the server exposes tools for listing blockchain configurations and publishing blockchain VMs, with support for multiple networks including Mainnet, Fuji Testnet, and local development environments. Useful for developers and blockchain engineers who want to automate Avalanche blockchain operations through a standardized interface."
conao3,python-mcp-uuid,2,,"A simple MCP server that generates UUID v4 strings on demand. This lightweight implementation uses the FastMCP framework to expose a single tool function that returns a random UUID when called. It requires Python 3.13+ and is designed to be installed with PDM, making it easy to integrate with Claude Desktop through the provided configuration. Useful for applications needing unique identifiers without implementing UUID generation logic themselves."
uzaysozen,imdb-mcp-server,2,,"IMDB MCP Server provides a bridge to the IMDb API, enabling AI assistants to search for movies and TV shows, retrieve detailed information about titles, and access curated lists like top-rated films or upcoming releases. Developed by Uzay Sozen, this implementation features efficient response caching, pagination support, and comprehensive error handling while requiring a RapidAPI key for authentication. The server exposes over 20 specialized tools organized into categories including search, movie details, TV shows, and regional content (with a special focus on Indian cinema), making it ideal for use cases like movie recommendations, entertainment research, and content discovery without requiring direct access to the IMDb database."
v0idpwn,hexdocs-mcp,3,,"Hexdocs MCP is an unofficial server that enables AI agents like Claude or Cursor to search Elixir documentation through HexDocs. It leverages the HexDocs search API to query documentation across multiple Elixir packages, automatically fetching the latest package versions from the Hex.pm API. The implementation exposes a single 'search' tool that accepts a query string and a list of packages to search within, returning formatted documentation results including titles, package names, references, types, and full content - making it valuable for developers seeking quick access to Elixir documentation without leaving their AI assistant."
v-3,discordmcp,55,,"This Discord MCP server, developed as an open-source project, enables AI assistants to interact directly with Discord channels through the Discord API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for sending messages, reading recent channel history, and automatic server/channel discovery. The implementation focuses on maintaining user control and security while allowing AI models to engage in Discord conversations. It's particularly useful for enhancing AI-driven community management, automated support, or interactive chatbots within Discord servers, enabling seamless integration of AI capabilities without requiring deep knowledge of Discord's API intricacies."
v-3,notion-server,72,,"This Notion MCP server, developed by v-3, enables AI assistants to seamlessly interact with Notion workspaces through standardized tools for searching, reading, creating, and updating pages. It provides a simplified interface for complex Notion operations, making it easier for AI systems to manage and retrieve information from Notion databases and pages. The server stands out by offering a streamlined integration between AI capabilities and Notion's collaborative workspace features. It empowers AI assistants to handle tasks like knowledge management, note-taking, project tracking, and content creation within Notion. This implementation is particularly useful for applications that require AI-driven content organization, team collaboration tools, or any scenario where an AI system needs to work with structured data in a Notion workspace."
v4lheru,clickup-mcp-server,0,,"This MCP server implementation provides a bridge to ClickUp's project management API, enabling AI assistants to interact with tasks, lists, and workspaces. Developed by Talib Kareem and enhanced by v4lheru, it offers tools for task creation, management, and relationship handling (dependencies, links, tags), as well as comprehensive comment functionality across tasks, lists, and chat views. The server is designed for use cases requiring AI-assisted project management, task automation, and collaborative workflows within ClickUp environments."
v4lheru,trello-mcp-server,6,,"Trello MCP Server provides a bridge between AI assistants and the Trello API, enabling comprehensive management of boards, lists, cards, labels, members, and checklists. Built with TypeScript and the Model Context Protocol SDK, it implements a service-oriented architecture that handles authentication, rate limiting, and error management while exposing a rich set of tools for task management operations. The server uses a singleton pattern for service instances, processes requests through tool handlers, and communicates with Trello using RESTful endpoints. This implementation is particularly valuable for project managers and teams who want to create, update, and organize Trello boards directly through conversational AI without switching contexts."
vaibhavgeek,twitter-rapidapi-mcp-x,1,,"Twitter MCP Client enables AI assistants to fetch tweets from multiple Twitter profiles using the Twitter API through RapidAPI. The implementation provides a simple interface to retrieve timeline data by username, handling authentication with RapidAPI keys and returning structured JSON responses. This tool is particularly valuable for social media analysis workflows, allowing Claude to access Twitter content directly within conversations without requiring users to manually copy and paste tweets."
valyu-network,valyu-mcp-js,0,,"This MCP server implementation provides access to Valyu's knowledge retrieval and feedback APIs. It enables LLMs to search proprietary and web sources for information and submit feedback on transactions. The server offers tools for querying various data sources with customizable parameters and submitting user feedback, making it suitable for AI-assisted information retrieval and user interaction scenarios."
vanachterjacob,bc-mcp,2,,"This MCP server provides standardized development rules and context for Business Central projects, optimized for use with the Cursor editor. It offers both static JSON-based rules and a WebSocket-based connection for real-time updates. The server includes features like rule validation, architectural pattern suggestions, and component structure guidance. It's designed for teams working on Business Central applications, ensuring consistent coding standards and best practices across projects."
vanderheijden86,moneybird-mcp-server,1,422,"Moneybird MCP Server provides a bridge between AI assistants and Moneybird accounting software, enabling natural language interaction with financial data. The server exposes tools for managing contacts, invoices, financial accounts, products, projects, and time entries through the Moneybird API. Built with TypeScript and featuring automatic versioning, error handling, and response chunking for large datasets, it allows users to filter contacts, view sales invoices, and make custom API requests without leaving their AI assistant interface. Particularly valuable for business owners and accountants who need to quickly access or update their financial information through conversational prompts."
vanshika-rana,payman-mcp-server,0,,"Payman AI's MCP server provides a comprehensive documentation retrieval and problem-solving system for developers integrating the Payman payment platform. The server offers multiple tools for fetching documentation, searching content, retrieving code examples, and solving integration issues across Node.js and Python SDKs. Built with TypeScript and leveraging the Model Context Protocol, it enables AI assistants to access detailed technical guidance about Payman's API capabilities through a flexible, cache-enabled documentation lookup system."
vanto,beanquery-mcp,12,,"Beancount MCP Server enables AI assistants to query and analyze Beancount ledger files using Beancount Query Language (BQL). Developed by Tammo van Lessen, this implementation provides tools to set ledger files and run BQL queries against them, returning tabular results that can be used for financial analysis. The server exposes resources for discovering available tables and accounts in the ledger, making it easier for AI assistants to formulate relevant queries. Ideal for personal finance tracking, expense analysis, and generating financial reports from Beancount data without requiring direct access to the beanquery command-line tool."
variflight,variflight-mcp,1,,"Variflight MCP Server provides access to flight information services through a TypeScript implementation that connects to the Variflight API. Developed by Variflight, this server offers tools for querying flight schedules, tracking aircraft locations, retrieving airport weather forecasts, and analyzing flight comfort metrics. It requires an API key from Variflight's MCP platform and is designed for travel planning applications, flight tracking systems, and services that need real-time aviation data."
jamiew,spotify-mcp,1,,"Spotify-MCP connects Claude with Spotify, enabling control of music playback directly within conversations. Built by Varun Srivastava on top of the spotipy API, it allows users to start, pause, and skip playback, search for tracks/albums/artists/playlists, get detailed information about music content, and manage the Spotify queue. The implementation requires Spotify API credentials and premium subscription, making it ideal for users who want seamless music control without leaving their Claude interface. Despite recent API deprecations limiting some recommendation features, the project remains actively maintained with plans for playlist management and pagination support."
varunneal,spotify-mcp,200,,"This MCP server, developed by varunneal, provides integration between MCP clients and Spotify. Built on top of the Spotify API, it enables natural language control of Spotify playback, including starting, pausing, and skipping tracks. The server offers tools for searching and retrieving information about tracks, albums, artists, and playlists, as well as managing the Spotify queue. By bridging AI capabilities with Spotify's extensive music library and playback features, this implementation enhances music discovery and control through conversational interfaces. It is particularly useful for hands-free music management, AI-assisted playlist curation, and integrating music playback into broader AI-powered applications and workflows."
vast-ai-research,tripo-mcp,138,3751,"Tripo MCP provides a bridge between AI assistants and the Tripo 3D generation API, enabling the creation and manipulation of 3D models directly within conversation interfaces. Developed by VAST-AI-Research, this server implementation allows users to generate 3D assets from text descriptions, import models into Blender, and perform various operations on 3D objects through the Blender addon integration. The server exposes tools for creating models from text prompts, checking task status, importing GLB files, and manipulating scene objects - making it particularly valuable for 3D content creation workflows where users need to quickly prototype and visualize concepts without switching between applications."
HEAD,tracxn-mcp,0,,"Tracxn-MCP is a server implementation that provides AI assistants with access to Tracxn's startup and investment data platform. Developed by vatsal191201, this server exposes a comprehensive set of tools for searching companies, investors, transactions, acquisitions, and business models through the Tracxn API. The implementation handles authentication via access tokens, manages API rate limits, and transforms complex data structures into well-formatted responses. Particularly valuable for users who need to research startup ecosystems, track funding rounds, analyze investment trends, or gather competitive intelligence without leaving their AI assistant interface."
vazylin1124,mongo-mcp,0,3858,"MongoDB MCP server provides a bridge between AI assistants and MongoDB databases, enabling document querying and database connections through a standardized interface. Built with TypeScript and the MongoDB driver, it exposes tools for establishing database connections and executing find operations with configurable collection targeting, query conditions, and result limits. This implementation is particularly valuable for applications that need to access MongoDB data directly through AI assistants without manual database configuration."
veallym0n,mcpez,3,,"MCPEazy is a Python-based MCP server implementation that enables AI assistants to interact with multiple MCP-compatible services through a unified interface. It provides a proxy layer that can connect to both local command-line tools and remote services via SSE (Server-Sent Events), exposing their functionality as tools that can be discovered and called by AI assistants. The implementation includes a web UI for interaction, supports dynamic tool registration, and handles JSON-RPC communication between clients and underlying services. MCPEazy is particularly useful for developers who need to aggregate multiple tool providers into a single endpoint or want to create a custom gateway for AI assistants to access various services."
vectorinstitute,mcp-goodnews,33,,"MCP-GoodNews is a server that filters and ranks news articles based on their positivity, providing users with uplifting content from current headlines. Built by the Vector Institute, it integrates with NewsAPI to fetch top headlines and uses Cohere's LLM capabilities to analyze and rank articles according to their positive sentiment. The implementation features a clean architecture with comprehensive testing and CI/CD workflows, making it reliable for applications that need to surface good news amid potentially negative media cycles. The server exposes a single tool that retrieves headlines, processes them through the ranking system, and returns only the most positive stories to users."
vectorize-io,vectorize-mcp-server,40,1426,"Vectorize MCP Server provides a bridge between Claude and Vectorize.io's vector database services, enabling advanced retrieval, text extraction, and deep research capabilities. Built with TypeScript, it exposes three primary tools: vector search for retrieving relevant documents from pipelines, text extraction for converting various document formats to Markdown, and deep research for generating comprehensive analyses from document collections. The implementation handles authentication through organization IDs and API tokens, making it particularly valuable for knowledge management, document analysis, and research workflows that require sophisticated vector search capabilities without leaving the conversation interface."
veenastudio,flstudio-mcp,18,,"FL Studio MCP server that enables AI assistants like Claude to interact directly with FL Studio's MIDI and recording capabilities. Built in 3 days, this implementation uses a clever MIDI-based communication method to overcome API limitations, allowing live recording of notes, melodies, drum patterns, and tempo changes through encrypted MIDI messages. Designed to democratize music creation by bridging AI and digital audio workstations."
veoery,gh_mcp_server,3,,"Grasshopper MCP Server provides a bridge between Claude and Rhino/Grasshopper 3D modeling software, enabling parametric design and geometric analysis capabilities. Built by veoery, it supports both direct RhinoInside integration on Windows and cross-platform functionality through rhino3dm, allowing users to create, manipulate, and analyze 3D models through natural language prompts. The server includes tools for basic modeling operations, Grasshopper component manipulation, Python code generation, and file analysis, making it valuable for architects, designers, and engineers who want to leverage AI assistance in their 3D modeling workflows."
veriteknik,pluggedin-mcp,1,,"Plugged.in MCP Server acts as a proxy server that combines multiple MCP servers into a single unified interface. It fetches tool, prompt, and resource configurations from the plugged.in App and intelligently routes requests to the appropriate underlying MCP servers.
This proxy enables seamless integration with any MCP client (Claude, Cline, Cursor, etc.) while providing advanced management capabilities through the plugged.in ecosystem.
Key Features
Core Functionality
Universal MCP Compatibility: Works with any MCP client including Claude Desktop, Cline, and Cursor
Multi-Server Support: Connect both STDIO (command-line) and WebSocket (HTTP-based) MCP servers
Namespace Isolation: Keep joined MCPs separate and organized with proper prefixing
Multi-Workspace Layer: Switch between different sets of MCP configurations with one click
Real-time Updates: Dynamic updates of MCP configurations through the plugged.in App
Intelligent Routing: Automatically route tool calls to the appropriate underlying MCP server
Streamable HTTP Support: Implements the latest MCP specification for streaming responses
Advanced Visibility Features
Comprehensive Resource Management: Visibility and management of prompts, resources, and templates across all connected servers
Discovery Functionality: Detailed view of available servers and tools with comprehensive metadata
Collections Creation: Organize configurations for different clients like Claude Desktop, Cursor, or Cline
Playground Environment: Extensive debugging capabilities when building and testing MCP Servers
Direct Import: Collect and directly import favorite MCP servers"
vermaxvr,awsome_kali_mcpservers,2,,"Awesome Kali MCPServers provides a collection of MCP servers tailored for Kali Linux security tools, enabling AI agents to perform network analysis, binary examination, and security testing. The implementation wraps common security tools like nmap, objdump, strings, wireshark, and traceroute in a sandboxed Docker environment, allowing controlled execution with configurable resource limits and network access. Built with Python using the FastMCP framework, it creates a secure bridge between AI systems and powerful cybersecurity utilities, making it particularly valuable for reverse engineering, vulnerability assessment, and network traffic analysis workflows."
verodat,verodat-mcp-server,1,,"This MCP server, developed by Verodat, enables seamless integration between Verodat's data management platform and AI systems like Claude Desktop. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for account and workspace management, dataset operations, and AI-powered queries. The implementation focuses on exposing Verodat's capabilities through a standardized interface, offering functionality to create and query datasets with custom schemas. It's particularly useful for organizations looking to incorporate Verodat's data management features into their AI workflows, enabling use cases such as data validation, filtered querying, and AI-assisted data analysis without directly interacting with Verodat's API."
verssae,dbmcp,0,,"DBMCP is an MCP server that enables AI assistants to execute SQL queries on MSSQL databases and receive the results. Built with Python using the FastMCP framework and pymssql library, it exposes a single tool for executing queries against specified databases through a Server-Sent Events (SSE) interface. The implementation includes Docker containerization for easy deployment, environment variable configuration for database connections, and robust error handling. This server is particularly valuable for workflows requiring direct database access within AI assistant conversations, allowing data analysis and manipulation without requiring separate database tools."
vetlefo,claude-chunks,15,,"Claude Chunks, developed by vetlefo, is an MCP server designed to intelligently process large documents for optimal use with Claude's context windows. It breaks down extensive texts into meaningful sections, generates rich summaries, and maintains context between chunks. Built with TypeScript and leveraging the Model Context Protocol, this tool offers smart document chunking, section summarization, and context preservation. It integrates seamlessly with Claude Desktop, allowing users to efficiently analyze books, theses, or long papers. Claude Chunks stands out by focusing on Claude-specific optimizations and progressive processing, making it particularly useful for researchers, writers, and analysts working with large volumes of text who need to extract insights while maintaining document coherence."
veyrax,veyrax-mcp,24,,"This MCP server implementation provides a bridge to the Veyrax API, enabling AI agents to interact with Veyrax's services. Developed using TypeScript and Node.js, it utilizes the @modelcontextprotocol/sdk for MCP compatibility. The server is designed for use cases requiring integration with Veyrax's platform, such as accessing specialized AI capabilities or data services provided by Veyrax. It includes configuration for API key authentication and is containerized using Docker for easy deployment."
vgiri2015,ai-spark-mcp-server,0,,"AI-Spark-MCP-Server provides intelligent Apache Spark code optimization through Claude AI integration. It analyzes PySpark code and applies performance enhancements including query optimization, resource management improvements, and execution tuning - resulting in significant performance gains (up to 74% faster execution in examples). The server exposes tools for code optimization and performance analysis via the MCP protocol, making it valuable for data engineers looking to improve Spark job efficiency without manual code refactoring."
vgnshiyer,apple-books-mcp,2,3510,"Apple Books MCP is a server implementation that provides AI assistants with access to Apple Books library data, including collections, books, and annotations. Developed by Vignesh Iyer, this Python-based server leverages the py-apple-books library to expose a comprehensive set of tools for retrieving and searching book highlights, notes, and collections. The implementation includes features for filtering annotations by color, searching highlighted text, and accessing recent reading activity. It's particularly useful for summarizing book highlights, organizing reading materials, comparing notes across different books, and generating personalized book recommendations based on reading history."
volteditor,mcp.chroma,1,,"MCP-Chroma is a server implementation that provides AI assistants with direct access to ChromaDB vector database capabilities for semantic search and document management. Developed by viable, this Rust-based server exposes ChromaDB operations through standardized tools for creating and managing collections, adding and retrieving documents, and performing similarity searches with customizable parameters. The implementation includes configuration options for different client types (HTTP, cloud, persistent, or ephemeral) and handles environment variable management, making it particularly useful for applications requiring vector embeddings storage, retrieval, and semantic search functionality without implementing alternative solutions."
vic563,memgpt-mcp-server,21,,"This TypeScript-based MCP server implements a memory system for LLMs, enabling conversation history management across multiple providers. Developed as an open-source project, it offers tools for chatting, retrieving and clearing memory, and switching between LLM providers and models. The implementation supports OpenAI, Anthropic, OpenRouter, and Ollama, with a focus on the latest Claude models. It uses SQLite for persistent storage and includes features like unlimited memory retrieval. This server is particularly useful for building AI assistants that require long-term memory, multi-provider flexibility, and seamless model switching, making it suitable for applications in customer support, content creation, and interactive AI experiences."
vidhupv,x-mcp,48,3763,"This MCP server, developed by vidhupv, enables AI assistants like Claude to create, manage, and publish posts on X/Twitter directly. Built in Python, it provides a simple interface for composing tweets, creating threads, managing drafts, and publishing content. The implementation stands out by offering seamless integration with the X/Twitter API, allowing AI systems to interact with the social media platform programmatically. By connecting AI capabilities with Twitter's functionality, this server enables AI assistants to engage in social media management tasks. It is particularly useful for automating social media workflows, scheduling posts, analyzing engagement, and building AI-powered social media management tools."
vignesh-codes,ai-agents-mcp-pg,15,,"This PostgreSQL MCP server, developed by Anthropic, provides read-only access to PostgreSQL databases for AI models. Built with TypeScript and leveraging the pg library, it offers tools for executing SQL queries and retrieving schema information. The implementation focuses on security by enforcing read-only transactions and omitting sensitive connection details. It's particularly useful for AI assistants or applications needing to analyze database structures, execute complex queries, or integrate PostgreSQL data into their workflows without requiring direct database access or deep SQL knowledge."
vikrant-khedkar,api-tester-mcp,0,,"This MCP server implementation provides a set of tools for testing and interacting with various APIs, including a dedicated integration with OpenAI's APIs. Developed by Vikrant-Khedkar, it offers functionality for making HTTP requests, generating text with GPT models, and creating images with DALL-E. The server is designed for use cases requiring API testing, OpenAI service integration, or general HTTP request handling within AI-assisted applications."
vinayak-mehta,mcp-browser-use,56,13831,"The MCP Browser-Use server connects any MCP client (like Claude or Cursor) with the browser-use library, allowing AI assistants to interact with web browsers. Unlike other browser-use MCPs that require purchasing a separate LLM API key, this implementation by Vinayak Mehta leverages the LLM already configured in your MCP client. It enables web browsing capabilities through a simple command (uvx mcp-browser-use) that can be added to MCP client configurations, making it ideal for users who want to give their AI assistants web access without additional API costs."
vinayak-mehta,gmail-mcp,4,4498,"This MCP server implementation provides a bridge to Gmail, allowing AI assistants to search, retrieve, and interact with email content. Developed by Vinayak Mehta, it offers tools for authenticating with Google's API, executing email searches, and fetching full message content. The server is designed for use cases requiring natural language interactions with email data, such as summarizing inbox contents, finding specific messages, or analyzing communication patterns."
vinayak-mehta,linear-mcp,6,,"Linear MCP provides a Model Context Protocol server for Linear's issue tracking and project management platform. Developed by Vinayak Mehta, it offers resources for accessing issues, teams, users, and organization data through URI-based endpoints. The server exposes five tools for creating, updating, and searching issues, retrieving user-assigned tasks, and adding comments. It requires a Linear API key for authentication and can be run directly from GitHub using uvx, making it ideal for teams wanting to integrate Linear's project management capabilities with AI assistants."
vinayak-mehta,mcp-sonic-pi,8,1094,"MCP-Sonic-Pi provides a bridge between AI assistants and the Sonic Pi music programming environment, enabling the creation and control of musical compositions through code. The server exposes tools to initialize connections with Sonic Pi, play music using Ruby code, stop playback, and access pre-defined beat patterns for various musical styles. Built by Vinayak Mehta, this implementation checks if Sonic Pi is running locally, communicates via OSC protocol using the psonic library, and is particularly useful for music creation, education, and live coding scenarios where AI assistants can help generate and manipulate musical elements programmatically."
vincentf305,mcp-server-deepseek,2,,"This MCP server, developed by vincentf305, enables integration between Claude Desktop and Deepseek models. Built with Python and Docker, it provides a bridge for Claude to leverage Deepseek's AI capabilities through a simple API. The implementation focuses on ease of setup and configuration, with features like environment variable management and Docker containerization. It's particularly useful for users wanting to extend Claude's functionality with Deepseek's models, enabling use cases such as enhanced language processing, specialized task completion, or access to Deepseek-specific features without directly interacting with the Deepseek API."
vincentf305,mcp-server-ollama,1,,"This MCP server for Ollama, developed as an open-source project, enables Claude Desktop to communicate with Ollama LLM servers. Built with Python and FastAPI, it provides a bridge between the Model Control Protocol and Ollama's API, allowing seamless integration of Ollama's language models into MCP-compatible applications. The implementation focuses on simplicity and ease of deployment, with Docker support for containerization. It's particularly useful for developers and researchers looking to leverage Ollama's local LLM capabilities within the MCP ecosystem, enabling use cases like AI-assisted writing, code generation, and data analysis without relying on cloud-based language models."
vinsidious,mcp-pg-schema,3,,"This MCP server provides read-only access to PostgreSQL databases, allowing AI models to inspect database schemas and execute read-only queries. It offers tools for querying and retrieving schema information, automatically discovering table structures from database metadata. The implementation is designed to work seamlessly with the Claude Desktop app, supporting both Docker and NPX deployment options. It's particularly useful for scenarios where AI assistants need to analyze database structures or perform data exploration tasks without risking data modification."
virajsharma2000,mcp-websocket,12,,"This MCP server implementation combines a standard MCP server with WebSocket functionality to enable real-time data updates. Developed by Viraj Sharma, it runs an MCP server on port 8080 for handling standard requests, while a WebSocket server on port 8765 allows clients to subscribe to and receive push notifications for new data. The server utilizes asyncio for efficient asynchronous operations, making it suitable for applications requiring both traditional MCP interactions and real-time data streaming capabilities."
vishalmysore,choturobo,24,,"ChotuRobo is a robotic control system that enables voice and text commands to control physical hardware through a multi-tiered architecture. The implementation connects Claude AI for natural language processing with an ESP32 microcontroller that manages Arduino components including LEDs, buzzers, stepper motors, and various sensors. It features a Model Context Protocol server written in TypeScript that processes commands and communicates with the hardware via WiFi, allowing for operations like motor movement, speech synthesis, and sensor readings. Designed for educational and home environments, ChotuRobo demonstrates how AI assistants can interact with and control physical devices through standardized interfaces."
vishalsachdev,canvas-mcp,0,,"This MCP server implementation provides a bridge to the Canvas Learning Management System API, enabling AI assistants to interact with course data, assignments, and user information. Developed by Vishal Sachdev, it offers tools for listing courses, managing assignments, and accessing course resources. The server includes caching mechanisms for improved performance and is designed for educational use cases such as course management, assignment tracking, and student engagement analysis."
vishalsachdev,eventbrite-mcp,1,,"Eventbrite MCP Server provides a bridge to the Eventbrite API, enabling AI assistants to manage and analyze event data directly within conversations. Built by Vishal Sachdev, it offers tools for listing events with filtering options and retrieving detailed event information through a TypeScript implementation that handles authentication and data transformation. The server includes a test client for development and a web-based events viewer for browsing retrieved events, making it particularly valuable for event organizers who need to monitor upcoming events, analyze attendance data, or manage event details without leaving their conversation interface."
vishwajeetdabholkar,eget_mcp,2,,"This MCP server connects Claude for Desktop to a locally running eGet web scraper, enabling Claude to retrieve and process web content through a local API. Built with Python using FastMCP and httpx, it provides two main tools: a basic scraper for retrieving website content in markdown format, and an advanced scraper with additional options like mobile user agent simulation and custom headers. The implementation handles API communication with proper error management and offers flexible content retrieval options, making it particularly useful for AI-assisted web research, content summarization, and data extraction without requiring direct internet access from Claude."
vitalydv,mysql-mcp,1,,"MySQL MCP Server provides a bridge between AI assistants and MySQL databases, allowing for structured data retrieval and schema exploration. This implementation exposes three main tools: executing read-only SQL queries (SELECT, SHOW, EXPLAIN, DESCRIBE), retrieving table schemas, and listing all tables in a database. The server connects to MySQL instances using environment variables for configuration and limits table data retrieval to 100 rows per request, making it suitable for applications that need to analyze database structure or extract specific data subsets without modifying the underlying database."
vivek1612,mongodb-mcp,0,,"MongoDB MCP Server provides a bridge between Claude and MongoDB databases, enabling direct interaction with collections, documents, and indexes. Built with TypeScript and the MongoDB Node.js driver, it offers tools for querying documents, inserting, updating, and deleting records, as well as managing indexes. The server connects to any MongoDB instance using a standard connection URL and exposes a set of specialized tools that follow MongoDB's query syntax. This implementation is particularly useful for data exploration, database management, and integrating MongoDB operations directly into Claude conversations without requiring manual query construction."
vivekhaldar,emacs-mcp-server,3,,"Emacs MCP Server enables AI assistants to interact with a running Emacs process, providing tools to generate and execute Elisp code. It leverages the smartfunc library with GPT-4o to create contextually appropriate Elisp solutions, and uses emacsclient to evaluate code in the active Emacs instance. This implementation allows AI models to perform complex Emacs operations like buffer manipulation, text editing, and configuration changes without requiring users to write Elisp themselves."
vivekvells,mcp-pandoc,157,28886,"This MCP server, developed by Vivek Vells, provides document format conversion using Pandoc. It exposes tools to transform content between formats like plain text, Markdown, and HTML while preserving structure and formatting. By leveraging the Pandoc Python package, this implementation enables AI assistants to seamlessly convert documents without requiring complex setup. It is particularly useful for scenarios involving document processing, content migration, or generating formatted outputs from raw text inputs. The server is designed for easy integration into AI workflows and is actively being expanded to support additional formats like PDF."
vj-presidio,specif-ai-mcp-server,0,1016,"This MCP server implementation, developed by vj-presidio, provides a bridge for AI assistants to interact with specific AI services over stdio. Built with TypeScript and integrating the Model Context Protocol SDK, it focuses on secure API key management and error handling. The server is designed for easy setup and deployment, with support for both npm and Bun package managers. It includes features like version checking, help commands, and project path setting. The implementation is particularly useful for applications requiring standardized communication between AI models and external services, offering a flexible foundation for various AI integration scenarios."
v0v1kkk,dotnetmetadatamcpserver,2,,"A .NET metadata exploration server that provides AI coding agents with detailed type information from .NET projects. Built by Vladimir Rogozhin, it enables systematic exploration of assemblies, namespaces, and types through reflection, with robust filtering and pagination. Particularly valuable for AI assistants needing to understand complex .NET library APIs without manual documentation review."
vladimir-tutin,plex-mcp-server,5,,"Plex MCP Server provides AI assistants with direct access to Plex media servers through a comprehensive set of tools for browsing, searching, and managing media libraries. It enables querying recently added content, retrieving on-deck items, editing metadata, managing posters, and even controlling media playback on Plex clients or external players. The implementation handles authentication through various methods (direct token, username/password), maintains persistent connections with automatic reconnection, and includes robust error handling - making it particularly valuable for users who want to manage their media libraries, update metadata, or control playback without leaving their conversation interface."
vlttnv,k8s-mcp,3,,"This MCP server implementation provides a read-only interface for querying Kubernetes clusters. Developed by Valentin Tunev, it offers tools for retrieving detailed information about namespaces, pods, nodes, deployments, services, and events. The server is particularly useful for monitoring cluster health, troubleshooting issues, and gathering insights on resource utilization across Kubernetes environments."
vortiago,mcp-azure-devops,24,5279,"MCP Azure DevOps Server provides a bridge between AI assistants and Azure DevOps services, enabling natural language interactions with work items, projects, and teams. The implementation uses the Azure DevOps Python API to expose capabilities through tools that query work items using WIQL, retrieve project information, and manage team resources. It authenticates via Personal Access Tokens stored in environment variables and formats responses in a structured, readable format. Ideal for developers and project managers who want to integrate Azure DevOps workflows into AI-powered conversations without navigating the complex Azure DevOps interface directly."
vortiago,mcp-outline,7,3985,"MCP Outline Server enables AI assistants to interact with Outline document services, providing a bridge between natural language interactions and Outline's document management capabilities. The server implements tools for document search, collection management, reading and editing documents, managing comments, and handling backlinks. Built with FastMCP, it requires an Outline account with API access and supports both cloud-hosted and self-hosted Outline instances, making it valuable for teams that need to integrate AI assistants with their knowledge management workflows."
voska,hass-mcp,46,,"Hass-MCP enables AI assistants like Claude to interact directly with Home Assistant smart home systems through the Model Context Protocol. Built by Matt Voska, it provides tools for querying device states, controlling lights and switches, summarizing smart home configurations, troubleshooting automations, and searching for specific entities. The implementation runs as a Docker container that communicates with Home Assistant via its API, making it ideal for users who want to manage their smart home through natural language conversations without leaving their AI assistant interface."
mendableai,firecrawl-mcp-server,2524,148800,"This MCP server, developed by vrknetha, integrates with FireCrawl to provide advanced web scraping capabilities. It implements tools for extracting content from JavaScript-heavy websites, supporting mobile and desktop views, handling rate limits, and outputting multiple formats including HTML, Markdown, screenshots, and raw text. The server exposes functions for single URL scraping, batch processing, and job status checking. By leveraging FireCrawl's infrastructure, this implementation enables AI assistants to easily incorporate web data into their responses. It is particularly useful for scenarios requiring structured data extraction from complex web pages, such as market research, content aggregation, or generating reports from online sources."
vrtejus,pymol-mcp,10,,"PyMOL MCP Server enables AI assistants to interact with the PyMOL molecular visualization software through a socket connection. Built by Vishnu Rajan Tejus, it provides a comprehensive set of tools for molecular visualization, viewing operations, file handling, and structural analysis. The server parses natural language commands into PyMOL-compatible Python code, executes them via a socket connection, and returns the results. This implementation is particularly valuable for researchers and scientists who need to manipulate and analyze molecular structures directly within their AI assistant conversations without switching contexts."
vulh1209,context-bank-mcp,0,,"Context Bank MCP provides a bridge to the AtherOS knowledge base, enabling AI assistants to perform semantic document searches through a standardized MCP tool. Built by Vu Le, it allows querying a knowledge base via a document-search endpoint that returns relevant document content and links, with configurable retrieval options and semantic search capabilities."
vurtnec,mcp-jira,3,,"This Jira MCP server, developed by Vurtnec, enables seamless integration between Large Language Models and Jira project management software. Built with TypeScript and leveraging the Jira API, it provides tools for retrieving issue details, with potential for expansion to other Jira operations. The implementation features robust error handling, secure credential management, and easy setup through command-line arguments. It's particularly useful for AI assistants or applications needing to access Jira data programmatically, enabling tasks like project status reporting, issue tracking, or automated workflow management in software development and project management contexts."
vurtnec,mcp-lancedb-node,0,,"LanceDB-node is an MCP server that provides vector search capabilities using LanceDB and Ollama's embedding model. Developed by Vurtnec, it enables AI assistants to perform similarity searches on vector databases through a set of tools for adding vectors, searching by text or vector, and listing tables. The server connects to a local LanceDB database and uses Ollama for text-to-vector embedding conversion, making it particularly valuable for RAG (Retrieval Augmented Generation) applications where AI assistants need to search through document collections without switching context."
waifuai,mcp-traits-matcher,1,,"A personality analysis server built using FastMCP that enables creating, tracking, and matching personality traits for individuals. The implementation provides tools to add descriptions to people, create trait profiles, and find job candidates by analyzing personality dimensions like friendliness and dominance. Useful for HR matching, personality profiling, and understanding interpersonal dynamics through a data-driven approach."
waifuai,mcp-waifu-queue,1,,"MCP Waifu Queue implements a server for a conversational AI 'waifu' character using a Redis queue system for handling concurrent text generation requests. Developed by WaifuAI, it leverages the FastMCP library to provide a clean API interface while using distilgpt2 for text generation with optional GPU acceleration. The architecture separates concerns between queue management, worker processing, and text generation services, making it efficient for handling multiple simultaneous requests while maintaining responsiveness in conversational AI applications."
fishcode2025,mcp-sqlite,3,,"This SQLite-based MCP server implementation, developed by waitfish, provides a robust database backend for MCP applications. It leverages the Rust programming language and integrates with the mcp-core and mcp-server libraries to offer efficient data storage and retrieval capabilities. The implementation is designed for use cases requiring local, file-based databases with SQL querying support, making it suitable for embedded systems, desktop applications, or small-scale server deployments where a lightweight yet powerful database solution is needed."
199-bio,mcp-wait-timer,0,2177,"MCP Wait Timer Server provides a simple 'wait' tool that introduces deliberate pauses into AI workflows, solving the problem of sequential operations that need time to complete their effects. Developed by Boris Djordjevic at 199 Longevity, this TypeScript implementation allows users to specify pause durations in seconds, ensuring time-dependent operations like web page rendering, background processes, or API calls have sufficient time to complete before the AI proceeds to subsequent steps. The server integrates with MCP clients like Claude Desktop, Cline, and Cursor through a straightforward npx installation process."
waldur,waldur-mcp-server,1,,"This Waldur MCP server, developed by OpenNode LLC, integrates the Model Context Protocol with the Waldur cloud management platform. Built with Python and leveraging the MCP SDK, it enables AI agents to interact with Waldur's API for cloud resource management and orchestration. The implementation focuses on providing a bridge between natural language commands and Waldur's functionality, allowing operations like provisioning, monitoring, and billing of cloud resources across multiple providers. It's particularly useful for organizations looking to enhance their cloud management workflows with AI capabilities, enabling use cases such as automated resource allocation, intelligent cost optimization, and AI-assisted cloud governance without directly dealing with the complexities of Waldur's API."
wallisking1991,outlook-mcp-server,8,,"The Outlook MCP Server provides AI assistants with direct access to Microsoft Outlook email functionality through a standardized interface. It enables reading, searching, and managing emails by exposing tools for folder management, email listing, detailed content viewing, searching by keywords with OR operators, composing new messages, and replying to existing emails. Built for Windows environments with Python and requiring an active Outlook installation, this implementation bridges the gap between AI assistants and email management, making it valuable for workflows where email interaction is needed without leaving the conversation context."
walteh,cloudstack-mcp,1,,"CloudStack MCP is a server implementation that enables AI assistants to interact with Apache CloudStack infrastructure through a standardized interface. Built in Go, it translates natural language requests into CloudStack API calls, allowing for VM deployment, resource management, and infrastructure operations without requiring direct API knowledge. The server supports both SSE and stdio communication modes, includes comprehensive logging, and provides dynamic tool generation based on the CloudStack API. This implementation is particularly useful for DevOps teams managing cloud infrastructure who want to leverage AI assistants for infrastructure management tasks."
HEAD,weather,0,,"Weather MCP server provides real-time weather data access for Claude, enabling queries for current conditions, forecasts, and historical weather information. Built with Python 3.13 and the MCP framework, it uses httpx for API communication and runs as a persistent HTTP service on port 8000. The implementation allows Claude to retrieve weather information directly within conversations, making it useful for travel planning, outdoor activity scheduling, and location-based decision making without requiring users to check external weather sources."
wangle201210,dify-retriever-mcp,6,,"Dify Retriever MCP is a Go-based server implementation that integrates with Dify's dataset retrieval capabilities through the Model Context Protocol. This server exposes Dify's retrieval functionality as a tool that can be discovered and executed by AI assistants, allowing them to query and retrieve information from Dify datasets. Built using the mark3labs MCP-Go framework, it supports both resource and prompt capabilities, making it suitable for applications that need to incorporate knowledge base retrieval into AI-powered workflows without directly managing the Dify API integration details."
wangmhaha,apifox-mcp-server,1,3128,"Apifox MCP Server provides a bridge between Claude and the Apifox API testing platform, enabling AI assistants to interact with API documentation and testing capabilities directly within conversations. The server requires configuration of an Apifox API key and project ID through environment variables, and runs as either a CLI tool or HTTP server. Built with TypeScript and Express, it leverages the Model Context Protocol SDK to expose Apifox's functionality as tools that Claude can use. This implementation is particularly valuable for developers who need to reference, test, or modify API specifications without leaving their conversation interface."
wangrzneu,ucloud-mcp-server,0,,"UCloud MCP Server provides a bridge to the UCloud cloud computing platform, enabling AI assistants to interact with cloud infrastructure through standardized MCP tools. Built with Go and the UCloud SDK, it supports operations like listing instances, retrieving instance metrics, and checking instance status across different cloud resources. Particularly useful for developers and DevOps teams who want programmatic, conversational access to cloud instance management."
wangtsiao,pulse-cn-mcp,0,,"MCP-WeiboHot-Server provides real-time access to trending topics from Weibo, China's popular microblogging platform. Built with TypeScript and Node.js, it leverages the Model Context Protocol to make Weibo hot search data available to AI assistants. The implementation is containerized using Docker for easy deployment, with proxy configuration options to handle network restrictions. The server is designed to run as a standalone service that can be integrated into conversation workflows requiring up-to-date information about trending topics and social media discussions in the Chinese internet ecosystem."
wangyafu,haiguitangmcp,3,2036,"A puzzle-solving MCP server that hosts a collection of lateral thinking puzzles from the 'Haiguitang' (海龟汤) tradition, a popular Chinese puzzle format similar to 'situation puzzles' or 'yes/no games.' The server provides access to over 30 puzzles stored as markdown files, allowing AI assistants to facilitate interactive puzzle-solving experiences where users ask yes/no questions to uncover the solution to mysterious scenarios. Built with Python 3.12 and the MCP framework, this implementation enables engaging critical thinking exercises and collaborative problem-solving activities."
warashi,mcp-server-pipecd,1,,"MCP-Server-PipeCD provides a bridge between Claude and PipeCD, a continuous delivery platform for Kubernetes and cloud-native applications. Built by Warashi, this server enables AI assistants to interact with PipeCD's API to list applications, view deployments, and access detailed information about deployment artifacts and stages. The implementation uses the Model Context Protocol to expose PipeCD resources through custom URI templates and provides tools for querying application status, deployment history, and configuration details. This integration is particularly valuable for DevOps workflows where users need to monitor deployment status, troubleshoot issues, or analyze application configurations without switching context to the PipeCD dashboard."
warpdev,mcp-hub-mcp,3,332,"MCP Hub Server acts as a central connection point for managing multiple MCP servers, allowing AI assistants to interact with various tools through a unified interface. Developed by Uhyeon Park, this TypeScript implementation loads server configurations from a JSON file and provides tools to list available capabilities across all connected servers and route tool calls to the appropriate destination. The server uses stdio transport for communication and includes automatic connection management, making it particularly useful for orchestrating complex workflows that require tools from multiple specialized MCP servers without having to manage individual connections."
warzuponus,mcp-jira,6,,"This JIRA integration server enables AI language models to interact with JIRA tasks and workflows through the Model Context Protocol (MCP) specification. Developed by the MCP JIRA Server Contributors, it provides a standardized interface for AI applications to manage JIRA issues, including creating, updating, and searching issues using JQL. The server leverages the jira-client library for API integration and offers MCP-compliant tools, resource templates, and real-time updates via SSE. It is designed for use cases such as automated project management, AI-assisted task tracking, and intelligent workflow optimization in JIRA-based environments. The implementation stands out with its focus on AI-JIRA interaction and its integration with the broader MCP ecosystem."
wasdubya,x64dbgmcp,1,,"x64dbgMCP is a plugin for x64dbg that implements the Model Context Protocol, enabling AI assistants like Claude to interact with the debugger through HTTP requests. The plugin currently supports four core functions from the x64dbg SDK: executing console commands, checking if debugging is active, retrieving module lists, and finding memory base addresses. Developed by Wasdubya as their first repository, it aims to simplify dynamic analysis by allowing users to control x64dbg through natural language conversations with LLMs. The implementation includes both a C++ plugin component and a Python client script that bridges Claude Desktop with the debugger."
watchdealer-pavel,deepl-mcp-server,2,,"DeepL MCP Server provides high-quality text translation capabilities by interfacing with the DeepL API. This TypeScript implementation exposes two main tools: 'translate_text' for translating strings between supported languages, and 'list_languages' for retrieving available language options. The server handles API authentication, request validation using Zod schemas, and comprehensive error handling for various failure scenarios. It's particularly useful for AI assistants that need to perform accurate translations across multiple languages without requiring users to interact directly with the DeepL API."
watchdealer-pavel,watchbase-mcp-server,1,,"WatchBase MCP Server provides structured access to the WatchBase Data Feed API, enabling AI assistants to query comprehensive watch metadata including brands, collections, reference numbers, and technical details. Developed by watchdealer-pavel, this TypeScript implementation exposes six specialized tools that map directly to WatchBase API endpoints, handling authentication and error management behind the scenes. The server requires a WatchBase API key passed as an environment variable and returns standardized JSON responses, making it particularly valuable for watch enthusiasts, collectors, or retailers who need to access detailed horological information through AI assistants."
watsonchua,poker_win_calculator,0,,"Poker Win Calculator provides tools for analyzing poker hands and calculating win probabilities through Monte Carlo simulations. Built with Python using the FastMCP framework, it offers the 'analyse_poker_cards' function that evaluates a player's hand against community cards and potential opponent hands, providing win probability percentages and strategic action recommendations. The implementation also includes a secondary tool for determining optimal moves in Nim games, making it useful for both poker strategy development and game theory applications."
wavelovey,pubmed_search,2,,"This PubMed search MCP server, developed by wavelovey, enables AI assistants to query and analyze biomedical literature from the PubMed database. It leverages the Biopython library to interface with PubMed's E-utilities, allowing for complex search queries, retrieval of article metadata, and extraction of abstracts. The implementation is built in Python 3.11+ and uses modern dependencies like httpx and mcp. It's designed for researchers, medical professionals, and AI developers who want to incorporate up-to-date biomedical information into their workflows, enabling natural language interactions with the vast PubMed repository for literature reviews, staying current with research trends, or supporting evidence-based decision making."
wayazi,mcp_file_system,3,,"A filesystem operations MCP server that provides secure access to files and directories through a standardized interface. Developed by Wayazi, it features robust path validation to ensure operations only occur within allowed directories specified at startup. The server implements essential file operations (read/write), directory management (create/list/delete), file movement, metadata retrieval, and search capabilities with pattern matching. Containerized with Docker for easy deployment, it's designed for AI assistants that need controlled access to filesystem resources while maintaining security boundaries."
waynecui,wireshark_mcp,1,,"This is a MCP (Model Context Protocol) server for connecting to Wireshark, providing the following features:

Connect to the local Wireshark instance
Provides tools for running Wireshark commands
Contains tips for common data filtering tasks
"
wazzan,mcp-coincap-jj,0,658,"MCP-CoinCap-JJ provides real-time cryptocurrency data and analysis through CoinCap's API v3. Forked from Tracey Russell's original project by wazzan, this implementation updates the integration to use CoinCap's newer API version (as v2 is being deprecated) and includes tools for price tracking, market analysis, and historical trends. The server requires a CoinCap API key for access and is designed for users interested in cryptocurrency price monitoring and market intelligence."
crazyrabbitltc,mcp-snapshot-server,0,,"This MCP server, developed as a quickstart example, provides weather data integration using the National Weather Service API. Built with Python and TypeScript versions, it offers tools for retrieving weather alerts by state and forecasts by coordinates. The implementation focuses on demonstrating core MCP concepts like tool definition, request handling, and data formatting. It's designed to work with Claude for Desktop or custom MCP clients, making it useful for developers learning MCP server creation or applications needing basic weather information access through a standardized interface."
saintdoresh,weather-mcp-claudedesktop,3,,"The Weather MCP Tool provides real-time weather data, forecasts, and historical weather information using the OpenWeatherMap API, specifically designed for Claude Desktop. Built with Python using the FastMCP framework, it offers six specialized tools for retrieving current weather conditions, 5-day forecasts, air quality information, historical weather data, location search, and weather alerts. The implementation includes proper error handling, rate limit considerations, and detailed documentation for integration with Claude Desktop. It's particularly valuable for users who need accurate weather information within AI assistant conversations without switching to separate weather applications."
weaviate,mcp-server-weaviate,79,,"Bring intuitive AI-native applications to life with less hallucination, data leakage, and vendor lock-in with the open source vector database developers love."
webcoderz,mcp-geo,15,,"This MCP geocoding server, developed by webcoderz, provides a flexible interface for location-based operations using various geocoding services. Built with Python and leveraging the geopy library, it offers tools for forward and reverse geocoding, with support for Nominatim, ArcGIS, and Bing providers. The server implements rate limiting and error handling to optimize API usage across multiple geocoding requests. Key features include single and batch geocoding operations, detailed address information retrieval, and configurable provider selection. By abstracting the complexities of geocoding APIs, it enables AI systems to easily perform location-based tasks. This implementation is particularly valuable for applications requiring flexible geocoding capabilities, facilitating use cases such as address validation, location-based analytics, and mapping services."
orange-fruit01,mcp-test-run,0,,"This MCP service provides a web crawling tool for Cursor and Claude applications, allowing AI assistants to extract content from websites in markdown format. Built using the FastMCP framework and Crawl4AI library, it's containerized with Docker for easy deployment on Render.com and includes a health check endpoint for monitoring. The implementation is designed to be easily connected to Cursor or Claude through their respective settings interfaces, making it ideal for workflows requiring web content analysis without leaving the conversation interface."
webdevtodayjason,slim-mcp,0,,"This MCP server implementation provides a suite of utility tools accessible via RESTful API endpoints. Developed by Jason Brashear, it integrates various services including weather data, email sending, task management, currency conversion, and calendar functions. The server also implements the Cursor Model Context Protocol, enabling seamless integration with Cursor for enhanced context-aware capabilities. It's designed for developers looking to incorporate diverse utility functions into their applications through a unified API interface."
webflow,mcp-server,17,,A Model Context Protocol (MCP) server implementation for Webflow that allows AI assistants to interact with Webflow sites and data.
maoxiaoke,mcp-copy-web-ui,1,90,"Web UI inspiration tool that downloads and inlines complete webpage content, including CSS and resources, making entire web pages available for AI analysis. Captures full HTML structure, removes scripts and event handlers, and converts external resources to base64 for seamless integration with AI tools."
weidwonder,crawl4ai-mcp-server,68,,"This MCP server, developed by WeiDwonder, provides integration with Google Custom Search Engine for web crawling and search capabilities. Built with Python and leveraging libraries like Playwright and BeautifulSoup, it offers tools for automated web scraping, content extraction, and search result parsing. The implementation focuses on providing a standardized interface for AI-powered web crawling, enabling use cases such as data collection, content aggregation, and search engine development. By connecting AI models with Google's search infrastructure, this server allows for sophisticated web crawling scenarios, enhancing the ability to gather and analyze online information at scale."
weidwonder,terminal-mcp-server,4,,"Terminal MCP Server provides a bridge for AI assistants to execute commands in a terminal environment, supporting both standard I/O and Server-Sent Events (SSE) communication modes. The implementation includes SSH capabilities for remote execution and a flexible configuration system that allows users to specify connection parameters such as port, endpoint, and host when running in SSE mode. Built with TypeScript and packaged in a Docker container, this server enables AI assistants to perform system operations, run scripts, and interact with command-line tools directly from conversation interfaces."
weirdbrains,onesignal-mcp,1,,"The OneSignal MCP server provides a comprehensive interface for managing push notifications, emails, and SMS through the OneSignal REST API. Developed by Weirdbrains, this implementation supports all major OneSignal operations including sending notifications, managing user devices, creating segments, and working with templates. A key feature is its multi-app support, allowing users to configure and switch between multiple OneSignal applications within a single server instance. The server includes robust error handling, detailed logging, and organization-level operations through the OneSignal Organization API Key, making it ideal for developers who need to manage notifications across multiple applications or platforms."
welkon,openwebui-server,5,,"OpenWebUI Server provides a bridge between Claude and OpenWebUI's API, enabling AI assistants to interact with document-based RAG capabilities. The implementation exposes tools for uploading files and performing RAG-enhanced chat queries against OpenWebUI's backend, with configurable file and collection targeting. Built using the Model Context Protocol SDK, it runs on stdio transport for seamless integration with Claude Desktop, handles authentication through environment variables, and includes robust error handling for API interactions - making it particularly valuable for workflows that require document-based context without leaving the conversation interface."
wenb1n-dev,mysql_mcp_server_pro,8,,"MySQL MCP Server Pro is a Python-based implementation that provides AI assistants with direct access to MySQL databases through both STDIO and SSE modes. It supports advanced features like multiple SQL execution, table metadata querying based on comments, SQL execution plan analysis, and Chinese field to pinyin conversion. The server can be configured through environment variables or a .env file, making it flexible for different database connections. It's particularly useful for AI agents that need to perform database operations, generate SQL queries, or analyze database structures without requiring users to write complex database interaction code."
wenhuwang,mcp-k8s-eye,10,,"mcp-k8s-eye is a Kubernetes management and analysis tool that connects to clusters through the Model Context Protocol. Developed by wenhuwang, it provides capabilities to list, get, delete, and analyze pods, execute commands within containers, and retrieve pod logs. The tool is designed to be integrated with MCP servers, making it accessible for monitoring and managing Kubernetes workloads directly through conversation interfaces. Future development plans include expanding functionality to support services, deployments, ingress, nodes, and cluster-wide analysis."
freestylefly,mcp-server-weread,2,,"mcp-server-weread is a TypeScript implementation that provides seamless integration between Claude Desktop and WeRead, a popular e-book platform. The server enables AI assistants to access book content, user highlights, and annotations through WeRead's API, with features for efficient cache management to improve performance. This implementation is particularly useful for research workflows, literature analysis, and knowledge management tasks where users need to reference or discuss book content with AI assistance."
wesnermichel,nexus-mcp-claude-desktop-server,6,,"This lightweight VSCode extension serves as a bridge between Claude Desktop and VSCode workspaces using the Model Context Protocol (MCP). It enables Claude to access and manipulate files within specified directories of the VSCode environment, supporting operations like reading, writing, and directory management. The extension is designed for developers who want to integrate Claude's capabilities directly into their VSCode workflow while maintaining control over file system access."
westernconcrete,jfk-mcp,0,790,"JFK MCP is a server that provides AI assistants with access to JFK assassination documents through the Archives API. It offers tools for text search, vector search, metadata filtering, and document retrieval (both text and images) of declassified files released between 2017-2025. The implementation uses TypeScript and the Model Context Protocol SDK to expose a set of tools that handle various search operations with customizable parameters, making it valuable for researchers and historians who want to explore JFK-related government documents without leaving their AI assistant interface."
westsideori,cursor-a11y-mcp,0,,"This MCP server, developed by westsideori, provides accessibility testing capabilities for web applications. Built using Node.js and leveraging Puppeteer, it offers tools for automated accessibility checks and reporting. The implementation focuses on integrating accessibility testing into AI-assisted workflows, enabling AI models to perform and analyze accessibility audits. By connecting AI assistants with web accessibility tools, this server facilitates scenarios like automated WCAG compliance checks, accessibility issue detection, and generating remediation suggestions. It's particularly valuable for developers and organizations aiming to improve web accessibility through AI-powered testing and analysis."
wh0am123,mcp-kali-server,10,,"This MCP-Kali-Server implementation provides a bridge between AI assistants and Kali Linux penetration testing tools through a REST API. Developed by Yousof Nahya, it consists of two main components: a Flask-based server (kali_server.py) that executes security tools like nmap, gobuster, and metasploit on a Kali Linux system, and a client (mcp_server.py) that exposes these capabilities as MCP tools. The server handles command execution with timeout management and proper error handling, while the client provides a structured interface for AI agents to perform security testing operations including network scanning, vulnerability assessment, and password cracking."
whataboutyou-ai,eunomia-mcp-server,5,,"This Eunomia MCP server, developed by the WhataboutYou AI team, provides a Python-based implementation of the Model Context Protocol. Built using Pydantic and leveraging the MCP package, it offers a streamlined approach to integrating AI models with MCP-compatible applications. The implementation focuses on simplicity and ease of use, with a clear project structure and dependency management through pyproject.toml. It's particularly useful for developers looking to quickly set up an MCP server for AI-powered applications, enabling seamless communication between models and clients across various use cases such as natural language processing, data analysis, or task automation."
wheattoast11,mcp-video-gen,2,,"This MCP server provides tools for generating videos and images using RunwayML and Luma AI APIs. Built with TypeScript, it offers text-to-video, image-to-video, and image generation capabilities, along with management features for Luma AI generations including listing, deleting, adding audio, and upscaling content. The implementation includes prompt enhancement via OpenRouter LLMs to improve generation quality. It uses asynchronous polling to track generation progress and delivers results through progress notifications, making it particularly useful for creative workflows that combine multiple generation steps like creating base images and animating them into videos."
whenmoon-afk,claude-memory-mcp,1,,"Memory MCP server that provides persistent memory capabilities for Claude Desktop, enabling storage and retrieval of conversations, facts, documents, and code snippets. Built with Python and sentence transformers, it features episodic and semantic memory domains, temporal decay modeling, and vector similarity search. Particularly valuable for users who want Claude to maintain context and knowledge across conversations without manual prompting."
modelcontextprotocol-servers,whois-mcp,3,114,"Provides a lightweight MCP server for performing WHOIS lookups using the whoiser library. Enables retrieving domain registration and ownership information through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, this implementation offers a simple, type-safe approach to querying domain metadata."
wildebeest,mcp_pdf_forms,1,,"MCP PDF Forms is a toolkit for PDF form manipulation built with MCP and PyMuPDF. It provides tools for finding PDF files across directories, extracting form field information, and visualizing form fields in PDF documents. The implementation is designed to streamline PDF form processing workflows and enhance document analysis capabilities."
willer,mcp-operator,1,,"Browser Operator MCP enables Claude to control web browsers through Playwright, allowing for automated web navigation, form filling, and element interaction. It maintains persistent browser sessions with unique IDs across multiple interactions, captures screenshots of the current browser state, and supports manual intervention for sensitive tasks like login processes. Built with FastAPI and compatible with uvx, this implementation is ideal for assisting with web browsing tasks while keeping sensitive data handling under user control."
williamcloudqi,matlab-mcp-server,20,,"This MCP server integrates MATLAB with AI assistants, allowing execution of MATLAB code, generation of scripts from natural language, and access to MATLAB documentation. Developed by WilliamCloudQi, it leverages the node-matlab package to interact with MATLAB installations. The server is designed for scientific computing workflows, enabling AI to perform complex mathematical operations and data analysis tasks using MATLAB's powerful toolsets."
williamvd4,browser-use-mcp-server,0,,"Browser Use MCP Server enables AI assistants to interact with web browsers through the Model Context Protocol, providing capabilities for web navigation, content extraction, and task automation. Built on the browser-use library, it offers asynchronous browser task execution with detailed progress tracking and error handling. The server can be deployed via Docker with VNC support or run locally using either stdio or SSE transport, making it flexible for different integration needs. Configuration options include Chrome path specification and window size settings, making it ideal for workflows requiring web research, data collection, or automated browsing tasks."
williamvd4,playwright-plus-python-mcp,0,,"Playwright-Server MCP provides web automation capabilities for AI assistants through a set of tools that leverage the Playwright library. It enables browsing automation with functions for navigation, taking screenshots, clicking elements, filling forms, and executing JavaScript in the browser. The server also implements a simple note storage system with custom URI scheme and includes a summarize-notes prompt. Built with Python 3.11 and containerized with Docker, it's ideal for workflows requiring web scraping, form automation, or content extraction directly within AI assistant conversations."
williamvd4,web-search,0,,"Web Search MCP Server enables free web searching using Google search results without requiring API keys. It provides a single tool named 'search' that accepts a query string and optional limit parameter, returning structured results with titles, URLs, and descriptions. The implementation uses web scraping with axios and cheerio to extract search results from Google's HTML structure, making it suitable for personal use cases where quick access to web information is needed, though users should be mindful of rate limiting to avoid being temporarily blocked by Google."
willianmarcel,mcp-pr-reviewer,1,,"A GitHub PR Analyzer that enables AI assistants to fetch, analyze, and document pull request changes. The implementation integrates with GitHub's API to extract PR metadata and file changes, then uses MCP to provide structured access to this information. It also features Notion integration for creating documentation pages with analysis results. This tool is particularly useful for automating code reviews, generating PR summaries, and maintaining documentation of code changes across repositories."
willibrandon,netcontextserver,12,,"NetContextServer empowers AI coding assistants like Cursor AI to deeply understand your .NET codebase through the Model Context Protocol (MCP). This means more accurate code suggestions, better answers to your questions, and a more productive coding experience."
win4r,browser-use-mcp-server,0,3622,"A lightweight TypeScript-based MCP server implementation using the official Model Context Protocol SDK. Designed as a minimal, standards-compliant server with TypeScript type safety, configured for Node.js environments and prepared for easy deployment and development with build and watch scripts."
windalfin,clickup-mcp-server,0,,"ClickUp MCP Server enables AI assistants to interact with ClickUp task management through a standardized protocol. Built by Talib Kareem, it provides tools for managing tasks, lists, folders, and workspace hierarchies with features like task creation, updating, moving, and bulk operations. The implementation supports name-based entity resolution with fuzzy matching, comprehensive error handling, and secure credential management through configuration. It's particularly valuable for AI-enhanced project management workflows requiring task organization, priority analysis, and dependency management without leaving the conversation interface."
windiechai,confluence-wiki-mcp-server-extension,2,,"Confluence Wiki MCP Server Extension provides a bridge between VSCode/Cursor and Confluence Wiki, enabling AI assistants to access and convert wiki content to markdown format. Developed by Windie Chai, this implementation securely stores Confluence credentials in an encrypted configuration file and exposes an SSE-based MCP server that can be integrated with Cursor. The extension includes a configuration interface for managing connection details and automatically handles content fetching and conversion when wiki URLs are detected in prompts. Particularly valuable for teams that need to reference or summarize Confluence documentation within AI conversations without manual copy-pasting."
complexdevel,mcp-cloud-pc,0,,"Windows 365 Cloud PC Management server that integrates with Microsoft Graph API to enable AI assistants to list and manage cloud PCs in a tenant environment. Built with FastMCP and Python, it handles authentication through tenant credentials and provides tools for retrieving cloud PC information in JSON format. This implementation is particularly valuable for IT administrators who need to monitor and manage their organization's Windows 365 Cloud PC deployments through natural language interaction."
windymelt,mcp-scala,24,,"MCP-Scala is a JSON-RPC 2.0 server implementation developed by windymelt that enables AI assistants to interact with remote procedure calls through a standardized protocol. Built with Scala 3 and leveraging the Cats Effect library for functional programming, it provides a type-safe interface for method handling, parameter validation, and response formatting. The server supports various JSON-RPC features including positional and named parameters, notifications, batch requests, and comprehensive error handling. This implementation is particularly useful for developers who need a robust, type-safe bridge between AI systems and backend services where structured communication is essential."
winor30,mcp-server-datadog,27,3109,"This MCP server implementation provides integration with Datadog's API, enabling AI assistants to manage and retrieve incident information. Developed by winor30, it offers tools for listing and retrieving Datadog incidents, with plans for future expansion to cover more Datadog resources. Built using TypeScript and leveraging the Datadog API client, the server focuses on incident management capabilities. It is particularly useful for AI applications that need to monitor and respond to system incidents or integrate Datadog's observability data into their workflows."
winstonfassett,sonos-mcp-server,0,,"Sonos MCP Server provides a bridge between AI assistants and Sonos audio devices on a local network, enabling control and monitoring through natural language. The server uses the SoCo library to discover Sonos speakers, manage playback (play, pause, skip tracks), adjust volume, retrieve queue information, and access device states. Built with FastMCP, it exposes over 15 specialized tools that handle various speaker operations including party mode activation and play mode configuration. This implementation is particularly valuable for users who want to control their Sonos ecosystem through AI assistants without switching to dedicated apps."
winterjung,mcp-korean-spell,11,245,"A Korean spell checker MCP server that integrates with Naver's spelling service to provide automated correction of Korean text. Created by winterjung, this implementation allows AI assistants to fix grammatical errors, typos, and other linguistic issues in Korean writing through a simple tool interface. The server is built with TypeScript and uses the Cheerio library to parse responses from the Naver service, making it particularly useful for content creators, students, and professionals working with Korean language who need accurate text without manual proofreading."
wirdes,db-mcp-tool,5,,"Database Explorer MCP Tool provides a unified interface for interacting with multiple database systems including PostgreSQL, MySQL, and Firestore. Built with TypeScript, it enables AI assistants to connect to databases, list tables, view triggers, execute SQL queries, and export schemas or data. The tool exposes nine specialized commands (like !pg, !mysql, !tables, !query) that handle different database operations, making it valuable for developers who need to quickly explore and manage database structures without switching contexts."
0xkoda,wiremcp,78,,"WireMCP is a network analysis server that empowers LLMs with real-time traffic monitoring capabilities by leveraging Wireshark's tshark utility. Developed by 0xKoda, it provides five specialized tools for capturing and analyzing network data: raw packet capture, protocol statistics, conversation tracking, and threat detection through URLhaus blacklist integration. The implementation automatically locates tshark across different operating systems, handles large packet captures by intelligently trimming output, and presents results in structured formats optimized for LLM comprehension. Ideal for security analysts using AI assistants for threat hunting, network diagnostics, and anomaly detection without requiring direct access to network monitoring tools."
wiseman,osm-mcp,11,,"The OSM PostgreSQL Server provides Claude with direct access to OpenStreetMap geospatial data stored in a PostgreSQL database with PostGIS extensions. Built by John Wiseman, this implementation allows querying complex geographic information including points of interest, roads, buildings, and natural features through SQL. The server includes comprehensive safety measures like read-only query enforcement and execution timeouts, while offering rich documentation through resources that explain OSM data structure, common query patterns, and spatial query techniques. It's particularly valuable for location-based analysis, finding geographic relationships between features, and extracting structured information about the physical world from the complete OpenStreetMap dataset."
wllcnm,dingding-mcp,1,,"This MCP implementation, developed for DingDing, provides a Docker-based server for executing MCP commands. Built with Python, it leverages the MCP library and integrates with external services through environment variables. The implementation stands out by offering a containerized solution, ensuring consistent execution across different environments. By abstracting the complexities of server setup and configuration, it enables easy deployment and scaling of MCP services. This tool is particularly valuable for projects requiring robust MCP server capabilities, facilitating use cases such as AI-powered chatbots, automated data processing pipelines, and scalable machine learning applications."
wllcnm,dingding_mcp_v2,3,,"This Python-based MCP server, developed by NangePlus, provides a lightweight and efficient implementation for AI assistants to interact with external services. Built with aiohttp for asynchronous operations, it offers a streamlined approach to handling MCP requests and responses. The server is containerized using Docker for easy deployment and scalability. It focuses on simplicity and performance, making it ideal for developers who need a fast, no-frills MCP server for integrating AI capabilities into their applications or services. This implementation is particularly suited for scenarios requiring quick setup and minimal overhead, such as prototyping AI-powered tools or building microservices that leverage AI assistants."
wllcnm,mcp-mysql,0,,"This MySQL MCP implementation, developed using Python, provides a standardized interface for interacting with MySQL databases through the Model Context Protocol. It utilizes the mysql-connector-python library to offer MySQL functionality, enabling operations like data querying, insertion, and manipulation. The implementation is containerized using Docker for easy deployment and scalability. By abstracting MySQL interactions into an MCP interface, it allows AI systems to seamlessly work with relational database data and operations. This server is particularly useful for applications requiring structured data storage and retrieval, such as content management systems, user authentication services, or data-driven web applications."
wllcnm,mcp-reddit,5,,"This MCP implementation, developed by NanGePlus, provides a Python-based interface for interacting with Reddit's API using the PRAW library. Built with Docker for easy deployment, it offers a standardized way to access Reddit data and functionality through the Model Context Protocol. The server enables AI systems to perform operations like retrieving posts, comments, and user information, as well as posting content and managing subreddits. By abstracting Reddit's API complexities into MCP tools, this implementation facilitates use cases such as sentiment analysis, trend monitoring, content moderation, and automated community management on Reddit. It's particularly useful for developers building AI-powered Reddit bots, data analysis tools, or content aggregation systems."
wolfyy970,docs-fetch-mcp,4,,"Docs Fetch MCP Server provides a reliable way for LLMs to retrieve and explore web content with recursive capabilities. It fetches clean, readable content from web pages while identifying and following relevant links within the same domain up to a specified depth. The implementation uses a dual-strategy approach with axios for speed and puppeteer as a fallback for complex pages, along with robust error handling and timeout prevention to ensure reliable operation within MCP time limits. Particularly useful when users want an LLM to autonomously learn about specific topics by exploring documentation or web content."
wolkwork,knmi-mcp,2,633,"KNMI Weather MCP is a server that provides real-time weather data from the Royal Netherlands Meteorological Institute (KNMI) for any location in the Netherlands. Developed by Stijn Meijers and Nathan Clerkx at Wolk Tech B.V., it automatically finds the nearest weather station to a given location and delivers current measurements including temperature, humidity, wind speed, precipitation, visibility, and air pressure. The server features natural language interpretation of weather conditions, robust error handling, and detailed logging, making it particularly valuable for users who need accurate, localized Dutch weather information without leaving their AI assistant interface."
wonderwhy-er,desktopcommandermcp,1722,,"This MCP server implementation, developed by Eduard Ruzga, provides a terminal interface for executing commands and managing processes on the local system. Built with TypeScript and leveraging the Model Context Protocol SDK, it extends the MCP Filesystem Server to enable full system command execution, process management, and advanced file operations. The implementation stands out by combining terminal access with filesystem capabilities, allowing for seamless integration of command-line tools and file manipulation in AI workflows. It's particularly useful for developers and system administrators who need to perform complex system operations, run scripts, or manage files through AI-assisted interfaces, enabling tasks like automated system maintenance, code deployment, or data processing pipelines."
wong2,mcp-jina-reader,38,,"This Jina Reader MCP server, developed by wong2, enables AI assistants to fetch and convert remote web content into Markdown format. Built with TypeScript, it leverages Jina's advanced document processing capabilities to extract relevant information from web pages and present it in a structured, easily consumable format. The server acts as a bridge between AI models and web-based information sources, allowing them to access up-to-date content beyond their training data. By providing clean, formatted text from diverse online sources, this implementation enhances AI assistants' ability to analyze, summarize, and respond to queries about current web content. It is particularly useful for tasks involving real-time web research, content curation, and generating responses based on the latest online information."
saymondamasio,wongames-mcp,0,,"WonGames MCP Server provides a GraphQL-based interface for retrieving video game data from a Strapi CMS backend. Built by Saymon Damasio, this implementation uses the Model Context Protocol to enable AI assistants to fetch game information with optional filtering and pagination. The server leverages a generated GraphQL client to communicate with the API endpoint, transforming structured game data into a format suitable for AI consumption. It's particularly useful for applications needing to display curated game collections, pricing information, and game metadata within conversational interfaces."
wopal-cn,mcp-hotnews-server,79,21092,"This MCP server, developed by SamuelXu, provides real-time hot trending topics from major Chinese social platforms and news sites. It integrates with platforms like Zhihu, Weibo, and Bilibili to aggregate and serve up-to-date trending information. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers a containerized solution via Docker for easy deployment. The server is designed for applications requiring current Chinese social media trends, such as news aggregators, social media analytics tools, or AI assistants needing context on Chinese online discourse."
michael-tomala,mcp-wordpress-gutenberg,1,,"WordPress MCP Server provides a comprehensive toolkit for programmatically interacting with WordPress sites via REST API and WP-CLI. Built with TypeScript, it offers a wide range of tools for managing WordPress plugins, blocks, posts, site settings, and performing various administrative tasks through a standardized, type-safe interface. Particularly useful for developers and site administrators who want to automate WordPress management and development workflows."
yuhuangou,wordware-mcp,0,2557,"Wordware MCP server enables running Wordware AI flows locally during development, creating a bridge between Claude Desktop and Wordware's AI capabilities. Built by Wordware, it supports interactive setup, automatic Claude configuration, and can be run via command line with direct API key and app ID specification. The server requires a Wordware account and API key, and can be configured through environment variables or command line arguments, making it ideal for developers who need to test Wordware-powered applications in their local environment before deployment."
aleksandrkrivolap,wordware-mcp,0,,"Wordware MCP is a server implementation that integrates Claude and other AI assistants with Wordware's research and productivity tools. It dynamically loads tools from Wordware's API based on configuration, exposing capabilities like researching people and companies, saving content to Notion, and other specialized research functions. The server handles complex API interactions including authentication, streaming responses, and result formatting, making it particularly valuable for users who need to perform deep research on individuals or topics and manage the resulting information without leaving their AI assistant interface."
worldnine,scrapbox-cosense-mcp,12,,"This Scrapbox MCP server, developed by worldnine, enables AI models to interact with Scrapbox through a standardized interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for reading and writing Scrapbox pages. The implementation focuses on simplicity and ease of use, making it accessible for AI assistants or applications needing to access Scrapbox data programmatically. It's particularly useful for tasks like knowledge management, collaborative note-taking, or building Scrapbox-integrated chatbots, enabling quick access to Scrapbox content without requiring deep knowledge of the underlying API complexities."
worldnine,textwell-mcp,0,,"This Textwell Write Tool MCP server, developed for macOS, provides a specialized interface for writing text to the Textwell application. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a single 'write-text' tool with three modes: replace, insert, and append. The implementation focuses on simplicity and efficiency, making it easy for AI models to interact with Textwell without deep knowledge of the application. It's particularly useful for tasks like note-taking, content creation, or integrating text manipulation into AI-driven workflows on macOS, enabling assistants to write to Textwell in various ways while maintaining a lightweight, focused approach."
wowyuarm,file-converter-mcp,4,,"The File Converter MCP Server provides a suite of file conversion tools that enable AI agents to transform documents and images between various formats. Built using the FastMCP framework, it supports conversions such as DOCX to PDF, PDF to DOCX, image format transformations, Excel to CSV, and HTML to PDF. The implementation includes robust file handling with flexible input methods (accepting both file paths and base64-encoded content), comprehensive error handling, and detailed logging. This server is particularly valuable for workflows requiring document processing capabilities within AI assistant conversations, allowing seamless file format conversions without requiring external tools."
wpfleger96,pagerduty-mcp-server,0,,"A Model Context Protocol (MCP) server implementation for PagerDuty that allows AI assistants to interact with PagerDuty services, including retrieving incidents, on-call schedules, and other PagerDuty data."
wrale,mcp-server-make,2,16295,"This MCP server for make functionality, developed by Joshua M. Dotson, enables AI models to safely execute make targets from a Makefile. It integrates with the Model Context Protocol to expose make operations through a standardized interface, allowing LLMs to run and interpret build processes, manage dependencies, and automate development tasks. The server handles common errors gracefully, respects working directory context, and provides utility targets for development workflows. Built with Python and leveraging the mcp library, it offers a flexible solution for incorporating make capabilities into AI-assisted software development, continuous integration, and project management scenarios."
wrale,mcp-server-tree-sitter,14,4026,"MCP Server Tree-sitter provides code analysis capabilities through the tree-sitter parsing library, enabling AI assistants to understand and manipulate source code across multiple programming languages. Built by Wrale, this implementation leverages the tree-sitter-language-pack to support a wide range of languages with a unified interface for traversing abstract syntax trees, performing code searches, and extracting semantic information. The server is designed for workflows requiring deep code comprehension, such as code review, refactoring suggestions, and documentation generation, allowing AI assistants to work with code in a structured way rather than treating it as plain text."
wrediam,better-qdrant-mcp-server,0,457,"Better Qdrant MCP Server provides a bridge between AI assistants and the Qdrant vector database, enabling semantic search capabilities through multiple embedding services. It offers tools for managing collections, adding documents with automatic chunking, and performing similarity searches using OpenAI, OpenRouter, Ollama, or FastEmbed embedding models. The server handles text processing with configurable chunk sizes and overlaps, making it particularly valuable for knowledge retrieval applications where vector search is needed without leaving the conversation interface."
wrediam,coolify-mcp-server,6,869,"Coolify MCP Server provides a robust integration with the Coolify platform, enabling programmatic management of servers, applications, services, deployments, and team resources through a standardized interface. Built by Will Reeves, this server exposes a wide range of tools for interacting with Coolify's API, supporting operations like creating and managing servers, deploying applications, executing commands, and tracking deployment histories. Useful for DevOps teams seeking automated infrastructure management and deployment workflows."
wricardo,go-mcp,0,,"This Go-based MCP server provides AI assistants with access to Go documentation and package listing capabilities. Developed by Wallace Ricardo, it exposes the 'go doc' and 'go list' commands through MCP, allowing AI systems to efficiently query official Go documentation and understand Go codebases. The server includes caching mechanisms and enhanced error handling to optimize performance and provide helpful suggestions when issues arise."
wricardo,gpt-mcp-proxy,1,,"This MCP server implementation acts as a bridge between HTTP clients and MCP-compliant tool servers, enabling tool discovery and execution via REST endpoints. Developed by wricardo, it features automatic public HTTPS exposure through ngrok, OpenAPI 3.1.0 specification, and configurable MCP server management. The server is particularly useful for integrating MCP tools with custom GPTs through Actions, making it valuable for developers working on AI-assisted applications or those needing to expose MCP tools through a standardized HTTP interface."
wricardo,grpcurl-mcp,3,,"This MCP server implementation provides a bridge to interact with gRPC services using the grpcurl tool. Developed by wricardo, it offers tools for invoking gRPC methods, listing available services, and describing service details. The server leverages reflection capabilities and supports custom headers, making it versatile for various gRPC-based integrations and API interactions."
wuwen1030,mysql-mcp-server,1,,"A TypeScript-based MySQL MCP server that enables AI models to interact with MySQL databases through a standardized protocol. The server provides tools for listing database tables, retrieving table schemas, and executing read-only SQL queries with safe transaction handling. Designed to integrate with Claude Desktop, it offers a simple configuration approach for connecting AI assistants directly to MySQL databases."
wwiens,trakt_mcpserver,1,,"A Model Context Protocol (MCP) server that creates a bridge between AI language models and the Trakt.tv API, allowing LLMs to access real-time entertainment data and personal Trakt viewing history."
wwwyo,mysql-mcp,0,135,"This MCP server implementation provides integration with MySQL databases, enabling AI assistants to perform database operations. Built with TypeScript and leveraging the mysql2 library, it offers tools for executing SQL queries, managing database connections, and handling data retrieval. The implementation focuses on secure database access through environment variables and supports modern MySQL features. It is particularly useful for AI applications that need to interact with relational databases, perform data analysis, or integrate database operations into their workflows."
wynnd,mcp-server-shortcut,0,,"Shortcut.com MCP server enables AI assistants to interact with Shortcut's ticket management system through a standardized interface. Built with FastMCP and asynchronous processing, it provides tools for listing, searching, creating and updating stories (tickets), managing comments, and retrieving workflow states and projects. The implementation features robust error handling, input validation using Pydantic models, and detailed logging, making it valuable for teams who want to manage their Shortcut tickets and projects directly through AI assistants."
wysh3,perplexity-mcp-zerver,28,,A research level Model Context Protocol (MCP) server implementation providing AI-powered research capabilities through Perplexity's infrastructure without using any API key.
x3r0k,shodan-mcp-server,0,,"A WebSocket server that provides AI assistants with access to Shodan's database of internet-connected devices and vulnerabilities. Exposes tools for host information lookup, database searching with Shodan query syntax, DNS resolution, and CVE vulnerability details. Built with Node.js and the Shodan API client, it enables security researchers and network administrators to gather threat intelligence and analyze internet exposure directly through conversational AI interfaces."
x51xxx,osp-marketing-tools-mcp,1,,"OSP Marketing Tools MCP Server provides a TypeScript implementation of Open Strategy Partners' proven methodologies for technical marketing content creation and optimization. Developed by Taras Trishchuk, this server offers tools for product value mapping, meta information generation, content editing with semantic codes, technical writing guidance, and on-page SEO optimization. It supports both stdio and HTTP/SSE transport methods, making it compatible with Claude Desktop, Cursor, and web applications. The TypeScript implementation offers advantages over the original Python version including simplified installation, cross-platform compatibility, and better performance, making it ideal for marketing teams creating high-quality technical content without Python dependencies."
xbluecode,findata-mcp-server,7,485,"This MCP server, developed by xbluecode, provides access to financial data from Alpha Vantage API. It offers tools for retrieving stock quotes and historical data, enabling AI assistants to perform financial analysis and market research. The server abstracts the complexities of API interactions, providing a standardized interface for stock data retrieval. By connecting AI systems with real-time and historical financial information, this implementation facilitates tasks such as portfolio management, trend analysis, and investment research. It is particularly useful for financial advisors, traders, and AI applications requiring up-to-date market data to make informed decisions or generate insights about stock performance."
xeroapi,xero-mcp-server,39,2411,"Xero MCP Server provides a bridge to the Xero accounting API, enabling AI assistants to interact with financial data and perform accounting operations. Built with TypeScript, it supports tools for managing contacts, invoices, quotes, and credit notes through OAuth2 custom connections. Particularly useful for businesses seeking to automate financial workflows and integrate accounting data directly into conversational AI interactions."
xgenerationlab,xiyan_mcp_server,64,,"XiYan MCP Server enables AI assistants to interact with MySQL databases through natural language queries using XiYanSQL. Developed by Zhiling Luo, this server provides capabilities to list tables, read data, and execute SQL queries in a controlled, secure environment. It integrates with LLM APIs for natural language processing and requires minimal configuration through environment variables, making it particularly valuable for database exploration and analysis workflows where direct SQL access might be risky or impractical."
xiangma9712,mysql-mcp-server,5,,"This MCP server implementation provides a bridge to MySQL databases, enabling AI assistants to perform database operations. It uses TypeScript and Node.js, integrating with the Model Context Protocol SDK and mysql2 library. The server is containerized using Docker and supports environment-based configuration, making it suitable for use cases requiring secure, scalable database access and management in AI-driven applications."
xianzong85,mysql-server-mcp-server,0,,"This MySQL MCP server, developed using TypeScript and the Model Context Protocol SDK, provides a standardized interface for AI assistants to interact with MySQL databases. It offers tools for executing SQL queries and connects to MySQL databases using environment variables for configuration. The implementation stands out by abstracting database operations into MCP-compliant endpoints, allowing AI systems to perform complex data operations without direct database access. By bridging AI capabilities with relational database management, this server enables use cases such as data analysis, report generation, and dynamic content retrieval from MySQL databases. It is particularly useful for scenarios requiring AI-driven database interactions, such as automated data processing, intelligent reporting systems, or applications that need to integrate AI assistants with existing MySQL-based infrastructures."
xiaoguomeiyitian,toolbox,4,,"An AI-powered automation tool development platform, providing:

🧩 Modular Architecture - Tool hot-reloading via the src/tools directory 🤖 AI Assistance - AI engine for natural language to tool template conversion 🚀 Enterprise-Grade Capabilities - Integration of production environment services such as MongoDB/Redis/SSH 🔄 Real-time Updates - Zero-downtime deployment via buildReload_tool

"
xiaolaa2,ableton-copilot-mcp,4,798,An MCP (Model Context Protocol) server based on ableton-js for real-time interaction and control with Ableton Live.
xiaolaa2,midi-file-mcp,1,663,"A powerful MCP tool for parsing and manipulating MIDI files based on Tone.js. This library leverages the Model Context Protocol (MCP) to enable AI assistants to easily read, analyze, and modify MIDI files without dealing with the complexities of the MIDI file format."
xiawpohr,mcpilot,1,,"MCPilot is a collection of specialized MCP servers for blockchain and web3 interactions, enabling AI assistants to work with various blockchain technologies. The implementation includes modules for MetaMask wallet integration, ERC20 token operations, Solidity compilation, contract verification on Celo and Polygon networks, and chain information retrieval. Built by Xiawpohr, it provides tools for connecting to wallets, deploying smart contracts, verifying transactions, and managing tokens - making it easier for AI systems to interact with blockchain infrastructure through standardized interfaces."
xindong888999,phalcon-mcp,0,,"Phalcon MCP server provides AI assistants with direct access to Phalcon PHP framework capabilities and Cursor IDE project data. The server exposes tools for managing Phalcon projects, generating code scaffolding, and accessing Cursor's chat history and composer data through a standardized interface. Built with FastMCP and SQLite database integration, it enables developers to create and manage Phalcon applications while analyzing their Cursor IDE usage patterns directly through conversational AI."
xing5,mcp-google-sheets,38,4964,"This MCP server integrates with Google Drive and Google Sheets, enabling AI assistants to create, read, update, and manage spreadsheets. Built by Xing Wu, it provides tools for retrieving sheet data, updating cells, adding rows and columns, creating new spreadsheets, and listing available documents. The implementation supports both OAuth and service account authentication methods, making it suitable for personal assistants that need to interact with spreadsheet data or automate document workflows without requiring users to switch contexts."
xinthink,reader-mcp-server-py,3,,"Reader Server is an MCP implementation that connects to the Readwise Reader API, exposing saved documents as resources that can be queried based on location and time parameters. Built with Python using the FastMCP framework, it allows AI assistants to access and retrieve documents stored in different Reader locations (new, feed, archive, or library) that were modified after a specified timestamp. This server requires a Readwise Reader access token and is particularly useful for workflows that need to reference or analyze content saved in a user's Reader account."
x-lab2017,open-digger-mcp-server,4,,"OpenDigger MCP Server provides AI assistants with access to OpenDigger's open-source metrics data through a simple interface. Developed by Frank Zhao, this TypeScript implementation enables querying metrics like OpenRank, Community OpenRank, and activity for GitHub and Gitee repositories and users. The server uses the Model Context Protocol to expose a single tool that fetches data from OpenDigger's data repository, making it valuable for analyzing open-source project health, contributor influence, and community dynamics directly within AI conversations."
xpe-7,mcp-server,0,,"A documentation search server that enables AI assistants to retrieve up-to-date documentation from popular Python libraries including LangChain, LlamaIndex, and OpenAI. The server uses the Serper API to perform targeted Google searches within specific documentation domains, then fetches and extracts the content from the search results. Built with FastMCP, it exposes a single tool that accepts a query and library name, returning relevant documentation text that can help users solve problems or understand library features without leaving their AI assistant conversation."
xpn,mythic_mcp,53,,"Mythic MCP is a server implementation that enables AI assistants to interact with the Mythic Command and Control (C2) framework for penetration testing. Created by XPN, it provides tools for executing shell commands, reading files, uploading content, and running specialized security tools like Mimikatz on compromised systems through Mythic agents. The server exposes a set of prompt templates for emulating specific threat actors or performing reconnaissance, making it particularly valuable for security professionals who want to leverage AI capabilities for automated penetration testing workflows while maintaining control through the Mythic interface."
xraywu,mcp-pdf-extraction-server,4,,"This PDF extraction MCP server, developed by an unnamed author, provides tools for extracting content from PDF files. Built with Python 3.11+ and leveraging libraries like PyPDF2, pytesseract, and PyMuPDF, it offers both text extraction and OCR capabilities. The implementation focuses on flexibility, allowing extraction from specific page ranges and supporting various PDF formats. It's particularly useful for tasks like document analysis, text mining, or content indexing, enabling AI assistants or applications to access PDF content programmatically without dealing with the complexities of PDF parsing and OCR directly."
xraywu,mcp-wegene-assistant,3,,"This MCP server, developed by @xraywu, provides integration with WeGene's genetic testing API. Built with Python and leveraging Flask, it enables AI assistants to access and analyze users' genetic testing reports from WeGene. The implementation focuses on OAuth authentication, profile retrieval, and report access, making it easier to incorporate genetic data into AI-assisted health and ancestry analyses. It's particularly useful for applications that want to provide personalized insights based on genetic information, enabling use cases such as health risk assessment, ancestry exploration, and trait analysis without requiring deep expertise in genetic data interpretation."
xuanwo,mcp-server-opendal,27,5700,"This MCP server implementation provides tools to access storage services for usage by LLMs. It integrates with OpenDAL, a universal data access layer, allowing interaction with various storage backends. The server is designed for use cases requiring AI models to read from or write to different storage systems, such as cloud object stores, local filesystems, or databases. It offers a unified interface for storage operations, simplifying data management tasks for AI applications."
xue160709,yt-mcp-server,0,,"YT-MCP-Server provides a bridge between AI assistants and YouTube content through the yt-dlp tool. This implementation enables assistants to interact with YouTube videos by leveraging the powerful yt-dlp command-line utility for video information extraction and downloading capabilities. Built with TypeScript using the MCP framework, it exposes YouTube functionality through a standardized interface, making it valuable for use cases requiring video content analysis, information retrieval, or media processing directly within assistant conversations."
xxxbrian,mcp-rquest,14,9818,"MCP-Rquest provides advanced HTTP request capabilities for Claude and other LLMs, built on the rquest library. It enables realistic browser emulation with accurate TLS/JA3/JA4 fingerprints, allowing models to bypass common anti-bot measures while interacting with websites. The server supports all HTTP methods, handles large responses with automatic token counting and HTML-to-Markdown conversion, and securely stores responses in system temporary directories. With features like browser fingerprinting, authentication support, and customizable request options, it's ideal for web scraping, API interactions, and accessing content normally restricted to standard browsers."
xytangme,neodb-mcp,2,,"This NeoDB MCP server, developed by xytangme, provides a standardized interface for interacting with the NeoDB social book cataloging service. Built with Python and leveraging libraries like httpx and mcp, it offers tools for fetching user information, searching books, and retrieving detailed book data through the NeoDB API. The server is designed for easy integration with Claude Desktop, using environment variables for API base URL and access token management. By abstracting NeoDB functionality into an MCP interface, it enables AI systems to easily access and analyze book-related data. This implementation is particularly useful for applications involving book recommendations, reading list management, or literary analysis, facilitating use cases such as personalized book suggestions, reading habit tracking, and exploration of literary trends."
xzq-xu,jvm-mcp-server,47,,"JVM MCP Server provides a bridge between Claude and Java Virtual Machine applications, enabling direct interaction with running Java processes through Arthas diagnostic tools. Built with Python and Paramiko for SSH connectivity, it allows AI agents to execute commands, monitor performance, and debug Java applications remotely. The implementation connects to target JVM instances via SSH, manages connection pooling, and exposes Arthas capabilities as MCP tools, making it particularly valuable for developers who need to diagnose and troubleshoot Java applications without leaving their AI assistant conversation."
y7ut,mcp-tavily-search,0,,"This MCP server, developed by y7ut, provides a search functionality powered by Tavily. It integrates with the Model Context Protocol (MCP) to offer a 'search_news' tool that allows users to query recent news articles based on keywords, time range, and other parameters. The implementation stands out by leveraging Tavily's search capabilities and offering fine-grained control over search parameters such as depth and topic. It's particularly useful for AI applications requiring up-to-date news information, enabling tasks like trend analysis, content curation, or real-time news monitoring within the MCP ecosystem."
yairhaimo,trello-mcp-server,0,1014,"This MCP server, developed by Yair Haimo, provides a standardized interface for interacting with Trello's API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers capabilities for managing boards, lists, cards, and other Trello entities. The implementation focuses on adapting Trello-specific concepts to a generalized API, enabling AI models to perform complex project management and collaboration tasks. By connecting AI assistants with Trello's feature set, this server allows for sophisticated scenarios like automated task creation, workflow optimization, and project analytics. It's particularly useful for teams and organizations using Trello who want to integrate AI-powered automation into their project management processes."
yamadashy,repomix,14658,464637,"Repomix is a powerful tool that packs your entire repository into a single, AI-friendly file.
It is perfect for when you need to feed your codebase to Large Language Models (LLMs) or other AI tools like Claude, ChatGPT, DeepSeek, Perplexity, Gemini, Gemma, Llama, Grok, and more."
yamanoku,baseline-mcp-server,21,,"Baseline MCP Server provides support status information for Web Platform APIs by connecting to the WebStatus API. Developed by yamanoku, this Deno-based implementation allows AI assistants to query the baseline compatibility status of web features across browsers, returning whether features are widely supported, have limited support, are newly introduced, or lack sufficient data. The server includes utilities for feature status retrieval and formatting responses in MCP-compatible format, making it particularly useful for web developers seeking up-to-date browser compatibility information during development discussions."
yanbasic,emd-mcp,1,,"EMD-MCP server provides a bridge between Claude and the Easy Model Deployer (EMD) tool, enabling AI assistants to deploy, manage, and interact with machine learning models on AWS services. Built with TypeScript and the Model Context Protocol SDK, it offers tools for listing supported models, deploying models with customizable parameters, checking deployment status, invoking deployed models, and destroying deployments. The server automatically installs EMD if needed and handles command execution through child processes, making it valuable for users who want to streamline ML model deployment workflows directly through conversational AI interfaces."
yanceyofficial,obsidian-mcp,1,,"Obsidian MCP connects Obsidian vaults stored in iCloud Drive to AI assistants, enabling direct interaction with markdown notes and files. Developed by Yancey Leo, this TypeScript implementation provides a comprehensive file system interface with tools for reading, writing, editing, and searching across multiple vaults. It supports full-text search capabilities through FlexSearch indexing and handles Markdown frontmatter parsing. The server accepts vault paths as arguments and exposes them through a standardized API, making it ideal for researchers, writers, and knowledge workers who want to leverage AI to interact with their personal knowledge bases without leaving their preferred note-taking environment."
misbiheyv,testing-mcp-server,0,,"Testing MCP Server provides a specialized interface for automated testing workflows, integrating with Yandex's internal testing management system (TMS). Built with TypeScript and the Model Context Protocol SDK, it enables AI assistants to access testing guidelines, retrieve test cases, and interact with test management APIs. The server features filesystem utilities for reading testing documentation and a TMS client for fetching and caching test case data, making it particularly valuable for AI-assisted test case generation, test plan review, and quality assurance processes."
yangkyeongmo,mcp-server-apache-airflow,25,11726,"MCP-Server-Apache-Airflow provides a bridge between AI assistants and Apache Airflow, enabling management and monitoring of workflows through natural language. Developed by Gyeongmo Yang, this Python-based server exposes a comprehensive set of Airflow API endpoints including DAG management, task instances, variables, connections, and monitoring capabilities. The implementation supports both stdio and SSE transport modes, authenticates with Airflow via username/password, and returns responses as structured text content. This server is particularly valuable for data engineers and workflow administrators who need to trigger DAG runs, check execution status, or manage Airflow resources without leaving their AI assistant interface."
yangkyeongmo,mcp-server-openmetadata,4,4897,"This MCP server implementation provides a bridge to OpenMetadata, enabling AI assistants to interact with metadata management systems. Developed by Gyeongmo Yang, it offers tools for querying and manipulating metadata across various data assets. The server is built using Python and integrates with the Model Context Protocol, leveraging libraries like httpx and starlette for efficient request handling. It focuses on secure API interactions and robust error handling, making it suitable for data governance, cataloging, and lineage tracking use cases. The implementation is designed for easy setup and configuration, supporting both development and production environments with features like Server-Sent Events (SSE) for real-time updates."
yanmxa,multicluster-mcp-server,0,692,"Multicluster-MCP-Server provides a bridge between AI assistants and Kubernetes multi-cluster environments, enabling management of distributed Kubernetes resources. The server exposes tools for listing managed clusters, executing kubectl commands across clusters, and establishing service account connections with appropriate permissions. Built with TypeScript and the Kubernetes client-node library, it handles authentication through service accounts and manages kubeconfig files for seamless cross-cluster operations. This implementation is particularly valuable for DevOps engineers and platform administrators who need to monitor and manage multiple Kubernetes clusters through conversational AI without switching context between different cluster environments."
yannbam,fresh-bash-mcp,1,,"Bash MCP is a TypeScript server that provides AI assistants with secure bash command execution capabilities through a controlled environment. It implements security safeguards including whitelisted commands, directory restrictions, and output sanitization while supporting both stateless and stateful (interactive) command execution. The server exposes tools for executing commands, creating and managing interactive sessions, and sending input to running sessions, making it particularly valuable for AI assistants that need to perform system operations without compromising security."
yannbam,fresh-js-mcp,0,,"JavaScript MCP server that enables AI assistants to execute JavaScript and TypeScript code through a stateful REPL interface. Built with TypeScript and the MCP SDK, it provides session management for maintaining context across executions, dynamic NPM package installation, and TypeScript transpilation with source mapping. Particularly valuable for developers who want to test JavaScript code snippets, prototype TypeScript interfaces, or experiment with NPM packages directly through their AI assistant conversations."
yannbam,js-mcp,1,,"JavaScript MCP server that enables AI assistants to execute JavaScript code with stateful REPL sessions, file system operations, and package management capabilities. Built with Node.js and TypeScript, it provides tools for both one-time code execution and persistent sessions that maintain variables across multiple executions. The server supports direct JavaScript execution with safety features like timeout limits and path validation, making it useful for interactive coding demonstrations, prototyping, and educational scenarios where maintaining context between code snippets is important."
yanxingliu,dify-mcp-server,185,,"This Dify MCP server, developed by an unnamed creator, integrates with the Dify API to enable AI-driven workflow execution through the Model Context Protocol. Built with Python and leveraging libraries like httpx and mcp, it provides tools for interacting with Dify workflows and applications. The server implements environment-based configuration for flexible API key management. By abstracting Dify API interactions into a standardized MCP interface, it enables AI systems to easily trigger and manage Dify workflows and applications. This implementation is valuable for applications requiring programmatic access to Dify capabilities, facilitating use cases such as automated task execution, multi-step data processing, and AI-driven decision making across various domains."
yaoxiaolinglong,mcp-mongodb-mysql-server,6,,"This MCP server provides a dual database integration for MySQL and MongoDB operations, enabling AI assistants to interact with both database systems through a unified interface. Built with TypeScript and Node.js, it extends the functionality of the original @enemyrr/mcp-mysql-server by adding MongoDB support, allowing for flexible configuration through environment variables or direct connection parameters. The server can be deployed as a standalone application or within a Docker container, making it suitable for developers who need to work with multiple database types in their AI-powered applications or data analysis workflows."
yap-audio,tiktok-mcp,19,,"TikTok MCP Service provides a robust interface for searching TikTok videos by hashtags and retrieving trending content, with built-in anti-detection measures and error handling. The implementation uses the TikTokApi library with browser automation via Playwright to bypass bot detection, rotating between different browser configurations and geolocation settings to appear more human-like. It offers tools for searching videos by hashtags, handling multi-word searches by splitting them into individual hashtags, and retrieving trending content, making it ideal for content discovery, trend analysis, and social media research applications."
yassinetk,mcp-docs-provider,4,,"Docs Provider is an MCP server that enables AI models to access and query local technical documentation through a simple interface. Built by YassineTk, it reads documentation from a local markdown file and exposes a query-docs tool that allows models to search and retrieve information from the documentation. The server runs on stdio transport for compatibility with Cursor editor integration, and includes automatic configuration for UI pattern queries through Cursor Rules, making it particularly valuable for developers who need their AI assistants to reference project-specific documentation without leaving their conversation interface."
yaxin9luo,openai_agent_library_mcp,0,,"OpenAI Agents SDK Documentation MCP server provides AI assistants with access to the OpenAI Agents Python library documentation and GitHub repository. It offers tools for searching documentation, retrieving specific sections, exploring code examples, and accessing API references through web scraping with BeautifulSoup. The server maintains caches for both documentation content and GitHub files to improve performance, and implements robust error handling for failed requests. Particularly valuable for developers who need to quickly reference OpenAI Agents SDK functionality, explore implementation patterns, or find relevant code examples without leaving their AI assistant interface."
yazzyyaz,unity-mcp,0,,"Unity MCP enables AI-powered scene manipulation and automation within the Unity Editor through a WebSocket-based protocol. The implementation consists of a Unity Editor plugin that provides a user interface for starting/stopping the server and a Python server component that handles communication between AI clients and Unity. It supports a wide range of operations including GameObject creation, component management, transform manipulation, and property access - making it particularly valuable for AI-assisted game development workflows where programmatic control of Unity scenes is needed."
yctimlin,mcp_excalidraw,29,,"Excalidraw MCP Server provides a powerful API that enables LLMs to create, modify, and manipulate Excalidraw diagrams programmatically. Built with Node.js using the Model Context Protocol SDK, it exposes a comprehensive set of tools for element creation, modification, querying, and organization including grouping, alignment, and distribution functions. The server maintains an in-memory representation of Excalidraw elements and scene state, validates operations through Zod schemas, and supports integration with Claude Desktop and Cursor through configuration files. This implementation is particularly valuable for AI-assisted diagramming, flowchart creation, and visual collaboration where diagrams need to be generated or modified through conversation."
yeakub108,mcp-server,6,,"This MCP server implementation provides three Windsurf Tools: Screenshot, Architect, and Code Review. It integrates with OpenAI's API and uses Puppeteer for web automation. The server is designed to facilitate AI-assisted software development tasks, enabling developers to capture screenshots, analyze code architecture, and perform code reviews within the MCP ecosystem."
waldzellai,waldzell-mcp,59,,"The MCP Servers repository by Waldzell AI provides a collection of specialized MCP servers for different use cases. It includes server-typestyle for Google TypeScript style guide analysis, server-yelp-fusionai for Yelp Fusion API integration with business search and review capabilities, server-clear-thought for systematic thinking and mental models, and server-stochasticthinking for probabilistic decision-making algorithms. Each server is containerized with Docker, configured for Smithery deployment, and follows a consistent architecture pattern with TypeScript implementation. The monorepo structure enables shared utilities while maintaining independent versioning through changesets."
yeonwoosung,metasearch-mcp,1,,"This metasearch MCP server integrates with the Tavily API to provide AI assistants with web search capabilities. Built by YeonwooSung, it offers a single 'search' tool that accepts queries and optional search depth parameters, returning results in text format that include AI-generated responses, URIs, and titles. The implementation is containerized with Docker for cross-platform compatibility and can be used with Claude Desktop, Cursor, or in a local environment. It's particularly useful for AI assistants that need to retrieve current information from the web without requiring direct internet access themselves."
yevanchen,difyapp_as_mcp_server,22,,"This Dify plugin serves as an MCP server, allowing Dify AI applications to connect with Model Context Protocol tools and services. Built by Yevanchen, it leverages the dify-plugin and mcp-sdk packages to create a bridge between Dify's platform and the broader MCP ecosystem. The implementation is minimal yet functional, with a timeout configuration of 120 seconds to accommodate longer-running tool operations. This integration enables Dify users to extend their AI applications with external capabilities without leaving their familiar environment."
yhc984,cursor-talk-to-figma-mcp-main,2,,"Cursor Talk to Figma MCP enables AI assistants to interact with Figma designs through a WebSocket-based communication system. It provides a bridge between Cursor AI and Figma, allowing for reading designs and modifying them programmatically with tools for creating elements (rectangles, frames, text), styling (colors, strokes, corner radius), layout management, and exporting. The implementation consists of a TypeScript MCP server, a Figma plugin for communication, and a WebSocket server that facilitates the connection between them, making it particularly valuable for AI-assisted design workflows."
yikaj,futu,0,,"Futu MCP server provides integration with the Futu API for financial market data and trading capabilities. It implements tools for retrieving market snapshots, historical K-line data, calculating moving averages, managing subscriptions, and checking trading days. The implementation uses a TypeScript server with Python scripts for data processing, making it particularly valuable for algorithmic trading strategies, market analysis, and automated financial decision-making without leaving the conversation interface."
yikakia,godoc-mcp-server,13,,"Godoc-mcp-server is a Go-based MCP server that enables AI assistants to search for and retrieve documentation from pkg.go.dev. Developed by yikakia, this implementation provides two main tools: searchPackages for finding Go packages based on queries, and getPackageInfo for retrieving detailed documentation including constants, types, functions, and variables from specific packages. The server uses goquery for HTML parsing and the resty HTTP client to interact with the pkg.go.dev website, making it particularly useful for developers seeking Go language documentation assistance during coding sessions without leaving their AI interface."
yiyangli,sms-mcp-server,5,449,"SMS MCP Server enables Claude and other AI assistants to send SMS and MMS messages through Twilio's API. Built by Yiyang Li, this TypeScript implementation provides a simple interface for sending text messages with proper phone number validation and error handling. The server exposes both a general-purpose message sending tool and specialized prompts for sending greetings and haikus, making it particularly useful for applications where AI assistants need to communicate with users via text messaging without leaving the conversation interface."
ylin6,unleash-ff-mcp-server,2,337,"Unleash Feature Flag MCP Server provides a bridge to the Unleash feature flag management system, enabling AI agents to programmatically create, update, retrieve, and manage feature flags across different projects. Built by Yucheng Lin, this TypeScript-based server allows interaction with Unleash's API through standardized tools for retrieving project lists, managing feature flags, and supporting various flag types like experiments, kill-switches, and releases. Particularly useful for development teams wanting to integrate feature flag management directly through conversational AI interfaces."
ymadd,shadcn-ui-mcp-server,19,,"Provides a dynamic MCP server for accessing shadcn/ui component documentation and examples. Built to scrape and cache information from the official shadcn/ui documentation site and GitHub repository, it offers tools for listing components, retrieving detailed component information, fetching usage examples, and searching through available UI components. Particularly useful for developers and AI assistants seeking structured, up-to-date reference information about shadcn/ui React components."
ynu,mcp-ynu,0,,"MCP-YNU is a server implementation that provides a modular framework for exposing tools, resources, and prompts to AI assistants. Built with FastMCP, it features dynamic module loading from configured directories, environment-based configuration, and support for both stdio and SSE transport protocols. The implementation includes example tools for BMI calculation and weather fetching, resources for configuration and user profile data, and structured prompts for code review and error debugging. With its clean architecture and extensibility, MCP-YNU serves as an ideal foundation for developers looking to create custom MCP servers that bridge AI assistants with various backend services."
yoavniran,cloudinary-mcp-server,0,1938,"Cloudinary MCP Server provides AI assistants with direct access to Cloudinary's Upload and Admin APIs, enabling them to upload, retrieve, search, and delete assets in your Cloudinary cloud. Built by Yoav Niran, this server exposes Cloudinary's media management capabilities as callable tools for AI systems, allowing them to trigger operations like uploading images from URLs, searching assets by tags or expressions, and managing media resources. The implementation uses Node.js and requires minimal configuration with your Cloudinary credentials, making it valuable for workflows where AI assistants need to interact with digital media assets."
yoda-digital,mcp-cerebra-legal-server,2,,"MCP-Cerebra-Legal-Server is an enterprise-grade server for legal reasoning and analysis that provides specialized tools for structured legal thinking, follow-up questioning, and document formatting across multiple legal domains. The implementation detects specific legal contexts (ANSC contestations, consumer protection, and contract analysis) and offers domain-specific guidance, templates, and citation formatting capabilities. Built with TypeScript and the Model Context Protocol SDK, it enables AI assistants to perform sophisticated legal analysis with proper terminology, structured reasoning, and professional document formatting, making it particularly valuable for legal professionals who need domain-specific assistance without leaving their AI assistant interface."
yodakeisuke,mcp-micromanage-your-agent,3,958,"MCP-Micromanage is a task management server that helps developers organize and track their work through a structured approach to breaking down tickets into minimal PRs and commits. Developed by Yoda Keisuke, it provides tools for planning development tasks, tracking implementation progress, and updating status as work progresses. The implementation includes a visualization component built with React and ReactFlow that displays the work plan as an interactive flowchart, allowing developers to filter tasks by status and search for specific items. Ideal for complex development tasks requiring structured breakdown and tracking, but not recommended for tiny tasks due to unnecessary overhead."
yonaka15,mcp-pyodide,8,,"This MCP implementation integrates Pyodide, enabling Python execution in JavaScript environments. Developed as an open-source project, it leverages TypeScript and the Model Context Protocol SDK to provide a standardized interface for running Python code. The implementation focuses on bridging the gap between Python and JavaScript, allowing seamless integration of Python libraries and functionality within MCP-compatible applications. It's particularly useful for developers and AI models needing to utilize Python's data processing and scientific computing capabilities in web-based or Node.js environments, enabling use cases such as data analysis, machine learning, and scientific simulations without the need for a separate Python runtime."
yonaka15,mcp-server-redmine,14,,"This MCP server integrates with Redmine, providing a bridge between MCP and Redmine's project management capabilities. Developed by yonaka15, it enables seamless interaction with Redmine features like issue tracking, time logging, and project planning through the MCP protocol. The implementation is built using TypeScript and leverages the @modelcontextprotocol/sdk for MCP compatibility. It's designed for development teams already using Redmine who want to incorporate AI assistance into their workflow, allowing for natural language queries and updates to Redmine data."
yonaka15,mcp-server-runner,11,,"This MCP server runner, developed by yonaka, provides a WebSocket-based interface for AI assistants to interact with various tools and resources. It implements the MCP protocol version 2024-11-05, supporting capabilities like sampling and offering methods for initialization, resource listing, and tool management. The server is containerized using Docker for easy deployment and includes support for Node.js, Python, and uv package manager, enabling a wide range of potential integrations. By abstracting tool interactions through a standardized WebSocket API, this implementation facilitates AI systems in performing diverse tasks across different environments. It is particularly useful for developers and organizations looking to create flexible, scalable AI assistant applications that can leverage multiple tools and resources through a unified interface."
yorrickjansen,strava-mcp,2,,"A Model Context Protocol server that provides AI assistants with direct access to the Strava API, enabling retrieval of athlete activities, detailed activity information, segment data, and leaderboards. Built with FastMCP and structured using a clean architecture pattern with separate API, service, and model layers, this implementation handles authentication token management automatically and provides comprehensive error handling. Particularly valuable for athletes and coaches who want to analyze training data, compare performance metrics, or track progress across activities without leaving their AI assistant conversation."
yosider,cosense-mcp-server,5,,"This cosense MCP server, forked from funwarioisii's implementation, provides integration between the cosense platform and AI systems using the Model Context Protocol. Built with TypeScript and leveraging the @cosense/std library, it offers a standardized interface for retrieving pages from cosense projects. The server uses environment variables for project name and SID management, enabling both public and private project access. By abstracting cosense functionality into MCP tools, this implementation facilitates use cases such as knowledge base querying, collaborative document analysis, and information retrieval from structured notes. It is designed for easy deployment and debugging, making it valuable for developers building AI-powered tools that interact with cosense data."
yothisistroy,filesys,1,,"FileSystemServer provides a secure interface for AI assistants to browse and read files from a configured directory. Built with the MCP framework, it exposes two key resources: listing available files and reading file contents with robust security measures to prevent directory traversal attacks. The implementation uses a configuration file to specify the target directory and includes comprehensive error handling. This server is particularly useful for scenarios where AI assistants need controlled access to local files without compromising system security."
prajwal-ak-0,youtube-mcp,9,,"YouTube MCP server provides AI assistants with tools to analyze and interact with YouTube video content through transcript extraction, content summarization, natural language querying, and engagement metrics retrieval. Built with Python and Google's Gemini AI, it integrates with both the YouTube Data API and YouTube Transcript API to enable capabilities like searching videos, retrieving comments, and generating AI-powered insights from video transcripts. Particularly valuable for content researchers, educators, and analysts who need to extract insights from YouTube videos without manual transcription or watching."
ia-programming,youtube-mcp,1,,"YouTube MCP Server provides tools for searching YouTube videos, retrieving transcripts, and performing semantic search over video content using Google's generative AI embeddings. Built by FarhaParveen919, the server leverages LanceDB for vector storage and supports multilingual transcript retrieval, enabling users to explore and analyze YouTube content through natural language interactions."
williamvd4,mcp-server-youtube-transcript,0,,"YouTube Transcript Server is an MCP server that enables AI assistants to retrieve transcripts from YouTube videos. Built by Freddie, it provides a simple tool called 'get_transcript' that accepts a YouTube video URL or ID and an optional language parameter to extract captions in the specified language. The implementation uses the youtube-captions-scraper library to handle the extraction process and is packaged as a Node.js application that can be easily installed via Smithery or npm. This server is particularly useful for workflows requiring content analysis, research, or information extraction from YouTube videos without manual transcription."
seanlee10,server-youtube-transcription,0,531,"A server implementation that enables AI assistants to extract transcriptions from YouTube videos through a simple interface. Built by Sean Lee using the youtube-transcript library, it exposes a single tool that accepts a video URL and returns the full transcript text. This implementation is particularly useful for applications that need to analyze or reference YouTube video content without manual transcription work."
yuanooo,oceanbase_mcp_server,2,,"OceanBase MCP Server provides a secure interface for AI assistants to interact with OceanBase databases through standardized tools and resources. Developed by yuanoOo, it enables listing tables, reading data, and executing SQL queries with configurable permission levels as outlined in its security documentation. The server implements the Model Context Protocol using Python's asyncio and mysql-connector, exposing database tables as resources and providing an execute_sql tool with special handling for common query types. This implementation is particularly valuable for data analysts and database administrators who need to explore and analyze OceanBase data directly through AI assistants without compromising security."
yuchenssr,quantum-simulator-mcp,9,,"The Quantum Simulator MCP Server provides a Docker-based quantum circuit simulator that integrates with MCP clients like Claude for Desktop. It leverages Qiskit to simulate quantum circuits with various noise models, supporting OpenQASM 2.0 format and offering multiple result types including counts, statevector, and visualized histograms. The server exposes tools for running circuits, listing noise models, analyzing circuit statistics, and creating test outputs, while also providing pre-configured example circuits. This implementation enables AI assistants to perform quantum computing simulations directly within conversations, making it valuable for educational demonstrations, algorithm testing, and quantum noise analysis without requiring specialized quantum computing knowledge."
yuheinakasaka,arithmetic-mcp-server,0,,"This MCP server implementation provides arithmetic operations for basic calculations. Developed using TypeScript and the Model Context Protocol SDK, it offers a simple and standardized interface for performing mathematical computations. The server is designed to be lightweight and efficient, making it suitable for integration into AI-assisted workflows or applications that require basic arithmetic functionality without the need for complex mathematical libraries."
yuheinakasaka,scrapbox-mcp,2,,"This MCP server implementation provides integration with Scrapbox, a collaborative note-taking and knowledge management platform. Developed by YuheiNakasaka, it offers functionality to retrieve content from Scrapbox pages using a 'get_page_content' tool. The server is built with TypeScript and uses the @modelcontextprotocol/sdk, making it suitable for applications that need to incorporate Scrapbox data into MCP-based workflows or AI-assisted knowledge management systems."
nota,gyazo-mcp-server,8,,"This MCP server, developed by an unknown author, provides integration with the Gyazo image hosting service. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for accessing and interacting with Gyazo images. The implementation focuses on image retrieval and metadata extraction, with features like OCR data access and fetching the latest uploaded image. It's particularly useful for AI assistants and applications that need to work with visual content, enabling use cases such as image analysis, content moderation, or automated reporting based on screenshots without directly dealing with the Gyazo API complexities."
photosynth-inc,gitlab_review,2,,"This GitLab Review MCP server, developed by Yu Ito, facilitates code review processes by integrating with GitLab's API. Built using TypeScript and the Model Context Protocol SDK, it provides tools for retrieving merge request details, fetching the latest versions, and posting discussion comments. The server utilizes environment variables for GitLab authentication and API URL configuration, ensuring flexibility across different GitLab instances. It's particularly useful for developers and teams looking to automate parts of their code review workflow, enabling AI-assisted analysis and commenting on GitLab merge requests directly through MCP-compatible clients."
yuna0x0,anilist-mcp,23,,"Anilist MCP server enables AI assistants to interact with the Anilist anime/manga database through GraphQL queries. The implementation appears to have encountered issues during repository cloning, suggesting it may be in development or experiencing accessibility problems. When functioning, it would likely provide tools for searching, retrieving, and analyzing anime and manga information from Anilist, making it valuable for conversations about Japanese media where accurate database information is needed."
yuna0x0,hackmd-mcp,18,4194,"HackMD MCP Server provides a bridge between AI assistants and the HackMD API, enabling document management operations within collaborative markdown environments. Built by yuna0x0, this TypeScript implementation allows Claude and other AI assistants to create, read, update, and delete notes, manage team documents, and access user information through a standardized interface. The server includes comprehensive authentication handling via API tokens and supports both personal and team-based workflows. It's particularly valuable for users who want AI assistance with document creation and management in HackMD without leaving their conversation context."
yuniko-software,minecraft-mcp-server,38,,"Minecraft MCP Server enables AI assistants to control a Minecraft bot through a comprehensive set of tools built on the Mineflayer library. The implementation provides capabilities for movement, block interaction, inventory management, entity detection, and in-game chat communication. Running as a command-line application with configurable server connection parameters, it establishes a bot that can navigate the Minecraft world, manipulate blocks, use items, and interact with the environment based on AI instructions. Particularly valuable for demonstrating AI-controlled gameplay, automated building, resource gathering, or exploration tasks without requiring direct player input."
yunwoong7,aws-nova-canvas-mcp,2,,"AWS Nova Canvas MCP Server provides a bridge to Amazon's Nova Canvas image generation model through AWS Bedrock. The implementation authenticates with AWS credentials, handles image generation requests, and stores the resulting images in a configurable directory. Built with Python 3.12, it uses boto3 for AWS API interactions and exposes a server interface that allows AI assistants to generate images via the Nova Canvas model. This server is particularly useful for applications requiring AI image generation capabilities without direct integration with AWS services."
yuru-sha,mcp-server-dify,9,,"This MCP server implementation provides a bridge to Dify AI's chat completion capabilities, enabling AI assistants to interact with Dify's API through a standardized protocol. Developed by yuru-sha, it offers tools for restaurant recommendations and supports conversation context and streaming responses. Built with TypeScript and integrating the Model Context Protocol SDK, the server focuses on secure API key management and easy setup within the Claude Desktop environment. It is particularly useful for applications requiring natural language interactions, such as chatbots or AI-driven customer service systems, leveraging Dify AI's language model capabilities for enhanced conversational experiences."
yuru-sha,mcp-server-mysql,5,,"This MCP server implementation provides a bridge to MySQL databases, enabling AI assistants to inspect database schemas and execute read-only queries. Developed by yuru-sha, it offers tools for safe query execution within READ ONLY transactions, ensuring data integrity. The server is built using TypeScript and integrates with the Model Context Protocol SDK. It features Docker support and is available as an NPM package, making it easy to deploy in various environments. The implementation focuses on security and read-only access, making it suitable for AI applications that need to analyze data or generate insights from MySQL databases without risking data modification."
yussefz,mcp-celigo,0,,"Provides a lightweight MCP server for retrieving customer data from Integrator.io via a FastMCP-powered tool. Uses an async HTTP client to make requests to a specific export endpoint, with built-in error handling and environment-based configuration. Designed to simplify customer data retrieval through a standardized, easily extensible interface."
yuzongmin,literature-memory-server-fastmcp-mcp,2,,"This Literature Management MCP server, developed by an unnamed creator, provides a comprehensive system for managing academic sources and integrating them with knowledge graphs. Built with Python using FastMCP and SQLite, it offers tools for source tracking, note-taking, and entity linking across various source types like papers, books, and webpages. The server implements features such as flexible identifier management, structured note organization, and bidirectional entity relationships. By bridging literature management with knowledge graphs, it enables AI systems to efficiently analyze and contextualize academic sources. This implementation is particularly valuable for researchers and knowledge workers, facilitating use cases such as literature reviews, citation network analysis, and knowledge base construction in academic and professional settings."
yuzongmin,memory-mcp-manager,0,,"This Memory MCP Manager, developed by Shane Holloman, provides a flexible system for managing and switching between different memory paths for Claude clients using the mcp-knowledge-graph server. Built with Python and Bash, it offers tools for adding, removing, and switching memory paths, as well as managing multiple Claude client configurations. The implementation stands out by allowing users to maintain separate memory contexts for different projects, updating all registered Claude clients when switching memory paths. It's particularly useful for developers and researchers working on multiple projects with Claude, enabling seamless context switching and organized memory management across various AI-assisted tasks."
yuzongmin,semantic-scholar-fastmcp-mcp-server,22,,"This Semantic Scholar MCP server, developed by an unnamed creator, provides a robust interface to the Semantic Scholar Academic Graph API. Built with Python using FastMCP and httpx, it offers tools for paper search, citation analysis, author information retrieval, and paper recommendations. The server implements advanced features like complex filtering, customizable ranking strategies, and efficient batch operations. By abstracting Semantic Scholar API operations into a standardized MCP format, it enables AI systems to easily access and analyze academic literature at scale. This implementation is particularly valuable for research and academic applications, facilitating use cases such as literature reviews, trend analysis, citation network exploration, and personalized paper recommendations."
yuzongmin,sqlite-literature-management-fastmcp-mcp-server,10,,"This Literature Management System MCP server, developed by an unnamed creator, provides a comprehensive interface for managing research papers and integrating with knowledge graphs. Built with Python using SQLite and the FastMCP library, it offers tools for flexible paper identification, structured note-taking, entity linking, and research analysis. The server implements a robust database schema with support for various literature sources and entity relationships. By abstracting literature management operations into a consistent MCP format, it enables AI systems to easily track reading progress, analyze research trends, and identify knowledge gaps. This implementation is particularly valuable for academic and research applications, facilitating use cases such as literature reviews, research planning, and knowledge graph construction."
yworks,mcp-typescribe,10,,"TypeScribe MCP Server provides a bridge between TypeScript API documentation and AI assistants, enabling natural language queries about TypeScript codebases. Developed by yWorks, this server loads TypeDoc JSON documentation and exposes a suite of specialized tools for searching symbols, exploring type hierarchies, finding implementations, and examining function parameters. The implementation is particularly useful for developers seeking to understand complex TypeScript APIs through conversational interfaces, with features that support both high-level API exploration and detailed code inspection."
yywz1999,gdb-mcp-server,17,,"GDB MCP Server provides AI-assisted debugging capabilities by integrating GDB (GNU Debugger) with the Model Context Protocol. The implementation creates a bridge between Cursor's AI capabilities and GDB functionality, allowing for interactive debugging sessions through both HTTP and MCP interfaces. It supports core debugging operations including breakpoint management, memory examination, disassembly, and command execution, while handling process discovery and terminal communication via AppleScript. Designed for developers working with C/C++ applications, this server enables AI assistants to help analyze code behavior, identify bugs, and understand program execution flow during debugging sessions."
yzfly,mcp-python-interpreter,17,2116,"MCP Python Interpreter provides a secure environment for LLMs to interact with Python, enabling code execution, file operations, and package management within isolated working directories. Developed by YZFly, it supports multiple Python environments (system and conda), offers comprehensive file handling with safety limits, and includes tools for running code, managing packages, and debugging errors. The server is designed with strong security features including isolated working directories, file size limits, and explicit overwrite protection, making it ideal for AI-assisted Python development, data analysis, and educational programming tasks."
z4none,rapidocr-mcp,2,4639,"RapidOCR MCP Server provides optical character recognition capabilities through a simple interface built on the RapidOCR library. It exposes two main tools: ocr_by_content for processing base64-encoded image data and ocr_by_path for analyzing images from file paths. The server runs using the MCP transport protocol over stdio, making it compatible with various client applications. This implementation is particularly useful for extracting text from images in workflows that require automated document processing or image-based text extraction."
z80dev,cryo-mcp,85,3989,"Cryo MCP Server provides a powerful interface for querying Ethereum blockchain data using the Cryo extraction tool and DuckDB for efficient SQL-based analysis. Built by z80, it enables developers and researchers to download, explore, and analyze blockchain data through a flexible API that supports querying blocks, transactions, logs, and other datasets with advanced filtering and aggregation capabilities. The implementation is particularly useful for blockchain researchers, data analysts, and developers seeking programmatic access to on-chain data with minimal setup complexity."
zacco16,gmail-mcp-server,0,,"This Gmail MCP server, developed for integrating Gmail functionality into AI workflows, provides a streamlined interface to the Gmail API through the Model Context Protocol. Built with TypeScript and leveraging Google's authentication libraries, it offers tools for listing and reading emails with support for filtering and search queries. The implementation simplifies OAuth2 authentication and provides a clear API for email operations, making it accessible for AI assistants or applications needing to process email content. It's particularly useful for tasks like email management, content analysis, or automated responses, enabling programmatic access to Gmail data while handling authentication complexities."
zajtools,zaj-mysql-mcp,0,,"This MCP server implementation provides a bridge to MySQL databases, enabling AI assistants to execute SQL queries, analyze database schemas, and generate business insights. Developed by zajTools, it offers tools for reading and writing data, managing tables, and appending discovered insights to a continuously updated memo. The server is designed for use cases requiring AI-driven database interaction and business intelligence, such as data analysis, report generation, and automated insight discovery."
zalab-inc,mcp-mysql-app,0,,"MCP MySQL App provides a set of tools for AI systems to interact with MySQL databases through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, it enables AI assistants to execute SQL queries and check database connectivity with robust error handling. The implementation includes type-safe tool definitions and session awareness, making it particularly valuable for AI-assisted database operations in applications like Cursor and Claude. The server is configured through environment variables for database connection details, allowing secure access to MySQL databases directly within AI conversation interfaces without requiring manual SQL construction."
zanetworker,mcp-docling,8,,"This MCP server implementation provides document processing capabilities using the Docling library. It offers tools for converting documents to markdown format, extracting tables, and handling embedded images, with support for OCR and batch processing. Developed by Red Hat GmbH, it features caching for improved performance and configurable acceleration options. The server is designed for use cases requiring AI assistants to interact with and analyze various document formats, enabling natural language processing of structured and unstructured data."
zannyonear1h1,mcp-memory-bank-1,1,,"Zanny's Persistent Memory Manager is a custom MCP server that functions as a persistent memory bank for AI assistants. Built with TypeScript and Express, it implements JSON-RPC endpoints for storing, retrieving, searching, and deleting memories with optional tagging capabilities. The server was recently updated to properly implement the MCP specification with JSON-RPC support, structured logging, and tool definitions that expose memory operations through standardized endpoints. This implementation is particularly valuable for AI workflows requiring persistent memory across conversations, enabling natural language command processing for memory management."
zaycruz,docker_mcp,0,,"Docker MCP Server provides a secure environment for executing code in isolated Docker containers, returning results to language models like Claude. It supports running commands and multi-line scripts in any language with a Docker image, featuring robust error handling with timeout management and graceful fallbacks. The implementation includes tools for creating containers, executing code, and cleaning up resources, making it ideal for AI assistants that need to safely run code examples, test algorithms, or perform complex computations without compromising the host system."
zcaceres,fetch-mcp,270,,"This fetch MCP server, developed by Zach Caceres, provides AI assistants with a standardized interface for retrieving web content in various formats. Built using TypeScript and the Model Context Protocol SDK, it offers tools for fetching HTML, JSON, plain text, and Markdown from URLs. The server handles custom headers, HTML parsing, and Markdown conversion, abstracting away the complexities of web scraping and content transformation. It's particularly valuable for AI systems that need to gather and process online information, enabling use cases such as content aggregation, web research, data extraction, and automated summarization of web pages."
zcaceres,gtasks-mcp,33,,"This Google Tasks MCP server, developed by Zach Caceres, provides AI assistants with task management capabilities using the Google Tasks API. Built with TypeScript and leveraging the Google Cloud SDK, it offers a streamlined interface for listing, searching, creating, updating, and deleting tasks. The server implements robust authentication flows, pagination support, and handles various task attributes like due dates and notes. By abstracting the complexities of API communication and task management, it allows AI systems to easily incorporate to-do list functionality into their workflows. This implementation is particularly valuable for productivity applications, personal assistants, and project management tools, enabling use cases such as automated task scheduling, deadline tracking, and collaborative task assignment."
zcaceres,markdownify-mcp,1317,,"This Markdownify MCP server, developed by Zach Caceres, provides a versatile solution for converting various file types and web content to Markdown format. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for transforming PDFs, images, audio files, web pages, and more into easily readable and shareable Markdown text. The implementation stands out by supporting a wide range of input formats and including specialized converters for sources like YouTube transcripts and Bing search results. It's particularly useful for content creators, researchers, and developers who need to streamline document conversion workflows, create accessible content from diverse sources, or integrate Markdown generation capabilities into AI-assisted applications."
zebedeeio,zbd-mcp-server,4,,"ZBD MCP Server provides Bitcoin Lightning Network payment capabilities for AI assistants through integration with the ZBD API. It offers over 20 tools for sending payments, creating charges, validating addresses, and managing wallets - enabling instant Bitcoin transactions to email addresses, Lightning addresses, and ZBD Gamertags. The implementation is built with TypeScript using the official MCP SDK, requires a ZBD API key for authentication, and is particularly valuable for workflows requiring cryptocurrency payments without leaving the conversation interface."
zedmoster,revit-mcp,9,61461,"Revit-MCP provides a bridge between Autodesk Revit and AI tools through the Model Context Protocol, enabling programmatic interaction with Revit models. Developed by zedmoster, this server implementation facilitates operations like finding, creating, updating, and deleting Revit elements including walls, floors, levels, grids, and family instances. The server establishes a TCP socket connection to Revit, translates commands into JSON-RPC requests, and handles responses with robust error management. Ideal for BIM automation workflows, architectural design assistance, and construction documentation tasks that require direct manipulation of Revit model data."
zeeroiq,pet-adoption-scheduling-service,1,,"This Pet Adoption Scheduling Service is a Spring Boot application that exposes a tool for scheduling pet adoption appointments through the Spring AI Model Context Protocol. It leverages Spring AI's ToolCallbackProvider to make the scheduling functionality available to AI assistants, allowing them to book appointments for specific pets by ID and name. When an appointment is scheduled, the service returns a JSON timestamp for an appointment three days in the future, making it useful for pet adoption agencies looking to automate their appointment booking process through AI interfaces."
zekus,shortcut-mcp,3,,"This Shortcut MCP server provides AI assistants with a standardized interface to interact with the Shortcut project management platform. Built using Python and leveraging libraries like httpx and python-dotenv, it offers capabilities for managing tasks, stories, and workflows within Shortcut projects. The server abstracts the complexities of the Shortcut API, handling authentication and data operations seamlessly. It's particularly valuable for development teams and project managers looking to integrate AI-driven automation into their Shortcut workflows, enabling use cases such as automated task assignment, progress tracking, and intelligent project analytics within the Shortcut ecosystem."
zenml-io,mcp-zenml,16,,"This ZenML MCP server enables AI assistants to interact with ZenML, an open-source ML pipeline management platform. Built with Python using FastMCP, it provides tools to access core ZenML functionality including users, stacks, pipelines, runs, services, components, artifacts, and logs. The implementation allows querying pipeline metadata, triggering new pipeline runs, and analyzing run history through standardized MCP tools. It handles authentication via API keys and includes robust error handling, making it ideal for ML engineers who want to monitor and manage their machine learning workflows through conversational AI interfaces."
sifue,zen-syllabus-mcp,4,,"Zen-Syllabus is an MCP server implementation that provides access to educational subject information through a structured API. Built with TypeScript and the Model Context Protocol SDK, it offers tools for retrieving comprehensive lists of subjects and detailed information about specific subjects based on enrollment grade and keyword filters. The implementation enables AI assistants to query educational curriculum data, making it particularly useful for students, educators, and educational institutions seeking to access and analyze course information programmatically."
zentala,zntl-mcp-server,0,,"A Model Context Protocol server implementation for the Transcripter project that provides AI-powered features for audio transcription and analysis. Built with TypeScript and Express, it exposes tools for testing API endpoints, searching transcriptions, generating summaries, fetching news, and analyzing content. The server supports both SSE and stdio transport mechanisms, making it versatile for web and command-line interfaces. It includes resource providers for accessing transcription and analysis data through standardized URIs, enabling AI models to interact with the application's core functionality in a structured way."
dkmaker,mcp-azure-tablestorage,5,,"This Azure Table Storage MCP server, developed by Christia Pedersen, provides AI assistants with a standardized interface to interact with Azure Table Storage. Built using TypeScript and leveraging the @azure/data-tables library, it offers capabilities for storing, retrieving, and querying structured data in the cloud. The server abstracts the complexities of Azure Table Storage operations, handling authentication, data serialization, and query optimization. It's particularly valuable for developers and AI systems working with large-scale, semi-structured data, enabling use cases such as log data storage, user profile management, and IoT telemetry processing within the Azure ecosystem."
dkmaker,mcp-rest-api,31,1811,"This MCP REST API tester, developed by Christian Pedersen, provides a generic tool for testing HTTP endpoints. Built with TypeScript and leveraging the MCP SDK and Axios, it offers a command-line interface for sending requests and analyzing responses. The implementation focuses on flexibility and ease of use, allowing developers to quickly test and debug REST APIs without writing custom scripts. It supports various HTTP methods, custom headers, and request bodies, while also providing options for SSL verification control. This tool is particularly valuable for API developers, QA testers, and integration specialists, enabling efficient API testing, response validation, and troubleshooting across different environments and security configurations."
zeparhyfar,mcp-datetime,10,11313,"This MCP datetime server, developed by ZeparHyfar, provides flexible date and time formatting capabilities for AI assistants like Claude. Built in Python, it offers a wide range of output formats including standard, Japanese, ISO, and filename-optimized options. The implementation stands out by supporting timezone-aware formatting and specialized use cases like log timestamps and compact IDs. By connecting AI systems to precise and customizable datetime handling, this server enables automated report generation, filename creation, and localized time display. It is particularly useful for building AI-powered tools that require consistent datetime formatting across different locales and use cases."
zephyrdeng,pprof-analyzer-mcp,4,,"pprof-analyzer-mcp is a Go-based server that enables AI assistants to analyze Go performance profiles. Developed by ZephyrDeng, it leverages the Google pprof library to parse CPU, heap, and goroutine profiles, extracting key metrics and generating flame graphs for visualization. The server processes profile data through specialized analyzers for different profile types, providing insights into performance bottlenecks, memory usage patterns, and concurrency issues. It's particularly valuable for developers who need to diagnose performance problems in Go applications without manually interpreting complex profiling data."
zereight,confluence-mcp,10,2700,"This MCP server, developed by zereight, provides integration with Confluence and JIRA APIs. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for interacting with Atlassian's collaboration and project management platforms. The implementation focuses on simplifying API access through environment variable configuration, making it easy to set up and use in various environments. By connecting AI models with Confluence and JIRA data, this server enables sophisticated querying and management scenarios, enhancing the ability to retrieve and manipulate project information, documentation, and issues. It's particularly useful for applications and AI assistants that require programmatic access to Atlassian tools, streamlining workflows and automating tasks within these platforms."
zereight,gitlab-mcp,53,13111,"This MCP server, developed by zereight, provides a standardized interface for interacting with GitLab's API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for repository management, issue tracking, merge request handling, and file operations. The implementation focuses on adapting GitLab-specific concepts to a generalized API, enabling AI models to perform complex Git operations and project management tasks. By connecting AI assistants with GitLab's extensive feature set, this server allows for sophisticated scenarios like automated code reviews, project analytics, and collaborative development workflows. It's particularly useful for teams and organizations using GitLab who want to integrate AI-powered automation into their development processes."
zeropathai,zeropath-mcp-server,2,,"ZeroPath MCP Server provides a secure interface for AI assistants to interact with the ZeroPath vulnerability management platform, enabling vulnerability search, detailed issue retrieval, and patch approval workflows. The implementation authenticates via environment variables (token ID, token secret, and organization ID) and exposes three specialized tools that allow users to search for vulnerabilities using custom queries, retrieve detailed information about specific issues including patch information, and approve patches for identified vulnerabilities. The server processes API responses into LLM-friendly formats, highlighting key vulnerability details such as severity, affected files, and patch status, making it particularly valuable for security teams who want to streamline vulnerability management workflows through AI assistant interactions."
nermalcat69,zerops-mcp,0,,"Zerops Documentation MCP Server crawls and indexes the Zerops documentation website, making it available as a context source for Cursor IDE. Written in TypeScript, it uses Drizzle ORM with PostgreSQL to store indexed content, implements a search API with relevance scoring, and exposes an MCP endpoint that follows the Model Context Protocol. The server features scheduled crawling to keep documentation up-to-date, intelligent content extraction using multiple selectors, and a polite crawling mechanism that respects server load. This implementation is particularly valuable for developers working with Zerops who want to access documentation directly within their IDE without context switching."
zerubroberts,safetyculture-mcp-server,0,,"SafetyCulture MCP Server provides a bridge to the SafetyCulture API, enabling AI assistants to query and analyze workplace safety inspection and action data. Built with Python and the FastMCP framework, it offers tools for retrieving inspections, tracking actions, analyzing trends, and comparing safety reports across different time periods. Particularly valuable for safety managers and compliance teams who want to leverage AI to gain insights from their SafetyCulture data."
zhangzhongnan928,mcp-blockchain-server,5,,"This MCP server implementation enables secure blockchain interactions for AI assistants while ensuring users maintain control over private keys and transaction signing. It features a Node.js backend with PostgreSQL for data persistence, Redis for caching, and integrates with Ethereum and EVM-compatible chains via Infura. The system includes a React-based Web DApp for wallet connection and transaction approval, making it suitable for AI-driven blockchain applications that prioritize user security and control."
zhangzhongnan928,mcp-evm-signer,0,,"This MCP server implementation provides Ethereum wallet management and blockchain interaction capabilities. Developed by zhangzhongnan928, it offers tools for creating and importing wallets, checking balances, sending transactions, and deploying/interacting with smart contracts via Infura. The server is designed for use cases requiring AI assistants to manage Ethereum wallets, execute transactions, or interact with EVM-compatible blockchains through a secure, locally-run interface."
zhangzhongnan928,mcp-pa-ai-agent,5,,"This MCP server implementation provides a versatile personal assistant framework with modules for calendar management, task tracking, email handling, knowledge retrieval, and smart home control. Built with Python using the FastMCP library, it offers a modular architecture for easy extensibility. The server includes features like Google API integration, Home Assistant connectivity, and DuckDuckGo web search capabilities. It's designed for developers creating AI-powered personal assistant applications that require access to various external services and data sources."
zhangzhongnan928,mcp-warpcast-server,2,,"This MCP server integrates with Warpcast, enabling AI assistants to interact with the Farcaster social network. It provides tools for posting casts, reading user content, searching, and managing channel interactions. The server uses Ed25519 authentication and is designed for use cases like automated social media management, content curation, and trend analysis on Warpcast."
zhaoyouj,mcp-slicer,6,1161,"MCP-Slicer provides a bridge between AI assistants and 3D Slicer, a popular medical imaging platform, through the Slicer Web Server API. Developed by zhaoyouj, this server exposes two main tools: listing MRML nodes with filtering capabilities and executing Python code directly in the 3D Slicer environment. The implementation connects to a locally running Slicer instance on port 2016, making it ideal for medical professionals and researchers who want to leverage AI assistants for medical image analysis, visualization, and manipulation tasks without leaving their workflow."
zhiwei5576,excel-mcp-server,13,1617,"Excel MCP Server provides a Node.js-based interface for AI assistants to interact with Excel files through the Model Context Protocol. Built by zhiweixu, it offers tools for reading sheet names, extracting data from specific sheets, and managing workbook caching to improve performance with large files. The implementation uses the xlsx library for Excel operations and includes robust error handling and path normalization. It's particularly useful for workflows requiring data extraction, analysis, or manipulation of Excel spreadsheets without requiring users to manually open and navigate files."
zhongmingyuan,mcp-my-mac,1,,"MCP My Mac is a lightweight server that provides AI assistants like Claude with real-time access to Mac system information through a simple API. Developed by Mingyuan Zhong, it safely executes verified commands like 'system_profiler' and 'conda' to gather hardware specifications, system configuration, and resource usage data. The server runs locally with minimal overhead, making it particularly valuable for Mac users experimenting with AI and deep learning who need targeted assistance with software optimization and troubleshooting without manually sharing system details."
zhsama,duckduckgo-mcp-server,27,,"A TypeScript-based DuckDuckGo search server that provides a lightweight integration for retrieving search results through the duck-duck-scrape library. Built by zhsama, this server enables programmatic search functionality with minimal configuration, targeting developers who need a straightforward search API powered by DuckDuckGo's search capabilities."
zhuzhoulin,dify-mcp-server,3,,"A Dify MCP server implementation that enables AI assistants to interact with the Dify platform through the Model Context Protocol. Built with TypeScript, this server provides a bridge between MCP-compatible clients and Dify's API, allowing AI systems to leverage Dify's capabilities for creating, managing, and deploying AI applications. The implementation handles authentication, request formatting, and response parsing, making it straightforward to integrate Dify's functionality into AI workflows. It's particularly useful for scenarios where AI assistants need to access or manipulate Dify applications programmatically."
zilliztech,mcp-server-milvus,74,,"Milvus MCP Server provides a bridge between AI assistants and Milvus vector database, enabling vector search, full-text search, and hybrid queries through a comprehensive API. Built by Zilliz, it offers tools for managing collections, performing similarity searches, and executing complex queries with filtering capabilities. The implementation handles connection management, data insertion, and index creation while abstracting away the complexities of the Milvus client SDK. This server is particularly valuable for AI workflows requiring semantic search, knowledge retrieval, and structured data exploration from vector databases."
zilongxue,claude-post,57,,"Email Client MCP server provides a powerful interface for AI assistants to manage email communications through IMAP and SMTP protocols. Built with Python 3.12 and the MCP framework, it enables searching emails with flexible criteria, retrieving full message content, counting daily email volumes, and sending new messages with confirmation steps. The implementation handles authentication through environment variables, processes emails asynchronously to prevent blocking, and includes comprehensive error handling and logging. This tool is particularly valuable for workflows requiring email management directly within AI assistant conversations, such as organizing inbox content, analyzing communication patterns, or drafting and sending messages without switching contexts."
zinja-coder,jadx-mcp-server,49,,"JADX-MCP-Server is a FastMCP implementation that provides AI assistants with access to JADX-GUI, a popular Java decompiler tool. This server enables reverse engineering workflows by exposing tools to fetch current class code, retrieve selected text, search for methods across classes, and access both Java and Smali representations of decompiled code. The implementation communicates with a locally running JADX-GUI plugin via HTTP endpoints, allowing AI assistants to analyze Android applications or Java bytecode without direct GUI interaction. It's particularly useful for security researchers, app developers, and reverse engineers who need AI assistance when examining compiled Java code."
zkytech,api-doc-mcp,1,357,"A TypeScript-based MCP server for managing and retrieving OpenAPI documentation, providing tools to list API groups, retrieve API details, and search APIs across both remote and local JSON specifications. Supports auto-refreshing documentation and offers a CLI interface for easy interaction with OpenAPI specs, making it straightforward to explore and understand complex API landscapes."
zoharbabin,kaltura-mcp,1,,"Kaltura MCP Server provides a standardized interface for interacting with the Kaltura Media Management Platform, enabling Large Language Models to perform media-related operations like listing, retrieving, uploading, and managing media entries, categories, and users. Built by Zohar Babin, it leverages the Kaltura API Client SDK and supports multiple transport mechanisms (stdio, HTTP, SSE) with intelligent context management strategies, making it particularly useful for AI-driven media workflow automation and content management."
zoomeye-ai,mcp_zoomeye,23,,"The ZoomEye MCP Server provides network asset information to LLMs through a set of specialized tools that query the ZoomEye API. Developed by zoomeye.ai, this Python implementation enables searching for global network assets using dorks, with support for filtering by IP version, pagination, and specific field selection. The server features caching to improve performance, automatic retry mechanisms for failed API requests, and comprehensive error handling. It can be deployed via Docker, pip installation, or run directly with uv, requiring only a ZoomEye API key for authentication. This implementation is particularly valuable for cybersecurity workflows requiring network reconnaissance capabilities within AI assistant conversations."
54yyyu,zotero-mcp,10,,"Zotero MCP is a server that enables AI assistants to interact with Zotero reference management libraries through the Model Context Protocol. It provides tools for searching literature, retrieving metadata and full-text content, managing collections and tags, and performing batch operations on library items. The implementation supports both local Zotero desktop instances and the Zotero Web API, making it particularly valuable for researchers and academics who want to query their reference libraries, extract content from papers, and organize their research materials directly through AI assistants like Claude Desktop."
jotjunior,mcp-server-zplanner,0,,"MCP-Server-zPlanner is a project management tool implementation that enables AI assistants to create and manage project plans through a standardized interface. It provides tools for creating projects, adding phases and tasks, tracking completion status, and generating progress reports. Built with TypeScript and Node.js, it features a file-based storage system, HTML export capabilities, and detailed progress calculation. This implementation is particularly valuable for users who want to organize projects with hierarchical task structures, monitor progress metrics, and generate visual representations of project status directly through conversational AI."
zqushair,frontapp-mcp,0,,"Frontapp-MCP provides a robust integration between Claude and the Front customer communication platform, enabling AI assistants to manage conversations, contacts, and accounts directly through the Front API. The implementation includes comprehensive webhook support for real-time event handling, secure credential management, and rate limiting to prevent API abuse. Built with TypeScript and Express, it features a modular architecture with separate handlers for different Front resources, extensive error handling, and detailed logging capabilities. Particularly valuable for customer support teams looking to leverage AI assistance for managing customer communications, tagging conversations, assigning team members, and sending responses without leaving their conversation interface."
ztobs,cline-browser-use-mcp,17,,"This MCP server, developed by an unknown author, provides browser automation capabilities for AI agents. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for capturing screenshots, retrieving HTML content, executing JavaScript, and accessing console logs from web pages. The implementation focuses on flexibility and error handling, with features like custom interaction steps and Xvfb support for headless operation. It's particularly useful for AI assistants and applications that need to interact with web content, enabling use cases such as web scraping, automated testing, or content analysis without directly dealing with browser automation complexities."
zubeidhendricks,canva-mcp-typescript,7,,"This TypeScript MCP server implementation provides a robust solution for generating viral content with Canva. Developed by ZubeidHendricks, it offers tools for parsing spreadsheet data, creating Canva templates, generating bulk content, exporting designs, and scheduling social media posts. The server leverages the @modelcontextprotocol/sdk and integrates with Canva's API to streamline the content creation process. It's particularly useful for marketers, social media managers, and content creators who need to produce large volumes of visually appealing, data-driven content efficiently. The implementation focuses on type safety, using Zod for runtime validation and TypeScript for static type checking, ensuring reliable operation in production environments."
zueai,frontend-review-mcp,22,1305,"This MCP server performs visual reviews of UI edit requests. It integrates with Hyperbolic's AI models to analyze before and after screenshots, providing a yes/no response with explanations for rejected edits. The implementation includes fallback models, customizable model selection, and is designed for frontend development workflows requiring automated visual QA."
zueai,neon-mcp,6,,"This MCP server provides a lightweight interface to the Neon REST API, allowing AI agents like Cursor to interact with Neon's serverless Postgres database. Built with Cloudflare Workers, it offers tools for managing Neon projects, branches, and endpoints. The implementation is designed for easy deployment and integration, making it useful for developers looking to incorporate Neon's database capabilities into their AI-assisted workflows."
zueai,vercel-api-mcp,7,,"This MCP server provides a lightweight interface to the Vercel API, enabling AI agents to interact with Vercel's deployment and project management features. Developed by zueai, it offers a streamlined approach to automating Vercel-related tasks through natural language commands. The server is particularly useful for developers looking to integrate Vercel operations into their AI-assisted workflows, such as managing deployments, configuring projects, or retrieving deployment information."
zueai,workos-mcp,3,,"This MCP server provides a bridge to the WorkOS API, enabling integration of enterprise-grade authentication and user management features into AI-assisted workflows. Developed by Zue AI, it offers tools for interacting with WorkOS functionalities like Single Sign-On (SSO) and Multi-Factor Authentication (MFA). The server is particularly useful for applications requiring secure, scalable identity management and access control in enterprise environments."
zundamonnovrchatkaisetu,unity-mcp-ollama,3,,"Unity MCP Ollama integrates the Unity Editor with local large language models through Ollama, enabling AI-assisted game development workflows. Developed by ZundamonnoVRChatkaisetu, this Python-based server creates a bridge between Unity and Ollama's LLMs, allowing developers to manipulate Unity objects, scripts, materials, and scenes through natural language commands. The implementation features a comprehensive set of tools for scene management, object manipulation, script editing, and asset handling, making it particularly valuable for streamlining complex Unity development tasks without leaving the editor environment."
zxfgds,mcp-code-indexer,1,,"The MCP Code Indexer is a server implementation designed to enhance AI agents' code understanding capabilities. It utilizes advanced embedding models and vector databases to index and retrieve code snippets efficiently. The server integrates with the MCP protocol, supports multiple programming languages through tree-sitter parsing, and offers a flexible API for code search and analysis tasks. It's particularly useful for AI-assisted software development, code review, and automated documentation generation."
zxfgds,mcp-toolkit,0,206,"MCP-Toolkit is a server implementation that provides AI assistants with access to local and network resources through a collection of specialized tools. It includes capabilities for file system operations via Everything search integration, database connections (MySQL, PostgreSQL, Redis), GitHub API access, web page content extraction, and command execution with security constraints. Built with TypeScript and Node.js, it features configurable workspace paths, proxy support, and execution timeouts to maintain security. This toolkit is particularly valuable for developers who need their AI assistants to interact with local files, search code repositories, query databases, or extract information from web pages without switching contexts."
servers,simple-tool,0,,A simple MCP server that exposes a website fetching tool.
zym9863,pixabay-mcp,2,,"Pixabay MCP server provides a bridge to the Pixabay image search API, enabling AI assistants to retrieve images based on search queries with flexible filtering options like image type, orientation, and result count. Built with TypeScript and the Model Context Protocol SDK, it exposes a single tool for searching images that returns preview URLs, tags, and user information, making it useful for applications requiring dynamic image retrieval and display."
zym9863,together-ai-image-server,3,,"This MCP server implementation provides a bridge to the Together AI API for generating images. Developed by zym, it utilizes TypeScript and Node.js, offering tools for image creation based on text prompts. The server integrates with the Model Context Protocol SDK and includes features for building and running the application. It's designed for use cases requiring AI-powered image generation, such as creating visual content or enhancing creative workflows."
zzaebok,mcp-wikidata,4,,"MCP-Wikidata provides tools to interact with Wikidata, enabling AI assistants to search for entity and property identifiers, extract metadata, and execute SPARQL queries. Developed by Jaebok Lee, this server implementation connects to the Wikidata API and offers five key functions: searching entities and properties, retrieving associated properties for a given entity, executing custom SPARQL queries, and fetching metadata like labels and descriptions. The implementation is particularly valuable for applications requiring structured knowledge from Wikidata, such as answering factual questions, exploring entity relationships, or gathering comprehensive information about specific topics."
zzzccs123,mcp-baike-render,0,,"MCP Baike Render provides a server for accessing and rendering content from Baidu Baike, China's largest online encyclopedia. Built with TypeScript and the Model Context Protocol SDK, it enables AI assistants to retrieve and display encyclopedia entries directly within conversations. The implementation uses Axios for API requests and includes environment variable configuration for customization. This tool is particularly valuable for workflows requiring access to Chinese-language reference information without leaving the conversation interface."
zzzccs123,mcp-sentry,1,,"MCP Server Sentry provides a bridge between AI models and the Sentry error tracking service, allowing models to query and analyze error reports programmatically. Built with TypeScript, it offers tools for retrieving detailed issue information including stack traces, event counts, and timestamps through a clean API interface. The implementation handles URL parsing to extract organization and project information, making it ideal for developers seeking to incorporate error analysis capabilities into AI-assisted debugging workflows or automated error triage systems."
zzzhdw,mcp-server-kusto,0,,"This MCP server for Azure Data Explorer (ADX), developed by zzzhdw, provides AI assistants with read-only access to ADX clusters. It offers tools for listing tables, executing queries, and retrieving schema information for both internal and external tables as well as materialized views. Built with Python and leveraging the azure-kusto-data library, it abstracts the complexities of ADX interactions, allowing AI systems to easily incorporate powerful data exploration and analysis capabilities. The server supports local emulator usage and implements authentication options for production environments. It's particularly useful for data analysts, researchers, and developers working with large-scale telemetry data, enabling use cases like log analysis, time series exploration, and real-time data querying in ADX environments."
