owner,repo,github_stars,download_count,experimental_ai_generated_description,risk_category,adjusted_risk_score,popularity_score,doc_quality_score,doc_quality_adjustment,readme_found,has_installation_docs,has_usage_docs,has_api_reference,has_security_docs,has_error_handling,has_cli_docs,has_code_examples,has_screenshots,has_license_info,readme_size_bytes,headings_count,code_blocks_count,readability_score,missing_sections,oauth_implementation,direct_api_tokens,main_risk_factors,outbound_connections
021-factory,laravel-debugbar-mcp,1,0,"Laravel DebugBar MCP Server provides a bridge between AI assistants and the Laravel DebugBar debugging tool, enabling access to detailed request logs and diagnostic information from Laravel applications. The server exposes tools for retrieving request logs with filtering capabilities and accessing specific debug data like queries, routes, views, and models through a standardized interface. Built with TypeScript and the MCP protocol, it features data formatting to simplify verbose debug output, retry logic for API requests, and relative time calculations for improved readability. This implementation is particularly valuable for developers who need to analyze Laravel application performance and behavior directly through conversational AI.",MINIMAL,0.97,1.0,0.9,-0.27,Yes,No,No,No,No,No,No,No,No,No,118,1,0,3.5,installation; usage; configuration; api_reference; error_handling; license; project_info,No,No,,
0xbeedao,mcp-taskwarrior,0,1194,"mcp-taskwarrior is a server implementation by Bruce Kroeze that facilitates task management through Taskwarrior. It provides four essential tools for managing tasks: adding, updating, deleting, and listing tasks, with support for organizing by project and priority levels. Built with TypeScript and using the fastmcp and taskwarrior-lib dependencies, it can be used either through npx or by local installation, making it ideal for users who want to integrate task management capabilities into their AI assistant workflows.",MINIMAL,1.09,1.2,3.6,-1.08,Yes,Yes,Yes,No,Yes,No,Yes,Yes,No,No,768,5,2,3.5,configuration; api_reference; error_handling; license; project_info,No,No,,
0xbruno,mcpexec,0,0,"This MCP server implementation provides a tool for executing local CLI commands asynchronously. Developed by 0xBruno, it uses FastMCP and asyncio to run shell commands securely, handling command arguments with spaces and quotes properly. The server is designed for use cases requiring remote execution of system commands, with built-in error handling for failed commands.",MINIMAL,0.89,1.0,3.8,-1.14,Yes,Yes,Yes,No,No,No,Yes,Yes,No,No,841,5,1,5.0,configuration; api_reference; error_handling; license; project_info,No,No,,
0xdwong,sui-mcp,1,0,"Sui MCP server enables AI assistants to interact with the Sui blockchain network through a standardized interface. Built with TypeScript, it provides tools for requesting test tokens from the Sui devnet faucet and integrates with the official Sui SDK. This implementation is particularly valuable for blockchain developers and users who need to test Sui smart contracts or manage wallets through conversational AI.",MINIMAL,0.83,1.0,5.6,-1.68,Yes,Yes,No,Yes,No,No,Yes,Yes,Yes,No,2144,8,4,5.0,usage; error_handling; license,No,No,,
0xgval,evm-mcp-tools,5,0,"EVM MCP Tools provides Ethereum blockchain analysis capabilities directly within Claude AI conversations. It offers a suite of tools for smart contract auditing, wallet analysis, token balance checking, and profitability tracking across Ethereum and compatible chains. The implementation leverages Web3.js, Moralis, and Etherscan APIs to fetch on-chain data, analyze contract security, detect token standards, and calculate wallet profit/loss metrics. Designed for integration with Claude for Desktop, it enables users to perform blockchain analysis tasks without leaving their conversation context, making it particularly valuable for developers, traders, and researchers who need quick access to Ethereum data.",MINIMAL,0.72,1.0,7.2,-2.16,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,4899,16,3,3.5,,No,Yes,,https://api.etherscan.io/api?module=contract&action=getsourcecode&address=${address; https://eth.llamarpc.com; https://api.etherscan.io/api?module=contract&action=getcontractcreation&contractaddresses=${address; https://api.etherscan.io/api?module=block&action=getblockreward&blockno=${blockNumber; https://api.etherscan.io/api?module=proxy&action=eth_getTransactionByHash&txhash=${txHash
0xgval,twitter-x-mcp-server,1,0,"X Tools for Claude MCP is a lightweight toolkit that enables Claude AI to search Twitter with natural language queries and display results based on user intent. Built with Node.js and the Model Context Protocol SDK, it leverages the RapidAPI Twitter154 endpoint to provide advanced search capabilities including filtering by keywords, users, dates, and engagement metrics. The implementation formats tweets with clean markdown, supports pagination for larger result sets, and intelligently adapts its response style based on whether users want raw data viewing or analytical insights, making it particularly valuable for researchers, marketers, and social media analysts who need to quickly access and understand Twitter content.",MINIMAL,0.73,1.0,7.7,-2.31,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,5706,24,11,5.0,,No,Yes,,
0xhijo,mcp_twitter,6,513,"MCP Twitter provides direct interaction with Twitter/X through a standardized set of tools, enabling AI models to perform actions like creating posts, replying to tweets, following users, and retrieving profile data. Built by 0xhijo, it supports two authentication methods (API credentials or direct Twitter login) and exposes 11 distinct Twitter functionalities through a Node.js server. The implementation is designed for seamless integration with Claude through the claude_mcp_config.json file, making it particularly valuable for automated social media management, content creation, and Twitter data analysis without leaving the conversation interface.",MINIMAL,0.29,1.0,6.9,-2.07,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3771,18,5,3.5,,Yes,No,,
0xkoda,eth-mcp,5,0,"This Ethereum RPC MCP server provides a bridge to interact with the Ethereum blockchain through standard JSON-RPC calls. Developed by Koda, it exposes three essential tools: eth_getCode for retrieving contract bytecode, eth_gasPrice for checking current gas prices, and eth_getBalance for querying account balances. The implementation uses axios for making HTTP requests to a public Ethereum RPC endpoint (llamarpc) and includes error handling with human-readable responses. Ideal for AI assistants that need to perform basic Ethereum blockchain queries without requiring complex wallet integration.",MINIMAL,0.8,1.0,6.6,-1.98,Yes,No,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,3372,13,3,5.0,installation,No,No,,https://eth.llamarpc.com
0xkoda,mcp-rust-docs,30,0,"This MCP server fetches and returns documentation for Rust crates from docs.rs, providing essential context for LLMs working with Rust code. It implements a single tool, 'lookup_crate_docs', which retrieves HTML documentation, converts it to plain text, and truncates it if necessary. The server is designed for easy integration with AI assistants like Claude Desktop and can be tested using the MCP Inspector.",MINIMAL,0.79,1.0,7.1,-2.13,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,2710,16,4,5.0,,No,No,,https://docs.rs/${crateName
0xrag,mcp,0,0,"A lightweight MCP server built with TypeScript and Coinbase's AgentKit, designed to provide a flexible wallet interaction framework using Viem on the Base Sepolia testnet. The implementation sets up a standard MCP server with tool listing and execution capabilities, generating a random wallet client and exposing blockchain-related actions through a stdio transport mechanism.",MINIMAL,1.0,1.0,0,-0.0,Yes,No,No,No,No,No,No,No,No,No,6,0,0,0,,No,No,,
