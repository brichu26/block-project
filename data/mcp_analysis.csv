owner,repo,github_stars,download_count,experimental_ai_generated_description,risk_category,adjusted_risk_score,popularity_score,doc_quality_score,doc_quality_adjustment,readme_found,has_installation_docs,has_usage_docs,has_api_reference,has_security_docs,has_error_handling,has_cli_docs,has_code_examples,has_screenshots,has_license_info,readme_size_bytes,headings_count,code_blocks_count,readability_score,missing_sections,oauth_implementation,direct_api_tokens,main_risk_factors,outbound_connections
wshobson,mcp-trader,86,0,"This MCP trader server, developed by Seth Hobson, provides technical analysis capabilities for stock traders. It integrates with the Tiingo API to fetch financial data and leverages libraries like pandas and TA-Lib to perform comprehensive technical analysis on stocks. The server offers a single 'analyze-stock' tool that takes a stock symbol and returns key technical indicators including moving averages, momentum oscillators, and volume metrics. Built with Python and designed to run as a local MCP server, it's particularly useful for AI assistants or applications needing to generate detailed technical analysis reports or make data-driven trading recommendations based on current market data.",MINIMAL,0.73,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,8610,26,12,5.0,,No,Yes,,https://api.tiingo.com/tiingo/daily/{symbol; http://localhost:8000/call-tool
run-llama,llamacloud-mcp,86,0,"LlamaCloud MCP server provides a tool for querying LlamaIndex documentation through RAG (Retrieval-Augmented Generation) using the LlamaCloud managed index service. Developed by Laurie Voss, this implementation connects to a pre-configured LlamaCloud index containing LlamaIndex documentation and uses it to answer queries with detailed responses including code examples. The server requires a LlamaCloud API key and optionally an OpenAI API key for powering the RAG queries, making it ideal for developers who need up-to-date access to LlamaIndex documentation within their AI assistant workflows.",MINIMAL,0.68,1.0,5.9,-1.77,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,No,5204,9,7,5.0,error_handling; license; project_info,No,Yes,,
yuchenssr,mindmap-mcp-server,86,6333,"Mindmap-MCP-Server provides a bridge between Markdown content and interactive mind maps using the markmap-cli tool. Built by YuChenSSR, this server exposes a single tool that converts Markdown text into HTML-based mind maps, with options to return either the complete HTML content or just the file path to the generated visualization. The implementation handles temporary file creation, subprocess management for the markmap-cli tool, and proper error handling. It's particularly useful for workflows that involve visualizing structured content, organizing thoughts, or creating interactive knowledge maps directly within Claude conversations.",MINIMAL,1.17,1.4,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,7441,23,10,5.0,,No,No,,
supercurses,powerpoint,86,0,"The server implements multiple tools:

create-presentation: Starts a presentation
Takes ""name"" as required string arguments
Creates a presentation object
add-slide-title-only: Adds a title slide to the presentation
Takes ""presentation_name"" and ""title"" as required string arguments
Creates a title slide with ""title"" and adds it to presentation
add-slide-title-content: Adds a title with content slide to the presentation
Takes ""presentation_name"", ""title"", ""content"" as required string arguments
Creates a title with content slide with ""title"" and ""content"" and adds it to presentation
add-slide-title-with-table: Adds a title slide with a table
Takes ""presentation_name"", ""title"", ""data"" as required string and array arguments
Creates a title slide with ""title"" and adds a table dynamically built from data
add-slide-title-with-chart: Adds a title slide with a chart
Takes ""presentation_name"", ""title"", ""data"" as required string and object arguments
Creates a title slide with ""title"" and adds a chart dynamically built from data. Attempts to figure out the best type of chart from the data source.
add-slide-picture-with-caption: Adds a picture with caption slide
Takes ""presentation_name"", ""title"", ""caption"", ""image_path"" as required string arguments
Creates a picture with caption slide using the supplied ""title"", ""caption"", and ""image_path"". Can either use images created via the ""generate-and-save-image"" tool or use an ""image_path"" supplied by the user (image must exist in folder_path)
open-presentation: Opens a presentation for editing
Takes ""presentation_name"" as required arguments
Opens the given presentation and automatically saves a backup of it as ""backup.pptx""
This tool allows the client to work with existing pptx files and add slides to them. Just make sure the client calls ""save-presentation"" tool at the end.
save-presentation: Saves the presentation to a file.
Takes ""presentation_name"" as required arguments.
Saves the presentation to the folder_path. The client must call this tool to finalize the process.
generate-and-save-image: Generates an image for the presentation using a FLUX model
Takes ""prompt"" and ""file_name"" as required string arguments
Creates an image using the free FLUX model on TogetherAI (requires an API key)",MINIMAL,0.7,1.0,6.5,-1.95,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,5062,11,21,5.0,error_handling,No,Yes,,
context-hub,generator,85,0,"Context Generator is a PHP-based tool for creating structured documentation from various sources including files, GitHub repositories, Git diffs, and URLs. It features a modular architecture with a powerful configuration system that supports imports, variables, and custom modifiers to transform content. The implementation includes an MCP server component that exposes prompts and tools for AI assistants to interact with the filesystem, retrieve project structure, and execute custom commands. Particularly useful for generating comprehensive code documentation, analyzing changes in projects, and providing context for AI-assisted development workflows.",MINIMAL,0.72,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,8067,13,5,3.5,,No,Yes,,
kaliaboi,mcp-zotero,85,2405,"This Zotero MCP server, developed by Abhishek Kalia, provides AI assistants with a standardized interface to interact with Zotero libraries. Built using TypeScript and leveraging the Zotero API client, it offers capabilities for listing collections, retrieving item details, searching libraries, and fetching recently added papers. The server abstracts Zotero API authentication and request handling, enabling seamless integration with AI systems. It's particularly valuable for researchers and academics working with AI assistants, facilitating use cases such as literature reviews, citation management, and research organization within the Zotero ecosystem.",MINIMAL,0.91,1.2,6.9,-2.07,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,2514,5,9,5.0,usage,No,Yes,,
metatool-ai,mcp-server-metamcp,85,11629,"This MCP server implementation manages multiple MCPs through a centralized interface, streamlining AI assistant interactions across various platforms. Developed by James Zhang, it utilizes TypeScript and integrates with the Model Context Protocol SDK. The server focuses on secure API key management and provides a unified access point for multiple MCP services. It's designed for scalability and easy configuration, making it particularly useful for applications that need to coordinate multiple AI assistants or integrate diverse AI services. The implementation supports Docker deployment and is optimized for production environments, offering a robust solution for complex AI orchestration scenarios.",MINIMAL,1.39,1.6,6.9,-2.07,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,4935,17,9,3.5,error_handling,Yes,Yes,,
thrashr888,terraform-mcp-server,85,8364,"This MCP server implementation provides tools for interacting with the Terraform Registry API, enabling AI agents to query provider information, resource details, module metadata, and generate example configurations. Developed by Paul Thrasher, it offers functionalities such as provider lookup, resource usage examples, module recommendations, data source lookup, and schema details retrieval. Built with TypeScript and leveraging the Model Context Protocol SDK, the server is particularly useful for AI applications that need to automate Terraform-related tasks, assist in infrastructure-as-code development, or provide intelligent suggestions for Terraform configurations.",MINIMAL,1.18,1.4,7.4,-2.22,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,7475,15,3,3.5,,Yes,Yes,,
biegehydra,bifrostmcp,84,0,This MCP server implementation provides C# language features via the Model Context Protocol. It integrates with the C# extension for Visual Studio Code and exposes capabilities like finding symbol references across a codebase. The server runs on port 8003 and is designed to enhance AI-assisted coding workflows for C# projects.,MINIMAL,0.77,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,9181,27,10,5.0,,No,No,,
jfrog,mcp-jfrog,84,0,"JFrog MCP Server provides a bridge to the JFrog Platform, enabling AI assistants to interact with Artifactory repositories, builds, security scanning, and release management. Developed by JFrog LTD, this TypeScript implementation exposes over 20 specialized tools for operations like repository creation, build tracking, package vulnerability scanning, and release bundle distribution. The server authenticates via JFrog access tokens and handles errors gracefully with detailed messages. Particularly valuable for DevOps teams and developers who want to leverage AI assistants for artifact management, security analysis, and release automation without switching context to the JFrog web interface.",MINIMAL,0.29,1.0,7.1,-2.13,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,13982,17,8,3.5,error_handling,Yes,No,,
pskill9,website-downloader,84,0,"This website downloader MCP server, developed by an unnamed author, provides a tool for downloading entire websites using wget. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers functionality to recursively download web pages, preserve site structure, and convert links for local viewing. The server implements depth control, domain restriction, and file extension handling. By abstracting the complexities of website archiving, it enables AI systems to easily capture and analyze web content offline. This implementation is particularly valuable for applications requiring local copies of websites, facilitating use cases such as web archiving, offline content analysis, and website migration or backup tasks.",MINIMAL,0.81,1.0,6.2,-1.86,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,No,2048,11,6,5.0,error_handling; license,No,No,,
sirmews,apple-notes-mcp,84,16409,"This Apple Notes MCP server, developed by sirmews, enables access and and search of local Apple Notes databases. It provides tools for retrieving all notes, reading specific notes, and performing searches across note content. Built in Python, the implementation exposes Apple Notes data via a standardized MCP interface, allowing Claude to analyze and interact with personal note collections. By bridging AI models with Apple's native note-taking app, this server enhances Claude's ability to process personal information, assist with note organization, and augment information retrieval from Apple Notes. It is particularly useful for users seeking AI-powered knowledge management and research assistance within their existing Apple Notes ecosystem.",MINIMAL,1.41,1.6,6.3,-1.89,Yes,Yes,No,No,Yes,Yes,Yes,Yes,Yes,Yes,3474,15,8,5.0,usage; api_reference,No,No,,
jordyzomer,codeql-mcp,82,0,"CodeQL MCP Server provides a bridge to the CodeQL static analysis engine, enabling AI assistants to analyze codebases for security vulnerabilities and quality issues. The implementation offers tools for registering CodeQL databases, evaluating queries against codebases, decoding query results, and performing quick evaluations of specific classes or predicates. Built with Python using the FastMCP framework, it exposes a simple API that handles the complexities of CodeQL operations while providing structured results that can be easily interpreted by language models. This server is particularly valuable for security researchers and developers who want to leverage AI assistants for code analysis without directly interacting with the CodeQL CLI.",MINIMAL,0.86,1.0,4.8,-1.44,Yes,Yes,No,No,No,No,Yes,Yes,Yes,No,1541,7,4,5.0,usage; api_reference; error_handling; license,No,No,,
mhyrr,sketchup-mcp,82,0,"SketchupMCP connects Sketchup to Claude AI through a bidirectional TCP socket connection, enabling AI-assisted 3D modeling and scene manipulation. Built with Python and Ruby, it provides tools for creating, modifying, and transforming components, applying materials, inspecting scenes, and executing Ruby code directly in Sketchup. The implementation includes both a Sketchup extension that creates a TCP server within the application and a Python MCP server that handles the protocol communication, making it ideal for users who want to leverage AI capabilities for architectural design, interior modeling, or general 3D content creation without leaving their conversation interface.",MINIMAL,0.8,1.0,6.8,-2.04,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,3790,16,2,3.5,,No,No,,
richardhan,mssql_mcp_server,81,0,"This MCP server implementation, developed by Dana K. Williams, provides secure interaction with Microsoft SQL Server databases. Built with Python and leveraging libraries like mcp and pymssql, it offers a bridge between AI assistants and SQL Server data. The implementation focuses on security, with detailed guidance on creating restricted SQL logins, implementing row-level security, and following best practices for monitoring and auditing. It's particularly useful for organizations needing to integrate SQL Server data into AI workflows while maintaining strict security controls, enabling tasks like data analysis, reporting, and database management through AI interfaces while ensuring data protection and compliance.",MINIMAL,0.78,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3154,18,5,5.0,,No,No,,
inditextech,mcp-teams-server,81,0,"MCP Teams Server provides integration with Microsoft Teams, enabling AI assistants to interact with Teams channels through a standardized protocol. Developed by InditexTech, this Python implementation allows reading messages, creating threads, replying to messages, and mentioning team members. The server connects to Teams using Azure bot credentials and exposes functionality through a Docker container or local installation. It's particularly valuable for collaborative workflows where AI assistants need to monitor team communications, post updates to channels, or participate in threaded discussions without requiring users to switch contexts.",MINIMAL,0.78,1.0,7.2,-2.16,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,4832,15,8,3.5,error_handling,No,No,,
isaacphi,mcp-gdrive,81,4044,"This Google Drive MCP server, developed by Phil Isaac, enables seamless integration of Google Drive and Sheets functionality into AI-assisted workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a standardized interface for accessing and manipulating Google Drive files and Sheets data through Claude Desktop and compatible MCP clients. The implementation supports file listing, reading, and writing operations, as well as specialized tools for interacting with Google Sheets. It's particularly useful for developers and businesses looking to incorporate on-demand access to cloud-stored documents and spreadsheets into their AI-assisted applications, allowing for dynamic querying and manipulation of Google Drive content.",MINIMAL,0.99,1.2,6.4,-1.92,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,4876,8,2,3.5,error_handling,Yes,Yes,Found pattern: tracking; Suspicious network connection to datatracker.ietf.org,http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6; https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline; https://developer.mozilla.org/docs/Web/API/Location/href; https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying; https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperOpen
v-3,notion-server,81,0,"This Notion MCP server, developed by v-3, enables AI assistants to seamlessly interact with Notion workspaces through standardized tools for searching, reading, creating, and updating pages. It provides a simplified interface for complex Notion operations, making it easier for AI systems to manage and retrieve information from Notion databases and pages. The server stands out by offering a streamlined integration between AI capabilities and Notion's collaborative workspace features. It empowers AI assistants to handle tasks like knowledge management, note-taking, project tracking, and content creation within Notion. This implementation is particularly useful for applications that require AI-driven content organization, team collaboration tools, or any scenario where an AI system needs to work with structured data in a Notion workspace.",MINIMAL,0.73,1.0,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,4313,24,10,5.0,,No,Yes,,
ozamatash,deep-research-mcp,80,0,"This open-source AI-powered research assistant performs iterative, deep research on any topic by combining search engines, web scraping, and large language models. It is available as a Model Context Protocol (MCP) tool for seamless integration with AI agents. The implementation focuses on simplicity, keeping the codebase under 500 lines of code for easy understanding and extensibility. It features intelligent query generation, depth and breadth control, smart follow-up questions, and comprehensive markdown reports. The tool is designed for efficient concurrent processing and can be used standalone or integrated into larger AI systems for in-depth, multi-level research tasks.",MINIMAL,0.71,1.0,7.1,-2.13,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,3655,12,8,5.0,error_handling,No,Yes,,
sammcj,mcp-package-version,80,12290,"This MCP server, developed by sammcj, provides AI assistants with up-to-date package version information for npm and PyPI registries. Built with TypeScript, it offers tools to check latest stable versions for individual packages or bulk queries across both ecosystems. The implementation stands out by integrating directly with public registries and providing flexible version range options for different use cases. By connecting AI capabilities with real-time package data, this server enables AI systems to recommend and use current, compatible dependencies when writing or reviewing code. It is particularly useful for maintaining project dependencies, ensuring security compliance, and automating dependency updates in software development workflows.",MINIMAL,1.39,1.6,7.0,-2.1,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,9349,23,21,5.0,error_handling,No,No,,
delano,postman-mcp-server,79,0,"This Postman MCP server, developed by Delano, provides AI assistants with programmatic access to Postman's API management platform. It integrates with the Postman API to enable functionalities like managing collections, environments, and APIs. The server is built with TypeScript and leverages the @modelcontextprotocol/sdk for MCP implementation. By abstracting Postman interactions, it allows AI systems to automate API testing, documentation, and workflow management. This implementation is particularly useful for developers, QA engineers, and API designers who want to leverage AI capabilities for API lifecycle management, automated testing, and collaborative API development workflows.",MEDIUM,-0.07,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,10518,29,10,5.0,,Yes,Yes,Found pattern: send.*data; Found pattern: collect.*data; Suspicious domain: datatracker.ietf.org; Potential data exfiltration: send.*data,https://support.postman.com/; https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/; https://learning.postman.com/docs/api-governance/api-definition/api-definition-warnings/; https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#collection-roles; https://learning.postman.com/docs/collaborating-in-postman/using-version-control/reviewing-pull-requests/
egoist,ffmpeg-mcp,78,1133,"ffmpeg-mcp is a stdio MCP server that provides a standardized interface for common media operations using FFmpeg. Developed by egoist and sponsored by ChatWise, this implementation allows AI assistants to perform video and audio processing tasks like speeding up videos and extracting audio from video files. The server acts as a bridge between natural language commands and FFmpeg's command-line interface, making media manipulation accessible through simple tool calls without requiring users to understand complex FFmpeg syntax.",MINIMAL,1.07,1.2,4.2,-1.26,Yes,Yes,Yes,No,No,No,Yes,Yes,No,Yes,623,4,2,3.5,api_reference; error_handling; project_info,No,No,,
sparfenyuk,mcp-telegram,78,0,"This MCP implementation for Telegram, developed by Sergey Parfenyuk, provides a server interface to interact with Telegram through the MTProto protocol. Built with Python and leveraging libraries like Telethon and Pydantic, it offers tools for listing dialogs and messages. The implementation focuses on providing a standardized way to access Telegram functionality through MCP, making it easier to integrate Telegram capabilities into AI workflows. It's particularly useful for developers and researchers looking to incorporate Telegram messaging and data retrieval into their AI-assisted applications, enabling tasks like automated message analysis, chatbot integration, or social media monitoring.",MINIMAL,0.79,1.0,7.0,-2.1,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6800,19,9,5.0,usage,No,No,,
utensils,mcp-nixos,78,8592,"MCP-NixOS provides a server for interacting with NixOS packages, system options, Home Manager configuration, and nix-darwin macOS configuration through standardized URL schemes. Developed by James Brink, this Python implementation features multi-level caching with filesystem persistence, detailed documentation integration, and support for advanced search capabilities including hierarchical paths and version filtering. The architecture separates concerns into cache, clients, contexts, resources, and tools components, making it ideal for developers seeking programmatic access to Nix ecosystem configuration options and package information through AI assistants.",MINIMAL,0.67,1.4,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,14163,44,9,5.0,,Yes,No,,https://nix-community.github.io/home-manager/nix-darwin-options.xhtml; https://example.com/other; https://example.com/test/{i; https://example.com/test; https://nix-community.github.io/home-manager/options.xhtml
weidwonder,crawl4ai-mcp-server,78,0,"This MCP server, developed by WeiDwonder, provides integration with Google Custom Search Engine for web crawling and search capabilities. Built with Python and leveraging libraries like Playwright and BeautifulSoup, it offers tools for automated web scraping, content extraction, and search result parsing. The implementation focuses on providing a standardized interface for AI-powered web crawling, enabling use cases such as data collection, content aggregation, and search engine development. By connecting AI models with Google's search infrastructure, this server allows for sophisticated web crawling scenarios, enhancing the ability to gather and analyze online information at scale.",MINIMAL,0.67,1.0,5.8,-1.74,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,3578,21,12,3.5,error_handling; project_info,No,Yes,,
illuminaresolutions,n8n-mcp-server,77,1771,"n8n MCP Server provides a bridge between Claude and n8n automation workflows through the Model Context Protocol. Developed by Illuminare Solutions, it enables AI assistants to list, create, update, and execute n8n workflows directly within conversations, along with managing credentials, tags, executions, and generating security audits. The implementation supports both core features available to all n8n users and Enterprise-specific capabilities like project and variable management, making it particularly valuable for teams who want to integrate their automation workflows with AI assistants without switching contexts.",MINIMAL,0.99,1.2,7.1,-2.13,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3972,19,8,5.0,usage,Yes,Yes,,
integromat,make-mcp-server,77,4106,"Make MCP Server enables AI assistants to trigger and interact with Make automation workflows through the Model Context Protocol. Developed by Make, it connects to your Make account to identify on-demand scenarios, parse input parameters, allow AI assistants to invoke scenarios with appropriate parameters, and return structured JSON output. The server runs as a Node.js application that can be installed via npm or run in a Docker container, requiring a Make API key with scenarios:read and scenarios:run scopes. This implementation is particularly valuable for maintaining complex automation logic in Make while exposing functionality to AI systems, creating bidirectional communication between assistants and existing workflows.",MINIMAL,0.88,1.2,5.9,-1.77,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,No,1994,6,1,5.0,error_handling; license,No,Yes,,
emzimmer,server-wp-mcp,76,1533,"This WordPress MCP server, developed by mzimmer, enables AI assistants to interact securely with WordPress sites through a standardized interface. Built with Node.js and leveraging the Model Context Protocol SDK, it provides a bridge to WordPress REST API endpoints, handling authentication and site discovery. The server implements environment-based configuration, allowing for flexible deployment across different WordPress installations. By abstracting the complexities of WordPress APIs, it enables AI systems to easily manage content, users, and site settings. This implementation is particularly valuable for applications requiring programmatic WordPress management, facilitating use cases such as automated content publishing, user administration, and site maintenance tasks.",MINIMAL,0.97,1.2,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6001,24,27,3.5,,No,No,,
ivo-toby,mcp-openapi-server,76,0,"This OpenAPI MCP server, developed by Ivo Toby, enables AI assistants to interact with REST APIs defined by OpenAPI specifications. It integrates with the Model Context Protocol SDK to expose OpenAPI endpoints as MCP resources, allowing AI systems to discover and utilize a wide range of web services. Built with TypeScript and leveraging esbuild for bundling, it implements automatic resource generation from OpenAPI specs and handles authentication through configurable headers. The server is designed for flexibility, supporting various API configurations through environment variables or command-line arguments. It's particularly useful for developers and AI researchers looking to incorporate diverse API functionalities into their AI assistants, enabling use cases like data retrieval, third-party service integration, and dynamic API exploration.",MINIMAL,0.79,1.0,7.1,-2.13,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3168,13,5,5.0,,No,No,,
lamaalrajih,kicad-mcp,76,0,"KiCad MCP Server enables Claude to interact with KiCad electronic design automation projects, providing tools for PCB design analysis, validation, and visualization. The server offers Design Rule Check (DRC) capabilities with history tracking, PCB thumbnail generation, schematic analysis, and project management functions. Built to support macOS, Windows, and Linux, it integrates directly with KiCad's command-line tools and Python modules when available, falling back to alternative methods when needed. This implementation is particularly valuable for electronics designers seeking AI assistance with troubleshooting design rule violations, understanding PCB layouts, and preparing designs for manufacturing without leaving their Claude conversation.",MINIMAL,0.77,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,11511,31,10,5.0,,No,No,,
revit-mcp,revit-mcp,76,0,"Revit-MCP is a Node.js server implementation that enables AI assistants to interact with Autodesk Revit models through the Model Context Protocol. It provides tools for creating, deleting, and modifying Revit objects, with specific functionality for wall creation and object deletion. The server uses a stdio transport layer for communication and implements a tool registration system that allows for extensible Revit model manipulation capabilities, making it particularly valuable for architectural design workflows and BIM (Building Information Modeling) processes.",MINIMAL,0.82,1.0,6.0,-1.8,Yes,Yes,No,Yes,Yes,No,Yes,Yes,Yes,No,3556,9,4,5.0,usage; error_handling; license,No,No,,
mamertofabian,elevenlabs-mcp-server,76,0,"This ElevenLabs MCP server, developed by an unknown author, provides AI assistants with text-to-speech capabilities using the ElevenLabs API. Built with Python and leveraging libraries like pydub and requests, it offers a streamlined interface for generating audio from text using multiple voices and customizable speech parameters. The server implements features such as multi-part script handling, voice selection, and output file management. By abstracting the complexities of API communication and audio processing, it allows AI systems to easily incorporate high-quality speech synthesis into their workflows. This implementation is particularly valuable for applications in content creation, accessibility, and voice-driven interfaces, enabling use cases such as audiobook production, voice-over generation, and dynamic text-to-speech conversion.",MINIMAL,0.7,1.0,6.7,-2.01,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,3567,10,7,5.0,error_handling,No,Yes,,https://api.elevenlabs.io/v1
meilisearch,meilisearch-mcp,76,0,"This MCP server for Meilisearch, developed by the Meilisearch team, provides a standardized interface for interacting with Meilisearch's powerful search capabilities. Built with Python and leveraging the official Meilisearch Python client, it offers tools for indexing, searching, and managing documents within Meilisearch instances. The server implements the Model Context Protocol, enabling AI systems to easily perform search operations and retrieve results. By abstracting Meilisearch's API complexities, it allows for seamless integration of advanced search functionality into AI-powered applications. This implementation is particularly valuable for use cases requiring fast, typo-tolerant, and customizable search experiences, such as e-commerce platforms, content management systems, or data exploration tools.",MINIMAL,0.7,1.0,6.7,-2.01,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,5274,24,7,2.0,error_handling,No,Yes,,
mladensu,cli-mcp-server,75,20880,"This MCP server, developed by MladenSU, provides secure command-line execution with configurable security policies. It implements strict command whitelisting, path validation, and execution controls to enable controlled CLI access for AI applications while maintaining security. The server exposes tools for executing whitelisted commands and displaying security rules. By combining customizable restrictions with detailed error reporting, this implementation facilitates safe integration of command-line capabilities into AI workflows. It is particularly useful for scenarios requiring limited shell access, such as allowing an AI assistant to perform basic file operations or run specific utilities in a constrained environment.",MINIMAL,1.37,1.6,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,7200,17,8,5.0,,No,No,,
ivanmurzak,unity-mcp,74,0,"Unity-MCP is a template for creating Unity packages that implement the Model Context Protocol. It provides a structured project setup with automated workflows for testing across multiple Unity versions, deployment scripts for npm and GitHub, and utility commands for package management. The template includes SignalR client integration for real-time communication and follows best practices for Unity package development with comprehensive GitHub Actions CI/CD support.",MINIMAL,0.78,1.0,7.4,-2.22,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,8710,21,3,3.5,,No,No,,
ihor-sokoliuk,mcp-searxng,73,0,"This SearXNG MCP server, developed by Ihor Sokoliuk, integrates the SearXNG API to provide web search capabilities for AI assistants. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool for executing web searches with pagination control. The server implements error handling, environment variable configuration for SearXNG instance URLs, and result formatting. By abstracting the complexities of API communication and search result parsing, it enables AI systems to easily access and analyze web content. This implementation is particularly valuable for applications requiring up-to-date information retrieval, enabling use cases such as research assistance, fact-checking, and content aggregation across various topics and domains.",MINIMAL,0.8,1.0,6.5,-1.95,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,3980,14,8,5.0,error_handling,No,No,,
ravinahp,flights-mcp,73,0,"This flight search MCP server, developed by Ravina Patel, integrates with the Duffel API to provide flight search capabilities. Built with Python and leveraging libraries like httpx and pydantic, it offers a streamlined interface for querying flight information. The implementation focuses on simplicity and ease of use, making it accessible for AI assistants or applications needing to access flight data programmatically. It's particularly useful for tasks like travel planning, fare comparison, or building travel-related chatbots, enabling quick access to flight information without requiring deep knowledge of the underlying API complexities.",MINIMAL,0.73,1.0,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,9802,32,10,3.5,,No,Yes,,
run-llama,mcp-server-llamacloud,73,0,"This MCP server, developed by run-llama, provides seamless integration between AI assistants and LlamaCloud's managed vector index service. Built for use with Claude Desktop, it offers a tool for retrieving information from a knowledge base using natural language queries. The server leverages LlamaCloud's API to perform efficient vector searches on managed indexes, enabling AI models to access and utilize custom knowledge bases. By bridging AI capabilities with LlamaCloud's scalable vector storage, this implementation enhances information retrieval and knowledge augmentation for AI assistants. It is particularly useful for scenarios requiring domain-specific knowledge integration, semantic search capabilities, and scalable information access in AI-powered applications.",MINIMAL,0.69,1.0,6.4,-1.92,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,No,2569,7,6,5.0,license,No,Yes,,
strangelove-ventures,web3-mcp,73,0,"This MCP server, developed by Alex Cheng, provides a unified interface for interacting with multiple blockchains, including Solana and Ethereum. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for common blockchain operations such as checking balances, transferring tokens, and retrieving account information. The implementation focuses on simplifying blockchain interactions through standardized RPC endpoints, making it particularly useful for AI assistants and applications that require cross-chain functionality without deep blockchain expertise. By connecting to Solana's mainnet and supporting Ethereum operations, this server enables use cases ranging from basic account queries to more complex token transfers across different blockchain ecosystems.",MINIMAL,0.73,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,13924,45,6,5.0,,No,Yes,,
kagisearch,kagimcp,72,0,"This Kagi MCP server, developed by Rehan Ali Rana at Kagi Search, integrates the Kagi API into AI-assisted workflows. Built with Python and leveraging libraries like httpx and pydantic, it provides a standardized interface for accessing Kagi's search capabilities through Claude Desktop and compatible MCP clients. The implementation supports Kagi's advanced search features and is designed for easy setup and use. It's particularly useful for researchers, developers, and professionals looking to incorporate high-quality, privacy-focused search results into their AI-assisted applications, enabling more informed decision-making and analysis based on up-to-date web information.",MINIMAL,0.71,1.0,6.9,-2.07,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,4047,24,11,3.5,usage,No,Yes,,
termix-official,bsc-mcp,72,0,"BSC MCP Server provides a robust blockchain interaction layer for the Binance Smart Chain, enabling AI-driven transactions including native BNB and BEP-20 token transfers, smart contract interactions, and meme token creation. Built with Viem and PancakeSwap SDK, it offers secure wallet management and standardized blockchain operations through a flexible, environment-variable-configured architecture. The server is particularly useful for developers and traders seeking programmatic, AI-assisted blockchain interactions with minimal low-level complexity.",MINIMAL,0.8,1.0,6.6,-1.98,Yes,Yes,No,Yes,Yes,No,Yes,Yes,Yes,Yes,3387,16,6,5.0,usage; error_handling,No,No,,
djyde,browser-mcp,71,343,"Browser MCP is a browser extension and server implementation that allows AI assistants to interact with the browser environment. It provides tools for retrieving page content as markdown, appending CSS styles to pages, searching browser history, and more. The implementation uses a WebSocket connection between the extension and server to enable real-time communication, with the server exposing these capabilities through the Model Context Protocol. This enables AI assistants to perform tasks like summarizing web pages, modifying page appearance, or retrieving browsing history data directly from the user's browser.",MINIMAL,0.84,1.0,5.2,-1.56,Yes,No,Yes,Yes,No,No,Yes,Yes,Yes,Yes,1671,18,7,3.5,installation; configuration; error_handling,No,No,,
mikeyny,ai-image-gen-mcp,71,0,"This MCP server, developed by an unspecified author, enables image generation using Replicate's flux-schnell model. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers configurable image parameters such as resolution, aspect ratio, and quality. The implementation focuses on providing a standardized interface for text-to-image generation, including features like saving generated images to specified directories and full error handling. It's particularly useful for applications requiring on-demand image creation, enabling use cases such as content illustration, design prototyping, and AI-assisted art generation without complex API integrations or local model deployments.",MINIMAL,0.71,1.0,6.9,-2.07,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3478,10,6,5.0,,No,Yes,,
carterlasalle,mac_messages_mcp,70,8517,"Mac Messages MCP provides a bridge for AI assistants to interact with the macOS Messages app, enabling reading recent messages and sending new ones through a set of well-defined tools. Developed by Carter Lasalle, it accesses the Messages database and AddressBook contacts directly, with features for contact lookup, fuzzy name matching, and group chat support. The implementation includes robust error handling for permission issues and runs as an MCP server that integrates with Claude Desktop, making it particularly valuable for users who want to manage their iMessage conversations without leaving their AI assistant interface.",MINIMAL,1.12,1.4,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3348,24,8,5.0,,No,Yes,,
cheffromspace,mcpcontrol,70,0,"This Windows control server leverages nut.js and the Model Context Protocol to enable remote automation of Windows systems. Developed by an unnamed author, it provides a TypeScript-based interface for programmatically controlling mouse movements, keyboard input, and screen captures on Windows machines. The implementation uses Express for the server, Jimp and Sharp for image processing, and Clipboardy for clipboard access. It's designed for scenarios requiring remote Windows automation, such as automated testing, remote administration, or building AI-assisted Windows control systems that can interact with desktop applications via natural language commands.",MINIMAL,0.98,1.0,7.4,-2.22,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,5296,14,2,5.0,,Yes,No,Found pattern: send.*data; Potential data exfiltration: send.*data,
tumf,mcp-shell-server,70,23653,"This MCP shell server, developed by tumf, enables AI assistants like Claude to execute whitelisted shell commands on the host system. Built in Python, it provides a secure interface for running commands with stdin input support, returning comprehensive execution results including stdout, stderr, exit status, and runtime. The implementation focuses on security through command whitelisting and shell operator validation, preventing unauthorized access while allowing flexible command execution. By connecting AI capabilities with local system operations, this server enables AI assistants to interact with files, analyze data, and perform system tasks. It is particularly useful for scenarios requiring controlled system access, data processing, and building AI tools that can leverage local computing resources and file systems.",MINIMAL,1.37,1.6,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,4979,25,13,5.0,,No,No,,
chatmol,molecule-mcp,69,0,"The molecule-mcp server provides a bridge between AI assistants and molecular visualization software, enabling interaction with PyMol and ChimeraX through the Model Context Protocol. It offers tools to open visualization software, execute commands directly in these applications, and save images of molecular structures. The implementation uses FastMCP to expose these capabilities as tools that can be called programmatically, making it valuable for scientific workflows where molecular visualization and manipulation are needed without leaving the conversation interface.",MINIMAL,0.66,1.0,5.2,-1.56,Yes,Yes,No,Yes,Yes,No,Yes,Yes,Yes,Yes,2395,3,3,5.0,usage; error_handling; project_info,No,Yes,,
inditextech,mcp-server-simulator-ios-idb,69,0,"A Model Context Protocol server for iOS simulator automation via Facebook's IDB tool, enabling AI assistants to control iOS simulators using natural language commands. Developed by Inditex Tech, this TypeScript implementation provides a comprehensive command system for managing simulator sessions, launching apps, capturing screenshots, and performing UI interactions. The architecture includes a natural language parser that converts instructions into structured commands, an orchestrator that manages command execution, and an IDB manager that interfaces with the iOS simulator. This server is particularly useful for automated testing of iOS applications, UI validation, and creating interactive demos without requiring direct access to physical devices.",MINIMAL,0.77,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,12022,33,9,5.0,,No,No,,
comet-ml,opik-mcp,69,0,"Opik MCP Server is an open-source implementation of the Model Context Protocol for the Opik platform. It provides a unified interface for interacting with Opik's capabilities, supporting multiple transport mechanisms for flexible integration into various environments.",MINIMAL,0.23,1.0,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,6221,31,9,5.0,error_handling,No,Yes,Obfuscated code: atob\s*\(,https://registry.npmjs.org/@babel/template/-/template-7.26.9.tgz; https://opencollective.com/unts; https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz; https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz; https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz
mastergo-design,mastergo-magic-mcp,68,16312,"MasterGo Magic MCP is a standalone service that enables AI models to directly retrieve DSL (Domain Specific Language) data from MasterGo design files. Developed as a lightweight Node.js tool, it provides a simple mechanism for extracting design file metadata using a personal access token, with a focus on enabling programmatic access to design element details. The implementation is particularly useful for AI-powered design analysis, code generation, and design system exploration.",MINIMAL,1.32,1.6,7.2,-2.16,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3474,15,5,5.0,,No,Yes,,https://example.com/ant/button.mdx
sendaifun,solana-mcp,68,1326,"A Solana blockchain MCP server powered by the Solana Agent Kit, enabling programmatic interactions with Solana through a standardized protocol. Supports a wide range of blockchain actions including asset retrieval, token deployment, wallet management, transfers, NFT minting, and domain resolution. Designed to provide a flexible, developer-friendly interface for Solana-based operations.",MINIMAL,0.93,1.2,7.7,-2.31,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,5692,22,9,5.0,,No,Yes,,
cohnen,mcp-google-ads,67,0,"This MCP server implementation provides integration with Google Ads API, enabling AI assistants to access and manipulate advertising campaign data directly within conversations. The server appears to have encountered an error during setup, indicating it may be in development or experiencing configuration issues with the repository 'cohnen/mcp-google-ads'. When functioning properly, it would likely allow for campaign management, performance analysis, and optimization of Google Ads accounts without leaving the conversation interface.",MINIMAL,0.27,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,26747,44,23,5.0,,Yes,No,,https://www.googleapis.com/auth/adwords; https://googleads.googleapis.com/{API_VERSION; https://accounts.google.com/o/oauth2/auth; https://oauth2.googleapis.com/token
lucashild,mcp-server-bigquery,67,25052,"This BigQuery MCP server, developed by LucasHild, provides a streamlined interface for language models to interact with Google BigQuery databases. It enables AI agents to inspect database schemas, list tables, and execute SQL queries using the BigQuery dialect. The server is configurable with project ID, location, and optional dataset filtering. By leveraging BigQuery's powerful data warehousing capabilities, it allows AI systems to analyze large datasets efficiently. This implementation is particularly useful for AI assistants designed to perform data analysis tasks, generate insights from business intelligence data, or automate reporting processes using BigQuery as the backend data source.",MINIMAL,0.93,1.6,5.8,-1.74,Yes,Yes,No,No,Yes,Yes,Yes,Yes,Yes,Yes,3337,13,7,5.0,usage; api_reference; project_info,Yes,No,,
gongrzhe,office-powerpoint-mcp-server,67,3333,"PowerPoint MCP server that enables AI assistants to create and manipulate PowerPoint presentations through python-pptx. Built by GongRzhe, it provides tools for adding and formatting slides, text, images, tables, charts and shapes with robust error handling and parameter validation. The implementation focuses on reliability with multiple fallback approaches for operations like image insertion and shape creation, making it particularly valuable for users who need to programmatically generate or modify presentations through natural language requests.",MINIMAL,1.01,1.2,6.4,-1.92,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,6719,35,10,3.5,error_handling,No,No,,
cyanheads,obsidian-mcp-server,66,4656,"This Obsidian MCP server, developed by cyanheads, enables AI models to interact with Obsidian vaults through a standardized interface. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for file operations, content search, and metadata management within Obsidian. The implementation features atomic operations, efficient query processing, and automatic timestamp handling. It's particularly useful for AI assistants and applications needing to manage knowledge bases in Obsidian, enabling use cases like note-taking, content organization, and information retrieval without dealing directly with Obsidian's API complexities.",MINIMAL,0.93,1.2,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,7963,24,10,5.0,,No,Yes,,
dannymac180,mcp-think-tool,66,3736,"The MCP Think Tool Server implements Anthropic's 'think' tool for Claude and other LLMs, providing a dedicated space for structured reasoning during complex problem-solving tasks. It maintains a timestamped log of thoughts that can be reviewed, cleared, or analyzed for statistics, enabling models to break down problems systematically, ensure policy adherence, and process complex tool outputs. Built using FastMCP, the server exposes four tools: think for recording thoughts, get_thoughts for retrieving the thinking history, clear_thoughts for resetting, and get_thought_stats for analyzing thinking patterns - making it particularly valuable for improving performance in tasks requiring long chains of reasoning.",MINIMAL,1.06,1.2,4.6,-1.38,Yes,Yes,No,No,No,No,Yes,Yes,Yes,No,1862,7,4,3.5,usage; api_reference; error_handling; license,No,No,,
v-3,discordmcp,66,0,"This Discord MCP server, developed as an open-source project, enables AI assistants to interact directly with Discord channels through the Discord API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for sending messages, reading recent channel history, and automatic server/channel discovery. The implementation focuses on maintaining user control and security while allowing AI models to engage in Discord conversations. It's particularly useful for enhancing AI-driven community management, automated support, or interactive chatbots within Discord servers, enabling seamless integration of AI capabilities without requiring deep knowledge of Discord's API intricacies.",MINIMAL,0.77,1.0,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,4007,15,10,5.0,,No,No,,
baryhuang,mcp-remote-macos-use,65,0,"MCP Remote macOS Server provides secure remote control of macOS machines through VNC protocol, enabling AI assistants to capture screenshots and interact with the remote desktop through mouse and keyboard inputs. The implementation supports Apple Authentication (protocol 30) for secure connections, handles screen scaling for consistent display, and includes comprehensive error handling for connection issues. Built with a focus on security and reliability, this server is ideal for remote administration, automated testing, or AI-powered interaction with macOS systems.",MINIMAL,0.77,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,9594,31,6,5.0,,Yes,Yes,,
govcraft,rust-docs-mcp-server,65,0,"Rust documentation loader for the Model Context Protocol that efficiently processes HTML documentation files from Rust crates. Uses LlamaIndex's HTML reader to load and parse documentation, with intelligent file selection logic that handles duplicate files by selecting the largest version. Supports an optional 'dangerous' mode to include all HTML files, making it flexible for different documentation processing scenarios.",MINIMAL,0.78,1.0,7.3,-2.19,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,13933,21,7,5.0,error_handling,No,No,,
langfuse,mcp-server-langfuse,65,0,"This MCP server implementation provides access to Langfuse's prompt management capabilities, allowing users to list and retrieve prompts through the Model Context Protocol. Developed by marcklingen, it transforms Langfuse prompts into MCP-compatible formats, supports pagination for prompt listing, and includes a prompt compilation feature. The server also offers tool-based operations for increased compatibility with MCP clients. It's particularly useful for AI applications requiring dynamic prompt management, version control, and integration with existing Langfuse workflows. The implementation focuses on production-labeled prompts and is designed to work seamlessly with Claude Desktop and Cursor environments.",MINIMAL,0.78,1.0,7.4,-2.22,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3354,14,4,5.0,,No,No,,
nguyenvanduocit,all-in-one-model-context-protocol,65,0,"This MCP server, developed by nguyenvanduocit, enables AI assistants like Claude to interact with a wide range of development tools and services. Built in Go, it provides capabilities for searching Confluence, querying GitLab repositories, fetching Jira issues, executing command-line scripts, and more. The implementation stands out by offering a unified interface to multiple essential development platforms and APIs. By connecting AI capabilities with core development workflows and knowledge bases, this server allows AI systems to access documentation, analyze code, track issues, and assist with various development tasks. It is particularly useful for enhancing AI-powered developer tools, automating software development workflows, and building intelligent assistants that can seamlessly integrate with existing development infrastructure.",MINIMAL,0.78,1.0,7.3,-2.19,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,20537,65,4,3.5,error_handling,No,No,,
peakmojo,applescript-mcp,65,524,"AppleScript MCP Server provides a dual-implementation (Node.js and Python) bridge that enables AI assistants to execute AppleScript code on macOS systems. Developed by peakmojo, this lightweight server (<100 lines of core code) allows interaction with Mac applications and system features including Notes, Calendar, Contacts, Messages, Finder, and more. The implementation handles script execution through temporary files and subprocess calls, with configurable timeouts and comprehensive error handling. It's particularly valuable for automating Mac-specific tasks like creating reminders, searching files, checking system status, or controlling applications through natural language requests.",MINIMAL,0.35,1.0,5.1,-1.53,Yes,Yes,Yes,No,No,No,Yes,Yes,Yes,Yes,2307,7,17,5.0,configuration; api_reference; error_handling,Yes,No,,
philliprt,think-mcp-server,65,0,"Think Tool MCP Server implements Anthropic's 'think' tool as described in their engineering blog, providing Claude with a dedicated space for structured reasoning during complex problem-solving tasks. This TypeScript implementation creates a simple MCP server that allows Claude to pause and reflect during response generation, without performing external actions or retrieving new information. Research shows this approach improves performance by up to 54% on complex tasks, especially when working with multiple tools or following detailed policies, making it particularly valuable for customer service, legal compliance, sequential decision-making, and coding challenges.",MINIMAL,0.78,1.0,7.3,-2.19,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,6732,15,8,5.0,project_info,No,No,,
quantgeekdev,coincap-mcp,65,7015,"This MCP server, developed by QuantGeekDev, provides access to cryptocurrency data from the CoinCap API without requiring API keys or registration. It exposes tools for querying Bitcoin prices, retrieving prices for any supported cryptocurrency, and listing all available crypto assets. By integrating with CoinCap's public API, this implementation enables AI assistants to easily incorporate up-to-date cryptocurrency information into their responses. It is particularly useful for financial analysis, market tracking, and generating reports on crypto trends through natural language queries to an AI assistant.",MINIMAL,1.21,1.4,6.2,-1.86,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,1989,13,6,5.0,error_handling; project_info,No,No,,
tanigami,mcp-server-perplexity,65,14151,"This MCP server, developed by tanigami, provides seamless integration with the Perplexity API for AI assistants. Built for use with Claude Desktop, it offers a tool for requesting chat completions with citations from Perplexity. The server bridges Claude's capabilities with Perplexity's advanced language models and real-time information retrieval, enabling more up-to-date and factual responses. Key features include citation support and easy configuration through Claude Desktop settings. By leveraging Perplexity's strengths in current events and factual queries, this implementation enhances AI capabilities for tasks requiring recent information or verified sources. It is particularly useful for scenarios like research assistance, fact-checking, or generating responses with reliable citations.",MINIMAL,1.27,1.6,5.7,-1.71,Yes,Yes,No,Yes,No,Yes,Yes,Yes,Yes,Yes,1184,6,1,5.0,usage,No,Yes,,
vinayak-mehta,mcp-browser-use,65,16204,"The MCP Browser-Use server connects any MCP client (like Claude or Cursor) with the browser-use library, allowing AI assistants to interact with web browsers. Unlike other browser-use MCPs that require purchasing a separate LLM API key, this implementation by Vinayak Mehta leverages the LLM already configured in your MCP client. It enables web browsing capabilities through a simple command (uvx mcp-browser-use) that can be added to MCP client configurations, making it ideal for users who want to give their AI assistants web access without additional API costs.",MINIMAL,1.44,1.6,5.4,-1.62,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,1426,5,1,3.5,error_handling,No,No,,
rootly-ai-labs,rootly-mcp-server,64,5363,"Rootly MCP Server provides a dynamic interface to the Rootly API for incident management directly within MCP-compatible editors like Cursor, Windsurf, and Claude. Developed by Rootly AI Labs, it transforms Rootly's OpenAPI specification into MCP tools that enable users to resolve production incidents without leaving their IDE. The server intelligently limits exposed API paths to prevent AI agent overwhelm, focusing on core incident management endpoints with default pagination to prevent context window overflow. This implementation is particularly valuable for SRE teams and developers who need to quickly respond to and manage production incidents while staying in their development environment.",HIGH,-2.48,1.4,7.2,-2.16,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,3127,6,3,5.0,error_handling,No,Yes,Found pattern: send.*data; Found pattern: tracking; Found pattern: collect.*data; Potential data exfiltration: send.*data; Potential data exfiltration: log.*queries,https://api.rootly.com/v1/alert_events/%7Bid%7D\; https://api.rootly.com/v1/alert_urgencies/%7Bid%7D; https://api.rootly.com/v1/form_set_conditions/%7Bid%7D\; https://api.rootly.com/v1/escalation_paths/%7Bescalation_policy_path_id%7D/escalation_levels; https://api.rootly.com/v1/incidents/%7Bincident_id%7D/status-page-events?include=SOME_STRING_VALUE&page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE
roychri,mcp-server-asana,64,7442,"This Asana MCP server, developed by Christian Roy, enables AI assistants to interact with the Asana project management platform. It provides a comprehensive set of tools for managing workspaces, projects, tasks, comments, and dependencies through the Asana API. The implementation abstracts Asana's functionality, offering a standardized interface for AI systems to perform project management operations. By connecting AI assistants with Asana, this server facilitates task automation, project tracking, and team collaboration. It is particularly useful for AI applications requiring seamless integration with Asana, such as automated project updates, task prioritization, or intelligent workload management across teams and projects.",MINIMAL,0.68,1.4,7.4,-2.22,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,15724,10,3,3.5,,Yes,No,,
lsd-so,lsd-mcp,63,0,"This MCP server, developed by LSD.so, enables Claude to directly query and analyze web content using LSD SQL, a domain-specific language for web scraping. Built with Python and leveraging cloud browsers, it allows Claude to write and execute LSD SQL queries to extract structured data from websites. The implementation focuses on providing a flexible interface for web data extraction, including features like parallel processing and just-in-time table creation. It's particularly useful for applications requiring real-time web data analysis, enabling use cases such as market research, competitor analysis, and content aggregation without complex web scraping setups or API integrations.",MINIMAL,0.73,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,8269,16,9,5.0,,No,Yes,,
tacticlaunch,mcp-linear,63,4193,"MCP Linear is a server implementation that bridges AI assistants with the Linear project management system, enabling natural language interaction with Linear's GraphQL API. Developed by tacticlaunch, it provides tools for managing issues, projects, teams, cycles, and users through a standardized interface. The server authenticates with Linear using an API token and translates assistant requests into appropriate API calls, handling everything from creating and updating issues to managing project workflows and team assignments. Particularly valuable for teams who want to integrate project management tasks directly into their AI assistant workflows without context switching.",MINIMAL,0.9,1.2,6.8,-2.04,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,4176,16,6,5.0,error_handling,No,Yes,,
donghao1393,mcp-dbutils,62,67219,"MCP Database Utilities is a unified database access service that supports multiple database types (PostgreSQL, SQLite, and MySQL). Through its abstraction layer design, it provides a simple and unified database operation interface for MCP servers.",MINIMAL,1.58,1.8,6.0,-1.8,Yes,Yes,Yes,Yes,Yes,No,No,No,Yes,Yes,4327,15,0,3.5,error_handling,No,No,Found pattern: fetch\s*\(,https://sonarcloud.io/project/issues?id=${projectKey; https://sonarcloud.io/api/ce/task?id=${ceTaskId; https://sonarcloud.io/dashboard?id=${projectKey; https://sonarcloud.io/api/issues/search?componentKeys=${projectKey; https://sonarcloud.io/api/measures/component?component=${projectKey
fengin,search-server,62,0,"Search-Server provides a unified interface for AI assistants to access multiple search engines through a standardized API. The implementation integrates with Brave Search, Metaso, and Bocha search services, handling authentication, rate limiting, and response formatting for each provider. Built with Python and modern async libraries like httpx, aiohttp, and Playwright, it abstracts away the complexity of different search APIs while maintaining provider-specific features. This server is particularly valuable for developers who need to incorporate web search capabilities into AI applications without managing multiple search engine integrations separately.",MINIMAL,0.69,1.0,6.4,-1.92,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6818,31,10,3.5,project_info,No,Yes,,
jdubois,azure-cli-mcp,62,0,"Azure CLI MCP is a server implementation that wraps the Azure CLI, enabling AI assistants to execute Azure commands through a standardized interface. Developed by Julien Dubois, it uses Spring Boot and Spring AI to expose Azure CLI functionality via the stdio transport, allowing users to manage Azure resources directly from tools like Claude Desktop or VS Code. The server runs locally using the user's Azure credentials and includes a carefully crafted prompt that improves how LLMs interact with Azure, making it particularly effective for listing resources, fixing configuration issues, and creating new Azure services.",MINIMAL,0.79,1.0,7.0,-2.1,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,8053,15,5,5.0,error_handling,No,No,,
secretiveshell,mcp-searxng,62,8401,"This MCP server, developed by SecretiveShell, enables AI assistants like Claude to perform web searches using the SearXNG metasearch engine. Built in Python, it provides a simple interface for querying SearXNG and retrieving search results. The implementation stands out by leveraging SearXNG's privacy-focused approach and ability to aggregate results from multiple search engines. By connecting AI capabilities with a customizable search backend, this server allows AI systems to access up-to-date web information while maintaining user privacy. It is particularly useful for enhancing AI assistants with real-time web search capabilities, conducting research tasks, or building applications that require privacy-preserving internet queries.",MINIMAL,1.28,1.4,4.1,-1.23,Yes,No,Yes,No,No,No,Yes,Yes,Yes,No,1513,7,3,3.5,installation; api_reference; error_handling; license; project_info,No,No,,
isaacwasserman,mcp-snowflake-server,61,0,"This MCP server, developed by Isaac Wasserman, enables AI assistants like Claude to interact with Snowflake databases. Built in Python, it provides capabilities for executing SQL queries, managing database schema, and maintaining a dynamic insights memo. The implementation stands out by offering a standardized interface to Snowflake's powerful data warehousing capabilities, allowing AI systems to analyze and manipulate large-scale datasets. By connecting AI capabilities with enterprise data infrastructure, this server enables AI assistants to perform complex data analysis, generate insights, and interact with business intelligence workflows. It is particularly useful for data exploration tasks, automated reporting, and building AI-powered analytics tools that can leverage the full power of Snowflake's cloud data platform.",MINIMAL,0.78,1.0,7.3,-2.19,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,5420,16,6,5.0,,No,No,,
sammcj,mcp-package-docs,61,7780,"This MCP server, developed by Sam McLeod, provides efficient access to package documentation across multiple programming languages. Built with TypeScript and Node.js, it supports Go packages via 'go doc', Python libraries using built-in 'help()', and NPM packages through registry documentation. The server implements smart parsing to deliver structured output with descriptions, usage, and examples, while maintaining a minimal memory footprint through built-in caching. By offering a standardized interface for package documentation retrieval, it enables AI models to quickly access and utilize up-to-date library information. This implementation is particularly useful for developers and AI assistants working on multi-language projects, code analysis tasks, and automated documentation generation.",MINIMAL,1.17,1.4,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,8823,24,15,5.0,,No,No,,https://pkg.go.dev/api/packages/${encodeURIComponent(packageName; https://raw.githubusercontent.com/${repoPath; https://pypi.org/pypi/${packageName; https://raw.githubusercontent.com/${owner; https://unpkg.com/@types/${packageName
silenceper,mcp-k8s,61,0,"mcp-k8s is a Kubernetes MCP server that enables AI assistants to interact with Kubernetes clusters through natural language. Built in Go using the mcp-go SDK and Kubernetes client-go library, it provides tools for querying resource types and performing CRUD operations on Kubernetes resources with configurable write permissions. The server connects to clusters using kubeconfig and supports both read-only and write operations (create/update/delete) that can be independently enabled or disabled for security. Particularly valuable for interactive resource management, automated operations, development support, and educational scenarios where users benefit from natural language interaction with Kubernetes environments.",MINIMAL,0.77,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,9616,35,6,5.0,,No,No,,
tencentedgeone,edgeone-pages-mcp,61,11429,"EdgeOne Pages MCP server enables rapid deployment of HTML content to Tencent's EdgeOne Pages service. The server integrates with EdgeOne Pages Functions and KV store to host static content at the edge, providing a simple interface for deploying HTML and obtaining publicly accessible URLs. Built for developers who need quick content publishing capabilities through AI assistants, it handles API errors gracefully and returns immediate access to deployed content.",MINIMAL,1.42,1.6,5.9,-1.77,Yes,No,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,2642,9,2,5.0,installation,No,No,,
xing5,mcp-google-sheets,61,9343,"This MCP server integrates with Google Drive and Google Sheets, enabling AI assistants to create, read, update, and manage spreadsheets. Built by Xing Wu, it provides tools for retrieving sheet data, updating cells, adding rows and columns, creating new spreadsheets, and listing available documents. The implementation supports both OAuth and service account authentication methods, making it suitable for personal assistants that need to interact with spreadsheet data or automate document workflows without requiring users to switch contexts.",MINIMAL,0.67,1.4,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,18301,18,13,3.5,,Yes,No,,
baranwang,mcp-trends-hub,60,3793,"MCP Trends Hub provides AI assistants with access to trending topics and content from popular Chinese platforms including Weibo, Zhihu, Douyin, Bilibili, Douban, Toutiao, and 36kr. The implementation exposes each platform as a separate tool that fetches current trending data, with results cached temporarily to improve performance. Built with TypeScript and using the Model Context Protocol SDK, it features robust error handling and standardized response formatting. This server is particularly valuable for use cases requiring real-time insights into Chinese social media trends, content discovery, and cultural monitoring without leaving the conversation interface.",MINIMAL,1.02,1.2,5.9,-1.77,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,3944,13,5,5.0,configuration; error_handling,No,No,,https://post.smzdm.com/rank/json_more; https://sspai.com/api/v1/article/tag/page/get; https://gateway.36kr.com/api/mis/nav/home/nav/rank/${type; https://api.bilibili.com/x/web-interface/ranking/v2?rid=${type; https://weread.qq.com/web/bookDetail/${wereadID
dfkai,xtquantai,60,0,"A lightweight MCP server for quantitative trading using the XTQuant API, enabling AI-driven financial analysis and trading strategies. Developed by davidfnck, this tool provides a Python-based integration for programmatic stock market interactions, with a focus on leveraging AI capabilities for quantitative investment approaches.",MINIMAL,0.85,1.0,5.0,-1.5,Yes,Yes,No,No,No,No,Yes,Yes,Yes,Yes,3244,30,12,5.0,usage; configuration; api_reference; error_handling,No,No,,http://localhost:{port
f4ww4z,mcp-mysql-server,60,15455,"This MCP MySQL server, developed by f4ww4z, enables AI assistants like Claude to interact with MySQL databases through a standardized interface. Built in JavaScript/TypeScript, it provides capabilities for executing queries, managing database connections, and retrieving schema information. The implementation stands out by offering prepared statement support, automatic connection management, and comprehensive error handling. By connecting AI capabilities with relational database operations, this server allows AI systems to query and manipulate data in MySQL databases programmatically. It is particularly useful for building AI-powered data analysis tools, automated reporting systems, and intelligent assistants that need to interact with MySQL-based applications and data stores.",MINIMAL,1.38,1.6,7.2,-2.16,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3442,16,9,5.0,,No,No,,
meterlong,mcp-doc,60,0,"DocxProcessor MCP server provides a comprehensive Word document processing service that enables AI assistants to create, edit, and manipulate Microsoft Word documents through a rich set of tools. Built using Python with the python-docx library, it offers functionality for adding and formatting text, managing tables, searching and replacing content, and preserving document styling. The implementation includes state management for maintaining document sessions across server restarts and detailed error handling, making it particularly valuable for workflows requiring document generation, content editing, or template-based document creation without leaving the conversation interface.",MINIMAL,0.8,1.0,6.5,-1.95,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,4198,12,1,3.5,,No,No,,
portswigger,mcp-server,60,0,"Burp Suite MCP Server enables AI clients to interact with Burp Suite's web security testing capabilities through the Model Context Protocol. Developed by PortSwigger, this Kotlin-based extension exposes Burp's functionality as tools that AI assistants can use to send HTTP requests, analyze proxy history, manipulate Burp's configuration, and perform various security testing operations. The server includes automatic installation support for Claude Desktop through a packaged stdio proxy server, making it particularly valuable for security professionals who want to leverage AI assistance for web application security testing, vulnerability assessment, and penetration testing workflows.",MINIMAL,0.81,1.0,6.4,-1.92,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,No,5652,15,7,5.0,error_handling; license,No,No,,
tinybirdco,mcp-tinybird,60,20469,"This MCP server, developed by Tinybird, enables AI assistants to interact with Tinybird workspaces for data exploration and analysis. Built in Python, it provides tools for querying data sources, executing API endpoints, and pushing data files. The server leverages Tinybird's real-time analytics capabilities, allowing AI models to access and analyze large datasets efficiently. Key features include SQL query execution, data source exploration, and integration with Tinybird's documentation. By bridging AI assistants with powerful analytics infrastructure, this implementation is particularly useful for tasks involving data-driven insights, business intelligence, and real-time data exploration across various domains.",MINIMAL,1.37,1.6,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,7281,18,12,5.0,,No,No,,
voska,hass-mcp,60,0,"Hass-MCP enables AI assistants like Claude to interact directly with Home Assistant smart home systems through the Model Context Protocol. Built by Matt Voska, it provides tools for querying device states, controlling lights and switches, summarizing smart home configurations, troubleshooting automations, and searching for specific entities. The implementation runs as a Docker container that communicates with Home Assistant via its API, making it ideal for users who want to manage their smart home through natural language conversations without leaving their AI assistant interface.",MINIMAL,0.78,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6590,18,5,3.5,,No,No,,
waldzellai,waldzell-mcp,60,0,"The MCP Servers repository by Waldzell AI provides a collection of specialized MCP servers for different use cases. It includes server-typestyle for Google TypeScript style guide analysis, server-yelp-fusionai for Yelp Fusion API integration with business search and review capabilities, server-clear-thought for systematic thinking and mental models, and server-stochasticthinking for probabilistic decision-making algorithms. Each server is containerized with Docker, configured for Smithery deployment, and follows a consistent architecture pattern with TypeScript implementation. The monorepo structure enables shared utilities while maintaining independent versioning through changesets.",MINIMAL,0.81,1.0,6.3,-1.89,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,3604,23,9,5.0,configuration; error_handling,Yes,Yes,,https://api.yelp.com; https://yelp.com/events/featured-event-id; https://example.com/callback; https://yelp.com/events/test-event-id; http://localhost:${EXA_SERVER_PORT
peakmojo,mcp-hubspot,58,0,"This HubSpot MCP server, developed by peakmojo, provides a streamlined interface for AI models to interact with HubSpot CRM data and operations. Built using Python and the HubSpot API client, it offers tools for managing contacts and companies, including creation and retrieval functionalities. The server implements auto-updating resources and a demonstration prompt to guide users through HubSpot operations. By abstracting HubSpot API interactions into a standardized MCP format, it enables AI systems to easily access and manipulate CRM data. This implementation is particularly valuable for sales and marketing applications, facilitating use cases such as lead management, customer data analysis, and automated CRM updates.",MINIMAL,0.28,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3712,15,7,5.0,,Yes,No,,https://api.hubapi.com/crm/v4/objects/tickets/{ticket_id; https://api.hubapi.com/conversations/v3/conversations/threads/{thread_id
ergut,mcp-bigquery-server,58,4818,"This BigQuery MCP server, developed by Salih Ergüt, provides a secure interface for language models to interact with Google BigQuery datasets. It enables AI agents to explore schemas, run SQL queries, and analyze data within configurable limits. The server integrates seamlessly with Claude Desktop, offering a natural language interface to BigQuery's powerful data warehousing capabilities. By focusing on read-only access and built-in safety constraints, it allows AI systems to generate insights from large datasets while maintaining data security. This implementation is particularly useful for AI assistants designed to perform ad-hoc data analysis, generate business intelligence reports, or provide data-driven recommendations using BigQuery as the backend.",MINIMAL,0.98,1.2,7.4,-2.22,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6027,20,9,5.0,,No,No,,
pydantic,logfire-mcp,58,10194,"Logfire MCP Server provides AI assistants with access to OpenTelemetry traces and metrics through Logfire's API. Built by the Pydantic team, it enables LLMs to query application telemetry data, analyze distributed traces, and perform custom SQL queries on observability data with automatic token-based authentication. The server exposes tools for finding exceptions, analyzing errors in specific files, running arbitrary queries against trace data, and retrieving schema information - making it particularly valuable for debugging applications, investigating performance issues, and gaining insights from operational data without leaving the AI assistant conversation.",MINIMAL,1.37,1.6,7.7,-2.31,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6554,16,13,5.0,,No,No,,
qpd-v,mcp-deepwebresearch,58,0,"This web research MCP server, developed by qpd-v, enables AI models to conduct deep web searches and content extraction. Built with TypeScript and leveraging Playwright for web automation, it provides tools for Google searches, parallel multi-query searches, webpage visits, and screenshot capture. The implementation stands out with its robust error handling, consent dialog management, and content cleaning capabilities. It's particularly useful for AI assistants or applications needing to perform comprehensive online research, enabling tasks like information gathering, content analysis, and visual data collection without requiring deep knowledge of web scraping techniques.",MINIMAL,0.77,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,8515,47,13,5.0,,No,No,,
synthience,mcp-titan-cognitive-memory,58,0,"This Titan Memory Server implementation, developed to enhance AI model context management, provides a TensorFlow.js-based interface for efficient memory storage and retrieval. Built using the Model Context Protocol SDK and Express.js, it offers tools for storing, updating, and querying contextual information. The implementation focuses on optimizing memory operations through tensor computations, enabling AI models to maintain and utilize large amounts of contextual data effectively. It's particularly useful for long-running conversations, multi-session knowledge retention, and complex reasoning tasks that require persistent and quickly accessible memory structures.",MINIMAL,1.0,1.0,0,-0.0,No,No,No,No,No,No,No,No,No,No,0,0,0,0,,No,No,,
szeider,mcp-solver,58,0,"This MCP solver, developed by Stefan Szeider, provides a server that exposes MiniZinc constraint solving capabilities to Large Language Models. It integrates MiniZinc's powerful constraint programming features with the Model Context Protocol, enabling AI models to submit and validate constraint models, set parameters, solve problems, and analyze solutions. The implementation stands out by offering asynchronous solving with timeout management, automatic library inclusion based on constraints, and progress tracking. By connecting AI capabilities with industrial-strength constraint solving, this server enables AI systems to tackle complex optimization and satisfaction problems. It is particularly useful for applications in areas like scheduling, planning, resource allocation, and combinatorial optimization where LLMs can benefit from rigorous mathematical modeling and solving.",MINIMAL,0.73,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,9516,24,13,5.0,,No,Yes,,
xpn,mythic_mcp,58,0,"Mythic MCP is a server implementation that enables AI assistants to interact with the Mythic Command and Control (C2) framework for penetration testing. Created by XPN, it provides tools for executing shell commands, reading files, uploading content, and running specialized security tools like Mimikatz on compromised systems through Mythic agents. The server exposes a set of prompt templates for emulating specific threat actors or performing reconnaissance, making it particularly valuable for security professionals who want to leverage AI capabilities for automated penetration testing workflows while maintaining control through the Mythic interface.",MINIMAL,0.88,1.0,4.1,-1.23,Yes,No,Yes,No,No,No,Yes,Yes,Yes,No,1136,3,2,5.0,installation; api_reference; error_handling; license; project_info,No,No,,
eniayomi,gcp-mcp,57,3787,"This MCP server implementation provides integration with Google Cloud Platform services. Developed by Oluwapelumi Oluwaseyi, it offers tools for interacting with various GCP resources including Compute Engine, Cloud Storage, Cloud Functions, Cloud Run, BigQuery, and more. The server uses official Google Cloud client libraries and implements robust error handling and retry mechanisms. It's designed for developers looking to leverage GCP capabilities within MCP-based applications and workflows.",MINIMAL,0.98,1.2,7.2,-2.16,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,4144,16,11,5.0,,No,No,,
skydeckai,skydeckai-code,57,44679,"This MCP server, developed by SkyDeck.ai, provides a comprehensive set of tools for AI-driven development workflows. It integrates file system operations, multi-language code analysis using tree-sitter, Git operations, and code execution capabilities. The implementation is built in Python and leverages libraries like GitPython for version control integration. It's designed with security in mind, featuring configurable workspace boundaries and safe code execution measures. This server is well-suited for AI assistants or development tools that need to analyze, modify, and execute code across multiple programming languages, manage Git repositories, and perform file system operations in a controlled environment.",MINIMAL,0.87,1.6,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,30181,75,34,5.0,,Yes,No,,
ergut,mcp-logseq-server,56,0,"This MCP server, developed by Salih, provides a seamless interface for AI assistants to interact with LogSeq via its API. Built using Python and the MCP library, it offers a range of tools for managing LogSeq graphs, including listing pages, searching content, and creating or updating pages. The server abstracts the complexities of API communication, allowing AI systems to easily integrate with LogSeq for note-taking and knowledge management tasks. It's particularly useful for scenarios requiring automated interaction with LogSeq, such as summarizing meeting notes, updating project statuses, or performing content searches across multiple pages. By bridging AI capabilities with LogSeq's functionality, this implementation enables more efficient and intelligent personal knowledge management workflows.",MINIMAL,0.7,1.0,6.6,-1.98,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,No,1867,9,4,3.5,license,No,Yes,,http://{self.host
getfounded,mcp-tool-kit,56,4560,"MCP Tool Kit provides a unified server implementation for Claude AI assistants with over 100 integrated tools spanning file operations, web search, browser automation, data analysis, and document management. Built by getfounded, it uses a modular architecture that reduces cognitive load on Claude by encapsulating domain knowledge in vertical agents that handle complex workflows internally. The Docker-based deployment makes it easy to set up and configure with API keys for services like Brave Search, NewsAPI, and FRED economic data, enabling powerful capabilities for tasks ranging from market analysis to presentation creation without requiring Claude to coordinate individual tool calls.",MINIMAL,0.97,1.2,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,15171,37,11,5.0,,Yes,Yes,,http://localhost:8000; https://api.worldbank.org/v2; https://api.worldbank.org/v2/country/{country_id
gongrzhe,quickchart-mcp-server,56,0,"This MCP server implementation provides integration with QuickChart, a service for generating charts and graphs. Developed by GongRzhe, it offers a bridge between AI assistants and QuickChart's API, enabling the creation of visual data representations. Built with TypeScript and leveraging the Model Context Protocol SDK, the server focuses on simplifying chart generation tasks. It is particularly useful for AI applications that need to produce data visualizations on-the-fly, such as report generators, dashboard creators, or data analysis tools.",MINIMAL,0.8,1.0,6.8,-2.04,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,4103,14,8,5.0,error_handling,No,No,,https://quickchart.io/chart
mantrakp04,manusmcp,56,0,"ManusMCP is a framework for orchestrating specialized AI agents that work together through a Model Context Protocol (MCP) server implementation. Built with TypeScript, it provides file operations, shell command execution, and browser automation capabilities through a comprehensive API. The server enables AI agents to read/write files, execute shell commands, navigate web pages, and interact with browser elements. The implementation includes a Docker-based deployment with services for Flowise, Unstructured API, and LiteLLM, making it ideal for creating AI team members with specialized roles like Planner, FileWizard, CommandRunner, and WebNavigator that can collaborate on complex tasks requiring filesystem access, command-line operations, and web interactions.",MEDIUM,-0.11,1.0,6.3,-1.89,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,1901,12,3,3.5,error_handling,No,Yes,Found pattern: tracking; Found pattern: collect.*data,https://langchain-ai.github.io/langgraph/concepts/memory/#long-term-memory; https://docs.flowiseai.com/using-flowise/uploads#image\; http://localhost:8000/general/v0/general; http://localhost:8002/sse\; https://docs.unstructured.io/api-reference/api-services/saas-api-development-guide\
stefans71,wordpress-mcp-server,56,981,"This WordPress MCP server, developed by stefans71, provides integration between WordPress sites and AI systems using the Model Context Protocol. Built with TypeScript and leveraging the Axios library for HTTP requests, it offers a standardized interface for interacting with WordPress APIs. The server enables AI assistants to perform common WordPress operations like managing posts, pages, and users without dealing with the complexities of direct API authentication and requests. By abstracting WordPress functionality into MCP tools, this implementation facilitates use cases such as automated content creation, site management, and data analysis for WordPress-based websites. It is designed for easy deployment and extensibility, making it valuable for developers building AI-powered WordPress automation tools or content management systems.",MINIMAL,0.8,1.0,6.7,-2.01,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,3288,12,5,5.0,error_handling,No,No,,
tadasant,mcp-server-stability-ai,56,3044,"This MCP server, developed by Tadas Antanavicius, integrates Stability AI's image manipulation capabilities into MCP-compatible systems. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers tools for generating, editing, and upscaling images using Stability AI's latest models. The server abstracts complex API interactions into simple MCP tools, enabling AI assistants to easily create and manipulate images. It stands out by providing a file-forward approach, saving processed images locally for easy reference. This implementation is particularly useful for applications requiring high-quality image generation and editing, such as content creation, design assistance, or visual storytelling.",MINIMAL,0.93,1.2,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,16911,25,3,5.0,,No,Yes,,https://api.stability.ai; https://platform.stability.ai/docs/api-reference#tag/Generate/paths/~1v2beta~1stable-image~1generate~1core/post
tesla0225,mcp-create,56,0,"MCP Create Server is a dynamic management service that creates and controls Model Context Protocol servers on-demand. Built with TypeScript and the MCP SDK, it functions as both an MCP server itself and a controller for child MCP servers, allowing users to dynamically create, execute tools on, update, and remove servers as needed. The implementation provides tools for server creation from templates, tool execution on child servers, server listing and management, and is designed to be run in Docker for optimal isolation and security, making it ideal for environments requiring flexible, on-demand MCP server capabilities.",MINIMAL,0.79,1.0,6.9,-2.07,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3190,19,5,3.5,,No,No,,
bazinga012,mcp_code_executor,55,0,"This MCP Code Executor, developed by bazinga012, enables AI assistants to execute Python code within specified Conda environments. Built using TypeScript and the Model Context Protocol SDK, it provides a secure and configurable way to run code with access to predefined libraries and dependencies. The implementation focuses on isolating code execution, allowing for flexible environment management and code storage. It's particularly useful for AI workflows that require dynamic code generation and execution, such as data analysis, algorithm testing, or automated scripting tasks, without compromising system security or managing complex runtime setups.",MINIMAL,0.83,1.0,5.5,-1.65,Yes,Yes,Yes,No,No,No,Yes,Yes,Yes,Yes,2250,8,5,5.0,api_reference; error_handling,No,No,,
chronulusai,chronulus-mcp,55,8026,"The Chronulus MCP Server enables Claude to interact with Chronulus AI's forecasting and prediction agents, allowing users to analyze time series data and generate forecasts through natural language. Developed by Chronulus AI, this implementation is built using Python and integrates with the Chronulus API to provide specialized time series forecasting capabilities. The server can be deployed using pip, Docker, or uvx, and requires a Chronulus API key for authentication. It's particularly useful for users who need to perform time series analysis, generate predictions, and visualize forecasting data directly within their Claude conversations.",MINIMAL,1.2,1.4,6.5,-1.95,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,No,5291,8,8,5.0,license,No,No,,
dcolley,swagger-mcp,55,0,"Swagger MCP Server ingests Swagger/OpenAPI specifications and exposes them as MCP tools, enabling AI assistants to interact with any API documented in the OpenAPI format. It supports multiple authentication methods (Basic Auth, Bearer Token, API Key, OAuth2), automatically generates tools from API endpoints, and provides real-time communication through Server-Sent Events. The implementation is designed for personal use to create a bridge between AI assistants and existing web APIs, making it particularly valuable for developers who want to give their AI assistants access to specific services without writing custom integrations for each API.",MINIMAL,0.79,1.0,7.1,-2.13,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,4257,20,15,5.0,error_handling,Yes,Yes,,
hanweg,mcp-discord,55,0,"This Discord MCP server, developed by Hanweg Altimer, provides a comprehensive integration between Discord and the Model Context Protocol. Built using Python and the discord.py library, it offers a wide range of Discord management tools including server information retrieval, message handling, channel and role management, and webhook operations. The server implements Discord's privileged intents for enhanced functionality and uses environment variables for secure bot token management. By abstracting Discord API interactions into a standardized MCP interface, it enables AI systems to easily interact with and manage Discord servers. This implementation is particularly useful for applications involving community management, automated moderation, and AI-assisted Discord bot development, facilitating use cases such as intelligent chatbots, content moderation, and server analytics.",MINIMAL,0.84,1.0,5.2,-1.56,Yes,Yes,No,No,Yes,No,Yes,Yes,Yes,Yes,2788,14,3,5.0,usage; api_reference; error_handling; project_info,No,No,,
isaacwasserman,mcp-vegalite-server,55,0,"This MCP server, developed by Isaac Wasserman, enables AI assistants like Claude to create data visualizations using Vega-Lite syntax. Built in Python, it provides two core functions: saving data tables and generating visualizations from that data. The implementation stands out by leveraging the expressive power of Vega-Lite for creating a wide range of chart types. By connecting AI capabilities with data visualization, this server enables AI systems to analyze and present data visually. It is particularly useful for scenarios like exploratory data analysis, creating reports with charts, and building AI assistants that can generate insightful data visualizations on demand.",MINIMAL,0.86,1.0,4.7,-1.41,Yes,No,Yes,Yes,No,No,No,Yes,Yes,Yes,1562,6,1,3.5,installation; error_handling,No,No,,
kazuph,mcp-taskmanager,55,6166,"This MCP server, developed by kazuph, implements a task management system with a focus on structured workflows and user approval. It provides tools for planning, executing, and tracking tasks within requests, enforcing a step-by-step process that requires explicit user approval at key stages. The implementation uses TypeScript and leverages the @modelcontextprotocol/sdk for MCP compatibility. It's designed for scenarios where careful oversight and approval of task completion is critical, making it well-suited for project management in regulated industries, quality assurance processes, or any workflow where each step needs verification before proceeding.",MINIMAL,1.22,1.4,5.9,-1.77,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,No,2728,14,5,5.0,error_handling; license,No,No,,
mario-andreschak,mcp-windows-desktop-automation,55,0,"MCP Windows Desktop Automation provides a TypeScript server that wraps AutoIt functions for Windows desktop automation, allowing AI assistants to control mouse movements, keyboard input, window management, and UI controls. Developed by mario-andreschak, it exposes a comprehensive set of tools organized into categories like mouse, keyboard, window, process, and control operations, while also offering file access resources and screenshot capabilities. The server supports both stdio and WebSocket transports, making it particularly valuable for automating repetitive Windows tasks, form filling, and system monitoring directly through natural language instructions.",MINIMAL,0.81,1.0,6.3,-1.89,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,2537,21,3,3.5,error_handling,No,No,,
osomai,servicenow-mcp,55,0,"ServiceNow MCP server provides a bridge between AI assistants and ServiceNow ITSM functionality, enabling management of incidents, service catalogs, change requests, workflows, and changesets through natural language. Built with Python using the MCP protocol, it supports multiple authentication methods (Basic, OAuth, API Key) and features a modular architecture with specialized tools for each ServiceNow module. The implementation includes Claude Desktop integration for seamless interaction, making it particularly valuable for IT professionals who need to create incidents, browse service catalogs, manage change requests, or automate workflows without leaving their AI assistant interface.",MINIMAL,0.77,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,21420,56,14,5.0,,Yes,Yes,,https://example.service-now.com/api/now/table/item_option_new; https://example.service-now.com/api/now/table/sc_category/test_sys_id; https://your-instance.service-now.com; https://your-instance.service-now.com/oauth_token.do; https://example.service-now.com/api/now/table/sc_cat_item
pierrebrunelle,mcp-server-openai,55,0,"This OpenAI MCP server, developed by Pierre Brunelle, enables AI assistants to directly query OpenAI's language models through a standardized MCP interface. It integrates seamlessly with Claude, allowing it to leverage OpenAI's capabilities while maintaining a clear separation between the AI models. Built in Python, the implementation handles API authentication, request formatting, and exposes OpenAI's text generation features. By bridging Claude and OpenAI, this server expands Claude's knowledge and capabilities, enabling it to tackle a wider range of tasks. It is particularly useful for scenarios where Claude needs to complement its own abilities with OpenAI's specialized strengths, such as coding assistance, creative writing, or domain-specific knowledge.",MINIMAL,0.64,1.0,4.6,-1.38,Yes,Yes,No,Yes,No,No,Yes,Yes,Yes,Yes,785,7,3,3.5,usage; error_handling; project_info,No,Yes,,
tinyfish-io,agentql-mcp,55,2949,"AgentQL MCP server integrates with the AgentQL data extraction API to provide AI assistants with structured data extraction capabilities from web pages. The server exposes a single tool that accepts a URL and natural language prompt, then uses the AgentQL API to extract relevant data in JSON format based on the description. This implementation is particularly useful for scenarios requiring structured data from websites without needing to write custom scrapers, enabling AI assistants to gather specific information from web content on demand.",MINIMAL,0.91,1.2,7.1,-2.13,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,No,3634,11,9,5.0,license,No,Yes,,
deepfates,mcp-replicate,54,0,"This Replicate MCP server implementation provides a bridge between the Model Context Protocol and Replicate's AI model hosting platform. Developed as an open-source project, it enables seamless interaction with Replicate's diverse collection of machine learning models through a standardized MCP interface. The server supports key operations such as listing available models, creating and managing predictions, and accessing model metadata. Built with TypeScript and leveraging the official Replicate API, it offers robust error handling, caching mechanisms, and webhook support. This implementation is particularly useful for developers and researchers looking to integrate Replicate's hosted AI models into their MCP-compatible applications, enabling easy access to a wide range of pre-trained models for tasks like image generation, text processing, and more.",MINIMAL,0.72,1.0,7.2,-2.16,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3958,22,10,5.0,,No,Yes,,
66julienmartin,mcp-server-deepseek_r1,54,0,"This MCP server, developed by Kamel IRZOUNI, provides integration with the Deepseek R1 model. Built with TypeScript and leveraging the Model Context Protocol SDK, it enables AI assistants to interact with Deepseek's advanced language model capabilities. The implementation focuses on providing a standardized interface for text generation and analysis tasks, making it easier to incorporate Deepseek's AI features into various applications. It's particularly useful for developers and teams who want to leverage Deepseek's language model in their AI workflows, enabling use cases such as content generation, text analysis, and AI-assisted decision-making without directly managing API interactions with Deepseek.",MINIMAL,0.72,1.0,7.2,-2.16,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3288,17,7,5.0,,No,Yes,,
smn2gnt,mcp-salesforce,54,10580,"This Salesforce MCP connector, developed by Suman G, enables seamless integration between Salesforce and AI-assisted workflows. It provides a Python-based interface for executing SOQL queries, performing SOSL searches, retrieving metadata, and managing Salesforce records through the Model Context Protocol. Built on the simple-salesforce library, it offers a range of Salesforce-specific operations including Tooling API and Apex REST requests. This implementation is particularly useful for developers and Salesforce administrators looking to incorporate AI assistance into their CRM workflows, enabling natural language interactions with Salesforce data and automating complex operations.",MINIMAL,1.49,1.6,3.7,-1.11,Yes,No,No,Yes,Yes,No,No,No,Yes,No,1430,4,0,3.5,installation; usage; error_handling; license,No,No,,
daipendency,daipendency-mcp,53,0,"This MCP server, developed by Gus Narea, provides a standardized interface for extracting documentation and public API information from dependencies in local projects. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a tool called 'get_dependency_docs' that simplifies the process of retrieving dependency documentation. The implementation focuses on enhancing developer productivity by automating the extraction of dependency information, which is particularly useful for projects with complex dependency structures. It's designed for developers and AI agents working on code analysis, documentation generation, or dependency management tasks, enabling use cases such as automated code review, intelligent API suggestions, and streamlined project documentation without manually navigating through dependency files.",MINIMAL,0.9,1.0,3.5,-1.05,Yes,Yes,No,Yes,No,No,Yes,No,Yes,No,783,6,0,5.0,usage; configuration; error_handling; license; project_info,No,No,,
jayzeedesign,figma-mcp,52,17434,"Figma MCP allows AI coding agents to directly access Figma files and prototypes, bridging the gap between design and development workflows. Created by Jason Zhou, this Python-based implementation provides a server that connects to the Figma API using your personal API key. It's designed for seamless integration with Cursor and other MCP-compatible IDEs, enabling AI assistants to reference design files when generating code or answering queries about UI implementations.",MINIMAL,1.24,1.6,4.8,-1.44,Yes,Yes,No,Yes,No,No,Yes,Yes,Yes,No,1297,6,6,3.5,usage; error_handling; license,No,Yes,,"https://www.figma.com/proto/do4pJqHwNwH1nBrrscu6Ld/Untitled?page-id=0%3A1&node-id=0-3&viewport=361%2C361%2C0.08&t=9SVttILbgMlPWuL0-1&scaling=min-zoom&content-scaling=fixed&starting-point-node-id=0%3A3,; https://api.figma.com/v1/files/{file_key"
marcelmarais,spotify-mcp-server,52,0,"Spotify MCP Server enables AI assistants like Claude and Cursor to control Spotify playback and manage playlists through the Model Context Protocol. Built by Marcel Marais, it provides a comprehensive set of tools for both reading operations (searching tracks, viewing playlists, getting currently playing tracks) and playback/creation operations (playing music, creating playlists, adding tracks). The implementation authenticates with the Spotify API using OAuth, automatically refreshes tokens when needed, and runs as a lightweight stdio server that can be easily integrated with Claude Desktop or Cursor for seamless music control during conversations.",MINIMAL,0.29,1.0,7.0,-2.1,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,10039,12,8,5.0,error_handling,Yes,No,,https://accounts.spotify.com/authorize?${authParams.toString(; http://localhost:${port; https://accounts.spotify.com/api/token; http://127.0.0.1:8888/callback
rawveg,ollama-mcp,52,3295,"This MCP server, developed by tigreen, provides a seamless integration between Ollama's local LLM models and MCP-compatible applications like Claude Desktop. Built with TypeScript and Express, it offers tools for listing, pulling, and interacting with Ollama models through a standardized interface. The implementation focuses on simplifying access to Ollama's capabilities, enabling AI assistants to utilize locally-run language models. By connecting AI models with Ollama's functionalities, this server allows for sophisticated scenarios like on-premise AI processing, custom model deployment, and privacy-focused applications. It's particularly valuable for developers and organizations looking to leverage local LLM capabilities within their AI workflows while maintaining data control and reducing cloud dependencies.",MINIMAL,1.0,1.2,6.8,-2.04,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,4000,14,9,5.0,error_handling,No,No,,
reading-plus-ai,mcp-server-deep-research,52,0,"A deep research MCP server that enables AI assistants to conduct thorough, structured investigations on complex topics. It guides the research process through a systematic approach: elaborating on the research question, generating focused subquestions, performing web searches, and synthesizing findings into a comprehensive report. The server maintains a record of the research process and collected data, making them available as resources. Developed by ReadingPlus.AI, this implementation is particularly valuable for educational contexts, academic research, and professional report generation where well-cited, properly formatted research outputs are needed.",MINIMAL,0.79,1.0,7.0,-2.1,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,3258,13,6,5.0,error_handling,No,No,,
vidhupv,x-mcp,52,3919,"This MCP server, developed by vidhupv, enables AI assistants like Claude to create, manage, and publish posts on X/Twitter directly. Built in Python, it provides a simple interface for composing tweets, creating threads, managing drafts, and publishing content. The implementation stands out by offering seamless integration with the X/Twitter API, allowing AI systems to interact with the social media platform programmatically. By connecting AI capabilities with Twitter's functionality, this server enables AI assistants to engage in social media management tasks. It is particularly useful for automating social media workflows, scheduling posts, analyzing engagement, and building AI-powered social media management tools.",MINIMAL,1.01,1.2,6.4,-1.92,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,2633,6,4,5.0,,Yes,Yes,,
xzq-xu,jvm-mcp-server,52,0,"JVM MCP Server provides a bridge between Claude and Java Virtual Machine applications, enabling direct interaction with running Java processes through Arthas diagnostic tools. Built with Python and Paramiko for SSH connectivity, it allows AI agents to execute commands, monitor performance, and debug Java applications remotely. The implementation connects to target JVM instances via SSH, manages connection pooling, and exposes Arthas capabilities as MCP tools, making it particularly valuable for developers who need to diagnose and troubleshoot Java applications without leaving their AI assistant conversation.",MINIMAL,0.8,1.0,6.8,-2.04,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,3716,24,8,5.0,error_handling,No,No,,
mattzcarey,mcp-thinking,51,0,"This MCP thinking server, developed by Matt Carey, extracts the reasoning chain from the Deepseek R1 model and makes it available to Claude Desktop and other MCP clients. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides a bridge between Deepseek's API and MCP-compatible applications. The implementation focuses on exposing Deepseek R1's step-by-step reasoning capabilities through a standardized interface. It's particularly useful for developers and researchers looking to incorporate Deepseek's advanced reasoning into their workflows, enabling use cases like complex problem-solving, decision analysis, and explainable AI without directly interacting with Deepseek's API.",MINIMAL,0.65,1.0,4.9,-1.47,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,No,837,4,4,3.5,error_handling; license; project_info,No,Yes,,
mobilehackinglab,jadx-mcp-plugin,51,0,"The jadx-mcp-plugin is a powerful extension for the popular Jadx decompiler that exposes the internal decompiled code structure through the Model Context Protocol (MCP) — a structured API designed to facilitate programmatic access and interaction with the decompiled codebase.

This plugin transforms Jadx into an AI-friendly analysis environment, making it easier to:

Navigate code programmatically: AI tools and scripts can query classes, methods, and fields using structured requests, removing the need for brittle regex-based parsing.

Automate analysis tasks: Streamline repetitive reverse engineering workflows by integrating AI agents or scripts that can reason over the code and metadata.

Power intelligent reverse engineering: Combine with LLMs or AI frameworks to build automated code summarizers, vulnerability scanners, or Android deobfuscators.

🧠 Use Case in AI Reverse Engineering AI models, such as Claude, GPT-40 or domain-specific agents, can use the MCP API to:

Extract call graphs or class hierarchies for architectural analysis.

Auto-document code by interpreting class roles and method behaviors.

Search and highlight suspicious patterns (e.g., dynamic loading, reflection).

🧠 𝗡𝗼𝘄 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗮𝘀𝗸 𝗖𝗹𝗮𝘂𝗱𝗲 𝘁𝗵𝗶𝗻𝗴𝘀 𝗹𝗶𝗸𝗲:
- ""𝑆𝑒𝑎𝑟𝑐ℎ 𝑎𝑙𝑙 𝐽𝑎𝑣𝑎 𝐶𝑙𝑎𝑠𝑠𝑒𝑠 𝑡ℎ𝑎𝑡 ℎ𝑎𝑛𝑑𝑙𝑒 𝑢𝑠𝑒𝑟 𝑐𝑜𝑛𝑡𝑟𝑜𝑙𝑙𝑒𝑑 𝑖𝑛𝑝𝑢𝑡 𝑡ℎ𝑎𝑡 𝑙𝑒𝑎𝑑 𝑡𝑜 𝑝𝑎𝑡ℎ 𝑡𝑟𝑎𝑣𝑒𝑟𝑠𝑎𝑙 𝑖𝑠𝑠𝑢𝑒𝑠""

- ""𝑆𝑒𝑎𝑟𝑐ℎ 𝑎𝑙𝑙 𝐽𝑎𝑣𝑎 𝐶𝑙𝑎𝑠𝑠𝑒𝑠 𝑡ℎ𝑎𝑡 ℎ𝑎𝑛𝑑𝑙𝑒 𝑢𝑠𝑒𝑟 𝑖𝑛𝑝𝑢𝑡 𝑡ℎ𝑎𝑡 𝑟𝑒𝑎𝑐ℎ 𝐽𝑁𝐼 𝑛𝑎𝑡𝑖𝑣𝑒 𝑐𝑎𝑙𝑙𝑠 𝑤𝑖𝑡ℎ 𝑢𝑠𝑒𝑟 𝑐𝑜𝑛𝑡𝑟𝑜𝑙𝑙𝑒𝑑 𝑖𝑛𝑝𝑢𝑡 𝑎𝑛𝑑 𝑓𝑖𝑛𝑑 𝑒𝑥𝑝𝑙𝑜𝑖𝑡𝑎𝑏𝑙𝑒 𝑣𝑢𝑙𝑛𝑒𝑟𝑎𝑏𝑖𝑙𝑖𝑡𝑖𝑒𝑠""

- ""𝐶𝑟𝑒𝑎𝑡𝑒 𝑎 𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛 𝑐𝑎𝑙𝑙 𝑔𝑟𝑎𝑝ℎ 𝑠ℎ𝑜𝑤𝑖𝑛𝑔 𝑡ℎ𝑒 𝑣𝑢𝑙𝑛𝑒𝑟𝑎𝑏𝑖𝑙𝑖𝑡𝑖𝑒𝑠""

Whether you're building a smarter reverse engineering assistant or just want more structured control over Jadx outputs, jadx-mcp-plugin is your gateway to the future of AI-augmented reverse engineering.",MINIMAL,0.79,1.0,7.0,-2.1,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,No,5251,17,11,5.0,error_handling; license,No,No,,http://localhost:8085
block,vscode-mcp,50,6973,"The VS Code MCP Server enables AI assistants to interact directly with VS Code through a bidirectional communication channel. It provides tools for file diffing with user approval, opening files and projects, executing shell commands in VS Code's terminal, and retrieving information about active editor tabs. The implementation consists of two main components: a server that handles MCP protocol communication and a VS Code extension that provides native integration features. This allows AI agents to perform code modifications, navigate projects, and execute commands without leaving the conversation interface, making it particularly valuable for collaborative coding sessions and AI-assisted development workflows.",MINIMAL,1.25,1.4,4.9,-1.47,Yes,Yes,No,No,No,No,Yes,Yes,Yes,Yes,2015,14,3,5.0,usage; api_reference; error_handling,No,No,,
cyanheads,git-mcp-server,50,0,"This Git MCP server provides AI assistants with capabilities to interact with Git repositories. Developed as an open-source project, it integrates with the simple-git library to enable core Git operations like cloning, committing, and managing branches. The server exposes a standardized interface for Git interactions, abstracting the complexities of version control operations. By leveraging TypeScript and following modern JavaScript practices, it offers a robust and type-safe implementation. This server is particularly useful for developers and DevOps teams looking to incorporate AI-driven Git operations into their workflows, such as automated code reviews, commit analysis, or intelligent branching strategies.",MINIMAL,0.77,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,18232,35,9,5.0,,No,No,,
daniel-lxs,mcp-perplexity,50,33107,"This MCP server, developed by Daniel Riccio, provides integration with the Perplexity API for advanced language understanding and generation. Built with Python and leveraging the MCP framework, it offers two main tools: ask_perplexity for expert programming assistance and chat_perplexity for ongoing conversations. The implementation focuses on maintaining chat history, supporting different Perplexity models, and providing streaming responses with progress reporting. It's particularly useful for developers and teams who want to incorporate Perplexity's language capabilities into their workflows, enabling use cases such as code debugging, technical explanations, and persistent AI-assisted conversations without directly managing API calls to Perplexity.",MINIMAL,1.33,1.6,7.7,-2.31,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,7299,23,5,5.0,,No,Yes,,
ramxx,mcp-tavily,50,31088,"This MCP server, developed by RamXX, provides AI-powered web search capabilities using Tavily's search API. It enables AI assistants like Claude to perform web searches, get direct answers to questions, and search recent news articles with relevant content extraction. The server exposes three main tools: comprehensive web search, answer generation with supporting evidence, and news article search. By integrating Tavily's AI-enhanced search functionality, this implementation facilitates more informed and up-to-date interactions. It is particularly useful for research tasks, fact-checking, generating reports, and staying current on specific topics through natural language queries to an AI assistant.",MINIMAL,1.33,1.6,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,10489,26,22,3.5,,No,Yes,,
shenghaiwang,xcodebuild,50,6159,"This MCP server implementation provides tools for building and testing iOS Xcode projects. Developed by Tim Wang, it offers capabilities to build iOS Xcode workspaces/projects and run tests, sending errors back to the LLM. The server is designed for seamless integration with Visual Studio Code extensions like Cline or Roo Code, enabling efficient iOS development workflows and automated error handling in AI-assisted coding environments.",MINIMAL,1.23,1.4,5.6,-1.68,Yes,Yes,Yes,No,No,No,Yes,Yes,Yes,Yes,1834,8,4,5.0,api_reference; error_handling; project_info,No,No,,
henryhawke,mcp-titan,49,0,"This MCP server, developed by Henry Hawke, provides enhanced Titan Memory capabilities for AI agents. Built with TypeScript and leveraging TensorFlow.js, it offers improved context retention and retrieval through neural network-based memory encoding. The implementation focuses on optimizing long-term information storage and recall for conversational AI, enabling more coherent and contextually-aware interactions. It's particularly useful for applications requiring persistent memory across multiple conversations or complex, multi-step tasks where traditional context windows fall short.",MINIMAL,0.78,1.0,7.4,-2.22,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,5160,24,2,5.0,,No,No,,
fdrechsler,mcp-server-idapro,49,0,"IDA Pro MCP server enables AI assistants to interact with IDA Pro for reverse engineering and binary analysis tasks. Created by Florian Drechsler, it provides a secure bridge between AI and IDA Pro through a remote control plugin that exposes key functionality like script execution, string/function analysis, and disassembly via HTTP endpoints. The implementation features robust error handling, automatic dialog suppression, and timeouts to ensure stable operation when automating IDA Pro tasks, making it valuable for security researchers and reverse engineers who want to leverage AI assistance while analyzing binaries.",MINIMAL,0.77,1.0,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,7796,29,16,5.0,error_handling,No,No,,http://{host; http://{self.host; http://{DEFAULT_HOST
joenorton,comfyui-mcp-server,49,0,"This MCP server implementation provides a bridge between ComfyUI and MCP clients for image generation tasks. It uses WebSockets for communication, allowing clients to send image generation requests with customizable parameters like prompt, width, and height. The server processes these requests through ComfyUI and returns the generated image URL. It's designed for easy integration into applications requiring on-demand AI image generation capabilities.",MINIMAL,0.81,1.0,6.3,-1.89,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,2781,9,3,3.5,error_handling,No,No,,http://localhost:8188
darkroaster,pubmearch,49,0,"PubMed Analysis MCP Server enables AI assistants to search, retrieve, and analyze scientific literature from PubMed. It leverages the Biopython library to access NCBI's Entrez API, providing structured article data including titles, authors, abstracts, and keywords. The server includes robust analysis capabilities for identifying research hotspots, tracking publication trends over time, and generating comprehensive statistical reports - making it valuable for researchers, academics, and healthcare professionals who need to quickly extract insights from medical literature.",MINIMAL,0.67,1.0,5.8,-1.74,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,No,3292,15,2,3.5,error_handling; license,No,Yes,,
quazaai,unitymcpintegration,49,0,"Unity MCP Integration enables AI assistants to understand and interact with Unity projects in real-time through a WebSocket-based communication system. It provides tools for retrieving scene hierarchies, project settings, and executing C# code directly in the Unity Editor. The implementation includes both a Unity Editor plugin with a debug window and a Node.js server component that implements the Model Context Protocol, making it particularly valuable for AI-assisted game development workflows.",MINIMAL,0.78,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,7883,20,4,3.5,,No,No,,
shannonlal,mcp-postman,49,1304,"This MCP Postman server, developed using TypeScript and leveraging the Newman library, provides a standardized interface for running Postman collections via the Model Context Protocol. It offers tools for executing API tests, validating responses, and generating reports based on Postman collection runs. The server integrates seamlessly with existing Postman workflows, abstracting the complexities of collection execution into a consistent MCP interface. By enabling AI systems to interact with and analyze API test results, this implementation facilitates use cases such as automated API testing, continuous integration pipelines, and API documentation generation. The server is designed for easy deployment and configuration, making it valuable for developers and QA teams building AI-powered tools that interact with API test data.",MINIMAL,0.5,1.2,6.7,-2.01,Yes,Yes,Yes,Yes,No,No,Yes,Yes,Yes,Yes,3460,23,7,5.0,error_handling,Yes,No,,http://localhost:${PORT; https://api.coindesk.com/v1/bpi/currentprice.json
spences10,mcp-memory-libsql,49,7878,"This LibSQL-based persistent memory tool for MCP, developed by Scott Spence, provides a database interface for AI models to store and retrieve information. Built with TypeScript and leveraging the LibSQL client, it offers functionality for managing entities and relations in a knowledge graph structure. The implementation focuses on providing a robust, SQL-based storage solution that can be used locally or with remote databases. It's particularly useful for maintaining context across conversations, building knowledge bases, or creating persistent memory systems for AI assistants, enabling long-term information retention without requiring complex database management.",MINIMAL,1.21,1.4,6.3,-1.89,Yes,No,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,3639,13,7,5.0,installation; error_handling,No,No,,
vectorize-io,vectorize-mcp-server,49,1737,"Vectorize MCP Server provides a bridge between Claude and Vectorize.io's vector database services, enabling advanced retrieval, text extraction, and deep research capabilities. Built with TypeScript, it exposes three primary tools: vector search for retrieving relevant documents from pipelines, text extraction for converting various document formats to Markdown, and deep research for generating comprehensive analyses from document collections. The implementation handles authentication through organization IDs and API tokens, making it particularly valuable for knowledge management, document analysis, and research workflows that require sophisticated vector search capabilities without leaving the conversation interface.",MINIMAL,1.0,1.2,6.5,-1.95,Yes,Yes,No,Yes,Yes,No,Yes,Yes,Yes,Yes,6029,13,9,3.5,usage; error_handling,No,No,,
its-dart,dart-mcp-server,48,7561,"Dart MCP Server provides AI assistants with direct access to Dart's project management platform, enabling task and document management through a comprehensive set of tools. Built by the Dart team, it allows for creating, retrieving, updating, and deleting tasks and documents, with support for filtering by various attributes like assignees, status, and priority. The server exposes both structured tools and resource templates that make it easy for AI assistants to interact with Dart's API, and includes prompts for common actions like creating tasks or summarizing work items. It's particularly valuable for teams using Dart who want to manage their projects directly through AI assistants like Claude without switching contexts.",MINIMAL,1.2,1.4,6.7,-2.01,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6457,18,2,5.0,usage,No,No,,
ibraheem4,linear-mcp,48,0,"This Linear MCP server provides a bridge between AI assistants and Linear's project management platform. Built with TypeScript and leveraging the Linear SDK, it offers tools for issue, team, and project management. The implementation focuses on simplifying interactions with Linear's API, making it accessible for AI models to create, list, and update issues, as well as retrieve team and project information. It's particularly useful for tasks like automated issue tracking, project status reporting, or integrating task management into AI-driven workflows, enabling assistants to interact with Linear without requiring deep knowledge of the underlying API complexities.",MINIMAL,0.72,1.0,7.5,-2.25,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,5519,21,16,5.0,usage,No,Yes,,
kujenga,zotero-mcp,48,7042,"This MCP server, developed by an unknown author, provides integration with the Zotero reference management system. Built with Python and leveraging the pyzotero library, it offers tools for searching Zotero libraries, retrieving item metadata, and accessing full-text content. The implementation focuses on providing a bridge between AI agents and scholarly research data, with features like formatted metadata output and attachment handling. It's particularly useful for researchers, students, and knowledge workers looking to incorporate their Zotero libraries into AI-assisted workflows, enabling use cases such as literature review automation, citation management, and content summarization without directly interacting with the Zotero API.",MINIMAL,1.1,1.4,6.6,-1.98,Yes,Yes,No,Yes,Yes,No,Yes,Yes,Yes,No,6365,9,7,5.0,usage; error_handling; license,No,Yes,,
martinbowling,thoughtful-claude,48,0,"This FastMCP server implementation integrates DeepSeek's R1 reasoning engine with Claude, enabling advanced reasoning capabilities in MCP-compatible applications. Developed using Python and the FastMCP framework, it leverages DeepSeek's API to process queries and return formatted reasoning outputs. The server focuses on enhancing Claude's thought process by incorporating DeepSeek's large-scale reinforcement learning-based reasoning. It's particularly useful for developers and researchers looking to augment AI assistants with external reasoning capabilities, enabling more complex problem-solving, analysis, and decision-making tasks without requiring direct interaction with DeepSeek's API.",MINIMAL,0.72,1.0,7.3,-2.19,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3797,16,2,5.0,,No,Yes,,
peng-shawn,mermaid-mcp-server,48,7885,"This MCP server implementation converts Mermaid diagrams to PNG images. Developed by Shawn Peng, it uses Puppeteer for high-quality headless browser rendering and supports multiple diagram themes and customizable background colors. The server exposes a single 'generate' tool, making it easy to integrate Mermaid diagram generation into AI-assisted workflows or applications that require visual representation of data structures and processes.",MINIMAL,1.17,1.4,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,7526,24,10,5.0,,No,No,,
spences10,mcp-svelte-docs,48,4422,"This MCP Svelte documentation server, developed by Scott Spence, provides an interface for AI assistants to access and query Svelte documentation. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for retrieving and parsing Svelte documentation content. The implementation focuses on efficient documentation access and formatting, making it easier for AI models to assist with Svelte-related queries and tasks. It's particularly useful for developers and AI assistants working with Svelte, enabling quick access to framework documentation, code examples, and best practices without requiring deep knowledge of Svelte's documentation structure or manual searching through web pages.",MINIMAL,0.97,1.2,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,11148,40,17,3.5,,No,No,,
matthewhand,mcp-openapi-proxy,47,80764,"This MCP server, developed by Matthew Hand, dynamically exposes REST APIs defined by OpenAPI specifications as MCP tools. Built with Python and leveraging libraries like FastAPI and Pydantic, it offers two operation modes: a low-level mode that registers all API endpoints as separate tools, and a FastMCP mode for simplified exposure of specific endpoints. The implementation focuses on flexibility, allowing users to filter endpoints and customize tool naming. By connecting AI models with any OpenAPI-described API, this server enables seamless integration of external services into MCP-based workflows. It's particularly useful for developers and organizations looking to quickly incorporate diverse APIs into their AI systems without extensive custom coding.",MINIMAL,1.57,1.8,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,24983,58,39,3.5,,Yes,Yes,,http://localhost:3000/; https://api.example.com/v1; https://api.apis.guru/v2; https://raw.githubusercontent.com/APIs-guru/openapi-directory/refs/heads/main/APIs/apis.guru/2.2.0/openapi.yaml; https://www.wolframalpha.com/api/v1/llm-api
mrjoshuak,godoc-mcp,47,0,"This MCP server, developed by mrjoshuak, provides efficient access to Go documentation for AI assistants. Built in Go, it offers tools for retrieving package documentation, exploring project structures, and accessing symbol-specific information. The server leverages Go's built-in documentation system, allowing AI models to understand Go projects without processing entire source files. Key features include support for local and remote packages, caching for performance, and flexible querying options. By bridging AI assistants with Go's documentation ecosystem, this implementation significantly reduces token usage and enhances AI capabilities for tasks like code comprehension, API exploration, and Go development assistance. It is particularly useful for scenarios requiring in-depth understanding of Go codebases, efficient project navigation, and context-aware coding support.",MINIMAL,0.78,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6452,17,2,5.0,,No,No,,
nexgene-research,nexonco-mcp,47,0,"Nexonco-MCP is an advanced server for accessing and analyzing clinical evidence data in precision oncology research. Developed by Nexgene Research, this Python implementation connects to the CIViC (Clinical Interpretation of Variants in Cancer) GraphQL API, providing flexible search capabilities across diseases, therapies, molecular profiles, and phenotypes. The server exposes a single tool that returns detailed reports containing summary statistics, top evidence entries, and literature citations, making it particularly valuable for researchers exploring relationships between genetic variants and cancer treatments. The implementation supports both Claude Desktop and NANDA server configurations, with Docker containerization available for easy deployment.",MINIMAL,0.83,1.0,5.6,-1.68,Yes,Yes,Yes,Yes,No,No,Yes,No,Yes,Yes,4318,12,0,3.5,error_handling,No,No,,https://civicdb.org/api/graphql
pab1it0,prometheus-mcp-server,47,0,"Prometheus MCP Server provides a bridge between AI assistants and Prometheus monitoring systems, enabling real-time metrics analysis through standardized interfaces. Built by pab1it0, it offers tools for executing PromQL queries, discovering available metrics, and retrieving metadata about monitoring targets. The implementation supports various authentication methods (basic auth and bearer tokens), is containerized with Docker for easy deployment, and includes comprehensive documentation for integration with Claude Desktop. This server is particularly valuable for DevOps workflows, system monitoring, and performance analysis use cases where AI assistants need direct access to operational metrics without switching context.",MINIMAL,0.77,1.0,7.7,-2.31,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6391,22,10,5.0,,No,No,,http://test:9090
ruan11223344,mcpdocserver,47,0,"McpDocServer is a documentation crawler service that fetches and serves technical documentation through the Model Context Protocol. Built with Node.js and Puppeteer, it crawls specified documentation sources and makes them available via an API, allowing AI assistants to access up-to-date technical information. The implementation includes a browser manager for handling concurrent crawling tasks, a task manager for scheduling and monitoring crawl operations, and a server component that exposes the crawled documentation through standardized MCP endpoints.",MINIMAL,0.81,1.0,6.4,-1.92,Yes,Yes,No,Yes,No,Yes,Yes,Yes,Yes,Yes,6221,19,13,3.5,usage,No,No,,
translated,lara-mcp,47,2768,"Lara MCP Server provides a bridge to the Lara Translation API, enabling AI assistants to translate text between languages with support for language detection and context-aware translations. Developed by Translated, this TypeScript implementation uses the Model Context Protocol SDK to expose a single translation tool that leverages the official Lara client library. The server authenticates with Lara API credentials through environment variables and is packaged for both npm distribution and Docker deployment. Ideal for multilingual applications where AI assistants need to perform accurate translations without switching context.",MINIMAL,0.97,1.2,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,15274,24,10,5.0,error_handling,No,No,,
yuniko-software,minecraft-mcp-server,47,0,"Minecraft MCP Server enables AI assistants to control a Minecraft bot through a comprehensive set of tools built on the Mineflayer library. The implementation provides capabilities for movement, block interaction, inventory management, entity detection, and in-game chat communication. Running as a command-line application with configurable server connection parameters, it establishes a bot that can navigate the Minecraft world, manipulate blocks, use items, and interact with the environment based on AI instructions. Particularly valuable for demonstrating AI-controlled gameplay, automated building, resource gathering, or exploration tasks without requiring direct player input.",MINIMAL,0.78,1.0,7.3,-2.19,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,4334,13,1,5.0,,No,No,,
hannesrudolph,sqlite-explorer-fastmcp-mcp-server,46,0,"This MCP server, developed by Hannes Rudolph, provides safe read-only access to SQLite databases for AI assistants. Built with FastMCP, it exposes tools for executing validated SELECT queries, listing tables, and describing table schemas. The implementation stands out with its focus on security, featuring query sanitization, parameter binding, and row limit enforcement. By connecting AI capabilities with local SQLite data sources, this server enables AI systems to explore and analyze structured data while maintaining strict safety controls. It is particularly useful for scenarios requiring AI-assisted data exploration, report generation, or insights extraction from SQLite databases, without risking data integrity or exposing sensitive information.",MINIMAL,0.79,1.0,7.1,-2.13,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,3854,17,4,5.0,,No,No,,
mubarakhalketbi,game-asset-mcp,46,0,"Game Asset Generator MCP connects AI assistants to Hugging Face Spaces for creating 2D and 3D game assets from text prompts. It leverages three AI models: Flux-2D-Game-Assets-LoRA for pixel art sprites, Flux-Game-Assets-LoRA-v2 for 3D-ready images, and InstantMesh for converting images to 3D models. Built with Node.js, the server exposes these capabilities through a clean interface that saves generated assets locally, making it particularly valuable for game developers who want to rapidly prototype visual assets without leaving their AI assistant workflow.",MINIMAL,0.77,1.0,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,12732,26,14,3.5,,No,No,,https://huggingface.co/spaces/${modelSpace; https://huggingface.co/settings/tokens`; https://huggingface.co/spaces/mubarak-alketbi/Hunyuan3D-2; https://huggingface.co/spaces/mubarak-alketbi/InstantMesh; https://huggingface.co/spaces/${alt
qpd-v,mcp-guide,46,929,"This MCP guide server, developed by qpd-v, serves as an interactive tutorial for understanding and implementing Model Context Protocol concepts. It provides tools for explaining MCP components, demonstrating examples, and listing available servers across various categories. The implementation features a structured approach to presenting information through tools, resources, and prompts, making it particularly useful for developers new to MCP who want to explore its capabilities. By offering hands-on guidance for creating tools and resources, this server bridges the gap between theoretical knowledge and practical implementation, enabling users to quickly grasp MCP fundamentals and start building their own integrations.",MINIMAL,0.81,1.0,6.4,-1.92,Yes,Yes,Yes,No,Yes,No,Yes,Yes,Yes,Yes,2596,22,4,5.0,api_reference; error_handling,No,No,,
burtthecoder,mcp-virustotal,45,2865,"This VirusTotal MCP server, developed by BurtTheCoder, enables AI assistants like Claude to leverage VirusTotal's threat intelligence capabilities. Built in JavaScript/TypeScript, it provides functionality for scanning URLs, analyzing file hashes, and retrieving IP address reports. The implementation stands out by offering relationship analysis tools and pagination support for large result sets. By connecting AI capabilities with VirusTotal's extensive threat data, this server allows AI systems to perform security analysis and threat detection programmatically. It is particularly useful for building AI-powered tools for malware research, phishing detection, and network security monitoring that require access to up-to-date threat intelligence.",MINIMAL,0.9,1.2,6.8,-2.04,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,9991,26,6,3.5,usage,No,Yes,,https://www.virustotal.com/api/v3
radareorg,radare2-mcp,45,0,"Radare2 MCP Server provides a direct bridge between AI assistants like Claude and the radare2 binary analysis framework. This implementation enables AI tools to perform sophisticated binary analysis tasks including opening files, running commands, analyzing code, and disassembling instructions through a simple stdin/stdout communication model. The server exposes radare2's capabilities as MCP resources and tools, making it particularly valuable for reverse engineering workflows, malware analysis, and debugging applications without leaving the AI assistant conversation interface.",MINIMAL,0.87,1.0,4.3,-1.29,Yes,Yes,No,No,No,No,Yes,Yes,Yes,No,2061,6,4,3.5,usage; api_reference; error_handling; license,No,No,,
zh19980811,easy-mcp-autocad,45,0,"Easy-MCP-AutoCad is a Python-based server for integrating AutoCAD with the Model Context Protocol, enabling programmatic interaction with AutoCAD through libraries like pyautocad and comtypes. The implementation supports database management via SQLAlchemy and provides a flexible framework for automating CAD-related tasks, with deployment capabilities through PyInstaller.",MINIMAL,0.88,1.0,4.1,-1.23,Yes,Yes,No,Yes,No,No,No,Yes,Yes,No,1718,13,7,3.5,usage; error_handling; license; project_info,No,No,,
gotoolkits,mcp-difyworkflow-server,45,0,"This Dify Workflow MCP server, developed by an unnamed creator, integrates with the Dify API to enable AI-driven workflow execution. Built with Go and leveraging the MCP-Go library, it provides tools for listing authorized workflows and executing specified workflows with custom inputs. The server implements environment-based configuration, allowing for flexible API key and workflow name management. By abstracting the complexities of Dify API interactions, it enables AI systems to easily trigger and manage complex workflows. This implementation is particularly valuable for applications requiring programmatic access to Dify workflows, facilitating use cases such as automated task execution, multi-step data processing, and AI-driven decision making across various domains.",MINIMAL,0.67,1.0,5.6,-1.68,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,No,2000,7,2,3.5,error_handling; license; project_info,No,Yes,,
joshuarileydev,app-store-connect-mcp-server,45,0,"This App Store Connect MCP server, developed by JoshuaRileyDev, enables AI assistants like Claude to interact with the App Store Connect API. Built in JavaScript/TypeScript, it provides capabilities for managing beta testers, beta groups, and apps in App Store Connect. The implementation stands out by offering a standardized interface to App Store Connect functionality, allowing AI systems to programmatically control app distribution and testing workflows. By connecting AI capabilities with iOS app management, this server enables automated beta testing, app submission processes, and analytics retrieval. It is particularly useful for building AI-powered tools for iOS app deployment, user feedback analysis, and streamlined App Store management.",MINIMAL,0.9,1.0,6.8,-2.04,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3437,21,5,3.5,usage,Yes,Yes,Found pattern: tracking,https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color; https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charLength; https://developer.mozilla.org/docs/Web/API/CSSSkewY; https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/lang; https://developer.mozilla.org/docs/Web/API/KeyboardEvent/location
lethain,library-mcp,45,0,"Library-MCP is a server implementation that enables AI assistants to interact with Markdown knowledge bases through a set of specialized tools. Created by Will Larson (lethain), it indexes folders of Markdown files with YAML frontmatter, allowing users to retrieve content by tags, text search, slugs/URLs, or date ranges. The server exposes navigation tools for exploring tags and content relationships, making it particularly valuable for users with large document collections that exceed context windows or span multiple knowledge bases. Designed as a hobby project for local use, it works well with Claude Desktop and similar MCP-compatible assistants.",MINIMAL,0.87,1.0,4.4,-1.32,Yes,Yes,No,Yes,No,No,No,No,Yes,Yes,3384,5,0,5.0,usage; error_handling,No,No,,
nighttrek,ollama-mcp,45,0,"This Ollama MCP server implementation provides a bridge between the Model Context Protocol and Ollama, a local large language model runner. Developed as an open-source project, it enables seamless interaction with Ollama-hosted models through a standardized MCP interface. The server supports key operations such as chat completions, with real-time streaming capabilities using Server-Sent Events (SSE). Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it offers robust error handling and configuration options. This implementation is particularly useful for developers and researchers looking to integrate locally-hosted AI models into their MCP-compatible applications, enabling low-latency access to powerful language models while maintaining data privacy and control.",MINIMAL,0.78,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3221,16,6,5.0,,No,No,,http://127.0.0.1:11434; http://localhost:${address.port
psycharch,minimax-mcp-tools,45,0,"Minimax MCP Tools provides integration with Minimax's AI services, offering image generation and text-to-speech capabilities through a Node.js implementation. The server exposes these features via the Model Context Protocol, allowing editors like Windsurf and Cursor to seamlessly access Minimax's image-01 model for creating images from text prompts and speech-01 models for converting text to natural-sounding speech with various voice options and customizations. It's particularly useful for creative workflows requiring AI-generated visual or audio content without leaving the editing environment.",MINIMAL,0.72,1.0,7.4,-2.22,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,5290,14,5,5.0,error_handling,No,Yes,,
spences10,mcp-omnisearch,45,1085,"Unified search and content processing MCP server that integrates multiple AI and web search providers like Tavily, Brave, Kagi, Perplexity, and Firecrawl. Provides a flexible tool registry with detailed provider descriptions, supporting search, AI response, content extraction, and content enhancement across various domains. Designed to enable AI assistants to dynamically select the most appropriate provider for complex information retrieval and processing tasks.",MINIMAL,0.93,1.2,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,13193,44,23,3.5,,No,Yes,,
davidshtian,mcp-on-aws-bedrock,44,0,"This AWS Bedrock MCP implementation, developed by Anthropic, provides a seamless integration between Anthropic's Model Context Protocol and Amazon's Bedrock service. Built with Python using boto3 and the MCP SDK, it offers a client that can interact with MCP-enabled tools through Bedrock's runtime service, specifically using the Nova Pro model. The implementation features tool format conversion for Bedrock compatibility, asynchronous communication handling, and structured logging. By bridging MCP and Bedrock, it enables AI systems to leverage both protocols' strengths, making it particularly useful for developers looking to combine Anthropic's MCP capabilities with AWS's scalable infrastructure for applications in natural language processing, task automation, and AI-assisted decision making.",MINIMAL,0.79,1.0,6.9,-2.07,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,2188,11,2,5.0,,No,No,,
hannesrudolph,imessage-query-fastmcp-mcp-server,44,0,"This MCP server, developed by Hannes Rudolph, enables AI assistants to query and analyze iMessage conversations on macOS. Built with FastMCP and the imessagedb library, it provides read-only access to the iMessage database with robust safety features like phone number validation and attachment handling. The server exposes a 'get_chat_transcript' tool that retrieves message history for specific contacts, including text, timestamps, and attachment info. By connecting AI capabilities with personal messaging data, this implementation allows AI systems to gain insights from conversation history while maintaining privacy and security. It is particularly useful for personal productivity use cases like summarizing past discussions, analyzing communication patterns, or extracting action items from chats.",MINIMAL,0.81,1.0,6.2,-1.86,Yes,Yes,No,Yes,No,Yes,Yes,Yes,Yes,No,3614,15,4,5.0,usage; license,No,No,,
mkummer225,google-sheets-mcp,44,0,"A Google Sheets MCP server that enables AI assistants to interact directly with spreadsheets through the Google Sheets API. Developed by Matt Kummer, this TypeScript implementation provides a comprehensive set of tools for creating, reading, and editing spreadsheets, including operations like creating new documents, managing sheets, manipulating rows and columns, and editing individual cells. The server handles OAuth authentication with Google's services and formats responses in a structured manner for AI consumption. It's particularly useful for scenarios requiring data analysis, report generation, or collaborative document management where AI assistants need direct access to spreadsheet functionality.",MINIMAL,0.3,1.0,6.5,-1.95,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,2388,6,2,5.0,error_handling,Yes,No,,
mzxrai,mcp-openai,44,2507,"This MCP server, developed by mzxrai, enables AI assistants like Claude to seamlessly interact with OpenAI's language models directly from the Claude Desktop app. It supports multiple models including GPT-4 and provides a simple message passing interface for tasks like text generation and completion. The server integrates with the OpenAI API and handles authentication via API key. By bridging Claude's capabilities with OpenAI's models, this implementation allows users to leverage multiple AI systems in a single conversation. It is particularly useful for comparing model outputs, accessing specialized capabilities, or supplementing Claude's knowledge in areas where OpenAI models may excel.",MINIMAL,0.92,1.2,7.4,-2.22,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,2289,16,5,5.0,,No,Yes,,
r-huijts,rijksmuseum-mcp,44,0,"This Rijksmuseum Amsterdam MCP server, developed by R.Huijts, provides a bridge to the Rijksmuseum API, enabling AI assistants to explore and interact with the museum's vast art collection. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for artwork search, detailed information retrieval, high-resolution image access, and user collection exploration. The server implements error handling and environment configuration, using dotenv for API key management. By abstracting the complexities of the Rijksmuseum API, it allows AI systems to easily access and analyze art historical data. This implementation is particularly valuable for applications in art research, education, and cultural exploration, facilitating use cases such as virtual museum tours, art analysis, and personalized collection curation.",MINIMAL,0.71,1.0,6.9,-2.07,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,5645,22,11,5.0,error_handling,No,Yes,,https://www.rijksmuseum.nl/api; https://www.rijksmuseum.nl/api/en
ruixingshi,deepseek-thinker-mcp,44,1443,"This MCP server, developed by Ruixing Shi, provides a standardized interface for interacting with the DeepSeek Thinker model. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for generating chain-of-thought reasoning. The implementation focuses on exposing DeepSeek's advanced reasoning capabilities through a consistent MCP interface, enabling AI models to perform complex problem-solving and analytical tasks. By connecting AI assistants with DeepSeek's powerful cognitive abilities, this server facilitates sophisticated scenarios like multi-step reasoning, decision-making support, and in-depth analysis. It's particularly valuable for applications requiring advanced AI-driven problem-solving, such as research assistance, strategic planning, and complex data interpretation.",MINIMAL,0.91,1.2,6.9,-2.07,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,2781,19,6,3.5,,No,Yes,,
square,square-mcp-server,44,0,"Square MCP Server provides a bridge between AI assistants and Square's complete API ecosystem, enabling comprehensive e-commerce and payment processing capabilities. Built by Block, Inc., it offers tools for managing payments, orders, inventory, customers, and more through a standardized interface that handles authentication, request formatting, and response parsing. The server supports both sandbox and production environments, implements write protection options, and is designed for integration with Claude Desktop and Goose. It's particularly valuable for developers who need to integrate Square's payment and business management capabilities into conversational AI applications.",MINIMAL,0.77,1.0,7.7,-2.31,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,5879,20,7,5.0,,Yes,Yes,,
winor30,mcp-server-datadog,44,4570,"This MCP server implementation provides integration with Datadog's API, enabling AI assistants to manage and retrieve incident information. Developed by winor30, it offers tools for listing and retrieving Datadog incidents, with plans for future expansion to cover more Datadog resources. Built using TypeScript and leveraging the Datadog API client, the server focuses on incident management capabilities. It is particularly useful for AI applications that need to monitor and respond to system incidents or integrate Datadog's observability data into their workflows.",MINIMAL,0.93,1.2,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,11801,12,7,3.5,,No,Yes,,https://docs.datadoghq.com/api/latest/hosts/#unmute-a-host; https://docs.datadoghq.com/api/latest/logs/#search-logs; https://docs.datadoghq.com/ja/api/latest/dashboards/#get-a-dashboard; https://docs.datadoghq.com/api/latest/downtimes/#cancel-a-downtime; https://docs.datadoghq.com/api/latest/hosts/#get-all-hosts
xeroapi,xero-mcp-server,44,3041,"Xero MCP Server provides a bridge to the Xero accounting API, enabling AI assistants to interact with financial data and perform accounting operations. Built with TypeScript, it supports tools for managing contacts, invoices, quotes, and credit notes through OAuth2 custom connections. Particularly useful for businesses seeking to automate financial workflows and integrate accounting data directly into conversational AI interactions.",MINIMAL,0.98,1.2,7.3,-2.19,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,7009,22,5,3.5,error_handling,Yes,Yes,,https://identity.xero.com/connect/token; https://api.xero.com/connections
chanmeng666,server-google-news,43,0,"This Google News MCP server, developed by Chan Meng, provides a streamlined interface for accessing Google News search results via the SerpAPI. Built with TypeScript and leveraging the MCP SDK, it offers tools to query and retrieve up-to-date news articles, headlines, and related information. By abstracting the complexities of SerpAPI interactions into a standardized MCP interface, it enables AI systems to easily incorporate current news data into their workflows. This implementation is particularly useful for applications involving news aggregation, trend analysis, and information retrieval, facilitating use cases such as personalized news feeds, media monitoring, and real-time event tracking.",MINIMAL,0.72,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6901,27,8,3.5,,No,Yes,,https://serpapi.com/search
dmontgomery40,mcp-3d-printer-server,43,1380,"This MCP server implementation provides a bridge between AI assistants and various 3D printer management systems, including OctoPrint, Klipper, Duet, Repetier, and Bambu Labs printers. Developed by David Montgomery, it offers tools for printer control, file management, and advanced STL file manipulation. The server is designed for use cases requiring 3D printing integration, such as remote printer monitoring, automated print job management, and custom model modifications.",MINIMAL,0.93,1.2,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,30243,82,29,5.0,,Yes,Yes,Found pattern: tracking; Found pattern: collect.*data,https://example.com/some/path?page=1&#x26;format=json; https://測試; https://example.org/?a=b&#x26;a=c; http://example.com/; https://example.org/?abc=123
jurasofish,mcpunk,43,31732,"This MCP implementation, developed by Michael Jurasovic, provides a Python-based framework for building and interacting with MCP servers. It leverages libraries like FastMCP, GitPython, and SQLAlchemy to offer a robust foundation for creating MCP tools and resources. The implementation includes features for version control integration, database management, and asynchronous operations. It stands out by focusing on extensibility and developer-friendly abstractions, making it easier to create custom MCP servers and clients. This framework is particularly useful for developers looking to rapidly prototype and deploy MCP-compatible applications, especially those requiring integration with existing Python codebases or complex data processing workflows.",MINIMAL,1.37,1.6,7.7,-2.31,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,Yes,14984,15,4,5.0,,No,No,,
pinkpixel-dev,mem0-mcp,43,0,"The mem0 MCP server provides a memory capabilities layer for AI assistants, enabling them to store, retrieve, and utilize information across conversations. Built with FastAPI and the mem0ai library, it features an autonomous memory system that automatically extracts user information from conversations without requiring explicit commands, categorizes it appropriately, and injects relevant memories into future interactions. The implementation supports multiple LLM providers including OpenAI, Anthropic, Google, and Ollama, with configurable embedding models for semantic search. This server is particularly valuable for applications requiring persistent user context, personalized interactions, and long-term memory capabilities that enhance the natural flow of AI conversations.",MINIMAL,0.73,1.0,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,12620,21,14,5.0,,No,Yes,,
publikprinciple,obsidian-mcp-rest,43,0,"This MCP server implementation, developed by PublikPrinciple, provides a bridge between AI assistants and Obsidian vaults through a local REST API. Built with TypeScript and leveraging the Obsidian Local REST API plugin, it offers tools for reading, writing, and searching notes within Obsidian. The implementation focuses on secure, local access to Obsidian data, making it ideal for AI-assisted note-taking and knowledge management. It's particularly useful for developers and researchers looking to integrate Obsidian's powerful note-taking capabilities into AI workflows, enabling tasks like automated note analysis, content generation, and knowledge base querying while keeping sensitive data local and secure.",MINIMAL,0.78,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,3443,14,12,5.0,,No,No,,http://${config.host
tuncer-byte,memory-bank-mcp,43,0,"Memory Bank MCP is a structured documentation system that helps teams create, manage, and access project knowledge through interconnected Markdown documents. Developed by tuncer-byte, it generates and maintains six core document types (project brief, product context, system patterns, tech context, active context, and progress) that capture different aspects of project information from high-level goals to technical details. The server leverages the Gemini API for AI-assisted document generation and updates, provides advanced search capabilities across all documents, and supports customizable storage locations, making it particularly valuable for teams seeking to maintain consistent project documentation and knowledge management through AI assistants.",MINIMAL,0.72,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,5361,20,9,5.0,error_handling,No,Yes,,
george5562,jira-mcp-server,42,0,"This Jira MCP server, developed by an unnamed creator, integrates Jira project management capabilities with AI assistants. It leverages the Jira API to provide a streamlined interface for managing projects, issues, and workflows. The server abstracts Jira's complex API, offering operations for user management, issue creation and updating, project configuration, and automated workflows. By connecting AI systems with Jira's collaborative features, this implementation enables assistants to automate project management tasks, track progress, and maintain organized development processes. It is particularly useful for software development teams and project managers looking to enhance their Jira-based workflows with AI-driven insights and automation.",MINIMAL,0.77,1.0,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,5230,18,15,5.0,,Yes,Yes,,
heurist-network,heurist-mesh-mcp-server,42,0,"Heurist Mesh MCP Server connects Claude to the Heurist Mesh network of specialized Web3 and blockchain tools through the Model Context Protocol. This implementation provides access to various agents including CoinGecko for cryptocurrency data, DexScreener for trading pair information, GoPlus for token security analysis, and search capabilities through Exa and Firecrawl. Built by Heurist AI, the server supports both SSE and stdio transports, making it compatible with Claude in Cursor, Claude Desktop, and other MCP-compatible interfaces. Users can access multiple blockchain services with a single API key, making it ideal for cryptocurrency research, token security verification, and Web3 data analysis workflows.",MINIMAL,0.73,1.0,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,No,Yes,Yes,Yes,Yes,8867,24,8,5.0,error_handling,No,Yes,,https://sequencer-v2.heurist.xyz; https://mesh.heurist.ai/mesh_agents_metadata.json
mixelpixx,google-search-mcp-server,42,1064,"This Google Search MCP server, developed using TypeScript and Python, provides AI assistants with a standardized interface to perform web searches and analyze webpage content. It integrates with the Google Custom Search API for retrieving search results and utilizes libraries like Trafilatura and BeautifulSoup for content extraction and markdown conversion. The server offers tools for executing searches, analyzing individual webpages, and batch processing multiple URLs. It's particularly valuable for AI systems that require up-to-date web information, enabling use cases such as research assistance, content summarization, and data aggregation from multiple online sources.",MINIMAL,0.93,1.2,7.8,-2.34,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,7098,23,10,5.0,,No,Yes,,http://localhost:${port
jagan-shanmugam,open-streetmap-mcp,42,0,"The Windows Command Line MCP Server provides a robust, secure bridge between AI models and Windows system operations. It allows controlled execution of commands, project creation, and system information retrieval while maintaining strict security protocols.",MINIMAL,0.78,1.0,7.5,-2.25,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,6722,25,14,3.5,,No,No,,http://router.project-osrm.org/route/v1/{mode; https://tile.openstreetmap.org/{z; https://api.openstreetmap.org/api/0.6; https://tile.thunderforest.com/cycle/{z; https://tile.thunderforest.com/landscape/{z
pv-bhat,vibe-check-mcp-server,42,0,"The definitive Vibe Coder's sanity check Model Context Protocol (MCP) server: Prevent cascading errors in AI workflows by implementing strategic pattern interrupts. Uses tool call ""Vibe Check"" with LearnLM 1.5 Pro (Gemini API), fine-tuned for pedagogy and metacognition to enhance complex workflow strategy, and prevents tunnel vision errors.

- Prevent cascading errors in AI workflows by implementing strategic pattern interrupts.
- Uses tool call ""Vibe Check"" with LearnLM 1.5 Pro (Gemini API), fine-tuned for pedagogy and metacognition to enhance complex workflow strategy, and prevents tunnel vision errors.
- Implements ""Vibe Distill"" to encourage plan simplification, prevent over-engineering solutions, and minimize contextual drift in agents.
- Self-improving feedback loops: Agents can log mistakes into ""Vibe Learn"" to improve semantic recall and help the oversight AI target patterns over time.",MINIMAL,0.73,1.0,7.6,-2.28,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,9080,25,9,3.5,,No,Yes,,https://generativelanguage.googleapis.com/v1beta/models/${MODEL_ID
