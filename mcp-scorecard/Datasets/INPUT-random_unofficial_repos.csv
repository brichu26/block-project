server_name,server_url,owner,repo,github_stars,download_count,experimental_ai_generated_description,github_stars.1,forks,latest_commit_date,server_github_url
WatchBase,https://www.pulsemcp.com/servers/watchdealer-pavel-watchbase,watchdealer-pavel,watchbase-mcp-server,1.0,,"WatchBase MCP Server provides structured access to the WatchBase Data Feed API, enabling AI assistants to query comprehensive watch metadata including brands, collections, reference numbers, and technical details. Developed by watchdealer-pavel, this TypeScript implementation exposes six specialized tools that map directly to WatchBase API endpoints, handling authentication and error management behind the scenes. The server requires a WatchBase API key passed as an environment variable and returns standardized JSON responses, making it particularly valuable for watch enthusiasts, collectors, or retailers who need to access detailed horological information through AI assistants.",1,0,2025-04-13T19:53:31Z,https://github.com/watchdealer-pavel/watchbase-mcp-server
Feishu (Lark),https://www.pulsemcp.com/servers/cso1z-feishu,cso1z,feishu-mcp,32.0,3240.0,"Feishu-MCP provides a bridge between AI assistants and Feishu (also known as Lark), ByteDance's workplace collaboration platform. Built by cso1z, this TypeScript implementation enables models to interact with Feishu's API, allowing for document retrieval, messaging, and other collaborative features directly within AI conversations. The server can be run either as a CLI application or HTTP server, with configuration handled through environment variables. It's particularly valuable for teams already using Feishu who want to integrate AI assistants into their existing workflow without switching contexts.",32,5,2025-04-26T17:46:02Z,https://github.com/cso1z/feishu-mcp
Glide API,https://www.pulsemcp.com/servers/knmurphy-glide-api,knmurphy,glide-api-mcp-server,5.0,,"This Glide API MCP server, developed by an unnamed creator, provides a bridge between the Model Context Protocol and Glide's API (versions 1 and 2). Built with TypeScript and leveraging the MCP SDK and Axios, it offers tools for interacting with Glide apps, including retrieving app information, managing tables, and manipulating data rows. The server implements secure API key handling through environment variables and runtime configuration. By abstracting Glide API operations into a standardized MCP format, it enables AI systems to easily interact with and manage Glide applications. This implementation is particularly valuable for automating Glide app management and data operations, facilitating use cases such as dynamic data updates, automated reporting, and integration of Glide apps with other systems or workflows.",5,5,2024-12-26T19:05:21Z,https://github.com/knmurphy/glide-api-mcp-server
Rime Text-to-Speech,https://www.pulsemcp.com/servers/matthewdailey-rime-tts,matthewdailey,rime-mcp,4.0,853.0,"A text-to-speech server for the MCP ecosystem that integrates with Rime's API to convert text into spoken audio. This implementation streams audio content with optimized buffering to reduce latency between text generation and speech playback. It provides a 'speak' tool that can be configured through environment variables to control voice selection, speaking style, and playback behavior. Built with TypeScript and Node.js, it supports cross-platform audio playback through various media players and includes features for handling WebSocket connections and managing temporary audio files. Particularly useful for AI assistants that need to communicate verbally with users or for applications requiring audio narration of generated content.",4,1,2025-05-01T21:11:41Z,https://github.com/matthewdailey/rime-mcp
OSP Marketing Tools,https://www.pulsemcp.com/servers/x51xxx-osp-marketing-tools,x51xxx,osp-marketing-tools-mcp,1.0,,"OSP Marketing Tools MCP Server provides a TypeScript implementation of Open Strategy Partners' proven methodologies for technical marketing content creation and optimization. Developed by Taras Trishchuk, this server offers tools for product value mapping, meta information generation, content editing with semantic codes, technical writing guidance, and on-page SEO optimization. It supports both stdio and HTTP/SSE transport methods, making it compatible with Claude Desktop, Cursor, and web applications. The TypeScript implementation offers advantages over the original Python version including simplified installation, cross-platform compatibility, and better performance, making it ideal for marketing teams creating high-quality technical content without Python dependencies.",1,0,2025-04-03T14:43:26Z,https://github.com/x51xxx/osp-marketing-tools-mcp
Excalidraw,https://www.pulsemcp.com/servers/yctimlin-excalidraw,yctimlin,mcp_excalidraw,37.0,,"Excalidraw MCP Server provides a powerful API that enables LLMs to create, modify, and manipulate Excalidraw diagrams programmatically. Built with Node.js using the Model Context Protocol SDK, it exposes a comprehensive set of tools for element creation, modification, querying, and organization including grouping, alignment, and distribution functions. The server maintains an in-memory representation of Excalidraw elements and scene state, validates operations through Zod schemas, and supports integration with Claude Desktop and Cursor through configuration files. This implementation is particularly valuable for AI-assisted diagramming, flowchart creation, and visual collaboration where diagrams need to be generated or modified through conversation.",38,7,2025-03-17T05:18:27Z,https://github.com/yctimlin/mcp_excalidraw
NumPy,https://www.pulsemcp.com/servers/colesmcintosh-numpy,colesmcintosh,numpy-mcp,1.0,,"This MCP server implementation provides NumPy-based mathematical operations and statistical analysis tools. It offers functions for matrix multiplication, eigendecomposition, polynomial fitting, and basic statistical measures. Developed using FastMCP, it's designed for AI assistants requiring advanced numerical computations, data analysis, and linear algebra operations in Python environments.",1,1,2025-03-04T05:10:00Z,https://github.com/colesmcintosh/numpy-mcp
Neurolorap Code Collector,https://www.pulsemcp.com/servers/aindreyway-neurolorap-code-collector,aindreyway,mcp-server-neurolora-p,7.0,,"This MCP server for code collection and documentation, developed by Aindrey, streamlines the process of gathering code from files and directories into a single markdown document. Built with Python and leveraging the Model Context Protocol SDK, it offers features like customizable ignore patterns, syntax highlighting, and table of contents generation. The server implements robust file system synchronization and comprehensive error handling, providing a standardized interface for code documentation tasks. By abstracting the complexities of file traversal and markdown generation, it enables AI systems to easily create comprehensive code overviews. This implementation is particularly valuable for applications requiring programmatic code documentation, facilitating use cases such as project audits, codebase analysis, and automated documentation generation.",7,3,2024-12-26T08:18:21Z,https://github.com/aindreyway/mcp-server-neurolora-p
MemGPT,https://www.pulsemcp.com/servers/vic563-memgpt,vic563,memgpt-mcp-server,21.0,,"This TypeScript-based MCP server implements a memory system for LLMs, enabling conversation history management across multiple providers. Developed as an open-source project, it offers tools for chatting, retrieving and clearing memory, and switching between LLM providers and models. The implementation supports OpenAI, Anthropic, OpenRouter, and Ollama, with a focus on the latest Claude models. It uses SQLite for persistent storage and includes features like unlimited memory retrieval. This server is particularly useful for building AI assistants that require long-term memory, multi-provider flexibility, and seamless model switching, making it suitable for applications in customer support, content creation, and interactive AI experiences.",21,4,2025-01-03T21:04:14Z,https://github.com/vic563/memgpt-mcp-server
LLM Completions,https://www.pulsemcp.com/servers/pyroprompts-llm-completions-mcp,pyroprompts,any-chat-completions-mcp,106.0,,"This MCP server, developed by pyroprompts, enables AI assistants to interact with any OpenAI SDK-compatible chat completion API, including OpenAI, Perplexity, Groq, xAI, and PyroPrompts. It provides a single 'chat' tool that relays questions to the configured AI provider and returns responses. Built in TypeScript, the implementation offers a flexible way to integrate various AI models into Claude Desktop through a standardized MCP interface. By abstracting away provider-specific details, this server allows easy switching between different AI services without changing the core integration. It is particularly useful for users who want to leverage multiple AI providers within Claude, experiment with different models, or avoid vendor lock-in while maintaining a consistent interaction pattern.",107,17,2025-05-01T02:39:22Z,https://github.com/pyroprompts/any-chat-completions-mcp
LogSeq,https://www.pulsemcp.com/servers/dailydaniel-logseq,dailydaniel,logseq-mcp,17.0,3946.0,"This MCP server, developed by Daniel Zholkovsky, provides integration with the LogSeq API for knowledge management and note-taking. Built with Python and leveraging libraries like Pydantic and Requests, it offers tools for interacting with LogSeq data and functionality. The implementation focuses on providing a standardized interface for AI agents to access and manipulate LogSeq content programmatically. It's particularly useful for developers and knowledge workers looking to automate LogSeq workflows, enabling use cases such as AI-assisted note-taking, automated knowledge graph analysis, and integration of LogSeq data with other tools and systems.",17,4,2025-04-30T12:30:32Z,https://github.com/dailydaniel/logseq-mcp
Google Cloud Platform,https://www.pulsemcp.com/servers/henihaddad-gcp,henihaddad,gcp-mcp,16.0,1731.0,"GCP MCP Server provides a comprehensive interface for Claude to manage Google Cloud Platform resources through natural language commands. Built with Python, it integrates with numerous GCP APIs including Compute Engine, Storage, IAM, Networking, Kubernetes, and Databases. The implementation handles authentication automatically through browser-based OAuth flow and offers tools for resource creation, monitoring, and management across all major GCP services. When configured in Claude Desktop, it enables users to perform complex cloud operations like creating compute instances, managing storage buckets, checking billing information, and monitoring resources without leaving the conversation interface.",16,0,2025-03-31T08:48:34Z,https://github.com/henihaddad/gcp-mcp
ClickHouse,https://www.pulsemcp.com/servers/thomaub-clickhouse,thomaub,clickhouse_mcp_server,1.0,,"This ClickHouse MCP server, developed by Thomas, enables AI assistants to interact with ClickHouse databases through a standardized interface. Built with Python using libraries like FastMCP and ClickHouse drivers, it provides resources for listing databases and tables, retrieving schemas, and executing SELECT queries. The server abstracts the complexities of ClickHouse's native protocols, allowing AI systems to seamlessly incorporate powerful analytical database capabilities. It's particularly valuable for data analysis, business intelligence, and AI-driven insights on large datasets, facilitating use cases such as real-time analytics, log processing, and complex data exploration within ClickHouse environments.",1,1,2024-12-18T18:34:31Z,https://github.com/thomaub/clickhouse_mcp_server
Kubernetes,https://www.pulsemcp.com/servers/strowk-kubernetes,strowk,mcp-k8s-go,267.0,9972.0,"This Kubernetes MCP implementation, developed by strowk, provides a versatile interface for language models to interact with Kubernetes clusters. It enables AI agents to perform essential Kubernetes operations such as listing contexts, pods, and events, as well as retrieving pod logs across different namespaces and contexts. The implementation distinguishes itself by offering a dual-purpose design - functioning both as an MCP server and a library for building custom Kubernetes resource servers. By leveraging kubeconfig configurations, it ensures seamless integration with existing Kubernetes setups. This tool is particularly powerful for AI-driven Kubernetes management, debugging, and monitoring tasks, enabling more sophisticated AI assistants that can directly interact with and analyze Kubernetes environments. Its integration with Claude Desktop and straightforward installation process make it easily accessible for developers and DevOps professionals working on advanced AI projects involving Kubernetes automation and management.",269,33,2025-04-28T21:29:17Z,https://github.com/strowk/mcp-k8s-go
Rails Explorer,https://www.pulsemcp.com/servers/rails-explorer,maquina-app,rails-mcp-server,106.0,,"Rails MCP Server provides a Ruby implementation that allows LLMs to interact with Rails projects through a standardized protocol. It enables AI models to browse project files, view routes, inspect models, and retrieve database schema information across multiple Rails applications. The server follows the XDG Base Directory Specification for configuration, includes tools for project navigation and codebase exploration, and integrates seamlessly with Claude Desktop through either an automated setup script or manual configuration. Particularly valuable for developers seeking AI assistance with Rails application analysis, understanding, and exploration without leaving their conversation interface.",106,8,2025-05-02T20:07:35Z,https://github.com/maquina-app/rails-mcp-server
Oracle Database,https://www.pulsemcp.com/servers/hdcola-oracle,hdcola,mcp-server-oracle,9.0,,"A Model Context Protocol server that provides AI assistants with direct access to Oracle databases. It exposes three key tools: listing all tables, describing table structures (including columns, data types, and key relationships), and executing read-only SQL queries. The implementation uses Python's oracledb library to handle database connections asynchronously, with connection details securely managed through environment variables. This server enables AI assistants to explore database schemas and retrieve data without requiring direct database access credentials.",9,7,2025-04-30T14:02:49Z,https://github.com/hdcola/mcp-server-oracle
Serper Search,https://www.pulsemcp.com/servers/nighttrek-serper-search,nighttrek,serper-search-mcp,24.0,,"Serper Search MCP is a server implementation that provides AI assistants with powerful web search capabilities through the Serper API. It features two main tools: a standard Google search tool for quick information retrieval and a Deep Research tool that breaks complex queries into focused sub-queries, gathers information from multiple sources, and synthesizes findings into comprehensive responses with citations. Built with TypeScript and following domain-driven design principles, it includes configurable research depth levels, telemetry for quality improvement, and integration with OpenRouter for LLM-powered research orchestration. This implementation is particularly valuable for users who need thorough, well-cited research on complex topics without leaving their AI assistant interface.",24,12,2025-03-21T22:08:17Z,https://github.com/nighttrek/serper-search-mcp
AWS Security Inspector,https://www.pulsemcp.com/servers/groovybugify-aws-security,groovybugify,aws-security-mcp,32.0,,"AWS Security MCP is a server that enables AI assistants to inspect and analyze AWS infrastructure for security issues. Built with Python and boto3, it provides tools for querying security findings from GuardDuty, SecurityHub, and IAM Access Analyzer, examining EC2 instances, analyzing IAM roles and permissions, scanning S3 buckets, and inspecting CloudFront distributions. The implementation supports natural language queries about AWS resources, generates security recommendations, and creates network maps and blast radius analyses, making it valuable for security professionals who need to assess AWS environments without leaving their AI assistant interface.",32,5,2025-04-30T08:00:31Z,https://github.com/groovybugify/aws-security-mcp
Starknet,https://www.pulsemcp.com/servers/milancermak-starknet,milancermak,starknet-mcp,9.0,,"This Starknet MCP server provides a bridge to the Starknet blockchain, enabling AI assistants to interact with Starknet's JSON-RPC API. Developed using TypeScript and the Model Context Protocol SDK, it offers tools for querying blockchain state, retrieving transaction data, and executing contract calls. The implementation focuses on comprehensive coverage of Starknet's RPC methods, making it easier for AI models to perform complex blockchain operations without deep knowledge of Starknet's API intricacies. It's particularly useful for blockchain analytics, smart contract interactions, and automated Starknet-based workflows, enabling AI to efficiently query and analyze Starknet data.",9,1,2025-03-04T11:37:50Z,https://github.com/milancermak/starknet-mcp
Multi-LLM Cross-Check,https://www.pulsemcp.com/servers/lior-ps-multi-llm-cross-check,lior-ps,multi-llm-cross-check-mcp-server,5.0,,"Multi LLM Cross-Check MCP Server provides a unified interface for querying multiple LLM providers simultaneously, allowing users to compare responses side-by-side. Built with Python using FastMCP, this server integrates with Claude Desktop and supports OpenAI, Anthropic, Perplexity AI, and Google Gemini APIs through asynchronous parallel processing. The implementation handles API authentication, request formatting, and error management for each provider, making it particularly valuable for users who want to cross-reference AI responses for fact-checking, gathering diverse perspectives, or evaluating different models' capabilities on the same prompt.",5,0,2025-04-14T16:30:00Z,https://github.com/lior-ps/multi-llm-cross-check-mcp-server
Netskope,https://www.pulsemcp.com/servers/johnneerdael-netskope-private-access,johnneerdael,netskope-mcp,1.0,2088.0,"This Netskope MCP implementation, developed by John Neerdael, provides integration with the Netskope API for managing private access infrastructure. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for publisher lifecycle management, private app configuration, policy creation, and traffic diagnostics. The implementation focuses on simplifying Netskope operations through a standardized MCP interface, with features like caching and retry logic. It's particularly useful for network administrators and security teams needing to automate Netskope NPA tasks, enabling use cases such as infrastructure validation, policy enforcement, and access control management without directly dealing with the complexities of the Netskope API.",1,2,2025-02-21T11:38:32Z,https://github.com/johnneerdael/netskope-mcp
Gmail,https://www.pulsemcp.com/servers/vinayak-mehta-gmail,vinayak-mehta,gmail-mcp,4.0,5161.0,"This MCP server implementation provides a bridge to Gmail, allowing AI assistants to search, retrieve, and interact with email content. Developed by Vinayak Mehta, it offers tools for authenticating with Google's API, executing email searches, and fetching full message content. The server is designed for use cases requiring natural language interactions with email data, such as summarizing inbox contents, finding specific messages, or analyzing communication patterns.",4,1,2025-03-03T18:36:24Z,https://github.com/vinayak-mehta/gmail-mcp
Nextflow Developer Tools,https://www.pulsemcp.com/servers/adamrtalbot-nextflow,adamrtalbot,mcp-nextflow,0.0,,"Nextflow Developer Tools MCP provides a suite of tools for Nextflow development and testing, built with FastMCP. It enables AI assistants to interact with a local Nextflow repository to perform tasks like building from source, running tests (integration, specific, and plugin tests), executing the development version, and managing the development directory. The implementation includes comprehensive logging, error handling, and environment variable configuration, making it particularly valuable for developers working on Nextflow pipelines who want to streamline their workflow without leaving their AI assistant interface.",0,0,2025-03-25T15:24:07Z,https://github.com/adamrtalbot/mcp-nextflow
X Twitter,https://www.pulsemcp.com/servers/rafaljanicki-x-twitter,rafaljanicki,x-twitter-mcp-server,3.0,3352.0,"X-Twitter MCP Server provides a bridge between AI assistants and Twitter's API, enabling comprehensive interaction with the platform. Built by Rafal Janicki using FastMCP and Tweepy, it offers tools for user management (profile retrieval, follower/following lists), tweet operations (posting, deleting, favoriting), timeline access, and search functionality. The server handles Twitter API authentication, implements rate limiting to prevent abuse, and supports both v1.1 and v2 API endpoints. It's particularly valuable for developers who need to integrate Twitter capabilities into conversational AI interfaces without managing the complexities of Twitter's API directly.",3,2,2025-04-29T17:05:53Z,https://github.com/rafaljanicki/x-twitter-mcp-server
Stack Exchange,https://www.pulsemcp.com/servers/jagreetdg-stack-exchange,jagreetdg,re-stack-mcp,1.0,,"Stack Exchange MCP Server provides a bridge between AI assistants and Stack Exchange sites like StackOverflow, enabling search and retrieval of questions, answers, and tags. The server implements caching to reduce API calls, formats content for LLM consumption, and handles rate limiting to stay within Stack Exchange API constraints. It exposes endpoints for searching questions, retrieving question details with answers, listing available Stack Exchange sites, and fetching popular tags, making it valuable for developers seeking programming help or technical information without leaving their AI assistant interface.",1,1,2025-04-02T00:17:57Z,https://github.com/jagreetdg/re-stack-mcp
Think,https://www.pulsemcp.com/servers/technavii-think,technavii,mcp_think,7.0,,"Think MCP provides deep analytical thinking capabilities through OpenAI's o3-mini model, enabling Claude to perform multi-step reasoning on complex problems. The implementation features robust error handling, rate limiting, and security measures to ensure reliable operation. It runs as a stdio transport server that integrates seamlessly with Claude Desktop, making it ideal for users who need to break down intricate concepts, explore competing hypotheses, or maintain multiple variables throughout extended reasoning chains without retrieving external information.",7,1,2025-03-28T11:38:53Z,https://github.com/technavii/mcp_think
Code Analysis,https://www.pulsemcp.com/servers/davidvc-code-analysis,davidvc,code-mcp,11.0,,"This Code Analysis MCP plugin, developed by an unspecified author, enables AI assistants to perform sophisticated code analysis using a Neo4j graph database. Built with Java and leveraging libraries like JavaParser and Neo4j, it offers tools for analyzing code structure, calculating quality metrics, extracting documentation, and answering high-level questions about codebases. The plugin implements advanced metrics calculation and natural language query processing, abstracting the complexities of code parsing and graph database operations. By providing a comprehensive view of code structure and quality, it allows AI systems to generate insights, identify potential issues, and assist in code review processes. This implementation is particularly valuable for software development teams, code reviewers, and architects, facilitating use cases such as architectural analysis, code quality assessment, and automated documentation generation.",11,2,2025-01-17T17:57:22Z,https://github.com/davidvc/code-mcp
Basilisp nREPL,https://www.pulsemcp.com/servers/cat-state-basilisp-nrepl,cat-state,nrepl-mcp,1.0,,"This MCP server provides a bridge between Anthropic's Model Control Protocol and Basilisp's nREPL server, allowing Claude Code to interact directly with a Basilisp REPL environment. It enables execution of Basilisp code (a Lisp dialect similar to Clojure that runs on the Python VM), retrieval of documentation, namespace exploration, and Python interoperability through a set of well-defined tools. The implementation features robust error handling, syntax highlighting for results, and comprehensive documentation to facilitate seamless interaction between AI assistants and Basilisp code execution environments.",1,2,2025-03-07T21:53:06Z,https://github.com/cat-state/nrepl-mcp
YNAB,https://www.pulsemcp.com/servers/calebl-ynab,calebl,ynab-mcp-server,1.0,,"YNAB MCP server provides a bridge between AI assistants and the You Need A Budget (YNAB) personal finance API. Built by Caleb LeNoir, it exposes tools for listing budgets, retrieving detailed budget information including accounts and categories, and creating transactions. This implementation is particularly valuable for users who want to manage their YNAB budgets and track finances directly through conversational AI without switching contexts.",1,3,2025-04-21T15:06:01Z,https://github.com/calebl/ynab-mcp-server
Hugging Face Spaces,https://www.pulsemcp.com/servers/hugging-face-spaces,xiyuefox,mcp-hfspace,0.0,,"MCP-HFSpace provides a bridge between Claude Desktop and Hugging Face Spaces, allowing AI assistants to interact with machine learning models hosted on Hugging Face. Built by Shaun Smith, this Node.js implementation automatically discovers and exposes Gradio endpoints as MCP tools, handling parameter conversion, file uploads, and progress notifications. It supports various output types including text, images, and audio files, with special handling for Claude Desktop compatibility. The server runs locally using stdio transport, making it ideal for workflows requiring access to specialized AI models without leaving the conversation interface.",0,0,2025-01-31T08:51:22Z,https://github.com/xiyuefox/mcp-hfspace
PDF to PNG,https://www.pulsemcp.com/servers/truaxki-pdf-to-png,truaxki,mcp-pdf2png,3.0,,"This PDF to PNG conversion tool, created by Kirk Truax, provides a simple MCP server for converting PDF documents to PNG images. It integrates with the pdf2image library to handle the actual conversion process. The implementation focuses on ease of use, with a single tool call that takes input and output paths as parameters. It's particularly useful for workflows that require visual representations of PDF content, such as document previews, image-based archiving, or preparing PDFs for web display. The server can be easily configured and run using the Claude Desktop application, making it accessible for users who need quick PDF-to-image conversion capabilities without complex setup.",3,2,2025-01-06T21:06:03Z,https://github.com/truaxki/mcp-pdf2png
Jina AI,https://www.pulsemcp.com/servers/joeblockchain-jina-ai,joebuildsstuff,mcp-jina-ai,20.0,6630.0,"This MCP server, developed by joeBlockchain, provides access to Jina AI's web services through Claude. It implements three main tools: web page reading and content extraction, web search, and fact checking/grounding. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, the server offers flexible output formats, image handling options, and structured responses. It's designed for developers and AI assistants who need to incorporate web content retrieval, search capabilities, and fact verification into their workflows, enabling natural language interaction with Jina AI's powerful APIs.",21,6,2025-01-29T05:24:38Z,https://github.com/joebuildsstuff/mcp-jina-ai
Samtools,https://www.pulsemcp.com/servers/sirusb-samtools,sirusb,samtools_mcp,0.0,,"A Python implementation of the Model Context Protocol (MCP) for Samtools, allowing AI assistants to interact with genomic data through SAM/BAM file operations.",0,0,2025-04-06T18:04:13Z,https://github.com/sirusb/samtools_mcp
Vonage Assist,https://www.pulsemcp.com/servers/micahman33-vonage-assist,micahman33,vonageaicodeassist,0.0,,"Vonage Assist is an MCP server that helps developers integrate Vonage API capabilities into their applications by providing AI-assisted access to Vonage documentation. Built with FastMCP, the server performs targeted searches within Vonage's developer documentation using Google Serper API, extracts relevant content from search results, and returns it to the user. The implementation includes a specialized tool called 'Vonage-Assist' that accepts search queries and library parameters, making it easy for AI assistants to find information about Vonage's communication APIs for features like SMS, voice, verification, and video.",0,1,2025-03-18T14:21:08Z,https://github.com/micahman33/vonageaicodeassist
k6 Load Testing,https://www.pulsemcp.com/servers/qainsights-k6-load-testing,qainsights,k6-mcp-server,4.0,,"k6-mcp-server is a Python-based MCP server that enables AI assistants to execute k6 load testing scripts through natural language commands. The implementation provides tools for running performance tests with configurable parameters like duration and virtual user count, handling script validation and execution via subprocess calls to the k6 binary. Developed by QAInsights, it bridges the gap between conversational AI and performance testing workflows, allowing users to initiate and analyze load tests without directly interacting with the command line interface.",4,2,2025-04-06T23:40:07Z,https://github.com/qainsights/k6-mcp-server
Obsidian Tools,https://www.pulsemcp.com/servers/jacksteamdev-obsidian-tools,jacksteamdev,obsidian-mcp-tools,121.0,,"This Obsidian MCP tools collection, developed by 2XR, provides a set of Model Context Protocol utilities tailored for integration with the Obsidian note-taking application. Built using TypeScript and leveraging modern JavaScript features, it offers a modular structure with workspaces for different tools. The implementation focuses on enhancing Obsidian's capabilities through AI-powered functionalities, potentially including features like intelligent note linking, content generation, or knowledge graph analysis. By bridging Obsidian's powerful note organization system with MCP's standardized AI communication, this toolkit enables users to augment their personal knowledge management workflows with advanced AI assistance. It is particularly suited for researchers, writers, and knowledge workers looking to leverage AI within their existing Obsidian setups for tasks such as information synthesis, idea generation, and content organization.",123,15,2025-03-23T23:05:59Z,https://github.com/jacksteamdev/obsidian-mcp-tools
Xueqiu (Chinese Stock Market),https://www.pulsemcp.com/servers/liqiongyu-xueqiu,liqiongyu,xueqiu_mcp,4.0,,"Xueqiu-MCP provides access to Chinese stock market data through the Xueqiu (雪球) financial platform API. Built with Python using the fastmcp framework, it leverages the pysnowball library to retrieve real-time stock quotes, company financials, market news, and investor sentiment data from one of China's largest investment communities. This server enables AI assistants to analyze Chinese equities, track market trends, and access financial information that would otherwise be difficult to obtain through Western financial data sources.",4,3,2025-04-15T13:20:21Z,https://github.com/liqiongyu/xueqiu_mcp
ClickHouse Database,https://www.pulsemcp.com/servers/dubin555-clickhouse,dubin555,clickhouse_mcp_server,6.0,,"ClickHouse MCP Server enables AI assistants to securely interact with ClickHouse databases through a controlled interface. Built by dubin555, it provides tools for listing tables, reading data, and executing SQL queries while implementing security checks to prevent dangerous operations like INSERT, UPDATE, or DELETE. The server connects to ClickHouse using environment variables or command-line arguments, exposes database schema as resources with detailed table and column descriptions, and returns query results in JSON format. This implementation is particularly valuable for data analysis workflows where users need to explore and query ClickHouse databases without risking data modification.",6,2,2025-03-20T11:17:10Z,https://github.com/dubin555/clickhouse_mcp_server
Replicate,https://www.pulsemcp.com/servers/deepfates-replicate,deepfates,mcp-replicate,54.0,,"This Replicate MCP server implementation provides a bridge between the Model Context Protocol and Replicate's AI model hosting platform. Developed as an open-source project, it enables seamless interaction with Replicate's diverse collection of machine learning models through a standardized MCP interface. The server supports key operations such as listing available models, creating and managing predictions, and accessing model metadata. Built with TypeScript and leveraging the official Replicate API, it offers robust error handling, caching mechanisms, and webhook support. This implementation is particularly useful for developers and researchers looking to integrate Replicate's hosted AI models into their MCP-compatible applications, enabling easy access to a wide range of pre-trained models for tasks like image generation, text processing, and more.",55,13,2025-03-06T18:35:51Z,https://github.com/deepfates/mcp-replicate
TapData Database Explorer,https://www.pulsemcp.com/servers/tapdata-database-explorer,tapdata,mcp-tap-server,0.0,,"MCP TapData Server provides a bridge between AI assistants and TapData database connections, enabling inspection of database schemas and execution of CRUD operations through natural language. Developed by Leon Li, this TypeScript implementation uses the Model Context Protocol SDK to expose database connections as resources and provides tools for listing connections, exploring table schemas, and querying data. The server authenticates with TapData using access tokens, translates requests into appropriate API calls, and returns formatted results, making it valuable for users who need to interact with various database systems without leaving their AI assistant interface.",0,1,2025-03-24T02:52:30Z,https://github.com/tapdata/mcp-tap-server
PostgreSQL,https://www.pulsemcp.com/servers/crystaldba-postgres,crystaldba,postgres-mcp,157.0,8010.0,"PostgreSQL MCP is a database tuning and analysis tool that provides real-time insights into PostgreSQL performance. It offers tools for analyzing query execution plans, identifying slow queries, monitoring database health metrics, and recommending index optimizations. The server implements features like hypothetical index testing, transaction health monitoring, and buffer cache analysis, making it valuable for database administrators and developers who need to optimize query performance, troubleshoot bottlenecks, or maintain healthy PostgreSQL databases. Built with Python 3.12 and packaged as a Docker container, it supports both PostgreSQL 15 and 16 with a focus on read-only safety through restricted access modes.",163,12,2025-04-28T15:42:35Z,https://github.com/crystaldba/postgres-mcp
Jira,https://www.pulsemcp.com/servers/parassolanki-jira,parassolanki,jira-mcp-server,2.0,1164.0,"Jira MCP Server provides a bridge between AI assistants and Jira API, enabling interaction with Jira issues and projects directly through the Model Context Protocol. Built by Paras Solanki, this Node.js implementation authenticates with Jira using personal access tokens and exposes endpoints for querying and manipulating Jira data. The server can be run locally or deployed as a Docker container, making it flexible for different integration needs. It's particularly useful for workflows requiring project management tasks like issue tracking, sprint planning, or generating reports without leaving the conversation interface.",2,0,2025-04-09T14:09:31Z,https://github.com/parassolanki/jira-mcp-server
Windows Command Line MCP Server,https://www.pulsemcp.com/servers/alxspiker-windows-command-line,alxspiker,windows-command-line-mcp-server,3.0,,"The Windows Command Line MCP Server provides a robust, secure bridge between AI models and Windows system operations. It allows controlled execution of commands, project creation, and system information retrieval while maintaining strict security protocols.",3,5,2025-04-25T19:19:47Z,https://github.com/alxspiker/windows-command-line-mcp-server
PocketBase,https://www.pulsemcp.com/servers/dynamicendpoints-pocketbase,dynamicendpoints,advanced-pocketbase-mcp-server,37.0,,"This PocketBase MCP server provides a robust interface for AI assistants to interact with PocketBase databases. Built using TypeScript and the PocketBase JavaScript SDK, it offers advanced capabilities for collection management, record operations, user authentication, and database administration. The server abstracts complex PocketBase operations, enabling seamless schema migrations, advanced querying with aggregations, and batch data import/export. It's particularly valuable for developers building AI-powered applications that require flexible, real-time database operations. This implementation excels in scenarios requiring dynamic schema management, sophisticated data querying, and scalable user authentication, making it ideal for rapidly evolving projects in fields like content management, user analytics, and collaborative data platforms.",37,8,2025-04-05T04:51:45Z,https://github.com/dynamicendpoints/advanced-pocketbase-mcp-server
Code Backup,https://www.pulsemcp.com/servers/hexitex-backup,hexitex,mcp-backup-server,4.0,,"MCP Backup Server provides a specialized backup and restoration system for AI agents and code editing tools, preserving both file content and agent context. Developed by Rob McGlade, it creates targeted, timestamped backups with metadata that captures the reasoning behind changes, making it ideal for creating safety checkpoints before risky edits. The server supports individual file and folder operations with pattern filtering, maintains version history, and includes emergency backup capabilities. Unlike Git, it focuses on quick, contextual snapshots rather than comprehensive version control, making it particularly valuable for AI agents making critical code changes in editors like Cursor and Windsurf.",4,2,2025-04-21T09:16:49Z,https://github.com/hexitex/mcp-backup-server
OSRS Wiki,https://www.pulsemcp.com/servers/jayarrowz-osrs-wiki,jayarrowz,mcp-osrs,3.0,549.0,"MCP OSRS Server provides tools for interacting with the Old School RuneScape Wiki API and game data files. Built with TypeScript by JayArrowz, it exposes 19 different tools including wiki search capabilities and specialized methods for querying various game definition files like items, NPCs, locations, and player variables. The server handles both API requests to the OSRS Wiki and local file searches with pagination support, making it valuable for players and developers who need to access structured game information without leaving their AI assistant interface.",3,3,2025-04-28T18:50:08Z,https://github.com/jayarrowz/mcp-osrs
ClickUp,https://www.pulsemcp.com/servers/nsxdavid-clickup,nsxdavid,clickup-mcp-server,7.0,1136.0,"ClickUp MCP Server provides a standardized interface for AI assistants to interact with the ClickUp API, enabling access to workspaces, spaces, folders, lists, tasks, docs, comments, and checklists. Developed by David Whatley, this Node.js implementation exposes both tools for performing actions (like creating tasks or updating checklists) and resources for retrieving data through URI templates. The server runs on stdio transport, making it compatible with Claude Desktop and VSCode Extension integrations, and is particularly valuable for users who need to manage ClickUp projects directly from their AI assistant conversations.",7,4,2025-04-14T22:49:39Z,https://github.com/nsxdavid/clickup-mcp-server
Azure DevOps,https://www.pulsemcp.com/servers/ryancardin15-azuredevops,ryancardin15,azuredevops-mcp,17.0,,"This Azure DevOps MCP server provides seamless integration with Azure DevOps services, enabling AI assistants to manage work items, code repositories, boards, sprints, and projects through a standardized interface. Built with TypeScript and the Model Context Protocol SDK, it exposes tools organized into four main categories: Work Item Tools for task management, Boards & Sprints Tools for agile workflow management, Project Tools for organizational structure, and Git Tools for source control operations. The implementation requires an Azure DevOps Personal Access Token for authentication and is designed to be easily extensible through a documented tool registration process.",17,10,2025-04-01T13:40:30Z,https://github.com/ryancardin15/azuredevops-mcp
cuBe (Blender),https://www.pulsemcp.com/servers/themapleseed-cube-blender,themapleseed,cube,1.0,,"BlenderMCP enables AI assistants like Cursor AI to control Blender programmatically through a socket connection, allowing for creation and manipulation of 3D objects. The implementation provides a two-way communication protocol that supports object creation, material control, scene inspection, code execution, viewport capture, and live preview streaming. It includes installation scripts for Windows, macOS, and Linux, with testing utilities to verify the connection. This tool is particularly valuable for workflows where AI needs to generate or modify 3D content in Blender without requiring manual intervention.",1,0,2025-03-19T12:21:13Z,https://github.com/themapleseed/cube
Memory Service,https://www.pulsemcp.com/servers/doobidoo-memory-service,doobidoo,mcp-memory-service,237.0,,"This MCP implementation, built with Python, provides a versatile framework for integrating with ChromaDB, a vector database for AI applications. It utilizes sentence transformers for efficient text embedding and tokenization, enabling advanced natural language processing capabilities. The implementation supports websocket connections, allowing for real-time data exchange and updates. By combining these technologies, it offers a robust solution for building AI-powered applications that require semantic search, document similarity comparisons, and content recommendation systems. This implementation is particularly well-suited for use cases such as intelligent document retrieval, content categorization, and personalized information delivery across various domains.",243,39,2025-04-28T20:17:34Z,https://github.com/doobidoo/mcp-memory-service
Tavily Search,https://www.pulsemcp.com/servers/it-beard-tavily,it-beard,tavily-server,6.0,,"This Tavily MCP server, developed by the Tavily MCP Server Contributors, integrates Tavily's AI-powered search capabilities into MCP-compatible workflows. Built with TypeScript and leveraging the @modelcontextprotocol/sdk, it provides a streamlined interface for performing web searches through Claude Desktop and other MCP clients. The implementation offers both basic and advanced search depths, result caching, and persistent storage of search history. It stands out by providing AI-generated summaries alongside traditional search results. This server is particularly useful for AI assistants and developers looking to incorporate up-to-date web information into their applications, enabling natural language-driven research and information retrieval.",6,0,2024-12-13T21:11:10Z,https://github.com/it-beard/tavily-server
Fused UDF,https://www.pulsemcp.com/servers/fused-udf,fusedio,fused-mcp,25.0,,"Fused MCP is a Python-based implementation that enables data scientists to easily connect Claude and other LLMs to executable Python code through User Defined Functions (UDFs). Built by Fused Labs, it provides a simple workflow for setting up MCP servers that can run either locally or remotely, with pre-built agents for common tasks like retrieving current time and fetching news. The repository includes step-by-step notebooks for both using existing functions and creating custom agents, making it particularly valuable for data scientists who want to extend their LLMs with Python capabilities without leaving their conversation interface.",25,8,2025-04-18T08:47:05Z,https://github.com/fusedio/fused-mcp
Figma Chunked,https://www.pulsemcp.com/servers/archimedes-figma-chunked,archimedescrypto,figma-mcp-chunked,1.0,,"Figma MCP Server with Chunking provides a memory-efficient interface to the Figma API, designed to handle large Figma files by breaking operations into manageable chunks with pagination support. It features configurable memory limits, node type filtering, progress tracking, and resume capabilities for interrupted operations. The implementation includes tools for retrieving file data, listing files, accessing version history, comments, components, styles, and specific nodes, making it particularly valuable for designers and developers who need to programmatically access and analyze complex Figma designs without memory constraints.",1,1,2025-04-30T03:17:18Z,https://github.com/archimedescrypto/figma-mcp-chunked
DeepSRT,https://www.pulsemcp.com/servers/deepsrt-youtube-summarizer,deepsrt,deepsrt-mcp,34.0,,"This MCP server provides YouTube video summarization functionality through integration with DeepSRT's API. It offers tools to generate summaries in narrative or bullet-point formats, with multi-language support. The server leverages content caching and CDN edge delivery for efficient summary retrieval, making it suitable for applications requiring quick access to video content summaries.",34,3,2025-03-02T04:40:59Z,https://github.com/deepsrt/deepsrt-mcp
Canvas Student,https://www.pulsemcp.com/servers/jon-vii-canvas-student,jon-vii,canvas-student-mcp,0.0,,"Canvas Student MCP provides a bridge to Canvas LMS, enabling students to interact with their course data through Claude. Built as a lightweight Python tool using the FastMCP framework, it exposes tools for retrieving courses, assignments, files, quizzes, and to-do items with rich, Claude-optimized formatting. Particularly valuable for students who want to quickly access and manage their academic information without navigating multiple interfaces.",0,0,2025-03-17T19:16:55Z,https://github.com/jon-vii/canvas-student-mcp/tree/HEAD/src/canvas-student
Apple Notes,https://www.pulsemcp.com/servers/tom-semple-apple-notes,tom-semple,mcp-apple-notes-fixed,6.0,,"This MCP server implementation provides integration with Apple Notes, enabling AI assistants to interact with and manage notes. It offers tools for listing, searching, creating, and indexing notes, utilizing both vector and full-text search capabilities. The server uses LanceDB for efficient data storage and retrieval, and incorporates on-device embedding for enhanced privacy. Developed for use cases requiring natural language interaction with personal notes, such as information retrieval, note organization, and content creation within the Apple Notes ecosystem.",7,0,2025-03-03T17:19:33Z,https://github.com/tom-semple/mcp-apple-notes-fixed
Etherscan Tools,https://www.pulsemcp.com/servers/crazyrabbitltc-etherscan-tools,crazyrabbitltc,mcp-etherscan-server,17.0,,"This MCP Etherscan server provides Ethereum blockchain data tools via Etherscan's API. Built with TypeScript and leveraging the ethers.js library, it offers features like balance checking, transaction history viewing, token transfer tracking, contract ABI fetching, gas price monitoring, and ENS name resolution. The server is designed to run on stdio, making it compatible with MCP clients like Claude Desktop. By abstracting Etherscan API interactions into standardized MCP tools, it enables AI systems to easily access and analyze Ethereum blockchain data. This implementation is particularly useful for applications requiring real-time Ethereum data, such as DeFi analytics, wallet monitoring, or smart contract development assistance.",17,11,2024-12-31T17:32:56Z,https://github.com/crazyrabbitltc/mcp-etherscan-server
Gemini AI,https://www.pulsemcp.com/servers/gemini,bsmi021,mcp-gemini-server,13.0,,"MCP-Gemini-Server provides a robust interface to Google's Gemini AI models through a collection of specialized tools. Built with TypeScript and the Model Context Protocol SDK, it enables AI assistants to leverage Gemini's capabilities including content generation, chat functionality, function calling, and file/cache management. The server implements both streaming and non-streaming content generation, supports stateful chat sessions with function execution, and offers comprehensive file and cache operations for optimizing performance. This implementation stands out by providing fine-grained control over generation parameters, safety settings, and tool configurations while handling error cases gracefully. It's particularly valuable for developers building AI applications that need direct access to Gemini's advanced features through a standardized protocol.",13,3,2025-04-03T21:34:36Z,https://github.com/bsmi021/mcp-gemini-server
Supabase,https://www.pulsemcp.com/servers/cappahccino-supabase,cappahccino,sb-mcp,1.0,2764.0,"Supabase MCP Server enables Claude and other LLMs to interact with Supabase databases and Edge Functions through a standardized API. It provides tools for performing CRUD operations on Postgres tables and invoking Edge Functions with custom payloads, all secured by API key authentication. The implementation includes a complete Express server with database query builders, comprehensive error handling, and configuration management, making it particularly valuable for applications that need AI assistants to access or modify data in Supabase projects without requiring custom integration code.",1,3,2025-03-21T20:13:22Z,https://github.com/cappahccino/sb-mcp
Filesystem,https://www.pulsemcp.com/servers/wayazi-filesystem,wayazi,mcp_file_system,3.0,,"A filesystem operations MCP server that provides secure access to files and directories through a standardized interface. Developed by Wayazi, it features robust path validation to ensure operations only occur within allowed directories specified at startup. The server implements essential file operations (read/write), directory management (create/list/delete), file movement, metadata retrieval, and search capabilities with pattern matching. Containerized with Docker for easy deployment, it's designed for AI assistants that need controlled access to filesystem resources while maintaining security boundaries.",3,0,2025-04-06T16:24:19Z,https://github.com/wayazi/mcp_file_system
Claude Prompts,https://www.pulsemcp.com/servers/minipuft-claude-prompts,minipuft,claude-prompts-mcp,7.0,,"Claude Custom Prompts MCP Server provides a flexible, template-based prompt system for Claude AI models. Built with TypeScript and Node.js, it allows users to define and manage custom prompts in markdown format organized by categories, with support for both simple prompts and multi-step prompt chains. The server includes a comprehensive API for prompt management, execution via STDIO or SSE transports, and features like conversation history tracking and error handling. Particularly valuable for users who need to standardize interactions with Claude across different use cases, it enables complex reasoning workflows through its chain execution capabilities while maintaining a modular, extensible architecture.",7,2,2025-03-07T07:18:20Z,https://github.com/minipuft/claude-prompts-mcp
Gopls,https://www.pulsemcp.com/servers/hloiseaufcms-gopls,hloiseaufcms,mcp-gopls,14.0,,"MCP-Gopls is a server implementation that bridges the Go Programming Language Server (gopls) with the Model Context Protocol, enabling AI assistants to perform advanced code analysis on Go projects. It provides tools for code navigation (go-to-definition, find references), code completion, hover documentation, diagnostic error checking, and test coverage analysis. The server manages communication with the gopls language server through JSON-RPC, handling initialization, reconnection, and message formatting to make Go's powerful static analysis capabilities accessible through a standardized MCP interface.",14,2,2025-04-09T14:11:40Z,https://github.com/hloiseaufcms/mcp-gopls
Git Repo Browser,https://www.pulsemcp.com/servers/razorback16-git-repo-browser,razorback16,mcp-git-repo-browser,2.0,,"This Node.js implementation of a Git repository browser leverages the Model Context Protocol (MCP) to provide efficient and deterministic access to remote Git repositories. Developed by Razorback16, it offers two main tools: one for retrieving a tree-like representation of a repository's directory structure, and another for reading the contents of specified files. The server utilizes native Node.js modules, fs-extra for enhanced file operations, and simple-git for Git repository interactions. It implements clean error handling, resource cleanup, and creates deterministic temporary directories based on repository URL hashes. This implementation is particularly useful for AI assistants or applications that need to analyze or interact with Git repositories programmatically, without requiring local clones.",2,1,2025-02-18T08:30:45Z,https://github.com/razorback16/mcp-git-repo-browser
Filesystem,https://www.pulsemcp.com/servers/quantgeekdev-filesystem,quantgeekdev,mcp-filesystem,4.0,,"Filesystem MCP server providing a robust set of file system interaction tools for AI agents. Implements core file operations like reading, writing, creating directories, moving files, and retrieving file metadata through a standardized TypeScript-based interface. Designed to enable precise, controlled file system manipulation with detailed error handling and comprehensive tool descriptions.",4,1,2025-03-17T00:44:52Z,https://github.com/quantgeekdev/mcp-filesystem
VS Code,https://www.pulsemcp.com/servers/juehang-vscode,juehang,vscode-mcp-server,32.0,,"VS Code MCP Server enables AI assistants to interact directly with VS Code workspaces through a standardized protocol. Developed by Qin Juehang, this extension exposes VS Code's filesystem, editing capabilities, symbol search, diagnostics, and terminal access as MCP tools. It runs locally on a configurable port, provides a status bar indicator for toggling the server, and implements security measures by binding only to localhost. The server is particularly valuable for developers who want AI models to help with coding tasks like exploring project structures, analyzing code, making targeted edits, and executing shell commands—all within their existing VS Code environment.",36,10,2025-04-28T19:23:53Z,https://github.com/juehang/vscode-mcp-server
JR East Train Delay,https://www.pulsemcp.com/servers/tinjyuu-jr-east-delay,tinjyuu,mcp-jr-east-delay,4.0,,"JR East Delay MCP Server provides real-time train delay information for Japan Railways East lines by scraping the official JR East website. Built with TypeScript and the Model Context Protocol SDK, it extracts delay status data using Cheerio for HTML parsing and exposes this information through a structured interface. The implementation is packaged as a command-line tool that can be easily integrated into AI assistant workflows, making it valuable for travelers, commuters, and transportation services that need up-to-date information about train operations in the Tokyo metropolitan area and surrounding regions.",4,0,2025-04-25T11:37:56Z,https://github.com/tinjyuu/mcp-jr-east-delay
Resource Hub,https://www.pulsemcp.com/servers/adamwattis-resource-hub,adamwattis,resource-hub-server,2.0,,"This Resource Hub MCP server, developed by Adam Wattis, acts as a proxy between local MCP environments and a centralized Resource Hub. It enables access to shared tools, configurations, and resources across different environments, streamlining MCP server management. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers features like centralized configuration, environment variable-based authentication, and compatibility with Claude Desktop. The server includes debugging tools through the MCP Inspector and supports easy deployment via npx. By centralizing resource management, it facilitates consistent tool access and configuration sharing, making it particularly valuable for teams and organizations requiring standardized MCP setups across multiple environments or projects.",2,1,2025-01-22T01:51:56Z,https://github.com/adamwattis/resource-hub-server
Google Search Console,https://www.pulsemcp.com/servers/aminforou-gsc,aminforou,mcp-gsc,60.0,,"The MCP-GSC server provides Google Search Console integration for AI assistants, enabling access to website search performance data, indexing status, and sitemap management. Created by SEO consultant Amin Foroutan, it offers tools for retrieving search analytics, inspecting URLs, comparing time periods, and managing sitemaps through the Google Search Console API. The implementation includes authentication via service account credentials and features detailed reporting capabilities for SEO analysis. This server is particularly valuable for digital marketers and SEO professionals who need to analyze website search performance, troubleshoot indexing issues, and manage Google Search Console operations through conversational interfaces.",60,5,2025-04-08T20:14:51Z,https://github.com/aminforou/mcp-gsc
Perplexity Advanced,https://www.pulsemcp.com/servers/code-yeongyu-perplexity-advanced,code-yeongyu,perplexity-advanced-mcp,21.0,3289.0,"Perplexity Advanced MCP provides a flexible interface for AI assistants to interact with both Perplexity and OpenRouter APIs, supporting simple queries and complex file attachments. Built by YeonGyu Kim, it offers a command-line interface that accepts API keys for either service through a simple configuration schema, making it easy to switch between providers. The implementation is containerized with Docker for easy deployment and uses the uv package manager for dependency management. It's particularly valuable for workflows requiring advanced search capabilities or when working with document-based queries that need file context.",21,2,2025-03-10T08:27:48Z,https://github.com/code-yeongyu/perplexity-advanced-mcp
Apache Iceberg,https://www.pulsemcp.com/servers/ryft-iceberg,ryft-io,iceberg-mcp,34.0,3412.0,"Iceberg MCP is a server implementation that provides AI assistants with direct access to Apache Iceberg tables stored in AWS. The server exposes tools for exploring Iceberg catalogs, retrieving table schemas, examining table properties, and analyzing partition information. Built on top of PyIceberg with AWS Glue integration, it authenticates using AWS credentials from environment variables or profiles. This implementation is particularly useful for data engineers and analysts who need to explore and understand Iceberg table metadata without writing complex queries or code.",34,2,2025-04-14T15:41:33Z,https://github.com/ryft-io/iceberg-mcp
Azure DevOps,https://www.pulsemcp.com/servers/azure-devops-work-items,munishm,azure-devops-mcp-server,0.0,,"Azure DevOps Work Items MCP Server provides a programmatic interface for interacting with Azure DevOps work items, enabling AI assistants to retrieve, create, update, and analyze work items through a standardized set of resources and tools. Built using the FastMCP framework, it supports operations like fetching recent work items, creating tasks, updating work item details, and generating analysis prompts, making it valuable for project management and workflow automation.",0,1,2025-03-07T08:52:36Z,https://github.com/munishm/azure-devops-mcp-server
Kubernetes,https://www.pulsemcp.com/servers/taichi-ho-k8s-interactive,taichiho,k8s-interactive-mcp,3.0,,"This MCP server enables running Kubernetes commands and interpreting their output through a natural language interface. It integrates with the Kubernetes client library to execute kubectl operations and provides flexible command piping. The implementation includes automatic kubectl installation checks and support for custom kubeconfig paths. Developed as an open-source project, it aims to simplify Kubernetes cluster management for both novice and experienced users. The server is particularly useful for DevOps teams looking to streamline their Kubernetes workflows or integrate AI-assisted cluster management into their existing tools.",3,3,2024-12-19T08:08:06Z,https://github.com/taichiho/k8s-interactive-mcp
Git Summary,https://www.pulsemcp.com/servers/dictybase-git-summary,cybersiddhu,dcr-mcp,0.0,,"A lightweight MCP server for generating git commit message summaries using OpenAI. Built with the mcp-go framework, this tool enables developers to analyze repository commit histories by filtering commits by date range and author, then generating human-readable markdown summaries that highlight key changes and their business impact. The implementation focuses on providing a streamlined, developer-friendly approach to understanding project evolution through commit message analysis.",0,1,2025-03-25T15:18:01Z,https://github.com/cybersiddhu/dcr-mcp
Firefly,https://www.pulsemcp.com/servers/gofireflyio-firefly,gofireflyio,firefly-mcp,9.0,2771.0,"Firefly MCP Server provides a bridge to Firefly.ai's cloud infrastructure management platform, enabling AI assistants to query cloud resources and generate infrastructure as code. The implementation offers two specialized tools: an inventory tool for querying cloud assets across providers with filtering capabilities, and a codify tool that generates Terraform import commands for specific resources. Built with TypeScript using the Model Context Protocol SDK, it authenticates with Firefly's API using access and secret keys, making it valuable for DevOps teams who want to discover, analyze, and codify their cloud infrastructure through natural language interactions.",10,2,2025-04-29T14:51:21Z,https://github.com/gofireflyio/firefly-mcp
ComfyUI,https://www.pulsemcp.com/servers/jonpojonpo-comfy-ui,jonpojonpo,comfy-ui-mcp-server,3.0,,"This ComfyUI MCP server integrates the ComfyUI stable diffusion interface with AI assistants. It provides a streamlined API for generating images using ComfyUI's node-based workflow, abstracting away the complexities of the underlying system. The server enables AI to construct image generation pipelines, adjust parameters, and retrieve results programmatically. By connecting AI systems with ComfyUI's powerful image generation capabilities, this implementation allows for dynamic creation of visual content based on textual descriptions or other inputs. It is particularly useful for applications requiring on-demand image generation, such as content creation tools, design assistants, or any AI system that needs to produce custom visuals.",3,3,2025-01-02T18:26:57Z,https://github.com/jonpojonpo/comfy-ui-mcp-server
1Panel Deployment,https://www.pulsemcp.com/servers/ruibaby-1panel,ruibaby,1panel-mcp,30.0,,"1Panel MCP Server enables automated website deployment to 1Panel servers through a standardized protocol interface. Built by ruibaby, it creates static websites if they don't exist, uploads files from build directories, and provides detailed deployment statistics. The implementation uses Node.js with Express to expose deployment capabilities through the MCP standard, making it particularly useful for developers looking to streamline their website publishing workflow directly from AI-assisted environments like Cursor IDE.",30,3,2025-04-25T03:59:44Z,https://github.com/ruibaby/1panel-mcp
Alibaba Cloud Lindorm,https://www.pulsemcp.com/servers/aliyun-lindorm,aliyun,alibabacloud-lindorm-mcp-server,3.0,,"Lindorm MCP Server provides a bridge between AI assistants and Alibaba Cloud's Lindorm multi-model NoSQL database. Built in Python using FastMCP, it exposes tools for vector search operations and SQL query execution against Lindorm's wide-table engine. The server enables retrieval from knowledge bases using both full-text and vector search capabilities, allows exploration of index structures, and supports SQL operations with specialized error handling for inefficient queries. It requires configuration of Lindorm instance credentials and deployed text-embedding models, making it valuable for applications that need to leverage Lindorm's vector search capabilities for retrieval augmented generation or perform SQL operations on Lindorm data stores.",3,1,2025-04-21T10:04:17Z,https://github.com/aliyun/alibabacloud-lindorm-mcp-server
Enhanced PostgreSQL,https://www.pulsemcp.com/servers/garethcott-enhanced-postgres,garethcott,enhanced-postgres-mcp-server,6.0,,"Enhanced PostgreSQL MCP Server provides both read and write access to PostgreSQL databases, extending the original read-only implementation by Anthropic. Developed by Gareth Cottrell, it enables LLMs to not only query database schemas and execute read operations but also modify data through insert, update, and delete operations, as well as manage database schema objects like tables, functions, triggers, and indexes. The server implements proper transaction handling with COMMIT/ROLLBACK mechanisms and uses parameterized queries for data modification operations to prevent SQL injection, making it suitable for AI assistants that need to interact with PostgreSQL databases for both data analysis and database management tasks.",6,4,2025-03-18T12:45:37Z,https://github.com/garethcott/enhanced-postgres-mcp-server
Mixpanel,https://www.pulsemcp.com/servers/dragonkhoi-mixpanel,dragonkhoi,mixpanel-mcp,8.0,,"This MCP server implementation provides a bridge to the Mixpanel API, allowing users to query events data, retention, and funnels. Developed by Khoi Le, it uses TypeScript and Node.js to interface with Mixpanel's analytics platform. The server is designed for use cases requiring on-demand access to Mixpanel data, such as analyzing user cohorts, tracking event trends, or generating custom analytics reports.",8,4,2025-03-14T16:52:11Z,https://github.com/dragonkhoi/mixpanel-mcp
Filesystem Access,https://www.pulsemcp.com/servers/parthshr370-filesystem-access,parthshr370,mcp-servers,7.0,,"The Filesystem MCP Server provides AI assistants with direct access to local filesystem operations through a set of specialized tools. Built using the FastMCP framework, it implements two core functions: reading file contents and listing directory entries, both with comprehensive error handling. The server can run in either stdio or Server-Sent Events (SSE) transport modes, making it flexible for different deployment scenarios. The implementation includes a test suite to verify functionality and an example client that demonstrates interactive usage with Claude models. This server is particularly valuable for workflows requiring AI assistants to access and analyze local files without needing separate file management tools.",7,3,2025-04-26T11:34:17Z,https://github.com/parthshr370/mcp-servers
GraphQL,https://www.pulsemcp.com/servers/ctkadvisors-graphql,ctkadvisors,graphql-mcp,4.0,,"GraphQL MCP Server provides a bridge between Claude and any GraphQL API by dynamically generating MCP tools from a GraphQL schema. Built by CTK Advisors, it features automatic schema introspection, query execution with parameter validation, and optional mutation support with security controls. The server can be configured with environment variables to specify API endpoints, authentication tokens, and query whitelisting, making it ideal for accessing structured data from GraphQL APIs directly within Claude conversations without requiring manual query construction.",4,1,2025-03-17T19:53:01Z,https://github.com/ctkadvisors/graphql-mcp
Grasshopper 3D,https://www.pulsemcp.com/servers/veoery-grasshopper-3d,veoery,gh_mcp_server,7.0,,"Grasshopper MCP Server provides a bridge between Claude and Rhino/Grasshopper 3D modeling software, enabling parametric design and geometric analysis capabilities. Built by veoery, it supports both direct RhinoInside integration on Windows and cross-platform functionality through rhino3dm, allowing users to create, manipulate, and analyze 3D models through natural language prompts. The server includes tools for basic modeling operations, Grasshopper component manipulation, Python code generation, and file analysis, making it valuable for architects, designers, and engineers who want to leverage AI assistance in their 3D modeling workflows.",7,2,2025-04-04T20:05:27Z,https://github.com/veoery/gh_mcp_server
National Weather Service,https://www.pulsemcp.com/servers/national-weather-service,jackkuo666,weather-mcp-server,0.0,,"Weather MCP Server provides real-time weather information by integrating with the National Weather Service (NWS) API. Built with Python using the FastMCP framework, it offers two main tools: retrieving weather alerts for any US state and obtaining detailed forecasts for specific locations using latitude and longitude coordinates. The server includes robust error handling and logging capabilities, making it reliable for applications that need up-to-date weather data. It can be run standalone or integrated with Cline, offering a straightforward way to incorporate weather information into AI assistant workflows for travel planning, event scheduling, or safety monitoring.",0,0,2025-03-17T13:44:05Z,https://github.com/jackkuo666/weather-mcp-server
Nvidia Brev,https://www.pulsemcp.com/servers/brevdev-brev,brevdev,brev-mcp,3.0,,"This Brev MCP server implementation, developed by tmonty12, provides a bridge between the Model Context Protocol and Brev's cloud development platform. It enables AI assistants to interact with Brev resources and operations through natural language commands. Built with Python 3.10+ and leveraging the Brev CLI's authentication, it offers functionality for managing Brev workspaces, deployments, and other cloud resources. The implementation stands out by focusing specifically on Brev's ecosystem and tooling. It is particularly useful for developers and DevOps teams looking to streamline their Brev workflows, automate cloud resource management, or integrate AI-assisted operations into their existing Brev-based projects.",3,3,2024-12-09T02:45:48Z,https://github.com/brevdev/brev-mcp
Apache AGE Graph,https://www.pulsemcp.com/servers/rioriost-age-graph,rioriost,homebrew-age-mcp-server,1.0,23684.0,"Apache AGE MCP Server provides a bridge between Claude and PostgreSQL databases with Apache AGE graph extension, enabling graph database operations through Cypher queries. Developed by Rio Fujita, it offers tools for executing read queries, write operations, and retrieving schema information from AGE-enabled PostgreSQL databases. The server implements safety measures including query validation, parameter sanitization, and automatic query formatting with result limits. It's particularly useful for AI assistants that need to analyze graph relationships, perform graph traversals, or visualize connected data structures stored in PostgreSQL without requiring users to write complex SQL queries.",1,1,2025-05-01T07:40:51Z,https://github.com/rioriost/homebrew-age-mcp-server
macOS Defaults,https://www.pulsemcp.com/servers/g0t4-macos-defaults,g0t4,mcp-server-macos-defaults,11.0,7101.0,"This MCP server, developed by Wes Higbee, enables AI assistants to interact with macOS system preferences through the 'defaults' command. It provides tools for listing domains, finding settings, reading preference values, and writing new settings. The server implements subprocess calls to execute system commands, offering a straightforward interface for AI systems to query and modify macOS configurations. By connecting AI capabilities with low-level system operations, this implementation empowers AI assistants to perform tasks like customizing user interfaces, adjusting system behaviors, or troubleshooting macOS issues. It is particularly useful for applications requiring automated macOS configuration, user preference management, or any scenario where an AI system needs to interact with and reason about macOS system settings.",11,5,2024-11-30T01:54:01Z,https://github.com/g0t4/mcp-server-macos-defaults
Database Connector,https://www.pulsemcp.com/servers/database-connector,georgi-terziyski,database_mcp_server,1.0,,"Database MCP Server provides a unified interface for connecting to and interacting with multiple database systems (SQLite, PostgreSQL, MySQL/MariaDB, and SQL Server) through a consistent set of tools. It features connection management, query execution, schema manipulation, and transaction support across all supported database types. The implementation uses a modular architecture with database-specific connectors that abstract away differences between database systems, making it ideal for applications that need to work with multiple database types or for AI assistants that require database access capabilities without dealing with database-specific syntax and connection details.",1,1,2025-03-18T13:31:27Z,https://github.com/georgi-terziyski/database_mcp_server
Railway,https://www.pulsemcp.com/servers/jason-tan-railway,jason-tan-swe,railway-mcp,27.0,,"This MCP server implementation provides a bridge to Railway.app, enabling AI assistants to interact with Railway's platform services. Developed by Jason Tan, it utilizes TypeScript and integrates with the Model Context Protocol SDK. The server is designed for use cases requiring Railway.app integration, such as managing deployments, monitoring application performance, or automating DevOps workflows within the Railway ecosystem.",27,7,2025-03-12T22:24:51Z,https://github.com/jason-tan-swe/railway-mcp
MySQL SSE,https://www.pulsemcp.com/servers/mangooer-mysql-sse,mangooer,mysql-mcp-server-sse,11.0,,"MySQL MCP Server provides a lightweight server implementation for MySQL database operations using Server-Sent Events (SSE) transport. It offers a streamlined approach to database interactions, with configuration managed through environment variables and MySQL connection handling abstracted into modular Python components.",11,1,2025-04-08T03:40:25Z,https://github.com/mangooer/mysql-mcp-server-sse
Coding File Management,https://www.pulsemcp.com/servers/aindreyway-neurolora,aindreyway,mcp-neurolora,14.0,4545.0,"This MCP server, developed by aindreyway, streamlines the process of collecting and documenting code from directories. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers a command-line interface for efficient code extraction and documentation generation. The server is designed for flexibility, supporting various file types and directory structures through customizable configuration options. It's particularly valuable for developers and teams working on large-scale projects, enabling use cases such as automated code documentation, project structure analysis, and codebase overview generation. The implementation's focus on TypeScript and modern JavaScript features ensures compatibility with current development practices while providing robust type checking and improved maintainability.",14,5,2024-12-21T10:40:29Z,https://github.com/aindreyway/mcp-neurolora
Qase,https://www.pulsemcp.com/servers/rikuson-qase,rikuson,mcp-qase,3.0,,"Qase MCP Server provides a TypeScript-based integration with the Qase test management platform, enabling AI assistants to interact with test-related entities like projects, cases, runs, results, plans, suites, and shared steps. Built with strong typing using Zod and leveraging the Qase API, it offers a comprehensive set of tools for programmatically managing and querying test management data through a standardized MCP interface.",3,3,2025-03-15T23:30:56Z,https://github.com/rikuson/mcp-qase
Discord,https://www.pulsemcp.com/servers/v-3-discord,v-3,discordmcp,68.0,,"This Discord MCP server, developed as an open-source project, enables AI assistants to interact directly with Discord channels through the Discord API. Built with TypeScript and leveraging the Model Context Protocol SDK, it provides tools for sending messages, reading recent channel history, and automatic server/channel discovery. The implementation focuses on maintaining user control and security while allowing AI models to engage in Discord conversations. It's particularly useful for enhancing AI-driven community management, automated support, or interactive chatbots within Discord servers, enabling seamless integration of AI capabilities without requiring deep knowledge of Discord's API intricacies.",69,22,2025-01-21T06:21:56Z,https://github.com/v-3/discordmcp
Terrakube,https://www.pulsemcp.com/servers/terrakube,azbuilder,mcp-server-terrakube,1.0,,"Terrakube MCP Server provides a bridge between AI assistants and Terrakube infrastructure management, enabling workspace management, variable handling, module operations, and organization administration through a standardized interface. Built with TypeScript and the MCP protocol, it features robust error handling, environment-based configuration, and a modular design that makes it easy to extend. The implementation is particularly valuable for DevOps teams who need to manage Terrakube resources and infrastructure as code directly through conversational AI without context switching.",1,1,2025-04-05T00:28:01Z,https://github.com/azbuilder/mcp-server-terrakube
Easy Model Deployer,https://www.pulsemcp.com/servers/yanbasic-emd,yanbasic,emd-mcp,1.0,,"EMD-MCP server provides a bridge between Claude and the Easy Model Deployer (EMD) tool, enabling AI assistants to deploy, manage, and interact with machine learning models on AWS services. Built with TypeScript and the Model Context Protocol SDK, it offers tools for listing supported models, deploying models with customizable parameters, checking deployment status, invoking deployed models, and destroying deployments. The server automatically installs EMD if needed and handles command execution through child processes, making it valuable for users who want to streamline ML model deployment workflows directly through conversational AI interfaces.",1,0,2025-03-21T15:36:32Z,https://github.com/yanbasic/emd-mcp
Cloud Foundry,https://www.pulsemcp.com/servers/cpage-pivotal-cloud-foundry,cpage-pivotal,cloud-foundry-mcp,3.0,,"This Cloud Foundry MCP server, developed using Spring AI MCP, provides an LLM interface for interacting with Cloud Foundry foundations. It offers tools for managing applications, services, and resources within a Cloud Foundry environment through natural language commands. The implementation leverages the Cloud Foundry Java Client to execute operations, making it easier for AI models to perform complex Cloud Foundry tasks without deep knowledge of CF CLI commands or API endpoints. It's particularly useful for DevOps teams and developers who want to streamline Cloud Foundry management, enabling efficient application deployment, scaling, and monitoring through AI-assisted workflows.",3,2,2025-02-28T21:05:25Z,https://github.com/cpage-pivotal/cloud-foundry-mcp
B12 Website Generator,https://www.pulsemcp.com/servers/b12-website-generator,b12io,website-generator-mcp-server,3.0,,"B12's website generator MCP server enables AI assistants to create business websites through a simple interface. Developed by b12io, this TypeScript implementation provides a single tool that accepts a business name and description, then generates a customized website accessible via a signup link. The server uses the Model Context Protocol to handle tool registration and execution, communicating through stdio transport for seamless integration with Claude Desktop. It's particularly useful for quickly generating professional website designs during conversations about business needs without requiring technical expertise.",3,1,2025-04-21T20:47:21Z,https://github.com/b12io/website-generator-mcp-server
CloudZero,https://www.pulsemcp.com/servers/cloudzero,burkestar,cloudzero-mcp,2.0,,"CloudZero MCP server enables direct interaction with cloud cost data through the CloudZero v2 API, allowing users to query billing information, dimensions, budgets, and insights directly from Claude Desktop. Developed by Dustin Burke, it implements several specialized tools for retrieving cost data within specified date ranges, analyzing billing dimensions, and accessing budget information. The server runs as a background process on the user's machine, making it ideal for financial teams needing to visualize and analyze cloud spending patterns, identify cost centers, and discover optimization opportunities without leaving their conversation interface.",2,3,2025-03-19T11:35:10Z,https://github.com/burkestar/cloudzero-mcp
Consulting Agents,https://www.pulsemcp.com/servers/matthewpdingle-consulting-agents,matthewpdingle,consulting-agents-mcp,8.0,,"The ConsultingAgents MCP Server enables Claude Code to consult with additional AI agents for enhanced code and problem analysis. It provides access to two expert coding consultants: Darren (powered by OpenAI's o3-mini model with high reasoning capabilities) and Sonny (powered by Anthropic's Claude 3.7 Sonnet with enhanced thinking). The server supports multiple transport options including stdio for direct Claude Code integration and HTTP/SSE for broader applications. Built with Python using the FastMCP framework, it requires API keys for both OpenAI and Anthropic services, making it ideal for developers seeking multi-model perspectives on coding problems.",9,1,2025-04-03T03:19:23Z,https://github.com/matthewpdingle/consulting-agents-mcp
PolarDB,https://www.pulsemcp.com/servers/aliyun-polardb,aliyun,alibabacloud-polardb-mcp-server,7.0,,"PolarDB MCP Server provides a bridge between AI assistants and Alibaba Cloud PolarDB databases, enabling direct interaction with MySQL and PostgreSQL database instances. The server supports two database types (MySQL and PostgreSQL) with similar capabilities including table listing, field information retrieval, data querying, and SQL execution with configurable safety controls for write operations. It implements both stdio and SSE transport modes, handles database connections securely, and includes specialized features like AI model management for PolarDB MySQL. This implementation is particularly valuable for developers who need to access and manipulate PolarDB database content through natural language interfaces without writing complex SQL queries manually.",7,0,2025-04-30T09:56:01Z,https://github.com/aliyun/alibabacloud-polardb-mcp-server
Singular Reporting,https://www.pulsemcp.com/servers/feedmob-singular-reporting,feed-mob,fm-mcp-servers,0.0,331.0,"Singular Reporting MCP Server provides a Node.js implementation for accessing Singular's marketing analytics data through Claude Desktop. Developed by FeedMob, this server enables users to create asynchronous reports with customizable date ranges and source filters, check report status, and download CSV results from Singular's API. The implementation includes three main tools for report creation, status checking, and downloading, making it useful for marketers who need to analyze campaign performance metrics like impressions, clicks, installs, and costs across different apps and sources.",0,0,2025-05-03T09:50:04Z,https://github.com/feed-mob/fm-mcp-servers/tree/HEAD/src/singular-reporting
Promptz,https://www.pulsemcp.com/servers/christian-bonzelet-promptz,cremich,promptz-mcp,0.0,337.0,"Provides a bridge to the promptz.dev platform, enabling AI assistants to directly access and use prompts without manual copy-pasting. Built by Christian Bonzelet, this TypeScript server implements two primary tools for listing and retrieving prompts, reducing context switching for developers and content creators by seamlessly integrating the promptz.dev prompt library into AI workflows.",0,4,2025-05-02T09:21:32Z,https://github.com/cremich/promptz-mcp
Stellar Blockchain,https://www.pulsemcp.com/servers/kalepail-stellar-blockchain,kalepail,stellar-mcp-server,4.0,,"A Stellar blockchain integration server for the MCP that enables AI assistants to interact with Soroban smart contracts. Built with TypeScript and deployed on Cloudflare Workers, this implementation provides tools for deploying fungible tokens, managing wallet addresses, and executing contract functions on the Stellar testnet. It features a durable object storage system to maintain user-specific contract addresses and credentials, OAuth-based authentication, and integration with PasskeyKit for transaction signing. The server dynamically generates MCP tools from contract specifications, allowing AI assistants to perform operations like token minting, transfers, and custom contract interactions without requiring blockchain expertise.",4,0,2025-04-08T12:51:31Z,https://github.com/kalepail/stellar-mcp-server
Secure Filesystem,https://www.pulsemcp.com/servers/lpsdevelopers-secure-filesystem,lpsdevelopers,lps-mcp,1.0,,"LPS-MCP is a secure filesystem server implementation that provides AI assistants with controlled access to local files and directories. It features robust path validation to prevent directory traversal attacks, comprehensive file operations (reading, listing, searching), and a unique Sequential Thinking tool that enables step-by-step problem solving with support for thought revision and branching. The server runs on stdio transport, making it compatible with Claude Desktop, and only allows access to explicitly specified directories passed as command-line arguments - making it particularly valuable for safely exposing local filesystem resources to AI assistants while maintaining security boundaries.",1,0,2025-03-21T07:46:28Z,https://github.com/lpsdevelopers/lps-mcp
Zoom,https://www.pulsemcp.com/servers/javaprogrammerlb-zoom,javaprogrammerlb,zoom-mcp-server,9.0,,"A Zoom MCP server that enables AI assistants to create and manage Zoom meetings. Developed by Bill Lau, this TypeScript implementation authenticates with the Zoom API using server-to-server OAuth and provides tools for creating meetings with customizable settings and listing scheduled meetings. The server requires Zoom account credentials (Account ID, Client ID, and Client Secret) and can be deployed as a standalone application or within a Docker container. Ideal for use cases where AI assistants need to schedule video conferences or manage meeting calendars on behalf of users.",9,1,2025-04-17T05:21:47Z,https://github.com/javaprogrammerlb/zoom-mcp-server
Ethereum RPC,https://www.pulsemcp.com/servers/0xkoda-ethereum-rpc,0xkoda,eth-mcp,5.0,,"This Ethereum RPC MCP server provides a bridge to interact with the Ethereum blockchain through standard JSON-RPC calls. Developed by Koda, it exposes three essential tools: eth_getCode for retrieving contract bytecode, eth_gasPrice for checking current gas prices, and eth_getBalance for querying account balances. The implementation uses axios for making HTTP requests to a public Ethereum RPC endpoint (llamarpc) and includes error handling with human-readable responses. Ideal for AI assistants that need to perform basic Ethereum blockchain queries without requiring complex wallet integration.",5,5,2025-04-01T03:34:38Z,https://github.com/0xkoda/eth-mcp
Hermes Search (Azure Cognitive Search),https://www.pulsemcp.com/servers/cognitive-stack-hermes-search,cognitive-stack,hermes-search-mcp,2.0,424.0,"Hermes Search MCP provides a bridge to Azure Cognitive Search, enabling AI assistants to search, index, and manage documents in Azure search indexes. Built with TypeScript and the FastMCP framework, it offers tools for executing search queries with filtering options, indexing or updating documents, and deleting indexes. The server supports both stdio and SSE transport protocols, making it suitable for integration with various AI platforms that need to access and manipulate structured data stored in Azure Cognitive Search.",2,1,2025-04-19T13:21:41Z,https://github.com/cognitive-stack/hermes-search-mcp
Eolink OpenAPI,https://www.pulsemcp.com/servers/scarqin-eolink-openapi,scarqin,mcp-apikit,0.0,,"MCP-APIKit is a server designed for Windsurf IDE integration that connects to Eolink OpenAPI to retrieve API specifications and expose them as MCP resources. It provides tools for API discovery, exploration, and testing within the development environment, allowing developers to search across projects, test endpoints with custom parameters, and access detailed API documentation. The implementation uses TypeScript and Express to create a server that can run with either HTTP/SSE or stdio transport, making it flexible for different integration scenarios while maintaining a standardized interface for API management through the Model Context Protocol.",0,1,2025-03-18T15:29:09Z,https://github.com/scarqin/mcp-apikit
Browser Use,https://www.pulsemcp.com/servers/ztobs-browser-use,ztobs,cline-browser-use-mcp,17.0,,"This MCP server, developed by an unknown author, provides browser automation capabilities for AI agents. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers tools for capturing screenshots, retrieving HTML content, executing JavaScript, and accessing console logs from web pages. The implementation focuses on flexibility and error handling, with features like custom interaction steps and Xvfb support for headless operation. It's particularly useful for AI assistants and applications that need to interact with web content, enabling use cases such as web scraping, automated testing, or content analysis without directly dealing with browser automation complexities.",17,2,2025-04-27T21:48:21Z,https://github.com/ztobs/cline-browser-use-mcp
Deep Web Research,https://www.pulsemcp.com/servers/qpd-v-deepwebresearch,qpd-v,mcp-deepwebresearch,59.0,,"This web research MCP server, developed by qpd-v, enables AI models to conduct deep web searches and content extraction. Built with TypeScript and leveraging Playwright for web automation, it provides tools for Google searches, parallel multi-query searches, webpage visits, and screenshot capture. The implementation stands out with its robust error handling, consent dialog management, and content cleaning capabilities. It's particularly useful for AI assistants or applications needing to perform comprehensive online research, enabling tasks like information gathering, content analysis, and visual data collection without requiring deep knowledge of web scraping techniques.",59,16,2025-03-05T22:02:15Z,https://github.com/qpd-v/mcp-deepwebresearch
Singapore LTA,https://www.pulsemcp.com/servers/arjunkmrm-singapore-lta,arjunkmrm,mcp-sg-lta,0.0,,"This MCP server, developed by Arjun Kumar, provides a standardized interface for interacting with Singapore's Land Transport Authority (LTA) DataMall API. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers real-time access to transportation information including bus arrivals, traffic conditions, and train service updates. The implementation focuses on exposing LTA's data through a consistent MCP interface, enabling AI models to perform complex transportation-related queries and analysis. By connecting AI assistants with LTA's extensive dataset, this server facilitates sophisticated urban mobility scenarios like route optimization, congestion prediction, and public transport planning. It's particularly valuable for applications and AI systems aimed at improving urban transportation efficiency and user experience in Singapore.",0,2,2025-02-12T17:17:39Z,https://github.com/arjunkmrm/mcp-sg-lta
Union,https://www.pulsemcp.com/servers/unionai-union,unionai-oss,union-mcp,3.0,,"Union MCP is a server that connects AI assistants to Union's tasks, workflows, and apps through the Model Context Protocol. Developed by Niels Bantilan, it currently provides basic tools like addition functions and dynamic greeting resources, with plans to expand functionality for accessing authenticated Union resources, listing task and workflow metadata, and eventually enabling AI-assisted authoring of Union code. The implementation is designed to integrate with Claude Desktop and other AI interfaces, making Union's distributed computing capabilities accessible as tools for AI assistants.",3,0,2025-04-11T14:59:45Z,https://github.com/unionai-oss/union-mcp
Everything Search,https://www.pulsemcp.com/servers/mamertofabian-everything-search,mamertofabian,mcp-everything-search,141.0,19714.0,"This MCP server, developed by Mamerto Fabian, enables AI assistants to perform fast file searches using the Everything SDK on Windows systems. It provides a tool for executing complex file queries with support for wildcards, boolean operators, and various search criteria like file size, dates, and attributes. The server abstracts the Everything SDK's functionality, offering a simplified interface for AI systems to locate files and retrieve metadata. By connecting AI capabilities with Everything's ultra-fast file indexing, this implementation empowers AI assistants to quickly find and analyze files across entire drives. It is particularly useful for applications requiring rapid file discovery, system analysis, or any scenario where an AI system needs to efficiently locate and reason about files on a Windows machine.",143,12,2025-01-07T23:13:29Z,https://github.com/mamertofabian/mcp-everything-search
Safe Local Python Executor,https://www.pulsemcp.com/servers/maxim-saplin-safe-local-python-executor,maxim-saplin,mcp_safe_local_python_executor,15.0,,"An MCP server (stdio transport) that wraps Hugging Face's LocalPythonExecutor (from the smolagents framework). It is a custom Python runtime that provides basic isolation/security when running Python code generated by LLMs. This package allows to expose the Python executor via MCP (Model Context Protocol) as a tool for LLM apps like Claude Desktop, Cursor or any other MCP compatible client. In case of Claude Desktop this tool is an easy way to add alternative to ChatGPT's Python Interpreter plugin.",15,2,2025-05-01T15:59:55Z,https://github.com/maxim-saplin/mcp_safe_local_python_executor
esa,https://www.pulsemcp.com/servers/kajirita2002-esa,kajirita2002,esa-mcp-server,7.0,606.0,"Provides a bridge between Claude AI and the esa API, enabling AI-driven document management through tools for searching, creating, updating and deleting posts and comments. Built by kajirita2002, this Node.js implementation exposes a full suite of esa's functionality including member management and post categorization, making it valuable for teams who want to leverage AI assistance for their esa-based documentation and knowledge management workflows.",7,1,2025-03-27T04:15:49Z,https://github.com/kajirita2002/esa-mcp-server
GitHub,https://www.pulsemcp.com/servers/anthropic-github,upstreetai,ia-mcp,2.0,,"GitHub MCP server that provides a comprehensive bridge to GitHub's API, enabling AI agents to perform a wide range of repository operations like creating repositories, managing issues and pull requests, searching code, and interacting with files. Built by Anthropic, this implementation focuses on providing a clean, type-safe interface to GitHub's functionality using TypeScript and Zod for robust validation, making it particularly useful for developers who want to automate GitHub workflows through conversational AI.",2,0,2025-03-17T03:09:30Z,https://github.com/upstreetai/ia-mcp
Huntress,https://www.pulsemcp.com/servers/dynamicendpoints-huntress,dynamicendpoints,huntress-mcp-server,1.0,,"This Huntress API MCP server, developed by the Huntress MCP Server Contributors, enables AI assistants to interact programmatically with Huntress endpoint protection services. It provides tools for account and organization management, agent monitoring, incident report access, and billing information retrieval. The server implements rate limiting and error handling to ensure reliable API interactions. By connecting AI capabilities with Huntress functionality, this implementation empowers assistants to manage cybersecurity operations, analyze threat data, and automate reporting tasks. It is particularly useful for applications requiring real-time security monitoring, incident response coordination, or any scenario where an AI system needs to access and reason about endpoint protection data from Huntress.",1,4,2025-03-28T04:38:16Z,https://github.com/dynamicendpoints/huntress-mcp-server
File Finder,https://www.pulsemcp.com/servers/stepancooleague-file-finder,stepancooleague,file-finder-mcp,0.0,,"File-Finder-MCP is a server that enables AI assistants to search for files in a filesystem based on path fragments. It provides a single tool, 'search-files', which accepts a query string and an optional base directory parameter to locate matching files and return their metadata including name, full path, size, and creation date. This implementation is particularly useful for users who need to quickly locate files on their system through natural language requests without having to remember exact paths or use complex search commands.",0,1,2025-02-28T07:11:41Z,https://github.com/stepancooleague/file-finder-mcp
WebResearch,https://www.pulsemcp.com/servers/jevy-webresearch,jevy,mcp-webresearch,0.0,,"MCP-WebResearch provides AI assistants with web browsing capabilities for conducting research through a Playwright-powered browser. It offers tools for Google searching, visiting webpages, and capturing screenshots, with content automatically converted to clean markdown format. The implementation handles common web challenges like consent dialogs and bot detection, while maintaining a research session that tracks visited pages and screenshots. Particularly useful for workflows requiring iterative research, source citation, and visual context from web content.",0,0,2024-12-18T03:38:25Z,https://github.com/jevy/mcp-webresearch
Superset,https://www.pulsemcp.com/servers/aptro-superset,aptro,superset-mcp,29.0,,"The Superset MCP Integration provides AI assistants with programmatic access to Apache Superset's data visualization and analytics capabilities through a comprehensive set of tools. Built with Python using FastMCP, it enables operations like dashboard management, chart creation, SQL query execution, and database administration via authenticated API calls. The implementation handles token management, automatic refreshing, and proper error handling to maintain secure connections with Superset instances. It's particularly valuable for users who want to leverage AI assistants to explore data, create visualizations, and manage analytics workflows without leaving their conversational interface.",29,6,2025-04-14T14:51:22Z,https://github.com/aptro/superset-mcp
Dappier (Real-Time Data Search),https://www.pulsemcp.com/servers/dappierai-real-time-data-search,dappierai,dappier-mcp,12.0,,"Dappier MCP Server connects AI assistants to real-time, rights-cleared data from trusted sources through the Model Context Protocol. Developed by Amaan Mohammed at AI20Labs, it provides two main tools: real-time data search for retrieving web search results, financial information, and news; and AI recommendations for personalized content discovery with structured JSON responses. The server integrates with Claude Desktop through a simple configuration process and supports customizable parameters like similarity filtering and search algorithms, making it ideal for workflows requiring up-to-date information from premium publishers without leaving the conversation interface.",12,5,2025-04-27T14:59:25Z,https://github.com/dappierai/dappier-mcp
CCXT Cryptocurrency Exchange,https://www.pulsemcp.com/servers/nayshins-ccxt-cryptocurrency-exchange,nayshins,mcp-server-ccxt,39.0,,"This cryptocurrency market data MCP server, developed by an unnamed creator, integrates with major exchanges through the CCXT library to provide real-time and historical crypto data. Built with Python using the Model Context Protocol SDK, it offers tools for fetching current prices, market summaries, trading volumes, and historical OHLCV data across multiple exchanges. The server implements standardized data formatting and robust error handling for exchange connectivity issues. By abstracting the complexities of crypto API interactions, it enables AI systems to easily analyze market trends and access detailed trading information. This implementation is particularly valuable for applications requiring programmatic access to crypto market data, facilitating use cases such as algorithmic trading, portfolio tracking, and market analysis across various cryptocurrencies and exchanges.",39,9,2025-02-17T18:45:05Z,https://github.com/nayshins/mcp-server-ccxt
Anti-BS,https://www.pulsemcp.com/servers/bmorphism-anti-bullshit,bmorphism,anti-bullshit-mcp-server,17.0,,"This Anti-Bullshit MCP server, developed by Teglon Labs, provides tools for analyzing claims, validating sources, and detecting manipulation using multiple epistemological frameworks. Built with TypeScript and leveraging the Model Context Protocol SDK, it offers empirical, responsible, harmonic, and pluralistic approaches to evaluate information. The implementation focuses on rigorous fact-checking and critical thinking, making it accessible for AI models to assess the credibility and implications of various claims. It's particularly useful for tasks like academic research validation, media literacy enhancement, or combating misinformation in digital content, enabling AI assistants to apply nuanced epistemological analysis without requiring deep expertise in each framework.",17,5,2025-01-15T22:12:03Z,https://github.com/bmorphism/anti-bullshit-mcp-server
Flux Schnell,https://www.pulsemcp.com/servers/ckz-flux-schnell,ckz,flux-img-mcp,1.0,,"This MCP server provides image generation capabilities using the Flux Schnell model on Replicate. Developed by ckz, it offers a simple interface for generating images based on text prompts. The server is built with TypeScript and integrates with the Model Context Protocol SDK. It's designed for use cases requiring AI-powered image creation, such as content generation, visual brainstorming, or enhancing creative workflows.",1,1,2025-03-02T06:39:09Z,https://github.com/ckz/flux-img-mcp
SEC EDGAR,https://www.pulsemcp.com/servers/sec-edgar,stefanoamorelli,sec-edgar-mcp,12.0,,"SEC EDGAR MCP provides a bridge to the SEC EDGAR REST API, enabling AI models to access financial data from public companies. Built with Python and the secedgar library, it offers four key tools for retrieving company submissions, financial concepts, standardized facts, and XBRL frames data. This implementation simplifies the process of extracting structured financial information from SEC filings, making it valuable for financial analysis, investment research, and regulatory compliance use cases.",14,6,2025-04-13T09:10:09Z,https://github.com/stefanoamorelli/sec-edgar-mcp
Wordware,https://www.pulsemcp.com/servers/hugobiais-wordware,hugobiais,wordware-mcp,1.0,,"This MCP server implementation provides a bridge to Wordware's deployed flows, enabling integration of Wordware tools directly within Claude conversations. Developed by Hugo Biais, it offers capabilities for founder research, lead enrichment, saving to Notion, and task solving with Google search and API capabilities. Built using TypeScript and the Model Context Protocol SDK, the server focuses on secure environment variable management and easy setup within the Claude Desktop environment. It is particularly useful for AI applications that need to automate research, enrich sales data, or integrate with external tools like Notion. The implementation includes a tool for dynamically adding new Wordware flows, enhancing its extensibility for future use cases.",1,0,2025-02-21T23:22:59Z,https://github.com/hugobiais/wordware-mcp
Research Notion,https://www.pulsemcp.com/servers/h-yanagawa-research-notion,h-yanagawa,research-mcp-server,1.0,,"This MCP server, developed by Hikari YANAGAWA, integrates with Notion to enable survey data retrieval and creation of survey pages. Built with Python and leveraging libraries like Anthropic, OpenAI, and Pydantic, it provides a standardized interface for AI-powered survey operations. The implementation focuses on bridging AI language models with Notion's database capabilities, allowing for automated survey management and analysis. By connecting to a specified Notion database, this server enables use cases such as generating survey questions, storing responses, and analyzing results, making it particularly useful for research projects that require dynamic survey creation and data collection.",1,4,2025-02-10T01:23:26Z,https://github.com/h-yanagawa/research-mcp-server
OpenAI Agents SDK,https://www.pulsemcp.com/servers/yaxin9luo-openai-agents-sdk,yaxin9luo,openai_agent_library_mcp,0.0,,"OpenAI Agents SDK Documentation MCP server provides AI assistants with access to the OpenAI Agents Python library documentation and GitHub repository. It offers tools for searching documentation, retrieving specific sections, exploring code examples, and accessing API references through web scraping with BeautifulSoup. The server maintains caches for both documentation content and GitHub files to improve performance, and implements robust error handling for failed requests. Particularly valuable for developers who need to quickly reference OpenAI Agents SDK functionality, explore implementation patterns, or find relevant code examples without leaving their AI assistant interface.",0,0,2025-03-23T18:15:45Z,https://github.com/yaxin9luo/openai_agent_library_mcp
Opera Omnia,https://www.pulsemcp.com/servers/triptych-opera-omnia,triptych,opera-omnia-mcp,0.0,,"Opera Omnia MCP server provides access to a rich collection of creative content datasets for games, storytelling, and AI applications. Developed by triptych, it fetches data from the Opera Omnia GitHub repository and exposes tools for listing categories, retrieving datasets, getting random items, filtering content, combining datasets, and generating creative content using templates. The server is built with TypeScript and implements a clean API that works seamlessly with Claude and other AI assistants, making it particularly valuable for developers who need quick access to character concepts, equipment descriptions, RPG elements, and other creative content without leaving their AI assistant interface.",0,1,2025-03-23T21:52:36Z,https://github.com/triptych/opera-omnia-mcp
Google Tasks,https://www.pulsemcp.com/servers/arpitbatra123-googletasks,arpitbatra123,mcp-googletasks,5.0,,"Google Tasks MCP Server provides a bridge between Claude and Google Tasks, allowing users to manage task lists and tasks directly through Claude. Built with TypeScript and the Google Tasks API, it offers a comprehensive set of tools for creating, updating, and organizing tasks, including features like marking tasks as completed, reordering tasks, and clearing completed tasks. The implementation requires Google Cloud authentication and is designed for personal use, making it ideal for users who want to integrate their task management workflow with Claude's conversational interface.",6,2,2025-04-23T09:00:27Z,https://github.com/arpitbatra123/mcp-googletasks
Ableton Live,https://www.pulsemcp.com/servers/ahujasid-ableton-live,ahujasid,ableton-mcp,1505.0,21798.0,"Ableton MCP enables AI assistants to control Ableton Live music production software through a bidirectional communication system. It consists of a Remote Script that runs within Ableton Live and exposes a socket server, paired with a Python MCP server that translates commands into actions. The implementation supports a wide range of music production operations including creating tracks and clips, adding MIDI notes, controlling playback, loading instruments, and browsing the Ableton library. Developed by Siddharth Ahuja, this integration is particularly valuable for AI-assisted music composition, production workflows, and automated sound design without leaving the conversation interface.",1512,164,2025-03-27T10:16:15Z,https://github.com/ahujasid/ableton-mcp
AI Humanizer,https://www.pulsemcp.com/servers/text2go-ai-humanizer,text2go,ai-humanizer-mcp-server,14.0,,"This MCP server, developed by Text2Go, enables AI assistants to detect AI-generated text using multiple detection services. It integrates with the EdgeShop AI API to provide tools for analyzing text using Copyleaks, Hemingway, and other detection algorithms. The server implements robust error handling, input validation, and a standardized interface for AI systems to assess the likelihood of machine-generated content. By connecting AI capabilities with specialized text analysis services, this implementation empowers AI assistants to perform tasks like content authenticity verification, writing style assessment, or plagiarism detection. It is particularly useful for applications requiring content moderation, academic integrity checks, or any scenario where an AI system needs to evaluate and reason about the origin and characteristics of textual content.",14,7,2024-12-27T09:12:39Z,https://github.com/text2go/ai-humanizer-mcp-server
PocketBase,https://www.pulsemcp.com/servers/imiborbas-pocketbase,imiborbas,pocketbase-mcp-server,1.0,,"Provides a TypeScript-based MCP server for interacting with PocketBase, enabling AI assistants to list and manage PocketBase collections. Built with the Model Context Protocol SDK, it offers a flexible configuration system that supports both command-line arguments and environment variables for connecting to PocketBase instances, with a focus on simplifying database interaction through natural language interfaces.",1,1,2025-03-06T14:19:02Z,https://github.com/imiborbas/pocketbase-mcp-server
